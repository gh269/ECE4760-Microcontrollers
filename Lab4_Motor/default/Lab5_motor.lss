
Lab5_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00001fb2  00002026  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fb2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000188  00800138  00001fea  0000205e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000390  00000000  00000000  0000207e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000118d  00000000  00000000  0000240e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000324  00000000  00000000  0000359b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ec8  00000000  00000000  000038bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00004788  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b0  00000000  00000000  00004a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c22  00000000  00000000  00004ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
       4:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__vector_1>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__vector_11>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_13>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_20>
      54:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_21>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_initialize>:
      cc:	52 50 4d 3a 20 00                                   RPM: .

000000d2 <LCD_number>:
      d2:	4e 75 6d 62 65 72 3d 00 00                          Number=..

000000db <__c.1957>:
      db:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf ef       	ldi	r28, 0xFF	; 255
      ee:	d0 e4       	ldi	r29, 0x40	; 64
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
      f4:	11 e0       	ldi	r17, 0x01	; 1
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b1 e0       	ldi	r27, 0x01	; 1
      fa:	e2 eb       	ldi	r30, 0xB2	; 178
      fc:	ff e1       	ldi	r31, 0x1F	; 31
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 33       	cpi	r26, 0x38	; 56
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a8 e3       	ldi	r26, 0x38	; 56
     112:	b1 e0       	ldi	r27, 0x01	; 1
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 3c       	cpi	r26, 0xC0	; 192
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 f2 06 	call	0xde4	; 0xde4 <main>
     122:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

0000012a <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	0b b6       	in	r0, 0x3b	; 59
     134:	0f 92       	push	r0
     136:	11 24       	eor	r1, r1
     138:	2f 92       	push	r2
     13a:	3f 92       	push	r3
     13c:	4f 92       	push	r4
     13e:	5f 92       	push	r5
     140:	6f 92       	push	r6
     142:	7f 92       	push	r7
     144:	8f 92       	push	r8
     146:	9f 92       	push	r9
     148:	af 92       	push	r10
     14a:	bf 92       	push	r11
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	2f 93       	push	r18
     15a:	3f 93       	push	r19
     15c:	4f 93       	push	r20
     15e:	5f 93       	push	r21
     160:	6f 93       	push	r22
     162:	7f 93       	push	r23
     164:	8f 93       	push	r24
     166:	9f 93       	push	r25
     168:	af 93       	push	r26
     16a:	bf 93       	push	r27
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	ef 93       	push	r30
     172:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
  
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     174:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     178:	50 90 74 02 	lds	r5, 0x0274
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     17c:	b0 9b       	sbis	0x16, 0	; 22
     17e:	14 c0       	rjmp	.+40     	; 0x1a8 <__vector_13+0x7e>
    ++kernel.cycles;
     180:	80 91 ab 02 	lds	r24, 0x02AB
     184:	90 91 ac 02 	lds	r25, 0x02AC
     188:	a0 91 ad 02 	lds	r26, 0x02AD
     18c:	b0 91 ae 02 	lds	r27, 0x02AE
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	a1 1d       	adc	r26, r1
     194:	b1 1d       	adc	r27, r1
     196:	80 93 ab 02 	sts	0x02AB, r24
     19a:	90 93 ac 02 	sts	0x02AC, r25
     19e:	a0 93 ad 02 	sts	0x02AD, r26
     1a2:	b0 93 ae 02 	sts	0x02AE, r27
    TIFR1 |= (1<<TOV1) ;
     1a6:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     1a8:	80 91 84 00 	lds	r24, 0x0084
     1ac:	90 91 85 00 	lds	r25, 0x0085
     1b0:	3c 01       	movw	r6, r24
     1b2:	88 24       	eor	r8, r8
     1b4:	99 24       	eor	r9, r9
     1b6:	80 91 ab 02 	lds	r24, 0x02AB
     1ba:	90 91 ac 02 	lds	r25, 0x02AC
     1be:	a0 91 ad 02 	lds	r26, 0x02AD
     1c2:	b0 91 ae 02 	lds	r27, 0x02AE
     1c6:	dc 01       	movw	r26, r24
     1c8:	99 27       	eor	r25, r25
     1ca:	88 27       	eor	r24, r24
     1cc:	68 0e       	add	r6, r24
     1ce:	79 1e       	adc	r7, r25
     1d0:	8a 1e       	adc	r8, r26
     1d2:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     1d4:	40 90 73 02 	lds	r4, 0x0273
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	61 e0       	ldi	r22, 0x01	; 1
     1dc:	ff ef       	ldi	r31, 0xFF	; 255
     1de:	af 2e       	mov	r10, r31
     1e0:	ff ef       	ldi	r31, 0xFF	; 255
     1e2:	bf 2e       	mov	r11, r31
     1e4:	ff ef       	ldi	r31, 0xFF	; 255
     1e6:	cf 2e       	mov	r12, r31
     1e8:	ff e7       	ldi	r31, 0x7F	; 127
     1ea:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     1ec:	eb e0       	ldi	r30, 0x0B	; 11
     1ee:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
  t->state = READYQ;
     1f0:	33 24       	eor	r3, r3
     1f2:	33 94       	inc	r3
      } else if (t->release < nextHit) {
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     1f4:	cb e0       	ldi	r28, 0x0B	; 11
     1f6:	d0 e0       	ldi	r29, 0x00	; 0
     1f8:	43 c0       	rjmp	.+134    	; 0x280 <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     1fa:	62 9d       	mul	r22, r2
     1fc:	d0 01       	movw	r26, r0
     1fe:	11 24       	eor	r1, r1
     200:	ab 58       	subi	r26, 0x8B	; 139
     202:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     204:	1a 96       	adiw	r26, 0x0a	; 10
     206:	8c 91       	ld	r24, X
     208:	1a 97       	sbiw	r26, 0x0a	; 10
     20a:	82 30       	cpi	r24, 0x02	; 2
     20c:	a1 f4       	brne	.+40     	; 0x236 <__vector_13+0x10c>
      if (t->release <= now) {
     20e:	12 96       	adiw	r26, 0x02	; 2
     210:	ed 90       	ld	r14, X+
     212:	fd 90       	ld	r15, X+
     214:	0d 91       	ld	r16, X+
     216:	1c 91       	ld	r17, X
     218:	15 97       	sbiw	r26, 0x05	; 5
     21a:	6e 14       	cp	r6, r14
     21c:	7f 04       	cpc	r7, r15
     21e:	80 06       	cpc	r8, r16
     220:	91 06       	cpc	r9, r17
     222:	20 f0       	brcs	.+8      	; 0x22c <__vector_13+0x102>
  t->state = READYQ;
     224:	1a 96       	adiw	r26, 0x0a	; 10
     226:	3c 92       	st	X, r3
     228:	1a 97       	sbiw	r26, 0x0a	; 10
     22a:	05 c0       	rjmp	.+10     	; 0x236 <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     22c:	ea 14       	cp	r14, r10
     22e:	fb 04       	cpc	r15, r11
     230:	0c 05       	cpc	r16, r12
     232:	1d 05       	cpc	r17, r13
     234:	10 f0       	brcs	.+4      	; 0x23a <__vector_13+0x110>
     236:	86 01       	movw	r16, r12
     238:	75 01       	movw	r14, r10
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     23a:	1a 96       	adiw	r26, 0x0a	; 10
     23c:	8c 91       	ld	r24, X
     23e:	1a 97       	sbiw	r26, 0x0a	; 10
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	d9 f4       	brne	.+54     	; 0x27a <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     244:	87 2f       	mov	r24, r23
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	8c 9f       	mul	r24, r28
     24a:	f0 01       	movw	r30, r0
     24c:	8d 9f       	mul	r24, r29
     24e:	f0 0d       	add	r31, r0
     250:	9c 9f       	mul	r25, r28
     252:	f0 0d       	add	r31, r0
     254:	11 24       	eor	r1, r1
     256:	ed 58       	subi	r30, 0x8D	; 141
     258:	fd 4f       	sbci	r31, 0xFD	; 253
     25a:	16 96       	adiw	r26, 0x06	; 6
     25c:	2d 91       	ld	r18, X+
     25e:	3d 91       	ld	r19, X+
     260:	4d 91       	ld	r20, X+
     262:	5c 91       	ld	r21, X
     264:	19 97       	sbiw	r26, 0x09	; 9
     266:	80 85       	ldd	r24, Z+8	; 0x08
     268:	91 85       	ldd	r25, Z+9	; 0x09
     26a:	a2 85       	ldd	r26, Z+10	; 0x0a
     26c:	b3 85       	ldd	r27, Z+11	; 0x0b
     26e:	28 17       	cp	r18, r24
     270:	39 07       	cpc	r19, r25
     272:	4a 07       	cpc	r20, r26
     274:	5b 07       	cpc	r21, r27
     276:	08 f4       	brcc	.+2      	; 0x27a <__vector_13+0x150>
     278:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     27a:	6f 5f       	subi	r22, 0xFF	; 255
     27c:	57 01       	movw	r10, r14
     27e:	68 01       	movw	r12, r16
     280:	46 16       	cp	r4, r22
     282:	08 f0       	brcs	.+2      	; 0x286 <__vector_13+0x15c>
     284:	ba cf       	rjmp	.-140    	; 0x1fa <__vector_13+0xd0>
    }
  }
  //fprintf(stdout, "Old: %u New: %u\n\r", oldrunning, running);
  //fprintf(stdout, "NumTasks: %u\n\r", kernel.nbrOfTasks);
  //fprintf(stdout, "Current time: %lu\n\r", (unsigned long) trtCurrentTime());
  if (running != oldrunning) { // perform context switch?
     286:	75 15       	cp	r23, r5
     288:	b1 f0       	breq	.+44     	; 0x2b6 <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     28a:	eb e0       	ldi	r30, 0x0B	; 11
     28c:	5e 9e       	mul	r5, r30
     28e:	d0 01       	movw	r26, r0
     290:	11 24       	eor	r1, r1
     292:	ab 58       	subi	r26, 0x8B	; 139
     294:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     296:	8d b7       	in	r24, 0x3d	; 61
     298:	8c 93       	st	X, r24
    t->sph = SPH;
     29a:	8e b7       	in	r24, 0x3e	; 62
     29c:	11 96       	adiw	r26, 0x01	; 1
     29e:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     2a0:	7e 9f       	mul	r23, r30
     2a2:	f0 01       	movw	r30, r0
     2a4:	11 24       	eor	r1, r1
     2a6:	eb 58       	subi	r30, 0x8B	; 139
     2a8:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     2aa:	81 81       	ldd	r24, Z+1	; 0x01
     2ac:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     2ae:	80 81       	ld	r24, Z
     2b0:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     2b2:	70 93 74 02 	sts	0x0274, r23

  }

  kernel.nextHit = nextHit;  
     2b6:	a0 92 af 02 	sts	0x02AF, r10
     2ba:	b0 92 b0 02 	sts	0x02B0, r11
     2be:	c0 92 b1 02 	sts	0x02B1, r12
     2c2:	d0 92 b2 02 	sts	0x02B2, r13

  now = (kernel.cycles << 16) + TCNT1;
     2c6:	20 91 84 00 	lds	r18, 0x0084
     2ca:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	80 91 ab 02 	lds	r24, 0x02AB
     2d6:	90 91 ac 02 	lds	r25, 0x02AC
     2da:	a0 91 ad 02 	lds	r26, 0x02AD
     2de:	b0 91 ae 02 	lds	r27, 0x02AE
     2e2:	dc 01       	movw	r26, r24
     2e4:	99 27       	eor	r25, r25
     2e6:	88 27       	eor	r24, r24
     2e8:	28 0f       	add	r18, r24
     2ea:	39 1f       	adc	r19, r25
     2ec:	4a 1f       	adc	r20, r26
     2ee:	5b 1f       	adc	r21, r27
     2f0:	d6 01       	movw	r26, r12
     2f2:	c5 01       	movw	r24, r10
     2f4:	82 1b       	sub	r24, r18
     2f6:	93 0b       	sbc	r25, r19
     2f8:	a4 0b       	sbc	r26, r20
     2fa:	b5 0b       	sbc	r27, r21
     2fc:	9c 01       	movw	r18, r24
     2fe:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     300:	84 30       	cpi	r24, 0x04	; 4
     302:	91 05       	cpc	r25, r1
     304:	a1 05       	cpc	r26, r1
     306:	b1 05       	cpc	r27, r1
     308:	24 f4       	brge	.+8      	; 0x312 <__vector_13+0x1e8>
     30a:	24 e0       	ldi	r18, 0x04	; 4
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     312:	80 91 84 00 	lds	r24, 0x0084
     316:	90 91 85 00 	lds	r25, 0x0085
     31a:	a0 e0       	ldi	r26, 0x00	; 0
     31c:	b0 e0       	ldi	r27, 0x00	; 0
     31e:	82 0f       	add	r24, r18
     320:	93 1f       	adc	r25, r19
     322:	a4 1f       	adc	r26, r20
     324:	b5 1f       	adc	r27, r21
     326:	80 50       	subi	r24, 0x00	; 0
     328:	90 40       	sbci	r25, 0x00	; 0
     32a:	a1 40       	sbci	r26, 0x01	; 1
     32c:	b0 40       	sbci	r27, 0x00	; 0
     32e:	38 f4       	brcc	.+14     	; 0x33e <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     330:	80 91 84 00 	lds	r24, 0x0084
     334:	90 91 85 00 	lds	r25, 0x0085
     338:	82 0f       	add	r24, r18
     33a:	93 1f       	adc	r25, r19
     33c:	0e c0       	rjmp	.+28     	; 0x35a <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     33e:	80 91 84 00 	lds	r24, 0x0084
     342:	90 91 85 00 	lds	r25, 0x0085
     346:	8c 5f       	subi	r24, 0xFC	; 252
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	28 f4       	brcc	.+10     	; 0x356 <__vector_13+0x22c>
    OCR1A = 0x0000;
     34c:	10 92 89 00 	sts	0x0089, r1
     350:	10 92 88 00 	sts	0x0088, r1
     354:	06 c0       	rjmp	.+12     	; 0x362 <__vector_13+0x238>
  } else {
    OCR1A = 4;
     356:	84 e0       	ldi	r24, 0x04	; 4
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	90 93 89 00 	sts	0x0089, r25
     35e:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	80 93 6f 00 	sts	0x006F, r24
}
     368:	ff 91       	pop	r31
     36a:	ef 91       	pop	r30
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	bf 91       	pop	r27
     372:	af 91       	pop	r26
     374:	9f 91       	pop	r25
     376:	8f 91       	pop	r24
     378:	7f 91       	pop	r23
     37a:	6f 91       	pop	r22
     37c:	5f 91       	pop	r21
     37e:	4f 91       	pop	r20
     380:	3f 91       	pop	r19
     382:	2f 91       	pop	r18
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	7f 90       	pop	r7
     39a:	6f 90       	pop	r6
     39c:	5f 90       	pop	r5
     39e:	4f 90       	pop	r4
     3a0:	3f 90       	pop	r3
     3a2:	2f 90       	pop	r2
     3a4:	0f 90       	pop	r0
     3a6:	0b be       	out	0x3b, r0	; 59
     3a8:	0f 90       	pop	r0
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	0f 90       	pop	r0
     3ae:	1f 90       	pop	r1
     3b0:	18 95       	reti

000003b2 <trtInitKernel>:


/********************************** API ************************************/

void trtInitKernel(int idlestack) {
     3b2:	10 92 85 00 	sts	0x0085, r1
     3b6:	10 92 84 00 	sts	0x0084, r1

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
  TCCR1A = 0x00;         /* normal operation */
     3ba:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     3be:	25 e0       	ldi	r18, 0x05	; 5
     3c0:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     3c4:	22 e0       	ldi	r18, 0x02	; 2
     3c6:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     3ca:	2f ef       	ldi	r18, 0xFF	; 255
     3cc:	30 e4       	ldi	r19, 0x40	; 64
     3ce:	28 1b       	sub	r18, r24
     3d0:	39 0b       	sbc	r19, r25
     3d2:	30 93 aa 02 	sts	0x02AA, r19
     3d6:	20 93 a9 02 	sts	0x02A9, r18
  kernel.nbrOfTasks = 0;
     3da:	10 92 73 02 	sts	0x0273, r1
  kernel.running = 0;
     3de:	10 92 74 02 	sts	0x0274, r1

  kernel.cycles = 0x0000;
     3e2:	10 92 ab 02 	sts	0x02AB, r1
     3e6:	10 92 ac 02 	sts	0x02AC, r1
     3ea:	10 92 ad 02 	sts	0x02AD, r1
     3ee:	10 92 ae 02 	sts	0x02AE, r1
  kernel.nextHit = 0x7FFFFFFF;
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	9f ef       	ldi	r25, 0xFF	; 255
     3f6:	af ef       	ldi	r26, 0xFF	; 255
     3f8:	bf e7       	ldi	r27, 0x7F	; 127
     3fa:	80 93 af 02 	sts	0x02AF, r24
     3fe:	90 93 b0 02 	sts	0x02B0, r25
     402:	a0 93 b1 02 	sts	0x02B1, r26
     406:	b0 93 b2 02 	sts	0x02B2, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     40a:	80 93 7b 02 	sts	0x027B, r24
     40e:	90 93 7c 02 	sts	0x027C, r25
     412:	a0 93 7d 02 	sts	0x027D, r26
     416:	b0 93 7e 02 	sts	0x027E, r27
  kernel.tasks[0].release = 0x00000000;
     41a:	10 92 77 02 	sts	0x0277, r1
     41e:	10 92 78 02 	sts	0x0278, r1
     422:	10 92 79 02 	sts	0x0279, r1
     426:	10 92 7a 02 	sts	0x027A, r1

  sei(); /* set enabled interrupts */
     42a:	78 94       	sei
}
     42c:	08 95       	ret

0000042e <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     42e:	8f 92       	push	r8
     430:	9f 92       	push	r9
     432:	af 92       	push	r10
     434:	bf 92       	push	r11
     436:	cf 92       	push	r12
     438:	df 92       	push	r13
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	49 01       	movw	r8, r18
     448:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     44a:	f8 94       	cli

  ++kernel.nbrOfTasks;
     44c:	20 91 73 02 	lds	r18, 0x0273
     450:	2f 5f       	subi	r18, 0xFF	; 255
     452:	20 93 73 02 	sts	0x0273, r18

  sp = kernel.memptr;
     456:	c0 91 a9 02 	lds	r28, 0x02A9
     45a:	d0 91 aa 02 	lds	r29, 0x02AA
  kernel.memptr -= stacksize;  // decrease free mem ptr
     45e:	9e 01       	movw	r18, r28
     460:	26 1b       	sub	r18, r22
     462:	37 0b       	sbc	r19, r23
     464:	30 93 aa 02 	sts	0x02AA, r19
     468:	20 93 a9 02 	sts	0x02A9, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     46c:	88 83       	st	Y, r24
     46e:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     470:	92 93       	st	-Z, r25
     472:	31 97       	sbiw	r30, 0x01	; 1
     474:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     476:	ce 01       	movw	r24, r28
     478:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     47a:	1c 92       	st	X, r1
     47c:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     47e:	a8 17       	cp	r26, r24
     480:	b9 07       	cpc	r27, r25
     482:	d9 f7       	brne	.-10     	; 0x47a <trtCreateTask+0x4c>
     484:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     486:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     488:	d2 92       	st	-Z, r13
     48a:	31 97       	sbiw	r30, 0x01	; 1
     48c:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     48e:	9e 01       	movw	r18, r28
     490:	24 52       	subi	r18, 0x24	; 36
     492:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     494:	1c 92       	st	X, r1
     496:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     498:	a2 17       	cp	r26, r18
     49a:	b3 07       	cpc	r27, r19
     49c:	d9 f7       	brne	.-10     	; 0x494 <trtCreateTask+0x66>
     49e:	9f 01       	movw	r18, r30
     4a0:	26 50       	subi	r18, 0x06	; 6
     4a2:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     4a4:	e0 91 73 02 	lds	r30, 0x0273
     4a8:	8b e0       	ldi	r24, 0x0B	; 11
     4aa:	e8 9f       	mul	r30, r24
     4ac:	f0 01       	movw	r30, r0
     4ae:	11 24       	eor	r1, r1
     4b0:	eb 58       	subi	r30, 0x8B	; 139
     4b2:	fd 4f       	sbci	r31, 0xFD	; 253
  ///*
  t->release = release;
     4b4:	82 82       	std	Z+2, r8	; 0x02
     4b6:	93 82       	std	Z+3, r9	; 0x03
     4b8:	a4 82       	std	Z+4, r10	; 0x04
     4ba:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     4bc:	e6 82       	std	Z+6, r14	; 0x06
     4be:	f7 82       	std	Z+7, r15	; 0x07
     4c0:	00 87       	std	Z+8, r16	; 0x08
     4c2:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	82 87       	std	Z+10, r24	; 0x0a
  //*/
  t->spl = lo8(sp);       // store stack pointer
     4c8:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     4ca:	31 83       	std	Z+1, r19	; 0x01
  

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     4cc:	0e 94 95 00 	call	0x12a	; 0x12a <__vector_13>

}
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	df 90       	pop	r13
     4de:	cf 90       	pop	r12
     4e0:	bf 90       	pop	r11
     4e2:	af 90       	pop	r10
     4e4:	9f 90       	pop	r9
     4e6:	8f 90       	pop	r8
     4e8:	08 95       	ret

000004ea <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {
     4ea:	f8 94       	cli

  cli(); // turn off interrupts

  kernel.semaphores[semnbr-1] = initVal;
     4ec:	e3 e7       	ldi	r30, 0x73	; 115
     4ee:	f2 e0       	ldi	r31, 0x02	; 2
     4f0:	e8 0f       	add	r30, r24
     4f2:	f1 1d       	adc	r31, r1
     4f4:	65 a7       	std	Z+45, r22	; 0x2d
  
  sei(); // set enabled interrupts;
     4f6:	78 94       	sei
}
     4f8:	08 95       	ret

000004fa <trtWait>:

void trtWait(uint8_t semnbr) {
     4fa:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     4fc:	20 91 74 02 	lds	r18, 0x0274

  cli(); // disable interrupts
     500:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     502:	e8 2f       	mov	r30, r24
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	e0 56       	subi	r30, 0x60	; 96
     508:	fd 4f       	sbci	r31, 0xFD	; 253
  if ((*s) > 0) {
     50a:	80 81       	ld	r24, Z
     50c:	88 23       	and	r24, r24
     50e:	19 f0       	breq	.+6      	; 0x516 <trtWait+0x1c>
    (*s)--;
     510:	81 50       	subi	r24, 0x01	; 1
     512:	80 83       	st	Z, r24
     514:	10 c0       	rjmp	.+32     	; 0x536 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	8b e0       	ldi	r24, 0x0B	; 11
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	28 9f       	mul	r18, r24
     51e:	f0 01       	movw	r30, r0
     520:	29 9f       	mul	r18, r25
     522:	f0 0d       	add	r31, r0
     524:	38 9f       	mul	r19, r24
     526:	f0 0d       	add	r31, r0
     528:	11 24       	eor	r1, r1
     52a:	eb 58       	subi	r30, 0x8B	; 139
     52c:	fd 4f       	sbci	r31, 0xFD	; 253
     52e:	4e 5f       	subi	r20, 0xFE	; 254
     530:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     532:	0e 94 95 00 	call	0x12a	; 0x12a <__vector_13>
  }

  sei(); // reenable interrupts
     536:	78 94       	sei
}
     538:	08 95       	ret

0000053a <trtSignal>:

void trtSignal(uint8_t semnbr) {
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     542:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     544:	00 91 73 02 	lds	r16, 0x0273
     548:	e1 e0       	ldi	r30, 0x01	; 1
     54a:	4f ef       	ldi	r20, 0xFF	; 255
     54c:	5f ef       	ldi	r21, 0xFF	; 255
     54e:	6f ef       	ldi	r22, 0xFF	; 255
     550:	7f ef       	ldi	r23, 0xFF	; 255
     552:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     554:	8b e0       	ldi	r24, 0x0B	; 11
     556:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     558:	21 2f       	mov	r18, r17
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	2e 5f       	subi	r18, 0xFE	; 254
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
     560:	1e c0       	rjmp	.+60     	; 0x59e <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     562:	ef 9d       	mul	r30, r15
     564:	d0 01       	movw	r26, r0
     566:	11 24       	eor	r1, r1
     568:	ab 58       	subi	r26, 0x8B	; 139
     56a:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     56c:	1a 96       	adiw	r26, 0x0a	; 10
     56e:	8c 91       	ld	r24, X
     570:	1a 97       	sbiw	r26, 0x0a	; 10
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	82 17       	cp	r24, r18
     576:	93 07       	cpc	r25, r19
     578:	69 f4       	brne	.+26     	; 0x594 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     57a:	16 96       	adiw	r26, 0x06	; 6
     57c:	8d 91       	ld	r24, X+
     57e:	9d 91       	ld	r25, X+
     580:	0d 90       	ld	r0, X+
     582:	bc 91       	ld	r27, X
     584:	a0 2d       	mov	r26, r0
     586:	48 17       	cp	r20, r24
     588:	59 07       	cpc	r21, r25
     58a:	6a 07       	cpc	r22, r26
     58c:	7b 07       	cpc	r23, r27
     58e:	10 f0       	brcs	.+4      	; 0x594 <trtSignal+0x5a>
     590:	fe 2f       	mov	r31, r30
     592:	02 c0       	rjmp	.+4      	; 0x598 <trtSignal+0x5e>
     594:	db 01       	movw	r26, r22
     596:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     598:	ef 5f       	subi	r30, 0xFF	; 255
     59a:	ac 01       	movw	r20, r24
     59c:	bd 01       	movw	r22, r26
     59e:	0e 17       	cp	r16, r30
     5a0:	00 f7       	brcc	.-64     	; 0x562 <trtSignal+0x28>
  minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     5a2:	ff 23       	and	r31, r31
     5a4:	41 f4       	brne	.+16     	; 0x5b6 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     5a6:	e1 2f       	mov	r30, r17
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	ee 58       	subi	r30, 0x8E	; 142
     5ac:	fd 4f       	sbci	r31, 0xFD	; 253
     5ae:	86 a5       	ldd	r24, Z+46	; 0x2e
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	86 a7       	std	Z+46, r24	; 0x2e
     5b4:	11 c0       	rjmp	.+34     	; 0x5d8 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     5b6:	2f 2f       	mov	r18, r31
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	8b e0       	ldi	r24, 0x0B	; 11
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	28 9f       	mul	r18, r24
     5c0:	f0 01       	movw	r30, r0
     5c2:	29 9f       	mul	r18, r25
     5c4:	f0 0d       	add	r31, r0
     5c6:	38 9f       	mul	r19, r24
     5c8:	f0 0d       	add	r31, r0
     5ca:	11 24       	eor	r1, r1
     5cc:	ed 58       	subi	r30, 0x8D	; 141
     5ce:	fd 4f       	sbci	r31, 0xFD	; 253
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5d4:	0e 94 95 00 	call	0x12a	; 0x12a <__vector_13>
  }

  sei(); // reenable interrupts
     5d8:	78 94       	sei
}
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	08 95       	ret

000005e2 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {
     5e2:	20 91 84 00 	lds	r18, 0x0084
     5e6:	30 91 85 00 	lds	r19, 0x0085
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	80 91 ab 02 	lds	r24, 0x02AB
     5f2:	90 91 ac 02 	lds	r25, 0x02AC
     5f6:	a0 91 ad 02 	lds	r26, 0x02AD
     5fa:	b0 91 ae 02 	lds	r27, 0x02AE
     5fe:	dc 01       	movw	r26, r24
     600:	99 27       	eor	r25, r25
     602:	88 27       	eor	r24, r24
     604:	28 0f       	add	r18, r24
     606:	39 1f       	adc	r19, r25
     608:	4a 1f       	adc	r20, r26
     60a:	5b 1f       	adc	r21, r27

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
}
     60c:	b9 01       	movw	r22, r18
     60e:	ca 01       	movw	r24, r20
     610:	08 95       	ret

00000612 <trtSleepUntil>:


void trtSleepUntil(uint32_t release, uint32_t deadline) {
     612:	e0 91 74 02 	lds	r30, 0x0274
     616:	ab e0       	ldi	r26, 0x0B	; 11
     618:	ea 9f       	mul	r30, r26
     61a:	f0 01       	movw	r30, r0
     61c:	11 24       	eor	r1, r1
     61e:	eb 58       	subi	r30, 0x8B	; 139
     620:	fd 4f       	sbci	r31, 0xFD	; 253

  struct task *t;

  t = &kernel.tasks[kernel.running];

  cli(); // turn off interrupts
     622:	f8 94       	cli

  t->state = TIMEQ;
     624:	a2 e0       	ldi	r26, 0x02	; 2
     626:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     628:	62 83       	std	Z+2, r22	; 0x02
     62a:	73 83       	std	Z+3, r23	; 0x03
     62c:	84 83       	std	Z+4, r24	; 0x04
     62e:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     630:	26 83       	std	Z+6, r18	; 0x06
     632:	37 83       	std	Z+7, r19	; 0x07
     634:	40 87       	std	Z+8, r20	; 0x08
     636:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     638:	0e 94 95 00 	call	0x12a	; 0x12a <__vector_13>
}
     63c:	08 95       	ret

0000063e <trtGetRelease>:


uint32_t trtGetRelease(void) {
     63e:	80 91 74 02 	lds	r24, 0x0274
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	2b e0       	ldi	r18, 0x0B	; 11
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	82 9f       	mul	r24, r18
     64a:	f0 01       	movw	r30, r0
     64c:	83 9f       	mul	r24, r19
     64e:	f0 0d       	add	r31, r0
     650:	92 9f       	mul	r25, r18
     652:	f0 0d       	add	r31, r0
     654:	11 24       	eor	r1, r1
     656:	ed 58       	subi	r30, 0x8D	; 141
     658:	fd 4f       	sbci	r31, 0xFD	; 253
     65a:	df 01       	movw	r26, r30
     65c:	14 96       	adiw	r26, 0x04	; 4
     65e:	64 81       	ldd	r22, Z+4	; 0x04
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	7c 91       	ld	r23, X
     664:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     666:	12 96       	adiw	r26, 0x02	; 2
     668:	8c 91       	ld	r24, X
     66a:	12 97       	sbiw	r26, 0x02	; 2
     66c:	13 96       	adiw	r26, 0x03	; 3
     66e:	9c 91       	ld	r25, X
     670:	08 95       	ret

00000672 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     672:	80 91 74 02 	lds	r24, 0x0274
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	2b e0       	ldi	r18, 0x0B	; 11
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	82 9f       	mul	r24, r18
     67e:	f0 01       	movw	r30, r0
     680:	83 9f       	mul	r24, r19
     682:	f0 0d       	add	r31, r0
     684:	92 9f       	mul	r25, r18
     686:	f0 0d       	add	r31, r0
     688:	11 24       	eor	r1, r1
     68a:	ed 58       	subi	r30, 0x8D	; 141
     68c:	fd 4f       	sbci	r31, 0xFD	; 253
     68e:	df 01       	movw	r26, r30
     690:	18 96       	adiw	r26, 0x08	; 8
     692:	60 85       	ldd	r22, Z+8	; 0x08
     694:	11 96       	adiw	r26, 0x01	; 1
     696:	7c 91       	ld	r23, X
     698:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     69a:	12 96       	adiw	r26, 0x02	; 2
     69c:	8c 91       	ld	r24, X
     69e:	12 97       	sbiw	r26, 0x02	; 2
     6a0:	13 96       	adiw	r26, 0x03	; 3
     6a2:	9c 91       	ld	r25, X
     6a4:	08 95       	ret

000006a6 <trtTerminate>:

void trtTerminate(void) {
     6a6:	f8 94       	cli

  cli();

  kernel.tasks[kernel.running].state = TERMINATED;
     6a8:	80 91 74 02 	lds	r24, 0x0274
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	2b e0       	ldi	r18, 0x0B	; 11
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	82 9f       	mul	r24, r18
     6b4:	f0 01       	movw	r30, r0
     6b6:	83 9f       	mul	r24, r19
     6b8:	f0 0d       	add	r31, r0
     6ba:	92 9f       	mul	r25, r18
     6bc:	f0 0d       	add	r31, r0
     6be:	11 24       	eor	r1, r1
     6c0:	ed 58       	subi	r30, 0x8D	; 141
     6c2:	fd 4f       	sbci	r31, 0xFD	; 253
     6c4:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     6c6:	0e 94 95 00 	call	0x12a	; 0x12a <__vector_13>
}
     6ca:	08 95       	ret

000006cc <trtAccept>:

// --- added by bruce land --------------
uint8_t trtAccept(uint8_t semnbr) {
     6cc:	f8 94       	cli
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts

  s = &kernel.semaphores[semnbr-1];
     6ce:	e8 2f       	mov	r30, r24
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	e0 56       	subi	r30, 0x60	; 96
     6d4:	fd 4f       	sbci	r31, 0xFD	; 253
  temp = *s ;
     6d6:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     6d8:	88 23       	and	r24, r24
     6da:	19 f0       	breq	.+6      	; 0x6e2 <trtAccept+0x16>
    (*s)--;
     6dc:	81 50       	subi	r24, 0x01	; 1
     6de:	80 83       	st	Z, r24
     6e0:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     6e2:	78 94       	sei
  return temp ;
}
     6e4:	08 95       	ret

000006e6 <trt_uart_init>:
/*
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
void
trt_uart_init(void)
{
     6e6:	87 e6       	ldi	r24, 0x67	; 103
     6e8:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     6ec:	e1 ec       	ldi	r30, 0xC1	; 193
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	88 e1       	ldi	r24, 0x18	; 24
     6f2:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     6f4:	10 92 8b 01 	sts	0x018B, r1
     6f8:	10 92 8a 01 	sts	0x018A, r1
  tx_out = 0;
     6fc:	10 92 8d 01 	sts	0x018D, r1
     700:	10 92 8c 01 	sts	0x018C, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     704:	80 81       	ld	r24, Z
     706:	80 68       	ori	r24, 0x80	; 128
     708:	80 83       	st	Z, r24
}
     70a:	08 95       	ret

0000070c <__vector_21>:



ISR( USART0_UDRE_vect )
{
     70c:	1f 92       	push	r1
     70e:	0f 92       	push	r0
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	0f 92       	push	r0
     714:	0b b6       	in	r0, 0x3b	; 59
     716:	0f 92       	push	r0
     718:	11 24       	eor	r1, r1
     71a:	2f 93       	push	r18
     71c:	3f 93       	push	r19
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	ef 93       	push	r30
     724:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     726:	20 91 8a 01 	lds	r18, 0x018A
     72a:	30 91 8b 01 	lds	r19, 0x018B
     72e:	80 91 8c 01 	lds	r24, 0x018C
     732:	90 91 8d 01 	lds	r25, 0x018D
     736:	28 17       	cp	r18, r24
     738:	39 07       	cpc	r19, r25
     73a:	31 f4       	brne	.+12     	; 0x748 <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     73c:	80 91 c1 00 	lds	r24, 0x00C1
     740:	8f 7d       	andi	r24, 0xDF	; 223
     742:	80 93 c1 00 	sts	0x00C1, r24
     746:	1d c0       	rjmp	.+58     	; 0x782 <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     748:	e0 91 8c 01 	lds	r30, 0x018C
     74c:	f0 91 8d 01 	lds	r31, 0x018D
     750:	e2 57       	subi	r30, 0x72	; 114
     752:	fe 4f       	sbci	r31, 0xFE	; 254
     754:	80 81       	ld	r24, Z
     756:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     75a:	80 91 8c 01 	lds	r24, 0x018C
     75e:	90 91 8d 01 	lds	r25, 0x018D
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	90 93 8d 01 	sts	0x018D, r25
     768:	80 93 8c 01 	sts	0x018C, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     76c:	80 91 8c 01 	lds	r24, 0x018C
     770:	90 91 8d 01 	lds	r25, 0x018D
     774:	88 3c       	cpi	r24, 0xC8	; 200
     776:	91 05       	cpc	r25, r1
     778:	21 f4       	brne	.+8      	; 0x782 <__vector_21+0x76>
     77a:	10 92 8d 01 	sts	0x018D, r1
     77e:	10 92 8c 01 	sts	0x018C, r1
  }
}
     782:	ff 91       	pop	r31
     784:	ef 91       	pop	r30
     786:	9f 91       	pop	r25
     788:	8f 91       	pop	r24
     78a:	3f 91       	pop	r19
     78c:	2f 91       	pop	r18
     78e:	0f 90       	pop	r0
     790:	0b be       	out	0x3b, r0	; 59
     792:	0f 90       	pop	r0
     794:	0f be       	out	0x3f, r0	; 63
     796:	0f 90       	pop	r0
     798:	1f 90       	pop	r1
     79a:	18 95       	reti

0000079c <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     79c:	1f 93       	push	r17
     79e:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     7a0:	8a 30       	cpi	r24, 0x0A	; 10
     7a2:	19 f4       	brne	.+6      	; 0x7aa <uart_putchar+0xe>
     7a4:	8d e0       	ldi	r24, 0x0D	; 13
     7a6:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
  char i = tx_in;
     7aa:	80 91 8a 01 	lds	r24, 0x018A
     7ae:	90 91 8b 01 	lds	r25, 0x018B
  i++;
     7b2:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     7b4:	88 3c       	cpi	r24, 0xC8	; 200
     7b6:	09 f4       	brne	.+2      	; 0x7ba <uart_putchar+0x1e>
     7b8:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     7ba:	e0 91 8a 01 	lds	r30, 0x018A
     7be:	f0 91 8b 01 	lds	r31, 0x018B
     7c2:	e2 57       	subi	r30, 0x72	; 114
     7c4:	fe 4f       	sbci	r31, 0xFE	; 254
     7c6:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     7c8:	28 2f       	mov	r18, r24
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	80 91 8c 01 	lds	r24, 0x018C
     7d0:	90 91 8d 01 	lds	r25, 0x018D
     7d4:	28 17       	cp	r18, r24
     7d6:	39 07       	cpc	r19, r25
     7d8:	c9 f3       	breq	.-14     	; 0x7cc <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     7da:	30 93 8b 01 	sts	0x018B, r19
     7de:	20 93 8a 01 	sts	0x018A, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     7e2:	80 91 c1 00 	lds	r24, 0x00C1
     7e6:	80 62       	ori	r24, 0x20	; 32
     7e8:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	1f 91       	pop	r17
     7f2:	08 95       	ret

000007f4 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     7f4:	1f 92       	push	r1
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	0f 92       	push	r0
     7fc:	0b b6       	in	r0, 0x3b	; 59
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	2f 93       	push	r18
     804:	3f 93       	push	r19
     806:	4f 93       	push	r20
     808:	5f 93       	push	r21
     80a:	6f 93       	push	r22
     80c:	7f 93       	push	r23
     80e:	8f 93       	push	r24
     810:	9f 93       	push	r25
     812:	af 93       	push	r26
     814:	bf 93       	push	r27
     816:	ef 93       	push	r30
     818:	ff 93       	push	r31
	trt_rx_c = UDR0;
     81a:	80 91 c6 00 	lds	r24, 0x00C6
     81e:	80 93 b7 02 	sts	0x02B7, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	0e 94 9d 02 	call	0x53a	; 0x53a <trtSignal>
}
     828:	ff 91       	pop	r31
     82a:	ef 91       	pop	r30
     82c:	bf 91       	pop	r27
     82e:	af 91       	pop	r26
     830:	9f 91       	pop	r25
     832:	8f 91       	pop	r24
     834:	7f 91       	pop	r23
     836:	6f 91       	pop	r22
     838:	5f 91       	pop	r21
     83a:	4f 91       	pop	r20
     83c:	3f 91       	pop	r19
     83e:	2f 91       	pop	r18
     840:	0f 90       	pop	r0
     842:	0b be       	out	0x3b, r0	; 59
     844:	0f 90       	pop	r0
     846:	0f be       	out	0x3f, r0	; 63
     848:	0f 90       	pop	r0
     84a:	1f 90       	pop	r1
     84c:	18 95       	reti

0000084e <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     85c:	80 91 38 01 	lds	r24, 0x0138
     860:	90 91 39 01 	lds	r25, 0x0139
     864:	89 2b       	or	r24, r25
     866:	09 f0       	breq	.+2      	; 0x86a <uart_getchar+0x1c>
     868:	a2 c0       	rjmp	.+324    	; 0x9ae <uart_getchar+0x160>
     86a:	0a e3       	ldi	r16, 0x3A	; 58
     86c:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	0e 94 7d 02 	call	0x4fa	; 0x4fa <trtWait>
	if (UCSR0A & _BV(FE0))
     874:	80 91 c0 00 	lds	r24, 0x00C0
     878:	84 ff       	sbrs	r24, 4
     87a:	03 c0       	rjmp	.+6      	; 0x882 <uart_getchar+0x34>
     87c:	2e ef       	ldi	r18, 0xFE	; 254
     87e:	3f ef       	ldi	r19, 0xFF	; 255
     880:	aa c0       	rjmp	.+340    	; 0x9d6 <uart_getchar+0x188>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     882:	80 91 c0 00 	lds	r24, 0x00C0
     886:	83 fd       	sbrc	r24, 3
     888:	a4 c0       	rjmp	.+328    	; 0x9d2 <uart_getchar+0x184>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     88a:	90 91 b7 02 	lds	r25, 0x02B7

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     88e:	9d 30       	cpi	r25, 0x0D	; 13
     890:	11 f0       	breq	.+4      	; 0x896 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     892:	9a 30       	cpi	r25, 0x0A	; 10
     894:	81 f4       	brne	.+32     	; 0x8b6 <uart_getchar+0x68>
	  {
	    *cp = c;
     896:	8a e0       	ldi	r24, 0x0A	; 10
     898:	f8 01       	movw	r30, r16
     89a:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     89c:	b7 01       	movw	r22, r14
     89e:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
	    rxp = b;
     8a2:	8a e3       	ldi	r24, 0x3A	; 58
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	90 93 39 01 	sts	0x0139, r25
     8aa:	80 93 38 01 	sts	0x0138, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	0e 94 9d 02 	call	0x53a	; 0x53a <trtSignal>
     8b4:	7c c0       	rjmp	.+248    	; 0x9ae <uart_getchar+0x160>
	    break;
	  }
	else if (c == '\t')
     8b6:	99 30       	cpi	r25, 0x09	; 9
     8b8:	09 f4       	brne	.+2      	; 0x8bc <uart_getchar+0x6e>
     8ba:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     8bc:	89 2f       	mov	r24, r25
     8be:	80 52       	subi	r24, 0x20	; 32
     8c0:	8f 35       	cpi	r24, 0x5F	; 95
     8c2:	10 f0       	brcs	.+4      	; 0x8c8 <uart_getchar+0x7a>
     8c4:	90 3a       	cpi	r25, 0xA0	; 160
     8c6:	78 f0       	brcs	.+30     	; 0x8e6 <uart_getchar+0x98>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     8c8:	f1 e0       	ldi	r31, 0x01	; 1
     8ca:	09 38       	cpi	r16, 0x89	; 137
     8cc:	1f 07       	cpc	r17, r31
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <uart_getchar+0x88>
	      uart_putchar('\a', stream);
     8d0:	b7 01       	movw	r22, r14
     8d2:	87 e0       	ldi	r24, 0x07	; 7
     8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <uart_getchar+0x92>
	    else
	      {
		*cp++ = c;
     8d6:	f8 01       	movw	r30, r16
     8d8:	91 93       	st	Z+, r25
     8da:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     8dc:	b7 01       	movw	r22, r14
     8de:	89 2f       	mov	r24, r25
     8e0:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
     8e4:	c4 cf       	rjmp	.-120    	; 0x86e <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     8e6:	92 31       	cpi	r25, 0x12	; 18
     8e8:	39 f1       	breq	.+78     	; 0x938 <uart_getchar+0xea>
     8ea:	93 31       	cpi	r25, 0x13	; 19
     8ec:	38 f4       	brcc	.+14     	; 0x8fc <uart_getchar+0xae>
     8ee:	93 30       	cpi	r25, 0x03	; 3
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <uart_getchar+0xa6>
     8f2:	6f c0       	rjmp	.+222    	; 0x9d2 <uart_getchar+0x184>
     8f4:	98 30       	cpi	r25, 0x08	; 8
     8f6:	09 f0       	breq	.+2      	; 0x8fa <uart_getchar+0xac>
     8f8:	ba cf       	rjmp	.-140    	; 0x86e <uart_getchar+0x20>
     8fa:	09 c0       	rjmp	.+18     	; 0x90e <uart_getchar+0xc0>
     8fc:	97 31       	cpi	r25, 0x17	; 23
     8fe:	09 f4       	brne	.+2      	; 0x902 <uart_getchar+0xb4>
     900:	4b c0       	rjmp	.+150    	; 0x998 <uart_getchar+0x14a>
     902:	9f 37       	cpi	r25, 0x7F	; 127
     904:	21 f0       	breq	.+8      	; 0x90e <uart_getchar+0xc0>
     906:	95 31       	cpi	r25, 0x15	; 21
     908:	09 f0       	breq	.+2      	; 0x90c <uart_getchar+0xbe>
     90a:	b1 cf       	rjmp	.-158    	; 0x86e <uart_getchar+0x20>
     90c:	32 c0       	rjmp	.+100    	; 0x972 <uart_getchar+0x124>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     90e:	f1 e0       	ldi	r31, 0x01	; 1
     910:	0a 33       	cpi	r16, 0x3A	; 58
     912:	1f 07       	cpc	r17, r31
     914:	09 f0       	breq	.+2      	; 0x918 <uart_getchar+0xca>
     916:	08 f4       	brcc	.+2      	; 0x91a <uart_getchar+0xcc>
     918:	aa cf       	rjmp	.-172    	; 0x86e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     91a:	b7 01       	movw	r22, r14
     91c:	88 e0       	ldi	r24, 0x08	; 8
     91e:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
		uart_putchar(' ', stream);
     922:	b7 01       	movw	r22, r14
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
		uart_putchar('\b', stream);
     92a:	b7 01       	movw	r22, r14
     92c:	88 e0       	ldi	r24, 0x08	; 8
     92e:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
		cp--;
     932:	01 50       	subi	r16, 0x01	; 1
     934:	10 40       	sbci	r17, 0x00	; 0
     936:	9b cf       	rjmp	.-202    	; 0x86e <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     938:	b7 01       	movw	r22, r14
     93a:	8d e0       	ldi	r24, 0x0D	; 13
     93c:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
     940:	ca e3       	ldi	r28, 0x3A	; 58
     942:	d1 e0       	ldi	r29, 0x01	; 1
     944:	04 c0       	rjmp	.+8      	; 0x94e <uart_getchar+0x100>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     946:	b7 01       	movw	r22, r14
     948:	89 91       	ld	r24, Y+
     94a:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     94e:	c0 17       	cp	r28, r16
     950:	d1 07       	cpc	r29, r17
     952:	c8 f3       	brcs	.-14     	; 0x946 <uart_getchar+0xf8>
     954:	8c cf       	rjmp	.-232    	; 0x86e <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     956:	b7 01       	movw	r22, r14
     958:	88 e0       	ldi	r24, 0x08	; 8
     95a:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
		uart_putchar(' ', stream);
     95e:	b7 01       	movw	r22, r14
     960:	80 e2       	ldi	r24, 0x20	; 32
     962:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
		uart_putchar('\b', stream);
     966:	b7 01       	movw	r22, r14
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
		cp--;
     96e:	01 50       	subi	r16, 0x01	; 1
     970:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	0a 33       	cpi	r16, 0x3A	; 58
     976:	18 07       	cpc	r17, r24
     978:	09 f0       	breq	.+2      	; 0x97c <uart_getchar+0x12e>
     97a:	68 f7       	brcc	.-38     	; 0x956 <uart_getchar+0x108>
     97c:	78 cf       	rjmp	.-272    	; 0x86e <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     97e:	b7 01       	movw	r22, r14
     980:	88 e0       	ldi	r24, 0x08	; 8
     982:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
		uart_putchar(' ', stream);
     986:	b7 01       	movw	r22, r14
     988:	80 e2       	ldi	r24, 0x20	; 32
     98a:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
		uart_putchar('\b', stream);
     98e:	b7 01       	movw	r22, r14
     990:	88 e0       	ldi	r24, 0x08	; 8
     992:	0e 94 ce 03 	call	0x79c	; 0x79c <uart_putchar>
     996:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     998:	e1 e0       	ldi	r30, 0x01	; 1
     99a:	0a 33       	cpi	r16, 0x3A	; 58
     99c:	1e 07       	cpc	r17, r30
     99e:	09 f0       	breq	.+2      	; 0x9a2 <uart_getchar+0x154>
     9a0:	08 f4       	brcc	.+2      	; 0x9a4 <uart_getchar+0x156>
     9a2:	65 cf       	rjmp	.-310    	; 0x86e <uart_getchar+0x20>
     9a4:	e8 01       	movw	r28, r16
     9a6:	8a 91       	ld	r24, -Y
     9a8:	80 32       	cpi	r24, 0x20	; 32
     9aa:	49 f7       	brne	.-46     	; 0x97e <uart_getchar+0x130>
     9ac:	60 cf       	rjmp	.-320    	; 0x86e <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     9ae:	e0 91 38 01 	lds	r30, 0x0138
     9b2:	f0 91 39 01 	lds	r31, 0x0139
     9b6:	81 91       	ld	r24, Z+
     9b8:	f0 93 39 01 	sts	0x0139, r31
     9bc:	e0 93 38 01 	sts	0x0138, r30
  if (c == '\n')
     9c0:	8a 30       	cpi	r24, 0x0A	; 10
     9c2:	21 f4       	brne	.+8      	; 0x9cc <uart_getchar+0x17e>
    rxp = 0;
     9c4:	10 92 39 01 	sts	0x0139, r1
     9c8:	10 92 38 01 	sts	0x0138, r1

  return c;
     9cc:	28 2f       	mov	r18, r24
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <uart_getchar+0x188>
     9d2:	2f ef       	ldi	r18, 0xFF	; 255
     9d4:	3f ef       	ldi	r19, 0xFF	; 255
}
     9d6:	c9 01       	movw	r24, r18
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	08 95       	ret

000009e6 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     9e6:	28 2f       	mov	r18, r24
     9e8:	20 7f       	andi	r18, 0xF0	; 240
     9ea:	28 b9       	out	0x08, r18	; 8

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
	LCP|=1<<LCD_RS;
     9ec:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     9ee:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9f0:	20 e4       	ldi	r18, 0x40	; 64
     9f2:	3f e1       	ldi	r19, 0x1F	; 31
     9f4:	f9 01       	movw	r30, r18
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     9fa:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     9fc:	40 98       	cbi	0x08, 0	; 8
     9fe:	f9 01       	movw	r30, r18
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	f1 f7       	brne	.-4      	; 0xa00 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	74 e0       	ldi	r23, 0x04	; 4
     a08:	88 0f       	add	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	7a 95       	dec	r23
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <LCDsendChar+0x22>
     a10:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     a12:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     a14:	42 9a       	sbi	0x08, 2	; 8
     a16:	c9 01       	movw	r24, r18
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     a1c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     a1e:	40 98       	cbi	0x08, 0	; 8
     a20:	c9 01       	movw	r24, r18
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     a26:	08 95       	ret

00000a28 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     a28:	28 2f       	mov	r18, r24
     a2a:	20 7f       	andi	r18, 0xF0	; 240
     a2c:	28 b9       	out	0x08, r18	; 8
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
	LCP|=1<<LCD_E;		
     a2e:	42 9a       	sbi	0x08, 2	; 8
     a30:	20 e4       	ldi	r18, 0x40	; 64
     a32:	3f e1       	ldi	r19, 0x1F	; 31
     a34:	f9 01       	movw	r30, r18
     a36:	31 97       	sbiw	r30, 0x01	; 1
     a38:	f1 f7       	brne	.-4      	; 0xa36 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     a3a:	42 98       	cbi	0x08, 2	; 8
     a3c:	f9 01       	movw	r30, r18
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	e4 e0       	ldi	r30, 0x04	; 4
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	ea 95       	dec	r30
     a4c:	e1 f7       	brne	.-8      	; 0xa46 <LCDsendCommand+0x1e>
     a4e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     a50:	42 9a       	sbi	0x08, 2	; 8
     a52:	c9 01       	movw	r24, r18
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     a58:	42 98       	cbi	0x08, 2	; 8
     a5a:	c9 01       	movw	r24, r18
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     a60:	08 95       	ret

00000a62 <LCDclr>:
	}

#endif
}			
void LCDclr(void)				//Clears LCD
{
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
	LCDsendCommand(1<<LCD_CLR);
}
     a68:	08 95       	ret

00000a6a <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
	LCDsendCommand(1<<LCD_HOME);
}
     a70:	08 95       	ret

00000a72 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     a7c:	00 97       	sbiw	r24, 0x00	; 0
     a7e:	49 f0       	breq	.+18     	; 0xa92 <LCDstring+0x20>
     a80:	ec 01       	movw	r28, r24
     a82:	10 e0       	ldi	r17, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     a86:	89 91       	ld	r24, Y+
     a88:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     a8c:	1f 5f       	subi	r17, 0xFF	; 255
     a8e:	10 17       	cp	r17, r16
     a90:	d0 f3       	brcs	.-12     	; 0xa86 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
     a9c:	62 30       	cpi	r22, 0x02	; 2
     a9e:	31 f0       	breq	.+12     	; 0xaac <LCDGotoXY+0x10>
     aa0:	63 30       	cpi	r22, 0x03	; 3
     aa2:	31 f0       	breq	.+12     	; 0xab0 <LCDGotoXY+0x14>
     aa4:	61 30       	cpi	r22, 0x01	; 1
     aa6:	29 f4       	brne	.+10     	; 0xab2 <LCDGotoXY+0x16>
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     aa8:	80 5c       	subi	r24, 0xC0	; 192
     aaa:	03 c0       	rjmp	.+6      	; 0xab2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     aac:	8c 5e       	subi	r24, 0xEC	; 236
     aae:	01 c0       	rjmp	.+2      	; 0xab2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     ab0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     ab2:	80 68       	ori	r24, 0x80	; 128
     ab4:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
	
}
     ab8:	08 95       	ret

00000aba <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	ec 01       	movw	r28, r24
     ac2:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     ac4:	64 2f       	mov	r22, r20
     ac6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <LCDGotoXY>
     aca:	10 e0       	ldi	r17, 0x00	; 0
     acc:	03 c0       	rjmp	.+6      	; 0xad4 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     ace:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     ad2:	1f 5f       	subi	r17, 0xFF	; 255
     ad4:	fe 01       	movw	r30, r28
     ad6:	e1 0f       	add	r30, r17
     ad8:	f1 1d       	adc	r31, r1
     ada:	84 91       	lpm	r24, Z+
     adc:	88 23       	and	r24, r24
     ade:	b9 f7       	brne	.-18     	; 0xace <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	08 95       	ret

00000ae8 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	7c 01       	movw	r14, r24
     af6:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     af8:	11 0f       	add	r17, r17
     afa:	11 0f       	add	r17, r17
     afc:	11 0f       	add	r17, r17
     afe:	10 64       	ori	r17, 0x40	; 64
     b00:	c0 e0       	ldi	r28, 0x00	; 0
     b02:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     b04:	f7 01       	movw	r30, r14
     b06:	ec 0f       	add	r30, r28
     b08:	fd 1f       	adc	r31, r29
     b0a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     b0c:	81 2f       	mov	r24, r17
     b0e:	8c 0f       	add	r24, r28
     b10:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
		LCDsendChar(pcc);
     b14:	80 2f       	mov	r24, r16
     b16:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     b1a:	21 96       	adiw	r28, 0x01	; 1
     b1c:	c8 30       	cpi	r28, 0x08	; 8
     b1e:	d1 05       	cpc	r29, r1
     b20:	89 f7       	brne	.-30     	; 0xb04 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	08 95       	ret

00000b30 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	80 e6       	ldi	r24, 0x60	; 96
     b38:	9a ee       	ldi	r25, 0xEA	; 234
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     b3e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     b40:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     b42:	87 b1       	in	r24, 0x07	; 7
     b44:	80 6f       	ori	r24, 0xF0	; 240
     b46:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     b48:	87 b1       	in	r24, 0x07	; 7
     b4a:	87 60       	ori	r24, 0x07	; 7
     b4c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b4e:	80 e3       	ldi	r24, 0x30	; 48
     b50:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b52:	42 9a       	sbi	0x08, 2	; 8
     b54:	20 e4       	ldi	r18, 0x40	; 64
     b56:	3f e1       	ldi	r19, 0x1F	; 31
     b58:	f9 01       	movw	r30, r18
     b5a:	31 97       	sbiw	r30, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b5e:	42 98       	cbi	0x08, 2	; 8
     b60:	f9 01       	movw	r30, r18
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b66:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b68:	42 9a       	sbi	0x08, 2	; 8
     b6a:	c9 01       	movw	r24, r18
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b70:	42 98       	cbi	0x08, 2	; 8
     b72:	c9 01       	movw	r24, r18
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     b78:	80 e2       	ldi	r24, 0x20	; 32
     b7a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b7c:	42 9a       	sbi	0x08, 2	; 8
     b7e:	c9 01       	movw	r24, r18
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b84:	42 98       	cbi	0x08, 2	; 8
     b86:	c9 01       	movw	r24, r18
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     b8c:	88 e2       	ldi	r24, 0x28	; 40
     b8e:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     b92:	8c e0       	ldi	r24, 0x0C	; 12
     b94:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
     b98:	cc e8       	ldi	r28, 0x8C	; 140
     b9a:	d0 e0       	ldi	r29, 0x00	; 0
     b9c:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     b9e:	16 2f       	mov	r17, r22
     ba0:	1f 5f       	subi	r17, 0xFF	; 255
     ba2:	ce 01       	movw	r24, r28
     ba4:	0e 94 74 05 	call	0xae8	; 0xae8 <LCDdefinechar>
     ba8:	28 96       	adiw	r28, 0x08	; 8
     baa:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     bac:	18 30       	cpi	r17, 0x08	; 8
     bae:	b9 f7       	brne	.-18     	; 0xb9e <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	08 95       	ret

00000bb8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	08 2f       	mov	r16, r24
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     bc2:	8e e1       	ldi	r24, 0x1E	; 30
     bc4:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     bc8:	1f 5f       	subi	r17, 0xFF	; 255
     bca:	10 17       	cp	r17, r16
     bcc:	d0 f3       	brcs	.-12     	; 0xbc2 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	08 95       	ret

00000bd4 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	08 2f       	mov	r16, r24
     bda:	10 e0       	ldi	r17, 0x00	; 0
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     bde:	88 e1       	ldi	r24, 0x18	; 24
     be0:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     be4:	1f 5f       	subi	r17, 0xFF	; 255
     be6:	10 17       	cp	r17, r16
     be8:	d0 f3       	brcs	.-12     	; 0xbde <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	08 95       	ret

00000bf0 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
     bf0:	8e e0       	ldi	r24, 0x0E	; 14
     bf2:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
	LCDsendCommand(0x0E);
}
     bf6:	08 95       	ret

00000bf8 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
     bf8:	8f e0       	ldi	r24, 0x0F	; 15
     bfa:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
	LCDsendCommand(0x0F);
}
     bfe:	08 95       	ret

00000c00 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
     c00:	8c e0       	ldi	r24, 0x0C	; 12
     c02:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
	LCDsendCommand(0x0C);
}
     c06:	08 95       	ret

00000c08 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
     c08:	88 e0       	ldi	r24, 0x08	; 8
     c0a:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
	LCDsendCommand(0x08);
}
     c0e:	08 95       	ret

00000c10 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
     c10:	8c e0       	ldi	r24, 0x0C	; 12
     c12:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
	LCDsendCommand(0x0C);
}
     c16:	08 95       	ret

00000c18 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	08 2f       	mov	r16, r24
     c1e:	10 e0       	ldi	r17, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     c22:	80 e1       	ldi	r24, 0x10	; 16
     c24:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c28:	1f 5f       	subi	r17, 0xFF	; 255
     c2a:	10 17       	cp	r17, r16
     c2c:	d0 f3       	brcs	.-12     	; 0xc22 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	08 95       	ret

00000c34 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	08 2f       	mov	r16, r24
     c3a:	10 e0       	ldi	r17, 0x00	; 0
     c3c:	04 c0       	rjmp	.+8      	; 0xc46 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     c3e:	84 e1       	ldi	r24, 0x14	; 20
     c40:	0e 94 14 05 	call	0xa28	; 0xa28 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c44:	1f 5f       	subi	r17, 0xFF	; 255
     c46:	10 17       	cp	r17, r16
     c48:	d0 f3       	brcs	.-12     	; 0xc3e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	08 95       	ret

00000c50 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     c60:	96 e0       	ldi	r25, 0x06	; 6
     c62:	89 9f       	mul	r24, r25
     c64:	c0 01       	movw	r24, r0
     c66:	11 24       	eor	r1, r1
     c68:	24 2f       	mov	r18, r20
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	ac 01       	movw	r20, r24
     c6e:	42 9f       	mul	r20, r18
     c70:	c0 01       	movw	r24, r0
     c72:	43 9f       	mul	r20, r19
     c74:	90 0d       	add	r25, r0
     c76:	52 9f       	mul	r21, r18
     c78:	90 0d       	add	r25, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__divmodhi4>
     c82:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     c84:	cb 01       	movw	r24, r22
     c86:	66 e0       	ldi	r22, 0x06	; 6
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__udivmodhi4>
     c8e:	e8 2e       	mov	r14, r24
     c90:	ff 24       	eor	r15, r15
     c92:	00 e0       	ldi	r16, 0x00	; 0
     c94:	10 e0       	ldi	r17, 0x00	; 0
     c96:	12 c0       	rjmp	.+36     	; 0xcbc <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     c98:	c8 01       	movw	r24, r16
     c9a:	05 96       	adiw	r24, 0x05	; 5
     c9c:	c8 17       	cp	r28, r24
     c9e:	d9 07       	cpc	r29, r25
     ca0:	10 f0       	brcs	.+4      	; 0xca6 <LCDprogressBar+0x56>
     ca2:	85 e0       	ldi	r24, 0x05	; 5
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     ca6:	c0 17       	cp	r28, r16
     ca8:	d1 07       	cpc	r29, r17
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <LCDprogressBar+0x60>
     cac:	8e 2d       	mov	r24, r14
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <LCDprogressBar+0x62>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     cb2:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     cb6:	f3 94       	inc	r15
     cb8:	0a 5f       	subi	r16, 0xFA	; 250
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	fd 14       	cp	r15, r13
     cbe:	60 f3       	brcs	.-40     	; 0xc98 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	08 95       	ret

00000cd0 <__vector_1>:

/********************************************************************/
// 							ISRs & Helper Functions
/********************************************************************/
// --- external interrupt ISR ------------------------
ISR (INT0_vect) {
     cd0:	1f 92       	push	r1
     cd2:	0f 92       	push	r0
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	0f 92       	push	r0
     cd8:	0b b6       	in	r0, 0x3b	; 59
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	2f 93       	push	r18
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	ef 93       	push	r30
     ce6:	ff 93       	push	r31
        motor_period = TCNT2 + motor_period_ovlf  ;
     ce8:	e2 eb       	ldi	r30, 0xB2	; 178
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	20 81       	ld	r18, Z
     cee:	80 91 71 02 	lds	r24, 0x0271
     cf2:	90 91 72 02 	lds	r25, 0x0272
     cf6:	82 0f       	add	r24, r18
     cf8:	91 1d       	adc	r25, r1
     cfa:	90 93 b9 02 	sts	0x02B9, r25
     cfe:	80 93 b8 02 	sts	0x02B8, r24
        TCNT2 = 0 ;
     d02:	10 82       	st	Z, r1
        motor_period_ovlf = 0 ;
     d04:	10 92 72 02 	sts	0x0272, r1
     d08:	10 92 71 02 	sts	0x0271, r1
}
     d0c:	ff 91       	pop	r31
     d0e:	ef 91       	pop	r30
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	2f 91       	pop	r18
     d16:	0f 90       	pop	r0
     d18:	0b be       	out	0x3b, r0	; 59
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <__vector_11>:
// --- set up extra 8 bits on timer 2 ----------------
ISR (TIMER2_OVF_vect) {
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	8f 93       	push	r24
     d30:	9f 93       	push	r25
        motor_period_ovlf = motor_period_ovlf + 256 ;
     d32:	80 91 71 02 	lds	r24, 0x0271
     d36:	90 91 72 02 	lds	r25, 0x0272
     d3a:	80 50       	subi	r24, 0x00	; 0
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	90 93 72 02 	sts	0x0272, r25
     d42:	80 93 71 02 	sts	0x0271, r24
}
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <init_lcd>:

//**********************************************************
// LCD setup
void init_lcd(void) {
     d54:	0e 94 98 05 	call	0xb30	; 0xb30 <LCDinit>
	LCDinit();	//initialize the display
	LCDcursorOFF();
     d58:	0e 94 00 06 	call	0xc00	; 0xc00 <LCDcursorOFF>
	LCDclr();				//clear the display
     d5c:	0e 94 31 05 	call	0xa62	; 0xa62 <LCDclr>
	LCDGotoXY(0,0);
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0e 94 4e 05 	call	0xa9c	; 0xa9c <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	8c ec       	ldi	r24, 0xCC	; 204
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 5d 05 	call	0xaba	; 0xaba <CopyStringtoLCD>
}
     d74:	08 95       	ret

00000d76 <initialize>:

//********************************************************** 
//Set it all up
void initialize(void) {
     d76:	8f ef       	ldi	r24, 0xFF	; 255
     d78:	87 b9       	out	0x07, r24	; 7
  DDRC = 0xff;    	// led connections
  PORTC = 0x00;
     d7a:	18 b8       	out	0x08, r1	; 8
  DDRB = 0x00; 		// switch connections
     d7c:	14 b8       	out	0x04, r1	; 4
  PORTB = 0xff; 	// pullup on
     d7e:	85 b9       	out	0x05, r24	; 5

  //******************** 
  //initialize variables
  trtWait(SEM_SHARED) ;
     d80:	84 e0       	ldi	r24, 0x04	; 4
     d82:	0e 94 7d 02 	call	0x4fa	; 0x4fa <trtWait>
  speed = 0;
     d86:	10 92 b6 02 	sts	0x02B6, r1
     d8a:	10 92 b5 02 	sts	0x02B5, r1
  prop_gain = 0;
     d8e:	10 92 b4 02 	sts	0x02B4, r1
     d92:	10 92 b3 02 	sts	0x02B3, r1
  diff_gain = 0;
     d96:	10 92 70 02 	sts	0x0270, r1
     d9a:	10 92 6f 02 	sts	0x026F, r1
  int_gain = 0; 
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	a0 e0       	ldi	r26, 0x00	; 0
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	80 93 56 02 	sts	0x0256, r24
     daa:	90 93 57 02 	sts	0x0257, r25
     dae:	a0 93 58 02 	sts	0x0258, r26
     db2:	b0 93 59 02 	sts	0x0259, r27
  trtSignal(SEM_SHARED) ;
     db6:	84 e0       	ldi	r24, 0x04	; 4
     db8:	0e 94 9d 02 	call	0x53a	; 0x53a <trtSignal>

  //******************** 
  //init LCD
  init_lcd();
     dbc:	0e 94 aa 06 	call	0xd54	; 0xd54 <init_lcd>
  LCDclr;
  // put some stuff on LCD
  CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	82 ed       	ldi	r24, 0xD2	; 210
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 5d 05 	call	0xaba	; 0xaba <CopyStringtoLCD>
 
  //******************** 
  //set up INT0
  EIMSK = (1 << INT0) ; // turn on int0
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	9d bb       	out	0x1d, r25	; 29
  EICRA = 3 ;       // rising edge
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	80 93 69 00 	sts	0x0069, r24
  // turn on timer 2 to be read in int0 ISR
  TCCR2B = 7 ; // divide by 1024
     dd6:	87 e0       	ldi	r24, 0x07	; 7
     dd8:	80 93 b1 00 	sts	0x00B1, r24
  // turn on timer 2 overflow ISR for double precision time
  TIMSK2 = 1 ;
     ddc:	90 93 70 00 	sts	0x0070, r25
  
  //********************
  //crank up the ISRs
  sei();
     de0:	78 94       	sei
}  
     de2:	08 95       	ret

00000de4 <main>:
  // display the count 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
}

// --- Main Program ----------------------------------
int main(void) {
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     df0:	87 e6       	ldi	r24, 0x67	; 103
     df2:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     df6:	88 e1       	ldi	r24, 0x18	; 24
     df8:	80 93 c1 00 	sts	0x00C1, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     dfc:	10 92 8b 01 	sts	0x018B, r1
     e00:	10 92 8a 01 	sts	0x018A, r1
  tx_out = 0;
     e04:	10 92 8d 01 	sts	0x018D, r1
     e08:	10 92 8c 01 	sts	0x018C, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     e0c:	80 91 c1 00 	lds	r24, 0x00C1
     e10:	80 68       	ori	r24, 0x80	; 128
     e12:	80 93 c1 00 	sts	0x00C1, r24
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
  stdout = stdin = stderr = &uart0;
     e16:	6a e2       	ldi	r22, 0x2A	; 42
     e18:	71 e0       	ldi	r23, 0x01	; 1
     e1a:	70 93 bf 02 	sts	0x02BF, r23
     e1e:	60 93 be 02 	sts	0x02BE, r22
     e22:	70 93 bb 02 	sts	0x02BB, r23
     e26:	60 93 ba 02 	sts	0x02BA, r22
     e2a:	70 93 bd 02 	sts	0x02BD, r23
     e2e:	60 93 bc 02 	sts	0x02BC, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	0e 94 c0 09 	call	0x1380	; 0x1380 <fputs>
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     e3a:	10 92 85 00 	sts	0x0085, r1
     e3e:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     e42:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     e46:	85 e0       	ldi	r24, 0x05	; 5
     e48:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	80 93 6f 00 	sts	0x006F, r24

  kernel.memptr = (void*)(RAMEND - idlestack);
     e52:	8f ea       	ldi	r24, 0xAF	; 175
     e54:	90 e4       	ldi	r25, 0x40	; 64
     e56:	90 93 aa 02 	sts	0x02AA, r25
     e5a:	80 93 a9 02 	sts	0x02A9, r24
  kernel.nbrOfTasks = 0;
     e5e:	10 92 73 02 	sts	0x0273, r1
  kernel.running = 0;
     e62:	10 92 74 02 	sts	0x0274, r1

  kernel.cycles = 0x0000;
     e66:	10 92 ab 02 	sts	0x02AB, r1
     e6a:	10 92 ac 02 	sts	0x02AC, r1
     e6e:	10 92 ad 02 	sts	0x02AD, r1
     e72:	10 92 ae 02 	sts	0x02AE, r1
  kernel.nextHit = 0x7FFFFFFF;
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	9f ef       	ldi	r25, 0xFF	; 255
     e7a:	af ef       	ldi	r26, 0xFF	; 255
     e7c:	bf e7       	ldi	r27, 0x7F	; 127
     e7e:	80 93 af 02 	sts	0x02AF, r24
     e82:	90 93 b0 02 	sts	0x02B0, r25
     e86:	a0 93 b1 02 	sts	0x02B1, r26
     e8a:	b0 93 b2 02 	sts	0x02B2, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     e8e:	80 93 7b 02 	sts	0x027B, r24
     e92:	90 93 7c 02 	sts	0x027C, r25
     e96:	a0 93 7d 02 	sts	0x027D, r26
     e9a:	b0 93 7e 02 	sts	0x027E, r27
  kernel.tasks[0].release = 0x00000000;
     e9e:	10 92 77 02 	sts	0x0277, r1
     ea2:	10 92 78 02 	sts	0x0278, r1
     ea6:	10 92 79 02 	sts	0x0279, r1
     eaa:	10 92 7a 02 	sts	0x027A, r1

  sei(); /* set enabled interrupts */
     eae:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     eb0:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     eb2:	10 92 a1 02 	sts	0x02A1, r1
  
  sei(); // set enabled interrupts;
     eb6:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     eb8:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     eba:	10 92 a2 02 	sts	0x02A2, r1
  
  sei(); // set enabled interrupts;
     ebe:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     ec0:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 a4 02 	sts	0x02A4, r24
  
  sei(); // set enabled interrupts;
     ec8:	78 94       	sei

  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variable

  // --- create tasks  ----------------
  trtCreateTask(serialComm, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[0]));
     eca:	ba e5       	ldi	r27, 0x5A	; 90
     ecc:	cb 2e       	mov	r12, r27
     ece:	b2 e0       	ldi	r27, 0x02	; 2
     ed0:	db 2e       	mov	r13, r27
     ed2:	aa e1       	ldi	r26, 0x1A	; 26
     ed4:	ea 2e       	mov	r14, r26
     ed6:	a6 e0       	ldi	r26, 0x06	; 6
     ed8:	fa 2e       	mov	r15, r26
     eda:	01 2d       	mov	r16, r1
     edc:	11 2d       	mov	r17, r1
     ede:	2a e1       	ldi	r18, 0x1A	; 26
     ee0:	36 e0       	ldi	r19, 0x06	; 6
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	68 ee       	ldi	r22, 0xE8	; 232
     ee8:	73 e0       	ldi	r23, 0x03	; 3
     eea:	86 eb       	ldi	r24, 0xB6	; 182
     eec:	97 e0       	ldi	r25, 0x07	; 7
     eee:	0e 94 17 02 	call	0x42e	; 0x42e <trtCreateTask>
  trtCreateTask(lcdComm, 1000, SECONDS2TICKS(0.2), SECONDS2TICKS(0.4), &(args[0]));
     ef2:	fa e6       	ldi	r31, 0x6A	; 106
     ef4:	ef 2e       	mov	r14, r31
     ef6:	f8 e1       	ldi	r31, 0x18	; 24
     ef8:	ff 2e       	mov	r15, r31
     efa:	01 2d       	mov	r16, r1
     efc:	11 2d       	mov	r17, r1
     efe:	25 e3       	ldi	r18, 0x35	; 53
     f00:	3c e0       	ldi	r19, 0x0C	; 12
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	68 ee       	ldi	r22, 0xE8	; 232
     f08:	73 e0       	ldi	r23, 0x03	; 3
     f0a:	8a e8       	ldi	r24, 0x8A	; 138
     f0c:	97 e0       	ldi	r25, 0x07	; 7
     f0e:	0e 94 17 02 	call	0x42e	; 0x42e <trtCreateTask>
     f12:	ff cf       	rjmp	.-2      	; 0xf12 <main+0x12e>

00000f14 <lcdComm>:
	  trtSleepUntil(rel, dead);
	}
}

// --- define task 2  ----------------------------------------
void lcdComm(void* args) {
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
	// increment time counter and format string 
  sprintf(lcd_buffer, "%u", speed);	                 
     f18:	80 91 b5 02 	lds	r24, 0x02B5
     f1c:	90 91 b6 02 	lds	r25, 0x02B6
     f20:	0e e5       	ldi	r16, 0x5E	; 94
     f22:	12 e0       	ldi	r17, 0x02	; 2
     f24:	9f 93       	push	r25
     f26:	8f 93       	push	r24
     f28:	84 e1       	ldi	r24, 0x14	; 20
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	9f 93       	push	r25
     f2e:	8f 93       	push	r24
     f30:	1f 93       	push	r17
     f32:	0f 93       	push	r16
     f34:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
  LCDGotoXY(7, 0);
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	87 e0       	ldi	r24, 0x07	; 7
     f3c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <LCDGotoXY>
  // display the count 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     f40:	f8 01       	movw	r30, r16
     f42:	01 90       	ld	r0, Z+
     f44:	00 20       	and	r0, r0
     f46:	e9 f7       	brne	.-6      	; 0xf42 <lcdComm+0x2e>
     f48:	31 97       	sbiw	r30, 0x01	; 1
     f4a:	e0 1b       	sub	r30, r16
     f4c:	f1 0b       	sbc	r31, r17
     f4e:	6e 2f       	mov	r22, r30
     f50:	c8 01       	movw	r24, r16
     f52:	0e 94 39 05 	call	0xa72	; 0xa72 <LCDstring>
     f56:	8d b7       	in	r24, 0x3d	; 61
     f58:	9e b7       	in	r25, 0x3e	; 62
     f5a:	06 96       	adiw	r24, 0x06	; 6
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	9e bf       	out	0x3e, r25	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	8d bf       	out	0x3d, r24	; 61
}
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	08 95       	ret

00000f6c <serialComm>:

/********************************************************************/
// 							FSM Tasks
/********************************************************************/
// --- define task 1  ----------------------------------------
void serialComm(void* args) {
     f6c:	4f 92       	push	r4
     f6e:	5f 92       	push	r5
     f70:	6f 92       	push	r6
     f72:	7f 92       	push	r7
     f74:	8f 92       	push	r8
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	28 97       	sbiw	r28, 0x08	; 8
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
	uint32_t rel, dead;
	// Declare the command and num variables
	double num ;
	char cmd[4] ;
  // initialize
  initialize();
     f9c:	0e 94 bb 06 	call	0xd76	; 0xd76 <initialize>
		// 's' sets the motor speed
		// 'p' sets the proportional gain
		// 'i' sets the differential gain
		// 'd' sets the integral gain
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s%le", cmd, &num) ;
     fa0:	4e 01       	movw	r8, r28
     fa2:	08 94       	sec
     fa4:	81 1c       	adc	r8, r1
     fa6:	91 1c       	adc	r9, r1
     fa8:	25 e0       	ldi	r18, 0x05	; 5
     faa:	a2 2e       	mov	r10, r18
     fac:	b1 2c       	mov	r11, r1
     fae:	ac 0e       	add	r10, r28
     fb0:	bd 1e       	adc	r11, r29
     fb2:	97 e1       	ldi	r25, 0x17	; 23
     fb4:	49 2e       	mov	r4, r25
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	59 2e       	mov	r5, r25
		fprintf(stdout, "%s%le\n\r", cmd, &num);
     fba:	8d e1       	ldi	r24, 0x1D	; 29
     fbc:	68 2e       	mov	r6, r24
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	78 2e       	mov	r7, r24
				prop_gain = (int) num;
				fprintf(stdout, "%u\n\r", prop_gain);
				break;
			case 'i':
				diff_gain = (int) num;
				fprintf(stdout, "%u\n\r", diff_gain);
     fc2:	05 e2       	ldi	r16, 0x25	; 37
     fc4:	c0 2e       	mov	r12, r16
     fc6:	01 e0       	ldi	r16, 0x01	; 1
     fc8:	d0 2e       	mov	r13, r16
		// commands:
		// 's' sets the motor speed
		// 'p' sets the proportional gain
		// 'i' sets the differential gain
		// 'd' sets the integral gain
		fprintf(stdout, ">") ;
     fca:	60 91 bc 02 	lds	r22, 0x02BC
     fce:	70 91 bd 02 	lds	r23, 0x02BD
     fd2:	8e e3       	ldi	r24, 0x3E	; 62
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 94 09 	call	0x1328	; 0x1328 <fputc>
		fscanf(stdin, "%s%le", cmd, &num) ;
     fda:	9f 92       	push	r9
     fdc:	8f 92       	push	r8
     fde:	bf 92       	push	r11
     fe0:	af 92       	push	r10
     fe2:	5f 92       	push	r5
     fe4:	4f 92       	push	r4
     fe6:	80 91 ba 02 	lds	r24, 0x02BA
     fea:	90 91 bb 02 	lds	r25, 0x02BB
     fee:	9f 93       	push	r25
     ff0:	8f 93       	push	r24
     ff2:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fscanf>
		fprintf(stdout, "%s%le\n\r", cmd, &num);
     ff6:	9f 92       	push	r9
     ff8:	8f 92       	push	r8
     ffa:	bf 92       	push	r11
     ffc:	af 92       	push	r10
     ffe:	7f 92       	push	r7
    1000:	6f 92       	push	r6
    1002:	80 91 bc 02 	lds	r24, 0x02BC
    1006:	90 91 bd 02 	lds	r25, 0x02BD
    100a:	9f 93       	push	r25
    100c:	8f 93       	push	r24
    100e:	0e 94 81 09 	call	0x1302	; 0x1302 <fprintf>
		// update shared variables
		trtWait(SEM_SHARED) ;
    1012:	84 e0       	ldi	r24, 0x04	; 4
    1014:	0e 94 7d 02 	call	0x4fa	; 0x4fa <trtWait>
		switch (cmd[0]) {
    1018:	8d b7       	in	r24, 0x3d	; 61
    101a:	9e b7       	in	r25, 0x3e	; 62
    101c:	40 96       	adiw	r24, 0x10	; 16
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	9e bf       	out	0x3e, r25	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	8d bf       	out	0x3d, r24	; 61
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	89 36       	cpi	r24, 0x69	; 105
    102c:	49 f1       	breq	.+82     	; 0x1080 <serialComm+0x114>
    102e:	8a 36       	cpi	r24, 0x6A	; 106
    1030:	20 f4       	brcc	.+8      	; 0x103a <serialComm+0xce>
    1032:	84 36       	cpi	r24, 0x64	; 100
    1034:	09 f0       	breq	.+2      	; 0x1038 <serialComm+0xcc>
    1036:	6c c0       	rjmp	.+216    	; 0x1110 <serialComm+0x1a4>
    1038:	41 c0       	rjmp	.+130    	; 0x10bc <serialComm+0x150>
    103a:	80 37       	cpi	r24, 0x70	; 112
    103c:	91 f0       	breq	.+36     	; 0x1062 <serialComm+0xf6>
    103e:	83 37       	cpi	r24, 0x73	; 115
    1040:	09 f0       	breq	.+2      	; 0x1044 <serialComm+0xd8>
    1042:	66 c0       	rjmp	.+204    	; 0x1110 <serialComm+0x1a4>
			case 's':	
				speed = (int) num;
    1044:	69 81       	ldd	r22, Y+1	; 0x01
    1046:	7a 81       	ldd	r23, Y+2	; 0x02
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	0e 94 b5 08 	call	0x116a	; 0x116a <__fixsfsi>
    1050:	70 93 b6 02 	sts	0x02B6, r23
    1054:	60 93 b5 02 	sts	0x02B5, r22
				fprintf(stdout, "%u\n\r", speed);
    1058:	80 91 b5 02 	lds	r24, 0x02B5
    105c:	90 91 b6 02 	lds	r25, 0x02B6
    1060:	1d c0       	rjmp	.+58     	; 0x109c <serialComm+0x130>
				break;
			case 'p':
				prop_gain = (int) num;
    1062:	69 81       	ldd	r22, Y+1	; 0x01
    1064:	7a 81       	ldd	r23, Y+2	; 0x02
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	0e 94 b5 08 	call	0x116a	; 0x116a <__fixsfsi>
    106e:	70 93 b4 02 	sts	0x02B4, r23
    1072:	60 93 b3 02 	sts	0x02B3, r22
				fprintf(stdout, "%u\n\r", prop_gain);
    1076:	80 91 b3 02 	lds	r24, 0x02B3
    107a:	90 91 b4 02 	lds	r25, 0x02B4
    107e:	0e c0       	rjmp	.+28     	; 0x109c <serialComm+0x130>
				break;
			case 'i':
				diff_gain = (int) num;
    1080:	69 81       	ldd	r22, Y+1	; 0x01
    1082:	7a 81       	ldd	r23, Y+2	; 0x02
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	0e 94 b5 08 	call	0x116a	; 0x116a <__fixsfsi>
    108c:	70 93 70 02 	sts	0x0270, r23
    1090:	60 93 6f 02 	sts	0x026F, r22
				fprintf(stdout, "%u\n\r", diff_gain);
    1094:	80 91 6f 02 	lds	r24, 0x026F
    1098:	90 91 70 02 	lds	r25, 0x0270
    109c:	9f 93       	push	r25
    109e:	8f 93       	push	r24
    10a0:	df 92       	push	r13
    10a2:	cf 92       	push	r12
    10a4:	80 91 bc 02 	lds	r24, 0x02BC
    10a8:	90 91 bd 02 	lds	r25, 0x02BD
    10ac:	9f 93       	push	r25
    10ae:	8f 93       	push	r24
    10b0:	0e 94 81 09 	call	0x1302	; 0x1302 <fprintf>
    10b4:	8d b7       	in	r24, 0x3d	; 61
    10b6:	9e b7       	in	r25, 0x3e	; 62
    10b8:	06 96       	adiw	r24, 0x06	; 6
    10ba:	25 c0       	rjmp	.+74     	; 0x1106 <serialComm+0x19a>
				break;
			case 'd': 
				int_gain = num;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	ab 81       	ldd	r26, Y+3	; 0x03
    10c2:	bc 81       	ldd	r27, Y+4	; 0x04
    10c4:	80 93 56 02 	sts	0x0256, r24
    10c8:	90 93 57 02 	sts	0x0257, r25
    10cc:	a0 93 58 02 	sts	0x0258, r26
    10d0:	b0 93 59 02 	sts	0x0259, r27
				fprintf(stdout, "%u\n\r", int_gain);
    10d4:	80 91 56 02 	lds	r24, 0x0256
    10d8:	90 91 57 02 	lds	r25, 0x0257
    10dc:	a0 91 58 02 	lds	r26, 0x0258
    10e0:	b0 91 59 02 	lds	r27, 0x0259
    10e4:	bf 93       	push	r27
    10e6:	af 93       	push	r26
    10e8:	9f 93       	push	r25
    10ea:	8f 93       	push	r24
    10ec:	df 92       	push	r13
    10ee:	cf 92       	push	r12
    10f0:	80 91 bc 02 	lds	r24, 0x02BC
    10f4:	90 91 bd 02 	lds	r25, 0x02BD
    10f8:	9f 93       	push	r25
    10fa:	8f 93       	push	r24
    10fc:	0e 94 81 09 	call	0x1302	; 0x1302 <fprintf>
    1100:	8d b7       	in	r24, 0x3d	; 61
    1102:	9e b7       	in	r25, 0x3e	; 62
    1104:	08 96       	adiw	r24, 0x08	; 8
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	9e bf       	out	0x3e, r25	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	8d bf       	out	0x3d, r24	; 61
				break;
			default:
				break;
		}
		trtSignal(SEM_SHARED);
    1110:	84 e0       	ldi	r24, 0x04	; 4
    1112:	0e 94 9d 02 	call	0x53a	; 0x53a <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    1116:	60 91 ab 02 	lds	r22, 0x02AB
    111a:	70 91 ac 02 	lds	r23, 0x02AC
    111e:	80 91 ad 02 	lds	r24, 0x02AD
    1122:	90 91 ae 02 	lds	r25, 0x02AE
    1126:	cb 01       	movw	r24, r22
    1128:	77 27       	eor	r23, r23
    112a:	66 27       	eor	r22, r22
    112c:	e0 90 84 00 	lds	r14, 0x0084
    1130:	f0 90 85 00 	lds	r15, 0x0085
		// Sleep
	  rel = trtCurrentTime() + SECONDS2TICKS(0.1);
	  dead = trtCurrentTime() + SECONDS2TICKS(0.1);
	  trtSleepUntil(rel, dead);
    1134:	20 91 84 00 	lds	r18, 0x0084
    1138:	30 91 85 00 	lds	r19, 0x0085
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	26 0f       	add	r18, r22
    1142:	37 1f       	adc	r19, r23
    1144:	48 1f       	adc	r20, r24
    1146:	59 1f       	adc	r21, r25
    1148:	26 5e       	subi	r18, 0xE6	; 230
    114a:	39 4f       	sbci	r19, 0xF9	; 249
    114c:	4f 4f       	sbci	r20, 0xFF	; 255
    114e:	5f 4f       	sbci	r21, 0xFF	; 255
    1150:	00 e0       	ldi	r16, 0x00	; 0
    1152:	10 e0       	ldi	r17, 0x00	; 0
    1154:	6e 0d       	add	r22, r14
    1156:	7f 1d       	adc	r23, r15
    1158:	80 1f       	adc	r24, r16
    115a:	91 1f       	adc	r25, r17
    115c:	66 5e       	subi	r22, 0xE6	; 230
    115e:	79 4f       	sbci	r23, 0xF9	; 249
    1160:	8f 4f       	sbci	r24, 0xFF	; 255
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	0e 94 09 03 	call	0x612	; 0x612 <trtSleepUntil>
    1168:	30 cf       	rjmp	.-416    	; 0xfca <serialComm+0x5e>

0000116a <__fixsfsi>:
    116a:	ac e0       	ldi	r26, 0x0C	; 12
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb eb       	ldi	r30, 0xBB	; 187
    1170:	f8 e0       	ldi	r31, 0x08	; 8
    1172:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__prologue_saves__+0x20>
    1176:	69 83       	std	Y+1, r22	; 0x01
    1178:	7a 83       	std	Y+2, r23	; 0x02
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	be 01       	movw	r22, r28
    1180:	6b 5f       	subi	r22, 0xFB	; 251
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	ce 01       	movw	r24, r28
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	0e 94 09 09 	call	0x1212	; 0x1212 <__unpack_f>
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	61 f1       	breq	.+88     	; 0x11ea <__fixsfsi+0x80>
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	50 f1       	brcs	.+84     	; 0x11ea <__fixsfsi+0x80>
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	21 f4       	brne	.+8      	; 0x11a2 <__fixsfsi+0x38>
    119a:	8e 81       	ldd	r24, Y+6	; 0x06
    119c:	88 23       	and	r24, r24
    119e:	51 f1       	breq	.+84     	; 0x11f4 <__fixsfsi+0x8a>
    11a0:	2e c0       	rjmp	.+92     	; 0x11fe <__fixsfsi+0x94>
    11a2:	2f 81       	ldd	r18, Y+7	; 0x07
    11a4:	38 85       	ldd	r19, Y+8	; 0x08
    11a6:	37 fd       	sbrc	r19, 7
    11a8:	20 c0       	rjmp	.+64     	; 0x11ea <__fixsfsi+0x80>
    11aa:	6e 81       	ldd	r22, Y+6	; 0x06
    11ac:	2f 31       	cpi	r18, 0x1F	; 31
    11ae:	31 05       	cpc	r19, r1
    11b0:	1c f0       	brlt	.+6      	; 0x11b8 <__fixsfsi+0x4e>
    11b2:	66 23       	and	r22, r22
    11b4:	f9 f0       	breq	.+62     	; 0x11f4 <__fixsfsi+0x8a>
    11b6:	23 c0       	rjmp	.+70     	; 0x11fe <__fixsfsi+0x94>
    11b8:	8e e1       	ldi	r24, 0x1E	; 30
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	82 1b       	sub	r24, r18
    11be:	93 0b       	sbc	r25, r19
    11c0:	29 85       	ldd	r18, Y+9	; 0x09
    11c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    11c4:	4b 85       	ldd	r20, Y+11	; 0x0b
    11c6:	5c 85       	ldd	r21, Y+12	; 0x0c
    11c8:	04 c0       	rjmp	.+8      	; 0x11d2 <__fixsfsi+0x68>
    11ca:	56 95       	lsr	r21
    11cc:	47 95       	ror	r20
    11ce:	37 95       	ror	r19
    11d0:	27 95       	ror	r18
    11d2:	8a 95       	dec	r24
    11d4:	d2 f7       	brpl	.-12     	; 0x11ca <__fixsfsi+0x60>
    11d6:	66 23       	and	r22, r22
    11d8:	b1 f0       	breq	.+44     	; 0x1206 <__fixsfsi+0x9c>
    11da:	50 95       	com	r21
    11dc:	40 95       	com	r20
    11de:	30 95       	com	r19
    11e0:	21 95       	neg	r18
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	4f 4f       	sbci	r20, 0xFF	; 255
    11e6:	5f 4f       	sbci	r21, 0xFF	; 255
    11e8:	0e c0       	rjmp	.+28     	; 0x1206 <__fixsfsi+0x9c>
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	09 c0       	rjmp	.+18     	; 0x1206 <__fixsfsi+0x9c>
    11f4:	2f ef       	ldi	r18, 0xFF	; 255
    11f6:	3f ef       	ldi	r19, 0xFF	; 255
    11f8:	4f ef       	ldi	r20, 0xFF	; 255
    11fa:	5f e7       	ldi	r21, 0x7F	; 127
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <__fixsfsi+0x9c>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e8       	ldi	r21, 0x80	; 128
    1206:	b9 01       	movw	r22, r18
    1208:	ca 01       	movw	r24, r20
    120a:	2c 96       	adiw	r28, 0x0c	; 12
    120c:	e2 e0       	ldi	r30, 0x02	; 2
    120e:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__epilogue_restores__+0x20>

00001212 <__unpack_f>:
    1212:	fc 01       	movw	r30, r24
    1214:	db 01       	movw	r26, r22
    1216:	40 81       	ld	r20, Z
    1218:	51 81       	ldd	r21, Z+1	; 0x01
    121a:	22 81       	ldd	r18, Z+2	; 0x02
    121c:	62 2f       	mov	r22, r18
    121e:	6f 77       	andi	r22, 0x7F	; 127
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	22 1f       	adc	r18, r18
    1224:	22 27       	eor	r18, r18
    1226:	22 1f       	adc	r18, r18
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	89 2f       	mov	r24, r25
    122c:	88 0f       	add	r24, r24
    122e:	82 2b       	or	r24, r18
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	99 1f       	adc	r25, r25
    1236:	99 27       	eor	r25, r25
    1238:	99 1f       	adc	r25, r25
    123a:	11 96       	adiw	r26, 0x01	; 1
    123c:	9c 93       	st	X, r25
    123e:	11 97       	sbiw	r26, 0x01	; 1
    1240:	21 15       	cp	r18, r1
    1242:	31 05       	cpc	r19, r1
    1244:	a9 f5       	brne	.+106    	; 0x12b0 <__unpack_f+0x9e>
    1246:	41 15       	cp	r20, r1
    1248:	51 05       	cpc	r21, r1
    124a:	61 05       	cpc	r22, r1
    124c:	71 05       	cpc	r23, r1
    124e:	11 f4       	brne	.+4      	; 0x1254 <__unpack_f+0x42>
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	37 c0       	rjmp	.+110    	; 0x12c2 <__unpack_f+0xb0>
    1254:	82 e8       	ldi	r24, 0x82	; 130
    1256:	9f ef       	ldi	r25, 0xFF	; 255
    1258:	13 96       	adiw	r26, 0x03	; 3
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
    125e:	12 97       	sbiw	r26, 0x02	; 2
    1260:	9a 01       	movw	r18, r20
    1262:	ab 01       	movw	r20, r22
    1264:	67 e0       	ldi	r22, 0x07	; 7
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	44 1f       	adc	r20, r20
    126c:	55 1f       	adc	r21, r21
    126e:	6a 95       	dec	r22
    1270:	d1 f7       	brne	.-12     	; 0x1266 <__unpack_f+0x54>
    1272:	83 e0       	ldi	r24, 0x03	; 3
    1274:	8c 93       	st	X, r24
    1276:	0d c0       	rjmp	.+26     	; 0x1292 <__unpack_f+0x80>
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	44 1f       	adc	r20, r20
    127e:	55 1f       	adc	r21, r21
    1280:	12 96       	adiw	r26, 0x02	; 2
    1282:	8d 91       	ld	r24, X+
    1284:	9c 91       	ld	r25, X
    1286:	13 97       	sbiw	r26, 0x03	; 3
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	13 96       	adiw	r26, 0x03	; 3
    128c:	9c 93       	st	X, r25
    128e:	8e 93       	st	-X, r24
    1290:	12 97       	sbiw	r26, 0x02	; 2
    1292:	20 30       	cpi	r18, 0x00	; 0
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	38 07       	cpc	r19, r24
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	48 07       	cpc	r20, r24
    129c:	80 e4       	ldi	r24, 0x40	; 64
    129e:	58 07       	cpc	r21, r24
    12a0:	58 f3       	brcs	.-42     	; 0x1278 <__unpack_f+0x66>
    12a2:	14 96       	adiw	r26, 0x04	; 4
    12a4:	2d 93       	st	X+, r18
    12a6:	3d 93       	st	X+, r19
    12a8:	4d 93       	st	X+, r20
    12aa:	5c 93       	st	X, r21
    12ac:	17 97       	sbiw	r26, 0x07	; 7
    12ae:	08 95       	ret
    12b0:	2f 3f       	cpi	r18, 0xFF	; 255
    12b2:	31 05       	cpc	r19, r1
    12b4:	79 f4       	brne	.+30     	; 0x12d4 <__unpack_f+0xc2>
    12b6:	41 15       	cp	r20, r1
    12b8:	51 05       	cpc	r21, r1
    12ba:	61 05       	cpc	r22, r1
    12bc:	71 05       	cpc	r23, r1
    12be:	19 f4       	brne	.+6      	; 0x12c6 <__unpack_f+0xb4>
    12c0:	84 e0       	ldi	r24, 0x04	; 4
    12c2:	8c 93       	st	X, r24
    12c4:	08 95       	ret
    12c6:	64 ff       	sbrs	r22, 4
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <__unpack_f+0xbe>
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	8c 93       	st	X, r24
    12ce:	12 c0       	rjmp	.+36     	; 0x12f4 <__unpack_f+0xe2>
    12d0:	1c 92       	st	X, r1
    12d2:	10 c0       	rjmp	.+32     	; 0x12f4 <__unpack_f+0xe2>
    12d4:	2f 57       	subi	r18, 0x7F	; 127
    12d6:	30 40       	sbci	r19, 0x00	; 0
    12d8:	13 96       	adiw	r26, 0x03	; 3
    12da:	3c 93       	st	X, r19
    12dc:	2e 93       	st	-X, r18
    12de:	12 97       	sbiw	r26, 0x02	; 2
    12e0:	83 e0       	ldi	r24, 0x03	; 3
    12e2:	8c 93       	st	X, r24
    12e4:	87 e0       	ldi	r24, 0x07	; 7
    12e6:	44 0f       	add	r20, r20
    12e8:	55 1f       	adc	r21, r21
    12ea:	66 1f       	adc	r22, r22
    12ec:	77 1f       	adc	r23, r23
    12ee:	8a 95       	dec	r24
    12f0:	d1 f7       	brne	.-12     	; 0x12e6 <__unpack_f+0xd4>
    12f2:	70 64       	ori	r23, 0x40	; 64
    12f4:	14 96       	adiw	r26, 0x04	; 4
    12f6:	4d 93       	st	X+, r20
    12f8:	5d 93       	st	X+, r21
    12fa:	6d 93       	st	X+, r22
    12fc:	7c 93       	st	X, r23
    12fe:	17 97       	sbiw	r26, 0x07	; 7
    1300:	08 95       	ret

00001302 <fprintf>:
    1302:	a0 e0       	ldi	r26, 0x00	; 0
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e7 e8       	ldi	r30, 0x87	; 135
    1308:	f9 e0       	ldi	r31, 0x09	; 9
    130a:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__prologue_saves__+0x20>
    130e:	ce 01       	movw	r24, r28
    1310:	09 96       	adiw	r24, 0x09	; 9
    1312:	ac 01       	movw	r20, r24
    1314:	6f 81       	ldd	r22, Y+7	; 0x07
    1316:	78 85       	ldd	r23, Y+8	; 0x08
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	0e 94 1f 0a 	call	0x143e	; 0x143e <vfprintf>
    1320:	20 96       	adiw	r28, 0x00	; 0
    1322:	e2 e0       	ldi	r30, 0x02	; 2
    1324:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__epilogue_restores__+0x20>

00001328 <fputc>:
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	8c 01       	movw	r16, r24
    1332:	eb 01       	movw	r28, r22
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	81 ff       	sbrs	r24, 1
    1338:	1b c0       	rjmp	.+54     	; 0x1370 <fputc+0x48>
    133a:	82 ff       	sbrs	r24, 2
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <fputc+0x30>
    133e:	2e 81       	ldd	r18, Y+6	; 0x06
    1340:	3f 81       	ldd	r19, Y+7	; 0x07
    1342:	8c 81       	ldd	r24, Y+4	; 0x04
    1344:	9d 81       	ldd	r25, Y+5	; 0x05
    1346:	28 17       	cp	r18, r24
    1348:	39 07       	cpc	r19, r25
    134a:	64 f4       	brge	.+24     	; 0x1364 <fputc+0x3c>
    134c:	e8 81       	ld	r30, Y
    134e:	f9 81       	ldd	r31, Y+1	; 0x01
    1350:	01 93       	st	Z+, r16
    1352:	f9 83       	std	Y+1, r31	; 0x01
    1354:	e8 83       	st	Y, r30
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <fputc+0x3c>
    1358:	e8 85       	ldd	r30, Y+8	; 0x08
    135a:	f9 85       	ldd	r31, Y+9	; 0x09
    135c:	80 2f       	mov	r24, r16
    135e:	09 95       	icall
    1360:	89 2b       	or	r24, r25
    1362:	31 f4       	brne	.+12     	; 0x1370 <fputc+0x48>
    1364:	8e 81       	ldd	r24, Y+6	; 0x06
    1366:	9f 81       	ldd	r25, Y+7	; 0x07
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	9f 83       	std	Y+7, r25	; 0x07
    136c:	8e 83       	std	Y+6, r24	; 0x06
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <fputc+0x4c>
    1370:	0f ef       	ldi	r16, 0xFF	; 255
    1372:	1f ef       	ldi	r17, 0xFF	; 255
    1374:	c8 01       	movw	r24, r16
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <fputs>:
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	7c 01       	movw	r14, r24
    138e:	8b 01       	movw	r16, r22
    1390:	db 01       	movw	r26, r22
    1392:	13 96       	adiw	r26, 0x03	; 3
    1394:	8c 91       	ld	r24, X
    1396:	81 fd       	sbrc	r24, 1
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <fputs+0x20>
    139a:	cf ef       	ldi	r28, 0xFF	; 255
    139c:	df ef       	ldi	r29, 0xFF	; 255
    139e:	13 c0       	rjmp	.+38     	; 0x13c6 <fputs+0x46>
    13a0:	c0 e0       	ldi	r28, 0x00	; 0
    13a2:	d0 e0       	ldi	r29, 0x00	; 0
    13a4:	0b c0       	rjmp	.+22     	; 0x13bc <fputs+0x3c>
    13a6:	d8 01       	movw	r26, r16
    13a8:	18 96       	adiw	r26, 0x08	; 8
    13aa:	ed 91       	ld	r30, X+
    13ac:	fc 91       	ld	r31, X
    13ae:	19 97       	sbiw	r26, 0x09	; 9
    13b0:	b8 01       	movw	r22, r16
    13b2:	09 95       	icall
    13b4:	89 2b       	or	r24, r25
    13b6:	11 f0       	breq	.+4      	; 0x13bc <fputs+0x3c>
    13b8:	cf ef       	ldi	r28, 0xFF	; 255
    13ba:	df ef       	ldi	r29, 0xFF	; 255
    13bc:	f7 01       	movw	r30, r14
    13be:	81 91       	ld	r24, Z+
    13c0:	7f 01       	movw	r14, r30
    13c2:	88 23       	and	r24, r24
    13c4:	81 f7       	brne	.-32     	; 0x13a6 <fputs+0x26>
    13c6:	ce 01       	movw	r24, r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	e6 e0       	ldi	r30, 0x06	; 6
    13ce:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__epilogue_restores__+0x18>

000013d2 <fscanf>:
    13d2:	a0 e0       	ldi	r26, 0x00	; 0
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ef ee       	ldi	r30, 0xEF	; 239
    13d8:	f9 e0       	ldi	r31, 0x09	; 9
    13da:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__prologue_saves__+0x20>
    13de:	ce 01       	movw	r24, r28
    13e0:	09 96       	adiw	r24, 0x09	; 9
    13e2:	ac 01       	movw	r20, r24
    13e4:	6f 81       	ldd	r22, Y+7	; 0x07
    13e6:	78 85       	ldd	r23, Y+8	; 0x08
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <vfscanf>
    13f0:	20 96       	adiw	r28, 0x00	; 0
    13f2:	e2 e0       	ldi	r30, 0x02	; 2
    13f4:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__epilogue_restores__+0x20>

000013f8 <sprintf>:
    13f8:	ae e0       	ldi	r26, 0x0E	; 14
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e2 e0       	ldi	r30, 0x02	; 2
    13fe:	fa e0       	ldi	r31, 0x0A	; 10
    1400:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__prologue_saves__+0x1c>
    1404:	0d 89       	ldd	r16, Y+21	; 0x15
    1406:	1e 89       	ldd	r17, Y+22	; 0x16
    1408:	86 e0       	ldi	r24, 0x06	; 6
    140a:	8c 83       	std	Y+4, r24	; 0x04
    140c:	1a 83       	std	Y+2, r17	; 0x02
    140e:	09 83       	std	Y+1, r16	; 0x01
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	9f e7       	ldi	r25, 0x7F	; 127
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 83       	std	Y+5, r24	; 0x05
    1418:	ce 01       	movw	r24, r28
    141a:	49 96       	adiw	r24, 0x19	; 25
    141c:	ac 01       	movw	r20, r24
    141e:	6f 89       	ldd	r22, Y+23	; 0x17
    1420:	78 8d       	ldd	r23, Y+24	; 0x18
    1422:	ce 01       	movw	r24, r28
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	0e 94 1f 0a 	call	0x143e	; 0x143e <vfprintf>
    142a:	2f 81       	ldd	r18, Y+7	; 0x07
    142c:	38 85       	ldd	r19, Y+8	; 0x08
    142e:	02 0f       	add	r16, r18
    1430:	13 1f       	adc	r17, r19
    1432:	f8 01       	movw	r30, r16
    1434:	10 82       	st	Z, r1
    1436:	2e 96       	adiw	r28, 0x0e	; 14
    1438:	e4 e0       	ldi	r30, 0x04	; 4
    143a:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__epilogue_restores__+0x1c>

0000143e <vfprintf>:
    143e:	ab e0       	ldi	r26, 0x0B	; 11
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e5 e2       	ldi	r30, 0x25	; 37
    1444:	fa e0       	ldi	r31, 0x0A	; 10
    1446:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <__prologue_saves__>
    144a:	3c 01       	movw	r6, r24
    144c:	2b 01       	movw	r4, r22
    144e:	5a 01       	movw	r10, r20
    1450:	fc 01       	movw	r30, r24
    1452:	17 82       	std	Z+7, r1	; 0x07
    1454:	16 82       	std	Z+6, r1	; 0x06
    1456:	83 81       	ldd	r24, Z+3	; 0x03
    1458:	81 fd       	sbrc	r24, 1
    145a:	03 c0       	rjmp	.+6      	; 0x1462 <vfprintf+0x24>
    145c:	6f ef       	ldi	r22, 0xFF	; 255
    145e:	7f ef       	ldi	r23, 0xFF	; 255
    1460:	c8 c1       	rjmp	.+912    	; 0x17f2 <vfprintf+0x3b4>
    1462:	9a e0       	ldi	r25, 0x0A	; 10
    1464:	89 2e       	mov	r8, r25
    1466:	1e 01       	movw	r2, r28
    1468:	08 94       	sec
    146a:	21 1c       	adc	r2, r1
    146c:	31 1c       	adc	r3, r1
    146e:	f3 01       	movw	r30, r6
    1470:	23 81       	ldd	r18, Z+3	; 0x03
    1472:	f2 01       	movw	r30, r4
    1474:	23 fd       	sbrc	r18, 3
    1476:	85 91       	lpm	r24, Z+
    1478:	23 ff       	sbrs	r18, 3
    147a:	81 91       	ld	r24, Z+
    147c:	2f 01       	movw	r4, r30
    147e:	88 23       	and	r24, r24
    1480:	09 f4       	brne	.+2      	; 0x1484 <vfprintf+0x46>
    1482:	b4 c1       	rjmp	.+872    	; 0x17ec <vfprintf+0x3ae>
    1484:	85 32       	cpi	r24, 0x25	; 37
    1486:	39 f4       	brne	.+14     	; 0x1496 <vfprintf+0x58>
    1488:	23 fd       	sbrc	r18, 3
    148a:	85 91       	lpm	r24, Z+
    148c:	23 ff       	sbrs	r18, 3
    148e:	81 91       	ld	r24, Z+
    1490:	2f 01       	movw	r4, r30
    1492:	85 32       	cpi	r24, 0x25	; 37
    1494:	29 f4       	brne	.+10     	; 0x14a0 <vfprintf+0x62>
    1496:	b3 01       	movw	r22, r6
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 94 09 	call	0x1328	; 0x1328 <fputc>
    149e:	e7 cf       	rjmp	.-50     	; 0x146e <vfprintf+0x30>
    14a0:	98 2f       	mov	r25, r24
    14a2:	dd 24       	eor	r13, r13
    14a4:	cc 24       	eor	r12, r12
    14a6:	99 24       	eor	r9, r9
    14a8:	ff e1       	ldi	r31, 0x1F	; 31
    14aa:	fd 15       	cp	r31, r13
    14ac:	d0 f0       	brcs	.+52     	; 0x14e2 <vfprintf+0xa4>
    14ae:	9b 32       	cpi	r25, 0x2B	; 43
    14b0:	69 f0       	breq	.+26     	; 0x14cc <vfprintf+0x8e>
    14b2:	9c 32       	cpi	r25, 0x2C	; 44
    14b4:	28 f4       	brcc	.+10     	; 0x14c0 <vfprintf+0x82>
    14b6:	90 32       	cpi	r25, 0x20	; 32
    14b8:	59 f0       	breq	.+22     	; 0x14d0 <vfprintf+0x92>
    14ba:	93 32       	cpi	r25, 0x23	; 35
    14bc:	91 f4       	brne	.+36     	; 0x14e2 <vfprintf+0xa4>
    14be:	0e c0       	rjmp	.+28     	; 0x14dc <vfprintf+0x9e>
    14c0:	9d 32       	cpi	r25, 0x2D	; 45
    14c2:	49 f0       	breq	.+18     	; 0x14d6 <vfprintf+0x98>
    14c4:	90 33       	cpi	r25, 0x30	; 48
    14c6:	69 f4       	brne	.+26     	; 0x14e2 <vfprintf+0xa4>
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	24 c0       	rjmp	.+72     	; 0x1514 <vfprintf+0xd6>
    14cc:	52 e0       	ldi	r21, 0x02	; 2
    14ce:	d5 2a       	or	r13, r21
    14d0:	84 e0       	ldi	r24, 0x04	; 4
    14d2:	d8 2a       	or	r13, r24
    14d4:	28 c0       	rjmp	.+80     	; 0x1526 <vfprintf+0xe8>
    14d6:	98 e0       	ldi	r25, 0x08	; 8
    14d8:	d9 2a       	or	r13, r25
    14da:	25 c0       	rjmp	.+74     	; 0x1526 <vfprintf+0xe8>
    14dc:	e0 e1       	ldi	r30, 0x10	; 16
    14de:	de 2a       	or	r13, r30
    14e0:	22 c0       	rjmp	.+68     	; 0x1526 <vfprintf+0xe8>
    14e2:	d7 fc       	sbrc	r13, 7
    14e4:	29 c0       	rjmp	.+82     	; 0x1538 <vfprintf+0xfa>
    14e6:	89 2f       	mov	r24, r25
    14e8:	80 53       	subi	r24, 0x30	; 48
    14ea:	8a 30       	cpi	r24, 0x0A	; 10
    14ec:	70 f4       	brcc	.+28     	; 0x150a <vfprintf+0xcc>
    14ee:	d6 fe       	sbrs	r13, 6
    14f0:	05 c0       	rjmp	.+10     	; 0x14fc <vfprintf+0xbe>
    14f2:	98 9c       	mul	r9, r8
    14f4:	90 2c       	mov	r9, r0
    14f6:	11 24       	eor	r1, r1
    14f8:	98 0e       	add	r9, r24
    14fa:	15 c0       	rjmp	.+42     	; 0x1526 <vfprintf+0xe8>
    14fc:	c8 9c       	mul	r12, r8
    14fe:	c0 2c       	mov	r12, r0
    1500:	11 24       	eor	r1, r1
    1502:	c8 0e       	add	r12, r24
    1504:	f0 e2       	ldi	r31, 0x20	; 32
    1506:	df 2a       	or	r13, r31
    1508:	0e c0       	rjmp	.+28     	; 0x1526 <vfprintf+0xe8>
    150a:	9e 32       	cpi	r25, 0x2E	; 46
    150c:	29 f4       	brne	.+10     	; 0x1518 <vfprintf+0xda>
    150e:	d6 fc       	sbrc	r13, 6
    1510:	6d c1       	rjmp	.+730    	; 0x17ec <vfprintf+0x3ae>
    1512:	40 e4       	ldi	r20, 0x40	; 64
    1514:	d4 2a       	or	r13, r20
    1516:	07 c0       	rjmp	.+14     	; 0x1526 <vfprintf+0xe8>
    1518:	9c 36       	cpi	r25, 0x6C	; 108
    151a:	19 f4       	brne	.+6      	; 0x1522 <vfprintf+0xe4>
    151c:	50 e8       	ldi	r21, 0x80	; 128
    151e:	d5 2a       	or	r13, r21
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <vfprintf+0xe8>
    1522:	98 36       	cpi	r25, 0x68	; 104
    1524:	49 f4       	brne	.+18     	; 0x1538 <vfprintf+0xfa>
    1526:	f2 01       	movw	r30, r4
    1528:	23 fd       	sbrc	r18, 3
    152a:	95 91       	lpm	r25, Z+
    152c:	23 ff       	sbrs	r18, 3
    152e:	91 91       	ld	r25, Z+
    1530:	2f 01       	movw	r4, r30
    1532:	99 23       	and	r25, r25
    1534:	09 f0       	breq	.+2      	; 0x1538 <vfprintf+0xfa>
    1536:	b8 cf       	rjmp	.-144    	; 0x14a8 <vfprintf+0x6a>
    1538:	89 2f       	mov	r24, r25
    153a:	85 54       	subi	r24, 0x45	; 69
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	18 f0       	brcs	.+6      	; 0x1546 <vfprintf+0x108>
    1540:	80 52       	subi	r24, 0x20	; 32
    1542:	83 30       	cpi	r24, 0x03	; 3
    1544:	38 f4       	brcc	.+14     	; 0x1554 <vfprintf+0x116>
    1546:	44 e0       	ldi	r20, 0x04	; 4
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	a4 0e       	add	r10, r20
    154c:	b5 1e       	adc	r11, r21
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	59 83       	std	Y+1, r21	; 0x01
    1552:	0f c0       	rjmp	.+30     	; 0x1572 <vfprintf+0x134>
    1554:	93 36       	cpi	r25, 0x63	; 99
    1556:	31 f0       	breq	.+12     	; 0x1564 <vfprintf+0x126>
    1558:	93 37       	cpi	r25, 0x73	; 115
    155a:	79 f0       	breq	.+30     	; 0x157a <vfprintf+0x13c>
    155c:	93 35       	cpi	r25, 0x53	; 83
    155e:	09 f0       	breq	.+2      	; 0x1562 <vfprintf+0x124>
    1560:	56 c0       	rjmp	.+172    	; 0x160e <vfprintf+0x1d0>
    1562:	20 c0       	rjmp	.+64     	; 0x15a4 <vfprintf+0x166>
    1564:	f5 01       	movw	r30, r10
    1566:	80 81       	ld	r24, Z
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	42 e0       	ldi	r20, 0x02	; 2
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	a4 0e       	add	r10, r20
    1570:	b5 1e       	adc	r11, r21
    1572:	71 01       	movw	r14, r2
    1574:	01 e0       	ldi	r16, 0x01	; 1
    1576:	10 e0       	ldi	r17, 0x00	; 0
    1578:	12 c0       	rjmp	.+36     	; 0x159e <vfprintf+0x160>
    157a:	f5 01       	movw	r30, r10
    157c:	e0 80       	ld	r14, Z
    157e:	f1 80       	ldd	r15, Z+1	; 0x01
    1580:	d6 fc       	sbrc	r13, 6
    1582:	03 c0       	rjmp	.+6      	; 0x158a <vfprintf+0x14c>
    1584:	6f ef       	ldi	r22, 0xFF	; 255
    1586:	7f ef       	ldi	r23, 0xFF	; 255
    1588:	02 c0       	rjmp	.+4      	; 0x158e <vfprintf+0x150>
    158a:	69 2d       	mov	r22, r9
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	42 e0       	ldi	r20, 0x02	; 2
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	a4 0e       	add	r10, r20
    1594:	b5 1e       	adc	r11, r21
    1596:	c7 01       	movw	r24, r14
    1598:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <strnlen>
    159c:	8c 01       	movw	r16, r24
    159e:	5f e7       	ldi	r21, 0x7F	; 127
    15a0:	d5 22       	and	r13, r21
    15a2:	14 c0       	rjmp	.+40     	; 0x15cc <vfprintf+0x18e>
    15a4:	f5 01       	movw	r30, r10
    15a6:	e0 80       	ld	r14, Z
    15a8:	f1 80       	ldd	r15, Z+1	; 0x01
    15aa:	d6 fc       	sbrc	r13, 6
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <vfprintf+0x176>
    15ae:	6f ef       	ldi	r22, 0xFF	; 255
    15b0:	7f ef       	ldi	r23, 0xFF	; 255
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <vfprintf+0x17a>
    15b4:	69 2d       	mov	r22, r9
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	42 e0       	ldi	r20, 0x02	; 2
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	a4 0e       	add	r10, r20
    15be:	b5 1e       	adc	r11, r21
    15c0:	c7 01       	movw	r24, r14
    15c2:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <strnlen_P>
    15c6:	8c 01       	movw	r16, r24
    15c8:	50 e8       	ldi	r21, 0x80	; 128
    15ca:	d5 2a       	or	r13, r21
    15cc:	d3 fe       	sbrs	r13, 3
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <vfprintf+0x1a0>
    15d0:	1a c0       	rjmp	.+52     	; 0x1606 <vfprintf+0x1c8>
    15d2:	b3 01       	movw	r22, r6
    15d4:	80 e2       	ldi	r24, 0x20	; 32
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 94 09 	call	0x1328	; 0x1328 <fputc>
    15dc:	ca 94       	dec	r12
    15de:	8c 2d       	mov	r24, r12
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	08 17       	cp	r16, r24
    15e4:	19 07       	cpc	r17, r25
    15e6:	a8 f3       	brcs	.-22     	; 0x15d2 <vfprintf+0x194>
    15e8:	0e c0       	rjmp	.+28     	; 0x1606 <vfprintf+0x1c8>
    15ea:	f7 01       	movw	r30, r14
    15ec:	d7 fc       	sbrc	r13, 7
    15ee:	85 91       	lpm	r24, Z+
    15f0:	d7 fe       	sbrs	r13, 7
    15f2:	81 91       	ld	r24, Z+
    15f4:	7f 01       	movw	r14, r30
    15f6:	b3 01       	movw	r22, r6
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 94 09 	call	0x1328	; 0x1328 <fputc>
    15fe:	c1 10       	cpse	r12, r1
    1600:	ca 94       	dec	r12
    1602:	01 50       	subi	r16, 0x01	; 1
    1604:	10 40       	sbci	r17, 0x00	; 0
    1606:	01 15       	cp	r16, r1
    1608:	11 05       	cpc	r17, r1
    160a:	79 f7       	brne	.-34     	; 0x15ea <vfprintf+0x1ac>
    160c:	ec c0       	rjmp	.+472    	; 0x17e6 <vfprintf+0x3a8>
    160e:	94 36       	cpi	r25, 0x64	; 100
    1610:	11 f0       	breq	.+4      	; 0x1616 <vfprintf+0x1d8>
    1612:	99 36       	cpi	r25, 0x69	; 105
    1614:	71 f5       	brne	.+92     	; 0x1672 <vfprintf+0x234>
    1616:	d7 fe       	sbrs	r13, 7
    1618:	08 c0       	rjmp	.+16     	; 0x162a <vfprintf+0x1ec>
    161a:	f5 01       	movw	r30, r10
    161c:	e0 80       	ld	r14, Z
    161e:	f1 80       	ldd	r15, Z+1	; 0x01
    1620:	02 81       	ldd	r16, Z+2	; 0x02
    1622:	13 81       	ldd	r17, Z+3	; 0x03
    1624:	44 e0       	ldi	r20, 0x04	; 4
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	0a c0       	rjmp	.+20     	; 0x163e <vfprintf+0x200>
    162a:	f5 01       	movw	r30, r10
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	7c 01       	movw	r14, r24
    1632:	00 27       	eor	r16, r16
    1634:	f7 fc       	sbrc	r15, 7
    1636:	00 95       	com	r16
    1638:	10 2f       	mov	r17, r16
    163a:	42 e0       	ldi	r20, 0x02	; 2
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	a4 0e       	add	r10, r20
    1640:	b5 1e       	adc	r11, r21
    1642:	5f e6       	ldi	r21, 0x6F	; 111
    1644:	d5 22       	and	r13, r21
    1646:	17 ff       	sbrs	r17, 7
    1648:	0a c0       	rjmp	.+20     	; 0x165e <vfprintf+0x220>
    164a:	10 95       	com	r17
    164c:	00 95       	com	r16
    164e:	f0 94       	com	r15
    1650:	e0 94       	com	r14
    1652:	e1 1c       	adc	r14, r1
    1654:	f1 1c       	adc	r15, r1
    1656:	01 1d       	adc	r16, r1
    1658:	11 1d       	adc	r17, r1
    165a:	80 e8       	ldi	r24, 0x80	; 128
    165c:	d8 2a       	or	r13, r24
    165e:	2a e0       	ldi	r18, 0x0A	; 10
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	a1 01       	movw	r20, r2
    1664:	c8 01       	movw	r24, r16
    1666:	b7 01       	movw	r22, r14
    1668:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__ultoa_invert>
    166c:	f8 2e       	mov	r15, r24
    166e:	f2 18       	sub	r15, r2
    1670:	40 c0       	rjmp	.+128    	; 0x16f2 <vfprintf+0x2b4>
    1672:	95 37       	cpi	r25, 0x75	; 117
    1674:	29 f4       	brne	.+10     	; 0x1680 <vfprintf+0x242>
    1676:	1d 2d       	mov	r17, r13
    1678:	1f 7e       	andi	r17, 0xEF	; 239
    167a:	2a e0       	ldi	r18, 0x0A	; 10
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	1d c0       	rjmp	.+58     	; 0x16ba <vfprintf+0x27c>
    1680:	1d 2d       	mov	r17, r13
    1682:	19 7f       	andi	r17, 0xF9	; 249
    1684:	9f 36       	cpi	r25, 0x6F	; 111
    1686:	61 f0       	breq	.+24     	; 0x16a0 <vfprintf+0x262>
    1688:	90 37       	cpi	r25, 0x70	; 112
    168a:	20 f4       	brcc	.+8      	; 0x1694 <vfprintf+0x256>
    168c:	98 35       	cpi	r25, 0x58	; 88
    168e:	09 f0       	breq	.+2      	; 0x1692 <vfprintf+0x254>
    1690:	ad c0       	rjmp	.+346    	; 0x17ec <vfprintf+0x3ae>
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <vfprintf+0x274>
    1694:	90 37       	cpi	r25, 0x70	; 112
    1696:	39 f0       	breq	.+14     	; 0x16a6 <vfprintf+0x268>
    1698:	98 37       	cpi	r25, 0x78	; 120
    169a:	09 f0       	breq	.+2      	; 0x169e <vfprintf+0x260>
    169c:	a7 c0       	rjmp	.+334    	; 0x17ec <vfprintf+0x3ae>
    169e:	04 c0       	rjmp	.+8      	; 0x16a8 <vfprintf+0x26a>
    16a0:	28 e0       	ldi	r18, 0x08	; 8
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	0a c0       	rjmp	.+20     	; 0x16ba <vfprintf+0x27c>
    16a6:	10 61       	ori	r17, 0x10	; 16
    16a8:	14 fd       	sbrc	r17, 4
    16aa:	14 60       	ori	r17, 0x04	; 4
    16ac:	20 e1       	ldi	r18, 0x10	; 16
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <vfprintf+0x27c>
    16b2:	14 fd       	sbrc	r17, 4
    16b4:	16 60       	ori	r17, 0x06	; 6
    16b6:	20 e1       	ldi	r18, 0x10	; 16
    16b8:	32 e0       	ldi	r19, 0x02	; 2
    16ba:	17 ff       	sbrs	r17, 7
    16bc:	08 c0       	rjmp	.+16     	; 0x16ce <vfprintf+0x290>
    16be:	f5 01       	movw	r30, r10
    16c0:	60 81       	ld	r22, Z
    16c2:	71 81       	ldd	r23, Z+1	; 0x01
    16c4:	82 81       	ldd	r24, Z+2	; 0x02
    16c6:	93 81       	ldd	r25, Z+3	; 0x03
    16c8:	44 e0       	ldi	r20, 0x04	; 4
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	08 c0       	rjmp	.+16     	; 0x16de <vfprintf+0x2a0>
    16ce:	f5 01       	movw	r30, r10
    16d0:	80 81       	ld	r24, Z
    16d2:	91 81       	ldd	r25, Z+1	; 0x01
    16d4:	bc 01       	movw	r22, r24
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	42 e0       	ldi	r20, 0x02	; 2
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	a4 0e       	add	r10, r20
    16e0:	b5 1e       	adc	r11, r21
    16e2:	a1 01       	movw	r20, r2
    16e4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__ultoa_invert>
    16e8:	f8 2e       	mov	r15, r24
    16ea:	f2 18       	sub	r15, r2
    16ec:	8f e7       	ldi	r24, 0x7F	; 127
    16ee:	d8 2e       	mov	r13, r24
    16f0:	d1 22       	and	r13, r17
    16f2:	d6 fe       	sbrs	r13, 6
    16f4:	0b c0       	rjmp	.+22     	; 0x170c <vfprintf+0x2ce>
    16f6:	5e ef       	ldi	r21, 0xFE	; 254
    16f8:	d5 22       	and	r13, r21
    16fa:	f9 14       	cp	r15, r9
    16fc:	38 f4       	brcc	.+14     	; 0x170c <vfprintf+0x2ce>
    16fe:	d4 fe       	sbrs	r13, 4
    1700:	07 c0       	rjmp	.+14     	; 0x1710 <vfprintf+0x2d2>
    1702:	d2 fc       	sbrc	r13, 2
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <vfprintf+0x2d2>
    1706:	8f ee       	ldi	r24, 0xEF	; 239
    1708:	d8 22       	and	r13, r24
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <vfprintf+0x2d2>
    170c:	1f 2d       	mov	r17, r15
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <vfprintf+0x2d4>
    1710:	19 2d       	mov	r17, r9
    1712:	d4 fe       	sbrs	r13, 4
    1714:	0d c0       	rjmp	.+26     	; 0x1730 <vfprintf+0x2f2>
    1716:	fe 01       	movw	r30, r28
    1718:	ef 0d       	add	r30, r15
    171a:	f1 1d       	adc	r31, r1
    171c:	80 81       	ld	r24, Z
    171e:	80 33       	cpi	r24, 0x30	; 48
    1720:	19 f4       	brne	.+6      	; 0x1728 <vfprintf+0x2ea>
    1722:	99 ee       	ldi	r25, 0xE9	; 233
    1724:	d9 22       	and	r13, r25
    1726:	08 c0       	rjmp	.+16     	; 0x1738 <vfprintf+0x2fa>
    1728:	1f 5f       	subi	r17, 0xFF	; 255
    172a:	d2 fe       	sbrs	r13, 2
    172c:	05 c0       	rjmp	.+10     	; 0x1738 <vfprintf+0x2fa>
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <vfprintf+0x2f8>
    1730:	8d 2d       	mov	r24, r13
    1732:	86 78       	andi	r24, 0x86	; 134
    1734:	09 f0       	breq	.+2      	; 0x1738 <vfprintf+0x2fa>
    1736:	1f 5f       	subi	r17, 0xFF	; 255
    1738:	0d 2d       	mov	r16, r13
    173a:	d3 fc       	sbrc	r13, 3
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <vfprintf+0x328>
    173e:	d0 fe       	sbrs	r13, 0
    1740:	0f c0       	rjmp	.+30     	; 0x1760 <vfprintf+0x322>
    1742:	1c 15       	cp	r17, r12
    1744:	10 f0       	brcs	.+4      	; 0x174a <vfprintf+0x30c>
    1746:	9f 2c       	mov	r9, r15
    1748:	0b c0       	rjmp	.+22     	; 0x1760 <vfprintf+0x322>
    174a:	9f 2c       	mov	r9, r15
    174c:	9c 0c       	add	r9, r12
    174e:	91 1a       	sub	r9, r17
    1750:	1c 2d       	mov	r17, r12
    1752:	06 c0       	rjmp	.+12     	; 0x1760 <vfprintf+0x322>
    1754:	b3 01       	movw	r22, r6
    1756:	80 e2       	ldi	r24, 0x20	; 32
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	0e 94 94 09 	call	0x1328	; 0x1328 <fputc>
    175e:	1f 5f       	subi	r17, 0xFF	; 255
    1760:	1c 15       	cp	r17, r12
    1762:	c0 f3       	brcs	.-16     	; 0x1754 <vfprintf+0x316>
    1764:	04 c0       	rjmp	.+8      	; 0x176e <vfprintf+0x330>
    1766:	1c 15       	cp	r17, r12
    1768:	10 f4       	brcc	.+4      	; 0x176e <vfprintf+0x330>
    176a:	c1 1a       	sub	r12, r17
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <vfprintf+0x332>
    176e:	cc 24       	eor	r12, r12
    1770:	04 ff       	sbrs	r16, 4
    1772:	10 c0       	rjmp	.+32     	; 0x1794 <vfprintf+0x356>
    1774:	b3 01       	movw	r22, r6
    1776:	80 e3       	ldi	r24, 0x30	; 48
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 94 09 	call	0x1328	; 0x1328 <fputc>
    177e:	02 ff       	sbrs	r16, 2
    1780:	1e c0       	rjmp	.+60     	; 0x17be <vfprintf+0x380>
    1782:	01 fd       	sbrc	r16, 1
    1784:	03 c0       	rjmp	.+6      	; 0x178c <vfprintf+0x34e>
    1786:	88 e7       	ldi	r24, 0x78	; 120
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <vfprintf+0x352>
    178c:	88 e5       	ldi	r24, 0x58	; 88
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	b3 01       	movw	r22, r6
    1792:	0c c0       	rjmp	.+24     	; 0x17ac <vfprintf+0x36e>
    1794:	80 2f       	mov	r24, r16
    1796:	86 78       	andi	r24, 0x86	; 134
    1798:	91 f0       	breq	.+36     	; 0x17be <vfprintf+0x380>
    179a:	01 ff       	sbrs	r16, 1
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <vfprintf+0x364>
    179e:	8b e2       	ldi	r24, 0x2B	; 43
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <vfprintf+0x366>
    17a2:	80 e2       	ldi	r24, 0x20	; 32
    17a4:	d7 fc       	sbrc	r13, 7
    17a6:	8d e2       	ldi	r24, 0x2D	; 45
    17a8:	b3 01       	movw	r22, r6
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 94 09 	call	0x1328	; 0x1328 <fputc>
    17b0:	06 c0       	rjmp	.+12     	; 0x17be <vfprintf+0x380>
    17b2:	b3 01       	movw	r22, r6
    17b4:	80 e3       	ldi	r24, 0x30	; 48
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 94 09 	call	0x1328	; 0x1328 <fputc>
    17bc:	9a 94       	dec	r9
    17be:	f9 14       	cp	r15, r9
    17c0:	c0 f3       	brcs	.-16     	; 0x17b2 <vfprintf+0x374>
    17c2:	fa 94       	dec	r15
    17c4:	f1 01       	movw	r30, r2
    17c6:	ef 0d       	add	r30, r15
    17c8:	f1 1d       	adc	r31, r1
    17ca:	b3 01       	movw	r22, r6
    17cc:	80 81       	ld	r24, Z
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 94 09 	call	0x1328	; 0x1328 <fputc>
    17d4:	ff 20       	and	r15, r15
    17d6:	a9 f7       	brne	.-22     	; 0x17c2 <vfprintf+0x384>
    17d8:	06 c0       	rjmp	.+12     	; 0x17e6 <vfprintf+0x3a8>
    17da:	b3 01       	movw	r22, r6
    17dc:	80 e2       	ldi	r24, 0x20	; 32
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 94 09 	call	0x1328	; 0x1328 <fputc>
    17e4:	ca 94       	dec	r12
    17e6:	cc 20       	and	r12, r12
    17e8:	c1 f7       	brne	.-16     	; 0x17da <vfprintf+0x39c>
    17ea:	41 ce       	rjmp	.-894    	; 0x146e <vfprintf+0x30>
    17ec:	f3 01       	movw	r30, r6
    17ee:	66 81       	ldd	r22, Z+6	; 0x06
    17f0:	77 81       	ldd	r23, Z+7	; 0x07
    17f2:	cb 01       	movw	r24, r22
    17f4:	2b 96       	adiw	r28, 0x0b	; 11
    17f6:	e2 e1       	ldi	r30, 0x12	; 18
    17f8:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__epilogue_restores__>

000017fc <putval>:
    17fc:	fc 01       	movw	r30, r24
    17fe:	20 fd       	sbrc	r18, 0
    1800:	08 c0       	rjmp	.+16     	; 0x1812 <putval+0x16>
    1802:	23 fd       	sbrc	r18, 3
    1804:	05 c0       	rjmp	.+10     	; 0x1810 <putval+0x14>
    1806:	22 ff       	sbrs	r18, 2
    1808:	02 c0       	rjmp	.+4      	; 0x180e <putval+0x12>
    180a:	73 83       	std	Z+3, r23	; 0x03
    180c:	62 83       	std	Z+2, r22	; 0x02
    180e:	51 83       	std	Z+1, r21	; 0x01
    1810:	40 83       	st	Z, r20
    1812:	08 95       	ret

00001814 <mulacc>:
    1814:	ef 92       	push	r14
    1816:	ff 92       	push	r15
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	44 ff       	sbrs	r20, 4
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <mulacc+0x10>
    1820:	33 e0       	ldi	r19, 0x03	; 3
    1822:	11 c0       	rjmp	.+34     	; 0x1846 <mulacc+0x32>
    1824:	46 ff       	sbrs	r20, 6
    1826:	02 c0       	rjmp	.+4      	; 0x182c <mulacc+0x18>
    1828:	34 e0       	ldi	r19, 0x04	; 4
    182a:	0d c0       	rjmp	.+26     	; 0x1846 <mulacc+0x32>
    182c:	db 01       	movw	r26, r22
    182e:	fc 01       	movw	r30, r24
    1830:	aa 0f       	add	r26, r26
    1832:	bb 1f       	adc	r27, r27
    1834:	ee 1f       	adc	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	10 94       	com	r1
    183a:	d1 f7       	brne	.-12     	; 0x1830 <mulacc+0x1c>
    183c:	6a 0f       	add	r22, r26
    183e:	7b 1f       	adc	r23, r27
    1840:	8e 1f       	adc	r24, r30
    1842:	9f 1f       	adc	r25, r31
    1844:	31 e0       	ldi	r19, 0x01	; 1
    1846:	66 0f       	add	r22, r22
    1848:	77 1f       	adc	r23, r23
    184a:	88 1f       	adc	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	31 50       	subi	r19, 0x01	; 1
    1850:	d1 f7       	brne	.-12     	; 0x1846 <mulacc+0x32>
    1852:	7b 01       	movw	r14, r22
    1854:	8c 01       	movw	r16, r24
    1856:	e2 0e       	add	r14, r18
    1858:	f1 1c       	adc	r15, r1
    185a:	01 1d       	adc	r16, r1
    185c:	11 1d       	adc	r17, r1
    185e:	a8 01       	movw	r20, r16
    1860:	97 01       	movw	r18, r14
    1862:	b7 01       	movw	r22, r14
    1864:	ca 01       	movw	r24, r20
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	08 95       	ret

00001870 <skip_spaces>:
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	8c 01       	movw	r16, r24
    187a:	c8 01       	movw	r24, r16
    187c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <fgetc>
    1880:	ec 01       	movw	r28, r24
    1882:	97 fd       	sbrc	r25, 7
    1884:	08 c0       	rjmp	.+16     	; 0x1896 <skip_spaces+0x26>
    1886:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <isspace>
    188a:	89 2b       	or	r24, r25
    188c:	b1 f7       	brne	.-20     	; 0x187a <skip_spaces+0xa>
    188e:	b8 01       	movw	r22, r16
    1890:	ce 01       	movw	r24, r28
    1892:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <ungetc>
    1896:	ce 01       	movw	r24, r28
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	08 95       	ret

000018a2 <conv_int>:
    18a2:	a0 e0       	ldi	r26, 0x00	; 0
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e7 e5       	ldi	r30, 0x57	; 87
    18a8:	fc e0       	ldi	r31, 0x0C	; 12
    18aa:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__prologue_saves__+0x10>
    18ae:	ec 01       	movw	r28, r24
    18b0:	c6 2e       	mov	r12, r22
    18b2:	5a 01       	movw	r10, r20
    18b4:	12 2f       	mov	r17, r18
    18b6:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <fgetc>
    18ba:	ac 01       	movw	r20, r24
    18bc:	8b 32       	cpi	r24, 0x2B	; 43
    18be:	19 f0       	breq	.+6      	; 0x18c6 <conv_int+0x24>
    18c0:	8d 32       	cpi	r24, 0x2D	; 45
    18c2:	51 f4       	brne	.+20     	; 0x18d8 <conv_int+0x36>
    18c4:	10 68       	ori	r17, 0x80	; 128
    18c6:	ca 94       	dec	r12
    18c8:	09 f4       	brne	.+2      	; 0x18cc <conv_int+0x2a>
    18ca:	6d c0       	rjmp	.+218    	; 0x19a6 <conv_int+0x104>
    18cc:	ce 01       	movw	r24, r28
    18ce:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <fgetc>
    18d2:	ac 01       	movw	r20, r24
    18d4:	97 fd       	sbrc	r25, 7
    18d6:	67 c0       	rjmp	.+206    	; 0x19a6 <conv_int+0x104>
    18d8:	6d ef       	ldi	r22, 0xFD	; 253
    18da:	d6 2e       	mov	r13, r22
    18dc:	d1 22       	and	r13, r17
    18de:	8d 2d       	mov	r24, r13
    18e0:	80 73       	andi	r24, 0x30	; 48
    18e2:	01 f5       	brne	.+64     	; 0x1924 <conv_int+0x82>
    18e4:	40 33       	cpi	r20, 0x30	; 48
    18e6:	f1 f4       	brne	.+60     	; 0x1924 <conv_int+0x82>
    18e8:	ca 94       	dec	r12
    18ea:	09 f4       	brne	.+2      	; 0x18ee <conv_int+0x4c>
    18ec:	47 c0       	rjmp	.+142    	; 0x197c <conv_int+0xda>
    18ee:	ce 01       	movw	r24, r28
    18f0:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <fgetc>
    18f4:	ac 01       	movw	r20, r24
    18f6:	97 fd       	sbrc	r25, 7
    18f8:	41 c0       	rjmp	.+130    	; 0x197c <conv_int+0xda>
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	d8 2a       	or	r13, r24
    18fe:	48 37       	cpi	r20, 0x78	; 120
    1900:	11 f0       	breq	.+4      	; 0x1906 <conv_int+0x64>
    1902:	48 35       	cpi	r20, 0x58	; 88
    1904:	59 f4       	brne	.+22     	; 0x191c <conv_int+0x7a>
    1906:	80 e4       	ldi	r24, 0x40	; 64
    1908:	d8 2a       	or	r13, r24
    190a:	ca 94       	dec	r12
    190c:	b9 f1       	breq	.+110    	; 0x197c <conv_int+0xda>
    190e:	ce 01       	movw	r24, r28
    1910:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <fgetc>
    1914:	ac 01       	movw	r20, r24
    1916:	99 23       	and	r25, r25
    1918:	2c f4       	brge	.+10     	; 0x1924 <conv_int+0x82>
    191a:	30 c0       	rjmp	.+96     	; 0x197c <conv_int+0xda>
    191c:	d6 fc       	sbrc	r13, 6
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <conv_int+0x82>
    1920:	80 e1       	ldi	r24, 0x10	; 16
    1922:	d8 2a       	or	r13, r24
    1924:	ee 24       	eor	r14, r14
    1926:	ff 24       	eor	r15, r15
    1928:	87 01       	movw	r16, r14
    192a:	24 2f       	mov	r18, r20
    192c:	20 53       	subi	r18, 0x30	; 48
    192e:	28 30       	cpi	r18, 0x08	; 8
    1930:	88 f0       	brcs	.+34     	; 0x1954 <conv_int+0xb2>
    1932:	d4 fc       	sbrc	r13, 4
    1934:	09 c0       	rjmp	.+18     	; 0x1948 <conv_int+0xa6>
    1936:	2a 30       	cpi	r18, 0x0A	; 10
    1938:	68 f0       	brcs	.+26     	; 0x1954 <conv_int+0xb2>
    193a:	d6 fe       	sbrs	r13, 6
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <conv_int+0xa6>
    193e:	2f 7d       	andi	r18, 0xDF	; 223
    1940:	82 2f       	mov	r24, r18
    1942:	81 51       	subi	r24, 0x11	; 17
    1944:	86 30       	cpi	r24, 0x06	; 6
    1946:	28 f0       	brcs	.+10     	; 0x1952 <conv_int+0xb0>
    1948:	be 01       	movw	r22, r28
    194a:	ca 01       	movw	r24, r20
    194c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <ungetc>
    1950:	12 c0       	rjmp	.+36     	; 0x1976 <conv_int+0xd4>
    1952:	27 50       	subi	r18, 0x07	; 7
    1954:	4d 2d       	mov	r20, r13
    1956:	c8 01       	movw	r24, r16
    1958:	b7 01       	movw	r22, r14
    195a:	0e 94 0a 0c 	call	0x1814	; 0x1814 <mulacc>
    195e:	7b 01       	movw	r14, r22
    1960:	8c 01       	movw	r16, r24
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	d8 2a       	or	r13, r24
    1966:	ca 94       	dec	r12
    1968:	61 f0       	breq	.+24     	; 0x1982 <conv_int+0xe0>
    196a:	ce 01       	movw	r24, r28
    196c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <fgetc>
    1970:	ac 01       	movw	r20, r24
    1972:	97 ff       	sbrs	r25, 7
    1974:	da cf       	rjmp	.-76     	; 0x192a <conv_int+0x88>
    1976:	d1 fc       	sbrc	r13, 1
    1978:	04 c0       	rjmp	.+8      	; 0x1982 <conv_int+0xe0>
    197a:	15 c0       	rjmp	.+42     	; 0x19a6 <conv_int+0x104>
    197c:	ee 24       	eor	r14, r14
    197e:	ff 24       	eor	r15, r15
    1980:	87 01       	movw	r16, r14
    1982:	d7 fe       	sbrs	r13, 7
    1984:	08 c0       	rjmp	.+16     	; 0x1996 <conv_int+0xf4>
    1986:	10 95       	com	r17
    1988:	00 95       	com	r16
    198a:	f0 94       	com	r15
    198c:	e0 94       	com	r14
    198e:	e1 1c       	adc	r14, r1
    1990:	f1 1c       	adc	r15, r1
    1992:	01 1d       	adc	r16, r1
    1994:	11 1d       	adc	r17, r1
    1996:	2d 2d       	mov	r18, r13
    1998:	b8 01       	movw	r22, r16
    199a:	a7 01       	movw	r20, r14
    199c:	c5 01       	movw	r24, r10
    199e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <putval>
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <conv_int+0x106>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	ea e0       	ldi	r30, 0x0A	; 10
    19ae:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__epilogue_restores__+0x10>

000019b2 <conv_brk>:
    19b2:	a0 e2       	ldi	r26, 0x20	; 32
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ef ed       	ldi	r30, 0xDF	; 223
    19b8:	fc e0       	ldi	r31, 0x0C	; 12
    19ba:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__+0x8>
    19be:	6c 01       	movw	r12, r24
    19c0:	a6 2e       	mov	r10, r22
    19c2:	8a 01       	movw	r16, r20
    19c4:	79 01       	movw	r14, r18
    19c6:	fe 01       	movw	r30, r28
    19c8:	31 96       	adiw	r30, 0x01	; 1
    19ca:	80 e2       	ldi	r24, 0x20	; 32
    19cc:	df 01       	movw	r26, r30
    19ce:	1d 92       	st	X+, r1
    19d0:	8a 95       	dec	r24
    19d2:	e9 f7       	brne	.-6      	; 0x19ce <conv_brk+0x1c>
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	4f 01       	movw	r8, r30
    19e0:	a1 e0       	ldi	r26, 0x01	; 1
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	f6 01       	movw	r30, r12
    19e6:	83 81       	ldd	r24, Z+3	; 0x03
    19e8:	f7 01       	movw	r30, r14
    19ea:	83 fd       	sbrc	r24, 3
    19ec:	25 91       	lpm	r18, Z+
    19ee:	83 ff       	sbrs	r24, 3
    19f0:	21 91       	ld	r18, Z+
    19f2:	7f 01       	movw	r14, r30
    19f4:	22 23       	and	r18, r18
    19f6:	09 f4       	brne	.+2      	; 0x19fa <conv_brk+0x48>
    19f8:	7e c0       	rjmp	.+252    	; 0x1af6 <conv_brk+0x144>
    19fa:	2e 35       	cpi	r18, 0x5E	; 94
    19fc:	19 f4       	brne	.+6      	; 0x1a04 <conv_brk+0x52>
    19fe:	41 15       	cp	r20, r1
    1a00:	51 05       	cpc	r21, r1
    1a02:	69 f1       	breq	.+90     	; 0x1a5e <conv_brk+0xac>
    1a04:	87 2f       	mov	r24, r23
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	84 17       	cp	r24, r20
    1a0a:	95 07       	cpc	r25, r21
    1a0c:	44 f4       	brge	.+16     	; 0x1a1e <conv_brk+0x6c>
    1a0e:	2d 35       	cpi	r18, 0x5D	; 93
    1a10:	51 f1       	breq	.+84     	; 0x1a66 <conv_brk+0xb4>
    1a12:	2d 32       	cpi	r18, 0x2D	; 45
    1a14:	21 f4       	brne	.+8      	; 0x1a1e <conv_brk+0x6c>
    1a16:	33 23       	and	r19, r19
    1a18:	29 f4       	brne	.+10     	; 0x1a24 <conv_brk+0x72>
    1a1a:	31 e0       	ldi	r19, 0x01	; 1
    1a1c:	21 c0       	rjmp	.+66     	; 0x1a60 <conv_brk+0xae>
    1a1e:	33 23       	and	r19, r19
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <conv_brk+0x72>
    1a22:	62 2f       	mov	r22, r18
    1a24:	32 2f       	mov	r19, r18
    1a26:	83 2f       	mov	r24, r19
    1a28:	86 95       	lsr	r24
    1a2a:	86 95       	lsr	r24
    1a2c:	86 95       	lsr	r24
    1a2e:	f4 01       	movw	r30, r8
    1a30:	e8 0f       	add	r30, r24
    1a32:	f1 1d       	adc	r31, r1
    1a34:	83 2f       	mov	r24, r19
    1a36:	87 70       	andi	r24, 0x07	; 7
    1a38:	3d 01       	movw	r6, r26
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <conv_brk+0x8e>
    1a3c:	66 0c       	add	r6, r6
    1a3e:	77 1c       	adc	r7, r7
    1a40:	8a 95       	dec	r24
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <conv_brk+0x8a>
    1a44:	20 81       	ld	r18, Z
    1a46:	26 29       	or	r18, r6
    1a48:	20 83       	st	Z, r18
    1a4a:	36 17       	cp	r19, r22
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <conv_brk+0xa0>
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	07 c0       	rjmp	.+14     	; 0x1a60 <conv_brk+0xae>
    1a52:	36 17       	cp	r19, r22
    1a54:	10 f4       	brcc	.+4      	; 0x1a5a <conv_brk+0xa8>
    1a56:	3f 5f       	subi	r19, 0xFF	; 255
    1a58:	e6 cf       	rjmp	.-52     	; 0x1a26 <conv_brk+0x74>
    1a5a:	31 50       	subi	r19, 0x01	; 1
    1a5c:	e4 cf       	rjmp	.-56     	; 0x1a26 <conv_brk+0x74>
    1a5e:	71 e0       	ldi	r23, 0x01	; 1
    1a60:	4f 5f       	subi	r20, 0xFF	; 255
    1a62:	5f 4f       	sbci	r21, 0xFF	; 255
    1a64:	bf cf       	rjmp	.-130    	; 0x19e4 <conv_brk+0x32>
    1a66:	33 23       	and	r19, r19
    1a68:	19 f0       	breq	.+6      	; 0x1a70 <conv_brk+0xbe>
    1a6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6c:	80 62       	ori	r24, 0x20	; 32
    1a6e:	8e 83       	std	Y+6, r24	; 0x06
    1a70:	77 23       	and	r23, r23
    1a72:	59 f0       	breq	.+22     	; 0x1a8a <conv_brk+0xd8>
    1a74:	fe 01       	movw	r30, r28
    1a76:	31 96       	adiw	r30, 0x01	; 1
    1a78:	9e 01       	movw	r18, r28
    1a7a:	2f 5d       	subi	r18, 0xDF	; 223
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	80 81       	ld	r24, Z
    1a80:	80 95       	com	r24
    1a82:	81 93       	st	Z+, r24
    1a84:	e2 17       	cp	r30, r18
    1a86:	f3 07       	cpc	r31, r19
    1a88:	d1 f7       	brne	.-12     	; 0x1a7e <conv_brk+0xcc>
    1a8a:	bb 24       	eor	r11, r11
    1a8c:	b3 94       	inc	r11
    1a8e:	4e 01       	movw	r8, r28
    1a90:	08 94       	sec
    1a92:	81 1c       	adc	r8, r1
    1a94:	91 1c       	adc	r9, r1
    1a96:	c6 01       	movw	r24, r12
    1a98:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <fgetc>
    1a9c:	ac 01       	movw	r20, r24
    1a9e:	97 fd       	sbrc	r25, 7
    1aa0:	22 c0       	rjmp	.+68     	; 0x1ae6 <conv_brk+0x134>
    1aa2:	86 95       	lsr	r24
    1aa4:	86 95       	lsr	r24
    1aa6:	86 95       	lsr	r24
    1aa8:	f4 01       	movw	r30, r8
    1aaa:	e8 0f       	add	r30, r24
    1aac:	f1 1d       	adc	r31, r1
    1aae:	80 81       	ld	r24, Z
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9a 01       	movw	r18, r20
    1ab4:	27 70       	andi	r18, 0x07	; 7
    1ab6:	30 70       	andi	r19, 0x00	; 0
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <conv_brk+0x10c>
    1aba:	95 95       	asr	r25
    1abc:	87 95       	ror	r24
    1abe:	2a 95       	dec	r18
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <conv_brk+0x108>
    1ac2:	80 fd       	sbrc	r24, 0
    1ac4:	05 c0       	rjmp	.+10     	; 0x1ad0 <conv_brk+0x11e>
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	ca 01       	movw	r24, r20
    1aca:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <ungetc>
    1ace:	0b c0       	rjmp	.+22     	; 0x1ae6 <conv_brk+0x134>
    1ad0:	01 15       	cp	r16, r1
    1ad2:	11 05       	cpc	r17, r1
    1ad4:	19 f0       	breq	.+6      	; 0x1adc <conv_brk+0x12a>
    1ad6:	d8 01       	movw	r26, r16
    1ad8:	4d 93       	st	X+, r20
    1ada:	8d 01       	movw	r16, r26
    1adc:	aa 94       	dec	r10
    1ade:	bb 24       	eor	r11, r11
    1ae0:	aa 20       	and	r10, r10
    1ae2:	c9 f6       	brne	.-78     	; 0x1a96 <conv_brk+0xe4>
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <conv_brk+0x138>
    1ae6:	bb 20       	and	r11, r11
    1ae8:	31 f4       	brne	.+12     	; 0x1af6 <conv_brk+0x144>
    1aea:	01 15       	cp	r16, r1
    1aec:	11 05       	cpc	r17, r1
    1aee:	29 f0       	breq	.+10     	; 0x1afa <conv_brk+0x148>
    1af0:	f8 01       	movw	r30, r16
    1af2:	10 82       	st	Z, r1
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <conv_brk+0x148>
    1af6:	ee 24       	eor	r14, r14
    1af8:	ff 24       	eor	r15, r15
    1afa:	c7 01       	movw	r24, r14
    1afc:	a0 96       	adiw	r28, 0x20	; 32
    1afe:	ee e0       	ldi	r30, 0x0E	; 14
    1b00:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__+0x8>

00001b04 <vfscanf>:
    1b04:	a0 e0       	ldi	r26, 0x00	; 0
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e8 e8       	ldi	r30, 0x88	; 136
    1b0a:	fd e0       	ldi	r31, 0x0D	; 13
    1b0c:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__+0x8>
    1b10:	5c 01       	movw	r10, r24
    1b12:	6b 01       	movw	r12, r22
    1b14:	3a 01       	movw	r6, r20
    1b16:	fc 01       	movw	r30, r24
    1b18:	17 82       	std	Z+7, r1	; 0x07
    1b1a:	16 82       	std	Z+6, r1	; 0x06
    1b1c:	88 24       	eor	r8, r8
    1b1e:	ea c0       	rjmp	.+468    	; 0x1cf4 <vfscanf+0x1f0>
    1b20:	81 2f       	mov	r24, r17
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <isspace>
    1b28:	89 2b       	or	r24, r25
    1b2a:	21 f0       	breq	.+8      	; 0x1b34 <vfscanf+0x30>
    1b2c:	c5 01       	movw	r24, r10
    1b2e:	0e 94 38 0c 	call	0x1870	; 0x1870 <skip_spaces>
    1b32:	e0 c0       	rjmp	.+448    	; 0x1cf4 <vfscanf+0x1f0>
    1b34:	15 32       	cpi	r17, 0x25	; 37
    1b36:	49 f4       	brne	.+18     	; 0x1b4a <vfscanf+0x46>
    1b38:	f6 01       	movw	r30, r12
    1b3a:	f3 fc       	sbrc	r15, 3
    1b3c:	65 91       	lpm	r22, Z+
    1b3e:	f3 fe       	sbrs	r15, 3
    1b40:	61 91       	ld	r22, Z+
    1b42:	6f 01       	movw	r12, r30
    1b44:	65 32       	cpi	r22, 0x25	; 37
    1b46:	69 f4       	brne	.+26     	; 0x1b62 <vfscanf+0x5e>
    1b48:	15 e2       	ldi	r17, 0x25	; 37
    1b4a:	c5 01       	movw	r24, r10
    1b4c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <fgetc>
    1b50:	97 fd       	sbrc	r25, 7
    1b52:	dc c0       	rjmp	.+440    	; 0x1d0c <vfscanf+0x208>
    1b54:	18 17       	cp	r17, r24
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <vfscanf+0x56>
    1b58:	cd c0       	rjmp	.+410    	; 0x1cf4 <vfscanf+0x1f0>
    1b5a:	b5 01       	movw	r22, r10
    1b5c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <ungetc>
    1b60:	da c0       	rjmp	.+436    	; 0x1d16 <vfscanf+0x212>
    1b62:	6a 32       	cpi	r22, 0x2A	; 42
    1b64:	19 f0       	breq	.+6      	; 0x1b6c <vfscanf+0x68>
    1b66:	16 2f       	mov	r17, r22
    1b68:	00 e0       	ldi	r16, 0x00	; 0
    1b6a:	06 c0       	rjmp	.+12     	; 0x1b78 <vfscanf+0x74>
    1b6c:	f3 fc       	sbrc	r15, 3
    1b6e:	15 91       	lpm	r17, Z+
    1b70:	f3 fe       	sbrs	r15, 3
    1b72:	11 91       	ld	r17, Z+
    1b74:	6f 01       	movw	r12, r30
    1b76:	01 e0       	ldi	r16, 0x01	; 1
    1b78:	99 24       	eor	r9, r9
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <vfscanf+0x96>
    1b7c:	02 60       	ori	r16, 0x02	; 2
    1b7e:	69 2d       	mov	r22, r9
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	40 e2       	ldi	r20, 0x20	; 32
    1b88:	0e 94 0a 0c 	call	0x1814	; 0x1814 <mulacc>
    1b8c:	96 2e       	mov	r9, r22
    1b8e:	f6 01       	movw	r30, r12
    1b90:	f3 fc       	sbrc	r15, 3
    1b92:	15 91       	lpm	r17, Z+
    1b94:	f3 fe       	sbrs	r15, 3
    1b96:	11 91       	ld	r17, Z+
    1b98:	6f 01       	movw	r12, r30
    1b9a:	21 2f       	mov	r18, r17
    1b9c:	20 53       	subi	r18, 0x30	; 48
    1b9e:	2a 30       	cpi	r18, 0x0A	; 10
    1ba0:	68 f3       	brcs	.-38     	; 0x1b7c <vfscanf+0x78>
    1ba2:	01 fd       	sbrc	r16, 1
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <vfscanf+0xa8>
    1ba6:	99 24       	eor	r9, r9
    1ba8:	9a 94       	dec	r9
    1baa:	03 c0       	rjmp	.+6      	; 0x1bb2 <vfscanf+0xae>
    1bac:	99 20       	and	r9, r9
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <vfscanf+0xae>
    1bb0:	b2 c0       	rjmp	.+356    	; 0x1d16 <vfscanf+0x212>
    1bb2:	18 36       	cpi	r17, 0x68	; 104
    1bb4:	21 f0       	breq	.+8      	; 0x1bbe <vfscanf+0xba>
    1bb6:	1c 36       	cpi	r17, 0x6C	; 108
    1bb8:	99 f4       	brne	.+38     	; 0x1be0 <vfscanf+0xdc>
    1bba:	f6 01       	movw	r30, r12
    1bbc:	0b c0       	rjmp	.+22     	; 0x1bd4 <vfscanf+0xd0>
    1bbe:	f6 01       	movw	r30, r12
    1bc0:	f3 fc       	sbrc	r15, 3
    1bc2:	65 91       	lpm	r22, Z+
    1bc4:	f3 fe       	sbrs	r15, 3
    1bc6:	61 91       	ld	r22, Z+
    1bc8:	68 36       	cpi	r22, 0x68	; 104
    1bca:	19 f0       	breq	.+6      	; 0x1bd2 <vfscanf+0xce>
    1bcc:	6f 01       	movw	r12, r30
    1bce:	16 2f       	mov	r17, r22
    1bd0:	07 c0       	rjmp	.+14     	; 0x1be0 <vfscanf+0xdc>
    1bd2:	08 60       	ori	r16, 0x08	; 8
    1bd4:	04 60       	ori	r16, 0x04	; 4
    1bd6:	f3 fc       	sbrc	r15, 3
    1bd8:	15 91       	lpm	r17, Z+
    1bda:	f3 fe       	sbrs	r15, 3
    1bdc:	11 91       	ld	r17, Z+
    1bde:	6f 01       	movw	r12, r30
    1be0:	11 23       	and	r17, r17
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <vfscanf+0xe2>
    1be4:	98 c0       	rjmp	.+304    	; 0x1d16 <vfscanf+0x212>
    1be6:	61 2f       	mov	r22, r17
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	8b ed       	ldi	r24, 0xDB	; 219
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <strchr_P>
    1bf2:	89 2b       	or	r24, r25
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <vfscanf+0xf4>
    1bf6:	8f c0       	rjmp	.+286    	; 0x1d16 <vfscanf+0x212>
    1bf8:	80 2f       	mov	r24, r16
    1bfa:	00 ff       	sbrs	r16, 0
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <vfscanf+0x100>
    1bfe:	ee 24       	eor	r14, r14
    1c00:	ff 24       	eor	r15, r15
    1c02:	07 c0       	rjmp	.+14     	; 0x1c12 <vfscanf+0x10e>
    1c04:	f3 01       	movw	r30, r6
    1c06:	e0 80       	ld	r14, Z
    1c08:	f1 80       	ldd	r15, Z+1	; 0x01
    1c0a:	22 e0       	ldi	r18, 0x02	; 2
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	62 0e       	add	r6, r18
    1c10:	73 1e       	adc	r7, r19
    1c12:	1e 36       	cpi	r17, 0x6E	; 110
    1c14:	51 f4       	brne	.+20     	; 0x1c2a <vfscanf+0x126>
    1c16:	f5 01       	movw	r30, r10
    1c18:	46 81       	ldd	r20, Z+6	; 0x06
    1c1a:	57 81       	ldd	r21, Z+7	; 0x07
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	20 2f       	mov	r18, r16
    1c22:	c7 01       	movw	r24, r14
    1c24:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <putval>
    1c28:	65 c0       	rjmp	.+202    	; 0x1cf4 <vfscanf+0x1f0>
    1c2a:	13 36       	cpi	r17, 0x63	; 99
    1c2c:	91 f4       	brne	.+36     	; 0x1c52 <vfscanf+0x14e>
    1c2e:	81 fd       	sbrc	r24, 1
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <vfscanf+0x132>
    1c32:	99 24       	eor	r9, r9
    1c34:	93 94       	inc	r9
    1c36:	c5 01       	movw	r24, r10
    1c38:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <fgetc>
    1c3c:	97 fd       	sbrc	r25, 7
    1c3e:	66 c0       	rjmp	.+204    	; 0x1d0c <vfscanf+0x208>
    1c40:	e1 14       	cp	r14, r1
    1c42:	f1 04       	cpc	r15, r1
    1c44:	19 f0       	breq	.+6      	; 0x1c4c <vfscanf+0x148>
    1c46:	f7 01       	movw	r30, r14
    1c48:	81 93       	st	Z+, r24
    1c4a:	7f 01       	movw	r14, r30
    1c4c:	9a 94       	dec	r9
    1c4e:	99 f7       	brne	.-26     	; 0x1c36 <vfscanf+0x132>
    1c50:	4f c0       	rjmp	.+158    	; 0x1cf0 <vfscanf+0x1ec>
    1c52:	1b 35       	cpi	r17, 0x5B	; 91
    1c54:	59 f4       	brne	.+22     	; 0x1c6c <vfscanf+0x168>
    1c56:	96 01       	movw	r18, r12
    1c58:	a7 01       	movw	r20, r14
    1c5a:	69 2d       	mov	r22, r9
    1c5c:	c5 01       	movw	r24, r10
    1c5e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <conv_brk>
    1c62:	6c 01       	movw	r12, r24
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <vfscanf+0x166>
    1c68:	43 c0       	rjmp	.+134    	; 0x1cf0 <vfscanf+0x1ec>
    1c6a:	3d c0       	rjmp	.+122    	; 0x1ce6 <vfscanf+0x1e2>
    1c6c:	c5 01       	movw	r24, r10
    1c6e:	0e 94 38 0c 	call	0x1870	; 0x1870 <skip_spaces>
    1c72:	97 fd       	sbrc	r25, 7
    1c74:	4b c0       	rjmp	.+150    	; 0x1d0c <vfscanf+0x208>
    1c76:	1f 36       	cpi	r17, 0x6F	; 111
    1c78:	59 f1       	breq	.+86     	; 0x1cd0 <vfscanf+0x1cc>
    1c7a:	10 37       	cpi	r17, 0x70	; 112
    1c7c:	28 f4       	brcc	.+10     	; 0x1c88 <vfscanf+0x184>
    1c7e:	14 36       	cpi	r17, 0x64	; 100
    1c80:	29 f1       	breq	.+74     	; 0x1ccc <vfscanf+0x1c8>
    1c82:	19 36       	cpi	r17, 0x69	; 105
    1c84:	39 f5       	brne	.+78     	; 0x1cd4 <vfscanf+0x1d0>
    1c86:	27 c0       	rjmp	.+78     	; 0x1cd6 <vfscanf+0x1d2>
    1c88:	13 37       	cpi	r17, 0x73	; 115
    1c8a:	19 f0       	breq	.+6      	; 0x1c92 <vfscanf+0x18e>
    1c8c:	15 37       	cpi	r17, 0x75	; 117
    1c8e:	11 f5       	brne	.+68     	; 0x1cd4 <vfscanf+0x1d0>
    1c90:	1d c0       	rjmp	.+58     	; 0x1ccc <vfscanf+0x1c8>
    1c92:	c5 01       	movw	r24, r10
    1c94:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <fgetc>
    1c98:	ec 01       	movw	r28, r24
    1c9a:	97 fd       	sbrc	r25, 7
    1c9c:	11 c0       	rjmp	.+34     	; 0x1cc0 <vfscanf+0x1bc>
    1c9e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <isspace>
    1ca2:	89 2b       	or	r24, r25
    1ca4:	29 f0       	breq	.+10     	; 0x1cb0 <vfscanf+0x1ac>
    1ca6:	b5 01       	movw	r22, r10
    1ca8:	ce 01       	movw	r24, r28
    1caa:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <ungetc>
    1cae:	08 c0       	rjmp	.+16     	; 0x1cc0 <vfscanf+0x1bc>
    1cb0:	e1 14       	cp	r14, r1
    1cb2:	f1 04       	cpc	r15, r1
    1cb4:	19 f0       	breq	.+6      	; 0x1cbc <vfscanf+0x1b8>
    1cb6:	f7 01       	movw	r30, r14
    1cb8:	c1 93       	st	Z+, r28
    1cba:	7f 01       	movw	r14, r30
    1cbc:	9a 94       	dec	r9
    1cbe:	49 f7       	brne	.-46     	; 0x1c92 <vfscanf+0x18e>
    1cc0:	e1 14       	cp	r14, r1
    1cc2:	f1 04       	cpc	r15, r1
    1cc4:	a9 f0       	breq	.+42     	; 0x1cf0 <vfscanf+0x1ec>
    1cc6:	f7 01       	movw	r30, r14
    1cc8:	10 82       	st	Z, r1
    1cca:	12 c0       	rjmp	.+36     	; 0x1cf0 <vfscanf+0x1ec>
    1ccc:	00 62       	ori	r16, 0x20	; 32
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <vfscanf+0x1d2>
    1cd0:	00 61       	ori	r16, 0x10	; 16
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <vfscanf+0x1d2>
    1cd4:	00 64       	ori	r16, 0x40	; 64
    1cd6:	20 2f       	mov	r18, r16
    1cd8:	a7 01       	movw	r20, r14
    1cda:	69 2d       	mov	r22, r9
    1cdc:	c5 01       	movw	r24, r10
    1cde:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <conv_int>
    1ce2:	88 23       	and	r24, r24
    1ce4:	29 f4       	brne	.+10     	; 0x1cf0 <vfscanf+0x1ec>
    1ce6:	f5 01       	movw	r30, r10
    1ce8:	83 81       	ldd	r24, Z+3	; 0x03
    1cea:	80 73       	andi	r24, 0x30	; 48
    1cec:	79 f4       	brne	.+30     	; 0x1d0c <vfscanf+0x208>
    1cee:	13 c0       	rjmp	.+38     	; 0x1d16 <vfscanf+0x212>
    1cf0:	00 ff       	sbrs	r16, 0
    1cf2:	83 94       	inc	r8
    1cf4:	f5 01       	movw	r30, r10
    1cf6:	f3 80       	ldd	r15, Z+3	; 0x03
    1cf8:	f6 01       	movw	r30, r12
    1cfa:	f3 fc       	sbrc	r15, 3
    1cfc:	15 91       	lpm	r17, Z+
    1cfe:	f3 fe       	sbrs	r15, 3
    1d00:	11 91       	ld	r17, Z+
    1d02:	6f 01       	movw	r12, r30
    1d04:	11 23       	and	r17, r17
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <vfscanf+0x206>
    1d08:	0b cf       	rjmp	.-490    	; 0x1b20 <vfscanf+0x1c>
    1d0a:	05 c0       	rjmp	.+10     	; 0x1d16 <vfscanf+0x212>
    1d0c:	88 20       	and	r8, r8
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <vfscanf+0x212>
    1d10:	2f ef       	ldi	r18, 0xFF	; 255
    1d12:	3f ef       	ldi	r19, 0xFF	; 255
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <vfscanf+0x216>
    1d16:	28 2d       	mov	r18, r8
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	c9 01       	movw	r24, r18
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	ee e0       	ldi	r30, 0x0E	; 14
    1d22:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__+0x8>

00001d26 <strchr_P>:
    1d26:	fc 01       	movw	r30, r24
    1d28:	05 90       	lpm	r0, Z+
    1d2a:	06 16       	cp	r0, r22
    1d2c:	21 f0       	breq	.+8      	; 0x1d36 <strchr_P+0x10>
    1d2e:	00 20       	and	r0, r0
    1d30:	d9 f7       	brne	.-10     	; 0x1d28 <strchr_P+0x2>
    1d32:	c0 01       	movw	r24, r0
    1d34:	08 95       	ret
    1d36:	31 97       	sbiw	r30, 0x01	; 1
    1d38:	cf 01       	movw	r24, r30
    1d3a:	08 95       	ret

00001d3c <strnlen_P>:
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	05 90       	lpm	r0, Z+
    1d40:	61 50       	subi	r22, 0x01	; 1
    1d42:	70 40       	sbci	r23, 0x00	; 0
    1d44:	01 10       	cpse	r0, r1
    1d46:	d8 f7       	brcc	.-10     	; 0x1d3e <strnlen_P+0x2>
    1d48:	80 95       	com	r24
    1d4a:	90 95       	com	r25
    1d4c:	8e 0f       	add	r24, r30
    1d4e:	9f 1f       	adc	r25, r31
    1d50:	08 95       	ret

00001d52 <strnlen>:
    1d52:	fc 01       	movw	r30, r24
    1d54:	61 50       	subi	r22, 0x01	; 1
    1d56:	70 40       	sbci	r23, 0x00	; 0
    1d58:	01 90       	ld	r0, Z+
    1d5a:	01 10       	cpse	r0, r1
    1d5c:	d8 f7       	brcc	.-10     	; 0x1d54 <strnlen+0x2>
    1d5e:	80 95       	com	r24
    1d60:	90 95       	com	r25
    1d62:	8e 0f       	add	r24, r30
    1d64:	9f 1f       	adc	r25, r31
    1d66:	08 95       	ret

00001d68 <fgetc>:
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	ec 01       	movw	r28, r24
    1d6e:	4b 81       	ldd	r20, Y+3	; 0x03
    1d70:	40 ff       	sbrs	r20, 0
    1d72:	1a c0       	rjmp	.+52     	; 0x1da8 <fgetc+0x40>
    1d74:	46 ff       	sbrs	r20, 6
    1d76:	0a c0       	rjmp	.+20     	; 0x1d8c <fgetc+0x24>
    1d78:	4f 7b       	andi	r20, 0xBF	; 191
    1d7a:	4b 83       	std	Y+3, r20	; 0x03
    1d7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	9f 83       	std	Y+7, r25	; 0x07
    1d84:	8e 83       	std	Y+6, r24	; 0x06
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	2b c0       	rjmp	.+86     	; 0x1de2 <fgetc+0x7a>
    1d8c:	42 ff       	sbrs	r20, 2
    1d8e:	13 c0       	rjmp	.+38     	; 0x1db6 <fgetc+0x4e>
    1d90:	e8 81       	ld	r30, Y
    1d92:	f9 81       	ldd	r31, Y+1	; 0x01
    1d94:	80 81       	ld	r24, Z
    1d96:	28 2f       	mov	r18, r24
    1d98:	33 27       	eor	r19, r19
    1d9a:	27 fd       	sbrc	r18, 7
    1d9c:	30 95       	com	r19
    1d9e:	21 15       	cp	r18, r1
    1da0:	31 05       	cpc	r19, r1
    1da2:	29 f4       	brne	.+10     	; 0x1dae <fgetc+0x46>
    1da4:	40 62       	ori	r20, 0x20	; 32
    1da6:	4b 83       	std	Y+3, r20	; 0x03
    1da8:	2f ef       	ldi	r18, 0xFF	; 255
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	1b c0       	rjmp	.+54     	; 0x1de4 <fgetc+0x7c>
    1dae:	31 96       	adiw	r30, 0x01	; 1
    1db0:	f9 83       	std	Y+1, r31	; 0x01
    1db2:	e8 83       	st	Y, r30
    1db4:	11 c0       	rjmp	.+34     	; 0x1dd8 <fgetc+0x70>
    1db6:	ea 85       	ldd	r30, Y+10	; 0x0a
    1db8:	fb 85       	ldd	r31, Y+11	; 0x0b
    1dba:	ce 01       	movw	r24, r28
    1dbc:	09 95       	icall
    1dbe:	9c 01       	movw	r18, r24
    1dc0:	97 ff       	sbrs	r25, 7
    1dc2:	0a c0       	rjmp	.+20     	; 0x1dd8 <fgetc+0x70>
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	2f 5f       	subi	r18, 0xFF	; 255
    1dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dca:	11 f0       	breq	.+4      	; 0x1dd0 <fgetc+0x68>
    1dcc:	80 e2       	ldi	r24, 0x20	; 32
    1dce:	01 c0       	rjmp	.+2      	; 0x1dd2 <fgetc+0x6a>
    1dd0:	80 e1       	ldi	r24, 0x10	; 16
    1dd2:	89 2b       	or	r24, r25
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
    1dd6:	e8 cf       	rjmp	.-48     	; 0x1da8 <fgetc+0x40>
    1dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dda:	9f 81       	ldd	r25, Y+7	; 0x07
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	9f 83       	std	Y+7, r25	; 0x07
    1de0:	8e 83       	std	Y+6, r24	; 0x06
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	c9 01       	movw	r24, r18
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	08 95       	ret

00001dec <ungetc>:
    1dec:	9c 01       	movw	r18, r24
    1dee:	fb 01       	movw	r30, r22
    1df0:	83 81       	ldd	r24, Z+3	; 0x03
    1df2:	80 ff       	sbrs	r24, 0
    1df4:	11 c0       	rjmp	.+34     	; 0x1e18 <ungetc+0x2c>
    1df6:	86 fd       	sbrc	r24, 6
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <ungetc+0x2c>
    1dfa:	9f ef       	ldi	r25, 0xFF	; 255
    1dfc:	2f 3f       	cpi	r18, 0xFF	; 255
    1dfe:	39 07       	cpc	r19, r25
    1e00:	59 f0       	breq	.+22     	; 0x1e18 <ungetc+0x2c>
    1e02:	22 83       	std	Z+2, r18	; 0x02
    1e04:	80 64       	ori	r24, 0x40	; 64
    1e06:	8f 7d       	andi	r24, 0xDF	; 223
    1e08:	83 83       	std	Z+3, r24	; 0x03
    1e0a:	86 81       	ldd	r24, Z+6	; 0x06
    1e0c:	97 81       	ldd	r25, Z+7	; 0x07
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	97 83       	std	Z+7, r25	; 0x07
    1e12:	86 83       	std	Z+6, r24	; 0x06
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <ungetc+0x30>
    1e18:	2f ef       	ldi	r18, 0xFF	; 255
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	c9 01       	movw	r24, r18
    1e1e:	08 95       	ret

00001e20 <__ultoa_invert>:
    1e20:	fa 01       	movw	r30, r20
    1e22:	aa 27       	eor	r26, r26
    1e24:	28 30       	cpi	r18, 0x08	; 8
    1e26:	51 f1       	breq	.+84     	; 0x1e7c <__ultoa_invert+0x5c>
    1e28:	20 31       	cpi	r18, 0x10	; 16
    1e2a:	81 f1       	breq	.+96     	; 0x1e8c <__ultoa_invert+0x6c>
    1e2c:	e8 94       	clt
    1e2e:	6f 93       	push	r22
    1e30:	6e 7f       	andi	r22, 0xFE	; 254
    1e32:	6e 5f       	subi	r22, 0xFE	; 254
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	8f 4f       	sbci	r24, 0xFF	; 255
    1e38:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3a:	af 4f       	sbci	r26, 0xFF	; 255
    1e3c:	b1 e0       	ldi	r27, 0x01	; 1
    1e3e:	3e d0       	rcall	.+124    	; 0x1ebc <__ultoa_invert+0x9c>
    1e40:	b4 e0       	ldi	r27, 0x04	; 4
    1e42:	3c d0       	rcall	.+120    	; 0x1ebc <__ultoa_invert+0x9c>
    1e44:	67 0f       	add	r22, r23
    1e46:	78 1f       	adc	r23, r24
    1e48:	89 1f       	adc	r24, r25
    1e4a:	9a 1f       	adc	r25, r26
    1e4c:	a1 1d       	adc	r26, r1
    1e4e:	68 0f       	add	r22, r24
    1e50:	79 1f       	adc	r23, r25
    1e52:	8a 1f       	adc	r24, r26
    1e54:	91 1d       	adc	r25, r1
    1e56:	a1 1d       	adc	r26, r1
    1e58:	6a 0f       	add	r22, r26
    1e5a:	71 1d       	adc	r23, r1
    1e5c:	81 1d       	adc	r24, r1
    1e5e:	91 1d       	adc	r25, r1
    1e60:	a1 1d       	adc	r26, r1
    1e62:	20 d0       	rcall	.+64     	; 0x1ea4 <__ultoa_invert+0x84>
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <__ultoa_invert+0x48>
    1e66:	68 94       	set
    1e68:	3f 91       	pop	r19
    1e6a:	2a e0       	ldi	r18, 0x0A	; 10
    1e6c:	26 9f       	mul	r18, r22
    1e6e:	11 24       	eor	r1, r1
    1e70:	30 19       	sub	r19, r0
    1e72:	30 5d       	subi	r19, 0xD0	; 208
    1e74:	31 93       	st	Z+, r19
    1e76:	de f6       	brtc	.-74     	; 0x1e2e <__ultoa_invert+0xe>
    1e78:	cf 01       	movw	r24, r30
    1e7a:	08 95       	ret
    1e7c:	46 2f       	mov	r20, r22
    1e7e:	47 70       	andi	r20, 0x07	; 7
    1e80:	40 5d       	subi	r20, 0xD0	; 208
    1e82:	41 93       	st	Z+, r20
    1e84:	b3 e0       	ldi	r27, 0x03	; 3
    1e86:	0f d0       	rcall	.+30     	; 0x1ea6 <__ultoa_invert+0x86>
    1e88:	c9 f7       	brne	.-14     	; 0x1e7c <__ultoa_invert+0x5c>
    1e8a:	f6 cf       	rjmp	.-20     	; 0x1e78 <__ultoa_invert+0x58>
    1e8c:	46 2f       	mov	r20, r22
    1e8e:	4f 70       	andi	r20, 0x0F	; 15
    1e90:	40 5d       	subi	r20, 0xD0	; 208
    1e92:	4a 33       	cpi	r20, 0x3A	; 58
    1e94:	18 f0       	brcs	.+6      	; 0x1e9c <__ultoa_invert+0x7c>
    1e96:	49 5d       	subi	r20, 0xD9	; 217
    1e98:	31 fd       	sbrc	r19, 1
    1e9a:	40 52       	subi	r20, 0x20	; 32
    1e9c:	41 93       	st	Z+, r20
    1e9e:	02 d0       	rcall	.+4      	; 0x1ea4 <__ultoa_invert+0x84>
    1ea0:	a9 f7       	brne	.-22     	; 0x1e8c <__ultoa_invert+0x6c>
    1ea2:	ea cf       	rjmp	.-44     	; 0x1e78 <__ultoa_invert+0x58>
    1ea4:	b4 e0       	ldi	r27, 0x04	; 4
    1ea6:	a6 95       	lsr	r26
    1ea8:	97 95       	ror	r25
    1eaa:	87 95       	ror	r24
    1eac:	77 95       	ror	r23
    1eae:	67 95       	ror	r22
    1eb0:	ba 95       	dec	r27
    1eb2:	c9 f7       	brne	.-14     	; 0x1ea6 <__ultoa_invert+0x86>
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	61 05       	cpc	r22, r1
    1eb8:	71 05       	cpc	r23, r1
    1eba:	08 95       	ret
    1ebc:	9b 01       	movw	r18, r22
    1ebe:	ac 01       	movw	r20, r24
    1ec0:	0a 2e       	mov	r0, r26
    1ec2:	06 94       	lsr	r0
    1ec4:	57 95       	ror	r21
    1ec6:	47 95       	ror	r20
    1ec8:	37 95       	ror	r19
    1eca:	27 95       	ror	r18
    1ecc:	ba 95       	dec	r27
    1ece:	c9 f7       	brne	.-14     	; 0x1ec2 <__ultoa_invert+0xa2>
    1ed0:	62 0f       	add	r22, r18
    1ed2:	73 1f       	adc	r23, r19
    1ed4:	84 1f       	adc	r24, r20
    1ed6:	95 1f       	adc	r25, r21
    1ed8:	a0 1d       	adc	r26, r0
    1eda:	08 95       	ret

00001edc <__udivmodhi4>:
    1edc:	aa 1b       	sub	r26, r26
    1ede:	bb 1b       	sub	r27, r27
    1ee0:	51 e1       	ldi	r21, 0x11	; 17
    1ee2:	07 c0       	rjmp	.+14     	; 0x1ef2 <__udivmodhi4_ep>

00001ee4 <__udivmodhi4_loop>:
    1ee4:	aa 1f       	adc	r26, r26
    1ee6:	bb 1f       	adc	r27, r27
    1ee8:	a6 17       	cp	r26, r22
    1eea:	b7 07       	cpc	r27, r23
    1eec:	10 f0       	brcs	.+4      	; 0x1ef2 <__udivmodhi4_ep>
    1eee:	a6 1b       	sub	r26, r22
    1ef0:	b7 0b       	sbc	r27, r23

00001ef2 <__udivmodhi4_ep>:
    1ef2:	88 1f       	adc	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	5a 95       	dec	r21
    1ef8:	a9 f7       	brne	.-22     	; 0x1ee4 <__udivmodhi4_loop>
    1efa:	80 95       	com	r24
    1efc:	90 95       	com	r25
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	08 95       	ret

00001f04 <__divmodhi4>:
    1f04:	97 fb       	bst	r25, 7
    1f06:	09 2e       	mov	r0, r25
    1f08:	07 26       	eor	r0, r23
    1f0a:	0a d0       	rcall	.+20     	; 0x1f20 <__divmodhi4_neg1>
    1f0c:	77 fd       	sbrc	r23, 7
    1f0e:	04 d0       	rcall	.+8      	; 0x1f18 <__divmodhi4_neg2>
    1f10:	e5 df       	rcall	.-54     	; 0x1edc <__udivmodhi4>
    1f12:	06 d0       	rcall	.+12     	; 0x1f20 <__divmodhi4_neg1>
    1f14:	00 20       	and	r0, r0
    1f16:	1a f4       	brpl	.+6      	; 0x1f1e <__divmodhi4_exit>

00001f18 <__divmodhi4_neg2>:
    1f18:	70 95       	com	r23
    1f1a:	61 95       	neg	r22
    1f1c:	7f 4f       	sbci	r23, 0xFF	; 255

00001f1e <__divmodhi4_exit>:
    1f1e:	08 95       	ret

00001f20 <__divmodhi4_neg1>:
    1f20:	f6 f7       	brtc	.-4      	; 0x1f1e <__divmodhi4_exit>
    1f22:	90 95       	com	r25
    1f24:	81 95       	neg	r24
    1f26:	9f 4f       	sbci	r25, 0xFF	; 255
    1f28:	08 95       	ret

00001f2a <__prologue_saves__>:
    1f2a:	2f 92       	push	r2
    1f2c:	3f 92       	push	r3
    1f2e:	4f 92       	push	r4
    1f30:	5f 92       	push	r5
    1f32:	6f 92       	push	r6
    1f34:	7f 92       	push	r7
    1f36:	8f 92       	push	r8
    1f38:	9f 92       	push	r9
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	ca 1b       	sub	r28, r26
    1f54:	db 0b       	sbc	r29, r27
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	09 94       	ijmp

00001f62 <__epilogue_restores__>:
    1f62:	2a 88       	ldd	r2, Y+18	; 0x12
    1f64:	39 88       	ldd	r3, Y+17	; 0x11
    1f66:	48 88       	ldd	r4, Y+16	; 0x10
    1f68:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f70:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f72:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f74:	b9 84       	ldd	r11, Y+9	; 0x09
    1f76:	c8 84       	ldd	r12, Y+8	; 0x08
    1f78:	df 80       	ldd	r13, Y+7	; 0x07
    1f7a:	ee 80       	ldd	r14, Y+6	; 0x06
    1f7c:	fd 80       	ldd	r15, Y+5	; 0x05
    1f7e:	0c 81       	ldd	r16, Y+4	; 0x04
    1f80:	1b 81       	ldd	r17, Y+3	; 0x03
    1f82:	aa 81       	ldd	r26, Y+2	; 0x02
    1f84:	b9 81       	ldd	r27, Y+1	; 0x01
    1f86:	ce 0f       	add	r28, r30
    1f88:	d1 1d       	adc	r29, r1
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	ed 01       	movw	r28, r26
    1f96:	08 95       	ret

00001f98 <isspace>:
    1f98:	91 11       	cpse	r25, r1
    1f9a:	06 c0       	rjmp	.+12     	; 0x1fa8 <__ctype_isfalse>
    1f9c:	80 32       	cpi	r24, 0x20	; 32
    1f9e:	19 f0       	breq	.+6      	; 0x1fa6 <isspace+0xe>
    1fa0:	89 50       	subi	r24, 0x09	; 9
    1fa2:	85 50       	subi	r24, 0x05	; 5
    1fa4:	d0 f7       	brcc	.-12     	; 0x1f9a <isspace+0x2>
    1fa6:	08 95       	ret

00001fa8 <__ctype_isfalse>:
    1fa8:	99 27       	eor	r25, r25
    1faa:	88 27       	eor	r24, r24

00001fac <__ctype_istrue>:
    1fac:	08 95       	ret

00001fae <_exit>:
    1fae:	f8 94       	cli

00001fb0 <__stop_program>:
    1fb0:	ff cf       	rjmp	.-2      	; 0x1fb0 <__stop_program>
