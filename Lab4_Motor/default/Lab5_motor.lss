
Lab5_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000257a  0000260e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000257a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018e  00800134  00800134  00002642  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002642  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000390  00000000  00000000  00002662  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114f  00000000  00000000  000029f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000313  00000000  00000000  00003b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e41  00000000  00000000  00003e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00004c98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b0  00000000  00000000  00004f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000be2  00000000  00000000  00005408  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__ctors_end>
       4:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__vector_1>
       8:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
       c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      10:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      14:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      18:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      1c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      20:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      24:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      28:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      2c:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__vector_11>
      30:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_13>
      38:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      3c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      40:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      44:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      48:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      4c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      50:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_20>
      54:	0c 94 07 04 	jmp	0x80e	; 0x80e <__vector_21>
      58:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      5c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      60:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      64:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      68:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      6c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      70:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      74:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      78:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      7c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      80:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      84:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      88:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_initialize>:
      cc:	52 50 4d 3a 20 00                                   RPM: .

000000d2 <LCD_number>:
      d2:	4e 75 6d 62 65 72 3d 00 00                          Number=..

000000db <__c.1790>:
      db:	6e 61 6e 00                                         nan.

000000df <__c.1788>:
      df:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ef:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ff:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     10f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     11f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     12f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     13f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     14f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     15f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     16f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     17f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     18f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     19f:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1af:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1bf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1cf:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001dd <__c.1988>:
     1dd:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

000001ea <__ctors_end>:
     1ea:	11 24       	eor	r1, r1
     1ec:	1f be       	out	0x3f, r1	; 63
     1ee:	cf ef       	ldi	r28, 0xFF	; 255
     1f0:	d0 e4       	ldi	r29, 0x40	; 64
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	cd bf       	out	0x3d, r28	; 61

000001f6 <__do_copy_data>:
     1f6:	11 e0       	ldi	r17, 0x01	; 1
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	ea e7       	ldi	r30, 0x7A	; 122
     1fe:	f5 e2       	ldi	r31, 0x25	; 37
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0b bf       	out	0x3b, r16	; 59
     204:	02 c0       	rjmp	.+4      	; 0x20a <__do_copy_data+0x14>
     206:	07 90       	elpm	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	a4 33       	cpi	r26, 0x34	; 52
     20c:	b1 07       	cpc	r27, r17
     20e:	d9 f7       	brne	.-10     	; 0x206 <__do_copy_data+0x10>

00000210 <__do_clear_bss>:
     210:	12 e0       	ldi	r17, 0x02	; 2
     212:	a4 e3       	ldi	r26, 0x34	; 52
     214:	b1 e0       	ldi	r27, 0x01	; 1
     216:	01 c0       	rjmp	.+2      	; 0x21a <.do_clear_bss_start>

00000218 <.do_clear_bss_loop>:
     218:	1d 92       	st	X+, r1

0000021a <.do_clear_bss_start>:
     21a:	a2 3c       	cpi	r26, 0xC2	; 194
     21c:	b1 07       	cpc	r27, r17
     21e:	e1 f7       	brne	.-8      	; 0x218 <.do_clear_bss_loop>
     220:	0e 94 80 07 	call	0xf00	; 0xf00 <main>
     224:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <_exit>

00000228 <__bad_interrupt>:
     228:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022c <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     22c:	1f 92       	push	r1
     22e:	0f 92       	push	r0
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	0f 92       	push	r0
     234:	0b b6       	in	r0, 0x3b	; 59
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
     23a:	2f 92       	push	r2
     23c:	3f 92       	push	r3
     23e:	4f 92       	push	r4
     240:	5f 92       	push	r5
     242:	6f 92       	push	r6
     244:	7f 92       	push	r7
     246:	8f 92       	push	r8
     248:	9f 92       	push	r9
     24a:	af 92       	push	r10
     24c:	bf 92       	push	r11
     24e:	cf 92       	push	r12
     250:	df 92       	push	r13
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	2f 93       	push	r18
     25c:	3f 93       	push	r19
     25e:	4f 93       	push	r20
     260:	5f 93       	push	r21
     262:	6f 93       	push	r22
     264:	7f 93       	push	r23
     266:	8f 93       	push	r24
     268:	9f 93       	push	r25
     26a:	af 93       	push	r26
     26c:	bf 93       	push	r27
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ef 93       	push	r30
     274:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
  
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     276:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     27a:	50 90 72 02 	lds	r5, 0x0272
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     27e:	b0 9b       	sbis	0x16, 0	; 22
     280:	14 c0       	rjmp	.+40     	; 0x2aa <__vector_13+0x7e>
    ++kernel.cycles;
     282:	80 91 a9 02 	lds	r24, 0x02A9
     286:	90 91 aa 02 	lds	r25, 0x02AA
     28a:	a0 91 ab 02 	lds	r26, 0x02AB
     28e:	b0 91 ac 02 	lds	r27, 0x02AC
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	a1 1d       	adc	r26, r1
     296:	b1 1d       	adc	r27, r1
     298:	80 93 a9 02 	sts	0x02A9, r24
     29c:	90 93 aa 02 	sts	0x02AA, r25
     2a0:	a0 93 ab 02 	sts	0x02AB, r26
     2a4:	b0 93 ac 02 	sts	0x02AC, r27
    TIFR1 |= (1<<TOV1) ;
     2a8:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     2aa:	80 91 84 00 	lds	r24, 0x0084
     2ae:	90 91 85 00 	lds	r25, 0x0085
     2b2:	3c 01       	movw	r6, r24
     2b4:	88 24       	eor	r8, r8
     2b6:	99 24       	eor	r9, r9
     2b8:	80 91 a9 02 	lds	r24, 0x02A9
     2bc:	90 91 aa 02 	lds	r25, 0x02AA
     2c0:	a0 91 ab 02 	lds	r26, 0x02AB
     2c4:	b0 91 ac 02 	lds	r27, 0x02AC
     2c8:	dc 01       	movw	r26, r24
     2ca:	99 27       	eor	r25, r25
     2cc:	88 27       	eor	r24, r24
     2ce:	68 0e       	add	r6, r24
     2d0:	79 1e       	adc	r7, r25
     2d2:	8a 1e       	adc	r8, r26
     2d4:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     2d6:	40 90 71 02 	lds	r4, 0x0271
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	61 e0       	ldi	r22, 0x01	; 1
     2de:	ff ef       	ldi	r31, 0xFF	; 255
     2e0:	af 2e       	mov	r10, r31
     2e2:	ff ef       	ldi	r31, 0xFF	; 255
     2e4:	bf 2e       	mov	r11, r31
     2e6:	ff ef       	ldi	r31, 0xFF	; 255
     2e8:	cf 2e       	mov	r12, r31
     2ea:	ff e7       	ldi	r31, 0x7F	; 127
     2ec:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     2ee:	eb e0       	ldi	r30, 0x0B	; 11
     2f0:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
  t->state = READYQ;
     2f2:	33 24       	eor	r3, r3
     2f4:	33 94       	inc	r3
      } else if (t->release < nextHit) {
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     2f6:	cb e0       	ldi	r28, 0x0B	; 11
     2f8:	d0 e0       	ldi	r29, 0x00	; 0
     2fa:	43 c0       	rjmp	.+134    	; 0x382 <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     2fc:	62 9d       	mul	r22, r2
     2fe:	d0 01       	movw	r26, r0
     300:	11 24       	eor	r1, r1
     302:	ad 58       	subi	r26, 0x8D	; 141
     304:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     306:	1a 96       	adiw	r26, 0x0a	; 10
     308:	8c 91       	ld	r24, X
     30a:	1a 97       	sbiw	r26, 0x0a	; 10
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	a1 f4       	brne	.+40     	; 0x338 <__vector_13+0x10c>
      if (t->release <= now) {
     310:	12 96       	adiw	r26, 0x02	; 2
     312:	ed 90       	ld	r14, X+
     314:	fd 90       	ld	r15, X+
     316:	0d 91       	ld	r16, X+
     318:	1c 91       	ld	r17, X
     31a:	15 97       	sbiw	r26, 0x05	; 5
     31c:	6e 14       	cp	r6, r14
     31e:	7f 04       	cpc	r7, r15
     320:	80 06       	cpc	r8, r16
     322:	91 06       	cpc	r9, r17
     324:	20 f0       	brcs	.+8      	; 0x32e <__vector_13+0x102>
  t->state = READYQ;
     326:	1a 96       	adiw	r26, 0x0a	; 10
     328:	3c 92       	st	X, r3
     32a:	1a 97       	sbiw	r26, 0x0a	; 10
     32c:	05 c0       	rjmp	.+10     	; 0x338 <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     32e:	ea 14       	cp	r14, r10
     330:	fb 04       	cpc	r15, r11
     332:	0c 05       	cpc	r16, r12
     334:	1d 05       	cpc	r17, r13
     336:	10 f0       	brcs	.+4      	; 0x33c <__vector_13+0x110>
     338:	86 01       	movw	r16, r12
     33a:	75 01       	movw	r14, r10
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     33c:	1a 96       	adiw	r26, 0x0a	; 10
     33e:	8c 91       	ld	r24, X
     340:	1a 97       	sbiw	r26, 0x0a	; 10
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	d9 f4       	brne	.+54     	; 0x37c <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     346:	87 2f       	mov	r24, r23
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	8c 9f       	mul	r24, r28
     34c:	f0 01       	movw	r30, r0
     34e:	8d 9f       	mul	r24, r29
     350:	f0 0d       	add	r31, r0
     352:	9c 9f       	mul	r25, r28
     354:	f0 0d       	add	r31, r0
     356:	11 24       	eor	r1, r1
     358:	ef 58       	subi	r30, 0x8F	; 143
     35a:	fd 4f       	sbci	r31, 0xFD	; 253
     35c:	16 96       	adiw	r26, 0x06	; 6
     35e:	2d 91       	ld	r18, X+
     360:	3d 91       	ld	r19, X+
     362:	4d 91       	ld	r20, X+
     364:	5c 91       	ld	r21, X
     366:	19 97       	sbiw	r26, 0x09	; 9
     368:	80 85       	ldd	r24, Z+8	; 0x08
     36a:	91 85       	ldd	r25, Z+9	; 0x09
     36c:	a2 85       	ldd	r26, Z+10	; 0x0a
     36e:	b3 85       	ldd	r27, Z+11	; 0x0b
     370:	28 17       	cp	r18, r24
     372:	39 07       	cpc	r19, r25
     374:	4a 07       	cpc	r20, r26
     376:	5b 07       	cpc	r21, r27
     378:	08 f4       	brcc	.+2      	; 0x37c <__vector_13+0x150>
     37a:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     37c:	6f 5f       	subi	r22, 0xFF	; 255
     37e:	57 01       	movw	r10, r14
     380:	68 01       	movw	r12, r16
     382:	46 16       	cp	r4, r22
     384:	08 f0       	brcs	.+2      	; 0x388 <__vector_13+0x15c>
     386:	ba cf       	rjmp	.-140    	; 0x2fc <__vector_13+0xd0>
    }
  }
  //fprintf(stdout, "Old: %u New: %u\n\r", oldrunning, running);
  //fprintf(stdout, "NumTasks: %u\n\r", kernel.nbrOfTasks);
  //fprintf(stdout, "Current time: %lu\n\r", (unsigned long) trtCurrentTime());
  if (running != oldrunning) { // perform context switch?
     388:	75 15       	cp	r23, r5
     38a:	b1 f0       	breq	.+44     	; 0x3b8 <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     38c:	eb e0       	ldi	r30, 0x0B	; 11
     38e:	5e 9e       	mul	r5, r30
     390:	d0 01       	movw	r26, r0
     392:	11 24       	eor	r1, r1
     394:	ad 58       	subi	r26, 0x8D	; 141
     396:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     398:	8d b7       	in	r24, 0x3d	; 61
     39a:	8c 93       	st	X, r24
    t->sph = SPH;
     39c:	8e b7       	in	r24, 0x3e	; 62
     39e:	11 96       	adiw	r26, 0x01	; 1
     3a0:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     3a2:	7e 9f       	mul	r23, r30
     3a4:	f0 01       	movw	r30, r0
     3a6:	11 24       	eor	r1, r1
     3a8:	ed 58       	subi	r30, 0x8D	; 141
     3aa:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     3ac:	81 81       	ldd	r24, Z+1	; 0x01
     3ae:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     3b0:	80 81       	ld	r24, Z
     3b2:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     3b4:	70 93 72 02 	sts	0x0272, r23

  }

  kernel.nextHit = nextHit;  
     3b8:	a0 92 ad 02 	sts	0x02AD, r10
     3bc:	b0 92 ae 02 	sts	0x02AE, r11
     3c0:	c0 92 af 02 	sts	0x02AF, r12
     3c4:	d0 92 b0 02 	sts	0x02B0, r13

  now = (kernel.cycles << 16) + TCNT1;
     3c8:	20 91 84 00 	lds	r18, 0x0084
     3cc:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	80 91 a9 02 	lds	r24, 0x02A9
     3d8:	90 91 aa 02 	lds	r25, 0x02AA
     3dc:	a0 91 ab 02 	lds	r26, 0x02AB
     3e0:	b0 91 ac 02 	lds	r27, 0x02AC
     3e4:	dc 01       	movw	r26, r24
     3e6:	99 27       	eor	r25, r25
     3e8:	88 27       	eor	r24, r24
     3ea:	28 0f       	add	r18, r24
     3ec:	39 1f       	adc	r19, r25
     3ee:	4a 1f       	adc	r20, r26
     3f0:	5b 1f       	adc	r21, r27
     3f2:	d6 01       	movw	r26, r12
     3f4:	c5 01       	movw	r24, r10
     3f6:	82 1b       	sub	r24, r18
     3f8:	93 0b       	sbc	r25, r19
     3fa:	a4 0b       	sbc	r26, r20
     3fc:	b5 0b       	sbc	r27, r21
     3fe:	9c 01       	movw	r18, r24
     400:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     402:	84 30       	cpi	r24, 0x04	; 4
     404:	91 05       	cpc	r25, r1
     406:	a1 05       	cpc	r26, r1
     408:	b1 05       	cpc	r27, r1
     40a:	24 f4       	brge	.+8      	; 0x414 <__vector_13+0x1e8>
     40c:	24 e0       	ldi	r18, 0x04	; 4
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     414:	80 91 84 00 	lds	r24, 0x0084
     418:	90 91 85 00 	lds	r25, 0x0085
     41c:	a0 e0       	ldi	r26, 0x00	; 0
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	82 0f       	add	r24, r18
     422:	93 1f       	adc	r25, r19
     424:	a4 1f       	adc	r26, r20
     426:	b5 1f       	adc	r27, r21
     428:	80 50       	subi	r24, 0x00	; 0
     42a:	90 40       	sbci	r25, 0x00	; 0
     42c:	a1 40       	sbci	r26, 0x01	; 1
     42e:	b0 40       	sbci	r27, 0x00	; 0
     430:	38 f4       	brcc	.+14     	; 0x440 <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     432:	80 91 84 00 	lds	r24, 0x0084
     436:	90 91 85 00 	lds	r25, 0x0085
     43a:	82 0f       	add	r24, r18
     43c:	93 1f       	adc	r25, r19
     43e:	0e c0       	rjmp	.+28     	; 0x45c <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     440:	80 91 84 00 	lds	r24, 0x0084
     444:	90 91 85 00 	lds	r25, 0x0085
     448:	8c 5f       	subi	r24, 0xFC	; 252
     44a:	9f 4f       	sbci	r25, 0xFF	; 255
     44c:	28 f4       	brcc	.+10     	; 0x458 <__vector_13+0x22c>
    OCR1A = 0x0000;
     44e:	10 92 89 00 	sts	0x0089, r1
     452:	10 92 88 00 	sts	0x0088, r1
     456:	06 c0       	rjmp	.+12     	; 0x464 <__vector_13+0x238>
  } else {
    OCR1A = 4;
     458:	84 e0       	ldi	r24, 0x04	; 4
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	90 93 89 00 	sts	0x0089, r25
     460:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	80 93 6f 00 	sts	0x006F, r24
}
     46a:	ff 91       	pop	r31
     46c:	ef 91       	pop	r30
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	ff 90       	pop	r15
     48c:	ef 90       	pop	r14
     48e:	df 90       	pop	r13
     490:	cf 90       	pop	r12
     492:	bf 90       	pop	r11
     494:	af 90       	pop	r10
     496:	9f 90       	pop	r9
     498:	8f 90       	pop	r8
     49a:	7f 90       	pop	r7
     49c:	6f 90       	pop	r6
     49e:	5f 90       	pop	r5
     4a0:	4f 90       	pop	r4
     4a2:	3f 90       	pop	r3
     4a4:	2f 90       	pop	r2
     4a6:	0f 90       	pop	r0
     4a8:	0b be       	out	0x3b, r0	; 59
     4aa:	0f 90       	pop	r0
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	0f 90       	pop	r0
     4b0:	1f 90       	pop	r1
     4b2:	18 95       	reti

000004b4 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     4b4:	10 92 85 00 	sts	0x0085, r1
     4b8:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     4bc:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     4c0:	25 e0       	ldi	r18, 0x05	; 5
     4c2:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     4c6:	22 e0       	ldi	r18, 0x02	; 2
     4c8:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     4cc:	2f ef       	ldi	r18, 0xFF	; 255
     4ce:	30 e4       	ldi	r19, 0x40	; 64
     4d0:	28 1b       	sub	r18, r24
     4d2:	39 0b       	sbc	r19, r25
     4d4:	30 93 a8 02 	sts	0x02A8, r19
     4d8:	20 93 a7 02 	sts	0x02A7, r18
  kernel.nbrOfTasks = 0;
     4dc:	10 92 71 02 	sts	0x0271, r1
  kernel.running = 0;
     4e0:	10 92 72 02 	sts	0x0272, r1

  kernel.cycles = 0x0000;
     4e4:	10 92 a9 02 	sts	0x02A9, r1
     4e8:	10 92 aa 02 	sts	0x02AA, r1
     4ec:	10 92 ab 02 	sts	0x02AB, r1
     4f0:	10 92 ac 02 	sts	0x02AC, r1
  kernel.nextHit = 0x7FFFFFFF;
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	9f ef       	ldi	r25, 0xFF	; 255
     4f8:	af ef       	ldi	r26, 0xFF	; 255
     4fa:	bf e7       	ldi	r27, 0x7F	; 127
     4fc:	80 93 ad 02 	sts	0x02AD, r24
     500:	90 93 ae 02 	sts	0x02AE, r25
     504:	a0 93 af 02 	sts	0x02AF, r26
     508:	b0 93 b0 02 	sts	0x02B0, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     50c:	80 93 79 02 	sts	0x0279, r24
     510:	90 93 7a 02 	sts	0x027A, r25
     514:	a0 93 7b 02 	sts	0x027B, r26
     518:	b0 93 7c 02 	sts	0x027C, r27
  kernel.tasks[0].release = 0x00000000;
     51c:	10 92 75 02 	sts	0x0275, r1
     520:	10 92 76 02 	sts	0x0276, r1
     524:	10 92 77 02 	sts	0x0277, r1
     528:	10 92 78 02 	sts	0x0278, r1

  sei(); /* set enabled interrupts */
     52c:	78 94       	sei
}
     52e:	08 95       	ret

00000530 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     530:	8f 92       	push	r8
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	49 01       	movw	r8, r18
     54a:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     54c:	f8 94       	cli

  ++kernel.nbrOfTasks;
     54e:	20 91 71 02 	lds	r18, 0x0271
     552:	2f 5f       	subi	r18, 0xFF	; 255
     554:	20 93 71 02 	sts	0x0271, r18

  sp = kernel.memptr;
     558:	c0 91 a7 02 	lds	r28, 0x02A7
     55c:	d0 91 a8 02 	lds	r29, 0x02A8
  kernel.memptr -= stacksize;  // decrease free mem ptr
     560:	9e 01       	movw	r18, r28
     562:	26 1b       	sub	r18, r22
     564:	37 0b       	sbc	r19, r23
     566:	30 93 a8 02 	sts	0x02A8, r19
     56a:	20 93 a7 02 	sts	0x02A7, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     56e:	88 83       	st	Y, r24
     570:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     572:	92 93       	st	-Z, r25
     574:	31 97       	sbiw	r30, 0x01	; 1
     576:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     578:	ce 01       	movw	r24, r28
     57a:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     57c:	1c 92       	st	X, r1
     57e:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     580:	a8 17       	cp	r26, r24
     582:	b9 07       	cpc	r27, r25
     584:	d9 f7       	brne	.-10     	; 0x57c <trtCreateTask+0x4c>
     586:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     588:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     58a:	d2 92       	st	-Z, r13
     58c:	31 97       	sbiw	r30, 0x01	; 1
     58e:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     590:	9e 01       	movw	r18, r28
     592:	24 52       	subi	r18, 0x24	; 36
     594:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     596:	1c 92       	st	X, r1
     598:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     59a:	a2 17       	cp	r26, r18
     59c:	b3 07       	cpc	r27, r19
     59e:	d9 f7       	brne	.-10     	; 0x596 <trtCreateTask+0x66>
     5a0:	9f 01       	movw	r18, r30
     5a2:	26 50       	subi	r18, 0x06	; 6
     5a4:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     5a6:	e0 91 71 02 	lds	r30, 0x0271
     5aa:	8b e0       	ldi	r24, 0x0B	; 11
     5ac:	e8 9f       	mul	r30, r24
     5ae:	f0 01       	movw	r30, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	ed 58       	subi	r30, 0x8D	; 141
     5b4:	fd 4f       	sbci	r31, 0xFD	; 253
  ///*
  t->release = release;
     5b6:	82 82       	std	Z+2, r8	; 0x02
     5b8:	93 82       	std	Z+3, r9	; 0x03
     5ba:	a4 82       	std	Z+4, r10	; 0x04
     5bc:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     5be:	e6 82       	std	Z+6, r14	; 0x06
     5c0:	f7 82       	std	Z+7, r15	; 0x07
     5c2:	00 87       	std	Z+8, r16	; 0x08
     5c4:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	82 87       	std	Z+10, r24	; 0x0a
  //*/
  t->spl = lo8(sp);       // store stack pointer
     5ca:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     5cc:	31 83       	std	Z+1, r19	; 0x01
  

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5ce:	0e 94 16 01 	call	0x22c	; 0x22c <__vector_13>

}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	df 90       	pop	r13
     5e0:	cf 90       	pop	r12
     5e2:	bf 90       	pop	r11
     5e4:	af 90       	pop	r10
     5e6:	9f 90       	pop	r9
     5e8:	8f 90       	pop	r8
     5ea:	08 95       	ret

000005ec <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     5ec:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     5ee:	e1 e7       	ldi	r30, 0x71	; 113
     5f0:	f2 e0       	ldi	r31, 0x02	; 2
     5f2:	e8 0f       	add	r30, r24
     5f4:	f1 1d       	adc	r31, r1
     5f6:	65 a7       	std	Z+45, r22	; 0x2d
  
  sei(); // set enabled interrupts;
     5f8:	78 94       	sei
}
     5fa:	08 95       	ret

000005fc <trtWait>:

void trtWait(uint8_t semnbr) {
     5fc:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     5fe:	20 91 72 02 	lds	r18, 0x0272

  cli(); // disable interrupts
     602:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     604:	e8 2f       	mov	r30, r24
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	e2 56       	subi	r30, 0x62	; 98
     60a:	fd 4f       	sbci	r31, 0xFD	; 253
  if ((*s) > 0) {
     60c:	80 81       	ld	r24, Z
     60e:	88 23       	and	r24, r24
     610:	19 f0       	breq	.+6      	; 0x618 <trtWait+0x1c>
    (*s)--;
     612:	81 50       	subi	r24, 0x01	; 1
     614:	80 83       	st	Z, r24
     616:	10 c0       	rjmp	.+32     	; 0x638 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	8b e0       	ldi	r24, 0x0B	; 11
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	28 9f       	mul	r18, r24
     620:	f0 01       	movw	r30, r0
     622:	29 9f       	mul	r18, r25
     624:	f0 0d       	add	r31, r0
     626:	38 9f       	mul	r19, r24
     628:	f0 0d       	add	r31, r0
     62a:	11 24       	eor	r1, r1
     62c:	ed 58       	subi	r30, 0x8D	; 141
     62e:	fd 4f       	sbci	r31, 0xFD	; 253
     630:	4e 5f       	subi	r20, 0xFE	; 254
     632:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     634:	0e 94 16 01 	call	0x22c	; 0x22c <__vector_13>
  }

  sei(); // reenable interrupts
     638:	78 94       	sei
}
     63a:	08 95       	ret

0000063c <trtSignal>:

void trtSignal(uint8_t semnbr) {
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     644:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     646:	00 91 71 02 	lds	r16, 0x0271
     64a:	e1 e0       	ldi	r30, 0x01	; 1
     64c:	4f ef       	ldi	r20, 0xFF	; 255
     64e:	5f ef       	ldi	r21, 0xFF	; 255
     650:	6f ef       	ldi	r22, 0xFF	; 255
     652:	7f ef       	ldi	r23, 0xFF	; 255
     654:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     656:	8b e0       	ldi	r24, 0x0B	; 11
     658:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     65a:	21 2f       	mov	r18, r17
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	2e 5f       	subi	r18, 0xFE	; 254
     660:	3f 4f       	sbci	r19, 0xFF	; 255
     662:	1e c0       	rjmp	.+60     	; 0x6a0 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     664:	ef 9d       	mul	r30, r15
     666:	d0 01       	movw	r26, r0
     668:	11 24       	eor	r1, r1
     66a:	ad 58       	subi	r26, 0x8D	; 141
     66c:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     66e:	1a 96       	adiw	r26, 0x0a	; 10
     670:	8c 91       	ld	r24, X
     672:	1a 97       	sbiw	r26, 0x0a	; 10
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	82 17       	cp	r24, r18
     678:	93 07       	cpc	r25, r19
     67a:	69 f4       	brne	.+26     	; 0x696 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     67c:	16 96       	adiw	r26, 0x06	; 6
     67e:	8d 91       	ld	r24, X+
     680:	9d 91       	ld	r25, X+
     682:	0d 90       	ld	r0, X+
     684:	bc 91       	ld	r27, X
     686:	a0 2d       	mov	r26, r0
     688:	48 17       	cp	r20, r24
     68a:	59 07       	cpc	r21, r25
     68c:	6a 07       	cpc	r22, r26
     68e:	7b 07       	cpc	r23, r27
     690:	10 f0       	brcs	.+4      	; 0x696 <trtSignal+0x5a>
     692:	fe 2f       	mov	r31, r30
     694:	02 c0       	rjmp	.+4      	; 0x69a <trtSignal+0x5e>
     696:	db 01       	movw	r26, r22
     698:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     69a:	ef 5f       	subi	r30, 0xFF	; 255
     69c:	ac 01       	movw	r20, r24
     69e:	bd 01       	movw	r22, r26
     6a0:	0e 17       	cp	r16, r30
     6a2:	00 f7       	brcc	.-64     	; 0x664 <trtSignal+0x28>
  minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     6a4:	ff 23       	and	r31, r31
     6a6:	41 f4       	brne	.+16     	; 0x6b8 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     6a8:	e1 2f       	mov	r30, r17
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	e0 59       	subi	r30, 0x90	; 144
     6ae:	fd 4f       	sbci	r31, 0xFD	; 253
     6b0:	86 a5       	ldd	r24, Z+46	; 0x2e
     6b2:	8f 5f       	subi	r24, 0xFF	; 255
     6b4:	86 a7       	std	Z+46, r24	; 0x2e
     6b6:	11 c0       	rjmp	.+34     	; 0x6da <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     6b8:	2f 2f       	mov	r18, r31
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	8b e0       	ldi	r24, 0x0B	; 11
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	28 9f       	mul	r18, r24
     6c2:	f0 01       	movw	r30, r0
     6c4:	29 9f       	mul	r18, r25
     6c6:	f0 0d       	add	r31, r0
     6c8:	38 9f       	mul	r19, r24
     6ca:	f0 0d       	add	r31, r0
     6cc:	11 24       	eor	r1, r1
     6ce:	ef 58       	subi	r30, 0x8F	; 143
     6d0:	fd 4f       	sbci	r31, 0xFD	; 253
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     6d6:	0e 94 16 01 	call	0x22c	; 0x22c <__vector_13>
  }

  sei(); // reenable interrupts
     6da:	78 94       	sei
}
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	08 95       	ret

000006e4 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     6e4:	20 91 84 00 	lds	r18, 0x0084
     6e8:	30 91 85 00 	lds	r19, 0x0085
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 91 a9 02 	lds	r24, 0x02A9
     6f4:	90 91 aa 02 	lds	r25, 0x02AA
     6f8:	a0 91 ab 02 	lds	r26, 0x02AB
     6fc:	b0 91 ac 02 	lds	r27, 0x02AC
     700:	dc 01       	movw	r26, r24
     702:	99 27       	eor	r25, r25
     704:	88 27       	eor	r24, r24
     706:	28 0f       	add	r18, r24
     708:	39 1f       	adc	r19, r25
     70a:	4a 1f       	adc	r20, r26
     70c:	5b 1f       	adc	r21, r27
}
     70e:	b9 01       	movw	r22, r18
     710:	ca 01       	movw	r24, r20
     712:	08 95       	ret

00000714 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     714:	e0 91 72 02 	lds	r30, 0x0272
     718:	ab e0       	ldi	r26, 0x0B	; 11
     71a:	ea 9f       	mul	r30, r26
     71c:	f0 01       	movw	r30, r0
     71e:	11 24       	eor	r1, r1
     720:	ed 58       	subi	r30, 0x8D	; 141
     722:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     724:	f8 94       	cli

  t->state = TIMEQ;
     726:	a2 e0       	ldi	r26, 0x02	; 2
     728:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     72a:	62 83       	std	Z+2, r22	; 0x02
     72c:	73 83       	std	Z+3, r23	; 0x03
     72e:	84 83       	std	Z+4, r24	; 0x04
     730:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     732:	26 83       	std	Z+6, r18	; 0x06
     734:	37 83       	std	Z+7, r19	; 0x07
     736:	40 87       	std	Z+8, r20	; 0x08
     738:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     73a:	0e 94 16 01 	call	0x22c	; 0x22c <__vector_13>
}
     73e:	08 95       	ret

00000740 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     740:	80 91 72 02 	lds	r24, 0x0272
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	2b e0       	ldi	r18, 0x0B	; 11
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	82 9f       	mul	r24, r18
     74c:	f0 01       	movw	r30, r0
     74e:	83 9f       	mul	r24, r19
     750:	f0 0d       	add	r31, r0
     752:	92 9f       	mul	r25, r18
     754:	f0 0d       	add	r31, r0
     756:	11 24       	eor	r1, r1
     758:	ef 58       	subi	r30, 0x8F	; 143
     75a:	fd 4f       	sbci	r31, 0xFD	; 253
     75c:	df 01       	movw	r26, r30
     75e:	14 96       	adiw	r26, 0x04	; 4
     760:	64 81       	ldd	r22, Z+4	; 0x04
     762:	11 96       	adiw	r26, 0x01	; 1
     764:	7c 91       	ld	r23, X
     766:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     768:	12 96       	adiw	r26, 0x02	; 2
     76a:	8c 91       	ld	r24, X
     76c:	12 97       	sbiw	r26, 0x02	; 2
     76e:	13 96       	adiw	r26, 0x03	; 3
     770:	9c 91       	ld	r25, X
     772:	08 95       	ret

00000774 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     774:	80 91 72 02 	lds	r24, 0x0272
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	2b e0       	ldi	r18, 0x0B	; 11
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	82 9f       	mul	r24, r18
     780:	f0 01       	movw	r30, r0
     782:	83 9f       	mul	r24, r19
     784:	f0 0d       	add	r31, r0
     786:	92 9f       	mul	r25, r18
     788:	f0 0d       	add	r31, r0
     78a:	11 24       	eor	r1, r1
     78c:	ef 58       	subi	r30, 0x8F	; 143
     78e:	fd 4f       	sbci	r31, 0xFD	; 253
     790:	df 01       	movw	r26, r30
     792:	18 96       	adiw	r26, 0x08	; 8
     794:	60 85       	ldd	r22, Z+8	; 0x08
     796:	11 96       	adiw	r26, 0x01	; 1
     798:	7c 91       	ld	r23, X
     79a:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     79c:	12 96       	adiw	r26, 0x02	; 2
     79e:	8c 91       	ld	r24, X
     7a0:	12 97       	sbiw	r26, 0x02	; 2
     7a2:	13 96       	adiw	r26, 0x03	; 3
     7a4:	9c 91       	ld	r25, X
     7a6:	08 95       	ret

000007a8 <trtTerminate>:

void trtTerminate(void) {

  cli();
     7a8:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     7aa:	80 91 72 02 	lds	r24, 0x0272
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	2b e0       	ldi	r18, 0x0B	; 11
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	82 9f       	mul	r24, r18
     7b6:	f0 01       	movw	r30, r0
     7b8:	83 9f       	mul	r24, r19
     7ba:	f0 0d       	add	r31, r0
     7bc:	92 9f       	mul	r25, r18
     7be:	f0 0d       	add	r31, r0
     7c0:	11 24       	eor	r1, r1
     7c2:	ef 58       	subi	r30, 0x8F	; 143
     7c4:	fd 4f       	sbci	r31, 0xFD	; 253
     7c6:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     7c8:	0e 94 16 01 	call	0x22c	; 0x22c <__vector_13>
}
     7cc:	08 95       	ret

000007ce <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     7ce:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     7d0:	e8 2f       	mov	r30, r24
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	e2 56       	subi	r30, 0x62	; 98
     7d6:	fd 4f       	sbci	r31, 0xFD	; 253
  temp = *s ;
     7d8:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     7da:	88 23       	and	r24, r24
     7dc:	19 f0       	breq	.+6      	; 0x7e4 <trtAccept+0x16>
    (*s)--;
     7de:	81 50       	subi	r24, 0x01	; 1
     7e0:	80 83       	st	Z, r24
     7e2:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     7e4:	78 94       	sei
  return temp ;
}
     7e6:	08 95       	ret

000007e8 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     7e8:	87 e6       	ldi	r24, 0x67	; 103
     7ea:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     7ee:	e1 ec       	ldi	r30, 0xC1	; 193
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	88 e1       	ldi	r24, 0x18	; 24
     7f4:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     7f6:	10 92 87 01 	sts	0x0187, r1
     7fa:	10 92 86 01 	sts	0x0186, r1
  tx_out = 0;
     7fe:	10 92 89 01 	sts	0x0189, r1
     802:	10 92 88 01 	sts	0x0188, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     806:	80 81       	ld	r24, Z
     808:	80 68       	ori	r24, 0x80	; 128
     80a:	80 83       	st	Z, r24
}
     80c:	08 95       	ret

0000080e <__vector_21>:



ISR( USART0_UDRE_vect )
{
     80e:	1f 92       	push	r1
     810:	0f 92       	push	r0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	0f 92       	push	r0
     816:	0b b6       	in	r0, 0x3b	; 59
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	2f 93       	push	r18
     81e:	3f 93       	push	r19
     820:	8f 93       	push	r24
     822:	9f 93       	push	r25
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     828:	20 91 86 01 	lds	r18, 0x0186
     82c:	30 91 87 01 	lds	r19, 0x0187
     830:	80 91 88 01 	lds	r24, 0x0188
     834:	90 91 89 01 	lds	r25, 0x0189
     838:	28 17       	cp	r18, r24
     83a:	39 07       	cpc	r19, r25
     83c:	31 f4       	brne	.+12     	; 0x84a <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     83e:	80 91 c1 00 	lds	r24, 0x00C1
     842:	8f 7d       	andi	r24, 0xDF	; 223
     844:	80 93 c1 00 	sts	0x00C1, r24
     848:	1d c0       	rjmp	.+58     	; 0x884 <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     84a:	e0 91 88 01 	lds	r30, 0x0188
     84e:	f0 91 89 01 	lds	r31, 0x0189
     852:	e6 57       	subi	r30, 0x76	; 118
     854:	fe 4f       	sbci	r31, 0xFE	; 254
     856:	80 81       	ld	r24, Z
     858:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     85c:	80 91 88 01 	lds	r24, 0x0188
     860:	90 91 89 01 	lds	r25, 0x0189
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	90 93 89 01 	sts	0x0189, r25
     86a:	80 93 88 01 	sts	0x0188, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     86e:	80 91 88 01 	lds	r24, 0x0188
     872:	90 91 89 01 	lds	r25, 0x0189
     876:	88 3c       	cpi	r24, 0xC8	; 200
     878:	91 05       	cpc	r25, r1
     87a:	21 f4       	brne	.+8      	; 0x884 <__vector_21+0x76>
     87c:	10 92 89 01 	sts	0x0189, r1
     880:	10 92 88 01 	sts	0x0188, r1
  }
}
     884:	ff 91       	pop	r31
     886:	ef 91       	pop	r30
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	3f 91       	pop	r19
     88e:	2f 91       	pop	r18
     890:	0f 90       	pop	r0
     892:	0b be       	out	0x3b, r0	; 59
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	0f 90       	pop	r0
     89a:	1f 90       	pop	r1
     89c:	18 95       	reti

0000089e <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     89e:	1f 93       	push	r17
     8a0:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     8a2:	8a 30       	cpi	r24, 0x0A	; 10
     8a4:	19 f4       	brne	.+6      	; 0x8ac <uart_putchar+0xe>
     8a6:	8d e0       	ldi	r24, 0x0D	; 13
     8a8:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
  char i = tx_in;
     8ac:	80 91 86 01 	lds	r24, 0x0186
     8b0:	90 91 87 01 	lds	r25, 0x0187
  i++;
     8b4:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     8b6:	88 3c       	cpi	r24, 0xC8	; 200
     8b8:	09 f4       	brne	.+2      	; 0x8bc <uart_putchar+0x1e>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     8bc:	e0 91 86 01 	lds	r30, 0x0186
     8c0:	f0 91 87 01 	lds	r31, 0x0187
     8c4:	e6 57       	subi	r30, 0x76	; 118
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     8ca:	28 2f       	mov	r18, r24
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	80 91 88 01 	lds	r24, 0x0188
     8d2:	90 91 89 01 	lds	r25, 0x0189
     8d6:	28 17       	cp	r18, r24
     8d8:	39 07       	cpc	r19, r25
     8da:	c9 f3       	breq	.-14     	; 0x8ce <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     8dc:	30 93 87 01 	sts	0x0187, r19
     8e0:	20 93 86 01 	sts	0x0186, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     8e4:	80 91 c1 00 	lds	r24, 0x00C1
     8e8:	80 62       	ori	r24, 0x20	; 32
     8ea:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	1f 91       	pop	r17
     8f4:	08 95       	ret

000008f6 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     8f6:	1f 92       	push	r1
     8f8:	0f 92       	push	r0
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	0f 92       	push	r0
     8fe:	0b b6       	in	r0, 0x3b	; 59
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	2f 93       	push	r18
     906:	3f 93       	push	r19
     908:	4f 93       	push	r20
     90a:	5f 93       	push	r21
     90c:	6f 93       	push	r22
     90e:	7f 93       	push	r23
     910:	8f 93       	push	r24
     912:	9f 93       	push	r25
     914:	af 93       	push	r26
     916:	bf 93       	push	r27
     918:	ef 93       	push	r30
     91a:	ff 93       	push	r31
	trt_rx_c = UDR0;
     91c:	80 91 c6 00 	lds	r24, 0x00C6
     920:	80 93 b9 02 	sts	0x02B9, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	0e 94 1e 03 	call	0x63c	; 0x63c <trtSignal>
}
     92a:	ff 91       	pop	r31
     92c:	ef 91       	pop	r30
     92e:	bf 91       	pop	r27
     930:	af 91       	pop	r26
     932:	9f 91       	pop	r25
     934:	8f 91       	pop	r24
     936:	7f 91       	pop	r23
     938:	6f 91       	pop	r22
     93a:	5f 91       	pop	r21
     93c:	4f 91       	pop	r20
     93e:	3f 91       	pop	r19
     940:	2f 91       	pop	r18
     942:	0f 90       	pop	r0
     944:	0b be       	out	0x3b, r0	; 59
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0
     94c:	1f 90       	pop	r1
     94e:	18 95       	reti

00000950 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     95e:	80 91 34 01 	lds	r24, 0x0134
     962:	90 91 35 01 	lds	r25, 0x0135
     966:	89 2b       	or	r24, r25
     968:	09 f0       	breq	.+2      	; 0x96c <uart_getchar+0x1c>
     96a:	a1 c0       	rjmp	.+322    	; 0xaae <uart_getchar+0x15e>
     96c:	06 e3       	ldi	r16, 0x36	; 54
     96e:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	0e 94 fe 02 	call	0x5fc	; 0x5fc <trtWait>
	if (UCSR0A & _BV(FE0))
     976:	80 91 c0 00 	lds	r24, 0x00C0
     97a:	84 ff       	sbrs	r24, 4
     97c:	03 c0       	rjmp	.+6      	; 0x984 <uart_getchar+0x34>
     97e:	2e ef       	ldi	r18, 0xFE	; 254
     980:	3f ef       	ldi	r19, 0xFF	; 255
     982:	a9 c0       	rjmp	.+338    	; 0xad6 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     984:	80 91 c0 00 	lds	r24, 0x00C0
     988:	83 fd       	sbrc	r24, 3
     98a:	a3 c0       	rjmp	.+326    	; 0xad2 <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     98c:	90 91 b9 02 	lds	r25, 0x02B9

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     990:	9d 30       	cpi	r25, 0x0D	; 13
     992:	11 f0       	breq	.+4      	; 0x998 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     994:	9a 30       	cpi	r25, 0x0A	; 10
     996:	81 f4       	brne	.+32     	; 0x9b8 <uart_getchar+0x68>
	  {
	    *cp = c;
     998:	8a e0       	ldi	r24, 0x0A	; 10
     99a:	f8 01       	movw	r30, r16
     99c:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     99e:	b7 01       	movw	r22, r14
     9a0:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
	    rxp = b;
     9a4:	86 e3       	ldi	r24, 0x36	; 54
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	90 93 35 01 	sts	0x0135, r25
     9ac:	80 93 34 01 	sts	0x0134, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	0e 94 1e 03 	call	0x63c	; 0x63c <trtSignal>
     9b6:	7b c0       	rjmp	.+246    	; 0xaae <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     9b8:	99 30       	cpi	r25, 0x09	; 9
     9ba:	09 f4       	brne	.+2      	; 0x9be <uart_getchar+0x6e>
     9bc:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     9be:	89 2f       	mov	r24, r25
     9c0:	80 52       	subi	r24, 0x20	; 32
     9c2:	8f 35       	cpi	r24, 0x5F	; 95
     9c4:	10 f0       	brcs	.+4      	; 0x9ca <uart_getchar+0x7a>
     9c6:	90 3a       	cpi	r25, 0xA0	; 160
     9c8:	70 f0       	brcs	.+28     	; 0x9e6 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	05 38       	cpi	r16, 0x85	; 133
     9ce:	1f 07       	cpc	r17, r31
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     9d2:	87 e0       	ldi	r24, 0x07	; 7
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     9d6:	f8 01       	movw	r30, r16
     9d8:	91 93       	st	Z+, r25
     9da:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     9dc:	89 2f       	mov	r24, r25
     9de:	b7 01       	movw	r22, r14
     9e0:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
     9e4:	c5 cf       	rjmp	.-118    	; 0x970 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     9e6:	92 31       	cpi	r25, 0x12	; 18
     9e8:	39 f1       	breq	.+78     	; 0xa38 <uart_getchar+0xe8>
     9ea:	93 31       	cpi	r25, 0x13	; 19
     9ec:	38 f4       	brcc	.+14     	; 0x9fc <uart_getchar+0xac>
     9ee:	93 30       	cpi	r25, 0x03	; 3
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <uart_getchar+0xa4>
     9f2:	6f c0       	rjmp	.+222    	; 0xad2 <uart_getchar+0x182>
     9f4:	98 30       	cpi	r25, 0x08	; 8
     9f6:	09 f0       	breq	.+2      	; 0x9fa <uart_getchar+0xaa>
     9f8:	bb cf       	rjmp	.-138    	; 0x970 <uart_getchar+0x20>
     9fa:	09 c0       	rjmp	.+18     	; 0xa0e <uart_getchar+0xbe>
     9fc:	97 31       	cpi	r25, 0x17	; 23
     9fe:	09 f4       	brne	.+2      	; 0xa02 <uart_getchar+0xb2>
     a00:	4b c0       	rjmp	.+150    	; 0xa98 <uart_getchar+0x148>
     a02:	9f 37       	cpi	r25, 0x7F	; 127
     a04:	21 f0       	breq	.+8      	; 0xa0e <uart_getchar+0xbe>
     a06:	95 31       	cpi	r25, 0x15	; 21
     a08:	09 f0       	breq	.+2      	; 0xa0c <uart_getchar+0xbc>
     a0a:	b2 cf       	rjmp	.-156    	; 0x970 <uart_getchar+0x20>
     a0c:	32 c0       	rjmp	.+100    	; 0xa72 <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
     a10:	06 33       	cpi	r16, 0x36	; 54
     a12:	1f 07       	cpc	r17, r31
     a14:	09 f0       	breq	.+2      	; 0xa18 <uart_getchar+0xc8>
     a16:	08 f4       	brcc	.+2      	; 0xa1a <uart_getchar+0xca>
     a18:	ab cf       	rjmp	.-170    	; 0x970 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     a1a:	88 e0       	ldi	r24, 0x08	; 8
     a1c:	b7 01       	movw	r22, r14
     a1e:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
		uart_putchar(' ', stream);
     a22:	80 e2       	ldi	r24, 0x20	; 32
     a24:	b7 01       	movw	r22, r14
     a26:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
		uart_putchar('\b', stream);
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	b7 01       	movw	r22, r14
     a2e:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
		cp--;
     a32:	01 50       	subi	r16, 0x01	; 1
     a34:	10 40       	sbci	r17, 0x00	; 0
     a36:	9c cf       	rjmp	.-200    	; 0x970 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     a38:	8d e0       	ldi	r24, 0x0D	; 13
     a3a:	b7 01       	movw	r22, r14
     a3c:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
     a40:	c6 e3       	ldi	r28, 0x36	; 54
     a42:	d1 e0       	ldi	r29, 0x01	; 1
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     a46:	89 91       	ld	r24, Y+
     a48:	b7 01       	movw	r22, r14
     a4a:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     a4e:	c0 17       	cp	r28, r16
     a50:	d1 07       	cpc	r29, r17
     a52:	c8 f3       	brcs	.-14     	; 0xa46 <uart_getchar+0xf6>
     a54:	8d cf       	rjmp	.-230    	; 0x970 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     a56:	88 e0       	ldi	r24, 0x08	; 8
     a58:	b7 01       	movw	r22, r14
     a5a:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
		uart_putchar(' ', stream);
     a5e:	80 e2       	ldi	r24, 0x20	; 32
     a60:	b7 01       	movw	r22, r14
     a62:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
		uart_putchar('\b', stream);
     a66:	88 e0       	ldi	r24, 0x08	; 8
     a68:	b7 01       	movw	r22, r14
     a6a:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
		cp--;
     a6e:	01 50       	subi	r16, 0x01	; 1
     a70:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	06 33       	cpi	r16, 0x36	; 54
     a76:	18 07       	cpc	r17, r24
     a78:	09 f0       	breq	.+2      	; 0xa7c <uart_getchar+0x12c>
     a7a:	68 f7       	brcc	.-38     	; 0xa56 <uart_getchar+0x106>
     a7c:	79 cf       	rjmp	.-270    	; 0x970 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     a7e:	88 e0       	ldi	r24, 0x08	; 8
     a80:	b7 01       	movw	r22, r14
     a82:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
		uart_putchar(' ', stream);
     a86:	80 e2       	ldi	r24, 0x20	; 32
     a88:	b7 01       	movw	r22, r14
     a8a:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
		uart_putchar('\b', stream);
     a8e:	88 e0       	ldi	r24, 0x08	; 8
     a90:	b7 01       	movw	r22, r14
     a92:	0e 94 4f 04 	call	0x89e	; 0x89e <uart_putchar>
     a96:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a98:	e1 e0       	ldi	r30, 0x01	; 1
     a9a:	06 33       	cpi	r16, 0x36	; 54
     a9c:	1e 07       	cpc	r17, r30
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <uart_getchar+0x152>
     aa0:	08 f4       	brcc	.+2      	; 0xaa4 <uart_getchar+0x154>
     aa2:	66 cf       	rjmp	.-308    	; 0x970 <uart_getchar+0x20>
     aa4:	e8 01       	movw	r28, r16
     aa6:	8a 91       	ld	r24, -Y
     aa8:	80 32       	cpi	r24, 0x20	; 32
     aaa:	49 f7       	brne	.-46     	; 0xa7e <uart_getchar+0x12e>
     aac:	61 cf       	rjmp	.-318    	; 0x970 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     aae:	e0 91 34 01 	lds	r30, 0x0134
     ab2:	f0 91 35 01 	lds	r31, 0x0135
     ab6:	81 91       	ld	r24, Z+
     ab8:	f0 93 35 01 	sts	0x0135, r31
     abc:	e0 93 34 01 	sts	0x0134, r30
  if (c == '\n')
     ac0:	8a 30       	cpi	r24, 0x0A	; 10
     ac2:	21 f4       	brne	.+8      	; 0xacc <uart_getchar+0x17c>
    rxp = 0;
     ac4:	10 92 35 01 	sts	0x0135, r1
     ac8:	10 92 34 01 	sts	0x0134, r1

  return c;
     acc:	28 2f       	mov	r18, r24
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <uart_getchar+0x186>
     ad2:	2f ef       	ldi	r18, 0xFF	; 255
     ad4:	3f ef       	ldi	r19, 0xFF	; 255
}
     ad6:	c9 01       	movw	r24, r18
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	08 95       	ret

00000ae6 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     ae6:	28 2f       	mov	r18, r24
     ae8:	20 7f       	andi	r18, 0xF0	; 240
     aea:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     aec:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     aee:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     af0:	20 e4       	ldi	r18, 0x40	; 64
     af2:	3f e1       	ldi	r19, 0x1F	; 31
     af4:	f9 01       	movw	r30, r18
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     afa:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     afc:	40 98       	cbi	0x08, 0	; 8
     afe:	f9 01       	movw	r30, r18
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	f1 f7       	brne	.-4      	; 0xb00 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	74 e0       	ldi	r23, 0x04	; 4
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	7a 95       	dec	r23
     b0e:	e1 f7       	brne	.-8      	; 0xb08 <LCDsendChar+0x22>
     b10:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     b12:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     b14:	42 9a       	sbi	0x08, 2	; 8
     b16:	c9 01       	movw	r24, r18
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     b1c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     b1e:	40 98       	cbi	0x08, 0	; 8
     b20:	c9 01       	movw	r24, r18
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     b26:	08 95       	ret

00000b28 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     b28:	28 2f       	mov	r18, r24
     b2a:	20 7f       	andi	r18, 0xF0	; 240
     b2c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     b2e:	42 9a       	sbi	0x08, 2	; 8
     b30:	20 e4       	ldi	r18, 0x40	; 64
     b32:	3f e1       	ldi	r19, 0x1F	; 31
     b34:	f9 01       	movw	r30, r18
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b3a:	42 98       	cbi	0x08, 2	; 8
     b3c:	f9 01       	movw	r30, r18
     b3e:	31 97       	sbiw	r30, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	e4 e0       	ldi	r30, 0x04	; 4
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	ea 95       	dec	r30
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <LCDsendCommand+0x1e>
     b4e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     b50:	42 9a       	sbi	0x08, 2	; 8
     b52:	c9 01       	movw	r24, r18
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b58:	42 98       	cbi	0x08, 2	; 8
     b5a:	c9 01       	movw	r24, r18
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     b60:	08 95       	ret

00000b62 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
}
     b68:	08 95       	ret

00000b6a <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
}
     b70:	08 95       	ret

00000b72 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	49 f0       	breq	.+18     	; 0xb92 <LCDstring+0x20>
     b80:	ec 01       	movw	r28, r24
     b82:	10 e0       	ldi	r17, 0x00	; 0
     b84:	04 c0       	rjmp	.+8      	; 0xb8e <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     b86:	89 91       	ld	r24, Y+
     b88:	0e 94 73 05 	call	0xae6	; 0xae6 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     b8c:	1f 5f       	subi	r17, 0xFF	; 255
     b8e:	10 17       	cp	r17, r16
     b90:	d0 f3       	brcs	.-12     	; 0xb86 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     b9c:	62 30       	cpi	r22, 0x02	; 2
     b9e:	31 f0       	breq	.+12     	; 0xbac <LCDGotoXY+0x10>
     ba0:	63 30       	cpi	r22, 0x03	; 3
     ba2:	31 f0       	breq	.+12     	; 0xbb0 <LCDGotoXY+0x14>
     ba4:	61 30       	cpi	r22, 0x01	; 1
     ba6:	29 f4       	brne	.+10     	; 0xbb2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     ba8:	80 5c       	subi	r24, 0xC0	; 192
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     bac:	8c 5e       	subi	r24, 0xEC	; 236
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     bb0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     bb2:	80 68       	ori	r24, 0x80	; 128
     bb4:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
	
}
     bb8:	08 95       	ret

00000bba <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	ec 01       	movw	r28, r24
     bc2:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     bc4:	64 2f       	mov	r22, r20
     bc6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCDGotoXY>
     bca:	10 e0       	ldi	r17, 0x00	; 0
     bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     bce:	0e 94 73 05 	call	0xae6	; 0xae6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     bd2:	1f 5f       	subi	r17, 0xFF	; 255
     bd4:	fe 01       	movw	r30, r28
     bd6:	e1 0f       	add	r30, r17
     bd8:	f1 1d       	adc	r31, r1
     bda:	84 91       	lpm	r24, Z+
     bdc:	88 23       	and	r24, r24
     bde:	b9 f7       	brne	.-18     	; 0xbce <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	08 95       	ret

00000be8 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	7c 01       	movw	r14, r24
     bf6:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     bf8:	11 0f       	add	r17, r17
     bfa:	11 0f       	add	r17, r17
     bfc:	11 0f       	add	r17, r17
     bfe:	10 64       	ori	r17, 0x40	; 64
     c00:	c0 e0       	ldi	r28, 0x00	; 0
     c02:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     c04:	f7 01       	movw	r30, r14
     c06:	ec 0f       	add	r30, r28
     c08:	fd 1f       	adc	r31, r29
     c0a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     c0c:	81 2f       	mov	r24, r17
     c0e:	8c 0f       	add	r24, r28
     c10:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
		LCDsendChar(pcc);
     c14:	80 2f       	mov	r24, r16
     c16:	0e 94 73 05 	call	0xae6	; 0xae6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     c1a:	21 96       	adiw	r28, 0x01	; 1
     c1c:	c8 30       	cpi	r28, 0x08	; 8
     c1e:	d1 05       	cpc	r29, r1
     c20:	89 f7       	brne	.-30     	; 0xc04 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	08 95       	ret

00000c30 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	80 e6       	ldi	r24, 0x60	; 96
     c38:	9a ee       	ldi	r25, 0xEA	; 234
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     c3e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     c40:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     c42:	87 b1       	in	r24, 0x07	; 7
     c44:	80 6f       	ori	r24, 0xF0	; 240
     c46:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     c48:	87 b1       	in	r24, 0x07	; 7
     c4a:	87 60       	ori	r24, 0x07	; 7
     c4c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     c4e:	80 e3       	ldi	r24, 0x30	; 48
     c50:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c52:	42 9a       	sbi	0x08, 2	; 8
     c54:	20 e4       	ldi	r18, 0x40	; 64
     c56:	3f e1       	ldi	r19, 0x1F	; 31
     c58:	f9 01       	movw	r30, r18
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     c5e:	42 98       	cbi	0x08, 2	; 8
     c60:	f9 01       	movw	r30, r18
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     c66:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c68:	42 9a       	sbi	0x08, 2	; 8
     c6a:	c9 01       	movw	r24, r18
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     c70:	42 98       	cbi	0x08, 2	; 8
     c72:	c9 01       	movw	r24, r18
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     c78:	80 e2       	ldi	r24, 0x20	; 32
     c7a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c7c:	42 9a       	sbi	0x08, 2	; 8
     c7e:	c9 01       	movw	r24, r18
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     c84:	42 98       	cbi	0x08, 2	; 8
     c86:	c9 01       	movw	r24, r18
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     c8c:	88 e2       	ldi	r24, 0x28	; 40
     c8e:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     c92:	8c e0       	ldi	r24, 0x0C	; 12
     c94:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
     c98:	cc e8       	ldi	r28, 0x8C	; 140
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     c9e:	16 2f       	mov	r17, r22
     ca0:	1f 5f       	subi	r17, 0xFF	; 255
     ca2:	ce 01       	movw	r24, r28
     ca4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <LCDdefinechar>
     ca8:	28 96       	adiw	r28, 0x08	; 8
     caa:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     cac:	18 30       	cpi	r17, 0x08	; 8
     cae:	b9 f7       	brne	.-18     	; 0xc9e <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	08 95       	ret

00000cb8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	08 2f       	mov	r16, r24
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     cc2:	8e e1       	ldi	r24, 0x1E	; 30
     cc4:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     cc8:	1f 5f       	subi	r17, 0xFF	; 255
     cca:	10 17       	cp	r17, r16
     ccc:	d0 f3       	brcs	.-12     	; 0xcc2 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	08 95       	ret

00000cd4 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	08 2f       	mov	r16, r24
     cda:	10 e0       	ldi	r17, 0x00	; 0
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     cde:	88 e1       	ldi	r24, 0x18	; 24
     ce0:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     ce4:	1f 5f       	subi	r17, 0xFF	; 255
     ce6:	10 17       	cp	r17, r16
     ce8:	d0 f3       	brcs	.-12     	; 0xcde <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	08 95       	ret

00000cf0 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     cf0:	8e e0       	ldi	r24, 0x0E	; 14
     cf2:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
}
     cf6:	08 95       	ret

00000cf8 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     cf8:	8f e0       	ldi	r24, 0x0F	; 15
     cfa:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
}
     cfe:	08 95       	ret

00000d00 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     d00:	8c e0       	ldi	r24, 0x0C	; 12
     d02:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
}
     d06:	08 95       	ret

00000d08 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     d08:	88 e0       	ldi	r24, 0x08	; 8
     d0a:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
}
     d0e:	08 95       	ret

00000d10 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     d10:	8c e0       	ldi	r24, 0x0C	; 12
     d12:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
}
     d16:	08 95       	ret

00000d18 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	08 2f       	mov	r16, r24
     d1e:	10 e0       	ldi	r17, 0x00	; 0
     d20:	04 c0       	rjmp	.+8      	; 0xd2a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     d22:	80 e1       	ldi	r24, 0x10	; 16
     d24:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     d28:	1f 5f       	subi	r17, 0xFF	; 255
     d2a:	10 17       	cp	r17, r16
     d2c:	d0 f3       	brcs	.-12     	; 0xd22 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	08 95       	ret

00000d34 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	08 2f       	mov	r16, r24
     d3a:	10 e0       	ldi	r17, 0x00	; 0
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     d3e:	84 e1       	ldi	r24, 0x14	; 20
     d40:	0e 94 94 05 	call	0xb28	; 0xb28 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     d44:	1f 5f       	subi	r17, 0xFF	; 255
     d46:	10 17       	cp	r17, r16
     d48:	d0 f3       	brcs	.-12     	; 0xd3e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret

00000d50 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     d60:	96 e0       	ldi	r25, 0x06	; 6
     d62:	89 9f       	mul	r24, r25
     d64:	c0 01       	movw	r24, r0
     d66:	11 24       	eor	r1, r1
     d68:	24 2f       	mov	r18, r20
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	ac 01       	movw	r20, r24
     d6e:	42 9f       	mul	r20, r18
     d70:	c0 01       	movw	r24, r0
     d72:	43 9f       	mul	r20, r19
     d74:	90 0d       	add	r25, r0
     d76:	52 9f       	mul	r21, r18
     d78:	90 0d       	add	r25, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__divmodhi4>
     d82:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     d84:	cb 01       	movw	r24, r22
     d86:	66 e0       	ldi	r22, 0x06	; 6
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__udivmodhi4>
     d8e:	e8 2e       	mov	r14, r24
     d90:	ff 24       	eor	r15, r15
     d92:	00 e0       	ldi	r16, 0x00	; 0
     d94:	10 e0       	ldi	r17, 0x00	; 0
     d96:	12 c0       	rjmp	.+36     	; 0xdbc <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     d98:	c8 01       	movw	r24, r16
     d9a:	05 96       	adiw	r24, 0x05	; 5
     d9c:	c8 17       	cp	r28, r24
     d9e:	d9 07       	cpc	r29, r25
     da0:	10 f0       	brcs	.+4      	; 0xda6 <LCDprogressBar+0x56>
     da2:	85 e0       	ldi	r24, 0x05	; 5
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     da6:	c0 17       	cp	r28, r16
     da8:	d1 07       	cpc	r29, r17
     daa:	10 f0       	brcs	.+4      	; 0xdb0 <LCDprogressBar+0x60>
     dac:	8e 2d       	mov	r24, r14
     dae:	01 c0       	rjmp	.+2      	; 0xdb2 <LCDprogressBar+0x62>
     db0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     db2:	0e 94 73 05 	call	0xae6	; 0xae6 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     db6:	f3 94       	inc	r15
     db8:	0a 5f       	subi	r16, 0xFA	; 250
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	fd 14       	cp	r15, r13
     dbe:	60 f3       	brcs	.-40     	; 0xd98 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	08 95       	ret

00000dd0 <__vector_1>:

/********************************************************************/
// 							ISRs & Helper Functions
/********************************************************************/
// --- external interrupt ISR ------------------------
ISR (INT0_vect) {
     dd0:	1f 92       	push	r1
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	0f 92       	push	r0
     dd8:	0b b6       	in	r0, 0x3b	; 59
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	2f 93       	push	r18
     de0:	8f 93       	push	r24
     de2:	9f 93       	push	r25
     de4:	ef 93       	push	r30
     de6:	ff 93       	push	r31
        motor_period = TCNT2 + motor_period_ovlf  ;
     de8:	e2 eb       	ldi	r30, 0xB2	; 178
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	20 81       	ld	r18, Z
     dee:	80 91 6f 02 	lds	r24, 0x026F
     df2:	90 91 70 02 	lds	r25, 0x0270
     df6:	82 0f       	add	r24, r18
     df8:	91 1d       	adc	r25, r1
     dfa:	90 93 bb 02 	sts	0x02BB, r25
     dfe:	80 93 ba 02 	sts	0x02BA, r24
        TCNT2 = 0 ;
     e02:	10 82       	st	Z, r1
        motor_period_ovlf = 0 ;
     e04:	10 92 70 02 	sts	0x0270, r1
     e08:	10 92 6f 02 	sts	0x026F, r1
}
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	9f 91       	pop	r25
     e12:	8f 91       	pop	r24
     e14:	2f 91       	pop	r18
     e16:	0f 90       	pop	r0
     e18:	0b be       	out	0x3b, r0	; 59
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0f 90       	pop	r0
     e20:	1f 90       	pop	r1
     e22:	18 95       	reti

00000e24 <__vector_11>:
// --- set up extra 8 bits on timer 2 ----------------
ISR (TIMER2_OVF_vect) {
     e24:	1f 92       	push	r1
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	0f 92       	push	r0
     e2c:	11 24       	eor	r1, r1
     e2e:	8f 93       	push	r24
     e30:	9f 93       	push	r25
        motor_period_ovlf = motor_period_ovlf + 256 ;
     e32:	80 91 6f 02 	lds	r24, 0x026F
     e36:	90 91 70 02 	lds	r25, 0x0270
     e3a:	80 50       	subi	r24, 0x00	; 0
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	90 93 70 02 	sts	0x0270, r25
     e42:	80 93 6f 02 	sts	0x026F, r24
}
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <init_lcd>:

//**********************************************************
// LCD setup
void init_lcd(void) {
	LCDinit();	//initialize the display
     e54:	0e 94 18 06 	call	0xc30	; 0xc30 <LCDinit>
	LCDcursorOFF();
     e58:	0e 94 80 06 	call	0xd00	; 0xd00 <LCDcursorOFF>
	LCDclr();				//clear the display
     e5c:	0e 94 b1 05 	call	0xb62	; 0xb62 <LCDclr>
	LCDGotoXY(0,0);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     e68:	8c ec       	ldi	r24, 0xCC	; 204
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	0e 94 dd 05 	call	0xbba	; 0xbba <CopyStringtoLCD>
}
     e74:	08 95       	ret

00000e76 <initialize>:

//********************************************************** 
//Set it all up
void initialize(void) {
  DDRC = 0xff;    	// led connections
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	87 b9       	out	0x07, r24	; 7
  PORTC = 0x00;
     e7a:	18 b8       	out	0x08, r1	; 8
  DDRB = 0x00; 		// switch connections
     e7c:	14 b8       	out	0x04, r1	; 4
  PORTB = 0xff; 	// pullup on
     e7e:	85 b9       	out	0x05, r24	; 5

  //******************** 
  //initialize variables
  trtWait(SEM_SHARED) ;
     e80:	84 e0       	ldi	r24, 0x04	; 4
     e82:	0e 94 fe 02 	call	0x5fc	; 0x5fc <trtWait>
  speed = 0;
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	a0 e0       	ldi	r26, 0x00	; 0
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	80 93 b5 02 	sts	0x02B5, r24
     e92:	90 93 b6 02 	sts	0x02B6, r25
     e96:	a0 93 b7 02 	sts	0x02B7, r26
     e9a:	b0 93 b8 02 	sts	0x02B8, r27
  prop_gain = 0;
     e9e:	80 93 b1 02 	sts	0x02B1, r24
     ea2:	90 93 b2 02 	sts	0x02B2, r25
     ea6:	a0 93 b3 02 	sts	0x02B3, r26
     eaa:	b0 93 b4 02 	sts	0x02B4, r27
  diff_gain = 0;
     eae:	80 93 6b 02 	sts	0x026B, r24
     eb2:	90 93 6c 02 	sts	0x026C, r25
     eb6:	a0 93 6d 02 	sts	0x026D, r26
     eba:	b0 93 6e 02 	sts	0x026E, r27
  int_gain = 0; 
     ebe:	80 93 52 02 	sts	0x0252, r24
     ec2:	90 93 53 02 	sts	0x0253, r25
     ec6:	a0 93 54 02 	sts	0x0254, r26
     eca:	b0 93 55 02 	sts	0x0255, r27
  trtSignal(SEM_SHARED) ;
     ece:	84 e0       	ldi	r24, 0x04	; 4
     ed0:	0e 94 1e 03 	call	0x63c	; 0x63c <trtSignal>

  //******************** 
  //init LCD
  init_lcd();
     ed4:	0e 94 2a 07 	call	0xe54	; 0xe54 <init_lcd>
  LCDclr();
     ed8:	0e 94 b1 05 	call	0xb62	; 0xb62 <LCDclr>
  // put some stuff on LCD
  CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     edc:	82 ed       	ldi	r24, 0xD2	; 210
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	0e 94 dd 05 	call	0xbba	; 0xbba <CopyStringtoLCD>
 
  //******************** 
  //set up INT0
  EIMSK = (1 << INT0) ; // turn on int0
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	9d bb       	out	0x1d, r25	; 29
  EICRA = 3 ;       // rising edge
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	80 93 69 00 	sts	0x0069, r24
  // turn on timer 2 to be read in int0 ISR
  TCCR2B = 7 ; // divide by 1024
     ef2:	87 e0       	ldi	r24, 0x07	; 7
     ef4:	80 93 b1 00 	sts	0x00B1, r24
  // turn on timer 2 overflow ISR for double precision time
  TIMSK2 = 1 ;
     ef8:	90 93 70 00 	sts	0x0070, r25
  
  //********************
  //crank up the ISRs
  sei();
     efc:	78 94       	sei
}  
     efe:	08 95       	ret

00000f00 <main>:
	  trtSleepUntil(rel, dead);	
  	}
}

// --- Main Program ----------------------------------
int main(void) {
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     f0c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <trt_uart_init>
  stdout = stdin = stderr = &uart0;
     f10:	65 e2       	ldi	r22, 0x25	; 37
     f12:	71 e0       	ldi	r23, 0x01	; 1
     f14:	70 93 c1 02 	sts	0x02C1, r23
     f18:	60 93 c0 02 	sts	0x02C0, r22
     f1c:	70 93 bd 02 	sts	0x02BD, r23
     f20:	60 93 bc 02 	sts	0x02BC, r22
     f24:	70 93 bf 02 	sts	0x02BF, r23
     f28:	60 93 be 02 	sts	0x02BE, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <fputs>
    // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
     f34:	80 e5       	ldi	r24, 0x50	; 80
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     f3c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     f3e:	10 92 9f 02 	sts	0x029F, r1
  
  sei(); // set enabled interrupts;
     f42:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     f44:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     f46:	10 92 a0 02 	sts	0x02A0, r1
  
  sei(); // set enabled interrupts;
     f4a:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     f4c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 93 a2 02 	sts	0x02A2, r24
  
  sei(); // set enabled interrupts;
     f54:	78 94       	sei

  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variable

  // --- create tasks  ----------------
  trtCreateTask(serialComm, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[0]));
     f56:	88 e4       	ldi	r24, 0x48	; 72
     f58:	98 e0       	ldi	r25, 0x08	; 8
     f5a:	68 ee       	ldi	r22, 0xE8	; 232
     f5c:	73 e0       	ldi	r23, 0x03	; 3
     f5e:	2a e1       	ldi	r18, 0x1A	; 26
     f60:	36 e0       	ldi	r19, 0x06	; 6
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	ba e1       	ldi	r27, 0x1A	; 26
     f68:	eb 2e       	mov	r14, r27
     f6a:	b6 e0       	ldi	r27, 0x06	; 6
     f6c:	fb 2e       	mov	r15, r27
     f6e:	01 2d       	mov	r16, r1
     f70:	11 2d       	mov	r17, r1
     f72:	a6 e5       	ldi	r26, 0x56	; 86
     f74:	ca 2e       	mov	r12, r26
     f76:	a2 e0       	ldi	r26, 0x02	; 2
     f78:	da 2e       	mov	r13, r26
     f7a:	0e 94 98 02 	call	0x530	; 0x530 <trtCreateTask>
  trtCreateTask(lcdComm, 1000, SECONDS2TICKS(0.2), SECONDS2TICKS(0.4), &(args[0]));
     f7e:	80 ed       	ldi	r24, 0xD0	; 208
     f80:	97 e0       	ldi	r25, 0x07	; 7
     f82:	68 ee       	ldi	r22, 0xE8	; 232
     f84:	73 e0       	ldi	r23, 0x03	; 3
     f86:	25 e3       	ldi	r18, 0x35	; 53
     f88:	3c e0       	ldi	r19, 0x0C	; 12
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	fa e6       	ldi	r31, 0x6A	; 106
     f90:	ef 2e       	mov	r14, r31
     f92:	f8 e1       	ldi	r31, 0x18	; 24
     f94:	ff 2e       	mov	r15, r31
     f96:	01 2d       	mov	r16, r1
     f98:	11 2d       	mov	r17, r1
     f9a:	0e 94 98 02 	call	0x530	; 0x530 <trtCreateTask>
     f9e:	ff cf       	rjmp	.-2      	; 0xf9e <main+0x9e>

00000fa0 <lcdComm>:
		trtSignal(SEM_SHARED);
	}
}

// --- define task 2  ----------------------------------------
void lcdComm(void* args) {
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
	  //int lcd_buf_i;
	  //for( lcd_buf_i = 0; lcd_buf_i < 17; lcd_buf_i++){
	  //	lcd_buffer[lcd_buf_i] ='\0';
	  //}

	  sprintf(lcd_buffer, "%d    ", speed);
     fb0:	ca e5       	ldi	r28, 0x5A	; 90
     fb2:	d2 e0       	ldi	r29, 0x02	; 2
     fb4:	04 e1       	ldi	r16, 0x14	; 20
     fb6:	c0 2e       	mov	r12, r16
     fb8:	01 e0       	ldi	r16, 0x01	; 1
     fba:	d0 2e       	mov	r13, r16
// --- define task 2  ----------------------------------------
void lcdComm(void* args) {
	uint32_t rel, dead;
	// increment time counter and format string 
	while (TRUE) {
	  trtWait(SEM_SHARED) ;
     fbc:	84 e0       	ldi	r24, 0x04	; 4
     fbe:	0e 94 fe 02 	call	0x5fc	; 0x5fc <trtWait>
	  //int lcd_buf_i;
	  //for( lcd_buf_i = 0; lcd_buf_i < 17; lcd_buf_i++){
	  //	lcd_buffer[lcd_buf_i] ='\0';
	  //}

	  sprintf(lcd_buffer, "%d    ", speed);
     fc2:	40 91 b5 02 	lds	r20, 0x02B5
     fc6:	50 91 b6 02 	lds	r21, 0x02B6
     fca:	60 91 b7 02 	lds	r22, 0x02B7
     fce:	70 91 b8 02 	lds	r23, 0x02B8
     fd2:	2d b7       	in	r18, 0x3d	; 61
     fd4:	3e b7       	in	r19, 0x3e	; 62
     fd6:	28 50       	subi	r18, 0x08	; 8
     fd8:	30 40       	sbci	r19, 0x00	; 0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	3e bf       	out	0x3e, r19	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	2d bf       	out	0x3d, r18	; 61
     fe4:	ed b7       	in	r30, 0x3d	; 61
     fe6:	fe b7       	in	r31, 0x3e	; 62
     fe8:	31 96       	adiw	r30, 0x01	; 1
     fea:	ad b7       	in	r26, 0x3d	; 61
     fec:	be b7       	in	r27, 0x3e	; 62
     fee:	12 96       	adiw	r26, 0x02	; 2
     ff0:	dc 93       	st	X, r29
     ff2:	ce 93       	st	-X, r28
     ff4:	11 97       	sbiw	r26, 0x01	; 1
     ff6:	d3 82       	std	Z+3, r13	; 0x03
     ff8:	c2 82       	std	Z+2, r12	; 0x02
     ffa:	44 83       	std	Z+4, r20	; 0x04
     ffc:	55 83       	std	Z+5, r21	; 0x05
     ffe:	66 83       	std	Z+6, r22	; 0x06
    1000:	77 83       	std	Z+7, r23	; 0x07
    1002:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <sprintf>
	  //fprintf(stdout, "%s\n\r", lcd_buffer);
	  trtSignal(SEM_SHARED) ;	                 
    1006:	2d b7       	in	r18, 0x3d	; 61
    1008:	3e b7       	in	r19, 0x3e	; 62
    100a:	28 5f       	subi	r18, 0xF8	; 248
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	3e bf       	out	0x3e, r19	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	2d bf       	out	0x3d, r18	; 61
    1018:	84 e0       	ldi	r24, 0x04	; 4
    101a:	0e 94 1e 03 	call	0x63c	; 0x63c <trtSignal>
	  LCDGotoXY(7, 0);
    101e:	87 e0       	ldi	r24, 0x07	; 7
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCDGotoXY>
	  // display the count 
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
    1026:	fe 01       	movw	r30, r28
    1028:	01 90       	ld	r0, Z+
    102a:	00 20       	and	r0, r0
    102c:	e9 f7       	brne	.-6      	; 0x1028 <lcdComm+0x88>
    102e:	31 97       	sbiw	r30, 0x01	; 1
    1030:	ea 55       	subi	r30, 0x5A	; 90
    1032:	f2 40       	sbci	r31, 0x02	; 2
    1034:	ce 01       	movw	r24, r28
    1036:	6e 2f       	mov	r22, r30
    1038:	0e 94 b9 05 	call	0xb72	; 0xb72 <LCDstring>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    103c:	20 91 a9 02 	lds	r18, 0x02A9
    1040:	30 91 aa 02 	lds	r19, 0x02AA
    1044:	40 91 ab 02 	lds	r20, 0x02AB
    1048:	50 91 ac 02 	lds	r21, 0x02AC
    104c:	a9 01       	movw	r20, r18
    104e:	33 27       	eor	r19, r19
    1050:	22 27       	eor	r18, r18
    1052:	60 91 84 00 	lds	r22, 0x0084
    1056:	70 91 85 00 	lds	r23, 0x0085
	  rel = trtCurrentTime() + SECONDS2TICKS(0.2);
	  dead = trtCurrentTime() + SECONDS2TICKS(0.4);
	  trtSleepUntil(rel, dead);	
    105a:	e0 90 84 00 	lds	r14, 0x0084
    105e:	f0 90 85 00 	lds	r15, 0x0085
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	62 0f       	add	r22, r18
    1068:	73 1f       	adc	r23, r19
    106a:	84 1f       	adc	r24, r20
    106c:	95 1f       	adc	r25, r21
    106e:	6b 5c       	subi	r22, 0xCB	; 203
    1070:	73 4f       	sbci	r23, 0xF3	; 243
    1072:	8f 4f       	sbci	r24, 0xFF	; 255
    1074:	9f 4f       	sbci	r25, 0xFF	; 255
    1076:	00 e0       	ldi	r16, 0x00	; 0
    1078:	10 e0       	ldi	r17, 0x00	; 0
    107a:	2e 0d       	add	r18, r14
    107c:	3f 1d       	adc	r19, r15
    107e:	40 1f       	adc	r20, r16
    1080:	51 1f       	adc	r21, r17
    1082:	26 59       	subi	r18, 0x96	; 150
    1084:	37 4e       	sbci	r19, 0xE7	; 231
    1086:	4f 4f       	sbci	r20, 0xFF	; 255
    1088:	5f 4f       	sbci	r21, 0xFF	; 255
    108a:	0e 94 8a 03 	call	0x714	; 0x714 <trtSleepUntil>
    108e:	96 cf       	rjmp	.-212    	; 0xfbc <lcdComm+0x1c>

00001090 <serialComm>:

/********************************************************************/
// 							FSM Tasks
/********************************************************************/
// --- define task 1  ----------------------------------------
void serialComm(void* args) {
    1090:	af 92       	push	r10
    1092:	bf 92       	push	r11
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	28 97       	sbiw	r28, 0x08	; 8
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
	// Declare the command and num variables
	volatile double num ;
	char cmd[4] ;
    // initialize
    initialize();
    10b4:	0e 94 3b 07 	call	0xe76	; 0xe76 <initialize>
		// 's' sets the motor speed
		// 'p' sets the proportional gain
		// 'i' sets the differential gain
		// 'd' sets the integral gain
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s%d", cmd, &num) ;
    10b8:	9b e1       	ldi	r25, 0x1B	; 27
    10ba:	a9 2e       	mov	r10, r25
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	b9 2e       	mov	r11, r25
    10c0:	85 e0       	ldi	r24, 0x05	; 5
    10c2:	c8 2e       	mov	r12, r24
    10c4:	d1 2c       	mov	r13, r1
    10c6:	cc 0e       	add	r12, r28
    10c8:	dd 1e       	adc	r13, r29
    10ca:	7e 01       	movw	r14, r28
    10cc:	08 94       	sec
    10ce:	e1 1c       	adc	r14, r1
    10d0:	f1 1c       	adc	r15, r1
		//fprintf(stdout, "%s%le\n\r", cmd, &num);
		// update shared variables
		trtWait(SEM_SHARED) ;
		if (cmd[0] == 's') {
			speed = num;
			fprintf(stdout, "%d\n\r", speed);
    10d2:	00 e2       	ldi	r16, 0x20	; 32
    10d4:	11 e0       	ldi	r17, 0x01	; 1
		// commands:
		// 's' sets the motor speed
		// 'p' sets the proportional gain
		// 'i' sets the differential gain
		// 'd' sets the integral gain
		fprintf(stdout, ">") ;
    10d6:	60 91 be 02 	lds	r22, 0x02BE
    10da:	70 91 bf 02 	lds	r23, 0x02BF
    10de:	8e e3       	ldi	r24, 0x3E	; 62
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
		fscanf(stdin, "%s%d", cmd, &num) ;
    10e6:	8d b7       	in	r24, 0x3d	; 61
    10e8:	9e b7       	in	r25, 0x3e	; 62
    10ea:	08 97       	sbiw	r24, 0x08	; 8
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	9e bf       	out	0x3e, r25	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	8d bf       	out	0x3d, r24	; 61
    10f6:	ed b7       	in	r30, 0x3d	; 61
    10f8:	fe b7       	in	r31, 0x3e	; 62
    10fa:	31 96       	adiw	r30, 0x01	; 1
    10fc:	80 91 bc 02 	lds	r24, 0x02BC
    1100:	90 91 bd 02 	lds	r25, 0x02BD
    1104:	ad b7       	in	r26, 0x3d	; 61
    1106:	be b7       	in	r27, 0x3e	; 62
    1108:	12 96       	adiw	r26, 0x02	; 2
    110a:	9c 93       	st	X, r25
    110c:	8e 93       	st	-X, r24
    110e:	11 97       	sbiw	r26, 0x01	; 1
    1110:	b3 82       	std	Z+3, r11	; 0x03
    1112:	a2 82       	std	Z+2, r10	; 0x02
    1114:	d5 82       	std	Z+5, r13	; 0x05
    1116:	c4 82       	std	Z+4, r12	; 0x04
    1118:	f7 82       	std	Z+7, r15	; 0x07
    111a:	e6 82       	std	Z+6, r14	; 0x06
    111c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <fscanf>
		//fprintf(stdout, "%s%le\n\r", cmd, &num);
		// update shared variables
		trtWait(SEM_SHARED) ;
    1120:	8d b7       	in	r24, 0x3d	; 61
    1122:	9e b7       	in	r25, 0x3e	; 62
    1124:	08 96       	adiw	r24, 0x08	; 8
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	9e bf       	out	0x3e, r25	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	8d bf       	out	0x3d, r24	; 61
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	0e 94 fe 02 	call	0x5fc	; 0x5fc <trtWait>
		if (cmd[0] == 's') {
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	83 37       	cpi	r24, 0x73	; 115
    113a:	b9 f5       	brne	.+110    	; 0x11aa <serialComm+0x11a>
			speed = num;
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	9a 81       	ldd	r25, Y+2	; 0x02
    1140:	ab 81       	ldd	r26, Y+3	; 0x03
    1142:	bc 81       	ldd	r27, Y+4	; 0x04
    1144:	80 93 b5 02 	sts	0x02B5, r24
    1148:	90 93 b6 02 	sts	0x02B6, r25
    114c:	a0 93 b7 02 	sts	0x02B7, r26
    1150:	b0 93 b8 02 	sts	0x02B8, r27
			fprintf(stdout, "%d\n\r", speed);
    1154:	20 91 b5 02 	lds	r18, 0x02B5
    1158:	30 91 b6 02 	lds	r19, 0x02B6
    115c:	40 91 b7 02 	lds	r20, 0x02B7
    1160:	50 91 b8 02 	lds	r21, 0x02B8
    1164:	ad b7       	in	r26, 0x3d	; 61
    1166:	be b7       	in	r27, 0x3e	; 62
    1168:	18 97       	sbiw	r26, 0x08	; 8
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	be bf       	out	0x3e, r27	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	ad bf       	out	0x3d, r26	; 61
    1174:	ed b7       	in	r30, 0x3d	; 61
    1176:	fe b7       	in	r31, 0x3e	; 62
    1178:	31 96       	adiw	r30, 0x01	; 1
    117a:	80 91 be 02 	lds	r24, 0x02BE
    117e:	90 91 bf 02 	lds	r25, 0x02BF
    1182:	12 96       	adiw	r26, 0x02	; 2
    1184:	9c 93       	st	X, r25
    1186:	8e 93       	st	-X, r24
    1188:	11 97       	sbiw	r26, 0x01	; 1
    118a:	13 83       	std	Z+3, r17	; 0x03
    118c:	02 83       	std	Z+2, r16	; 0x02
    118e:	24 83       	std	Z+4, r18	; 0x04
    1190:	35 83       	std	Z+5, r19	; 0x05
    1192:	46 83       	std	Z+6, r20	; 0x06
    1194:	57 83       	std	Z+7, r21	; 0x07
    1196:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <fprintf>
    119a:	8d b7       	in	r24, 0x3d	; 61
    119c:	9e b7       	in	r25, 0x3e	; 62
    119e:	08 96       	adiw	r24, 0x08	; 8
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	9e bf       	out	0x3e, r25	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	8d bf       	out	0x3d, r24	; 61
		}
		if (cmd[0] == 'p')		
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	80 37       	cpi	r24, 0x70	; 112
    11ae:	a9 f4       	brne	.+42     	; 0x11da <serialComm+0x14a>
			prop_gain = (int) num;
    11b0:	69 81       	ldd	r22, Y+1	; 0x01
    11b2:	7a 81       	ldd	r23, Y+2	; 0x02
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	0e 94 13 09 	call	0x1226	; 0x1226 <__fixsfsi>
    11bc:	88 27       	eor	r24, r24
    11be:	77 fd       	sbrc	r23, 7
    11c0:	80 95       	com	r24
    11c2:	98 2f       	mov	r25, r24
    11c4:	0e 94 46 09 	call	0x128c	; 0x128c <__floatsisf>
    11c8:	60 93 b1 02 	sts	0x02B1, r22
    11cc:	70 93 b2 02 	sts	0x02B2, r23
    11d0:	80 93 b3 02 	sts	0x02B3, r24
    11d4:	90 93 b4 02 	sts	0x02B4, r25
    11d8:	22 c0       	rjmp	.+68     	; 0x121e <serialComm+0x18e>
		if (cmd[0] == 'i')		
    11da:	89 36       	cpi	r24, 0x69	; 105
    11dc:	01 f5       	brne	.+64     	; 0x121e <serialComm+0x18e>
			diff_gain = (int) num;
    11de:	69 81       	ldd	r22, Y+1	; 0x01
    11e0:	7a 81       	ldd	r23, Y+2	; 0x02
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	0e 94 13 09 	call	0x1226	; 0x1226 <__fixsfsi>
    11ea:	88 27       	eor	r24, r24
    11ec:	77 fd       	sbrc	r23, 7
    11ee:	80 95       	com	r24
    11f0:	98 2f       	mov	r25, r24
    11f2:	0e 94 46 09 	call	0x128c	; 0x128c <__floatsisf>
    11f6:	60 93 6b 02 	sts	0x026B, r22
    11fa:	70 93 6c 02 	sts	0x026C, r23
    11fe:	80 93 6d 02 	sts	0x026D, r24
    1202:	90 93 6e 02 	sts	0x026E, r25
		if (cmd[0] == 'i')		
			diff_gain = num;
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	ab 81       	ldd	r26, Y+3	; 0x03
    120c:	bc 81       	ldd	r27, Y+4	; 0x04
    120e:	80 93 6b 02 	sts	0x026B, r24
    1212:	90 93 6c 02 	sts	0x026C, r25
    1216:	a0 93 6d 02 	sts	0x026D, r26
    121a:	b0 93 6e 02 	sts	0x026E, r27
				break;
			default:
				break;
		}
		*/
		trtSignal(SEM_SHARED);
    121e:	84 e0       	ldi	r24, 0x04	; 4
    1220:	0e 94 1e 03 	call	0x63c	; 0x63c <trtSignal>
    1224:	58 cf       	rjmp	.-336    	; 0x10d6 <serialComm+0x46>

00001226 <__fixsfsi>:
    1226:	04 d0       	rcall	.+8      	; 0x1230 <__fixunssfsi>
    1228:	68 94       	set
    122a:	b1 11       	cpse	r27, r1
    122c:	8d c0       	rjmp	.+282    	; 0x1348 <__fp_szero>
    122e:	08 95       	ret

00001230 <__fixunssfsi>:
    1230:	70 d0       	rcall	.+224    	; 0x1312 <__fp_splitA>
    1232:	88 f0       	brcs	.+34     	; 0x1256 <__fixunssfsi+0x26>
    1234:	9f 57       	subi	r25, 0x7F	; 127
    1236:	90 f0       	brcs	.+36     	; 0x125c <__fixunssfsi+0x2c>
    1238:	b9 2f       	mov	r27, r25
    123a:	99 27       	eor	r25, r25
    123c:	b7 51       	subi	r27, 0x17	; 23
    123e:	a0 f0       	brcs	.+40     	; 0x1268 <__fixunssfsi+0x38>
    1240:	d1 f0       	breq	.+52     	; 0x1276 <__fixunssfsi+0x46>
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	1a f0       	brmi	.+6      	; 0x1252 <__fixunssfsi+0x22>
    124c:	ba 95       	dec	r27
    124e:	c9 f7       	brne	.-14     	; 0x1242 <__fixunssfsi+0x12>
    1250:	12 c0       	rjmp	.+36     	; 0x1276 <__fixunssfsi+0x46>
    1252:	b1 30       	cpi	r27, 0x01	; 1
    1254:	81 f0       	breq	.+32     	; 0x1276 <__fixunssfsi+0x46>
    1256:	77 d0       	rcall	.+238    	; 0x1346 <__fp_zero>
    1258:	b1 e0       	ldi	r27, 0x01	; 1
    125a:	08 95       	ret
    125c:	74 c0       	rjmp	.+232    	; 0x1346 <__fp_zero>
    125e:	67 2f       	mov	r22, r23
    1260:	78 2f       	mov	r23, r24
    1262:	88 27       	eor	r24, r24
    1264:	b8 5f       	subi	r27, 0xF8	; 248
    1266:	39 f0       	breq	.+14     	; 0x1276 <__fixunssfsi+0x46>
    1268:	b9 3f       	cpi	r27, 0xF9	; 249
    126a:	cc f3       	brlt	.-14     	; 0x125e <__fixunssfsi+0x2e>
    126c:	86 95       	lsr	r24
    126e:	77 95       	ror	r23
    1270:	67 95       	ror	r22
    1272:	b3 95       	inc	r27
    1274:	d9 f7       	brne	.-10     	; 0x126c <__fixunssfsi+0x3c>
    1276:	3e f4       	brtc	.+14     	; 0x1286 <__fixunssfsi+0x56>
    1278:	90 95       	com	r25
    127a:	80 95       	com	r24
    127c:	70 95       	com	r23
    127e:	61 95       	neg	r22
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	8f 4f       	sbci	r24, 0xFF	; 255
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
    1286:	08 95       	ret

00001288 <__floatunsisf>:
    1288:	e8 94       	clt
    128a:	09 c0       	rjmp	.+18     	; 0x129e <__floatsisf+0x12>

0000128c <__floatsisf>:
    128c:	97 fb       	bst	r25, 7
    128e:	3e f4       	brtc	.+14     	; 0x129e <__floatsisf+0x12>
    1290:	90 95       	com	r25
    1292:	80 95       	com	r24
    1294:	70 95       	com	r23
    1296:	61 95       	neg	r22
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	8f 4f       	sbci	r24, 0xFF	; 255
    129c:	9f 4f       	sbci	r25, 0xFF	; 255
    129e:	99 23       	and	r25, r25
    12a0:	a9 f0       	breq	.+42     	; 0x12cc <__floatsisf+0x40>
    12a2:	f9 2f       	mov	r31, r25
    12a4:	96 e9       	ldi	r25, 0x96	; 150
    12a6:	bb 27       	eor	r27, r27
    12a8:	93 95       	inc	r25
    12aa:	f6 95       	lsr	r31
    12ac:	87 95       	ror	r24
    12ae:	77 95       	ror	r23
    12b0:	67 95       	ror	r22
    12b2:	b7 95       	ror	r27
    12b4:	f1 11       	cpse	r31, r1
    12b6:	f8 cf       	rjmp	.-16     	; 0x12a8 <__floatsisf+0x1c>
    12b8:	fa f4       	brpl	.+62     	; 0x12f8 <__floatsisf+0x6c>
    12ba:	bb 0f       	add	r27, r27
    12bc:	11 f4       	brne	.+4      	; 0x12c2 <__floatsisf+0x36>
    12be:	60 ff       	sbrs	r22, 0
    12c0:	1b c0       	rjmp	.+54     	; 0x12f8 <__floatsisf+0x6c>
    12c2:	6f 5f       	subi	r22, 0xFF	; 255
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	16 c0       	rjmp	.+44     	; 0x12f8 <__floatsisf+0x6c>
    12cc:	88 23       	and	r24, r24
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <__floatsisf+0x48>
    12d0:	96 e9       	ldi	r25, 0x96	; 150
    12d2:	11 c0       	rjmp	.+34     	; 0x12f6 <__floatsisf+0x6a>
    12d4:	77 23       	and	r23, r23
    12d6:	21 f0       	breq	.+8      	; 0x12e0 <__floatsisf+0x54>
    12d8:	9e e8       	ldi	r25, 0x8E	; 142
    12da:	87 2f       	mov	r24, r23
    12dc:	76 2f       	mov	r23, r22
    12de:	05 c0       	rjmp	.+10     	; 0x12ea <__floatsisf+0x5e>
    12e0:	66 23       	and	r22, r22
    12e2:	71 f0       	breq	.+28     	; 0x1300 <__floatsisf+0x74>
    12e4:	96 e8       	ldi	r25, 0x86	; 134
    12e6:	86 2f       	mov	r24, r22
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	2a f0       	brmi	.+10     	; 0x12f8 <__floatsisf+0x6c>
    12ee:	9a 95       	dec	r25
    12f0:	66 0f       	add	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	da f7       	brpl	.-10     	; 0x12ee <__floatsisf+0x62>
    12f8:	88 0f       	add	r24, r24
    12fa:	96 95       	lsr	r25
    12fc:	87 95       	ror	r24
    12fe:	97 f9       	bld	r25, 7
    1300:	08 95       	ret

00001302 <__fp_split3>:
    1302:	57 fd       	sbrc	r21, 7
    1304:	90 58       	subi	r25, 0x80	; 128
    1306:	44 0f       	add	r20, r20
    1308:	55 1f       	adc	r21, r21
    130a:	59 f0       	breq	.+22     	; 0x1322 <__fp_splitA+0x10>
    130c:	5f 3f       	cpi	r21, 0xFF	; 255
    130e:	71 f0       	breq	.+28     	; 0x132c <__fp_splitA+0x1a>
    1310:	47 95       	ror	r20

00001312 <__fp_splitA>:
    1312:	88 0f       	add	r24, r24
    1314:	97 fb       	bst	r25, 7
    1316:	99 1f       	adc	r25, r25
    1318:	61 f0       	breq	.+24     	; 0x1332 <__fp_splitA+0x20>
    131a:	9f 3f       	cpi	r25, 0xFF	; 255
    131c:	79 f0       	breq	.+30     	; 0x133c <__fp_splitA+0x2a>
    131e:	87 95       	ror	r24
    1320:	08 95       	ret
    1322:	12 16       	cp	r1, r18
    1324:	13 06       	cpc	r1, r19
    1326:	14 06       	cpc	r1, r20
    1328:	55 1f       	adc	r21, r21
    132a:	f2 cf       	rjmp	.-28     	; 0x1310 <__fp_split3+0xe>
    132c:	46 95       	lsr	r20
    132e:	f1 df       	rcall	.-30     	; 0x1312 <__fp_splitA>
    1330:	08 c0       	rjmp	.+16     	; 0x1342 <__fp_splitA+0x30>
    1332:	16 16       	cp	r1, r22
    1334:	17 06       	cpc	r1, r23
    1336:	18 06       	cpc	r1, r24
    1338:	99 1f       	adc	r25, r25
    133a:	f1 cf       	rjmp	.-30     	; 0x131e <__fp_splitA+0xc>
    133c:	86 95       	lsr	r24
    133e:	71 05       	cpc	r23, r1
    1340:	61 05       	cpc	r22, r1
    1342:	08 94       	sec
    1344:	08 95       	ret

00001346 <__fp_zero>:
    1346:	e8 94       	clt

00001348 <__fp_szero>:
    1348:	bb 27       	eor	r27, r27
    134a:	66 27       	eor	r22, r22
    134c:	77 27       	eor	r23, r23
    134e:	cb 01       	movw	r24, r22
    1350:	97 f9       	bld	r25, 7
    1352:	08 95       	ret

00001354 <vfprintf>:
    1354:	2f 92       	push	r2
    1356:	3f 92       	push	r3
    1358:	4f 92       	push	r4
    135a:	5f 92       	push	r5
    135c:	6f 92       	push	r6
    135e:	7f 92       	push	r7
    1360:	8f 92       	push	r8
    1362:	9f 92       	push	r9
    1364:	af 92       	push	r10
    1366:	bf 92       	push	r11
    1368:	cf 92       	push	r12
    136a:	df 92       	push	r13
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	61 97       	sbiw	r28, 0x11	; 17
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	3c 01       	movw	r6, r24
    138a:	7f 87       	std	Y+15, r23	; 0x0f
    138c:	6e 87       	std	Y+14, r22	; 0x0e
    138e:	6a 01       	movw	r12, r20
    1390:	fc 01       	movw	r30, r24
    1392:	17 82       	std	Z+7, r1	; 0x07
    1394:	16 82       	std	Z+6, r1	; 0x06
    1396:	83 81       	ldd	r24, Z+3	; 0x03
    1398:	81 fd       	sbrc	r24, 1
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <vfprintf+0x4e>
    139c:	6f ef       	ldi	r22, 0xFF	; 255
    139e:	7f ef       	ldi	r23, 0xFF	; 255
    13a0:	6f c3       	rjmp	.+1758   	; 0x1a80 <vfprintf+0x72c>
    13a2:	9e 01       	movw	r18, r28
    13a4:	2f 5f       	subi	r18, 0xFF	; 255
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	39 8b       	std	Y+17, r19	; 0x11
    13aa:	28 8b       	std	Y+16, r18	; 0x10
    13ac:	f3 01       	movw	r30, r6
    13ae:	23 81       	ldd	r18, Z+3	; 0x03
    13b0:	ee 85       	ldd	r30, Y+14	; 0x0e
    13b2:	ff 85       	ldd	r31, Y+15	; 0x0f
    13b4:	23 fd       	sbrc	r18, 3
    13b6:	85 91       	lpm	r24, Z+
    13b8:	23 ff       	sbrs	r18, 3
    13ba:	81 91       	ld	r24, Z+
    13bc:	ff 87       	std	Y+15, r31	; 0x0f
    13be:	ee 87       	std	Y+14, r30	; 0x0e
    13c0:	88 23       	and	r24, r24
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <vfprintf+0x72>
    13c4:	5a c3       	rjmp	.+1716   	; 0x1a7a <vfprintf+0x726>
    13c6:	85 32       	cpi	r24, 0x25	; 37
    13c8:	51 f4       	brne	.+20     	; 0x13de <vfprintf+0x8a>
    13ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    13cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    13ce:	23 fd       	sbrc	r18, 3
    13d0:	85 91       	lpm	r24, Z+
    13d2:	23 ff       	sbrs	r18, 3
    13d4:	81 91       	ld	r24, Z+
    13d6:	ff 87       	std	Y+15, r31	; 0x0f
    13d8:	ee 87       	std	Y+14, r30	; 0x0e
    13da:	85 32       	cpi	r24, 0x25	; 37
    13dc:	29 f4       	brne	.+10     	; 0x13e8 <vfprintf+0x94>
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	b3 01       	movw	r22, r6
    13e2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    13e6:	e2 cf       	rjmp	.-60     	; 0x13ac <vfprintf+0x58>
    13e8:	98 2f       	mov	r25, r24
    13ea:	10 e0       	ldi	r17, 0x00	; 0
    13ec:	88 24       	eor	r8, r8
    13ee:	99 24       	eor	r9, r9
    13f0:	10 32       	cpi	r17, 0x20	; 32
    13f2:	b0 f4       	brcc	.+44     	; 0x1420 <vfprintf+0xcc>
    13f4:	9b 32       	cpi	r25, 0x2B	; 43
    13f6:	69 f0       	breq	.+26     	; 0x1412 <vfprintf+0xbe>
    13f8:	9c 32       	cpi	r25, 0x2C	; 44
    13fa:	28 f4       	brcc	.+10     	; 0x1406 <vfprintf+0xb2>
    13fc:	90 32       	cpi	r25, 0x20	; 32
    13fe:	51 f0       	breq	.+20     	; 0x1414 <vfprintf+0xc0>
    1400:	93 32       	cpi	r25, 0x23	; 35
    1402:	71 f4       	brne	.+28     	; 0x1420 <vfprintf+0xcc>
    1404:	0b c0       	rjmp	.+22     	; 0x141c <vfprintf+0xc8>
    1406:	9d 32       	cpi	r25, 0x2D	; 45
    1408:	39 f0       	breq	.+14     	; 0x1418 <vfprintf+0xc4>
    140a:	90 33       	cpi	r25, 0x30	; 48
    140c:	49 f4       	brne	.+18     	; 0x1420 <vfprintf+0xcc>
    140e:	11 60       	ori	r17, 0x01	; 1
    1410:	28 c0       	rjmp	.+80     	; 0x1462 <vfprintf+0x10e>
    1412:	12 60       	ori	r17, 0x02	; 2
    1414:	14 60       	ori	r17, 0x04	; 4
    1416:	25 c0       	rjmp	.+74     	; 0x1462 <vfprintf+0x10e>
    1418:	18 60       	ori	r17, 0x08	; 8
    141a:	23 c0       	rjmp	.+70     	; 0x1462 <vfprintf+0x10e>
    141c:	10 61       	ori	r17, 0x10	; 16
    141e:	21 c0       	rjmp	.+66     	; 0x1462 <vfprintf+0x10e>
    1420:	17 fd       	sbrc	r17, 7
    1422:	2a c0       	rjmp	.+84     	; 0x1478 <vfprintf+0x124>
    1424:	89 2f       	mov	r24, r25
    1426:	80 53       	subi	r24, 0x30	; 48
    1428:	8a 30       	cpi	r24, 0x0A	; 10
    142a:	78 f4       	brcc	.+30     	; 0x144a <vfprintf+0xf6>
    142c:	16 ff       	sbrs	r17, 6
    142e:	06 c0       	rjmp	.+12     	; 0x143c <vfprintf+0xe8>
    1430:	fa e0       	ldi	r31, 0x0A	; 10
    1432:	9f 9e       	mul	r9, r31
    1434:	90 2c       	mov	r9, r0
    1436:	11 24       	eor	r1, r1
    1438:	98 0e       	add	r9, r24
    143a:	13 c0       	rjmp	.+38     	; 0x1462 <vfprintf+0x10e>
    143c:	3a e0       	ldi	r19, 0x0A	; 10
    143e:	83 9e       	mul	r8, r19
    1440:	80 2c       	mov	r8, r0
    1442:	11 24       	eor	r1, r1
    1444:	88 0e       	add	r8, r24
    1446:	10 62       	ori	r17, 0x20	; 32
    1448:	0c c0       	rjmp	.+24     	; 0x1462 <vfprintf+0x10e>
    144a:	9e 32       	cpi	r25, 0x2E	; 46
    144c:	21 f4       	brne	.+8      	; 0x1456 <vfprintf+0x102>
    144e:	16 fd       	sbrc	r17, 6
    1450:	14 c3       	rjmp	.+1576   	; 0x1a7a <vfprintf+0x726>
    1452:	10 64       	ori	r17, 0x40	; 64
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <vfprintf+0x10e>
    1456:	9c 36       	cpi	r25, 0x6C	; 108
    1458:	11 f4       	brne	.+4      	; 0x145e <vfprintf+0x10a>
    145a:	10 68       	ori	r17, 0x80	; 128
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <vfprintf+0x10e>
    145e:	98 36       	cpi	r25, 0x68	; 104
    1460:	59 f4       	brne	.+22     	; 0x1478 <vfprintf+0x124>
    1462:	ee 85       	ldd	r30, Y+14	; 0x0e
    1464:	ff 85       	ldd	r31, Y+15	; 0x0f
    1466:	23 fd       	sbrc	r18, 3
    1468:	95 91       	lpm	r25, Z+
    146a:	23 ff       	sbrs	r18, 3
    146c:	91 91       	ld	r25, Z+
    146e:	ff 87       	std	Y+15, r31	; 0x0f
    1470:	ee 87       	std	Y+14, r30	; 0x0e
    1472:	99 23       	and	r25, r25
    1474:	09 f0       	breq	.+2      	; 0x1478 <vfprintf+0x124>
    1476:	bc cf       	rjmp	.-136    	; 0x13f0 <vfprintf+0x9c>
    1478:	89 2f       	mov	r24, r25
    147a:	85 54       	subi	r24, 0x45	; 69
    147c:	83 30       	cpi	r24, 0x03	; 3
    147e:	20 f4       	brcc	.+8      	; 0x1488 <vfprintf+0x134>
    1480:	81 2f       	mov	r24, r17
    1482:	80 61       	ori	r24, 0x10	; 16
    1484:	90 5e       	subi	r25, 0xE0	; 224
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <vfprintf+0x142>
    1488:	89 2f       	mov	r24, r25
    148a:	85 56       	subi	r24, 0x65	; 101
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	08 f0       	brcs	.+2      	; 0x1492 <vfprintf+0x13e>
    1490:	9f c1       	rjmp	.+830    	; 0x17d0 <vfprintf+0x47c>
    1492:	81 2f       	mov	r24, r17
    1494:	8f 7e       	andi	r24, 0xEF	; 239
    1496:	86 fd       	sbrc	r24, 6
    1498:	02 c0       	rjmp	.+4      	; 0x149e <vfprintf+0x14a>
    149a:	76 e0       	ldi	r23, 0x06	; 6
    149c:	97 2e       	mov	r9, r23
    149e:	6f e3       	ldi	r22, 0x3F	; 63
    14a0:	f6 2e       	mov	r15, r22
    14a2:	f8 22       	and	r15, r24
    14a4:	95 36       	cpi	r25, 0x65	; 101
    14a6:	19 f4       	brne	.+6      	; 0x14ae <vfprintf+0x15a>
    14a8:	f0 e4       	ldi	r31, 0x40	; 64
    14aa:	ff 2a       	or	r15, r31
    14ac:	07 c0       	rjmp	.+14     	; 0x14bc <vfprintf+0x168>
    14ae:	96 36       	cpi	r25, 0x66	; 102
    14b0:	19 f4       	brne	.+6      	; 0x14b8 <vfprintf+0x164>
    14b2:	20 e8       	ldi	r18, 0x80	; 128
    14b4:	f2 2a       	or	r15, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <vfprintf+0x168>
    14b8:	91 10       	cpse	r9, r1
    14ba:	9a 94       	dec	r9
    14bc:	f7 fe       	sbrs	r15, 7
    14be:	0a c0       	rjmp	.+20     	; 0x14d4 <vfprintf+0x180>
    14c0:	3b e3       	ldi	r19, 0x3B	; 59
    14c2:	39 15       	cp	r19, r9
    14c4:	18 f4       	brcc	.+6      	; 0x14cc <vfprintf+0x178>
    14c6:	5c e3       	ldi	r21, 0x3C	; 60
    14c8:	b5 2e       	mov	r11, r21
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <vfprintf+0x17c>
    14cc:	b9 2c       	mov	r11, r9
    14ce:	b3 94       	inc	r11
    14d0:	27 e0       	ldi	r18, 0x07	; 7
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <vfprintf+0x192>
    14d4:	47 e0       	ldi	r20, 0x07	; 7
    14d6:	49 15       	cp	r20, r9
    14d8:	20 f4       	brcc	.+8      	; 0x14e2 <vfprintf+0x18e>
    14da:	bb 24       	eor	r11, r11
    14dc:	47 e0       	ldi	r20, 0x07	; 7
    14de:	94 2e       	mov	r9, r20
    14e0:	f7 cf       	rjmp	.-18     	; 0x14d0 <vfprintf+0x17c>
    14e2:	29 2d       	mov	r18, r9
    14e4:	bb 24       	eor	r11, r11
    14e6:	c6 01       	movw	r24, r12
    14e8:	04 96       	adiw	r24, 0x04	; 4
    14ea:	9d 87       	std	Y+13, r25	; 0x0d
    14ec:	8c 87       	std	Y+12, r24	; 0x0c
    14ee:	f6 01       	movw	r30, r12
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	ae 01       	movw	r20, r28
    14fa:	4f 5f       	subi	r20, 0xFF	; 255
    14fc:	5f 4f       	sbci	r21, 0xFF	; 255
    14fe:	0b 2d       	mov	r16, r11
    1500:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__ftoa_engine>
    1504:	6c 01       	movw	r12, r24
    1506:	09 81       	ldd	r16, Y+1	; 0x01
    1508:	20 2e       	mov	r2, r16
    150a:	33 24       	eor	r3, r3
    150c:	00 ff       	sbrs	r16, 0
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <vfprintf+0x1c4>
    1510:	03 fd       	sbrc	r16, 3
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <vfprintf+0x1c4>
    1514:	1d e2       	ldi	r17, 0x2D	; 45
    1516:	09 c0       	rjmp	.+18     	; 0x152a <vfprintf+0x1d6>
    1518:	f1 fe       	sbrs	r15, 1
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <vfprintf+0x1cc>
    151c:	1b e2       	ldi	r17, 0x2B	; 43
    151e:	05 c0       	rjmp	.+10     	; 0x152a <vfprintf+0x1d6>
    1520:	f2 fc       	sbrc	r15, 2
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <vfprintf+0x1d4>
    1524:	10 e0       	ldi	r17, 0x00	; 0
    1526:	01 c0       	rjmp	.+2      	; 0x152a <vfprintf+0x1d6>
    1528:	10 e2       	ldi	r17, 0x20	; 32
    152a:	c1 01       	movw	r24, r2
    152c:	8c 70       	andi	r24, 0x0C	; 12
    152e:	90 70       	andi	r25, 0x00	; 0
    1530:	89 2b       	or	r24, r25
    1532:	b9 f1       	breq	.+110    	; 0x15a2 <vfprintf+0x24e>
    1534:	11 23       	and	r17, r17
    1536:	11 f4       	brne	.+4      	; 0x153c <vfprintf+0x1e8>
    1538:	83 e0       	ldi	r24, 0x03	; 3
    153a:	01 c0       	rjmp	.+2      	; 0x153e <vfprintf+0x1ea>
    153c:	84 e0       	ldi	r24, 0x04	; 4
    153e:	88 15       	cp	r24, r8
    1540:	10 f0       	brcs	.+4      	; 0x1546 <vfprintf+0x1f2>
    1542:	88 24       	eor	r8, r8
    1544:	0a c0       	rjmp	.+20     	; 0x155a <vfprintf+0x206>
    1546:	88 1a       	sub	r8, r24
    1548:	f3 fc       	sbrc	r15, 3
    154a:	07 c0       	rjmp	.+14     	; 0x155a <vfprintf+0x206>
    154c:	80 e2       	ldi	r24, 0x20	; 32
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	b3 01       	movw	r22, r6
    1552:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1556:	8a 94       	dec	r8
    1558:	c9 f7       	brne	.-14     	; 0x154c <vfprintf+0x1f8>
    155a:	11 23       	and	r17, r17
    155c:	29 f0       	breq	.+10     	; 0x1568 <vfprintf+0x214>
    155e:	81 2f       	mov	r24, r17
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	b3 01       	movw	r22, r6
    1564:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1568:	23 fe       	sbrs	r2, 3
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <vfprintf+0x21e>
    156c:	0b ed       	ldi	r16, 0xDB	; 219
    156e:	10 e0       	ldi	r17, 0x00	; 0
    1570:	0e c0       	rjmp	.+28     	; 0x158e <vfprintf+0x23a>
    1572:	0f ed       	ldi	r16, 0xDF	; 223
    1574:	10 e0       	ldi	r17, 0x00	; 0
    1576:	0b c0       	rjmp	.+22     	; 0x158e <vfprintf+0x23a>
    1578:	e1 14       	cp	r14, r1
    157a:	f1 04       	cpc	r15, r1
    157c:	09 f0       	breq	.+2      	; 0x1580 <vfprintf+0x22c>
    157e:	80 52       	subi	r24, 0x20	; 32
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	b3 01       	movw	r22, r6
    1584:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1588:	0f 5f       	subi	r16, 0xFF	; 255
    158a:	1f 4f       	sbci	r17, 0xFF	; 255
    158c:	05 c0       	rjmp	.+10     	; 0x1598 <vfprintf+0x244>
    158e:	ef 2c       	mov	r14, r15
    1590:	ff 24       	eor	r15, r15
    1592:	f0 e1       	ldi	r31, 0x10	; 16
    1594:	ef 22       	and	r14, r31
    1596:	ff 24       	eor	r15, r15
    1598:	f8 01       	movw	r30, r16
    159a:	84 91       	lpm	r24, Z+
    159c:	88 23       	and	r24, r24
    159e:	61 f7       	brne	.-40     	; 0x1578 <vfprintf+0x224>
    15a0:	14 c1       	rjmp	.+552    	; 0x17ca <vfprintf+0x476>
    15a2:	f7 fe       	sbrs	r15, 7
    15a4:	12 c0       	rjmp	.+36     	; 0x15ca <vfprintf+0x276>
    15a6:	bc 0c       	add	r11, r12
    15a8:	24 fe       	sbrs	r2, 4
    15aa:	04 c0       	rjmp	.+8      	; 0x15b4 <vfprintf+0x260>
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	81 33       	cpi	r24, 0x31	; 49
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <vfprintf+0x260>
    15b2:	ba 94       	dec	r11
    15b4:	1b 14       	cp	r1, r11
    15b6:	1c f0       	brlt	.+6      	; 0x15be <vfprintf+0x26a>
    15b8:	bb 24       	eor	r11, r11
    15ba:	b3 94       	inc	r11
    15bc:	2d c0       	rjmp	.+90     	; 0x1618 <vfprintf+0x2c4>
    15be:	f8 e0       	ldi	r31, 0x08	; 8
    15c0:	fb 15       	cp	r31, r11
    15c2:	50 f5       	brcc	.+84     	; 0x1618 <vfprintf+0x2c4>
    15c4:	38 e0       	ldi	r19, 0x08	; 8
    15c6:	b3 2e       	mov	r11, r19
    15c8:	27 c0       	rjmp	.+78     	; 0x1618 <vfprintf+0x2c4>
    15ca:	f6 fc       	sbrc	r15, 6
    15cc:	25 c0       	rjmp	.+74     	; 0x1618 <vfprintf+0x2c4>
    15ce:	89 2d       	mov	r24, r9
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	8c 15       	cp	r24, r12
    15d4:	9d 05       	cpc	r25, r13
    15d6:	4c f0       	brlt	.+18     	; 0x15ea <vfprintf+0x296>
    15d8:	2c ef       	ldi	r18, 0xFC	; 252
    15da:	c2 16       	cp	r12, r18
    15dc:	2f ef       	ldi	r18, 0xFF	; 255
    15de:	d2 06       	cpc	r13, r18
    15e0:	24 f0       	brlt	.+8      	; 0x15ea <vfprintf+0x296>
    15e2:	30 e8       	ldi	r19, 0x80	; 128
    15e4:	f3 2a       	or	r15, r19
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <vfprintf+0x296>
    15e8:	9a 94       	dec	r9
    15ea:	99 20       	and	r9, r9
    15ec:	49 f0       	breq	.+18     	; 0x1600 <vfprintf+0x2ac>
    15ee:	e2 e0       	ldi	r30, 0x02	; 2
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	ec 0f       	add	r30, r28
    15f4:	fd 1f       	adc	r31, r29
    15f6:	e9 0d       	add	r30, r9
    15f8:	f1 1d       	adc	r31, r1
    15fa:	80 81       	ld	r24, Z
    15fc:	80 33       	cpi	r24, 0x30	; 48
    15fe:	a1 f3       	breq	.-24     	; 0x15e8 <vfprintf+0x294>
    1600:	f7 fe       	sbrs	r15, 7
    1602:	0a c0       	rjmp	.+20     	; 0x1618 <vfprintf+0x2c4>
    1604:	b9 2c       	mov	r11, r9
    1606:	b3 94       	inc	r11
    1608:	89 2d       	mov	r24, r9
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	c8 16       	cp	r12, r24
    160e:	d9 06       	cpc	r13, r25
    1610:	14 f0       	brlt	.+4      	; 0x1616 <vfprintf+0x2c2>
    1612:	99 24       	eor	r9, r9
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <vfprintf+0x2c4>
    1616:	9c 18       	sub	r9, r12
    1618:	f7 fc       	sbrc	r15, 7
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <vfprintf+0x2ce>
    161c:	25 e0       	ldi	r18, 0x05	; 5
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	09 c0       	rjmp	.+18     	; 0x1634 <vfprintf+0x2e0>
    1622:	1c 14       	cp	r1, r12
    1624:	1d 04       	cpc	r1, r13
    1626:	1c f0       	brlt	.+6      	; 0x162e <vfprintf+0x2da>
    1628:	21 e0       	ldi	r18, 0x01	; 1
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <vfprintf+0x2e0>
    162e:	96 01       	movw	r18, r12
    1630:	2f 5f       	subi	r18, 0xFF	; 255
    1632:	3f 4f       	sbci	r19, 0xFF	; 255
    1634:	11 23       	and	r17, r17
    1636:	11 f0       	breq	.+4      	; 0x163c <vfprintf+0x2e8>
    1638:	2f 5f       	subi	r18, 0xFF	; 255
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	99 20       	and	r9, r9
    163e:	29 f0       	breq	.+10     	; 0x164a <vfprintf+0x2f6>
    1640:	89 2d       	mov	r24, r9
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	28 0f       	add	r18, r24
    1648:	39 1f       	adc	r19, r25
    164a:	88 2d       	mov	r24, r8
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	28 17       	cp	r18, r24
    1650:	39 07       	cpc	r19, r25
    1652:	14 f0       	brlt	.+4      	; 0x1658 <vfprintf+0x304>
    1654:	88 24       	eor	r8, r8
    1656:	01 c0       	rjmp	.+2      	; 0x165a <vfprintf+0x306>
    1658:	82 1a       	sub	r8, r18
    165a:	4f 2c       	mov	r4, r15
    165c:	55 24       	eor	r5, r5
    165e:	c2 01       	movw	r24, r4
    1660:	89 70       	andi	r24, 0x09	; 9
    1662:	90 70       	andi	r25, 0x00	; 0
    1664:	89 2b       	or	r24, r25
    1666:	39 f0       	breq	.+14     	; 0x1676 <vfprintf+0x322>
    1668:	08 c0       	rjmp	.+16     	; 0x167a <vfprintf+0x326>
    166a:	80 e2       	ldi	r24, 0x20	; 32
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	b3 01       	movw	r22, r6
    1670:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1674:	8a 94       	dec	r8
    1676:	88 20       	and	r8, r8
    1678:	c1 f7       	brne	.-16     	; 0x166a <vfprintf+0x316>
    167a:	11 23       	and	r17, r17
    167c:	29 f0       	breq	.+10     	; 0x1688 <vfprintf+0x334>
    167e:	81 2f       	mov	r24, r17
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	b3 01       	movw	r22, r6
    1684:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1688:	43 fe       	sbrs	r4, 3
    168a:	07 c0       	rjmp	.+14     	; 0x169a <vfprintf+0x346>
    168c:	08 c0       	rjmp	.+16     	; 0x169e <vfprintf+0x34a>
    168e:	80 e3       	ldi	r24, 0x30	; 48
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	b3 01       	movw	r22, r6
    1694:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1698:	8a 94       	dec	r8
    169a:	88 20       	and	r8, r8
    169c:	c1 f7       	brne	.-16     	; 0x168e <vfprintf+0x33a>
    169e:	f7 fe       	sbrs	r15, 7
    16a0:	46 c0       	rjmp	.+140    	; 0x172e <vfprintf+0x3da>
    16a2:	86 01       	movw	r16, r12
    16a4:	d7 fe       	sbrs	r13, 7
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x358>
    16a8:	00 e0       	ldi	r16, 0x00	; 0
    16aa:	10 e0       	ldi	r17, 0x00	; 0
    16ac:	76 01       	movw	r14, r12
    16ae:	08 94       	sec
    16b0:	e1 1c       	adc	r14, r1
    16b2:	f1 1c       	adc	r15, r1
    16b4:	e0 1a       	sub	r14, r16
    16b6:	f1 0a       	sbc	r15, r17
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	4c 0f       	add	r20, r28
    16be:	5d 1f       	adc	r21, r29
    16c0:	e4 0e       	add	r14, r20
    16c2:	f5 1e       	adc	r15, r21
    16c4:	26 01       	movw	r4, r12
    16c6:	4b 18       	sub	r4, r11
    16c8:	51 08       	sbc	r5, r1
    16ca:	89 2d       	mov	r24, r9
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	aa 24       	eor	r10, r10
    16d0:	bb 24       	eor	r11, r11
    16d2:	a8 1a       	sub	r10, r24
    16d4:	b9 0a       	sbc	r11, r25
    16d6:	5f ef       	ldi	r21, 0xFF	; 255
    16d8:	0f 3f       	cpi	r16, 0xFF	; 255
    16da:	15 07       	cpc	r17, r21
    16dc:	29 f4       	brne	.+10     	; 0x16e8 <vfprintf+0x394>
    16de:	8e e2       	ldi	r24, 0x2E	; 46
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	b3 01       	movw	r22, r6
    16e4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    16e8:	c0 16       	cp	r12, r16
    16ea:	d1 06       	cpc	r13, r17
    16ec:	34 f0       	brlt	.+12     	; 0x16fa <vfprintf+0x3a6>
    16ee:	40 16       	cp	r4, r16
    16f0:	51 06       	cpc	r5, r17
    16f2:	1c f4       	brge	.+6      	; 0x16fa <vfprintf+0x3a6>
    16f4:	f7 01       	movw	r30, r14
    16f6:	80 81       	ld	r24, Z
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <vfprintf+0x3a8>
    16fa:	80 e3       	ldi	r24, 0x30	; 48
    16fc:	01 50       	subi	r16, 0x01	; 1
    16fe:	10 40       	sbci	r17, 0x00	; 0
    1700:	08 94       	sec
    1702:	e1 1c       	adc	r14, r1
    1704:	f1 1c       	adc	r15, r1
    1706:	0a 15       	cp	r16, r10
    1708:	1b 05       	cpc	r17, r11
    170a:	2c f0       	brlt	.+10     	; 0x1716 <vfprintf+0x3c2>
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	b3 01       	movw	r22, r6
    1710:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1714:	e0 cf       	rjmp	.-64     	; 0x16d6 <vfprintf+0x382>
    1716:	0c 15       	cp	r16, r12
    1718:	1d 05       	cpc	r17, r13
    171a:	39 f4       	brne	.+14     	; 0x172a <vfprintf+0x3d6>
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	96 33       	cpi	r25, 0x36	; 54
    1720:	18 f4       	brcc	.+6      	; 0x1728 <vfprintf+0x3d4>
    1722:	95 33       	cpi	r25, 0x35	; 53
    1724:	11 f4       	brne	.+4      	; 0x172a <vfprintf+0x3d6>
    1726:	24 fe       	sbrs	r2, 4
    1728:	81 e3       	ldi	r24, 0x31	; 49
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	4b c0       	rjmp	.+150    	; 0x17c4 <vfprintf+0x470>
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	81 33       	cpi	r24, 0x31	; 49
    1732:	09 f0       	breq	.+2      	; 0x1736 <vfprintf+0x3e2>
    1734:	0f 7e       	andi	r16, 0xEF	; 239
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	b3 01       	movw	r22, r6
    173a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    173e:	99 20       	and	r9, r9
    1740:	a1 f0       	breq	.+40     	; 0x176a <vfprintf+0x416>
    1742:	8e e2       	ldi	r24, 0x2E	; 46
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	b3 01       	movw	r22, r6
    1748:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    174c:	12 e0       	ldi	r17, 0x02	; 2
    174e:	e1 e0       	ldi	r30, 0x01	; 1
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	ec 0f       	add	r30, r28
    1754:	fd 1f       	adc	r31, r29
    1756:	e1 0f       	add	r30, r17
    1758:	f1 1d       	adc	r31, r1
    175a:	1f 5f       	subi	r17, 0xFF	; 255
    175c:	80 81       	ld	r24, Z
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	b3 01       	movw	r22, r6
    1762:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1766:	9a 94       	dec	r9
    1768:	91 f7       	brne	.-28     	; 0x174e <vfprintf+0x3fa>
    176a:	44 fc       	sbrc	r4, 4
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <vfprintf+0x420>
    176e:	85 e6       	ldi	r24, 0x65	; 101
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <vfprintf+0x424>
    1774:	85 e4       	ldi	r24, 0x45	; 69
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	b3 01       	movw	r22, r6
    177a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    177e:	d7 fc       	sbrc	r13, 7
    1780:	05 c0       	rjmp	.+10     	; 0x178c <vfprintf+0x438>
    1782:	c1 14       	cp	r12, r1
    1784:	d1 04       	cpc	r13, r1
    1786:	41 f4       	brne	.+16     	; 0x1798 <vfprintf+0x444>
    1788:	04 ff       	sbrs	r16, 4
    178a:	06 c0       	rjmp	.+12     	; 0x1798 <vfprintf+0x444>
    178c:	d0 94       	com	r13
    178e:	c1 94       	neg	r12
    1790:	d1 08       	sbc	r13, r1
    1792:	d3 94       	inc	r13
    1794:	8d e2       	ldi	r24, 0x2D	; 45
    1796:	01 c0       	rjmp	.+2      	; 0x179a <vfprintf+0x446>
    1798:	8b e2       	ldi	r24, 0x2B	; 43
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	b3 01       	movw	r22, r6
    179e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    17a2:	80 e3       	ldi	r24, 0x30	; 48
    17a4:	05 c0       	rjmp	.+10     	; 0x17b0 <vfprintf+0x45c>
    17a6:	8f 5f       	subi	r24, 0xFF	; 255
    17a8:	26 ef       	ldi	r18, 0xF6	; 246
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	c2 0e       	add	r12, r18
    17ae:	d3 1e       	adc	r13, r19
    17b0:	3a e0       	ldi	r19, 0x0A	; 10
    17b2:	c3 16       	cp	r12, r19
    17b4:	d1 04       	cpc	r13, r1
    17b6:	bc f7       	brge	.-18     	; 0x17a6 <vfprintf+0x452>
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	b3 01       	movw	r22, r6
    17bc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    17c0:	c6 01       	movw	r24, r12
    17c2:	c0 96       	adiw	r24, 0x30	; 48
    17c4:	b3 01       	movw	r22, r6
    17c6:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    17ca:	cc 84       	ldd	r12, Y+12	; 0x0c
    17cc:	dd 84       	ldd	r13, Y+13	; 0x0d
    17ce:	52 c1       	rjmp	.+676    	; 0x1a74 <vfprintf+0x720>
    17d0:	93 36       	cpi	r25, 0x63	; 99
    17d2:	31 f0       	breq	.+12     	; 0x17e0 <vfprintf+0x48c>
    17d4:	93 37       	cpi	r25, 0x73	; 115
    17d6:	99 f0       	breq	.+38     	; 0x17fe <vfprintf+0x4aa>
    17d8:	93 35       	cpi	r25, 0x53	; 83
    17da:	09 f0       	breq	.+2      	; 0x17de <vfprintf+0x48a>
    17dc:	59 c0       	rjmp	.+178    	; 0x1890 <vfprintf+0x53c>
    17de:	23 c0       	rjmp	.+70     	; 0x1826 <vfprintf+0x4d2>
    17e0:	f6 01       	movw	r30, r12
    17e2:	80 81       	ld	r24, Z
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	5e 01       	movw	r10, r28
    17e8:	08 94       	sec
    17ea:	a1 1c       	adc	r10, r1
    17ec:	b1 1c       	adc	r11, r1
    17ee:	22 e0       	ldi	r18, 0x02	; 2
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	c2 0e       	add	r12, r18
    17f4:	d3 1e       	adc	r13, r19
    17f6:	21 e0       	ldi	r18, 0x01	; 1
    17f8:	e2 2e       	mov	r14, r18
    17fa:	f1 2c       	mov	r15, r1
    17fc:	12 c0       	rjmp	.+36     	; 0x1822 <vfprintf+0x4ce>
    17fe:	f6 01       	movw	r30, r12
    1800:	a0 80       	ld	r10, Z
    1802:	b1 80       	ldd	r11, Z+1	; 0x01
    1804:	16 fd       	sbrc	r17, 6
    1806:	03 c0       	rjmp	.+6      	; 0x180e <vfprintf+0x4ba>
    1808:	6f ef       	ldi	r22, 0xFF	; 255
    180a:	7f ef       	ldi	r23, 0xFF	; 255
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <vfprintf+0x4be>
    180e:	69 2d       	mov	r22, r9
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	22 e0       	ldi	r18, 0x02	; 2
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	c2 0e       	add	r12, r18
    1818:	d3 1e       	adc	r13, r19
    181a:	c5 01       	movw	r24, r10
    181c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <strnlen>
    1820:	7c 01       	movw	r14, r24
    1822:	1f 77       	andi	r17, 0x7F	; 127
    1824:	13 c0       	rjmp	.+38     	; 0x184c <vfprintf+0x4f8>
    1826:	f6 01       	movw	r30, r12
    1828:	a0 80       	ld	r10, Z
    182a:	b1 80       	ldd	r11, Z+1	; 0x01
    182c:	16 fd       	sbrc	r17, 6
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <vfprintf+0x4e2>
    1830:	6f ef       	ldi	r22, 0xFF	; 255
    1832:	7f ef       	ldi	r23, 0xFF	; 255
    1834:	02 c0       	rjmp	.+4      	; 0x183a <vfprintf+0x4e6>
    1836:	69 2d       	mov	r22, r9
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	22 e0       	ldi	r18, 0x02	; 2
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	c2 0e       	add	r12, r18
    1840:	d3 1e       	adc	r13, r19
    1842:	c5 01       	movw	r24, r10
    1844:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <strnlen_P>
    1848:	7c 01       	movw	r14, r24
    184a:	10 68       	ori	r17, 0x80	; 128
    184c:	13 ff       	sbrs	r17, 3
    184e:	07 c0       	rjmp	.+14     	; 0x185e <vfprintf+0x50a>
    1850:	1b c0       	rjmp	.+54     	; 0x1888 <vfprintf+0x534>
    1852:	80 e2       	ldi	r24, 0x20	; 32
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	b3 01       	movw	r22, r6
    1858:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    185c:	8a 94       	dec	r8
    185e:	88 2d       	mov	r24, r8
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	e8 16       	cp	r14, r24
    1864:	f9 06       	cpc	r15, r25
    1866:	a8 f3       	brcs	.-22     	; 0x1852 <vfprintf+0x4fe>
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <vfprintf+0x534>
    186a:	f5 01       	movw	r30, r10
    186c:	17 fd       	sbrc	r17, 7
    186e:	85 91       	lpm	r24, Z+
    1870:	17 ff       	sbrs	r17, 7
    1872:	81 91       	ld	r24, Z+
    1874:	5f 01       	movw	r10, r30
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	b3 01       	movw	r22, r6
    187a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    187e:	81 10       	cpse	r8, r1
    1880:	8a 94       	dec	r8
    1882:	08 94       	sec
    1884:	e1 08       	sbc	r14, r1
    1886:	f1 08       	sbc	r15, r1
    1888:	e1 14       	cp	r14, r1
    188a:	f1 04       	cpc	r15, r1
    188c:	71 f7       	brne	.-36     	; 0x186a <vfprintf+0x516>
    188e:	f2 c0       	rjmp	.+484    	; 0x1a74 <vfprintf+0x720>
    1890:	94 36       	cpi	r25, 0x64	; 100
    1892:	11 f0       	breq	.+4      	; 0x1898 <vfprintf+0x544>
    1894:	99 36       	cpi	r25, 0x69	; 105
    1896:	89 f5       	brne	.+98     	; 0x18fa <vfprintf+0x5a6>
    1898:	17 ff       	sbrs	r17, 7
    189a:	08 c0       	rjmp	.+16     	; 0x18ac <vfprintf+0x558>
    189c:	f6 01       	movw	r30, r12
    189e:	20 81       	ld	r18, Z
    18a0:	31 81       	ldd	r19, Z+1	; 0x01
    18a2:	42 81       	ldd	r20, Z+2	; 0x02
    18a4:	53 81       	ldd	r21, Z+3	; 0x03
    18a6:	84 e0       	ldi	r24, 0x04	; 4
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0a c0       	rjmp	.+20     	; 0x18c0 <vfprintf+0x56c>
    18ac:	f6 01       	movw	r30, r12
    18ae:	80 81       	ld	r24, Z
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	9c 01       	movw	r18, r24
    18b4:	44 27       	eor	r20, r20
    18b6:	37 fd       	sbrc	r19, 7
    18b8:	40 95       	com	r20
    18ba:	54 2f       	mov	r21, r20
    18bc:	82 e0       	ldi	r24, 0x02	; 2
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	c8 0e       	add	r12, r24
    18c2:	d9 1e       	adc	r13, r25
    18c4:	9f e6       	ldi	r25, 0x6F	; 111
    18c6:	f9 2e       	mov	r15, r25
    18c8:	f1 22       	and	r15, r17
    18ca:	57 ff       	sbrs	r21, 7
    18cc:	09 c0       	rjmp	.+18     	; 0x18e0 <vfprintf+0x58c>
    18ce:	50 95       	com	r21
    18d0:	40 95       	com	r20
    18d2:	30 95       	com	r19
    18d4:	21 95       	neg	r18
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	4f 4f       	sbci	r20, 0xFF	; 255
    18da:	5f 4f       	sbci	r21, 0xFF	; 255
    18dc:	90 e8       	ldi	r25, 0x80	; 128
    18de:	f9 2a       	or	r15, r25
    18e0:	ca 01       	movw	r24, r20
    18e2:	b9 01       	movw	r22, r18
    18e4:	ae 01       	movw	r20, r28
    18e6:	4f 5f       	subi	r20, 0xFF	; 255
    18e8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ea:	2a e0       	ldi	r18, 0x0A	; 10
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__ultoa_invert>
    18f2:	e8 2e       	mov	r14, r24
    18f4:	e8 89       	ldd	r30, Y+16	; 0x10
    18f6:	ee 1a       	sub	r14, r30
    18f8:	41 c0       	rjmp	.+130    	; 0x197c <vfprintf+0x628>
    18fa:	95 37       	cpi	r25, 0x75	; 117
    18fc:	21 f4       	brne	.+8      	; 0x1906 <vfprintf+0x5b2>
    18fe:	1f 7e       	andi	r17, 0xEF	; 239
    1900:	2a e0       	ldi	r18, 0x0A	; 10
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	1c c0       	rjmp	.+56     	; 0x193e <vfprintf+0x5ea>
    1906:	19 7f       	andi	r17, 0xF9	; 249
    1908:	9f 36       	cpi	r25, 0x6F	; 111
    190a:	61 f0       	breq	.+24     	; 0x1924 <vfprintf+0x5d0>
    190c:	90 37       	cpi	r25, 0x70	; 112
    190e:	20 f4       	brcc	.+8      	; 0x1918 <vfprintf+0x5c4>
    1910:	98 35       	cpi	r25, 0x58	; 88
    1912:	09 f0       	breq	.+2      	; 0x1916 <vfprintf+0x5c2>
    1914:	b2 c0       	rjmp	.+356    	; 0x1a7a <vfprintf+0x726>
    1916:	0f c0       	rjmp	.+30     	; 0x1936 <vfprintf+0x5e2>
    1918:	90 37       	cpi	r25, 0x70	; 112
    191a:	39 f0       	breq	.+14     	; 0x192a <vfprintf+0x5d6>
    191c:	98 37       	cpi	r25, 0x78	; 120
    191e:	09 f0       	breq	.+2      	; 0x1922 <vfprintf+0x5ce>
    1920:	ac c0       	rjmp	.+344    	; 0x1a7a <vfprintf+0x726>
    1922:	04 c0       	rjmp	.+8      	; 0x192c <vfprintf+0x5d8>
    1924:	28 e0       	ldi	r18, 0x08	; 8
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	0a c0       	rjmp	.+20     	; 0x193e <vfprintf+0x5ea>
    192a:	10 61       	ori	r17, 0x10	; 16
    192c:	14 fd       	sbrc	r17, 4
    192e:	14 60       	ori	r17, 0x04	; 4
    1930:	20 e1       	ldi	r18, 0x10	; 16
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	04 c0       	rjmp	.+8      	; 0x193e <vfprintf+0x5ea>
    1936:	14 fd       	sbrc	r17, 4
    1938:	16 60       	ori	r17, 0x06	; 6
    193a:	20 e1       	ldi	r18, 0x10	; 16
    193c:	32 e0       	ldi	r19, 0x02	; 2
    193e:	17 ff       	sbrs	r17, 7
    1940:	08 c0       	rjmp	.+16     	; 0x1952 <vfprintf+0x5fe>
    1942:	f6 01       	movw	r30, r12
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	93 81       	ldd	r25, Z+3	; 0x03
    194c:	44 e0       	ldi	r20, 0x04	; 4
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	08 c0       	rjmp	.+16     	; 0x1962 <vfprintf+0x60e>
    1952:	f6 01       	movw	r30, r12
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	bc 01       	movw	r22, r24
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	42 e0       	ldi	r20, 0x02	; 2
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	c4 0e       	add	r12, r20
    1964:	d5 1e       	adc	r13, r21
    1966:	ae 01       	movw	r20, r28
    1968:	4f 5f       	subi	r20, 0xFF	; 255
    196a:	5f 4f       	sbci	r21, 0xFF	; 255
    196c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__ultoa_invert>
    1970:	e8 2e       	mov	r14, r24
    1972:	58 89       	ldd	r21, Y+16	; 0x10
    1974:	e5 1a       	sub	r14, r21
    1976:	8f e7       	ldi	r24, 0x7F	; 127
    1978:	f8 2e       	mov	r15, r24
    197a:	f1 22       	and	r15, r17
    197c:	f6 fe       	sbrs	r15, 6
    197e:	0b c0       	rjmp	.+22     	; 0x1996 <vfprintf+0x642>
    1980:	8e ef       	ldi	r24, 0xFE	; 254
    1982:	f8 22       	and	r15, r24
    1984:	e9 14       	cp	r14, r9
    1986:	38 f4       	brcc	.+14     	; 0x1996 <vfprintf+0x642>
    1988:	f4 fe       	sbrs	r15, 4
    198a:	07 c0       	rjmp	.+14     	; 0x199a <vfprintf+0x646>
    198c:	f2 fc       	sbrc	r15, 2
    198e:	05 c0       	rjmp	.+10     	; 0x199a <vfprintf+0x646>
    1990:	9f ee       	ldi	r25, 0xEF	; 239
    1992:	f9 22       	and	r15, r25
    1994:	02 c0       	rjmp	.+4      	; 0x199a <vfprintf+0x646>
    1996:	1e 2d       	mov	r17, r14
    1998:	01 c0       	rjmp	.+2      	; 0x199c <vfprintf+0x648>
    199a:	19 2d       	mov	r17, r9
    199c:	f4 fe       	sbrs	r15, 4
    199e:	0d c0       	rjmp	.+26     	; 0x19ba <vfprintf+0x666>
    19a0:	fe 01       	movw	r30, r28
    19a2:	ee 0d       	add	r30, r14
    19a4:	f1 1d       	adc	r31, r1
    19a6:	80 81       	ld	r24, Z
    19a8:	80 33       	cpi	r24, 0x30	; 48
    19aa:	19 f4       	brne	.+6      	; 0x19b2 <vfprintf+0x65e>
    19ac:	e9 ee       	ldi	r30, 0xE9	; 233
    19ae:	fe 22       	and	r15, r30
    19b0:	08 c0       	rjmp	.+16     	; 0x19c2 <vfprintf+0x66e>
    19b2:	1f 5f       	subi	r17, 0xFF	; 255
    19b4:	f2 fe       	sbrs	r15, 2
    19b6:	05 c0       	rjmp	.+10     	; 0x19c2 <vfprintf+0x66e>
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <vfprintf+0x66c>
    19ba:	8f 2d       	mov	r24, r15
    19bc:	86 78       	andi	r24, 0x86	; 134
    19be:	09 f0       	breq	.+2      	; 0x19c2 <vfprintf+0x66e>
    19c0:	1f 5f       	subi	r17, 0xFF	; 255
    19c2:	0f 2d       	mov	r16, r15
    19c4:	f3 fc       	sbrc	r15, 3
    19c6:	14 c0       	rjmp	.+40     	; 0x19f0 <vfprintf+0x69c>
    19c8:	f0 fe       	sbrs	r15, 0
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <vfprintf+0x696>
    19cc:	18 15       	cp	r17, r8
    19ce:	10 f0       	brcs	.+4      	; 0x19d4 <vfprintf+0x680>
    19d0:	9e 2c       	mov	r9, r14
    19d2:	0b c0       	rjmp	.+22     	; 0x19ea <vfprintf+0x696>
    19d4:	9e 2c       	mov	r9, r14
    19d6:	98 0c       	add	r9, r8
    19d8:	91 1a       	sub	r9, r17
    19da:	18 2d       	mov	r17, r8
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <vfprintf+0x696>
    19de:	80 e2       	ldi	r24, 0x20	; 32
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	b3 01       	movw	r22, r6
    19e4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    19e8:	1f 5f       	subi	r17, 0xFF	; 255
    19ea:	18 15       	cp	r17, r8
    19ec:	c0 f3       	brcs	.-16     	; 0x19de <vfprintf+0x68a>
    19ee:	04 c0       	rjmp	.+8      	; 0x19f8 <vfprintf+0x6a4>
    19f0:	18 15       	cp	r17, r8
    19f2:	10 f4       	brcc	.+4      	; 0x19f8 <vfprintf+0x6a4>
    19f4:	81 1a       	sub	r8, r17
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <vfprintf+0x6a6>
    19f8:	88 24       	eor	r8, r8
    19fa:	04 ff       	sbrs	r16, 4
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <vfprintf+0x6c8>
    19fe:	80 e3       	ldi	r24, 0x30	; 48
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	b3 01       	movw	r22, r6
    1a04:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1a08:	02 ff       	sbrs	r16, 2
    1a0a:	1d c0       	rjmp	.+58     	; 0x1a46 <vfprintf+0x6f2>
    1a0c:	01 fd       	sbrc	r16, 1
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <vfprintf+0x6c2>
    1a10:	88 e7       	ldi	r24, 0x78	; 120
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e c0       	rjmp	.+28     	; 0x1a32 <vfprintf+0x6de>
    1a16:	88 e5       	ldi	r24, 0x58	; 88
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0b c0       	rjmp	.+22     	; 0x1a32 <vfprintf+0x6de>
    1a1c:	80 2f       	mov	r24, r16
    1a1e:	86 78       	andi	r24, 0x86	; 134
    1a20:	91 f0       	breq	.+36     	; 0x1a46 <vfprintf+0x6f2>
    1a22:	01 ff       	sbrs	r16, 1
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <vfprintf+0x6d6>
    1a26:	8b e2       	ldi	r24, 0x2B	; 43
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <vfprintf+0x6d8>
    1a2a:	80 e2       	ldi	r24, 0x20	; 32
    1a2c:	f7 fc       	sbrc	r15, 7
    1a2e:	8d e2       	ldi	r24, 0x2D	; 45
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	b3 01       	movw	r22, r6
    1a34:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1a38:	06 c0       	rjmp	.+12     	; 0x1a46 <vfprintf+0x6f2>
    1a3a:	80 e3       	ldi	r24, 0x30	; 48
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	b3 01       	movw	r22, r6
    1a40:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1a44:	9a 94       	dec	r9
    1a46:	e9 14       	cp	r14, r9
    1a48:	c0 f3       	brcs	.-16     	; 0x1a3a <vfprintf+0x6e6>
    1a4a:	ea 94       	dec	r14
    1a4c:	e1 e0       	ldi	r30, 0x01	; 1
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	ec 0f       	add	r30, r28
    1a52:	fd 1f       	adc	r31, r29
    1a54:	ee 0d       	add	r30, r14
    1a56:	f1 1d       	adc	r31, r1
    1a58:	80 81       	ld	r24, Z
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	b3 01       	movw	r22, r6
    1a5e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1a62:	ee 20       	and	r14, r14
    1a64:	91 f7       	brne	.-28     	; 0x1a4a <vfprintf+0x6f6>
    1a66:	06 c0       	rjmp	.+12     	; 0x1a74 <vfprintf+0x720>
    1a68:	80 e2       	ldi	r24, 0x20	; 32
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	b3 01       	movw	r22, r6
    1a6e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1a72:	8a 94       	dec	r8
    1a74:	88 20       	and	r8, r8
    1a76:	c1 f7       	brne	.-16     	; 0x1a68 <vfprintf+0x714>
    1a78:	99 cc       	rjmp	.-1742   	; 0x13ac <vfprintf+0x58>
    1a7a:	f3 01       	movw	r30, r6
    1a7c:	66 81       	ldd	r22, Z+6	; 0x06
    1a7e:	77 81       	ldd	r23, Z+7	; 0x07
    1a80:	cb 01       	movw	r24, r22
    1a82:	61 96       	adiw	r28, 0x11	; 17
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	ff 90       	pop	r15
    1a98:	ef 90       	pop	r14
    1a9a:	df 90       	pop	r13
    1a9c:	cf 90       	pop	r12
    1a9e:	bf 90       	pop	r11
    1aa0:	af 90       	pop	r10
    1aa2:	9f 90       	pop	r9
    1aa4:	8f 90       	pop	r8
    1aa6:	7f 90       	pop	r7
    1aa8:	6f 90       	pop	r6
    1aaa:	5f 90       	pop	r5
    1aac:	4f 90       	pop	r4
    1aae:	3f 90       	pop	r3
    1ab0:	2f 90       	pop	r2
    1ab2:	08 95       	ret

00001ab4 <__udivmodhi4>:
    1ab4:	aa 1b       	sub	r26, r26
    1ab6:	bb 1b       	sub	r27, r27
    1ab8:	51 e1       	ldi	r21, 0x11	; 17
    1aba:	07 c0       	rjmp	.+14     	; 0x1aca <__udivmodhi4_ep>

00001abc <__udivmodhi4_loop>:
    1abc:	aa 1f       	adc	r26, r26
    1abe:	bb 1f       	adc	r27, r27
    1ac0:	a6 17       	cp	r26, r22
    1ac2:	b7 07       	cpc	r27, r23
    1ac4:	10 f0       	brcs	.+4      	; 0x1aca <__udivmodhi4_ep>
    1ac6:	a6 1b       	sub	r26, r22
    1ac8:	b7 0b       	sbc	r27, r23

00001aca <__udivmodhi4_ep>:
    1aca:	88 1f       	adc	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	5a 95       	dec	r21
    1ad0:	a9 f7       	brne	.-22     	; 0x1abc <__udivmodhi4_loop>
    1ad2:	80 95       	com	r24
    1ad4:	90 95       	com	r25
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	08 95       	ret

00001adc <__divmodhi4>:
    1adc:	97 fb       	bst	r25, 7
    1ade:	09 2e       	mov	r0, r25
    1ae0:	07 26       	eor	r0, r23
    1ae2:	0a d0       	rcall	.+20     	; 0x1af8 <__divmodhi4_neg1>
    1ae4:	77 fd       	sbrc	r23, 7
    1ae6:	04 d0       	rcall	.+8      	; 0x1af0 <__divmodhi4_neg2>
    1ae8:	e5 df       	rcall	.-54     	; 0x1ab4 <__udivmodhi4>
    1aea:	06 d0       	rcall	.+12     	; 0x1af8 <__divmodhi4_neg1>
    1aec:	00 20       	and	r0, r0
    1aee:	1a f4       	brpl	.+6      	; 0x1af6 <__divmodhi4_exit>

00001af0 <__divmodhi4_neg2>:
    1af0:	70 95       	com	r23
    1af2:	61 95       	neg	r22
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255

00001af6 <__divmodhi4_exit>:
    1af6:	08 95       	ret

00001af8 <__divmodhi4_neg1>:
    1af8:	f6 f7       	brtc	.-4      	; 0x1af6 <__divmodhi4_exit>
    1afa:	90 95       	com	r25
    1afc:	81 95       	neg	r24
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	08 95       	ret

00001b02 <__ftoa_engine>:
    1b02:	28 30       	cpi	r18, 0x08	; 8
    1b04:	08 f0       	brcs	.+2      	; 0x1b08 <__ftoa_engine+0x6>
    1b06:	27 e0       	ldi	r18, 0x07	; 7
    1b08:	33 27       	eor	r19, r19
    1b0a:	da 01       	movw	r26, r20
    1b0c:	99 0f       	add	r25, r25
    1b0e:	31 1d       	adc	r19, r1
    1b10:	87 fd       	sbrc	r24, 7
    1b12:	91 60       	ori	r25, 0x01	; 1
    1b14:	00 96       	adiw	r24, 0x00	; 0
    1b16:	61 05       	cpc	r22, r1
    1b18:	71 05       	cpc	r23, r1
    1b1a:	39 f4       	brne	.+14     	; 0x1b2a <__ftoa_engine+0x28>
    1b1c:	32 60       	ori	r19, 0x02	; 2
    1b1e:	2e 5f       	subi	r18, 0xFE	; 254
    1b20:	3d 93       	st	X+, r19
    1b22:	30 e3       	ldi	r19, 0x30	; 48
    1b24:	2a 95       	dec	r18
    1b26:	e1 f7       	brne	.-8      	; 0x1b20 <__ftoa_engine+0x1e>
    1b28:	08 95       	ret
    1b2a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b2c:	30 f0       	brcs	.+12     	; 0x1b3a <__ftoa_engine+0x38>
    1b2e:	80 38       	cpi	r24, 0x80	; 128
    1b30:	71 05       	cpc	r23, r1
    1b32:	61 05       	cpc	r22, r1
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <__ftoa_engine+0x36>
    1b36:	3c 5f       	subi	r19, 0xFC	; 252
    1b38:	3c 5f       	subi	r19, 0xFC	; 252
    1b3a:	3d 93       	st	X+, r19
    1b3c:	91 30       	cpi	r25, 0x01	; 1
    1b3e:	08 f0       	brcs	.+2      	; 0x1b42 <__ftoa_engine+0x40>
    1b40:	80 68       	ori	r24, 0x80	; 128
    1b42:	91 1d       	adc	r25, r1
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	1f 93       	push	r17
    1b4a:	0f 93       	push	r16
    1b4c:	ff 92       	push	r15
    1b4e:	ef 92       	push	r14
    1b50:	19 2f       	mov	r17, r25
    1b52:	98 7f       	andi	r25, 0xF8	; 248
    1b54:	96 95       	lsr	r25
    1b56:	e9 2f       	mov	r30, r25
    1b58:	96 95       	lsr	r25
    1b5a:	96 95       	lsr	r25
    1b5c:	e9 0f       	add	r30, r25
    1b5e:	ff 27       	eor	r31, r31
    1b60:	e3 5c       	subi	r30, 0xC3	; 195
    1b62:	fe 4f       	sbci	r31, 0xFE	; 254
    1b64:	99 27       	eor	r25, r25
    1b66:	33 27       	eor	r19, r19
    1b68:	ee 24       	eor	r14, r14
    1b6a:	ff 24       	eor	r15, r15
    1b6c:	a7 01       	movw	r20, r14
    1b6e:	e7 01       	movw	r28, r14
    1b70:	05 90       	lpm	r0, Z+
    1b72:	08 94       	sec
    1b74:	07 94       	ror	r0
    1b76:	28 f4       	brcc	.+10     	; 0x1b82 <__ftoa_engine+0x80>
    1b78:	36 0f       	add	r19, r22
    1b7a:	e7 1e       	adc	r14, r23
    1b7c:	f8 1e       	adc	r15, r24
    1b7e:	49 1f       	adc	r20, r25
    1b80:	51 1d       	adc	r21, r1
    1b82:	66 0f       	add	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	06 94       	lsr	r0
    1b8c:	a1 f7       	brne	.-24     	; 0x1b76 <__ftoa_engine+0x74>
    1b8e:	05 90       	lpm	r0, Z+
    1b90:	07 94       	ror	r0
    1b92:	28 f4       	brcc	.+10     	; 0x1b9e <__ftoa_engine+0x9c>
    1b94:	e7 0e       	add	r14, r23
    1b96:	f8 1e       	adc	r15, r24
    1b98:	49 1f       	adc	r20, r25
    1b9a:	56 1f       	adc	r21, r22
    1b9c:	c1 1d       	adc	r28, r1
    1b9e:	77 0f       	add	r23, r23
    1ba0:	88 1f       	adc	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	66 1f       	adc	r22, r22
    1ba6:	06 94       	lsr	r0
    1ba8:	a1 f7       	brne	.-24     	; 0x1b92 <__ftoa_engine+0x90>
    1baa:	05 90       	lpm	r0, Z+
    1bac:	07 94       	ror	r0
    1bae:	28 f4       	brcc	.+10     	; 0x1bba <__ftoa_engine+0xb8>
    1bb0:	f8 0e       	add	r15, r24
    1bb2:	49 1f       	adc	r20, r25
    1bb4:	56 1f       	adc	r21, r22
    1bb6:	c7 1f       	adc	r28, r23
    1bb8:	d1 1d       	adc	r29, r1
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	66 1f       	adc	r22, r22
    1bc0:	77 1f       	adc	r23, r23
    1bc2:	06 94       	lsr	r0
    1bc4:	a1 f7       	brne	.-24     	; 0x1bae <__ftoa_engine+0xac>
    1bc6:	05 90       	lpm	r0, Z+
    1bc8:	07 94       	ror	r0
    1bca:	20 f4       	brcc	.+8      	; 0x1bd4 <__ftoa_engine+0xd2>
    1bcc:	49 0f       	add	r20, r25
    1bce:	56 1f       	adc	r21, r22
    1bd0:	c7 1f       	adc	r28, r23
    1bd2:	d8 1f       	adc	r29, r24
    1bd4:	99 0f       	add	r25, r25
    1bd6:	66 1f       	adc	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	06 94       	lsr	r0
    1bde:	a9 f7       	brne	.-22     	; 0x1bca <__ftoa_engine+0xc8>
    1be0:	84 91       	lpm	r24, Z+
    1be2:	10 95       	com	r17
    1be4:	17 70       	andi	r17, 0x07	; 7
    1be6:	41 f0       	breq	.+16     	; 0x1bf8 <__ftoa_engine+0xf6>
    1be8:	d6 95       	lsr	r29
    1bea:	c7 95       	ror	r28
    1bec:	57 95       	ror	r21
    1bee:	47 95       	ror	r20
    1bf0:	f7 94       	ror	r15
    1bf2:	e7 94       	ror	r14
    1bf4:	1a 95       	dec	r17
    1bf6:	c1 f7       	brne	.-16     	; 0x1be8 <__ftoa_engine+0xe6>
    1bf8:	e3 ee       	ldi	r30, 0xE3	; 227
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	68 94       	set
    1bfe:	15 90       	lpm	r1, Z+
    1c00:	15 91       	lpm	r17, Z+
    1c02:	35 91       	lpm	r19, Z+
    1c04:	65 91       	lpm	r22, Z+
    1c06:	95 91       	lpm	r25, Z+
    1c08:	05 90       	lpm	r0, Z+
    1c0a:	7f e2       	ldi	r23, 0x2F	; 47
    1c0c:	73 95       	inc	r23
    1c0e:	e1 18       	sub	r14, r1
    1c10:	f1 0a       	sbc	r15, r17
    1c12:	43 0b       	sbc	r20, r19
    1c14:	56 0b       	sbc	r21, r22
    1c16:	c9 0b       	sbc	r28, r25
    1c18:	d0 09       	sbc	r29, r0
    1c1a:	c0 f7       	brcc	.-16     	; 0x1c0c <__ftoa_engine+0x10a>
    1c1c:	e1 0c       	add	r14, r1
    1c1e:	f1 1e       	adc	r15, r17
    1c20:	43 1f       	adc	r20, r19
    1c22:	56 1f       	adc	r21, r22
    1c24:	c9 1f       	adc	r28, r25
    1c26:	d0 1d       	adc	r29, r0
    1c28:	7e f4       	brtc	.+30     	; 0x1c48 <__ftoa_engine+0x146>
    1c2a:	70 33       	cpi	r23, 0x30	; 48
    1c2c:	11 f4       	brne	.+4      	; 0x1c32 <__ftoa_engine+0x130>
    1c2e:	8a 95       	dec	r24
    1c30:	e6 cf       	rjmp	.-52     	; 0x1bfe <__ftoa_engine+0xfc>
    1c32:	e8 94       	clt
    1c34:	01 50       	subi	r16, 0x01	; 1
    1c36:	30 f0       	brcs	.+12     	; 0x1c44 <__ftoa_engine+0x142>
    1c38:	08 0f       	add	r16, r24
    1c3a:	0a f4       	brpl	.+2      	; 0x1c3e <__ftoa_engine+0x13c>
    1c3c:	00 27       	eor	r16, r16
    1c3e:	02 17       	cp	r16, r18
    1c40:	08 f4       	brcc	.+2      	; 0x1c44 <__ftoa_engine+0x142>
    1c42:	20 2f       	mov	r18, r16
    1c44:	23 95       	inc	r18
    1c46:	02 2f       	mov	r16, r18
    1c48:	7a 33       	cpi	r23, 0x3A	; 58
    1c4a:	28 f0       	brcs	.+10     	; 0x1c56 <__ftoa_engine+0x154>
    1c4c:	79 e3       	ldi	r23, 0x39	; 57
    1c4e:	7d 93       	st	X+, r23
    1c50:	2a 95       	dec	r18
    1c52:	e9 f7       	brne	.-6      	; 0x1c4e <__ftoa_engine+0x14c>
    1c54:	10 c0       	rjmp	.+32     	; 0x1c76 <__ftoa_engine+0x174>
    1c56:	7d 93       	st	X+, r23
    1c58:	2a 95       	dec	r18
    1c5a:	89 f6       	brne	.-94     	; 0x1bfe <__ftoa_engine+0xfc>
    1c5c:	06 94       	lsr	r0
    1c5e:	97 95       	ror	r25
    1c60:	67 95       	ror	r22
    1c62:	37 95       	ror	r19
    1c64:	17 95       	ror	r17
    1c66:	17 94       	ror	r1
    1c68:	e1 18       	sub	r14, r1
    1c6a:	f1 0a       	sbc	r15, r17
    1c6c:	43 0b       	sbc	r20, r19
    1c6e:	56 0b       	sbc	r21, r22
    1c70:	c9 0b       	sbc	r28, r25
    1c72:	d0 09       	sbc	r29, r0
    1c74:	98 f0       	brcs	.+38     	; 0x1c9c <__ftoa_engine+0x19a>
    1c76:	23 95       	inc	r18
    1c78:	7e 91       	ld	r23, -X
    1c7a:	73 95       	inc	r23
    1c7c:	7a 33       	cpi	r23, 0x3A	; 58
    1c7e:	08 f0       	brcs	.+2      	; 0x1c82 <__ftoa_engine+0x180>
    1c80:	70 e3       	ldi	r23, 0x30	; 48
    1c82:	7c 93       	st	X, r23
    1c84:	20 13       	cpse	r18, r16
    1c86:	b8 f7       	brcc	.-18     	; 0x1c76 <__ftoa_engine+0x174>
    1c88:	7e 91       	ld	r23, -X
    1c8a:	70 61       	ori	r23, 0x10	; 16
    1c8c:	7d 93       	st	X+, r23
    1c8e:	30 f0       	brcs	.+12     	; 0x1c9c <__ftoa_engine+0x19a>
    1c90:	83 95       	inc	r24
    1c92:	71 e3       	ldi	r23, 0x31	; 49
    1c94:	7d 93       	st	X+, r23
    1c96:	70 e3       	ldi	r23, 0x30	; 48
    1c98:	2a 95       	dec	r18
    1c9a:	e1 f7       	brne	.-8      	; 0x1c94 <__ftoa_engine+0x192>
    1c9c:	11 24       	eor	r1, r1
    1c9e:	ef 90       	pop	r14
    1ca0:	ff 90       	pop	r15
    1ca2:	0f 91       	pop	r16
    1ca4:	1f 91       	pop	r17
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	99 27       	eor	r25, r25
    1cac:	87 fd       	sbrc	r24, 7
    1cae:	90 95       	com	r25
    1cb0:	08 95       	ret

00001cb2 <strnlen_P>:
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	05 90       	lpm	r0, Z+
    1cb6:	61 50       	subi	r22, 0x01	; 1
    1cb8:	70 40       	sbci	r23, 0x00	; 0
    1cba:	01 10       	cpse	r0, r1
    1cbc:	d8 f7       	brcc	.-10     	; 0x1cb4 <strnlen_P+0x2>
    1cbe:	80 95       	com	r24
    1cc0:	90 95       	com	r25
    1cc2:	8e 0f       	add	r24, r30
    1cc4:	9f 1f       	adc	r25, r31
    1cc6:	08 95       	ret

00001cc8 <strnlen>:
    1cc8:	fc 01       	movw	r30, r24
    1cca:	61 50       	subi	r22, 0x01	; 1
    1ccc:	70 40       	sbci	r23, 0x00	; 0
    1cce:	01 90       	ld	r0, Z+
    1cd0:	01 10       	cpse	r0, r1
    1cd2:	d8 f7       	brcc	.-10     	; 0x1cca <strnlen+0x2>
    1cd4:	80 95       	com	r24
    1cd6:	90 95       	com	r25
    1cd8:	8e 0f       	add	r24, r30
    1cda:	9f 1f       	adc	r25, r31
    1cdc:	08 95       	ret

00001cde <fprintf>:
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	9e 01       	movw	r18, r28
    1ce8:	27 5f       	subi	r18, 0xF7	; 247
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf2:	78 85       	ldd	r23, Y+8	; 0x08
    1cf4:	a9 01       	movw	r20, r18
    1cf6:	0e 94 aa 09 	call	0x1354	; 0x1354 <vfprintf>
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <fputc>:
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	8c 01       	movw	r16, r24
    1d0a:	eb 01       	movw	r28, r22
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	81 ff       	sbrs	r24, 1
    1d10:	1b c0       	rjmp	.+54     	; 0x1d48 <fputc+0x48>
    1d12:	82 ff       	sbrs	r24, 2
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <fputc+0x30>
    1d16:	2e 81       	ldd	r18, Y+6	; 0x06
    1d18:	3f 81       	ldd	r19, Y+7	; 0x07
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	28 17       	cp	r18, r24
    1d20:	39 07       	cpc	r19, r25
    1d22:	64 f4       	brge	.+24     	; 0x1d3c <fputc+0x3c>
    1d24:	e8 81       	ld	r30, Y
    1d26:	f9 81       	ldd	r31, Y+1	; 0x01
    1d28:	01 93       	st	Z+, r16
    1d2a:	f9 83       	std	Y+1, r31	; 0x01
    1d2c:	e8 83       	st	Y, r30
    1d2e:	06 c0       	rjmp	.+12     	; 0x1d3c <fputc+0x3c>
    1d30:	e8 85       	ldd	r30, Y+8	; 0x08
    1d32:	f9 85       	ldd	r31, Y+9	; 0x09
    1d34:	80 2f       	mov	r24, r16
    1d36:	09 95       	icall
    1d38:	89 2b       	or	r24, r25
    1d3a:	31 f4       	brne	.+12     	; 0x1d48 <fputc+0x48>
    1d3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	9f 83       	std	Y+7, r25	; 0x07
    1d44:	8e 83       	std	Y+6, r24	; 0x06
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <fputc+0x4c>
    1d48:	0f ef       	ldi	r16, 0xFF	; 255
    1d4a:	1f ef       	ldi	r17, 0xFF	; 255
    1d4c:	c8 01       	movw	r24, r16
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	08 95       	ret

00001d58 <fputs>:
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	7c 01       	movw	r14, r24
    1d66:	8b 01       	movw	r16, r22
    1d68:	db 01       	movw	r26, r22
    1d6a:	13 96       	adiw	r26, 0x03	; 3
    1d6c:	8c 91       	ld	r24, X
    1d6e:	81 fd       	sbrc	r24, 1
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <fputs+0x20>
    1d72:	cf ef       	ldi	r28, 0xFF	; 255
    1d74:	df ef       	ldi	r29, 0xFF	; 255
    1d76:	13 c0       	rjmp	.+38     	; 0x1d9e <fputs+0x46>
    1d78:	c0 e0       	ldi	r28, 0x00	; 0
    1d7a:	d0 e0       	ldi	r29, 0x00	; 0
    1d7c:	0b c0       	rjmp	.+22     	; 0x1d94 <fputs+0x3c>
    1d7e:	d8 01       	movw	r26, r16
    1d80:	18 96       	adiw	r26, 0x08	; 8
    1d82:	ed 91       	ld	r30, X+
    1d84:	fc 91       	ld	r31, X
    1d86:	19 97       	sbiw	r26, 0x09	; 9
    1d88:	b8 01       	movw	r22, r16
    1d8a:	09 95       	icall
    1d8c:	89 2b       	or	r24, r25
    1d8e:	11 f0       	breq	.+4      	; 0x1d94 <fputs+0x3c>
    1d90:	cf ef       	ldi	r28, 0xFF	; 255
    1d92:	df ef       	ldi	r29, 0xFF	; 255
    1d94:	f7 01       	movw	r30, r14
    1d96:	81 91       	ld	r24, Z+
    1d98:	7f 01       	movw	r14, r30
    1d9a:	88 23       	and	r24, r24
    1d9c:	81 f7       	brne	.-32     	; 0x1d7e <fputs+0x26>
    1d9e:	ce 01       	movw	r24, r28
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	08 95       	ret

00001dae <fscanf>:
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	9e 01       	movw	r18, r28
    1db8:	27 5f       	subi	r18, 0xF7	; 247
    1dba:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	a9 01       	movw	r20, r18
    1dc6:	0e 94 26 11 	call	0x224c	; 0x224c <vfscanf>
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <sprintf>:
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	2e 97       	sbiw	r28, 0x0e	; 14
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	0d 89       	ldd	r16, Y+21	; 0x15
    1dea:	1e 89       	ldd	r17, Y+22	; 0x16
    1dec:	86 e0       	ldi	r24, 0x06	; 6
    1dee:	8c 83       	std	Y+4, r24	; 0x04
    1df0:	1a 83       	std	Y+2, r17	; 0x02
    1df2:	09 83       	std	Y+1, r16	; 0x01
    1df4:	8f ef       	ldi	r24, 0xFF	; 255
    1df6:	9f e7       	ldi	r25, 0x7F	; 127
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	9e 01       	movw	r18, r28
    1dfe:	27 5e       	subi	r18, 0xE7	; 231
    1e00:	3f 4f       	sbci	r19, 0xFF	; 255
    1e02:	ce 01       	movw	r24, r28
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	6f 89       	ldd	r22, Y+23	; 0x17
    1e08:	78 8d       	ldd	r23, Y+24	; 0x18
    1e0a:	a9 01       	movw	r20, r18
    1e0c:	0e 94 aa 09 	call	0x1354	; 0x1354 <vfprintf>
    1e10:	2f 81       	ldd	r18, Y+7	; 0x07
    1e12:	38 85       	ldd	r19, Y+8	; 0x08
    1e14:	02 0f       	add	r16, r18
    1e16:	13 1f       	adc	r17, r19
    1e18:	f8 01       	movw	r30, r16
    1e1a:	10 82       	st	Z, r1
    1e1c:	2e 96       	adiw	r28, 0x0e	; 14
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	1f 91       	pop	r17
    1e2e:	0f 91       	pop	r16
    1e30:	08 95       	ret

00001e32 <__ultoa_invert>:
    1e32:	fa 01       	movw	r30, r20
    1e34:	aa 27       	eor	r26, r26
    1e36:	28 30       	cpi	r18, 0x08	; 8
    1e38:	51 f1       	breq	.+84     	; 0x1e8e <__ultoa_invert+0x5c>
    1e3a:	20 31       	cpi	r18, 0x10	; 16
    1e3c:	81 f1       	breq	.+96     	; 0x1e9e <__ultoa_invert+0x6c>
    1e3e:	e8 94       	clt
    1e40:	6f 93       	push	r22
    1e42:	6e 7f       	andi	r22, 0xFE	; 254
    1e44:	6e 5f       	subi	r22, 0xFE	; 254
    1e46:	7f 4f       	sbci	r23, 0xFF	; 255
    1e48:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	af 4f       	sbci	r26, 0xFF	; 255
    1e4e:	b1 e0       	ldi	r27, 0x01	; 1
    1e50:	3e d0       	rcall	.+124    	; 0x1ece <__ultoa_invert+0x9c>
    1e52:	b4 e0       	ldi	r27, 0x04	; 4
    1e54:	3c d0       	rcall	.+120    	; 0x1ece <__ultoa_invert+0x9c>
    1e56:	67 0f       	add	r22, r23
    1e58:	78 1f       	adc	r23, r24
    1e5a:	89 1f       	adc	r24, r25
    1e5c:	9a 1f       	adc	r25, r26
    1e5e:	a1 1d       	adc	r26, r1
    1e60:	68 0f       	add	r22, r24
    1e62:	79 1f       	adc	r23, r25
    1e64:	8a 1f       	adc	r24, r26
    1e66:	91 1d       	adc	r25, r1
    1e68:	a1 1d       	adc	r26, r1
    1e6a:	6a 0f       	add	r22, r26
    1e6c:	71 1d       	adc	r23, r1
    1e6e:	81 1d       	adc	r24, r1
    1e70:	91 1d       	adc	r25, r1
    1e72:	a1 1d       	adc	r26, r1
    1e74:	20 d0       	rcall	.+64     	; 0x1eb6 <__ultoa_invert+0x84>
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <__ultoa_invert+0x48>
    1e78:	68 94       	set
    1e7a:	3f 91       	pop	r19
    1e7c:	2a e0       	ldi	r18, 0x0A	; 10
    1e7e:	26 9f       	mul	r18, r22
    1e80:	11 24       	eor	r1, r1
    1e82:	30 19       	sub	r19, r0
    1e84:	30 5d       	subi	r19, 0xD0	; 208
    1e86:	31 93       	st	Z+, r19
    1e88:	de f6       	brtc	.-74     	; 0x1e40 <__ultoa_invert+0xe>
    1e8a:	cf 01       	movw	r24, r30
    1e8c:	08 95       	ret
    1e8e:	46 2f       	mov	r20, r22
    1e90:	47 70       	andi	r20, 0x07	; 7
    1e92:	40 5d       	subi	r20, 0xD0	; 208
    1e94:	41 93       	st	Z+, r20
    1e96:	b3 e0       	ldi	r27, 0x03	; 3
    1e98:	0f d0       	rcall	.+30     	; 0x1eb8 <__ultoa_invert+0x86>
    1e9a:	c9 f7       	brne	.-14     	; 0x1e8e <__ultoa_invert+0x5c>
    1e9c:	f6 cf       	rjmp	.-20     	; 0x1e8a <__ultoa_invert+0x58>
    1e9e:	46 2f       	mov	r20, r22
    1ea0:	4f 70       	andi	r20, 0x0F	; 15
    1ea2:	40 5d       	subi	r20, 0xD0	; 208
    1ea4:	4a 33       	cpi	r20, 0x3A	; 58
    1ea6:	18 f0       	brcs	.+6      	; 0x1eae <__ultoa_invert+0x7c>
    1ea8:	49 5d       	subi	r20, 0xD9	; 217
    1eaa:	31 fd       	sbrc	r19, 1
    1eac:	40 52       	subi	r20, 0x20	; 32
    1eae:	41 93       	st	Z+, r20
    1eb0:	02 d0       	rcall	.+4      	; 0x1eb6 <__ultoa_invert+0x84>
    1eb2:	a9 f7       	brne	.-22     	; 0x1e9e <__ultoa_invert+0x6c>
    1eb4:	ea cf       	rjmp	.-44     	; 0x1e8a <__ultoa_invert+0x58>
    1eb6:	b4 e0       	ldi	r27, 0x04	; 4
    1eb8:	a6 95       	lsr	r26
    1eba:	97 95       	ror	r25
    1ebc:	87 95       	ror	r24
    1ebe:	77 95       	ror	r23
    1ec0:	67 95       	ror	r22
    1ec2:	ba 95       	dec	r27
    1ec4:	c9 f7       	brne	.-14     	; 0x1eb8 <__ultoa_invert+0x86>
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	61 05       	cpc	r22, r1
    1eca:	71 05       	cpc	r23, r1
    1ecc:	08 95       	ret
    1ece:	9b 01       	movw	r18, r22
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	0a 2e       	mov	r0, r26
    1ed4:	06 94       	lsr	r0
    1ed6:	57 95       	ror	r21
    1ed8:	47 95       	ror	r20
    1eda:	37 95       	ror	r19
    1edc:	27 95       	ror	r18
    1ede:	ba 95       	dec	r27
    1ee0:	c9 f7       	brne	.-14     	; 0x1ed4 <__ultoa_invert+0xa2>
    1ee2:	62 0f       	add	r22, r18
    1ee4:	73 1f       	adc	r23, r19
    1ee6:	84 1f       	adc	r24, r20
    1ee8:	95 1f       	adc	r25, r21
    1eea:	a0 1d       	adc	r26, r0
    1eec:	08 95       	ret

00001eee <putval>:
    1eee:	fc 01       	movw	r30, r24
    1ef0:	20 fd       	sbrc	r18, 0
    1ef2:	08 c0       	rjmp	.+16     	; 0x1f04 <putval+0x16>
    1ef4:	23 fd       	sbrc	r18, 3
    1ef6:	05 c0       	rjmp	.+10     	; 0x1f02 <putval+0x14>
    1ef8:	22 ff       	sbrs	r18, 2
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <putval+0x12>
    1efc:	73 83       	std	Z+3, r23	; 0x03
    1efe:	62 83       	std	Z+2, r22	; 0x02
    1f00:	51 83       	std	Z+1, r21	; 0x01
    1f02:	40 83       	st	Z, r20
    1f04:	08 95       	ret

00001f06 <mulacc>:
    1f06:	ef 92       	push	r14
    1f08:	ff 92       	push	r15
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	44 ff       	sbrs	r20, 4
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <mulacc+0x10>
    1f12:	33 e0       	ldi	r19, 0x03	; 3
    1f14:	11 c0       	rjmp	.+34     	; 0x1f38 <mulacc+0x32>
    1f16:	46 ff       	sbrs	r20, 6
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <mulacc+0x18>
    1f1a:	34 e0       	ldi	r19, 0x04	; 4
    1f1c:	0d c0       	rjmp	.+26     	; 0x1f38 <mulacc+0x32>
    1f1e:	db 01       	movw	r26, r22
    1f20:	fc 01       	movw	r30, r24
    1f22:	aa 0f       	add	r26, r26
    1f24:	bb 1f       	adc	r27, r27
    1f26:	ee 1f       	adc	r30, r30
    1f28:	ff 1f       	adc	r31, r31
    1f2a:	10 94       	com	r1
    1f2c:	d1 f7       	brne	.-12     	; 0x1f22 <mulacc+0x1c>
    1f2e:	6a 0f       	add	r22, r26
    1f30:	7b 1f       	adc	r23, r27
    1f32:	8e 1f       	adc	r24, r30
    1f34:	9f 1f       	adc	r25, r31
    1f36:	31 e0       	ldi	r19, 0x01	; 1
    1f38:	66 0f       	add	r22, r22
    1f3a:	77 1f       	adc	r23, r23
    1f3c:	88 1f       	adc	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	31 50       	subi	r19, 0x01	; 1
    1f42:	d1 f7       	brne	.-12     	; 0x1f38 <mulacc+0x32>
    1f44:	7b 01       	movw	r14, r22
    1f46:	8c 01       	movw	r16, r24
    1f48:	e2 0e       	add	r14, r18
    1f4a:	f1 1c       	adc	r15, r1
    1f4c:	01 1d       	adc	r16, r1
    1f4e:	11 1d       	adc	r17, r1
    1f50:	a8 01       	movw	r20, r16
    1f52:	97 01       	movw	r18, r14
    1f54:	b7 01       	movw	r22, r14
    1f56:	ca 01       	movw	r24, r20
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	08 95       	ret

00001f62 <skip_spaces>:
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	8c 01       	movw	r16, r24
    1f6c:	c8 01       	movw	r24, r16
    1f6e:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
    1f72:	ec 01       	movw	r28, r24
    1f74:	97 fd       	sbrc	r25, 7
    1f76:	08 c0       	rjmp	.+16     	; 0x1f88 <skip_spaces+0x26>
    1f78:	0e 94 49 12 	call	0x2492	; 0x2492 <isspace>
    1f7c:	89 2b       	or	r24, r25
    1f7e:	b1 f7       	brne	.-20     	; 0x1f6c <skip_spaces+0xa>
    1f80:	ce 01       	movw	r24, r28
    1f82:	b8 01       	movw	r22, r16
    1f84:	0e 94 9e 12 	call	0x253c	; 0x253c <ungetc>
    1f88:	ce 01       	movw	r24, r28
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	08 95       	ret

00001f94 <conv_int>:
    1f94:	af 92       	push	r10
    1f96:	bf 92       	push	r11
    1f98:	cf 92       	push	r12
    1f9a:	df 92       	push	r13
    1f9c:	ef 92       	push	r14
    1f9e:	ff 92       	push	r15
    1fa0:	0f 93       	push	r16
    1fa2:	1f 93       	push	r17
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	ec 01       	movw	r28, r24
    1faa:	c6 2e       	mov	r12, r22
    1fac:	5a 01       	movw	r10, r20
    1fae:	12 2f       	mov	r17, r18
    1fb0:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
    1fb4:	ac 01       	movw	r20, r24
    1fb6:	8b 32       	cpi	r24, 0x2B	; 43
    1fb8:	19 f0       	breq	.+6      	; 0x1fc0 <conv_int+0x2c>
    1fba:	8d 32       	cpi	r24, 0x2D	; 45
    1fbc:	51 f4       	brne	.+20     	; 0x1fd2 <conv_int+0x3e>
    1fbe:	10 68       	ori	r17, 0x80	; 128
    1fc0:	ca 94       	dec	r12
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <conv_int+0x32>
    1fc4:	6d c0       	rjmp	.+218    	; 0x20a0 <conv_int+0x10c>
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
    1fcc:	ac 01       	movw	r20, r24
    1fce:	97 fd       	sbrc	r25, 7
    1fd0:	67 c0       	rjmp	.+206    	; 0x20a0 <conv_int+0x10c>
    1fd2:	6d ef       	ldi	r22, 0xFD	; 253
    1fd4:	d6 2e       	mov	r13, r22
    1fd6:	d1 22       	and	r13, r17
    1fd8:	8d 2d       	mov	r24, r13
    1fda:	80 73       	andi	r24, 0x30	; 48
    1fdc:	01 f5       	brne	.+64     	; 0x201e <conv_int+0x8a>
    1fde:	40 33       	cpi	r20, 0x30	; 48
    1fe0:	f1 f4       	brne	.+60     	; 0x201e <conv_int+0x8a>
    1fe2:	ca 94       	dec	r12
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <conv_int+0x54>
    1fe6:	47 c0       	rjmp	.+142    	; 0x2076 <conv_int+0xe2>
    1fe8:	ce 01       	movw	r24, r28
    1fea:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
    1fee:	ac 01       	movw	r20, r24
    1ff0:	97 fd       	sbrc	r25, 7
    1ff2:	41 c0       	rjmp	.+130    	; 0x2076 <conv_int+0xe2>
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	d8 2a       	or	r13, r24
    1ff8:	48 37       	cpi	r20, 0x78	; 120
    1ffa:	11 f0       	breq	.+4      	; 0x2000 <conv_int+0x6c>
    1ffc:	48 35       	cpi	r20, 0x58	; 88
    1ffe:	59 f4       	brne	.+22     	; 0x2016 <conv_int+0x82>
    2000:	80 e4       	ldi	r24, 0x40	; 64
    2002:	d8 2a       	or	r13, r24
    2004:	ca 94       	dec	r12
    2006:	b9 f1       	breq	.+110    	; 0x2076 <conv_int+0xe2>
    2008:	ce 01       	movw	r24, r28
    200a:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
    200e:	ac 01       	movw	r20, r24
    2010:	99 23       	and	r25, r25
    2012:	2c f4       	brge	.+10     	; 0x201e <conv_int+0x8a>
    2014:	30 c0       	rjmp	.+96     	; 0x2076 <conv_int+0xe2>
    2016:	d6 fc       	sbrc	r13, 6
    2018:	02 c0       	rjmp	.+4      	; 0x201e <conv_int+0x8a>
    201a:	80 e1       	ldi	r24, 0x10	; 16
    201c:	d8 2a       	or	r13, r24
    201e:	ee 24       	eor	r14, r14
    2020:	ff 24       	eor	r15, r15
    2022:	87 01       	movw	r16, r14
    2024:	24 2f       	mov	r18, r20
    2026:	20 53       	subi	r18, 0x30	; 48
    2028:	28 30       	cpi	r18, 0x08	; 8
    202a:	88 f0       	brcs	.+34     	; 0x204e <conv_int+0xba>
    202c:	d4 fc       	sbrc	r13, 4
    202e:	09 c0       	rjmp	.+18     	; 0x2042 <conv_int+0xae>
    2030:	2a 30       	cpi	r18, 0x0A	; 10
    2032:	68 f0       	brcs	.+26     	; 0x204e <conv_int+0xba>
    2034:	d6 fe       	sbrs	r13, 6
    2036:	05 c0       	rjmp	.+10     	; 0x2042 <conv_int+0xae>
    2038:	2f 7d       	andi	r18, 0xDF	; 223
    203a:	82 2f       	mov	r24, r18
    203c:	81 51       	subi	r24, 0x11	; 17
    203e:	86 30       	cpi	r24, 0x06	; 6
    2040:	28 f0       	brcs	.+10     	; 0x204c <conv_int+0xb8>
    2042:	ca 01       	movw	r24, r20
    2044:	be 01       	movw	r22, r28
    2046:	0e 94 9e 12 	call	0x253c	; 0x253c <ungetc>
    204a:	12 c0       	rjmp	.+36     	; 0x2070 <conv_int+0xdc>
    204c:	27 50       	subi	r18, 0x07	; 7
    204e:	c8 01       	movw	r24, r16
    2050:	b7 01       	movw	r22, r14
    2052:	4d 2d       	mov	r20, r13
    2054:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <mulacc>
    2058:	7b 01       	movw	r14, r22
    205a:	8c 01       	movw	r16, r24
    205c:	82 e0       	ldi	r24, 0x02	; 2
    205e:	d8 2a       	or	r13, r24
    2060:	ca 94       	dec	r12
    2062:	61 f0       	breq	.+24     	; 0x207c <conv_int+0xe8>
    2064:	ce 01       	movw	r24, r28
    2066:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
    206a:	ac 01       	movw	r20, r24
    206c:	97 ff       	sbrs	r25, 7
    206e:	da cf       	rjmp	.-76     	; 0x2024 <conv_int+0x90>
    2070:	d1 fc       	sbrc	r13, 1
    2072:	04 c0       	rjmp	.+8      	; 0x207c <conv_int+0xe8>
    2074:	15 c0       	rjmp	.+42     	; 0x20a0 <conv_int+0x10c>
    2076:	ee 24       	eor	r14, r14
    2078:	ff 24       	eor	r15, r15
    207a:	87 01       	movw	r16, r14
    207c:	d7 fe       	sbrs	r13, 7
    207e:	08 c0       	rjmp	.+16     	; 0x2090 <conv_int+0xfc>
    2080:	10 95       	com	r17
    2082:	00 95       	com	r16
    2084:	f0 94       	com	r15
    2086:	e0 94       	com	r14
    2088:	e1 1c       	adc	r14, r1
    208a:	f1 1c       	adc	r15, r1
    208c:	01 1d       	adc	r16, r1
    208e:	11 1d       	adc	r17, r1
    2090:	c5 01       	movw	r24, r10
    2092:	b8 01       	movw	r22, r16
    2094:	a7 01       	movw	r20, r14
    2096:	2d 2d       	mov	r18, r13
    2098:	0e 94 77 0f 	call	0x1eee	; 0x1eee <putval>
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <conv_int+0x10e>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	ff 90       	pop	r15
    20ac:	ef 90       	pop	r14
    20ae:	df 90       	pop	r13
    20b0:	cf 90       	pop	r12
    20b2:	bf 90       	pop	r11
    20b4:	af 90       	pop	r10
    20b6:	08 95       	ret

000020b8 <conv_brk>:
    20b8:	6f 92       	push	r6
    20ba:	7f 92       	push	r7
    20bc:	8f 92       	push	r8
    20be:	9f 92       	push	r9
    20c0:	af 92       	push	r10
    20c2:	bf 92       	push	r11
    20c4:	cf 92       	push	r12
    20c6:	df 92       	push	r13
    20c8:	ef 92       	push	r14
    20ca:	ff 92       	push	r15
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	a0 97       	sbiw	r28, 0x20	; 32
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	6c 01       	movw	r12, r24
    20e6:	a6 2e       	mov	r10, r22
    20e8:	8a 01       	movw	r16, r20
    20ea:	79 01       	movw	r14, r18
    20ec:	fe 01       	movw	r30, r28
    20ee:	31 96       	adiw	r30, 0x01	; 1
    20f0:	80 e2       	ldi	r24, 0x20	; 32
    20f2:	df 01       	movw	r26, r30
    20f4:	1d 92       	st	X+, r1
    20f6:	8a 95       	dec	r24
    20f8:	e9 f7       	brne	.-6      	; 0x20f4 <conv_brk+0x3c>
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	4f 01       	movw	r8, r30
    2106:	a1 e0       	ldi	r26, 0x01	; 1
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	f6 01       	movw	r30, r12
    210c:	83 81       	ldd	r24, Z+3	; 0x03
    210e:	f7 01       	movw	r30, r14
    2110:	83 fd       	sbrc	r24, 3
    2112:	25 91       	lpm	r18, Z+
    2114:	83 ff       	sbrs	r24, 3
    2116:	21 91       	ld	r18, Z+
    2118:	7f 01       	movw	r14, r30
    211a:	22 23       	and	r18, r18
    211c:	09 f4       	brne	.+2      	; 0x2120 <conv_brk+0x68>
    211e:	7e c0       	rjmp	.+252    	; 0x221c <conv_brk+0x164>
    2120:	2e 35       	cpi	r18, 0x5E	; 94
    2122:	19 f4       	brne	.+6      	; 0x212a <conv_brk+0x72>
    2124:	41 15       	cp	r20, r1
    2126:	51 05       	cpc	r21, r1
    2128:	69 f1       	breq	.+90     	; 0x2184 <conv_brk+0xcc>
    212a:	87 2f       	mov	r24, r23
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	84 17       	cp	r24, r20
    2130:	95 07       	cpc	r25, r21
    2132:	44 f4       	brge	.+16     	; 0x2144 <conv_brk+0x8c>
    2134:	2d 35       	cpi	r18, 0x5D	; 93
    2136:	51 f1       	breq	.+84     	; 0x218c <conv_brk+0xd4>
    2138:	2d 32       	cpi	r18, 0x2D	; 45
    213a:	21 f4       	brne	.+8      	; 0x2144 <conv_brk+0x8c>
    213c:	33 23       	and	r19, r19
    213e:	29 f4       	brne	.+10     	; 0x214a <conv_brk+0x92>
    2140:	31 e0       	ldi	r19, 0x01	; 1
    2142:	21 c0       	rjmp	.+66     	; 0x2186 <conv_brk+0xce>
    2144:	33 23       	and	r19, r19
    2146:	09 f4       	brne	.+2      	; 0x214a <conv_brk+0x92>
    2148:	62 2f       	mov	r22, r18
    214a:	32 2f       	mov	r19, r18
    214c:	83 2f       	mov	r24, r19
    214e:	86 95       	lsr	r24
    2150:	86 95       	lsr	r24
    2152:	86 95       	lsr	r24
    2154:	f4 01       	movw	r30, r8
    2156:	e8 0f       	add	r30, r24
    2158:	f1 1d       	adc	r31, r1
    215a:	83 2f       	mov	r24, r19
    215c:	87 70       	andi	r24, 0x07	; 7
    215e:	3d 01       	movw	r6, r26
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <conv_brk+0xae>
    2162:	66 0c       	add	r6, r6
    2164:	77 1c       	adc	r7, r7
    2166:	8a 95       	dec	r24
    2168:	e2 f7       	brpl	.-8      	; 0x2162 <conv_brk+0xaa>
    216a:	20 81       	ld	r18, Z
    216c:	26 29       	or	r18, r6
    216e:	20 83       	st	Z, r18
    2170:	36 17       	cp	r19, r22
    2172:	11 f4       	brne	.+4      	; 0x2178 <conv_brk+0xc0>
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	07 c0       	rjmp	.+14     	; 0x2186 <conv_brk+0xce>
    2178:	36 17       	cp	r19, r22
    217a:	10 f4       	brcc	.+4      	; 0x2180 <conv_brk+0xc8>
    217c:	3f 5f       	subi	r19, 0xFF	; 255
    217e:	e6 cf       	rjmp	.-52     	; 0x214c <conv_brk+0x94>
    2180:	31 50       	subi	r19, 0x01	; 1
    2182:	e4 cf       	rjmp	.-56     	; 0x214c <conv_brk+0x94>
    2184:	71 e0       	ldi	r23, 0x01	; 1
    2186:	4f 5f       	subi	r20, 0xFF	; 255
    2188:	5f 4f       	sbci	r21, 0xFF	; 255
    218a:	bf cf       	rjmp	.-130    	; 0x210a <conv_brk+0x52>
    218c:	33 23       	and	r19, r19
    218e:	19 f0       	breq	.+6      	; 0x2196 <conv_brk+0xde>
    2190:	8e 81       	ldd	r24, Y+6	; 0x06
    2192:	80 62       	ori	r24, 0x20	; 32
    2194:	8e 83       	std	Y+6, r24	; 0x06
    2196:	77 23       	and	r23, r23
    2198:	59 f0       	breq	.+22     	; 0x21b0 <conv_brk+0xf8>
    219a:	fe 01       	movw	r30, r28
    219c:	31 96       	adiw	r30, 0x01	; 1
    219e:	9e 01       	movw	r18, r28
    21a0:	2f 5d       	subi	r18, 0xDF	; 223
    21a2:	3f 4f       	sbci	r19, 0xFF	; 255
    21a4:	80 81       	ld	r24, Z
    21a6:	80 95       	com	r24
    21a8:	81 93       	st	Z+, r24
    21aa:	e2 17       	cp	r30, r18
    21ac:	f3 07       	cpc	r31, r19
    21ae:	d1 f7       	brne	.-12     	; 0x21a4 <conv_brk+0xec>
    21b0:	bb 24       	eor	r11, r11
    21b2:	b3 94       	inc	r11
    21b4:	4e 01       	movw	r8, r28
    21b6:	08 94       	sec
    21b8:	81 1c       	adc	r8, r1
    21ba:	91 1c       	adc	r9, r1
    21bc:	c6 01       	movw	r24, r12
    21be:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
    21c2:	ac 01       	movw	r20, r24
    21c4:	97 fd       	sbrc	r25, 7
    21c6:	22 c0       	rjmp	.+68     	; 0x220c <conv_brk+0x154>
    21c8:	86 95       	lsr	r24
    21ca:	86 95       	lsr	r24
    21cc:	86 95       	lsr	r24
    21ce:	f4 01       	movw	r30, r8
    21d0:	e8 0f       	add	r30, r24
    21d2:	f1 1d       	adc	r31, r1
    21d4:	80 81       	ld	r24, Z
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9a 01       	movw	r18, r20
    21da:	27 70       	andi	r18, 0x07	; 7
    21dc:	30 70       	andi	r19, 0x00	; 0
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <conv_brk+0x12c>
    21e0:	95 95       	asr	r25
    21e2:	87 95       	ror	r24
    21e4:	2a 95       	dec	r18
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <conv_brk+0x128>
    21e8:	80 fd       	sbrc	r24, 0
    21ea:	05 c0       	rjmp	.+10     	; 0x21f6 <conv_brk+0x13e>
    21ec:	ca 01       	movw	r24, r20
    21ee:	b6 01       	movw	r22, r12
    21f0:	0e 94 9e 12 	call	0x253c	; 0x253c <ungetc>
    21f4:	0b c0       	rjmp	.+22     	; 0x220c <conv_brk+0x154>
    21f6:	01 15       	cp	r16, r1
    21f8:	11 05       	cpc	r17, r1
    21fa:	19 f0       	breq	.+6      	; 0x2202 <conv_brk+0x14a>
    21fc:	d8 01       	movw	r26, r16
    21fe:	4d 93       	st	X+, r20
    2200:	8d 01       	movw	r16, r26
    2202:	aa 94       	dec	r10
    2204:	bb 24       	eor	r11, r11
    2206:	aa 20       	and	r10, r10
    2208:	c9 f6       	brne	.-78     	; 0x21bc <conv_brk+0x104>
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <conv_brk+0x158>
    220c:	bb 20       	and	r11, r11
    220e:	31 f4       	brne	.+12     	; 0x221c <conv_brk+0x164>
    2210:	01 15       	cp	r16, r1
    2212:	11 05       	cpc	r17, r1
    2214:	29 f0       	breq	.+10     	; 0x2220 <conv_brk+0x168>
    2216:	f8 01       	movw	r30, r16
    2218:	10 82       	st	Z, r1
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <conv_brk+0x168>
    221c:	ee 24       	eor	r14, r14
    221e:	ff 24       	eor	r15, r15
    2220:	c7 01       	movw	r24, r14
    2222:	a0 96       	adiw	r28, 0x20	; 32
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	1f 91       	pop	r17
    2234:	0f 91       	pop	r16
    2236:	ff 90       	pop	r15
    2238:	ef 90       	pop	r14
    223a:	df 90       	pop	r13
    223c:	cf 90       	pop	r12
    223e:	bf 90       	pop	r11
    2240:	af 90       	pop	r10
    2242:	9f 90       	pop	r9
    2244:	8f 90       	pop	r8
    2246:	7f 90       	pop	r7
    2248:	6f 90       	pop	r6
    224a:	08 95       	ret

0000224c <vfscanf>:
    224c:	6f 92       	push	r6
    224e:	7f 92       	push	r7
    2250:	8f 92       	push	r8
    2252:	9f 92       	push	r9
    2254:	af 92       	push	r10
    2256:	bf 92       	push	r11
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	0f 93       	push	r16
    2262:	1f 93       	push	r17
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	5c 01       	movw	r10, r24
    226a:	6b 01       	movw	r12, r22
    226c:	3a 01       	movw	r6, r20
    226e:	fc 01       	movw	r30, r24
    2270:	17 82       	std	Z+7, r1	; 0x07
    2272:	16 82       	std	Z+6, r1	; 0x06
    2274:	88 24       	eor	r8, r8
    2276:	ea c0       	rjmp	.+468    	; 0x244c <vfscanf+0x200>
    2278:	81 2f       	mov	r24, r17
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	0e 94 49 12 	call	0x2492	; 0x2492 <isspace>
    2280:	89 2b       	or	r24, r25
    2282:	21 f0       	breq	.+8      	; 0x228c <vfscanf+0x40>
    2284:	c5 01       	movw	r24, r10
    2286:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <skip_spaces>
    228a:	e0 c0       	rjmp	.+448    	; 0x244c <vfscanf+0x200>
    228c:	15 32       	cpi	r17, 0x25	; 37
    228e:	49 f4       	brne	.+18     	; 0x22a2 <vfscanf+0x56>
    2290:	f6 01       	movw	r30, r12
    2292:	f3 fc       	sbrc	r15, 3
    2294:	65 91       	lpm	r22, Z+
    2296:	f3 fe       	sbrs	r15, 3
    2298:	61 91       	ld	r22, Z+
    229a:	6f 01       	movw	r12, r30
    229c:	65 32       	cpi	r22, 0x25	; 37
    229e:	69 f4       	brne	.+26     	; 0x22ba <vfscanf+0x6e>
    22a0:	15 e2       	ldi	r17, 0x25	; 37
    22a2:	c5 01       	movw	r24, r10
    22a4:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
    22a8:	97 fd       	sbrc	r25, 7
    22aa:	dc c0       	rjmp	.+440    	; 0x2464 <vfscanf+0x218>
    22ac:	18 17       	cp	r17, r24
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <vfscanf+0x66>
    22b0:	cd c0       	rjmp	.+410    	; 0x244c <vfscanf+0x200>
    22b2:	b5 01       	movw	r22, r10
    22b4:	0e 94 9e 12 	call	0x253c	; 0x253c <ungetc>
    22b8:	da c0       	rjmp	.+436    	; 0x246e <vfscanf+0x222>
    22ba:	6a 32       	cpi	r22, 0x2A	; 42
    22bc:	19 f0       	breq	.+6      	; 0x22c4 <vfscanf+0x78>
    22be:	16 2f       	mov	r17, r22
    22c0:	00 e0       	ldi	r16, 0x00	; 0
    22c2:	06 c0       	rjmp	.+12     	; 0x22d0 <vfscanf+0x84>
    22c4:	f3 fc       	sbrc	r15, 3
    22c6:	15 91       	lpm	r17, Z+
    22c8:	f3 fe       	sbrs	r15, 3
    22ca:	11 91       	ld	r17, Z+
    22cc:	6f 01       	movw	r12, r30
    22ce:	01 e0       	ldi	r16, 0x01	; 1
    22d0:	99 24       	eor	r9, r9
    22d2:	0f c0       	rjmp	.+30     	; 0x22f2 <vfscanf+0xa6>
    22d4:	02 60       	ori	r16, 0x02	; 2
    22d6:	69 2d       	mov	r22, r9
    22d8:	70 e0       	ldi	r23, 0x00	; 0
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	40 e2       	ldi	r20, 0x20	; 32
    22e0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <mulacc>
    22e4:	96 2e       	mov	r9, r22
    22e6:	f6 01       	movw	r30, r12
    22e8:	f3 fc       	sbrc	r15, 3
    22ea:	15 91       	lpm	r17, Z+
    22ec:	f3 fe       	sbrs	r15, 3
    22ee:	11 91       	ld	r17, Z+
    22f0:	6f 01       	movw	r12, r30
    22f2:	21 2f       	mov	r18, r17
    22f4:	20 53       	subi	r18, 0x30	; 48
    22f6:	2a 30       	cpi	r18, 0x0A	; 10
    22f8:	68 f3       	brcs	.-38     	; 0x22d4 <vfscanf+0x88>
    22fa:	01 fd       	sbrc	r16, 1
    22fc:	03 c0       	rjmp	.+6      	; 0x2304 <vfscanf+0xb8>
    22fe:	99 24       	eor	r9, r9
    2300:	9a 94       	dec	r9
    2302:	03 c0       	rjmp	.+6      	; 0x230a <vfscanf+0xbe>
    2304:	99 20       	and	r9, r9
    2306:	09 f4       	brne	.+2      	; 0x230a <vfscanf+0xbe>
    2308:	b2 c0       	rjmp	.+356    	; 0x246e <vfscanf+0x222>
    230a:	18 36       	cpi	r17, 0x68	; 104
    230c:	21 f0       	breq	.+8      	; 0x2316 <vfscanf+0xca>
    230e:	1c 36       	cpi	r17, 0x6C	; 108
    2310:	99 f4       	brne	.+38     	; 0x2338 <vfscanf+0xec>
    2312:	f6 01       	movw	r30, r12
    2314:	0b c0       	rjmp	.+22     	; 0x232c <vfscanf+0xe0>
    2316:	f6 01       	movw	r30, r12
    2318:	f3 fc       	sbrc	r15, 3
    231a:	65 91       	lpm	r22, Z+
    231c:	f3 fe       	sbrs	r15, 3
    231e:	61 91       	ld	r22, Z+
    2320:	68 36       	cpi	r22, 0x68	; 104
    2322:	19 f0       	breq	.+6      	; 0x232a <vfscanf+0xde>
    2324:	6f 01       	movw	r12, r30
    2326:	16 2f       	mov	r17, r22
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <vfscanf+0xec>
    232a:	08 60       	ori	r16, 0x08	; 8
    232c:	04 60       	ori	r16, 0x04	; 4
    232e:	f3 fc       	sbrc	r15, 3
    2330:	15 91       	lpm	r17, Z+
    2332:	f3 fe       	sbrs	r15, 3
    2334:	11 91       	ld	r17, Z+
    2336:	6f 01       	movw	r12, r30
    2338:	11 23       	and	r17, r17
    233a:	09 f4       	brne	.+2      	; 0x233e <vfscanf+0xf2>
    233c:	98 c0       	rjmp	.+304    	; 0x246e <vfscanf+0x222>
    233e:	8d ed       	ldi	r24, 0xDD	; 221
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	61 2f       	mov	r22, r17
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	0e 94 51 12 	call	0x24a2	; 0x24a2 <strchr_P>
    234a:	89 2b       	or	r24, r25
    234c:	09 f4       	brne	.+2      	; 0x2350 <vfscanf+0x104>
    234e:	8f c0       	rjmp	.+286    	; 0x246e <vfscanf+0x222>
    2350:	80 2f       	mov	r24, r16
    2352:	00 ff       	sbrs	r16, 0
    2354:	03 c0       	rjmp	.+6      	; 0x235c <vfscanf+0x110>
    2356:	ee 24       	eor	r14, r14
    2358:	ff 24       	eor	r15, r15
    235a:	07 c0       	rjmp	.+14     	; 0x236a <vfscanf+0x11e>
    235c:	f3 01       	movw	r30, r6
    235e:	e0 80       	ld	r14, Z
    2360:	f1 80       	ldd	r15, Z+1	; 0x01
    2362:	22 e0       	ldi	r18, 0x02	; 2
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	62 0e       	add	r6, r18
    2368:	73 1e       	adc	r7, r19
    236a:	1e 36       	cpi	r17, 0x6E	; 110
    236c:	51 f4       	brne	.+20     	; 0x2382 <vfscanf+0x136>
    236e:	f5 01       	movw	r30, r10
    2370:	46 81       	ldd	r20, Z+6	; 0x06
    2372:	57 81       	ldd	r21, Z+7	; 0x07
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	70 e0       	ldi	r23, 0x00	; 0
    2378:	c7 01       	movw	r24, r14
    237a:	20 2f       	mov	r18, r16
    237c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <putval>
    2380:	65 c0       	rjmp	.+202    	; 0x244c <vfscanf+0x200>
    2382:	13 36       	cpi	r17, 0x63	; 99
    2384:	91 f4       	brne	.+36     	; 0x23aa <vfscanf+0x15e>
    2386:	81 fd       	sbrc	r24, 1
    2388:	02 c0       	rjmp	.+4      	; 0x238e <vfscanf+0x142>
    238a:	99 24       	eor	r9, r9
    238c:	93 94       	inc	r9
    238e:	c5 01       	movw	r24, r10
    2390:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
    2394:	97 fd       	sbrc	r25, 7
    2396:	66 c0       	rjmp	.+204    	; 0x2464 <vfscanf+0x218>
    2398:	e1 14       	cp	r14, r1
    239a:	f1 04       	cpc	r15, r1
    239c:	19 f0       	breq	.+6      	; 0x23a4 <vfscanf+0x158>
    239e:	f7 01       	movw	r30, r14
    23a0:	81 93       	st	Z+, r24
    23a2:	7f 01       	movw	r14, r30
    23a4:	9a 94       	dec	r9
    23a6:	99 f7       	brne	.-26     	; 0x238e <vfscanf+0x142>
    23a8:	4f c0       	rjmp	.+158    	; 0x2448 <vfscanf+0x1fc>
    23aa:	1b 35       	cpi	r17, 0x5B	; 91
    23ac:	59 f4       	brne	.+22     	; 0x23c4 <vfscanf+0x178>
    23ae:	c5 01       	movw	r24, r10
    23b0:	69 2d       	mov	r22, r9
    23b2:	a7 01       	movw	r20, r14
    23b4:	96 01       	movw	r18, r12
    23b6:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <conv_brk>
    23ba:	6c 01       	movw	r12, r24
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	09 f0       	breq	.+2      	; 0x23c2 <vfscanf+0x176>
    23c0:	43 c0       	rjmp	.+134    	; 0x2448 <vfscanf+0x1fc>
    23c2:	3d c0       	rjmp	.+122    	; 0x243e <vfscanf+0x1f2>
    23c4:	c5 01       	movw	r24, r10
    23c6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <skip_spaces>
    23ca:	97 fd       	sbrc	r25, 7
    23cc:	4b c0       	rjmp	.+150    	; 0x2464 <vfscanf+0x218>
    23ce:	1f 36       	cpi	r17, 0x6F	; 111
    23d0:	59 f1       	breq	.+86     	; 0x2428 <vfscanf+0x1dc>
    23d2:	10 37       	cpi	r17, 0x70	; 112
    23d4:	28 f4       	brcc	.+10     	; 0x23e0 <vfscanf+0x194>
    23d6:	14 36       	cpi	r17, 0x64	; 100
    23d8:	29 f1       	breq	.+74     	; 0x2424 <vfscanf+0x1d8>
    23da:	19 36       	cpi	r17, 0x69	; 105
    23dc:	39 f5       	brne	.+78     	; 0x242c <vfscanf+0x1e0>
    23de:	27 c0       	rjmp	.+78     	; 0x242e <vfscanf+0x1e2>
    23e0:	13 37       	cpi	r17, 0x73	; 115
    23e2:	19 f0       	breq	.+6      	; 0x23ea <vfscanf+0x19e>
    23e4:	15 37       	cpi	r17, 0x75	; 117
    23e6:	11 f5       	brne	.+68     	; 0x242c <vfscanf+0x1e0>
    23e8:	1d c0       	rjmp	.+58     	; 0x2424 <vfscanf+0x1d8>
    23ea:	c5 01       	movw	r24, r10
    23ec:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
    23f0:	ec 01       	movw	r28, r24
    23f2:	97 fd       	sbrc	r25, 7
    23f4:	11 c0       	rjmp	.+34     	; 0x2418 <vfscanf+0x1cc>
    23f6:	0e 94 49 12 	call	0x2492	; 0x2492 <isspace>
    23fa:	89 2b       	or	r24, r25
    23fc:	29 f0       	breq	.+10     	; 0x2408 <vfscanf+0x1bc>
    23fe:	ce 01       	movw	r24, r28
    2400:	b5 01       	movw	r22, r10
    2402:	0e 94 9e 12 	call	0x253c	; 0x253c <ungetc>
    2406:	08 c0       	rjmp	.+16     	; 0x2418 <vfscanf+0x1cc>
    2408:	e1 14       	cp	r14, r1
    240a:	f1 04       	cpc	r15, r1
    240c:	19 f0       	breq	.+6      	; 0x2414 <vfscanf+0x1c8>
    240e:	f7 01       	movw	r30, r14
    2410:	c1 93       	st	Z+, r28
    2412:	7f 01       	movw	r14, r30
    2414:	9a 94       	dec	r9
    2416:	49 f7       	brne	.-46     	; 0x23ea <vfscanf+0x19e>
    2418:	e1 14       	cp	r14, r1
    241a:	f1 04       	cpc	r15, r1
    241c:	a9 f0       	breq	.+42     	; 0x2448 <vfscanf+0x1fc>
    241e:	f7 01       	movw	r30, r14
    2420:	10 82       	st	Z, r1
    2422:	12 c0       	rjmp	.+36     	; 0x2448 <vfscanf+0x1fc>
    2424:	00 62       	ori	r16, 0x20	; 32
    2426:	03 c0       	rjmp	.+6      	; 0x242e <vfscanf+0x1e2>
    2428:	00 61       	ori	r16, 0x10	; 16
    242a:	01 c0       	rjmp	.+2      	; 0x242e <vfscanf+0x1e2>
    242c:	00 64       	ori	r16, 0x40	; 64
    242e:	c5 01       	movw	r24, r10
    2430:	69 2d       	mov	r22, r9
    2432:	a7 01       	movw	r20, r14
    2434:	20 2f       	mov	r18, r16
    2436:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <conv_int>
    243a:	88 23       	and	r24, r24
    243c:	29 f4       	brne	.+10     	; 0x2448 <vfscanf+0x1fc>
    243e:	f5 01       	movw	r30, r10
    2440:	83 81       	ldd	r24, Z+3	; 0x03
    2442:	80 73       	andi	r24, 0x30	; 48
    2444:	79 f4       	brne	.+30     	; 0x2464 <vfscanf+0x218>
    2446:	13 c0       	rjmp	.+38     	; 0x246e <vfscanf+0x222>
    2448:	00 ff       	sbrs	r16, 0
    244a:	83 94       	inc	r8
    244c:	f5 01       	movw	r30, r10
    244e:	f3 80       	ldd	r15, Z+3	; 0x03
    2450:	f6 01       	movw	r30, r12
    2452:	f3 fc       	sbrc	r15, 3
    2454:	15 91       	lpm	r17, Z+
    2456:	f3 fe       	sbrs	r15, 3
    2458:	11 91       	ld	r17, Z+
    245a:	6f 01       	movw	r12, r30
    245c:	11 23       	and	r17, r17
    245e:	09 f0       	breq	.+2      	; 0x2462 <vfscanf+0x216>
    2460:	0b cf       	rjmp	.-490    	; 0x2278 <vfscanf+0x2c>
    2462:	05 c0       	rjmp	.+10     	; 0x246e <vfscanf+0x222>
    2464:	88 20       	and	r8, r8
    2466:	19 f4       	brne	.+6      	; 0x246e <vfscanf+0x222>
    2468:	2f ef       	ldi	r18, 0xFF	; 255
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <vfscanf+0x226>
    246e:	28 2d       	mov	r18, r8
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	c9 01       	movw	r24, r18
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	ff 90       	pop	r15
    247e:	ef 90       	pop	r14
    2480:	df 90       	pop	r13
    2482:	cf 90       	pop	r12
    2484:	bf 90       	pop	r11
    2486:	af 90       	pop	r10
    2488:	9f 90       	pop	r9
    248a:	8f 90       	pop	r8
    248c:	7f 90       	pop	r7
    248e:	6f 90       	pop	r6
    2490:	08 95       	ret

00002492 <isspace>:
    2492:	91 11       	cpse	r25, r1
    2494:	6d c0       	rjmp	.+218    	; 0x2570 <__ctype_isfalse>
    2496:	80 32       	cpi	r24, 0x20	; 32
    2498:	19 f0       	breq	.+6      	; 0x24a0 <isspace+0xe>
    249a:	89 50       	subi	r24, 0x09	; 9
    249c:	85 50       	subi	r24, 0x05	; 5
    249e:	d0 f7       	brcc	.-12     	; 0x2494 <isspace+0x2>
    24a0:	08 95       	ret

000024a2 <strchr_P>:
    24a2:	fc 01       	movw	r30, r24
    24a4:	05 90       	lpm	r0, Z+
    24a6:	06 16       	cp	r0, r22
    24a8:	21 f0       	breq	.+8      	; 0x24b2 <strchr_P+0x10>
    24aa:	00 20       	and	r0, r0
    24ac:	d9 f7       	brne	.-10     	; 0x24a4 <strchr_P+0x2>
    24ae:	c0 01       	movw	r24, r0
    24b0:	08 95       	ret
    24b2:	31 97       	sbiw	r30, 0x01	; 1
    24b4:	cf 01       	movw	r24, r30
    24b6:	08 95       	ret

000024b8 <fgetc>:
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	ec 01       	movw	r28, r24
    24be:	4b 81       	ldd	r20, Y+3	; 0x03
    24c0:	40 ff       	sbrs	r20, 0
    24c2:	1a c0       	rjmp	.+52     	; 0x24f8 <fgetc+0x40>
    24c4:	46 ff       	sbrs	r20, 6
    24c6:	0a c0       	rjmp	.+20     	; 0x24dc <fgetc+0x24>
    24c8:	4f 7b       	andi	r20, 0xBF	; 191
    24ca:	4b 83       	std	Y+3, r20	; 0x03
    24cc:	8e 81       	ldd	r24, Y+6	; 0x06
    24ce:	9f 81       	ldd	r25, Y+7	; 0x07
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	9f 83       	std	Y+7, r25	; 0x07
    24d4:	8e 83       	std	Y+6, r24	; 0x06
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	28 2f       	mov	r18, r24
    24da:	2b c0       	rjmp	.+86     	; 0x2532 <fgetc+0x7a>
    24dc:	42 ff       	sbrs	r20, 2
    24de:	13 c0       	rjmp	.+38     	; 0x2506 <fgetc+0x4e>
    24e0:	e8 81       	ld	r30, Y
    24e2:	f9 81       	ldd	r31, Y+1	; 0x01
    24e4:	80 81       	ld	r24, Z
    24e6:	28 2f       	mov	r18, r24
    24e8:	33 27       	eor	r19, r19
    24ea:	27 fd       	sbrc	r18, 7
    24ec:	30 95       	com	r19
    24ee:	21 15       	cp	r18, r1
    24f0:	31 05       	cpc	r19, r1
    24f2:	29 f4       	brne	.+10     	; 0x24fe <fgetc+0x46>
    24f4:	40 62       	ori	r20, 0x20	; 32
    24f6:	4b 83       	std	Y+3, r20	; 0x03
    24f8:	2f ef       	ldi	r18, 0xFF	; 255
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	1b c0       	rjmp	.+54     	; 0x2534 <fgetc+0x7c>
    24fe:	31 96       	adiw	r30, 0x01	; 1
    2500:	f9 83       	std	Y+1, r31	; 0x01
    2502:	e8 83       	st	Y, r30
    2504:	11 c0       	rjmp	.+34     	; 0x2528 <fgetc+0x70>
    2506:	ea 85       	ldd	r30, Y+10	; 0x0a
    2508:	fb 85       	ldd	r31, Y+11	; 0x0b
    250a:	ce 01       	movw	r24, r28
    250c:	09 95       	icall
    250e:	9c 01       	movw	r18, r24
    2510:	97 ff       	sbrs	r25, 7
    2512:	0a c0       	rjmp	.+20     	; 0x2528 <fgetc+0x70>
    2514:	9b 81       	ldd	r25, Y+3	; 0x03
    2516:	2f 5f       	subi	r18, 0xFF	; 255
    2518:	3f 4f       	sbci	r19, 0xFF	; 255
    251a:	11 f0       	breq	.+4      	; 0x2520 <fgetc+0x68>
    251c:	80 e2       	ldi	r24, 0x20	; 32
    251e:	01 c0       	rjmp	.+2      	; 0x2522 <fgetc+0x6a>
    2520:	80 e1       	ldi	r24, 0x10	; 16
    2522:	89 2b       	or	r24, r25
    2524:	8b 83       	std	Y+3, r24	; 0x03
    2526:	e8 cf       	rjmp	.-48     	; 0x24f8 <fgetc+0x40>
    2528:	8e 81       	ldd	r24, Y+6	; 0x06
    252a:	9f 81       	ldd	r25, Y+7	; 0x07
    252c:	01 96       	adiw	r24, 0x01	; 1
    252e:	9f 83       	std	Y+7, r25	; 0x07
    2530:	8e 83       	std	Y+6, r24	; 0x06
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	c9 01       	movw	r24, r18
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	08 95       	ret

0000253c <ungetc>:
    253c:	9c 01       	movw	r18, r24
    253e:	fb 01       	movw	r30, r22
    2540:	83 81       	ldd	r24, Z+3	; 0x03
    2542:	80 ff       	sbrs	r24, 0
    2544:	11 c0       	rjmp	.+34     	; 0x2568 <ungetc+0x2c>
    2546:	86 fd       	sbrc	r24, 6
    2548:	0f c0       	rjmp	.+30     	; 0x2568 <ungetc+0x2c>
    254a:	9f ef       	ldi	r25, 0xFF	; 255
    254c:	2f 3f       	cpi	r18, 0xFF	; 255
    254e:	39 07       	cpc	r19, r25
    2550:	59 f0       	breq	.+22     	; 0x2568 <ungetc+0x2c>
    2552:	22 83       	std	Z+2, r18	; 0x02
    2554:	80 64       	ori	r24, 0x40	; 64
    2556:	8f 7d       	andi	r24, 0xDF	; 223
    2558:	83 83       	std	Z+3, r24	; 0x03
    255a:	86 81       	ldd	r24, Z+6	; 0x06
    255c:	97 81       	ldd	r25, Z+7	; 0x07
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	97 83       	std	Z+7, r25	; 0x07
    2562:	86 83       	std	Z+6, r24	; 0x06
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	02 c0       	rjmp	.+4      	; 0x256c <ungetc+0x30>
    2568:	2f ef       	ldi	r18, 0xFF	; 255
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	c9 01       	movw	r24, r18
    256e:	08 95       	ret

00002570 <__ctype_isfalse>:
    2570:	99 27       	eor	r25, r25
    2572:	88 27       	eor	r24, r24

00002574 <__ctype_istrue>:
    2574:	08 95       	ret

00002576 <_exit>:
    2576:	f8 94       	cli

00002578 <__stop_program>:
    2578:	ff cf       	rjmp	.-2      	; 0x2578 <__stop_program>
