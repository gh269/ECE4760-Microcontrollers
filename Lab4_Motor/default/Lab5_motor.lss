
Lab5_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00003246  000032da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b0  0080012e  0080012e  00003308  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000462  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001567  00000000  00000000  000037aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000455  00000000  00000000  00004d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001125  00000000  00000000  00005166  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  0000628c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000614  00000000  00000000  000065dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e76  00000000  00000000  00006bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__ctors_end>
       4:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__vector_1>
       8:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
       c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      10:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      14:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      18:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      1c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      20:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      24:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      28:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      2c:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__vector_11>
      30:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      34:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_13>
      38:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      3c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      40:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      44:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      48:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      4c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      50:	0c 94 9b 04 	jmp	0x936	; 0x936 <__vector_20>
      54:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_21>
      58:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      5c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      60:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      64:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      68:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      6c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      70:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      74:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      78:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      7c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      80:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      84:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      88:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>

0000008c <__c.1790>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.1788>:
      90:	69 6e 66 00                                         inf.

00000094 <__c.2085>:
      94:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
      a4:	47 00                                               G.

000000a6 <pstr_an>:
      a6:	61 6e 00                                            an.

000000a9 <pstr_nfinity>:
      a9:	6e 66 69 6e 69 74 79 00                             nfinity.

000000b1 <pwr_m10>:
      b1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      c1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000c9 <pwr_p10>:
      c9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      d9:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000e1 <LcdCustomChar>:
      e1:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      f1:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     101:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     111:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000121 <LCD_line1>:
     121:	69 52 50 4d 3d 00 00                                iRPM=..

00000128 <LCD_line2>:
     128:	72 52 50 4d 3d 00 00 00 40 7a 10 f3 5a 00 a0 72     rRPM=...@z..Z..r
     138:	4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00 00     N..........vH...
     148:	e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00     ..T.....;.......
     158:	00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86 01     .......@B.......
     168:	00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00 64     ....'..........d
     178:	00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00 00     ................
     188:	00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59 e1     .,v...gO.#....Y.
     198:	b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6     ......S.:.Q.v...
     1a8:	c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c     ..&....b.@|o....
     1b8:	9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b     .@...o....Z*.\.k
     1c8:	6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5     l.gm......G.. ..
     1d8:	00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e 08     ........5w......
     1e8:	00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98     .. N......3333..
     1f8:	6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf fe     n...A..!..;.U...
     208:	e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4     .....K8..|......
     218:	24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d     $ 2.r^"....$...=
     228:	27 00                                               '.

0000022a <__ctors_end>:
     22a:	11 24       	eor	r1, r1
     22c:	1f be       	out	0x3f, r1	; 63
     22e:	cf ef       	ldi	r28, 0xFF	; 255
     230:	d0 e4       	ldi	r29, 0x40	; 64
     232:	de bf       	out	0x3e, r29	; 62
     234:	cd bf       	out	0x3d, r28	; 61

00000236 <__do_copy_data>:
     236:	11 e0       	ldi	r17, 0x01	; 1
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b1 e0       	ldi	r27, 0x01	; 1
     23c:	e6 e4       	ldi	r30, 0x46	; 70
     23e:	f2 e3       	ldi	r31, 0x32	; 50
     240:	00 e0       	ldi	r16, 0x00	; 0
     242:	0b bf       	out	0x3b, r16	; 59
     244:	02 c0       	rjmp	.+4      	; 0x24a <__do_copy_data+0x14>
     246:	07 90       	elpm	r0, Z+
     248:	0d 92       	st	X+, r0
     24a:	ae 32       	cpi	r26, 0x2E	; 46
     24c:	b1 07       	cpc	r27, r17
     24e:	d9 f7       	brne	.-10     	; 0x246 <__do_copy_data+0x10>

00000250 <__do_clear_bss>:
     250:	12 e0       	ldi	r17, 0x02	; 2
     252:	ae e2       	ldi	r26, 0x2E	; 46
     254:	b1 e0       	ldi	r27, 0x01	; 1
     256:	01 c0       	rjmp	.+2      	; 0x25a <.do_clear_bss_start>

00000258 <.do_clear_bss_loop>:
     258:	1d 92       	st	X+, r1

0000025a <.do_clear_bss_start>:
     25a:	ae 3d       	cpi	r26, 0xDE	; 222
     25c:	b1 07       	cpc	r27, r17
     25e:	e1 f7       	brne	.-8      	; 0x258 <.do_clear_bss_loop>
     260:	0e 94 50 08 	call	0x10a0	; 0x10a0 <main>
     264:	0c 94 21 19 	jmp	0x3242	; 0x3242 <_exit>

00000268 <__bad_interrupt>:
     268:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026c <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     26c:	1f 92       	push	r1
     26e:	0f 92       	push	r0
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	0f 92       	push	r0
     274:	0b b6       	in	r0, 0x3b	; 59
     276:	0f 92       	push	r0
     278:	11 24       	eor	r1, r1
     27a:	2f 92       	push	r2
     27c:	3f 92       	push	r3
     27e:	4f 92       	push	r4
     280:	5f 92       	push	r5
     282:	6f 92       	push	r6
     284:	7f 92       	push	r7
     286:	8f 92       	push	r8
     288:	9f 92       	push	r9
     28a:	af 92       	push	r10
     28c:	bf 92       	push	r11
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	2f 93       	push	r18
     29c:	3f 93       	push	r19
     29e:	4f 93       	push	r20
     2a0:	5f 93       	push	r21
     2a2:	6f 93       	push	r22
     2a4:	7f 93       	push	r23
     2a6:	8f 93       	push	r24
     2a8:	9f 93       	push	r25
     2aa:	af 93       	push	r26
     2ac:	bf 93       	push	r27
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	ef 93       	push	r30
     2b4:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
  
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     2b6:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     2ba:	50 90 8a 02 	lds	r5, 0x028A
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     2be:	b0 9b       	sbis	0x16, 0	; 22
     2c0:	14 c0       	rjmp	.+40     	; 0x2ea <__vector_13+0x7e>
    ++kernel.cycles;
     2c2:	80 91 c1 02 	lds	r24, 0x02C1
     2c6:	90 91 c2 02 	lds	r25, 0x02C2
     2ca:	a0 91 c3 02 	lds	r26, 0x02C3
     2ce:	b0 91 c4 02 	lds	r27, 0x02C4
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	a1 1d       	adc	r26, r1
     2d6:	b1 1d       	adc	r27, r1
     2d8:	80 93 c1 02 	sts	0x02C1, r24
     2dc:	90 93 c2 02 	sts	0x02C2, r25
     2e0:	a0 93 c3 02 	sts	0x02C3, r26
     2e4:	b0 93 c4 02 	sts	0x02C4, r27
    TIFR1 |= (1<<TOV1) ;
     2e8:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     2ea:	80 91 84 00 	lds	r24, 0x0084
     2ee:	90 91 85 00 	lds	r25, 0x0085
     2f2:	3c 01       	movw	r6, r24
     2f4:	88 24       	eor	r8, r8
     2f6:	99 24       	eor	r9, r9
     2f8:	80 91 c1 02 	lds	r24, 0x02C1
     2fc:	90 91 c2 02 	lds	r25, 0x02C2
     300:	a0 91 c3 02 	lds	r26, 0x02C3
     304:	b0 91 c4 02 	lds	r27, 0x02C4
     308:	dc 01       	movw	r26, r24
     30a:	99 27       	eor	r25, r25
     30c:	88 27       	eor	r24, r24
     30e:	68 0e       	add	r6, r24
     310:	79 1e       	adc	r7, r25
     312:	8a 1e       	adc	r8, r26
     314:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     316:	40 90 89 02 	lds	r4, 0x0289
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	61 e0       	ldi	r22, 0x01	; 1
     31e:	ff ef       	ldi	r31, 0xFF	; 255
     320:	af 2e       	mov	r10, r31
     322:	ff ef       	ldi	r31, 0xFF	; 255
     324:	bf 2e       	mov	r11, r31
     326:	ff ef       	ldi	r31, 0xFF	; 255
     328:	cf 2e       	mov	r12, r31
     32a:	ff e7       	ldi	r31, 0x7F	; 127
     32c:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     32e:	eb e0       	ldi	r30, 0x0B	; 11
     330:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
  t->state = READYQ;
     332:	33 24       	eor	r3, r3
     334:	33 94       	inc	r3
      } else if (t->release < nextHit) {
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     336:	cb e0       	ldi	r28, 0x0B	; 11
     338:	d0 e0       	ldi	r29, 0x00	; 0
     33a:	43 c0       	rjmp	.+134    	; 0x3c2 <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     33c:	62 9d       	mul	r22, r2
     33e:	d0 01       	movw	r26, r0
     340:	11 24       	eor	r1, r1
     342:	a5 57       	subi	r26, 0x75	; 117
     344:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     346:	1a 96       	adiw	r26, 0x0a	; 10
     348:	8c 91       	ld	r24, X
     34a:	1a 97       	sbiw	r26, 0x0a	; 10
     34c:	82 30       	cpi	r24, 0x02	; 2
     34e:	a1 f4       	brne	.+40     	; 0x378 <__vector_13+0x10c>
      if (t->release <= now) {
     350:	12 96       	adiw	r26, 0x02	; 2
     352:	ed 90       	ld	r14, X+
     354:	fd 90       	ld	r15, X+
     356:	0d 91       	ld	r16, X+
     358:	1c 91       	ld	r17, X
     35a:	15 97       	sbiw	r26, 0x05	; 5
     35c:	6e 14       	cp	r6, r14
     35e:	7f 04       	cpc	r7, r15
     360:	80 06       	cpc	r8, r16
     362:	91 06       	cpc	r9, r17
     364:	20 f0       	brcs	.+8      	; 0x36e <__vector_13+0x102>
  t->state = READYQ;
     366:	1a 96       	adiw	r26, 0x0a	; 10
     368:	3c 92       	st	X, r3
     36a:	1a 97       	sbiw	r26, 0x0a	; 10
     36c:	05 c0       	rjmp	.+10     	; 0x378 <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     36e:	ea 14       	cp	r14, r10
     370:	fb 04       	cpc	r15, r11
     372:	0c 05       	cpc	r16, r12
     374:	1d 05       	cpc	r17, r13
     376:	10 f0       	brcs	.+4      	; 0x37c <__vector_13+0x110>
     378:	86 01       	movw	r16, r12
     37a:	75 01       	movw	r14, r10
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     37c:	1a 96       	adiw	r26, 0x0a	; 10
     37e:	8c 91       	ld	r24, X
     380:	1a 97       	sbiw	r26, 0x0a	; 10
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	d9 f4       	brne	.+54     	; 0x3bc <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     386:	87 2f       	mov	r24, r23
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	8c 9f       	mul	r24, r28
     38c:	f0 01       	movw	r30, r0
     38e:	8d 9f       	mul	r24, r29
     390:	f0 0d       	add	r31, r0
     392:	9c 9f       	mul	r25, r28
     394:	f0 0d       	add	r31, r0
     396:	11 24       	eor	r1, r1
     398:	e7 57       	subi	r30, 0x77	; 119
     39a:	fd 4f       	sbci	r31, 0xFD	; 253
     39c:	16 96       	adiw	r26, 0x06	; 6
     39e:	2d 91       	ld	r18, X+
     3a0:	3d 91       	ld	r19, X+
     3a2:	4d 91       	ld	r20, X+
     3a4:	5c 91       	ld	r21, X
     3a6:	19 97       	sbiw	r26, 0x09	; 9
     3a8:	80 85       	ldd	r24, Z+8	; 0x08
     3aa:	91 85       	ldd	r25, Z+9	; 0x09
     3ac:	a2 85       	ldd	r26, Z+10	; 0x0a
     3ae:	b3 85       	ldd	r27, Z+11	; 0x0b
     3b0:	28 17       	cp	r18, r24
     3b2:	39 07       	cpc	r19, r25
     3b4:	4a 07       	cpc	r20, r26
     3b6:	5b 07       	cpc	r21, r27
     3b8:	08 f4       	brcc	.+2      	; 0x3bc <__vector_13+0x150>
     3ba:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     3bc:	6f 5f       	subi	r22, 0xFF	; 255
     3be:	57 01       	movw	r10, r14
     3c0:	68 01       	movw	r12, r16
     3c2:	46 16       	cp	r4, r22
     3c4:	08 f0       	brcs	.+2      	; 0x3c8 <__vector_13+0x15c>
     3c6:	ba cf       	rjmp	.-140    	; 0x33c <__vector_13+0xd0>
    }
  }
  //fprintf(stdout, "Old: %u New: %u\n\r", oldrunning, running);
  //fprintf(stdout, "NumTasks: %u\n\r", kernel.nbrOfTasks);
  //fprintf(stdout, "Current time: %lu\n\r", (unsigned long) trtCurrentTime());
  if (running != oldrunning) { // perform context switch?
     3c8:	75 15       	cp	r23, r5
     3ca:	b1 f0       	breq	.+44     	; 0x3f8 <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     3cc:	eb e0       	ldi	r30, 0x0B	; 11
     3ce:	5e 9e       	mul	r5, r30
     3d0:	d0 01       	movw	r26, r0
     3d2:	11 24       	eor	r1, r1
     3d4:	a5 57       	subi	r26, 0x75	; 117
     3d6:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     3d8:	8d b7       	in	r24, 0x3d	; 61
     3da:	8c 93       	st	X, r24
    t->sph = SPH;
     3dc:	8e b7       	in	r24, 0x3e	; 62
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     3e2:	7e 9f       	mul	r23, r30
     3e4:	f0 01       	movw	r30, r0
     3e6:	11 24       	eor	r1, r1
     3e8:	e5 57       	subi	r30, 0x75	; 117
     3ea:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     3ec:	81 81       	ldd	r24, Z+1	; 0x01
     3ee:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     3f0:	80 81       	ld	r24, Z
     3f2:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     3f4:	70 93 8a 02 	sts	0x028A, r23

  }

  kernel.nextHit = nextHit;  
     3f8:	a0 92 c5 02 	sts	0x02C5, r10
     3fc:	b0 92 c6 02 	sts	0x02C6, r11
     400:	c0 92 c7 02 	sts	0x02C7, r12
     404:	d0 92 c8 02 	sts	0x02C8, r13

  now = (kernel.cycles << 16) + TCNT1;
     408:	20 91 84 00 	lds	r18, 0x0084
     40c:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	50 e0       	ldi	r21, 0x00	; 0
     414:	80 91 c1 02 	lds	r24, 0x02C1
     418:	90 91 c2 02 	lds	r25, 0x02C2
     41c:	a0 91 c3 02 	lds	r26, 0x02C3
     420:	b0 91 c4 02 	lds	r27, 0x02C4
     424:	dc 01       	movw	r26, r24
     426:	99 27       	eor	r25, r25
     428:	88 27       	eor	r24, r24
     42a:	28 0f       	add	r18, r24
     42c:	39 1f       	adc	r19, r25
     42e:	4a 1f       	adc	r20, r26
     430:	5b 1f       	adc	r21, r27
     432:	d6 01       	movw	r26, r12
     434:	c5 01       	movw	r24, r10
     436:	82 1b       	sub	r24, r18
     438:	93 0b       	sbc	r25, r19
     43a:	a4 0b       	sbc	r26, r20
     43c:	b5 0b       	sbc	r27, r21
     43e:	9c 01       	movw	r18, r24
     440:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     442:	84 30       	cpi	r24, 0x04	; 4
     444:	91 05       	cpc	r25, r1
     446:	a1 05       	cpc	r26, r1
     448:	b1 05       	cpc	r27, r1
     44a:	24 f4       	brge	.+8      	; 0x454 <__vector_13+0x1e8>
     44c:	24 e0       	ldi	r18, 0x04	; 4
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     454:	80 91 84 00 	lds	r24, 0x0084
     458:	90 91 85 00 	lds	r25, 0x0085
     45c:	a0 e0       	ldi	r26, 0x00	; 0
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	82 0f       	add	r24, r18
     462:	93 1f       	adc	r25, r19
     464:	a4 1f       	adc	r26, r20
     466:	b5 1f       	adc	r27, r21
     468:	80 50       	subi	r24, 0x00	; 0
     46a:	90 40       	sbci	r25, 0x00	; 0
     46c:	a1 40       	sbci	r26, 0x01	; 1
     46e:	b0 40       	sbci	r27, 0x00	; 0
     470:	38 f4       	brcc	.+14     	; 0x480 <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     472:	80 91 84 00 	lds	r24, 0x0084
     476:	90 91 85 00 	lds	r25, 0x0085
     47a:	82 0f       	add	r24, r18
     47c:	93 1f       	adc	r25, r19
     47e:	0e c0       	rjmp	.+28     	; 0x49c <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     480:	80 91 84 00 	lds	r24, 0x0084
     484:	90 91 85 00 	lds	r25, 0x0085
     488:	8c 5f       	subi	r24, 0xFC	; 252
     48a:	9f 4f       	sbci	r25, 0xFF	; 255
     48c:	28 f4       	brcc	.+10     	; 0x498 <__vector_13+0x22c>
    OCR1A = 0x0000;
     48e:	10 92 89 00 	sts	0x0089, r1
     492:	10 92 88 00 	sts	0x0088, r1
     496:	06 c0       	rjmp	.+12     	; 0x4a4 <__vector_13+0x238>
  } else {
    OCR1A = 4;
     498:	84 e0       	ldi	r24, 0x04	; 4
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	90 93 89 00 	sts	0x0089, r25
     4a0:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	80 93 6f 00 	sts	0x006F, r24
}
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	bf 91       	pop	r27
     4b4:	af 91       	pop	r26
     4b6:	9f 91       	pop	r25
     4b8:	8f 91       	pop	r24
     4ba:	7f 91       	pop	r23
     4bc:	6f 91       	pop	r22
     4be:	5f 91       	pop	r21
     4c0:	4f 91       	pop	r20
     4c2:	3f 91       	pop	r19
     4c4:	2f 91       	pop	r18
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	bf 90       	pop	r11
     4d4:	af 90       	pop	r10
     4d6:	9f 90       	pop	r9
     4d8:	8f 90       	pop	r8
     4da:	7f 90       	pop	r7
     4dc:	6f 90       	pop	r6
     4de:	5f 90       	pop	r5
     4e0:	4f 90       	pop	r4
     4e2:	3f 90       	pop	r3
     4e4:	2f 90       	pop	r2
     4e6:	0f 90       	pop	r0
     4e8:	0b be       	out	0x3b, r0	; 59
     4ea:	0f 90       	pop	r0
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	0f 90       	pop	r0
     4f0:	1f 90       	pop	r1
     4f2:	18 95       	reti

000004f4 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     4f4:	10 92 85 00 	sts	0x0085, r1
     4f8:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     4fc:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     500:	25 e0       	ldi	r18, 0x05	; 5
     502:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     506:	22 e0       	ldi	r18, 0x02	; 2
     508:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     50c:	2f ef       	ldi	r18, 0xFF	; 255
     50e:	30 e4       	ldi	r19, 0x40	; 64
     510:	28 1b       	sub	r18, r24
     512:	39 0b       	sbc	r19, r25
     514:	30 93 c0 02 	sts	0x02C0, r19
     518:	20 93 bf 02 	sts	0x02BF, r18
  kernel.nbrOfTasks = 0;
     51c:	10 92 89 02 	sts	0x0289, r1
  kernel.running = 0;
     520:	10 92 8a 02 	sts	0x028A, r1

  kernel.cycles = 0x0000;
     524:	10 92 c1 02 	sts	0x02C1, r1
     528:	10 92 c2 02 	sts	0x02C2, r1
     52c:	10 92 c3 02 	sts	0x02C3, r1
     530:	10 92 c4 02 	sts	0x02C4, r1
  kernel.nextHit = 0x7FFFFFFF;
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	9f ef       	ldi	r25, 0xFF	; 255
     538:	af ef       	ldi	r26, 0xFF	; 255
     53a:	bf e7       	ldi	r27, 0x7F	; 127
     53c:	80 93 c5 02 	sts	0x02C5, r24
     540:	90 93 c6 02 	sts	0x02C6, r25
     544:	a0 93 c7 02 	sts	0x02C7, r26
     548:	b0 93 c8 02 	sts	0x02C8, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     54c:	80 93 91 02 	sts	0x0291, r24
     550:	90 93 92 02 	sts	0x0292, r25
     554:	a0 93 93 02 	sts	0x0293, r26
     558:	b0 93 94 02 	sts	0x0294, r27
  kernel.tasks[0].release = 0x00000000;
     55c:	10 92 8d 02 	sts	0x028D, r1
     560:	10 92 8e 02 	sts	0x028E, r1
     564:	10 92 8f 02 	sts	0x028F, r1
     568:	10 92 90 02 	sts	0x0290, r1

  sei(); /* set enabled interrupts */
     56c:	78 94       	sei
}
     56e:	08 95       	ret

00000570 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     570:	8f 92       	push	r8
     572:	9f 92       	push	r9
     574:	af 92       	push	r10
     576:	bf 92       	push	r11
     578:	cf 92       	push	r12
     57a:	df 92       	push	r13
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	49 01       	movw	r8, r18
     58a:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     58c:	f8 94       	cli

  ++kernel.nbrOfTasks;
     58e:	20 91 89 02 	lds	r18, 0x0289
     592:	2f 5f       	subi	r18, 0xFF	; 255
     594:	20 93 89 02 	sts	0x0289, r18

  sp = kernel.memptr;
     598:	c0 91 bf 02 	lds	r28, 0x02BF
     59c:	d0 91 c0 02 	lds	r29, 0x02C0
  kernel.memptr -= stacksize;  // decrease free mem ptr
     5a0:	9e 01       	movw	r18, r28
     5a2:	26 1b       	sub	r18, r22
     5a4:	37 0b       	sbc	r19, r23
     5a6:	30 93 c0 02 	sts	0x02C0, r19
     5aa:	20 93 bf 02 	sts	0x02BF, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     5ae:	88 83       	st	Y, r24
     5b0:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     5b2:	92 93       	st	-Z, r25
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     5b8:	ce 01       	movw	r24, r28
     5ba:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     5bc:	1c 92       	st	X, r1
     5be:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     5c0:	a8 17       	cp	r26, r24
     5c2:	b9 07       	cpc	r27, r25
     5c4:	d9 f7       	brne	.-10     	; 0x5bc <trtCreateTask+0x4c>
     5c6:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     5c8:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     5ca:	d2 92       	st	-Z, r13
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     5d0:	9e 01       	movw	r18, r28
     5d2:	24 52       	subi	r18, 0x24	; 36
     5d4:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     5d6:	1c 92       	st	X, r1
     5d8:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     5da:	a2 17       	cp	r26, r18
     5dc:	b3 07       	cpc	r27, r19
     5de:	d9 f7       	brne	.-10     	; 0x5d6 <trtCreateTask+0x66>
     5e0:	9f 01       	movw	r18, r30
     5e2:	26 50       	subi	r18, 0x06	; 6
     5e4:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     5e6:	e0 91 89 02 	lds	r30, 0x0289
     5ea:	8b e0       	ldi	r24, 0x0B	; 11
     5ec:	e8 9f       	mul	r30, r24
     5ee:	f0 01       	movw	r30, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	e5 57       	subi	r30, 0x75	; 117
     5f4:	fd 4f       	sbci	r31, 0xFD	; 253
  ///*
  t->release = release;
     5f6:	82 82       	std	Z+2, r8	; 0x02
     5f8:	93 82       	std	Z+3, r9	; 0x03
     5fa:	a4 82       	std	Z+4, r10	; 0x04
     5fc:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     5fe:	e6 82       	std	Z+6, r14	; 0x06
     600:	f7 82       	std	Z+7, r15	; 0x07
     602:	00 87       	std	Z+8, r16	; 0x08
     604:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	82 87       	std	Z+10, r24	; 0x0a
  //*/
  t->spl = lo8(sp);       // store stack pointer
     60a:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     60c:	31 83       	std	Z+1, r19	; 0x01
  

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     60e:	0e 94 36 01 	call	0x26c	; 0x26c <__vector_13>

}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	df 90       	pop	r13
     620:	cf 90       	pop	r12
     622:	bf 90       	pop	r11
     624:	af 90       	pop	r10
     626:	9f 90       	pop	r9
     628:	8f 90       	pop	r8
     62a:	08 95       	ret

0000062c <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     62c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     62e:	e9 e8       	ldi	r30, 0x89	; 137
     630:	f2 e0       	ldi	r31, 0x02	; 2
     632:	e8 0f       	add	r30, r24
     634:	f1 1d       	adc	r31, r1
     636:	65 a7       	std	Z+45, r22	; 0x2d
  
  sei(); // set enabled interrupts;
     638:	78 94       	sei
}
     63a:	08 95       	ret

0000063c <trtWait>:

void trtWait(uint8_t semnbr) {
     63c:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     63e:	20 91 8a 02 	lds	r18, 0x028A

  cli(); // disable interrupts
     642:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     644:	e8 2f       	mov	r30, r24
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	ea 54       	subi	r30, 0x4A	; 74
     64a:	fd 4f       	sbci	r31, 0xFD	; 253
  if ((*s) > 0) {
     64c:	80 81       	ld	r24, Z
     64e:	88 23       	and	r24, r24
     650:	19 f0       	breq	.+6      	; 0x658 <trtWait+0x1c>
    (*s)--;
     652:	81 50       	subi	r24, 0x01	; 1
     654:	80 83       	st	Z, r24
     656:	10 c0       	rjmp	.+32     	; 0x678 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	8b e0       	ldi	r24, 0x0B	; 11
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	28 9f       	mul	r18, r24
     660:	f0 01       	movw	r30, r0
     662:	29 9f       	mul	r18, r25
     664:	f0 0d       	add	r31, r0
     666:	38 9f       	mul	r19, r24
     668:	f0 0d       	add	r31, r0
     66a:	11 24       	eor	r1, r1
     66c:	e5 57       	subi	r30, 0x75	; 117
     66e:	fd 4f       	sbci	r31, 0xFD	; 253
     670:	4e 5f       	subi	r20, 0xFE	; 254
     672:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     674:	0e 94 36 01 	call	0x26c	; 0x26c <__vector_13>
  }

  sei(); // reenable interrupts
     678:	78 94       	sei
}
     67a:	08 95       	ret

0000067c <trtSignal>:

void trtSignal(uint8_t semnbr) {
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     684:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     686:	00 91 89 02 	lds	r16, 0x0289
     68a:	e1 e0       	ldi	r30, 0x01	; 1
     68c:	4f ef       	ldi	r20, 0xFF	; 255
     68e:	5f ef       	ldi	r21, 0xFF	; 255
     690:	6f ef       	ldi	r22, 0xFF	; 255
     692:	7f ef       	ldi	r23, 0xFF	; 255
     694:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     696:	8b e0       	ldi	r24, 0x0B	; 11
     698:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     69a:	21 2f       	mov	r18, r17
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	2e 5f       	subi	r18, 0xFE	; 254
     6a0:	3f 4f       	sbci	r19, 0xFF	; 255
     6a2:	1e c0       	rjmp	.+60     	; 0x6e0 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     6a4:	ef 9d       	mul	r30, r15
     6a6:	d0 01       	movw	r26, r0
     6a8:	11 24       	eor	r1, r1
     6aa:	a5 57       	subi	r26, 0x75	; 117
     6ac:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     6ae:	1a 96       	adiw	r26, 0x0a	; 10
     6b0:	8c 91       	ld	r24, X
     6b2:	1a 97       	sbiw	r26, 0x0a	; 10
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	82 17       	cp	r24, r18
     6b8:	93 07       	cpc	r25, r19
     6ba:	69 f4       	brne	.+26     	; 0x6d6 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     6bc:	16 96       	adiw	r26, 0x06	; 6
     6be:	8d 91       	ld	r24, X+
     6c0:	9d 91       	ld	r25, X+
     6c2:	0d 90       	ld	r0, X+
     6c4:	bc 91       	ld	r27, X
     6c6:	a0 2d       	mov	r26, r0
     6c8:	48 17       	cp	r20, r24
     6ca:	59 07       	cpc	r21, r25
     6cc:	6a 07       	cpc	r22, r26
     6ce:	7b 07       	cpc	r23, r27
     6d0:	10 f0       	brcs	.+4      	; 0x6d6 <trtSignal+0x5a>
     6d2:	fe 2f       	mov	r31, r30
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <trtSignal+0x5e>
     6d6:	db 01       	movw	r26, r22
     6d8:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     6da:	ef 5f       	subi	r30, 0xFF	; 255
     6dc:	ac 01       	movw	r20, r24
     6de:	bd 01       	movw	r22, r26
     6e0:	0e 17       	cp	r16, r30
     6e2:	00 f7       	brcc	.-64     	; 0x6a4 <trtSignal+0x28>
  minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     6e4:	ff 23       	and	r31, r31
     6e6:	41 f4       	brne	.+16     	; 0x6f8 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     6e8:	e1 2f       	mov	r30, r17
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	e8 57       	subi	r30, 0x78	; 120
     6ee:	fd 4f       	sbci	r31, 0xFD	; 253
     6f0:	86 a5       	ldd	r24, Z+46	; 0x2e
     6f2:	8f 5f       	subi	r24, 0xFF	; 255
     6f4:	86 a7       	std	Z+46, r24	; 0x2e
     6f6:	11 c0       	rjmp	.+34     	; 0x71a <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     6f8:	2f 2f       	mov	r18, r31
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	8b e0       	ldi	r24, 0x0B	; 11
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	28 9f       	mul	r18, r24
     702:	f0 01       	movw	r30, r0
     704:	29 9f       	mul	r18, r25
     706:	f0 0d       	add	r31, r0
     708:	38 9f       	mul	r19, r24
     70a:	f0 0d       	add	r31, r0
     70c:	11 24       	eor	r1, r1
     70e:	e7 57       	subi	r30, 0x77	; 119
     710:	fd 4f       	sbci	r31, 0xFD	; 253
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     716:	0e 94 36 01 	call	0x26c	; 0x26c <__vector_13>
  }

  sei(); // reenable interrupts
     71a:	78 94       	sei
}
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	08 95       	ret

00000724 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     724:	20 91 84 00 	lds	r18, 0x0084
     728:	30 91 85 00 	lds	r19, 0x0085
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	80 91 c1 02 	lds	r24, 0x02C1
     734:	90 91 c2 02 	lds	r25, 0x02C2
     738:	a0 91 c3 02 	lds	r26, 0x02C3
     73c:	b0 91 c4 02 	lds	r27, 0x02C4
     740:	dc 01       	movw	r26, r24
     742:	99 27       	eor	r25, r25
     744:	88 27       	eor	r24, r24
     746:	28 0f       	add	r18, r24
     748:	39 1f       	adc	r19, r25
     74a:	4a 1f       	adc	r20, r26
     74c:	5b 1f       	adc	r21, r27
}
     74e:	b9 01       	movw	r22, r18
     750:	ca 01       	movw	r24, r20
     752:	08 95       	ret

00000754 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     754:	e0 91 8a 02 	lds	r30, 0x028A
     758:	ab e0       	ldi	r26, 0x0B	; 11
     75a:	ea 9f       	mul	r30, r26
     75c:	f0 01       	movw	r30, r0
     75e:	11 24       	eor	r1, r1
     760:	e5 57       	subi	r30, 0x75	; 117
     762:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     764:	f8 94       	cli

  t->state = TIMEQ;
     766:	a2 e0       	ldi	r26, 0x02	; 2
     768:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     76a:	62 83       	std	Z+2, r22	; 0x02
     76c:	73 83       	std	Z+3, r23	; 0x03
     76e:	84 83       	std	Z+4, r24	; 0x04
     770:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     772:	26 83       	std	Z+6, r18	; 0x06
     774:	37 83       	std	Z+7, r19	; 0x07
     776:	40 87       	std	Z+8, r20	; 0x08
     778:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     77a:	0e 94 36 01 	call	0x26c	; 0x26c <__vector_13>
}
     77e:	08 95       	ret

00000780 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     780:	80 91 8a 02 	lds	r24, 0x028A
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	2b e0       	ldi	r18, 0x0B	; 11
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	82 9f       	mul	r24, r18
     78c:	f0 01       	movw	r30, r0
     78e:	83 9f       	mul	r24, r19
     790:	f0 0d       	add	r31, r0
     792:	92 9f       	mul	r25, r18
     794:	f0 0d       	add	r31, r0
     796:	11 24       	eor	r1, r1
     798:	e7 57       	subi	r30, 0x77	; 119
     79a:	fd 4f       	sbci	r31, 0xFD	; 253
     79c:	df 01       	movw	r26, r30
     79e:	14 96       	adiw	r26, 0x04	; 4
     7a0:	64 81       	ldd	r22, Z+4	; 0x04
     7a2:	11 96       	adiw	r26, 0x01	; 1
     7a4:	7c 91       	ld	r23, X
     7a6:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     7a8:	12 96       	adiw	r26, 0x02	; 2
     7aa:	8c 91       	ld	r24, X
     7ac:	12 97       	sbiw	r26, 0x02	; 2
     7ae:	13 96       	adiw	r26, 0x03	; 3
     7b0:	9c 91       	ld	r25, X
     7b2:	08 95       	ret

000007b4 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     7b4:	80 91 8a 02 	lds	r24, 0x028A
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2b e0       	ldi	r18, 0x0B	; 11
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	82 9f       	mul	r24, r18
     7c0:	f0 01       	movw	r30, r0
     7c2:	83 9f       	mul	r24, r19
     7c4:	f0 0d       	add	r31, r0
     7c6:	92 9f       	mul	r25, r18
     7c8:	f0 0d       	add	r31, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	e7 57       	subi	r30, 0x77	; 119
     7ce:	fd 4f       	sbci	r31, 0xFD	; 253
     7d0:	df 01       	movw	r26, r30
     7d2:	18 96       	adiw	r26, 0x08	; 8
     7d4:	60 85       	ldd	r22, Z+8	; 0x08
     7d6:	11 96       	adiw	r26, 0x01	; 1
     7d8:	7c 91       	ld	r23, X
     7da:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     7dc:	12 96       	adiw	r26, 0x02	; 2
     7de:	8c 91       	ld	r24, X
     7e0:	12 97       	sbiw	r26, 0x02	; 2
     7e2:	13 96       	adiw	r26, 0x03	; 3
     7e4:	9c 91       	ld	r25, X
     7e6:	08 95       	ret

000007e8 <trtTerminate>:

void trtTerminate(void) {

  cli();
     7e8:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     7ea:	80 91 8a 02 	lds	r24, 0x028A
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	2b e0       	ldi	r18, 0x0B	; 11
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	82 9f       	mul	r24, r18
     7f6:	f0 01       	movw	r30, r0
     7f8:	83 9f       	mul	r24, r19
     7fa:	f0 0d       	add	r31, r0
     7fc:	92 9f       	mul	r25, r18
     7fe:	f0 0d       	add	r31, r0
     800:	11 24       	eor	r1, r1
     802:	e7 57       	subi	r30, 0x77	; 119
     804:	fd 4f       	sbci	r31, 0xFD	; 253
     806:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     808:	0e 94 36 01 	call	0x26c	; 0x26c <__vector_13>
}
     80c:	08 95       	ret

0000080e <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     80e:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     810:	e8 2f       	mov	r30, r24
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ea 54       	subi	r30, 0x4A	; 74
     816:	fd 4f       	sbci	r31, 0xFD	; 253
  temp = *s ;
     818:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     81a:	88 23       	and	r24, r24
     81c:	19 f0       	breq	.+6      	; 0x824 <trtAccept+0x16>
    (*s)--;
     81e:	81 50       	subi	r24, 0x01	; 1
     820:	80 83       	st	Z, r24
     822:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     824:	78 94       	sei
  return temp ;
}
     826:	08 95       	ret

00000828 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     828:	87 e6       	ldi	r24, 0x67	; 103
     82a:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     82e:	e1 ec       	ldi	r30, 0xC1	; 193
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	88 e1       	ldi	r24, 0x18	; 24
     834:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     836:	10 92 83 01 	sts	0x0183, r1
     83a:	10 92 82 01 	sts	0x0182, r1
  tx_out = 0;
     83e:	10 92 85 01 	sts	0x0185, r1
     842:	10 92 84 01 	sts	0x0184, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     846:	80 81       	ld	r24, Z
     848:	80 68       	ori	r24, 0x80	; 128
     84a:	80 83       	st	Z, r24
}
     84c:	08 95       	ret

0000084e <__vector_21>:



ISR( USART0_UDRE_vect )
{
     84e:	1f 92       	push	r1
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	0f 92       	push	r0
     856:	0b b6       	in	r0, 0x3b	; 59
     858:	0f 92       	push	r0
     85a:	11 24       	eor	r1, r1
     85c:	2f 93       	push	r18
     85e:	3f 93       	push	r19
     860:	8f 93       	push	r24
     862:	9f 93       	push	r25
     864:	ef 93       	push	r30
     866:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     868:	20 91 82 01 	lds	r18, 0x0182
     86c:	30 91 83 01 	lds	r19, 0x0183
     870:	80 91 84 01 	lds	r24, 0x0184
     874:	90 91 85 01 	lds	r25, 0x0185
     878:	28 17       	cp	r18, r24
     87a:	39 07       	cpc	r19, r25
     87c:	31 f4       	brne	.+12     	; 0x88a <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     87e:	80 91 c1 00 	lds	r24, 0x00C1
     882:	8f 7d       	andi	r24, 0xDF	; 223
     884:	80 93 c1 00 	sts	0x00C1, r24
     888:	1d c0       	rjmp	.+58     	; 0x8c4 <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     88a:	e0 91 84 01 	lds	r30, 0x0184
     88e:	f0 91 85 01 	lds	r31, 0x0185
     892:	ea 57       	subi	r30, 0x7A	; 122
     894:	fe 4f       	sbci	r31, 0xFE	; 254
     896:	80 81       	ld	r24, Z
     898:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     89c:	80 91 84 01 	lds	r24, 0x0184
     8a0:	90 91 85 01 	lds	r25, 0x0185
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	90 93 85 01 	sts	0x0185, r25
     8aa:	80 93 84 01 	sts	0x0184, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     8ae:	80 91 84 01 	lds	r24, 0x0184
     8b2:	90 91 85 01 	lds	r25, 0x0185
     8b6:	88 3c       	cpi	r24, 0xC8	; 200
     8b8:	91 05       	cpc	r25, r1
     8ba:	21 f4       	brne	.+8      	; 0x8c4 <__vector_21+0x76>
     8bc:	10 92 85 01 	sts	0x0185, r1
     8c0:	10 92 84 01 	sts	0x0184, r1
  }
}
     8c4:	ff 91       	pop	r31
     8c6:	ef 91       	pop	r30
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	3f 91       	pop	r19
     8ce:	2f 91       	pop	r18
     8d0:	0f 90       	pop	r0
     8d2:	0b be       	out	0x3b, r0	; 59
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0
     8da:	1f 90       	pop	r1
     8dc:	18 95       	reti

000008de <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     8de:	1f 93       	push	r17
     8e0:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     8e2:	8a 30       	cpi	r24, 0x0A	; 10
     8e4:	19 f4       	brne	.+6      	; 0x8ec <uart_putchar+0xe>
     8e6:	8d e0       	ldi	r24, 0x0D	; 13
     8e8:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
  char i = tx_in;
     8ec:	80 91 82 01 	lds	r24, 0x0182
     8f0:	90 91 83 01 	lds	r25, 0x0183
  i++;
     8f4:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     8f6:	88 3c       	cpi	r24, 0xC8	; 200
     8f8:	09 f4       	brne	.+2      	; 0x8fc <uart_putchar+0x1e>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     8fc:	e0 91 82 01 	lds	r30, 0x0182
     900:	f0 91 83 01 	lds	r31, 0x0183
     904:	ea 57       	subi	r30, 0x7A	; 122
     906:	fe 4f       	sbci	r31, 0xFE	; 254
     908:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     90a:	28 2f       	mov	r18, r24
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	80 91 84 01 	lds	r24, 0x0184
     912:	90 91 85 01 	lds	r25, 0x0185
     916:	28 17       	cp	r18, r24
     918:	39 07       	cpc	r19, r25
     91a:	c9 f3       	breq	.-14     	; 0x90e <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     91c:	30 93 83 01 	sts	0x0183, r19
     920:	20 93 82 01 	sts	0x0182, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     924:	80 91 c1 00 	lds	r24, 0x00C1
     928:	80 62       	ori	r24, 0x20	; 32
     92a:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	1f 91       	pop	r17
     934:	08 95       	ret

00000936 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     936:	1f 92       	push	r1
     938:	0f 92       	push	r0
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	0f 92       	push	r0
     93e:	0b b6       	in	r0, 0x3b	; 59
     940:	0f 92       	push	r0
     942:	11 24       	eor	r1, r1
     944:	2f 93       	push	r18
     946:	3f 93       	push	r19
     948:	4f 93       	push	r20
     94a:	5f 93       	push	r21
     94c:	6f 93       	push	r22
     94e:	7f 93       	push	r23
     950:	8f 93       	push	r24
     952:	9f 93       	push	r25
     954:	af 93       	push	r26
     956:	bf 93       	push	r27
     958:	ef 93       	push	r30
     95a:	ff 93       	push	r31
	trt_rx_c = UDR0;
     95c:	80 91 c6 00 	lds	r24, 0x00C6
     960:	80 93 d1 02 	sts	0x02D1, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSignal>
}
     96a:	ff 91       	pop	r31
     96c:	ef 91       	pop	r30
     96e:	bf 91       	pop	r27
     970:	af 91       	pop	r26
     972:	9f 91       	pop	r25
     974:	8f 91       	pop	r24
     976:	7f 91       	pop	r23
     978:	6f 91       	pop	r22
     97a:	5f 91       	pop	r21
     97c:	4f 91       	pop	r20
     97e:	3f 91       	pop	r19
     980:	2f 91       	pop	r18
     982:	0f 90       	pop	r0
     984:	0b be       	out	0x3b, r0	; 59
     986:	0f 90       	pop	r0
     988:	0f be       	out	0x3f, r0	; 63
     98a:	0f 90       	pop	r0
     98c:	1f 90       	pop	r1
     98e:	18 95       	reti

00000990 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     99e:	80 91 30 01 	lds	r24, 0x0130
     9a2:	90 91 31 01 	lds	r25, 0x0131
     9a6:	89 2b       	or	r24, r25
     9a8:	09 f0       	breq	.+2      	; 0x9ac <uart_getchar+0x1c>
     9aa:	a1 c0       	rjmp	.+322    	; 0xaee <uart_getchar+0x15e>
     9ac:	02 e3       	ldi	r16, 0x32	; 50
     9ae:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	0e 94 1e 03 	call	0x63c	; 0x63c <trtWait>
	if (UCSR0A & _BV(FE0))
     9b6:	80 91 c0 00 	lds	r24, 0x00C0
     9ba:	84 ff       	sbrs	r24, 4
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <uart_getchar+0x34>
     9be:	2e ef       	ldi	r18, 0xFE	; 254
     9c0:	3f ef       	ldi	r19, 0xFF	; 255
     9c2:	a9 c0       	rjmp	.+338    	; 0xb16 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     9c4:	80 91 c0 00 	lds	r24, 0x00C0
     9c8:	83 fd       	sbrc	r24, 3
     9ca:	a3 c0       	rjmp	.+326    	; 0xb12 <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     9cc:	90 91 d1 02 	lds	r25, 0x02D1

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     9d0:	9d 30       	cpi	r25, 0x0D	; 13
     9d2:	11 f0       	breq	.+4      	; 0x9d8 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     9d4:	9a 30       	cpi	r25, 0x0A	; 10
     9d6:	81 f4       	brne	.+32     	; 0x9f8 <uart_getchar+0x68>
	  {
	    *cp = c;
     9d8:	8a e0       	ldi	r24, 0x0A	; 10
     9da:	f8 01       	movw	r30, r16
     9dc:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     9de:	b7 01       	movw	r22, r14
     9e0:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
	    rxp = b;
     9e4:	82 e3       	ldi	r24, 0x32	; 50
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	90 93 31 01 	sts	0x0131, r25
     9ec:	80 93 30 01 	sts	0x0130, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSignal>
     9f6:	7b c0       	rjmp	.+246    	; 0xaee <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     9f8:	99 30       	cpi	r25, 0x09	; 9
     9fa:	09 f4       	brne	.+2      	; 0x9fe <uart_getchar+0x6e>
     9fc:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     9fe:	89 2f       	mov	r24, r25
     a00:	80 52       	subi	r24, 0x20	; 32
     a02:	8f 35       	cpi	r24, 0x5F	; 95
     a04:	10 f0       	brcs	.+4      	; 0xa0a <uart_getchar+0x7a>
     a06:	90 3a       	cpi	r25, 0xA0	; 160
     a08:	70 f0       	brcs	.+28     	; 0xa26 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     a0a:	f1 e0       	ldi	r31, 0x01	; 1
     a0c:	01 38       	cpi	r16, 0x81	; 129
     a0e:	1f 07       	cpc	r17, r31
     a10:	11 f4       	brne	.+4      	; 0xa16 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     a12:	87 e0       	ldi	r24, 0x07	; 7
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     a16:	f8 01       	movw	r30, r16
     a18:	91 93       	st	Z+, r25
     a1a:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     a1c:	89 2f       	mov	r24, r25
     a1e:	b7 01       	movw	r22, r14
     a20:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
     a24:	c5 cf       	rjmp	.-118    	; 0x9b0 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     a26:	92 31       	cpi	r25, 0x12	; 18
     a28:	39 f1       	breq	.+78     	; 0xa78 <uart_getchar+0xe8>
     a2a:	93 31       	cpi	r25, 0x13	; 19
     a2c:	38 f4       	brcc	.+14     	; 0xa3c <uart_getchar+0xac>
     a2e:	93 30       	cpi	r25, 0x03	; 3
     a30:	09 f4       	brne	.+2      	; 0xa34 <uart_getchar+0xa4>
     a32:	6f c0       	rjmp	.+222    	; 0xb12 <uart_getchar+0x182>
     a34:	98 30       	cpi	r25, 0x08	; 8
     a36:	09 f0       	breq	.+2      	; 0xa3a <uart_getchar+0xaa>
     a38:	bb cf       	rjmp	.-138    	; 0x9b0 <uart_getchar+0x20>
     a3a:	09 c0       	rjmp	.+18     	; 0xa4e <uart_getchar+0xbe>
     a3c:	97 31       	cpi	r25, 0x17	; 23
     a3e:	09 f4       	brne	.+2      	; 0xa42 <uart_getchar+0xb2>
     a40:	4b c0       	rjmp	.+150    	; 0xad8 <uart_getchar+0x148>
     a42:	9f 37       	cpi	r25, 0x7F	; 127
     a44:	21 f0       	breq	.+8      	; 0xa4e <uart_getchar+0xbe>
     a46:	95 31       	cpi	r25, 0x15	; 21
     a48:	09 f0       	breq	.+2      	; 0xa4c <uart_getchar+0xbc>
     a4a:	b2 cf       	rjmp	.-156    	; 0x9b0 <uart_getchar+0x20>
     a4c:	32 c0       	rjmp	.+100    	; 0xab2 <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     a4e:	f1 e0       	ldi	r31, 0x01	; 1
     a50:	02 33       	cpi	r16, 0x32	; 50
     a52:	1f 07       	cpc	r17, r31
     a54:	09 f0       	breq	.+2      	; 0xa58 <uart_getchar+0xc8>
     a56:	08 f4       	brcc	.+2      	; 0xa5a <uart_getchar+0xca>
     a58:	ab cf       	rjmp	.-170    	; 0x9b0 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     a5a:	88 e0       	ldi	r24, 0x08	; 8
     a5c:	b7 01       	movw	r22, r14
     a5e:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
		uart_putchar(' ', stream);
     a62:	80 e2       	ldi	r24, 0x20	; 32
     a64:	b7 01       	movw	r22, r14
     a66:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
		uart_putchar('\b', stream);
     a6a:	88 e0       	ldi	r24, 0x08	; 8
     a6c:	b7 01       	movw	r22, r14
     a6e:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
		cp--;
     a72:	01 50       	subi	r16, 0x01	; 1
     a74:	10 40       	sbci	r17, 0x00	; 0
     a76:	9c cf       	rjmp	.-200    	; 0x9b0 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     a78:	8d e0       	ldi	r24, 0x0D	; 13
     a7a:	b7 01       	movw	r22, r14
     a7c:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
     a80:	c2 e3       	ldi	r28, 0x32	; 50
     a82:	d1 e0       	ldi	r29, 0x01	; 1
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     a86:	89 91       	ld	r24, Y+
     a88:	b7 01       	movw	r22, r14
     a8a:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     a8e:	c0 17       	cp	r28, r16
     a90:	d1 07       	cpc	r29, r17
     a92:	c8 f3       	brcs	.-14     	; 0xa86 <uart_getchar+0xf6>
     a94:	8d cf       	rjmp	.-230    	; 0x9b0 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     a96:	88 e0       	ldi	r24, 0x08	; 8
     a98:	b7 01       	movw	r22, r14
     a9a:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
		uart_putchar(' ', stream);
     a9e:	80 e2       	ldi	r24, 0x20	; 32
     aa0:	b7 01       	movw	r22, r14
     aa2:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
		uart_putchar('\b', stream);
     aa6:	88 e0       	ldi	r24, 0x08	; 8
     aa8:	b7 01       	movw	r22, r14
     aaa:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
		cp--;
     aae:	01 50       	subi	r16, 0x01	; 1
     ab0:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	02 33       	cpi	r16, 0x32	; 50
     ab6:	18 07       	cpc	r17, r24
     ab8:	09 f0       	breq	.+2      	; 0xabc <uart_getchar+0x12c>
     aba:	68 f7       	brcc	.-38     	; 0xa96 <uart_getchar+0x106>
     abc:	79 cf       	rjmp	.-270    	; 0x9b0 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     abe:	88 e0       	ldi	r24, 0x08	; 8
     ac0:	b7 01       	movw	r22, r14
     ac2:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
		uart_putchar(' ', stream);
     ac6:	80 e2       	ldi	r24, 0x20	; 32
     ac8:	b7 01       	movw	r22, r14
     aca:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
		uart_putchar('\b', stream);
     ace:	88 e0       	ldi	r24, 0x08	; 8
     ad0:	b7 01       	movw	r22, r14
     ad2:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_putchar>
     ad6:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     ad8:	e1 e0       	ldi	r30, 0x01	; 1
     ada:	02 33       	cpi	r16, 0x32	; 50
     adc:	1e 07       	cpc	r17, r30
     ade:	09 f0       	breq	.+2      	; 0xae2 <uart_getchar+0x152>
     ae0:	08 f4       	brcc	.+2      	; 0xae4 <uart_getchar+0x154>
     ae2:	66 cf       	rjmp	.-308    	; 0x9b0 <uart_getchar+0x20>
     ae4:	e8 01       	movw	r28, r16
     ae6:	8a 91       	ld	r24, -Y
     ae8:	80 32       	cpi	r24, 0x20	; 32
     aea:	49 f7       	brne	.-46     	; 0xabe <uart_getchar+0x12e>
     aec:	61 cf       	rjmp	.-318    	; 0x9b0 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     aee:	e0 91 30 01 	lds	r30, 0x0130
     af2:	f0 91 31 01 	lds	r31, 0x0131
     af6:	81 91       	ld	r24, Z+
     af8:	f0 93 31 01 	sts	0x0131, r31
     afc:	e0 93 30 01 	sts	0x0130, r30
  if (c == '\n')
     b00:	8a 30       	cpi	r24, 0x0A	; 10
     b02:	21 f4       	brne	.+8      	; 0xb0c <uart_getchar+0x17c>
    rxp = 0;
     b04:	10 92 31 01 	sts	0x0131, r1
     b08:	10 92 30 01 	sts	0x0130, r1

  return c;
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <uart_getchar+0x186>
     b12:	2f ef       	ldi	r18, 0xFF	; 255
     b14:	3f ef       	ldi	r19, 0xFF	; 255
}
     b16:	c9 01       	movw	r24, r18
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	08 95       	ret

00000b26 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     b26:	28 2f       	mov	r18, r24
     b28:	20 7f       	andi	r18, 0xF0	; 240
     b2a:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     b2c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     b2e:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b30:	20 e4       	ldi	r18, 0x40	; 64
     b32:	3f e1       	ldi	r19, 0x1F	; 31
     b34:	f9 01       	movw	r30, r18
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     b3a:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     b3c:	40 98       	cbi	0x08, 0	; 8
     b3e:	f9 01       	movw	r30, r18
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	74 e0       	ldi	r23, 0x04	; 4
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	7a 95       	dec	r23
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <LCDsendChar+0x22>
     b50:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     b52:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     b54:	42 9a       	sbi	0x08, 2	; 8
     b56:	c9 01       	movw	r24, r18
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     b5c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     b5e:	40 98       	cbi	0x08, 0	; 8
     b60:	c9 01       	movw	r24, r18
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     b66:	08 95       	ret

00000b68 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     b68:	28 2f       	mov	r18, r24
     b6a:	20 7f       	andi	r18, 0xF0	; 240
     b6c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     b6e:	42 9a       	sbi	0x08, 2	; 8
     b70:	20 e4       	ldi	r18, 0x40	; 64
     b72:	3f e1       	ldi	r19, 0x1F	; 31
     b74:	f9 01       	movw	r30, r18
     b76:	31 97       	sbiw	r30, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b7a:	42 98       	cbi	0x08, 2	; 8
     b7c:	f9 01       	movw	r30, r18
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	e4 e0       	ldi	r30, 0x04	; 4
     b86:	88 0f       	add	r24, r24
     b88:	99 1f       	adc	r25, r25
     b8a:	ea 95       	dec	r30
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <LCDsendCommand+0x1e>
     b8e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     b90:	42 9a       	sbi	0x08, 2	; 8
     b92:	c9 01       	movw	r24, r18
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b98:	42 98       	cbi	0x08, 2	; 8
     b9a:	c9 01       	movw	r24, r18
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     ba0:	08 95       	ret

00000ba2 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
}
     ba8:	08 95       	ret

00000baa <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
}
     bb0:	08 95       	ret

00000bb2 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	49 f0       	breq	.+18     	; 0xbd2 <LCDstring+0x20>
     bc0:	ec 01       	movw	r28, r24
     bc2:	10 e0       	ldi	r17, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     bc6:	89 91       	ld	r24, Y+
     bc8:	0e 94 93 05 	call	0xb26	; 0xb26 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     bcc:	1f 5f       	subi	r17, 0xFF	; 255
     bce:	10 17       	cp	r17, r16
     bd0:	d0 f3       	brcs	.-12     	; 0xbc6 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     bdc:	62 30       	cpi	r22, 0x02	; 2
     bde:	31 f0       	breq	.+12     	; 0xbec <LCDGotoXY+0x10>
     be0:	63 30       	cpi	r22, 0x03	; 3
     be2:	31 f0       	breq	.+12     	; 0xbf0 <LCDGotoXY+0x14>
     be4:	61 30       	cpi	r22, 0x01	; 1
     be6:	29 f4       	brne	.+10     	; 0xbf2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     be8:	80 5c       	subi	r24, 0xC0	; 192
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     bec:	8c 5e       	subi	r24, 0xEC	; 236
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     bf0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     bf2:	80 68       	ori	r24, 0x80	; 128
     bf4:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
	
}
     bf8:	08 95       	ret

00000bfa <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	ec 01       	movw	r28, r24
     c02:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     c04:	64 2f       	mov	r22, r20
     c06:	0e 94 ee 05 	call	0xbdc	; 0xbdc <LCDGotoXY>
     c0a:	10 e0       	ldi	r17, 0x00	; 0
     c0c:	03 c0       	rjmp	.+6      	; 0xc14 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     c0e:	0e 94 93 05 	call	0xb26	; 0xb26 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     c12:	1f 5f       	subi	r17, 0xFF	; 255
     c14:	fe 01       	movw	r30, r28
     c16:	e1 0f       	add	r30, r17
     c18:	f1 1d       	adc	r31, r1
     c1a:	84 91       	lpm	r24, Z+
     c1c:	88 23       	and	r24, r24
     c1e:	b9 f7       	brne	.-18     	; 0xc0e <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	08 95       	ret

00000c28 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	7c 01       	movw	r14, r24
     c36:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     c38:	11 0f       	add	r17, r17
     c3a:	11 0f       	add	r17, r17
     c3c:	11 0f       	add	r17, r17
     c3e:	10 64       	ori	r17, 0x40	; 64
     c40:	c0 e0       	ldi	r28, 0x00	; 0
     c42:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     c44:	f7 01       	movw	r30, r14
     c46:	ec 0f       	add	r30, r28
     c48:	fd 1f       	adc	r31, r29
     c4a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     c4c:	81 2f       	mov	r24, r17
     c4e:	8c 0f       	add	r24, r28
     c50:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
		LCDsendChar(pcc);
     c54:	80 2f       	mov	r24, r16
     c56:	0e 94 93 05 	call	0xb26	; 0xb26 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     c5a:	21 96       	adiw	r28, 0x01	; 1
     c5c:	c8 30       	cpi	r28, 0x08	; 8
     c5e:	d1 05       	cpc	r29, r1
     c60:	89 f7       	brne	.-30     	; 0xc44 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	08 95       	ret

00000c70 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	80 e6       	ldi	r24, 0x60	; 96
     c78:	9a ee       	ldi	r25, 0xEA	; 234
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     c7e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     c80:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     c82:	87 b1       	in	r24, 0x07	; 7
     c84:	80 6f       	ori	r24, 0xF0	; 240
     c86:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     c88:	87 b1       	in	r24, 0x07	; 7
     c8a:	87 60       	ori	r24, 0x07	; 7
     c8c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     c8e:	80 e3       	ldi	r24, 0x30	; 48
     c90:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c92:	42 9a       	sbi	0x08, 2	; 8
     c94:	20 e4       	ldi	r18, 0x40	; 64
     c96:	3f e1       	ldi	r19, 0x1F	; 31
     c98:	f9 01       	movw	r30, r18
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     c9e:	42 98       	cbi	0x08, 2	; 8
     ca0:	f9 01       	movw	r30, r18
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     ca6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ca8:	42 9a       	sbi	0x08, 2	; 8
     caa:	c9 01       	movw	r24, r18
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     cb0:	42 98       	cbi	0x08, 2	; 8
     cb2:	c9 01       	movw	r24, r18
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     cb8:	80 e2       	ldi	r24, 0x20	; 32
     cba:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     cbc:	42 9a       	sbi	0x08, 2	; 8
     cbe:	c9 01       	movw	r24, r18
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     cc4:	42 98       	cbi	0x08, 2	; 8
     cc6:	c9 01       	movw	r24, r18
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     ccc:	88 e2       	ldi	r24, 0x28	; 40
     cce:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     cd2:	8c e0       	ldi	r24, 0x0C	; 12
     cd4:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
     cd8:	c1 ee       	ldi	r28, 0xE1	; 225
     cda:	d0 e0       	ldi	r29, 0x00	; 0
     cdc:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     cde:	16 2f       	mov	r17, r22
     ce0:	1f 5f       	subi	r17, 0xFF	; 255
     ce2:	ce 01       	movw	r24, r28
     ce4:	0e 94 14 06 	call	0xc28	; 0xc28 <LCDdefinechar>
     ce8:	28 96       	adiw	r28, 0x08	; 8
     cea:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     cec:	18 30       	cpi	r17, 0x08	; 8
     cee:	b9 f7       	brne	.-18     	; 0xcde <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	08 95       	ret

00000cf8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	08 2f       	mov	r16, r24
     cfe:	10 e0       	ldi	r17, 0x00	; 0
     d00:	04 c0       	rjmp	.+8      	; 0xd0a <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     d02:	8e e1       	ldi	r24, 0x1E	; 30
     d04:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     d08:	1f 5f       	subi	r17, 0xFF	; 255
     d0a:	10 17       	cp	r17, r16
     d0c:	d0 f3       	brcs	.-12     	; 0xd02 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	08 2f       	mov	r16, r24
     d1a:	10 e0       	ldi	r17, 0x00	; 0
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     d1e:	88 e1       	ldi	r24, 0x18	; 24
     d20:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     d24:	1f 5f       	subi	r17, 0xFF	; 255
     d26:	10 17       	cp	r17, r16
     d28:	d0 f3       	brcs	.-12     	; 0xd1e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     d30:	8e e0       	ldi	r24, 0x0E	; 14
     d32:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
}
     d36:	08 95       	ret

00000d38 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     d38:	8f e0       	ldi	r24, 0x0F	; 15
     d3a:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
}
     d3e:	08 95       	ret

00000d40 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     d40:	8c e0       	ldi	r24, 0x0C	; 12
     d42:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
}
     d46:	08 95       	ret

00000d48 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     d48:	88 e0       	ldi	r24, 0x08	; 8
     d4a:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
}
     d4e:	08 95       	ret

00000d50 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     d50:	8c e0       	ldi	r24, 0x0C	; 12
     d52:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
}
     d56:	08 95       	ret

00000d58 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	08 2f       	mov	r16, r24
     d5e:	10 e0       	ldi	r17, 0x00	; 0
     d60:	04 c0       	rjmp	.+8      	; 0xd6a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     d62:	80 e1       	ldi	r24, 0x10	; 16
     d64:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     d68:	1f 5f       	subi	r17, 0xFF	; 255
     d6a:	10 17       	cp	r17, r16
     d6c:	d0 f3       	brcs	.-12     	; 0xd62 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	08 2f       	mov	r16, r24
     d7a:	10 e0       	ldi	r17, 0x00	; 0
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     d7e:	84 e1       	ldi	r24, 0x14	; 20
     d80:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     d84:	1f 5f       	subi	r17, 0xFF	; 255
     d86:	10 17       	cp	r17, r16
     d88:	d0 f3       	brcs	.-12     	; 0xd7e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	08 95       	ret

00000d90 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     da0:	96 e0       	ldi	r25, 0x06	; 6
     da2:	89 9f       	mul	r24, r25
     da4:	c0 01       	movw	r24, r0
     da6:	11 24       	eor	r1, r1
     da8:	24 2f       	mov	r18, r20
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	ac 01       	movw	r20, r24
     dae:	42 9f       	mul	r20, r18
     db0:	c0 01       	movw	r24, r0
     db2:	43 9f       	mul	r20, r19
     db4:	90 0d       	add	r25, r0
     db6:	52 9f       	mul	r21, r18
     db8:	90 0d       	add	r25, r0
     dba:	11 24       	eor	r1, r1
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__divmodhi4>
     dc2:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     dc4:	cb 01       	movw	r24, r22
     dc6:	66 e0       	ldi	r22, 0x06	; 6
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodhi4>
     dce:	e8 2e       	mov	r14, r24
     dd0:	ff 24       	eor	r15, r15
     dd2:	00 e0       	ldi	r16, 0x00	; 0
     dd4:	10 e0       	ldi	r17, 0x00	; 0
     dd6:	12 c0       	rjmp	.+36     	; 0xdfc <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     dd8:	c8 01       	movw	r24, r16
     dda:	05 96       	adiw	r24, 0x05	; 5
     ddc:	c8 17       	cp	r28, r24
     dde:	d9 07       	cpc	r29, r25
     de0:	10 f0       	brcs	.+4      	; 0xde6 <LCDprogressBar+0x56>
     de2:	85 e0       	ldi	r24, 0x05	; 5
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     de6:	c0 17       	cp	r28, r16
     de8:	d1 07       	cpc	r29, r17
     dea:	10 f0       	brcs	.+4      	; 0xdf0 <LCDprogressBar+0x60>
     dec:	8e 2d       	mov	r24, r14
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <LCDprogressBar+0x62>
     df0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     df2:	0e 94 93 05 	call	0xb26	; 0xb26 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     df6:	f3 94       	inc	r15
     df8:	0a 5f       	subi	r16, 0xFA	; 250
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
     dfc:	fd 14       	cp	r15, r13
     dfe:	60 f3       	brcs	.-40     	; 0xdd8 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	08 95       	ret

00000e10 <__vector_1>:

/********************************************************************/
// 							ISRs & Helper Functions
/********************************************************************/
// --- external interrupt ISR ------------------------
ISR (INT0_vect) {
     e10:	1f 92       	push	r1
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	0f 92       	push	r0
     e18:	0b b6       	in	r0, 0x3b	; 59
     e1a:	0f 92       	push	r0
     e1c:	11 24       	eor	r1, r1
     e1e:	2f 93       	push	r18
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	ef 93       	push	r30
     e26:	ff 93       	push	r31
        motor_period = TCNT2 + motor_period_ovlf  ;
     e28:	e2 eb       	ldi	r30, 0xB2	; 178
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	20 81       	ld	r18, Z
     e2e:	80 91 87 02 	lds	r24, 0x0287
     e32:	90 91 88 02 	lds	r25, 0x0288
     e36:	82 0f       	add	r24, r18
     e38:	91 1d       	adc	r25, r1
     e3a:	90 93 d3 02 	sts	0x02D3, r25
     e3e:	80 93 d2 02 	sts	0x02D2, r24
        TCNT2 = 0 ;
     e42:	10 82       	st	Z, r1
        motor_period_ovlf = 0 ;
     e44:	10 92 88 02 	sts	0x0288, r1
     e48:	10 92 87 02 	sts	0x0287, r1
        flag = TRUE;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 2e 01 	sts	0x012E, r24
}
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	9f 91       	pop	r25
     e58:	8f 91       	pop	r24
     e5a:	2f 91       	pop	r18
     e5c:	0f 90       	pop	r0
     e5e:	0b be       	out	0x3b, r0	; 59
     e60:	0f 90       	pop	r0
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	0f 90       	pop	r0
     e66:	1f 90       	pop	r1
     e68:	18 95       	reti

00000e6a <__vector_11>:
// --- set up extra 8 bits on timer 2 ----------------
ISR (TIMER2_OVF_vect) {
     e6a:	1f 92       	push	r1
     e6c:	0f 92       	push	r0
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	0f 92       	push	r0
     e72:	11 24       	eor	r1, r1
     e74:	8f 93       	push	r24
     e76:	9f 93       	push	r25
        motor_period_ovlf = motor_period_ovlf + 256 ;
     e78:	80 91 87 02 	lds	r24, 0x0287
     e7c:	90 91 88 02 	lds	r25, 0x0288
     e80:	80 50       	subi	r24, 0x00	; 0
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	90 93 88 02 	sts	0x0288, r25
     e88:	80 93 87 02 	sts	0x0287, r24
        pid_ready = TRUE;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	80 93 2f 01 	sts	0x012F, r24
		
}
     e92:	9f 91       	pop	r25
     e94:	8f 91       	pop	r24
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <init_lcd>:

//**********************************************************
// LCD setup
void init_lcd(void) {
	LCDinit();	//initialize the display
     ea0:	0e 94 38 06 	call	0xc70	; 0xc70 <LCDinit>
	LCDcursorOFF();
     ea4:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCDcursorOFF>
	LCDclr();				//clear the display
     ea8:	0e 94 d1 05 	call	0xba2	; 0xba2 <LCDclr>
	LCDGotoXY(0,0);
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <LCDGotoXY>
}
     eb4:	08 95       	ret

00000eb6 <init_pwm>:

//**********************************************************
// pwm setup
void init_pwm(){
	DDRB = 0;
     eb6:	14 b8       	out	0x04, r1	; 4
	DDRB |= OUTPUT_PIN;
     eb8:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= OUTPUT_PIN2 ;
     eba:	24 9a       	sbi	0x04, 4	; 4

	TIMSK0 = 0;
     ebc:	10 92 6e 00 	sts	0x006E, r1
	TIMSK2 |= TIMER2_OVERFLOW_INTERRUPT_ENABLE;
     ec0:	e0 e7       	ldi	r30, 0x70	; 112
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	80 83       	st	Z, r24
	//turn on fast PWM and OC0A - output 
	TCCR0A = 0;
     eca:	14 bc       	out	0x24, r1	; 36
	//divide PWM clock by 1024 
	TCCR0B = 3;// (1 << CS01)  |( 1 << CS00 )  ;
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	85 bd       	out	0x25, r24	; 37
	TCCR0A = /*(1<<COM0A0)*/ (1<<COM0A1) | (1<<COM0B1) | (1 << WGM02) | (1<<WGM00) | (1<<WGM01) ; 
     ed0:	8b ea       	ldi	r24, 0xAB	; 171
     ed2:	84 bd       	out	0x24, r24	; 36

	OCR0A = 128;
     ed4:	80 e8       	ldi	r24, 0x80	; 128
     ed6:	87 bd       	out	0x27, r24	; 39
	OCR0B = 128;
     ed8:	88 bd       	out	0x28, r24	; 40
}
     eda:	08 95       	ret

00000edc <initialize>:

//********************************************************** 
//Set it all up
void initialize(void) {
  DDRC = 0xff;    	// led connections
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	87 b9       	out	0x07, r24	; 7
  PORTC = 0x00;
     ee0:	18 b8       	out	0x08, r1	; 8
  //DDRB = 0x00; 		// switch connections
  //PORTB = 0xff; 	// pullup on

  //******************** 
  //initialize variables
  trtWait(SEM_SHARED) ;
     ee2:	84 e0       	ldi	r24, 0x04	; 4
     ee4:	0e 94 1e 03 	call	0x63c	; 0x63c <trtWait>
  speed = 1000;
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	aa e7       	ldi	r26, 0x7A	; 122
     eee:	b4 e4       	ldi	r27, 0x44	; 68
     ef0:	80 93 cd 02 	sts	0x02CD, r24
     ef4:	90 93 ce 02 	sts	0x02CE, r25
     ef8:	a0 93 cf 02 	sts	0x02CF, r26
     efc:	b0 93 d0 02 	sts	0x02D0, r27
  real_speed = 0;
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	80 93 83 02 	sts	0x0283, r24
     f0c:	90 93 84 02 	sts	0x0284, r25
     f10:	a0 93 85 02 	sts	0x0285, r26
     f14:	b0 93 86 02 	sts	0x0286, r27
  prop_gain = 10;
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a0 e2       	ldi	r26, 0x20	; 32
     f1e:	b1 e4       	ldi	r27, 0x41	; 65
     f20:	80 93 c9 02 	sts	0x02C9, r24
     f24:	90 93 ca 02 	sts	0x02CA, r25
     f28:	a0 93 cb 02 	sts	0x02CB, r26
     f2c:	b0 93 cc 02 	sts	0x02CC, r27
  diff_gain = .2;
     f30:	8d ec       	ldi	r24, 0xCD	; 205
     f32:	9c ec       	ldi	r25, 0xCC	; 204
     f34:	ac e4       	ldi	r26, 0x4C	; 76
     f36:	be e3       	ldi	r27, 0x3E	; 62
     f38:	80 93 67 02 	sts	0x0267, r24
     f3c:	90 93 68 02 	sts	0x0268, r25
     f40:	a0 93 69 02 	sts	0x0269, r26
     f44:	b0 93 6a 02 	sts	0x026A, r27
  int_gain = 1; 
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e8       	ldi	r26, 0x80	; 128
     f4e:	bf e3       	ldi	r27, 0x3F	; 63
     f50:	80 93 4e 02 	sts	0x024E, r24
     f54:	90 93 4f 02 	sts	0x024F, r25
     f58:	a0 93 50 02 	sts	0x0250, r26
     f5c:	b0 93 51 02 	sts	0x0251, r27
  trtSignal(SEM_SHARED) ;
     f60:	84 e0       	ldi	r24, 0x04	; 4
     f62:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSignal>

  //******************** 
  //init LCD
  init_lcd();
     f66:	0e 94 50 07 	call	0xea0	; 0xea0 <init_lcd>
  LCDclr();
     f6a:	0e 94 d1 05 	call	0xba2	; 0xba2 <LCDclr>
  // put some stuff on LCD
  CopyStringtoLCD(LCD_line1, 0, 0);//start at char=0 line=0
     f6e:	81 e2       	ldi	r24, 0x21	; 33
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	0e 94 fd 05 	call	0xbfa	; 0xbfa <CopyStringtoLCD>
  CopyStringtoLCD(LCD_line2, 0, 1); 
     f7a:	88 e2       	ldi	r24, 0x28	; 40
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	0e 94 fd 05 	call	0xbfa	; 0xbfa <CopyStringtoLCD>
  //******************** 
  //set up INT0
  EIMSK = (1 << INT0) ; // turn on int0
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	9d bb       	out	0x1d, r25	; 29
  EICRA = 3 ;       // rising edge
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	80 93 69 00 	sts	0x0069, r24
  // turn on timer 2 to be read in int0 ISR
  TCCR2B = 7 ; // divide by 1024
     f90:	87 e0       	ldi	r24, 0x07	; 7
     f92:	80 93 b1 00 	sts	0x00B1, r24
  // turn on timer 2 overflow ISR for double precision time
  TIMSK2 = 1 ;
     f96:	90 93 70 00 	sts	0x0070, r25
  
  //********************
  //set up PWM
  init_pwm();
     f9a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <init_pwm>

  //********************
  //crank up the ISRs
  sei();
     f9e:	78 94       	sei
}  
     fa0:	08 95       	ret

00000fa2 <cycles_to_rpm>:
motor period cycles       1 second        1 minute         7
-------------------   *   ---------  *   ----------    * -------------- 
    		            15,625 cycles     60 seconds      1 rotation

*/
double cycles_to_rpm(int cycles, int frequency){
     fa2:	af 92       	push	r10
     fa4:	bf 92       	push	r11
     fa6:	cf 92       	push	r12
     fa8:	df 92       	push	r13
     faa:	ef 92       	push	r14
     fac:	ff 92       	push	r15
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	7c 01       	movw	r14, r24
     fb4:	88 27       	eor	r24, r24
     fb6:	77 fd       	sbrc	r23, 7
     fb8:	80 95       	com	r24
     fba:	98 2f       	mov	r25, r24
     fbc:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e7       	ldi	r20, 0x70	; 112
     fc6:	52 e4       	ldi	r21, 0x42	; 66
     fc8:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     fcc:	5b 01       	movw	r10, r22
     fce:	6c 01       	movw	r12, r24
     fd0:	00 27       	eor	r16, r16
     fd2:	f7 fc       	sbrc	r15, 7
     fd4:	00 95       	com	r16
     fd6:	10 2f       	mov	r17, r16
     fd8:	c8 01       	movw	r24, r16
     fda:	b7 01       	movw	r22, r14
     fdc:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 ee       	ldi	r20, 0xE0	; 224
     fe6:	50 e4       	ldi	r21, 0x40	; 64
     fe8:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     fec:	9b 01       	movw	r18, r22
     fee:	ac 01       	movw	r20, r24
     ff0:	c6 01       	movw	r24, r12
     ff2:	b5 01       	movw	r22, r10
     ff4:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <__divsf3>
	return  (   (60*((double)frequency)) / ((double) cycles * 7) );
}
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	df 90       	pop	r13
    1002:	cf 90       	pop	r12
    1004:	bf 90       	pop	r11
    1006:	af 90       	pop	r10
    1008:	08 95       	ret

0000100a <rpm_to_cycles>:
	1 minute       60 seconds       1 rotation    15, 625 cycles 

same conversion factor?? WTH?
*/

double rpm_to_cycles(int rpm, int frequency){
    100a:	af 92       	push	r10
    100c:	bf 92       	push	r11
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	7c 01       	movw	r14, r24
    101c:	88 27       	eor	r24, r24
    101e:	77 fd       	sbrc	r23, 7
    1020:	80 95       	com	r24
    1022:	98 2f       	mov	r25, r24
    1024:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e7       	ldi	r20, 0x70	; 112
    102e:	52 e4       	ldi	r21, 0x42	; 66
    1030:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    1034:	5b 01       	movw	r10, r22
    1036:	6c 01       	movw	r12, r24
    1038:	00 27       	eor	r16, r16
    103a:	f7 fc       	sbrc	r15, 7
    103c:	00 95       	com	r16
    103e:	10 2f       	mov	r17, r16
    1040:	c8 01       	movw	r24, r16
    1042:	b7 01       	movw	r22, r14
    1044:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 ee       	ldi	r20, 0xE0	; 224
    104e:	50 e4       	ldi	r21, 0x40	; 64
    1050:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    1054:	9b 01       	movw	r18, r22
    1056:	ac 01       	movw	r20, r24
    1058:	c6 01       	movw	r24, r12
    105a:	b5 01       	movw	r22, r10
    105c:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <__divsf3>
	return ( (60*((double)frequency)) / ((double) rpm * 7) );
}
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	bf 90       	pop	r11
    106e:	af 90       	pop	r10
    1070:	08 95       	ret

00001072 <set_input>:

//set control input to the system
//sets the output from the controller 
// as input to the system
void set_input( int8_t input_value){
    1072:	48 2f       	mov	r20, r24
		fprintf(stdout, "Another Fuck you\n\r");
		OCR0A = 255;
	}
	*/

	if ( OCR0A + input_value > 255 || OCR0A + input_value < 1 ) {
    1074:	87 b5       	in	r24, 0x27	; 39
    1076:	24 2f       	mov	r18, r20
    1078:	33 27       	eor	r19, r19
    107a:	27 fd       	sbrc	r18, 7
    107c:	30 95       	com	r19
    107e:	b9 01       	movw	r22, r18
    1080:	68 0f       	add	r22, r24
    1082:	71 1d       	adc	r23, r1
    1084:	6f 3f       	cpi	r22, 0xFF	; 255
    1086:	71 05       	cpc	r23, r1
    1088:	09 f0       	breq	.+2      	; 0x108c <set_input+0x1a>
    108a:	4c f4       	brge	.+18     	; 0x109e <set_input+0x2c>
    108c:	87 b5       	in	r24, 0x27	; 39
    108e:	28 0f       	add	r18, r24
    1090:	31 1d       	adc	r19, r1
    1092:	12 16       	cp	r1, r18
    1094:	13 06       	cpc	r1, r19
    1096:	1c f4       	brge	.+6      	; 0x109e <set_input+0x2c>
		return;
	}
	else {
		OCR0A += input_value;
    1098:	87 b5       	in	r24, 0x27	; 39
    109a:	84 0f       	add	r24, r20
    109c:	87 bd       	out	0x27, r24	; 39
    109e:	08 95       	ret

000010a0 <main>:
	}

}

// --- Main Program ----------------------------------
int main(void) {
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
    10ac:	0e 94 14 04 	call	0x828	; 0x828 <trt_uart_init>
  stdout = stdin = stderr = &uart0;
    10b0:	6f e1       	ldi	r22, 0x1F	; 31
    10b2:	71 e0       	ldi	r23, 0x01	; 1
    10b4:	70 93 dd 02 	sts	0x02DD, r23
    10b8:	60 93 dc 02 	sts	0x02DC, r22
    10bc:	70 93 d9 02 	sts	0x02D9, r23
    10c0:	60 93 d8 02 	sts	0x02D8, r22
    10c4:	70 93 db 02 	sts	0x02DB, r23
    10c8:	60 93 da 02 	sts	0x02DA, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	0e 94 39 18 	call	0x3072	; 0x3072 <fputs>
    // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
    10d4:	80 e5       	ldi	r24, 0x50	; 80
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    10dc:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    10de:	10 92 b7 02 	sts	0x02B7, r1
  
  sei(); // set enabled interrupts;
    10e2:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    10e4:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    10e6:	10 92 b8 02 	sts	0x02B8, r1
  
  sei(); // set enabled interrupts;
    10ea:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    10ec:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	80 93 ba 02 	sts	0x02BA, r24
  
  sei(); // set enabled interrupts;
    10f4:	78 94       	sei

  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variable

  // --- create tasks  ----------------
  trtCreateTask(serialComm, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[0]));
    10f6:	8f ee       	ldi	r24, 0xEF	; 239
    10f8:	99 e0       	ldi	r25, 0x09	; 9
    10fa:	68 ee       	ldi	r22, 0xE8	; 232
    10fc:	73 e0       	ldi	r23, 0x03	; 3
    10fe:	2a e1       	ldi	r18, 0x1A	; 26
    1100:	36 e0       	ldi	r19, 0x06	; 6
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	ea e1       	ldi	r30, 0x1A	; 26
    1108:	ee 2e       	mov	r14, r30
    110a:	e6 e0       	ldi	r30, 0x06	; 6
    110c:	fe 2e       	mov	r15, r30
    110e:	01 2d       	mov	r16, r1
    1110:	11 2d       	mov	r17, r1
    1112:	b2 e5       	ldi	r27, 0x52	; 82
    1114:	cb 2e       	mov	r12, r27
    1116:	b2 e0       	ldi	r27, 0x02	; 2
    1118:	db 2e       	mov	r13, r27
    111a:	0e 94 b8 02 	call	0x570	; 0x570 <trtCreateTask>
  trtCreateTask(lcdComm, 1000, SECONDS2TICKS(0.2), SECONDS2TICKS(0.4), &(args[0]));
    111e:	8e e3       	ldi	r24, 0x3E	; 62
    1120:	99 e0       	ldi	r25, 0x09	; 9
    1122:	68 ee       	ldi	r22, 0xE8	; 232
    1124:	73 e0       	ldi	r23, 0x03	; 3
    1126:	25 e3       	ldi	r18, 0x35	; 53
    1128:	3c e0       	ldi	r19, 0x0C	; 12
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	aa e6       	ldi	r26, 0x6A	; 106
    1130:	ea 2e       	mov	r14, r26
    1132:	a8 e1       	ldi	r26, 0x18	; 24
    1134:	fa 2e       	mov	r15, r26
    1136:	01 2d       	mov	r16, r1
    1138:	11 2d       	mov	r17, r1
    113a:	0e 94 b8 02 	call	0x570	; 0x570 <trtCreateTask>
  trtCreateTask(adjustSpeed, 1000, SECONDS2TICKS(0.02), SECONDS2TICKS(0.03), &(args[0]));
    113e:	80 eb       	ldi	r24, 0xB0	; 176
    1140:	98 e0       	ldi	r25, 0x08	; 8
    1142:	68 ee       	ldi	r22, 0xE8	; 232
    1144:	73 e0       	ldi	r23, 0x03	; 3
    1146:	28 e3       	ldi	r18, 0x38	; 56
    1148:	31 e0       	ldi	r19, 0x01	; 1
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	f4 ed       	ldi	r31, 0xD4	; 212
    1150:	ef 2e       	mov	r14, r31
    1152:	f1 e0       	ldi	r31, 0x01	; 1
    1154:	ff 2e       	mov	r15, r31
    1156:	01 2d       	mov	r16, r1
    1158:	11 2d       	mov	r17, r1
    115a:	0e 94 b8 02 	call	0x570	; 0x570 <trtCreateTask>
    115e:	ff cf       	rjmp	.-2      	; 0x115e <main+0xbe>

00001160 <adjustSpeed>:
	  trtSleepUntil(rel, dead);	
  	}
}

// --- define task 3  ----------------------------------------
void adjustSpeed(void* args) {
    1160:	af 92       	push	r10
    1162:	bf 92       	push	r11
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
	uint32_t rel, dead;
	double inputValue = 0.0;
	while(TRUE){
		// detection of the fan speed
		if( flag ) {
    1170:	80 91 2e 01 	lds	r24, 0x012E
    1174:	88 23       	and	r24, r24
    1176:	09 f4       	brne	.+2      	; 0x117a <adjustSpeed+0x1a>
    1178:	57 c0       	rjmp	.+174    	; 0x1228 <adjustSpeed+0xc8>
			trtWait(SEM_SHARED);
    117a:	84 e0       	ldi	r24, 0x04	; 4
    117c:	0e 94 1e 03 	call	0x63c	; 0x63c <trtWait>
			real_speed = cycles_to_rpm((int) motor_period, 15625);
    1180:	80 91 d2 02 	lds	r24, 0x02D2
    1184:	90 91 d3 02 	lds	r25, 0x02D3
    1188:	69 e0       	ldi	r22, 0x09	; 9
    118a:	7d e3       	ldi	r23, 0x3D	; 61
    118c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <cycles_to_rpm>
    1190:	60 93 83 02 	sts	0x0283, r22
    1194:	70 93 84 02 	sts	0x0284, r23
    1198:	80 93 85 02 	sts	0x0285, r24
    119c:	90 93 86 02 	sts	0x0286, r25
			flag = FALSE;
    11a0:	10 92 2e 01 	sts	0x012E, r1
			//fprintf(stdout, "RPM: %f\n", real_speed);
			trtSignal(SEM_SHARED);
    11a4:	84 e0       	ldi	r24, 0x04	; 4
    11a6:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSignal>
			pid_ready = FALSE;
    11aa:	10 92 2f 01 	sts	0x012F, r1
			inputValue = pid_Controller(speed, real_speed, &pid_data);
    11ae:	60 91 cd 02 	lds	r22, 0x02CD
    11b2:	70 91 ce 02 	lds	r23, 0x02CE
    11b6:	80 91 cf 02 	lds	r24, 0x02CF
    11ba:	90 91 d0 02 	lds	r25, 0x02D0
    11be:	e0 90 83 02 	lds	r14, 0x0283
    11c2:	f0 90 84 02 	lds	r15, 0x0284
    11c6:	00 91 85 02 	lds	r16, 0x0285
    11ca:	10 91 86 02 	lds	r17, 0x0286
    11ce:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__fixsfsi>
    11d2:	5b 01       	movw	r10, r22
    11d4:	6c 01       	movw	r12, r24
    11d6:	c8 01       	movw	r24, r16
    11d8:	b7 01       	movw	r22, r14
    11da:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__fixsfsi>
    11de:	9b 01       	movw	r18, r22
    11e0:	ac 01       	movw	r20, r24
    11e2:	c5 01       	movw	r24, r10
    11e4:	b9 01       	movw	r22, r18
    11e6:	4b e6       	ldi	r20, 0x6B	; 107
    11e8:	52 e0       	ldi	r21, 0x02	; 2
    11ea:	0e 94 3c 0b 	call	0x1678	; 0x1678 <pid_Controller>
			//fprintf(stdout, "RPM: %f,  delta: %f, target: %f, OCR0A: %d \n\r", real_speed,  inputValue, speed, OCR0A);
			set_input(inputValue);
    11ee:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__fixsfsi>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	0e 94 39 08 	call	0x1072	; 0x1072 <set_input>

			//second pwm
			OCR0B = 255 - (real_speed / 12);
    11fa:	60 91 83 02 	lds	r22, 0x0283
    11fe:	70 91 84 02 	lds	r23, 0x0284
    1202:	80 91 85 02 	lds	r24, 0x0285
    1206:	90 91 86 02 	lds	r25, 0x0286
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e4       	ldi	r20, 0x40	; 64
    1210:	51 ec       	ldi	r21, 0xC1	; 193
    1212:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <__divsf3>
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4f e7       	ldi	r20, 0x7F	; 127
    121c:	53 e4       	ldi	r21, 0x43	; 67
    121e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <__addsf3>
    1222:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    1226:	68 bd       	out	0x28, r22	; 40
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    1228:	20 91 c1 02 	lds	r18, 0x02C1
    122c:	30 91 c2 02 	lds	r19, 0x02C2
    1230:	40 91 c3 02 	lds	r20, 0x02C3
    1234:	50 91 c4 02 	lds	r21, 0x02C4
    1238:	a9 01       	movw	r20, r18
    123a:	33 27       	eor	r19, r19
    123c:	22 27       	eor	r18, r18
    123e:	60 91 84 00 	lds	r22, 0x0084
    1242:	70 91 85 00 	lds	r23, 0x0085
		}
		// sleep
	  	rel = trtCurrentTime() + SECONDS2TICKS(0.02);
	  	dead = trtCurrentTime() + SECONDS2TICKS(0.03);
	  	trtSleepUntil(rel, dead);	
    1246:	e0 90 84 00 	lds	r14, 0x0084
    124a:	f0 90 85 00 	lds	r15, 0x0085
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	62 0f       	add	r22, r18
    1254:	73 1f       	adc	r23, r19
    1256:	84 1f       	adc	r24, r20
    1258:	95 1f       	adc	r25, r21
    125a:	68 5c       	subi	r22, 0xC8	; 200
    125c:	7e 4f       	sbci	r23, 0xFE	; 254
    125e:	8f 4f       	sbci	r24, 0xFF	; 255
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	00 e0       	ldi	r16, 0x00	; 0
    1264:	10 e0       	ldi	r17, 0x00	; 0
    1266:	2e 0d       	add	r18, r14
    1268:	3f 1d       	adc	r19, r15
    126a:	40 1f       	adc	r20, r16
    126c:	51 1f       	adc	r21, r17
    126e:	2c 52       	subi	r18, 0x2C	; 44
    1270:	3e 4f       	sbci	r19, 0xFE	; 254
    1272:	4f 4f       	sbci	r20, 0xFF	; 255
    1274:	5f 4f       	sbci	r21, 0xFF	; 255
    1276:	0e 94 aa 03 	call	0x754	; 0x754 <trtSleepUntil>
    127a:	7a cf       	rjmp	.-268    	; 0x1170 <adjustSpeed+0x10>

0000127c <lcdComm>:
		trtSignal(SEM_SHARED);
	}
}

// --- define task 2  ----------------------------------------
void lcdComm(void* args) {
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
	uint32_t rel, dead;
	// increment time counter and format string 
	while (TRUE) {
	  // display the ideal count
	  trtWait(SEM_SHARED) ;
	  sprintf(lcd_buffer, "%f   ", speed);
    128c:	c6 e5       	ldi	r28, 0x56	; 86
    128e:	d2 e0       	ldi	r29, 0x02	; 2
    1290:	b4 e1       	ldi	r27, 0x14	; 20
    1292:	cb 2e       	mov	r12, r27
    1294:	b1 e0       	ldi	r27, 0x01	; 1
    1296:	db 2e       	mov	r13, r27
void lcdComm(void* args) {
	uint32_t rel, dead;
	// increment time counter and format string 
	while (TRUE) {
	  // display the ideal count
	  trtWait(SEM_SHARED) ;
    1298:	84 e0       	ldi	r24, 0x04	; 4
    129a:	0e 94 1e 03 	call	0x63c	; 0x63c <trtWait>
	  sprintf(lcd_buffer, "%f   ", speed);
    129e:	40 91 cd 02 	lds	r20, 0x02CD
    12a2:	50 91 ce 02 	lds	r21, 0x02CE
    12a6:	60 91 cf 02 	lds	r22, 0x02CF
    12aa:	70 91 d0 02 	lds	r23, 0x02D0
    12ae:	2d b7       	in	r18, 0x3d	; 61
    12b0:	3e b7       	in	r19, 0x3e	; 62
    12b2:	28 50       	subi	r18, 0x08	; 8
    12b4:	30 40       	sbci	r19, 0x00	; 0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	3e bf       	out	0x3e, r19	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	2d bf       	out	0x3d, r18	; 61
    12c0:	ed b7       	in	r30, 0x3d	; 61
    12c2:	fe b7       	in	r31, 0x3e	; 62
    12c4:	31 96       	adiw	r30, 0x01	; 1
    12c6:	ad b7       	in	r26, 0x3d	; 61
    12c8:	be b7       	in	r27, 0x3e	; 62
    12ca:	12 96       	adiw	r26, 0x02	; 2
    12cc:	dc 93       	st	X, r29
    12ce:	ce 93       	st	-X, r28
    12d0:	11 97       	sbiw	r26, 0x01	; 1
    12d2:	d3 82       	std	Z+3, r13	; 0x03
    12d4:	c2 82       	std	Z+2, r12	; 0x02
    12d6:	44 83       	std	Z+4, r20	; 0x04
    12d8:	55 83       	std	Z+5, r21	; 0x05
    12da:	66 83       	std	Z+6, r22	; 0x06
    12dc:	77 83       	std	Z+7, r23	; 0x07
    12de:	0e 94 75 18 	call	0x30ea	; 0x30ea <sprintf>
	  LCDGotoXY(7, 0);
    12e2:	2d b7       	in	r18, 0x3d	; 61
    12e4:	3e b7       	in	r19, 0x3e	; 62
    12e6:	28 5f       	subi	r18, 0xF8	; 248
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	3e bf       	out	0x3e, r19	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	2d bf       	out	0x3d, r18	; 61
    12f4:	87 e0       	ldi	r24, 0x07	; 7
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <LCDGotoXY>
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
    12fc:	fe 01       	movw	r30, r28
    12fe:	01 90       	ld	r0, Z+
    1300:	00 20       	and	r0, r0
    1302:	e9 f7       	brne	.-6      	; 0x12fe <lcdComm+0x82>
    1304:	31 97       	sbiw	r30, 0x01	; 1
    1306:	ec 1b       	sub	r30, r28
    1308:	fd 0b       	sbc	r31, r29
    130a:	ce 01       	movw	r24, r28
    130c:	6e 2f       	mov	r22, r30
    130e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <LCDstring>
	  // display the actual count 
	  sprintf(lcd_buffer, "%f   ", real_speed);
    1312:	40 91 83 02 	lds	r20, 0x0283
    1316:	50 91 84 02 	lds	r21, 0x0284
    131a:	60 91 85 02 	lds	r22, 0x0285
    131e:	70 91 86 02 	lds	r23, 0x0286
    1322:	8d b7       	in	r24, 0x3d	; 61
    1324:	9e b7       	in	r25, 0x3e	; 62
    1326:	08 97       	sbiw	r24, 0x08	; 8
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	9e bf       	out	0x3e, r25	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	8d bf       	out	0x3d, r24	; 61
    1332:	ed b7       	in	r30, 0x3d	; 61
    1334:	fe b7       	in	r31, 0x3e	; 62
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	ad b7       	in	r26, 0x3d	; 61
    133a:	be b7       	in	r27, 0x3e	; 62
    133c:	12 96       	adiw	r26, 0x02	; 2
    133e:	dc 93       	st	X, r29
    1340:	ce 93       	st	-X, r28
    1342:	11 97       	sbiw	r26, 0x01	; 1
    1344:	d3 82       	std	Z+3, r13	; 0x03
    1346:	c2 82       	std	Z+2, r12	; 0x02
    1348:	44 83       	std	Z+4, r20	; 0x04
    134a:	55 83       	std	Z+5, r21	; 0x05
    134c:	66 83       	std	Z+6, r22	; 0x06
    134e:	77 83       	std	Z+7, r23	; 0x07
    1350:	0e 94 75 18 	call	0x30ea	; 0x30ea <sprintf>
	  LCDGotoXY(7, 1);
    1354:	2d b7       	in	r18, 0x3d	; 61
    1356:	3e b7       	in	r19, 0x3e	; 62
    1358:	28 5f       	subi	r18, 0xF8	; 248
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	3e bf       	out	0x3e, r19	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	2d bf       	out	0x3d, r18	; 61
    1366:	87 e0       	ldi	r24, 0x07	; 7
    1368:	61 e0       	ldi	r22, 0x01	; 1
    136a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <LCDGotoXY>
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
    136e:	fe 01       	movw	r30, r28
    1370:	01 90       	ld	r0, Z+
    1372:	00 20       	and	r0, r0
    1374:	e9 f7       	brne	.-6      	; 0x1370 <lcdComm+0xf4>
    1376:	31 97       	sbiw	r30, 0x01	; 1
    1378:	ec 1b       	sub	r30, r28
    137a:	fd 0b       	sbc	r31, r29
    137c:	ce 01       	movw	r24, r28
    137e:	6e 2f       	mov	r22, r30
    1380:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <LCDstring>
	  trtSignal(SEM_SHARED) ;
    1384:	84 e0       	ldi	r24, 0x04	; 4
    1386:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSignal>
    138a:	20 91 c1 02 	lds	r18, 0x02C1
    138e:	30 91 c2 02 	lds	r19, 0x02C2
    1392:	40 91 c3 02 	lds	r20, 0x02C3
    1396:	50 91 c4 02 	lds	r21, 0x02C4
    139a:	a9 01       	movw	r20, r18
    139c:	33 27       	eor	r19, r19
    139e:	22 27       	eor	r18, r18
    13a0:	60 91 84 00 	lds	r22, 0x0084
    13a4:	70 91 85 00 	lds	r23, 0x0085
	  // sleep
	  rel = trtCurrentTime() + SECONDS2TICKS(0.2);
	  dead = trtCurrentTime() + SECONDS2TICKS(0.4);
	  trtSleepUntil(rel, dead);	
    13a8:	e0 90 84 00 	lds	r14, 0x0084
    13ac:	f0 90 85 00 	lds	r15, 0x0085
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	62 0f       	add	r22, r18
    13b6:	73 1f       	adc	r23, r19
    13b8:	84 1f       	adc	r24, r20
    13ba:	95 1f       	adc	r25, r21
    13bc:	6b 5c       	subi	r22, 0xCB	; 203
    13be:	73 4f       	sbci	r23, 0xF3	; 243
    13c0:	8f 4f       	sbci	r24, 0xFF	; 255
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	00 e0       	ldi	r16, 0x00	; 0
    13c6:	10 e0       	ldi	r17, 0x00	; 0
    13c8:	2e 0d       	add	r18, r14
    13ca:	3f 1d       	adc	r19, r15
    13cc:	40 1f       	adc	r20, r16
    13ce:	51 1f       	adc	r21, r17
    13d0:	26 59       	subi	r18, 0x96	; 150
    13d2:	37 4e       	sbci	r19, 0xE7	; 231
    13d4:	4f 4f       	sbci	r20, 0xFF	; 255
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	0e 94 aa 03 	call	0x754	; 0x754 <trtSleepUntil>
    13dc:	5d cf       	rjmp	.-326    	; 0x1298 <lcdComm+0x1c>

000013de <serialComm>:

/********************************************************************/
// 							FSM Tasks
/********************************************************************/
// --- define task 1  ----------------------------------------
void serialComm(void* args) {
    13de:	6f 92       	push	r6
    13e0:	7f 92       	push	r7
    13e2:	8f 92       	push	r8
    13e4:	9f 92       	push	r9
    13e6:	af 92       	push	r10
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	28 97       	sbiw	r28, 0x08	; 8
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
	// Declare the command and num variables
	volatile double num ;
	char cmd[4] ;
    // initialize
    initialize();
    140a:	0e 94 6e 07 	call	0xedc	; 0xedc <initialize>
		// 's' sets the motor speed
		// 'p' sets the proportional gain
		// 'i' sets the differential gain
		// 'd' sets the integral gain
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s%f", cmd, &num) ;
    140e:	1a e1       	ldi	r17, 0x1A	; 26
    1410:	61 2e       	mov	r6, r17
    1412:	11 e0       	ldi	r17, 0x01	; 1
    1414:	71 2e       	mov	r7, r17
    1416:	b5 e0       	ldi	r27, 0x05	; 5
    1418:	8b 2e       	mov	r8, r27
    141a:	91 2c       	mov	r9, r1
    141c:	8c 0e       	add	r8, r28
    141e:	9d 1e       	adc	r9, r29
    1420:	5e 01       	movw	r10, r28
    1422:	08 94       	sec
    1424:	a1 1c       	adc	r10, r1
    1426:	b1 1c       	adc	r11, r1
		// commands:
		// 's' sets the motor speed
		// 'p' sets the proportional gain
		// 'i' sets the differential gain
		// 'd' sets the integral gain
		fprintf(stdout, ">") ;
    1428:	60 91 da 02 	lds	r22, 0x02DA
    142c:	70 91 db 02 	lds	r23, 0x02DB
    1430:	8e e3       	ldi	r24, 0x3E	; 62
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
		fscanf(stdin, "%s%f", cmd, &num) ;
    1438:	8d b7       	in	r24, 0x3d	; 61
    143a:	9e b7       	in	r25, 0x3e	; 62
    143c:	08 97       	sbiw	r24, 0x08	; 8
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	9e bf       	out	0x3e, r25	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	8d bf       	out	0x3d, r24	; 61
    1448:	ed b7       	in	r30, 0x3d	; 61
    144a:	fe b7       	in	r31, 0x3e	; 62
    144c:	31 96       	adiw	r30, 0x01	; 1
    144e:	80 91 d8 02 	lds	r24, 0x02D8
    1452:	90 91 d9 02 	lds	r25, 0x02D9
    1456:	ad b7       	in	r26, 0x3d	; 61
    1458:	be b7       	in	r27, 0x3e	; 62
    145a:	12 96       	adiw	r26, 0x02	; 2
    145c:	9c 93       	st	X, r25
    145e:	8e 93       	st	-X, r24
    1460:	11 97       	sbiw	r26, 0x01	; 1
    1462:	73 82       	std	Z+3, r7	; 0x03
    1464:	62 82       	std	Z+2, r6	; 0x02
    1466:	95 82       	std	Z+5, r9	; 0x05
    1468:	84 82       	std	Z+4, r8	; 0x04
    146a:	b7 82       	std	Z+7, r11	; 0x07
    146c:	a6 82       	std	Z+6, r10	; 0x06
    146e:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fscanf>
		// update shared variables
		trtWait(SEM_SHARED) ;
    1472:	8d b7       	in	r24, 0x3d	; 61
    1474:	9e b7       	in	r25, 0x3e	; 62
    1476:	08 96       	adiw	r24, 0x08	; 8
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	9e bf       	out	0x3e, r25	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	8d bf       	out	0x3d, r24	; 61
    1482:	84 e0       	ldi	r24, 0x04	; 4
    1484:	0e 94 1e 03 	call	0x63c	; 0x63c <trtWait>
		if (cmd[0] == 's') {
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	83 37       	cpi	r24, 0x73	; 115
    148c:	69 f4       	brne	.+26     	; 0x14a8 <serialComm+0xca>
			speed = num;
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	ab 81       	ldd	r26, Y+3	; 0x03
    1494:	bc 81       	ldd	r27, Y+4	; 0x04
    1496:	80 93 cd 02 	sts	0x02CD, r24
    149a:	90 93 ce 02 	sts	0x02CE, r25
    149e:	a0 93 cf 02 	sts	0x02CF, r26
    14a2:	b0 93 d0 02 	sts	0x02D0, r27
    14a6:	2c c0       	rjmp	.+88     	; 0x1500 <serialComm+0x122>
		}
		if (cmd[0] == 'p') {	
    14a8:	80 37       	cpi	r24, 0x70	; 112
    14aa:	51 f5       	brne	.+84     	; 0x1500 <serialComm+0x122>
			prop_gain = num;
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	ab 81       	ldd	r26, Y+3	; 0x03
    14b2:	bc 81       	ldd	r27, Y+4	; 0x04
    14b4:	80 93 c9 02 	sts	0x02C9, r24
    14b8:	90 93 ca 02 	sts	0x02CA, r25
    14bc:	a0 93 cb 02 	sts	0x02CB, r26
    14c0:	b0 93 cc 02 	sts	0x02CC, r27
			pid_Init(prop_gain, int_gain, diff_gain, &pid_data);
    14c4:	60 91 c9 02 	lds	r22, 0x02C9
    14c8:	70 91 ca 02 	lds	r23, 0x02CA
    14cc:	80 91 cb 02 	lds	r24, 0x02CB
    14d0:	90 91 cc 02 	lds	r25, 0x02CC
    14d4:	20 91 4e 02 	lds	r18, 0x024E
    14d8:	30 91 4f 02 	lds	r19, 0x024F
    14dc:	40 91 50 02 	lds	r20, 0x0250
    14e0:	50 91 51 02 	lds	r21, 0x0251
    14e4:	e0 90 67 02 	lds	r14, 0x0267
    14e8:	f0 90 68 02 	lds	r15, 0x0268
    14ec:	00 91 69 02 	lds	r16, 0x0269
    14f0:	10 91 6a 02 	lds	r17, 0x026A
    14f4:	ab e6       	ldi	r26, 0x6B	; 107
    14f6:	ca 2e       	mov	r12, r26
    14f8:	a2 e0       	ldi	r26, 0x02	; 2
    14fa:	da 2e       	mov	r13, r26
    14fc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <pid_Init>
		}
		if (cmd[0] == 'i') {	
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	89 36       	cpi	r24, 0x69	; 105
    1504:	51 f5       	brne	.+84     	; 0x155a <serialComm+0x17c>
			int_gain = num;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	ab 81       	ldd	r26, Y+3	; 0x03
    150c:	bc 81       	ldd	r27, Y+4	; 0x04
    150e:	80 93 4e 02 	sts	0x024E, r24
    1512:	90 93 4f 02 	sts	0x024F, r25
    1516:	a0 93 50 02 	sts	0x0250, r26
    151a:	b0 93 51 02 	sts	0x0251, r27
			pid_Init(prop_gain, int_gain, diff_gain, &pid_data);
    151e:	60 91 c9 02 	lds	r22, 0x02C9
    1522:	70 91 ca 02 	lds	r23, 0x02CA
    1526:	80 91 cb 02 	lds	r24, 0x02CB
    152a:	90 91 cc 02 	lds	r25, 0x02CC
    152e:	20 91 4e 02 	lds	r18, 0x024E
    1532:	30 91 4f 02 	lds	r19, 0x024F
    1536:	40 91 50 02 	lds	r20, 0x0250
    153a:	50 91 51 02 	lds	r21, 0x0251
    153e:	e0 90 67 02 	lds	r14, 0x0267
    1542:	f0 90 68 02 	lds	r15, 0x0268
    1546:	00 91 69 02 	lds	r16, 0x0269
    154a:	10 91 6a 02 	lds	r17, 0x026A
    154e:	fb e6       	ldi	r31, 0x6B	; 107
    1550:	cf 2e       	mov	r12, r31
    1552:	f2 e0       	ldi	r31, 0x02	; 2
    1554:	df 2e       	mov	r13, r31
    1556:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <pid_Init>
		}
		if (cmd[0] == 'd') {		
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	84 36       	cpi	r24, 0x64	; 100
    155e:	51 f5       	brne	.+84     	; 0x15b4 <serialComm+0x1d6>
			diff_gain = num;
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	9a 81       	ldd	r25, Y+2	; 0x02
    1564:	ab 81       	ldd	r26, Y+3	; 0x03
    1566:	bc 81       	ldd	r27, Y+4	; 0x04
    1568:	80 93 67 02 	sts	0x0267, r24
    156c:	90 93 68 02 	sts	0x0268, r25
    1570:	a0 93 69 02 	sts	0x0269, r26
    1574:	b0 93 6a 02 	sts	0x026A, r27
			pid_Init(prop_gain, int_gain, diff_gain, &pid_data);
    1578:	60 91 c9 02 	lds	r22, 0x02C9
    157c:	70 91 ca 02 	lds	r23, 0x02CA
    1580:	80 91 cb 02 	lds	r24, 0x02CB
    1584:	90 91 cc 02 	lds	r25, 0x02CC
    1588:	20 91 4e 02 	lds	r18, 0x024E
    158c:	30 91 4f 02 	lds	r19, 0x024F
    1590:	40 91 50 02 	lds	r20, 0x0250
    1594:	50 91 51 02 	lds	r21, 0x0251
    1598:	e0 90 67 02 	lds	r14, 0x0267
    159c:	f0 90 68 02 	lds	r15, 0x0268
    15a0:	00 91 69 02 	lds	r16, 0x0269
    15a4:	10 91 6a 02 	lds	r17, 0x026A
    15a8:	eb e6       	ldi	r30, 0x6B	; 107
    15aa:	ce 2e       	mov	r12, r30
    15ac:	e2 e0       	ldi	r30, 0x02	; 2
    15ae:	de 2e       	mov	r13, r30
    15b0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <pid_Init>
		}
		if (cmd[0] == 'o')
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	8f 36       	cpi	r24, 0x6F	; 111
    15b8:	39 f4       	brne	.+14     	; 0x15c8 <serialComm+0x1ea>
			OCR0A = num;
    15ba:	69 81       	ldd	r22, Y+1	; 0x01
    15bc:	7a 81       	ldd	r23, Y+2	; 0x02
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    15c6:	67 bd       	out	0x27, r22	; 39
		trtSignal(SEM_SHARED);
    15c8:	84 e0       	ldi	r24, 0x04	; 4
    15ca:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSignal>
    15ce:	2c cf       	rjmp	.-424    	; 0x1428 <serialComm+0x4a>

000015d0 <pid_Init>:
#include "pid.h"
#include "stdint.h"

void pid_Init(double p_factor, double i_factor, double d_factor, struct PID_DATA *pid)
// Set up PID controller parameters
{
    15d0:	8f 92       	push	r8
    15d2:	9f 92       	push	r9
    15d4:	af 92       	push	r10
    15d6:	bf 92       	push	r11
    15d8:	cf 92       	push	r12
    15da:	df 92       	push	r13
    15dc:	ef 92       	push	r14
    15de:	ff 92       	push	r15
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	49 01       	movw	r8, r18
    15e6:	5a 01       	movw	r10, r20
 
  // Start values for PID controller
  pid->sumError = 0;
    15e8:	f6 01       	movw	r30, r12
    15ea:	12 82       	std	Z+2, r1	; 0x02
    15ec:	13 82       	std	Z+3, r1	; 0x03
    15ee:	14 82       	std	Z+4, r1	; 0x04
    15f0:	15 82       	std	Z+5, r1	; 0x05
  pid->lastProcessValue = 0;
    15f2:	11 82       	std	Z+1, r1	; 0x01
    15f4:	10 82       	st	Z, r1
  // Tuning constants for PID loop
  pid->P_Factor = p_factor;
    15f6:	66 83       	std	Z+6, r22	; 0x06
    15f8:	77 83       	std	Z+7, r23	; 0x07
    15fa:	80 87       	std	Z+8, r24	; 0x08
    15fc:	91 87       	std	Z+9, r25	; 0x09
  pid->I_Factor = i_factor;
    15fe:	22 87       	std	Z+10, r18	; 0x0a
    1600:	33 87       	std	Z+11, r19	; 0x0b
    1602:	44 87       	std	Z+12, r20	; 0x0c
    1604:	55 87       	std	Z+13, r21	; 0x0d
  pid->D_Factor = d_factor;
    1606:	e6 86       	std	Z+14, r14	; 0x0e
    1608:	f7 86       	std	Z+15, r15	; 0x0f
    160a:	00 8b       	std	Z+16, r16	; 0x10
    160c:	11 8b       	std	Z+17, r17	; 0x11
  // Limits to avoid overflow
  pid->maxError = MAX_INT / (pid->P_Factor + 1);
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e8       	ldi	r20, 0x80	; 128
    1614:	5f e3       	ldi	r21, 0x3F	; 63
    1616:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <__addsf3>
    161a:	9b 01       	movw	r18, r22
    161c:	ac 01       	movw	r20, r24
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	8e ef       	ldi	r24, 0xFE	; 254
    1624:	92 e4       	ldi	r25, 0x42	; 66
    1626:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <__divsf3>
    162a:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__fixsfsi>
    162e:	f6 01       	movw	r30, r12
    1630:	73 8b       	std	Z+19, r23	; 0x13
    1632:	62 8b       	std	Z+18, r22	; 0x12
  pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
    1634:	c5 01       	movw	r24, r10
    1636:	b4 01       	movw	r22, r8
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <__addsf3>
    1644:	9b 01       	movw	r18, r22
    1646:	ac 01       	movw	r20, r24
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	7c ef       	ldi	r23, 0xFC	; 252
    164c:	8f e7       	ldi	r24, 0x7F	; 127
    164e:	96 e4       	ldi	r25, 0x46	; 70
    1650:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <__divsf3>
    1654:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__fixsfsi>
    1658:	f6 01       	movw	r30, r12
    165a:	64 8b       	std	Z+20, r22	; 0x14
    165c:	75 8b       	std	Z+21, r23	; 0x15
    165e:	86 8b       	std	Z+22, r24	; 0x16
    1660:	97 8b       	std	Z+23, r25	; 0x17
}
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	bf 90       	pop	r11
    1670:	af 90       	pop	r10
    1672:	9f 90       	pop	r9
    1674:	8f 90       	pop	r8
    1676:	08 95       	ret

00001678 <pid_Controller>:


double pid_Controller(int16_t setPoint, int16_t processValue, struct PID_DATA *pid_st)
{
    1678:	2f 92       	push	r2
    167a:	3f 92       	push	r3
    167c:	4f 92       	push	r4
    167e:	5f 92       	push	r5
    1680:	6f 92       	push	r6
    1682:	7f 92       	push	r7
    1684:	8f 92       	push	r8
    1686:	9f 92       	push	r9
    1688:	af 92       	push	r10
    168a:	bf 92       	push	r11
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <pid_Controller+0x26>
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <pid_Controller+0x28>
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	7a 83       	std	Y+2, r23	; 0x02
    16a6:	69 83       	std	Y+1, r22	; 0x01
    16a8:	5c 83       	std	Y+4, r21	; 0x04
    16aa:	4b 83       	std	Y+3, r20	; 0x03
  double error;
  double p_term;
  double d_term;
  double i_term, ret, temp;

  error = setPoint - processValue;
    16ac:	86 1b       	sub	r24, r22
    16ae:	97 0b       	sbc	r25, r23
    16b0:	aa 27       	eor	r26, r26
    16b2:	97 fd       	sbrc	r25, 7
    16b4:	a0 95       	com	r26
    16b6:	ba 2f       	mov	r27, r26
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
    16c0:	7b 01       	movw	r14, r22
    16c2:	8c 01       	movw	r16, r24

  // Calculate Pterm and limit error overflow
  if (error > pid_st->maxError){
    16c4:	eb 81       	ldd	r30, Y+3	; 0x03
    16c6:	fc 81       	ldd	r31, Y+4	; 0x04
    16c8:	c2 88       	ldd	r12, Z+18	; 0x12
    16ca:	d3 88       	ldd	r13, Z+19	; 0x13
    16cc:	b6 01       	movw	r22, r12
    16ce:	88 27       	eor	r24, r24
    16d0:	77 fd       	sbrc	r23, 7
    16d2:	80 95       	com	r24
    16d4:	98 2f       	mov	r25, r24
    16d6:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
    16da:	9b 01       	movw	r18, r22
    16dc:	ac 01       	movw	r20, r24
    16de:	c8 01       	movw	r24, r16
    16e0:	b7 01       	movw	r22, r14
    16e2:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__gesf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	5c f4       	brge	.+22     	; 0x1700 <pid_Controller+0x88>
    16ea:	0f 2e       	mov	r0, r31
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	2f 2e       	mov	r2, r31
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	3f 2e       	mov	r3, r31
    16f4:	fe ef       	ldi	r31, 0xFE	; 254
    16f6:	4f 2e       	mov	r4, r31
    16f8:	f2 e4       	ldi	r31, 0x42	; 66
    16fa:	5f 2e       	mov	r5, r31
    16fc:	f0 2d       	mov	r31, r0
    16fe:	29 c0       	rjmp	.+82     	; 0x1752 <pid_Controller+0xda>
    p_term = MAX_INT;
  }
  else if (error < -pid_st->maxError){
    1700:	66 27       	eor	r22, r22
    1702:	77 27       	eor	r23, r23
    1704:	6c 19       	sub	r22, r12
    1706:	7d 09       	sbc	r23, r13
    1708:	88 27       	eor	r24, r24
    170a:	77 fd       	sbrc	r23, 7
    170c:	80 95       	com	r24
    170e:	98 2f       	mov	r25, r24
    1710:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
    1714:	9b 01       	movw	r18, r22
    1716:	ac 01       	movw	r20, r24
    1718:	c8 01       	movw	r24, r16
    171a:	b7 01       	movw	r22, r14
    171c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__cmpsf2>
    1720:	88 23       	and	r24, r24
    1722:	5c f4       	brge	.+22     	; 0x173a <pid_Controller+0xc2>
    1724:	0f 2e       	mov	r0, r31
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	2f 2e       	mov	r2, r31
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	3f 2e       	mov	r3, r31
    172e:	fe ef       	ldi	r31, 0xFE	; 254
    1730:	4f 2e       	mov	r4, r31
    1732:	f2 ec       	ldi	r31, 0xC2	; 194
    1734:	5f 2e       	mov	r5, r31
    1736:	f0 2d       	mov	r31, r0
    1738:	0c c0       	rjmp	.+24     	; 0x1752 <pid_Controller+0xda>
    p_term = -MAX_INT;
  }
  else{
    p_term = pid_st->P_Factor * error;
    173a:	c8 01       	movw	r24, r16
    173c:	b7 01       	movw	r22, r14
    173e:	eb 81       	ldd	r30, Y+3	; 0x03
    1740:	fc 81       	ldd	r31, Y+4	; 0x04
    1742:	26 81       	ldd	r18, Z+6	; 0x06
    1744:	37 81       	ldd	r19, Z+7	; 0x07
    1746:	40 85       	ldd	r20, Z+8	; 0x08
    1748:	51 85       	ldd	r21, Z+9	; 0x09
    174a:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    174e:	1b 01       	movw	r2, r22
    1750:	2c 01       	movw	r4, r24
  }

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
    1752:	eb 81       	ldd	r30, Y+3	; 0x03
    1754:	fc 81       	ldd	r31, Y+4	; 0x04
    1756:	62 81       	ldd	r22, Z+2	; 0x02
    1758:	73 81       	ldd	r23, Z+3	; 0x03
    175a:	84 81       	ldd	r24, Z+4	; 0x04
    175c:	95 81       	ldd	r25, Z+5	; 0x05
    175e:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
    1762:	a8 01       	movw	r20, r16
    1764:	97 01       	movw	r18, r14
    1766:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <__addsf3>
    176a:	5b 01       	movw	r10, r22
    176c:	6c 01       	movw	r12, r24
  if(temp > pid_st->maxSumError){
    176e:	eb 81       	ldd	r30, Y+3	; 0x03
    1770:	fc 81       	ldd	r31, Y+4	; 0x04
    1772:	e4 88       	ldd	r14, Z+20	; 0x14
    1774:	f5 88       	ldd	r15, Z+21	; 0x15
    1776:	06 89       	ldd	r16, Z+22	; 0x16
    1778:	17 89       	ldd	r17, Z+23	; 0x17
    177a:	c8 01       	movw	r24, r16
    177c:	b7 01       	movw	r22, r14
    177e:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
    1782:	9b 01       	movw	r18, r22
    1784:	ac 01       	movw	r20, r24
    1786:	c6 01       	movw	r24, r12
    1788:	b5 01       	movw	r22, r10
    178a:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__gesf2>
    178e:	18 16       	cp	r1, r24
    1790:	8c f4       	brge	.+34     	; 0x17b4 <pid_Controller+0x13c>
    i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
    1792:	eb 81       	ldd	r30, Y+3	; 0x03
    1794:	fc 81       	ldd	r31, Y+4	; 0x04
    1796:	e2 82       	std	Z+2, r14	; 0x02
    1798:	f3 82       	std	Z+3, r15	; 0x03
    179a:	04 83       	std	Z+4, r16	; 0x04
    179c:	15 83       	std	Z+5, r17	; 0x05
    179e:	0f 2e       	mov	r0, r31
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	af 2e       	mov	r10, r31
    17a4:	fc ef       	ldi	r31, 0xFC	; 252
    17a6:	bf 2e       	mov	r11, r31
    17a8:	ff e7       	ldi	r31, 0x7F	; 127
    17aa:	cf 2e       	mov	r12, r31
    17ac:	f6 e4       	ldi	r31, 0x46	; 70
    17ae:	df 2e       	mov	r13, r31
    17b0:	f0 2d       	mov	r31, r0
    17b2:	3a c0       	rjmp	.+116    	; 0x1828 <pid_Controller+0x1b0>
  }
  else if(temp < -pid_st->maxSumError){
    17b4:	66 24       	eor	r6, r6
    17b6:	77 24       	eor	r7, r7
    17b8:	43 01       	movw	r8, r6
    17ba:	6e 18       	sub	r6, r14
    17bc:	7f 08       	sbc	r7, r15
    17be:	80 0a       	sbc	r8, r16
    17c0:	91 0a       	sbc	r9, r17
    17c2:	c4 01       	movw	r24, r8
    17c4:	b3 01       	movw	r22, r6
    17c6:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
    17ca:	9b 01       	movw	r18, r22
    17cc:	ac 01       	movw	r20, r24
    17ce:	c6 01       	movw	r24, r12
    17d0:	b5 01       	movw	r22, r10
    17d2:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__cmpsf2>
    17d6:	88 23       	and	r24, r24
    17d8:	8c f4       	brge	.+34     	; 0x17fc <pid_Controller+0x184>
    i_term = -MAX_I_TERM;
    pid_st->sumError = -pid_st->maxSumError;
    17da:	eb 81       	ldd	r30, Y+3	; 0x03
    17dc:	fc 81       	ldd	r31, Y+4	; 0x04
    17de:	62 82       	std	Z+2, r6	; 0x02
    17e0:	73 82       	std	Z+3, r7	; 0x03
    17e2:	84 82       	std	Z+4, r8	; 0x04
    17e4:	95 82       	std	Z+5, r9	; 0x05
    17e6:	0f 2e       	mov	r0, r31
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	af 2e       	mov	r10, r31
    17ec:	fc ef       	ldi	r31, 0xFC	; 252
    17ee:	bf 2e       	mov	r11, r31
    17f0:	ff e7       	ldi	r31, 0x7F	; 127
    17f2:	cf 2e       	mov	r12, r31
    17f4:	f6 ec       	ldi	r31, 0xC6	; 198
    17f6:	df 2e       	mov	r13, r31
    17f8:	f0 2d       	mov	r31, r0
    17fa:	16 c0       	rjmp	.+44     	; 0x1828 <pid_Controller+0x1b0>
  }
  else{
    pid_st->sumError = temp;
    17fc:	c6 01       	movw	r24, r12
    17fe:	b5 01       	movw	r22, r10
    1800:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__fixsfsi>
    1804:	eb 81       	ldd	r30, Y+3	; 0x03
    1806:	fc 81       	ldd	r31, Y+4	; 0x04
    1808:	62 83       	std	Z+2, r22	; 0x02
    180a:	73 83       	std	Z+3, r23	; 0x03
    180c:	84 83       	std	Z+4, r24	; 0x04
    180e:	95 83       	std	Z+5, r25	; 0x05
    i_term = ((double)pid_st->I_Factor * pid_st->sumError);
    1810:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
    1814:	eb 81       	ldd	r30, Y+3	; 0x03
    1816:	fc 81       	ldd	r31, Y+4	; 0x04
    1818:	22 85       	ldd	r18, Z+10	; 0x0a
    181a:	33 85       	ldd	r19, Z+11	; 0x0b
    181c:	44 85       	ldd	r20, Z+12	; 0x0c
    181e:	55 85       	ldd	r21, Z+13	; 0x0d
    1820:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    1824:	5b 01       	movw	r10, r22
    1826:	6c 01       	movw	r12, r24
  }

  // Calculate Dterm
  d_term = ((double)pid_st->D_Factor * (pid_st->lastProcessValue - processValue));
    1828:	eb 81       	ldd	r30, Y+3	; 0x03
    182a:	fc 81       	ldd	r31, Y+4	; 0x04
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
    1830:	29 81       	ldd	r18, Y+1	; 0x01
    1832:	3a 81       	ldd	r19, Y+2	; 0x02
    1834:	62 1b       	sub	r22, r18
    1836:	73 0b       	sbc	r23, r19
    1838:	88 27       	eor	r24, r24
    183a:	77 fd       	sbrc	r23, 7
    183c:	80 95       	com	r24
    183e:	98 2f       	mov	r25, r24
    1840:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatsisf>
    1844:	eb 81       	ldd	r30, Y+3	; 0x03
    1846:	fc 81       	ldd	r31, Y+4	; 0x04
    1848:	26 85       	ldd	r18, Z+14	; 0x0e
    184a:	37 85       	ldd	r19, Z+15	; 0x0f
    184c:	40 89       	ldd	r20, Z+16	; 0x10
    184e:	51 89       	ldd	r21, Z+17	; 0x11
    1850:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    1854:	7b 01       	movw	r14, r22
    1856:	8c 01       	movw	r16, r24

  pid_st->lastProcessValue = processValue;
    1858:	29 81       	ldd	r18, Y+1	; 0x01
    185a:	3a 81       	ldd	r19, Y+2	; 0x02
    185c:	eb 81       	ldd	r30, Y+3	; 0x03
    185e:	fc 81       	ldd	r31, Y+4	; 0x04
    1860:	31 83       	std	Z+1, r19	; 0x01
    1862:	20 83       	st	Z, r18
	
  ret = (p_term + i_term + d_term) / SCALING_FACTOR;
    1864:	c2 01       	movw	r24, r4
    1866:	b1 01       	movw	r22, r2
    1868:	a6 01       	movw	r20, r12
    186a:	95 01       	movw	r18, r10
    186c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <__addsf3>
    1870:	a8 01       	movw	r20, r16
    1872:	97 01       	movw	r18, r14
    1874:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <__addsf3>
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	5c e3       	ldi	r21, 0x3C	; 60
    1880:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    1884:	7b 01       	movw	r14, r22
    1886:	8c 01       	movw	r16, r24
  
  if(ret > MAX_INT){
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4e ef       	ldi	r20, 0xFE	; 254
    188e:	52 e4       	ldi	r21, 0x42	; 66
    1890:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__gesf2>
    1894:	18 16       	cp	r1, r24
    1896:	5c f4       	brge	.+22     	; 0x18ae <pid_Controller+0x236>
    1898:	0f 2e       	mov	r0, r31
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	ef 2e       	mov	r14, r31
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	ff 2e       	mov	r15, r31
    18a2:	fe ef       	ldi	r31, 0xFE	; 254
    18a4:	0f 2f       	mov	r16, r31
    18a6:	f2 e4       	ldi	r31, 0x42	; 66
    18a8:	1f 2f       	mov	r17, r31
    18aa:	f0 2d       	mov	r31, r0
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <pid_Controller+0x25e>
    ret = MAX_INT;
  }
  else if(ret < -MAX_INT){
    18ae:	c8 01       	movw	r24, r16
    18b0:	b7 01       	movw	r22, r14
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4e ef       	ldi	r20, 0xFE	; 254
    18b8:	52 ec       	ldi	r21, 0xC2	; 194
    18ba:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__cmpsf2>
    18be:	88 23       	and	r24, r24
    18c0:	54 f4       	brge	.+20     	; 0x18d6 <pid_Controller+0x25e>
    18c2:	0f 2e       	mov	r0, r31
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	ef 2e       	mov	r14, r31
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	ff 2e       	mov	r15, r31
    18cc:	fe ef       	ldi	r31, 0xFE	; 254
    18ce:	0f 2f       	mov	r16, r31
    18d0:	f2 ec       	ldi	r31, 0xC2	; 194
    18d2:	1f 2f       	mov	r17, r31
    18d4:	f0 2d       	mov	r31, r0
    ret = -MAX_INT;
  }
  
  return ret;
} 
    18d6:	b7 01       	movw	r22, r14
    18d8:	c8 01       	movw	r24, r16
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	9f 90       	pop	r9
    18f8:	8f 90       	pop	r8
    18fa:	7f 90       	pop	r7
    18fc:	6f 90       	pop	r6
    18fe:	5f 90       	pop	r5
    1900:	4f 90       	pop	r4
    1902:	3f 90       	pop	r3
    1904:	2f 90       	pop	r2
    1906:	08 95       	ret

00001908 <pid_Reset_Integrator>:

void pid_Reset_Integrator(pidData_t *pid_st)
{
  pid_st->sumError = 0;
    1908:	fc 01       	movw	r30, r24
    190a:	12 82       	std	Z+2, r1	; 0x02
    190c:	13 82       	std	Z+3, r1	; 0x03
    190e:	14 82       	std	Z+4, r1	; 0x04
    1910:	15 82       	std	Z+5, r1	; 0x05
}
    1912:	08 95       	ret

00001914 <vfprintf>:
    1914:	2f 92       	push	r2
    1916:	3f 92       	push	r3
    1918:	4f 92       	push	r4
    191a:	5f 92       	push	r5
    191c:	6f 92       	push	r6
    191e:	7f 92       	push	r7
    1920:	8f 92       	push	r8
    1922:	9f 92       	push	r9
    1924:	af 92       	push	r10
    1926:	bf 92       	push	r11
    1928:	cf 92       	push	r12
    192a:	df 92       	push	r13
    192c:	ef 92       	push	r14
    192e:	ff 92       	push	r15
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	61 97       	sbiw	r28, 0x11	; 17
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	3c 01       	movw	r6, r24
    194a:	7f 87       	std	Y+15, r23	; 0x0f
    194c:	6e 87       	std	Y+14, r22	; 0x0e
    194e:	6a 01       	movw	r12, r20
    1950:	fc 01       	movw	r30, r24
    1952:	17 82       	std	Z+7, r1	; 0x07
    1954:	16 82       	std	Z+6, r1	; 0x06
    1956:	83 81       	ldd	r24, Z+3	; 0x03
    1958:	81 fd       	sbrc	r24, 1
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <vfprintf+0x4e>
    195c:	6f ef       	ldi	r22, 0xFF	; 255
    195e:	7f ef       	ldi	r23, 0xFF	; 255
    1960:	6f c3       	rjmp	.+1758   	; 0x2040 <vfprintf+0x72c>
    1962:	9e 01       	movw	r18, r28
    1964:	2f 5f       	subi	r18, 0xFF	; 255
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	39 8b       	std	Y+17, r19	; 0x11
    196a:	28 8b       	std	Y+16, r18	; 0x10
    196c:	f3 01       	movw	r30, r6
    196e:	23 81       	ldd	r18, Z+3	; 0x03
    1970:	ee 85       	ldd	r30, Y+14	; 0x0e
    1972:	ff 85       	ldd	r31, Y+15	; 0x0f
    1974:	23 fd       	sbrc	r18, 3
    1976:	85 91       	lpm	r24, Z+
    1978:	23 ff       	sbrs	r18, 3
    197a:	81 91       	ld	r24, Z+
    197c:	ff 87       	std	Y+15, r31	; 0x0f
    197e:	ee 87       	std	Y+14, r30	; 0x0e
    1980:	88 23       	and	r24, r24
    1982:	09 f4       	brne	.+2      	; 0x1986 <vfprintf+0x72>
    1984:	5a c3       	rjmp	.+1716   	; 0x203a <vfprintf+0x726>
    1986:	85 32       	cpi	r24, 0x25	; 37
    1988:	51 f4       	brne	.+20     	; 0x199e <vfprintf+0x8a>
    198a:	ee 85       	ldd	r30, Y+14	; 0x0e
    198c:	ff 85       	ldd	r31, Y+15	; 0x0f
    198e:	23 fd       	sbrc	r18, 3
    1990:	85 91       	lpm	r24, Z+
    1992:	23 ff       	sbrs	r18, 3
    1994:	81 91       	ld	r24, Z+
    1996:	ff 87       	std	Y+15, r31	; 0x0f
    1998:	ee 87       	std	Y+14, r30	; 0x0e
    199a:	85 32       	cpi	r24, 0x25	; 37
    199c:	29 f4       	brne	.+10     	; 0x19a8 <vfprintf+0x94>
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	b3 01       	movw	r22, r6
    19a2:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    19a6:	e2 cf       	rjmp	.-60     	; 0x196c <vfprintf+0x58>
    19a8:	98 2f       	mov	r25, r24
    19aa:	10 e0       	ldi	r17, 0x00	; 0
    19ac:	88 24       	eor	r8, r8
    19ae:	99 24       	eor	r9, r9
    19b0:	10 32       	cpi	r17, 0x20	; 32
    19b2:	b0 f4       	brcc	.+44     	; 0x19e0 <vfprintf+0xcc>
    19b4:	9b 32       	cpi	r25, 0x2B	; 43
    19b6:	69 f0       	breq	.+26     	; 0x19d2 <vfprintf+0xbe>
    19b8:	9c 32       	cpi	r25, 0x2C	; 44
    19ba:	28 f4       	brcc	.+10     	; 0x19c6 <vfprintf+0xb2>
    19bc:	90 32       	cpi	r25, 0x20	; 32
    19be:	51 f0       	breq	.+20     	; 0x19d4 <vfprintf+0xc0>
    19c0:	93 32       	cpi	r25, 0x23	; 35
    19c2:	71 f4       	brne	.+28     	; 0x19e0 <vfprintf+0xcc>
    19c4:	0b c0       	rjmp	.+22     	; 0x19dc <vfprintf+0xc8>
    19c6:	9d 32       	cpi	r25, 0x2D	; 45
    19c8:	39 f0       	breq	.+14     	; 0x19d8 <vfprintf+0xc4>
    19ca:	90 33       	cpi	r25, 0x30	; 48
    19cc:	49 f4       	brne	.+18     	; 0x19e0 <vfprintf+0xcc>
    19ce:	11 60       	ori	r17, 0x01	; 1
    19d0:	28 c0       	rjmp	.+80     	; 0x1a22 <vfprintf+0x10e>
    19d2:	12 60       	ori	r17, 0x02	; 2
    19d4:	14 60       	ori	r17, 0x04	; 4
    19d6:	25 c0       	rjmp	.+74     	; 0x1a22 <vfprintf+0x10e>
    19d8:	18 60       	ori	r17, 0x08	; 8
    19da:	23 c0       	rjmp	.+70     	; 0x1a22 <vfprintf+0x10e>
    19dc:	10 61       	ori	r17, 0x10	; 16
    19de:	21 c0       	rjmp	.+66     	; 0x1a22 <vfprintf+0x10e>
    19e0:	17 fd       	sbrc	r17, 7
    19e2:	2a c0       	rjmp	.+84     	; 0x1a38 <vfprintf+0x124>
    19e4:	89 2f       	mov	r24, r25
    19e6:	80 53       	subi	r24, 0x30	; 48
    19e8:	8a 30       	cpi	r24, 0x0A	; 10
    19ea:	78 f4       	brcc	.+30     	; 0x1a0a <vfprintf+0xf6>
    19ec:	16 ff       	sbrs	r17, 6
    19ee:	06 c0       	rjmp	.+12     	; 0x19fc <vfprintf+0xe8>
    19f0:	fa e0       	ldi	r31, 0x0A	; 10
    19f2:	9f 9e       	mul	r9, r31
    19f4:	90 2c       	mov	r9, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	98 0e       	add	r9, r24
    19fa:	13 c0       	rjmp	.+38     	; 0x1a22 <vfprintf+0x10e>
    19fc:	3a e0       	ldi	r19, 0x0A	; 10
    19fe:	83 9e       	mul	r8, r19
    1a00:	80 2c       	mov	r8, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	88 0e       	add	r8, r24
    1a06:	10 62       	ori	r17, 0x20	; 32
    1a08:	0c c0       	rjmp	.+24     	; 0x1a22 <vfprintf+0x10e>
    1a0a:	9e 32       	cpi	r25, 0x2E	; 46
    1a0c:	21 f4       	brne	.+8      	; 0x1a16 <vfprintf+0x102>
    1a0e:	16 fd       	sbrc	r17, 6
    1a10:	14 c3       	rjmp	.+1576   	; 0x203a <vfprintf+0x726>
    1a12:	10 64       	ori	r17, 0x40	; 64
    1a14:	06 c0       	rjmp	.+12     	; 0x1a22 <vfprintf+0x10e>
    1a16:	9c 36       	cpi	r25, 0x6C	; 108
    1a18:	11 f4       	brne	.+4      	; 0x1a1e <vfprintf+0x10a>
    1a1a:	10 68       	ori	r17, 0x80	; 128
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <vfprintf+0x10e>
    1a1e:	98 36       	cpi	r25, 0x68	; 104
    1a20:	59 f4       	brne	.+22     	; 0x1a38 <vfprintf+0x124>
    1a22:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a24:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a26:	23 fd       	sbrc	r18, 3
    1a28:	95 91       	lpm	r25, Z+
    1a2a:	23 ff       	sbrs	r18, 3
    1a2c:	91 91       	ld	r25, Z+
    1a2e:	ff 87       	std	Y+15, r31	; 0x0f
    1a30:	ee 87       	std	Y+14, r30	; 0x0e
    1a32:	99 23       	and	r25, r25
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <vfprintf+0x124>
    1a36:	bc cf       	rjmp	.-136    	; 0x19b0 <vfprintf+0x9c>
    1a38:	89 2f       	mov	r24, r25
    1a3a:	85 54       	subi	r24, 0x45	; 69
    1a3c:	83 30       	cpi	r24, 0x03	; 3
    1a3e:	20 f4       	brcc	.+8      	; 0x1a48 <vfprintf+0x134>
    1a40:	81 2f       	mov	r24, r17
    1a42:	80 61       	ori	r24, 0x10	; 16
    1a44:	90 5e       	subi	r25, 0xE0	; 224
    1a46:	07 c0       	rjmp	.+14     	; 0x1a56 <vfprintf+0x142>
    1a48:	89 2f       	mov	r24, r25
    1a4a:	85 56       	subi	r24, 0x65	; 101
    1a4c:	83 30       	cpi	r24, 0x03	; 3
    1a4e:	08 f0       	brcs	.+2      	; 0x1a52 <vfprintf+0x13e>
    1a50:	9f c1       	rjmp	.+830    	; 0x1d90 <vfprintf+0x47c>
    1a52:	81 2f       	mov	r24, r17
    1a54:	8f 7e       	andi	r24, 0xEF	; 239
    1a56:	86 fd       	sbrc	r24, 6
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <vfprintf+0x14a>
    1a5a:	76 e0       	ldi	r23, 0x06	; 6
    1a5c:	97 2e       	mov	r9, r23
    1a5e:	6f e3       	ldi	r22, 0x3F	; 63
    1a60:	f6 2e       	mov	r15, r22
    1a62:	f8 22       	and	r15, r24
    1a64:	95 36       	cpi	r25, 0x65	; 101
    1a66:	19 f4       	brne	.+6      	; 0x1a6e <vfprintf+0x15a>
    1a68:	f0 e4       	ldi	r31, 0x40	; 64
    1a6a:	ff 2a       	or	r15, r31
    1a6c:	07 c0       	rjmp	.+14     	; 0x1a7c <vfprintf+0x168>
    1a6e:	96 36       	cpi	r25, 0x66	; 102
    1a70:	19 f4       	brne	.+6      	; 0x1a78 <vfprintf+0x164>
    1a72:	20 e8       	ldi	r18, 0x80	; 128
    1a74:	f2 2a       	or	r15, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <vfprintf+0x168>
    1a78:	91 10       	cpse	r9, r1
    1a7a:	9a 94       	dec	r9
    1a7c:	f7 fe       	sbrs	r15, 7
    1a7e:	0a c0       	rjmp	.+20     	; 0x1a94 <vfprintf+0x180>
    1a80:	3b e3       	ldi	r19, 0x3B	; 59
    1a82:	39 15       	cp	r19, r9
    1a84:	18 f4       	brcc	.+6      	; 0x1a8c <vfprintf+0x178>
    1a86:	5c e3       	ldi	r21, 0x3C	; 60
    1a88:	b5 2e       	mov	r11, r21
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <vfprintf+0x17c>
    1a8c:	b9 2c       	mov	r11, r9
    1a8e:	b3 94       	inc	r11
    1a90:	27 e0       	ldi	r18, 0x07	; 7
    1a92:	09 c0       	rjmp	.+18     	; 0x1aa6 <vfprintf+0x192>
    1a94:	47 e0       	ldi	r20, 0x07	; 7
    1a96:	49 15       	cp	r20, r9
    1a98:	20 f4       	brcc	.+8      	; 0x1aa2 <vfprintf+0x18e>
    1a9a:	bb 24       	eor	r11, r11
    1a9c:	47 e0       	ldi	r20, 0x07	; 7
    1a9e:	94 2e       	mov	r9, r20
    1aa0:	f7 cf       	rjmp	.-18     	; 0x1a90 <vfprintf+0x17c>
    1aa2:	29 2d       	mov	r18, r9
    1aa4:	bb 24       	eor	r11, r11
    1aa6:	c6 01       	movw	r24, r12
    1aa8:	04 96       	adiw	r24, 0x04	; 4
    1aaa:	9d 87       	std	Y+13, r25	; 0x0d
    1aac:	8c 87       	std	Y+12, r24	; 0x0c
    1aae:	f6 01       	movw	r30, r12
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	ae 01       	movw	r20, r28
    1aba:	4f 5f       	subi	r20, 0xFF	; 255
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	0b 2d       	mov	r16, r11
    1ac0:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__ftoa_engine>
    1ac4:	6c 01       	movw	r12, r24
    1ac6:	09 81       	ldd	r16, Y+1	; 0x01
    1ac8:	20 2e       	mov	r2, r16
    1aca:	33 24       	eor	r3, r3
    1acc:	00 ff       	sbrs	r16, 0
    1ace:	04 c0       	rjmp	.+8      	; 0x1ad8 <vfprintf+0x1c4>
    1ad0:	03 fd       	sbrc	r16, 3
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <vfprintf+0x1c4>
    1ad4:	1d e2       	ldi	r17, 0x2D	; 45
    1ad6:	09 c0       	rjmp	.+18     	; 0x1aea <vfprintf+0x1d6>
    1ad8:	f1 fe       	sbrs	r15, 1
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <vfprintf+0x1cc>
    1adc:	1b e2       	ldi	r17, 0x2B	; 43
    1ade:	05 c0       	rjmp	.+10     	; 0x1aea <vfprintf+0x1d6>
    1ae0:	f2 fc       	sbrc	r15, 2
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <vfprintf+0x1d4>
    1ae4:	10 e0       	ldi	r17, 0x00	; 0
    1ae6:	01 c0       	rjmp	.+2      	; 0x1aea <vfprintf+0x1d6>
    1ae8:	10 e2       	ldi	r17, 0x20	; 32
    1aea:	c1 01       	movw	r24, r2
    1aec:	8c 70       	andi	r24, 0x0C	; 12
    1aee:	90 70       	andi	r25, 0x00	; 0
    1af0:	89 2b       	or	r24, r25
    1af2:	b9 f1       	breq	.+110    	; 0x1b62 <vfprintf+0x24e>
    1af4:	11 23       	and	r17, r17
    1af6:	11 f4       	brne	.+4      	; 0x1afc <vfprintf+0x1e8>
    1af8:	83 e0       	ldi	r24, 0x03	; 3
    1afa:	01 c0       	rjmp	.+2      	; 0x1afe <vfprintf+0x1ea>
    1afc:	84 e0       	ldi	r24, 0x04	; 4
    1afe:	88 15       	cp	r24, r8
    1b00:	10 f0       	brcs	.+4      	; 0x1b06 <vfprintf+0x1f2>
    1b02:	88 24       	eor	r8, r8
    1b04:	0a c0       	rjmp	.+20     	; 0x1b1a <vfprintf+0x206>
    1b06:	88 1a       	sub	r8, r24
    1b08:	f3 fc       	sbrc	r15, 3
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <vfprintf+0x206>
    1b0c:	80 e2       	ldi	r24, 0x20	; 32
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	b3 01       	movw	r22, r6
    1b12:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1b16:	8a 94       	dec	r8
    1b18:	c9 f7       	brne	.-14     	; 0x1b0c <vfprintf+0x1f8>
    1b1a:	11 23       	and	r17, r17
    1b1c:	29 f0       	breq	.+10     	; 0x1b28 <vfprintf+0x214>
    1b1e:	81 2f       	mov	r24, r17
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	b3 01       	movw	r22, r6
    1b24:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1b28:	23 fe       	sbrs	r2, 3
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <vfprintf+0x21e>
    1b2c:	0c e8       	ldi	r16, 0x8C	; 140
    1b2e:	10 e0       	ldi	r17, 0x00	; 0
    1b30:	0e c0       	rjmp	.+28     	; 0x1b4e <vfprintf+0x23a>
    1b32:	00 e9       	ldi	r16, 0x90	; 144
    1b34:	10 e0       	ldi	r17, 0x00	; 0
    1b36:	0b c0       	rjmp	.+22     	; 0x1b4e <vfprintf+0x23a>
    1b38:	e1 14       	cp	r14, r1
    1b3a:	f1 04       	cpc	r15, r1
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <vfprintf+0x22c>
    1b3e:	80 52       	subi	r24, 0x20	; 32
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	b3 01       	movw	r22, r6
    1b44:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1b48:	0f 5f       	subi	r16, 0xFF	; 255
    1b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4c:	05 c0       	rjmp	.+10     	; 0x1b58 <vfprintf+0x244>
    1b4e:	ef 2c       	mov	r14, r15
    1b50:	ff 24       	eor	r15, r15
    1b52:	f0 e1       	ldi	r31, 0x10	; 16
    1b54:	ef 22       	and	r14, r31
    1b56:	ff 24       	eor	r15, r15
    1b58:	f8 01       	movw	r30, r16
    1b5a:	84 91       	lpm	r24, Z+
    1b5c:	88 23       	and	r24, r24
    1b5e:	61 f7       	brne	.-40     	; 0x1b38 <vfprintf+0x224>
    1b60:	14 c1       	rjmp	.+552    	; 0x1d8a <vfprintf+0x476>
    1b62:	f7 fe       	sbrs	r15, 7
    1b64:	12 c0       	rjmp	.+36     	; 0x1b8a <vfprintf+0x276>
    1b66:	bc 0c       	add	r11, r12
    1b68:	24 fe       	sbrs	r2, 4
    1b6a:	04 c0       	rjmp	.+8      	; 0x1b74 <vfprintf+0x260>
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	81 33       	cpi	r24, 0x31	; 49
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <vfprintf+0x260>
    1b72:	ba 94       	dec	r11
    1b74:	1b 14       	cp	r1, r11
    1b76:	1c f0       	brlt	.+6      	; 0x1b7e <vfprintf+0x26a>
    1b78:	bb 24       	eor	r11, r11
    1b7a:	b3 94       	inc	r11
    1b7c:	2d c0       	rjmp	.+90     	; 0x1bd8 <vfprintf+0x2c4>
    1b7e:	f8 e0       	ldi	r31, 0x08	; 8
    1b80:	fb 15       	cp	r31, r11
    1b82:	50 f5       	brcc	.+84     	; 0x1bd8 <vfprintf+0x2c4>
    1b84:	38 e0       	ldi	r19, 0x08	; 8
    1b86:	b3 2e       	mov	r11, r19
    1b88:	27 c0       	rjmp	.+78     	; 0x1bd8 <vfprintf+0x2c4>
    1b8a:	f6 fc       	sbrc	r15, 6
    1b8c:	25 c0       	rjmp	.+74     	; 0x1bd8 <vfprintf+0x2c4>
    1b8e:	89 2d       	mov	r24, r9
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	8c 15       	cp	r24, r12
    1b94:	9d 05       	cpc	r25, r13
    1b96:	4c f0       	brlt	.+18     	; 0x1baa <vfprintf+0x296>
    1b98:	2c ef       	ldi	r18, 0xFC	; 252
    1b9a:	c2 16       	cp	r12, r18
    1b9c:	2f ef       	ldi	r18, 0xFF	; 255
    1b9e:	d2 06       	cpc	r13, r18
    1ba0:	24 f0       	brlt	.+8      	; 0x1baa <vfprintf+0x296>
    1ba2:	30 e8       	ldi	r19, 0x80	; 128
    1ba4:	f3 2a       	or	r15, r19
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <vfprintf+0x296>
    1ba8:	9a 94       	dec	r9
    1baa:	99 20       	and	r9, r9
    1bac:	49 f0       	breq	.+18     	; 0x1bc0 <vfprintf+0x2ac>
    1bae:	e2 e0       	ldi	r30, 0x02	; 2
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	ec 0f       	add	r30, r28
    1bb4:	fd 1f       	adc	r31, r29
    1bb6:	e9 0d       	add	r30, r9
    1bb8:	f1 1d       	adc	r31, r1
    1bba:	80 81       	ld	r24, Z
    1bbc:	80 33       	cpi	r24, 0x30	; 48
    1bbe:	a1 f3       	breq	.-24     	; 0x1ba8 <vfprintf+0x294>
    1bc0:	f7 fe       	sbrs	r15, 7
    1bc2:	0a c0       	rjmp	.+20     	; 0x1bd8 <vfprintf+0x2c4>
    1bc4:	b9 2c       	mov	r11, r9
    1bc6:	b3 94       	inc	r11
    1bc8:	89 2d       	mov	r24, r9
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	c8 16       	cp	r12, r24
    1bce:	d9 06       	cpc	r13, r25
    1bd0:	14 f0       	brlt	.+4      	; 0x1bd6 <vfprintf+0x2c2>
    1bd2:	99 24       	eor	r9, r9
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <vfprintf+0x2c4>
    1bd6:	9c 18       	sub	r9, r12
    1bd8:	f7 fc       	sbrc	r15, 7
    1bda:	03 c0       	rjmp	.+6      	; 0x1be2 <vfprintf+0x2ce>
    1bdc:	25 e0       	ldi	r18, 0x05	; 5
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	09 c0       	rjmp	.+18     	; 0x1bf4 <vfprintf+0x2e0>
    1be2:	1c 14       	cp	r1, r12
    1be4:	1d 04       	cpc	r1, r13
    1be6:	1c f0       	brlt	.+6      	; 0x1bee <vfprintf+0x2da>
    1be8:	21 e0       	ldi	r18, 0x01	; 1
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <vfprintf+0x2e0>
    1bee:	96 01       	movw	r18, r12
    1bf0:	2f 5f       	subi	r18, 0xFF	; 255
    1bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf4:	11 23       	and	r17, r17
    1bf6:	11 f0       	breq	.+4      	; 0x1bfc <vfprintf+0x2e8>
    1bf8:	2f 5f       	subi	r18, 0xFF	; 255
    1bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfc:	99 20       	and	r9, r9
    1bfe:	29 f0       	breq	.+10     	; 0x1c0a <vfprintf+0x2f6>
    1c00:	89 2d       	mov	r24, r9
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	28 0f       	add	r18, r24
    1c08:	39 1f       	adc	r19, r25
    1c0a:	88 2d       	mov	r24, r8
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	28 17       	cp	r18, r24
    1c10:	39 07       	cpc	r19, r25
    1c12:	14 f0       	brlt	.+4      	; 0x1c18 <vfprintf+0x304>
    1c14:	88 24       	eor	r8, r8
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <vfprintf+0x306>
    1c18:	82 1a       	sub	r8, r18
    1c1a:	4f 2c       	mov	r4, r15
    1c1c:	55 24       	eor	r5, r5
    1c1e:	c2 01       	movw	r24, r4
    1c20:	89 70       	andi	r24, 0x09	; 9
    1c22:	90 70       	andi	r25, 0x00	; 0
    1c24:	89 2b       	or	r24, r25
    1c26:	39 f0       	breq	.+14     	; 0x1c36 <vfprintf+0x322>
    1c28:	08 c0       	rjmp	.+16     	; 0x1c3a <vfprintf+0x326>
    1c2a:	80 e2       	ldi	r24, 0x20	; 32
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	b3 01       	movw	r22, r6
    1c30:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1c34:	8a 94       	dec	r8
    1c36:	88 20       	and	r8, r8
    1c38:	c1 f7       	brne	.-16     	; 0x1c2a <vfprintf+0x316>
    1c3a:	11 23       	and	r17, r17
    1c3c:	29 f0       	breq	.+10     	; 0x1c48 <vfprintf+0x334>
    1c3e:	81 2f       	mov	r24, r17
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	b3 01       	movw	r22, r6
    1c44:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1c48:	43 fe       	sbrs	r4, 3
    1c4a:	07 c0       	rjmp	.+14     	; 0x1c5a <vfprintf+0x346>
    1c4c:	08 c0       	rjmp	.+16     	; 0x1c5e <vfprintf+0x34a>
    1c4e:	80 e3       	ldi	r24, 0x30	; 48
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	b3 01       	movw	r22, r6
    1c54:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1c58:	8a 94       	dec	r8
    1c5a:	88 20       	and	r8, r8
    1c5c:	c1 f7       	brne	.-16     	; 0x1c4e <vfprintf+0x33a>
    1c5e:	f7 fe       	sbrs	r15, 7
    1c60:	46 c0       	rjmp	.+140    	; 0x1cee <vfprintf+0x3da>
    1c62:	86 01       	movw	r16, r12
    1c64:	d7 fe       	sbrs	r13, 7
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <vfprintf+0x358>
    1c68:	00 e0       	ldi	r16, 0x00	; 0
    1c6a:	10 e0       	ldi	r17, 0x00	; 0
    1c6c:	76 01       	movw	r14, r12
    1c6e:	08 94       	sec
    1c70:	e1 1c       	adc	r14, r1
    1c72:	f1 1c       	adc	r15, r1
    1c74:	e0 1a       	sub	r14, r16
    1c76:	f1 0a       	sbc	r15, r17
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	4c 0f       	add	r20, r28
    1c7e:	5d 1f       	adc	r21, r29
    1c80:	e4 0e       	add	r14, r20
    1c82:	f5 1e       	adc	r15, r21
    1c84:	26 01       	movw	r4, r12
    1c86:	4b 18       	sub	r4, r11
    1c88:	51 08       	sbc	r5, r1
    1c8a:	89 2d       	mov	r24, r9
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	aa 24       	eor	r10, r10
    1c90:	bb 24       	eor	r11, r11
    1c92:	a8 1a       	sub	r10, r24
    1c94:	b9 0a       	sbc	r11, r25
    1c96:	5f ef       	ldi	r21, 0xFF	; 255
    1c98:	0f 3f       	cpi	r16, 0xFF	; 255
    1c9a:	15 07       	cpc	r17, r21
    1c9c:	29 f4       	brne	.+10     	; 0x1ca8 <vfprintf+0x394>
    1c9e:	8e e2       	ldi	r24, 0x2E	; 46
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	b3 01       	movw	r22, r6
    1ca4:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1ca8:	c0 16       	cp	r12, r16
    1caa:	d1 06       	cpc	r13, r17
    1cac:	34 f0       	brlt	.+12     	; 0x1cba <vfprintf+0x3a6>
    1cae:	40 16       	cp	r4, r16
    1cb0:	51 06       	cpc	r5, r17
    1cb2:	1c f4       	brge	.+6      	; 0x1cba <vfprintf+0x3a6>
    1cb4:	f7 01       	movw	r30, r14
    1cb6:	80 81       	ld	r24, Z
    1cb8:	01 c0       	rjmp	.+2      	; 0x1cbc <vfprintf+0x3a8>
    1cba:	80 e3       	ldi	r24, 0x30	; 48
    1cbc:	01 50       	subi	r16, 0x01	; 1
    1cbe:	10 40       	sbci	r17, 0x00	; 0
    1cc0:	08 94       	sec
    1cc2:	e1 1c       	adc	r14, r1
    1cc4:	f1 1c       	adc	r15, r1
    1cc6:	0a 15       	cp	r16, r10
    1cc8:	1b 05       	cpc	r17, r11
    1cca:	2c f0       	brlt	.+10     	; 0x1cd6 <vfprintf+0x3c2>
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	b3 01       	movw	r22, r6
    1cd0:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1cd4:	e0 cf       	rjmp	.-64     	; 0x1c96 <vfprintf+0x382>
    1cd6:	0c 15       	cp	r16, r12
    1cd8:	1d 05       	cpc	r17, r13
    1cda:	39 f4       	brne	.+14     	; 0x1cea <vfprintf+0x3d6>
    1cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cde:	96 33       	cpi	r25, 0x36	; 54
    1ce0:	18 f4       	brcc	.+6      	; 0x1ce8 <vfprintf+0x3d4>
    1ce2:	95 33       	cpi	r25, 0x35	; 53
    1ce4:	11 f4       	brne	.+4      	; 0x1cea <vfprintf+0x3d6>
    1ce6:	24 fe       	sbrs	r2, 4
    1ce8:	81 e3       	ldi	r24, 0x31	; 49
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	4b c0       	rjmp	.+150    	; 0x1d84 <vfprintf+0x470>
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	81 33       	cpi	r24, 0x31	; 49
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <vfprintf+0x3e2>
    1cf4:	0f 7e       	andi	r16, 0xEF	; 239
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	b3 01       	movw	r22, r6
    1cfa:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1cfe:	99 20       	and	r9, r9
    1d00:	a1 f0       	breq	.+40     	; 0x1d2a <vfprintf+0x416>
    1d02:	8e e2       	ldi	r24, 0x2E	; 46
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	b3 01       	movw	r22, r6
    1d08:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1d0c:	12 e0       	ldi	r17, 0x02	; 2
    1d0e:	e1 e0       	ldi	r30, 0x01	; 1
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	ec 0f       	add	r30, r28
    1d14:	fd 1f       	adc	r31, r29
    1d16:	e1 0f       	add	r30, r17
    1d18:	f1 1d       	adc	r31, r1
    1d1a:	1f 5f       	subi	r17, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	b3 01       	movw	r22, r6
    1d22:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1d26:	9a 94       	dec	r9
    1d28:	91 f7       	brne	.-28     	; 0x1d0e <vfprintf+0x3fa>
    1d2a:	44 fc       	sbrc	r4, 4
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <vfprintf+0x420>
    1d2e:	85 e6       	ldi	r24, 0x65	; 101
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <vfprintf+0x424>
    1d34:	85 e4       	ldi	r24, 0x45	; 69
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	b3 01       	movw	r22, r6
    1d3a:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1d3e:	d7 fc       	sbrc	r13, 7
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <vfprintf+0x438>
    1d42:	c1 14       	cp	r12, r1
    1d44:	d1 04       	cpc	r13, r1
    1d46:	41 f4       	brne	.+16     	; 0x1d58 <vfprintf+0x444>
    1d48:	04 ff       	sbrs	r16, 4
    1d4a:	06 c0       	rjmp	.+12     	; 0x1d58 <vfprintf+0x444>
    1d4c:	d0 94       	com	r13
    1d4e:	c1 94       	neg	r12
    1d50:	d1 08       	sbc	r13, r1
    1d52:	d3 94       	inc	r13
    1d54:	8d e2       	ldi	r24, 0x2D	; 45
    1d56:	01 c0       	rjmp	.+2      	; 0x1d5a <vfprintf+0x446>
    1d58:	8b e2       	ldi	r24, 0x2B	; 43
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	b3 01       	movw	r22, r6
    1d5e:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1d62:	80 e3       	ldi	r24, 0x30	; 48
    1d64:	05 c0       	rjmp	.+10     	; 0x1d70 <vfprintf+0x45c>
    1d66:	8f 5f       	subi	r24, 0xFF	; 255
    1d68:	26 ef       	ldi	r18, 0xF6	; 246
    1d6a:	3f ef       	ldi	r19, 0xFF	; 255
    1d6c:	c2 0e       	add	r12, r18
    1d6e:	d3 1e       	adc	r13, r19
    1d70:	3a e0       	ldi	r19, 0x0A	; 10
    1d72:	c3 16       	cp	r12, r19
    1d74:	d1 04       	cpc	r13, r1
    1d76:	bc f7       	brge	.-18     	; 0x1d66 <vfprintf+0x452>
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	b3 01       	movw	r22, r6
    1d7c:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1d80:	c6 01       	movw	r24, r12
    1d82:	c0 96       	adiw	r24, 0x30	; 48
    1d84:	b3 01       	movw	r22, r6
    1d86:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1d8a:	cc 84       	ldd	r12, Y+12	; 0x0c
    1d8c:	dd 84       	ldd	r13, Y+13	; 0x0d
    1d8e:	52 c1       	rjmp	.+676    	; 0x2034 <vfprintf+0x720>
    1d90:	93 36       	cpi	r25, 0x63	; 99
    1d92:	31 f0       	breq	.+12     	; 0x1da0 <vfprintf+0x48c>
    1d94:	93 37       	cpi	r25, 0x73	; 115
    1d96:	99 f0       	breq	.+38     	; 0x1dbe <vfprintf+0x4aa>
    1d98:	93 35       	cpi	r25, 0x53	; 83
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <vfprintf+0x48a>
    1d9c:	59 c0       	rjmp	.+178    	; 0x1e50 <vfprintf+0x53c>
    1d9e:	23 c0       	rjmp	.+70     	; 0x1de6 <vfprintf+0x4d2>
    1da0:	f6 01       	movw	r30, r12
    1da2:	80 81       	ld	r24, Z
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	5e 01       	movw	r10, r28
    1da8:	08 94       	sec
    1daa:	a1 1c       	adc	r10, r1
    1dac:	b1 1c       	adc	r11, r1
    1dae:	22 e0       	ldi	r18, 0x02	; 2
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	c2 0e       	add	r12, r18
    1db4:	d3 1e       	adc	r13, r19
    1db6:	21 e0       	ldi	r18, 0x01	; 1
    1db8:	e2 2e       	mov	r14, r18
    1dba:	f1 2c       	mov	r15, r1
    1dbc:	12 c0       	rjmp	.+36     	; 0x1de2 <vfprintf+0x4ce>
    1dbe:	f6 01       	movw	r30, r12
    1dc0:	a0 80       	ld	r10, Z
    1dc2:	b1 80       	ldd	r11, Z+1	; 0x01
    1dc4:	16 fd       	sbrc	r17, 6
    1dc6:	03 c0       	rjmp	.+6      	; 0x1dce <vfprintf+0x4ba>
    1dc8:	6f ef       	ldi	r22, 0xFF	; 255
    1dca:	7f ef       	ldi	r23, 0xFF	; 255
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <vfprintf+0x4be>
    1dce:	69 2d       	mov	r22, r9
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	22 e0       	ldi	r18, 0x02	; 2
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	c2 0e       	add	r12, r18
    1dd8:	d3 1e       	adc	r13, r19
    1dda:	c5 01       	movw	r24, r10
    1ddc:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <strnlen>
    1de0:	7c 01       	movw	r14, r24
    1de2:	1f 77       	andi	r17, 0x7F	; 127
    1de4:	13 c0       	rjmp	.+38     	; 0x1e0c <vfprintf+0x4f8>
    1de6:	f6 01       	movw	r30, r12
    1de8:	a0 80       	ld	r10, Z
    1dea:	b1 80       	ldd	r11, Z+1	; 0x01
    1dec:	16 fd       	sbrc	r17, 6
    1dee:	03 c0       	rjmp	.+6      	; 0x1df6 <vfprintf+0x4e2>
    1df0:	6f ef       	ldi	r22, 0xFF	; 255
    1df2:	7f ef       	ldi	r23, 0xFF	; 255
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <vfprintf+0x4e6>
    1df6:	69 2d       	mov	r22, r9
    1df8:	70 e0       	ldi	r23, 0x00	; 0
    1dfa:	22 e0       	ldi	r18, 0x02	; 2
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	c2 0e       	add	r12, r18
    1e00:	d3 1e       	adc	r13, r19
    1e02:	c5 01       	movw	r24, r10
    1e04:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <strnlen_P>
    1e08:	7c 01       	movw	r14, r24
    1e0a:	10 68       	ori	r17, 0x80	; 128
    1e0c:	13 ff       	sbrs	r17, 3
    1e0e:	07 c0       	rjmp	.+14     	; 0x1e1e <vfprintf+0x50a>
    1e10:	1b c0       	rjmp	.+54     	; 0x1e48 <vfprintf+0x534>
    1e12:	80 e2       	ldi	r24, 0x20	; 32
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	b3 01       	movw	r22, r6
    1e18:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1e1c:	8a 94       	dec	r8
    1e1e:	88 2d       	mov	r24, r8
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	e8 16       	cp	r14, r24
    1e24:	f9 06       	cpc	r15, r25
    1e26:	a8 f3       	brcs	.-22     	; 0x1e12 <vfprintf+0x4fe>
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <vfprintf+0x534>
    1e2a:	f5 01       	movw	r30, r10
    1e2c:	17 fd       	sbrc	r17, 7
    1e2e:	85 91       	lpm	r24, Z+
    1e30:	17 ff       	sbrs	r17, 7
    1e32:	81 91       	ld	r24, Z+
    1e34:	5f 01       	movw	r10, r30
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	b3 01       	movw	r22, r6
    1e3a:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1e3e:	81 10       	cpse	r8, r1
    1e40:	8a 94       	dec	r8
    1e42:	08 94       	sec
    1e44:	e1 08       	sbc	r14, r1
    1e46:	f1 08       	sbc	r15, r1
    1e48:	e1 14       	cp	r14, r1
    1e4a:	f1 04       	cpc	r15, r1
    1e4c:	71 f7       	brne	.-36     	; 0x1e2a <vfprintf+0x516>
    1e4e:	f2 c0       	rjmp	.+484    	; 0x2034 <vfprintf+0x720>
    1e50:	94 36       	cpi	r25, 0x64	; 100
    1e52:	11 f0       	breq	.+4      	; 0x1e58 <vfprintf+0x544>
    1e54:	99 36       	cpi	r25, 0x69	; 105
    1e56:	89 f5       	brne	.+98     	; 0x1eba <vfprintf+0x5a6>
    1e58:	17 ff       	sbrs	r17, 7
    1e5a:	08 c0       	rjmp	.+16     	; 0x1e6c <vfprintf+0x558>
    1e5c:	f6 01       	movw	r30, r12
    1e5e:	20 81       	ld	r18, Z
    1e60:	31 81       	ldd	r19, Z+1	; 0x01
    1e62:	42 81       	ldd	r20, Z+2	; 0x02
    1e64:	53 81       	ldd	r21, Z+3	; 0x03
    1e66:	84 e0       	ldi	r24, 0x04	; 4
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	0a c0       	rjmp	.+20     	; 0x1e80 <vfprintf+0x56c>
    1e6c:	f6 01       	movw	r30, r12
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	9c 01       	movw	r18, r24
    1e74:	44 27       	eor	r20, r20
    1e76:	37 fd       	sbrc	r19, 7
    1e78:	40 95       	com	r20
    1e7a:	54 2f       	mov	r21, r20
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	c8 0e       	add	r12, r24
    1e82:	d9 1e       	adc	r13, r25
    1e84:	9f e6       	ldi	r25, 0x6F	; 111
    1e86:	f9 2e       	mov	r15, r25
    1e88:	f1 22       	and	r15, r17
    1e8a:	57 ff       	sbrs	r21, 7
    1e8c:	09 c0       	rjmp	.+18     	; 0x1ea0 <vfprintf+0x58c>
    1e8e:	50 95       	com	r21
    1e90:	40 95       	com	r20
    1e92:	30 95       	com	r19
    1e94:	21 95       	neg	r18
    1e96:	3f 4f       	sbci	r19, 0xFF	; 255
    1e98:	4f 4f       	sbci	r20, 0xFF	; 255
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	90 e8       	ldi	r25, 0x80	; 128
    1e9e:	f9 2a       	or	r15, r25
    1ea0:	ca 01       	movw	r24, r20
    1ea2:	b9 01       	movw	r22, r18
    1ea4:	ae 01       	movw	r20, r28
    1ea6:	4f 5f       	subi	r20, 0xFF	; 255
    1ea8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eaa:	2a e0       	ldi	r18, 0x0A	; 10
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	0e 94 c0 18 	call	0x3180	; 0x3180 <__ultoa_invert>
    1eb2:	e8 2e       	mov	r14, r24
    1eb4:	e8 89       	ldd	r30, Y+16	; 0x10
    1eb6:	ee 1a       	sub	r14, r30
    1eb8:	41 c0       	rjmp	.+130    	; 0x1f3c <vfprintf+0x628>
    1eba:	95 37       	cpi	r25, 0x75	; 117
    1ebc:	21 f4       	brne	.+8      	; 0x1ec6 <vfprintf+0x5b2>
    1ebe:	1f 7e       	andi	r17, 0xEF	; 239
    1ec0:	2a e0       	ldi	r18, 0x0A	; 10
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	1c c0       	rjmp	.+56     	; 0x1efe <vfprintf+0x5ea>
    1ec6:	19 7f       	andi	r17, 0xF9	; 249
    1ec8:	9f 36       	cpi	r25, 0x6F	; 111
    1eca:	61 f0       	breq	.+24     	; 0x1ee4 <vfprintf+0x5d0>
    1ecc:	90 37       	cpi	r25, 0x70	; 112
    1ece:	20 f4       	brcc	.+8      	; 0x1ed8 <vfprintf+0x5c4>
    1ed0:	98 35       	cpi	r25, 0x58	; 88
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <vfprintf+0x5c2>
    1ed4:	b2 c0       	rjmp	.+356    	; 0x203a <vfprintf+0x726>
    1ed6:	0f c0       	rjmp	.+30     	; 0x1ef6 <vfprintf+0x5e2>
    1ed8:	90 37       	cpi	r25, 0x70	; 112
    1eda:	39 f0       	breq	.+14     	; 0x1eea <vfprintf+0x5d6>
    1edc:	98 37       	cpi	r25, 0x78	; 120
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <vfprintf+0x5ce>
    1ee0:	ac c0       	rjmp	.+344    	; 0x203a <vfprintf+0x726>
    1ee2:	04 c0       	rjmp	.+8      	; 0x1eec <vfprintf+0x5d8>
    1ee4:	28 e0       	ldi	r18, 0x08	; 8
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	0a c0       	rjmp	.+20     	; 0x1efe <vfprintf+0x5ea>
    1eea:	10 61       	ori	r17, 0x10	; 16
    1eec:	14 fd       	sbrc	r17, 4
    1eee:	14 60       	ori	r17, 0x04	; 4
    1ef0:	20 e1       	ldi	r18, 0x10	; 16
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	04 c0       	rjmp	.+8      	; 0x1efe <vfprintf+0x5ea>
    1ef6:	14 fd       	sbrc	r17, 4
    1ef8:	16 60       	ori	r17, 0x06	; 6
    1efa:	20 e1       	ldi	r18, 0x10	; 16
    1efc:	32 e0       	ldi	r19, 0x02	; 2
    1efe:	17 ff       	sbrs	r17, 7
    1f00:	08 c0       	rjmp	.+16     	; 0x1f12 <vfprintf+0x5fe>
    1f02:	f6 01       	movw	r30, r12
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	44 e0       	ldi	r20, 0x04	; 4
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	08 c0       	rjmp	.+16     	; 0x1f22 <vfprintf+0x60e>
    1f12:	f6 01       	movw	r30, r12
    1f14:	80 81       	ld	r24, Z
    1f16:	91 81       	ldd	r25, Z+1	; 0x01
    1f18:	bc 01       	movw	r22, r24
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	42 e0       	ldi	r20, 0x02	; 2
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	c4 0e       	add	r12, r20
    1f24:	d5 1e       	adc	r13, r21
    1f26:	ae 01       	movw	r20, r28
    1f28:	4f 5f       	subi	r20, 0xFF	; 255
    1f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2c:	0e 94 c0 18 	call	0x3180	; 0x3180 <__ultoa_invert>
    1f30:	e8 2e       	mov	r14, r24
    1f32:	58 89       	ldd	r21, Y+16	; 0x10
    1f34:	e5 1a       	sub	r14, r21
    1f36:	8f e7       	ldi	r24, 0x7F	; 127
    1f38:	f8 2e       	mov	r15, r24
    1f3a:	f1 22       	and	r15, r17
    1f3c:	f6 fe       	sbrs	r15, 6
    1f3e:	0b c0       	rjmp	.+22     	; 0x1f56 <vfprintf+0x642>
    1f40:	8e ef       	ldi	r24, 0xFE	; 254
    1f42:	f8 22       	and	r15, r24
    1f44:	e9 14       	cp	r14, r9
    1f46:	38 f4       	brcc	.+14     	; 0x1f56 <vfprintf+0x642>
    1f48:	f4 fe       	sbrs	r15, 4
    1f4a:	07 c0       	rjmp	.+14     	; 0x1f5a <vfprintf+0x646>
    1f4c:	f2 fc       	sbrc	r15, 2
    1f4e:	05 c0       	rjmp	.+10     	; 0x1f5a <vfprintf+0x646>
    1f50:	9f ee       	ldi	r25, 0xEF	; 239
    1f52:	f9 22       	and	r15, r25
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <vfprintf+0x646>
    1f56:	1e 2d       	mov	r17, r14
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <vfprintf+0x648>
    1f5a:	19 2d       	mov	r17, r9
    1f5c:	f4 fe       	sbrs	r15, 4
    1f5e:	0d c0       	rjmp	.+26     	; 0x1f7a <vfprintf+0x666>
    1f60:	fe 01       	movw	r30, r28
    1f62:	ee 0d       	add	r30, r14
    1f64:	f1 1d       	adc	r31, r1
    1f66:	80 81       	ld	r24, Z
    1f68:	80 33       	cpi	r24, 0x30	; 48
    1f6a:	19 f4       	brne	.+6      	; 0x1f72 <vfprintf+0x65e>
    1f6c:	e9 ee       	ldi	r30, 0xE9	; 233
    1f6e:	fe 22       	and	r15, r30
    1f70:	08 c0       	rjmp	.+16     	; 0x1f82 <vfprintf+0x66e>
    1f72:	1f 5f       	subi	r17, 0xFF	; 255
    1f74:	f2 fe       	sbrs	r15, 2
    1f76:	05 c0       	rjmp	.+10     	; 0x1f82 <vfprintf+0x66e>
    1f78:	03 c0       	rjmp	.+6      	; 0x1f80 <vfprintf+0x66c>
    1f7a:	8f 2d       	mov	r24, r15
    1f7c:	86 78       	andi	r24, 0x86	; 134
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <vfprintf+0x66e>
    1f80:	1f 5f       	subi	r17, 0xFF	; 255
    1f82:	0f 2d       	mov	r16, r15
    1f84:	f3 fc       	sbrc	r15, 3
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <vfprintf+0x69c>
    1f88:	f0 fe       	sbrs	r15, 0
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <vfprintf+0x696>
    1f8c:	18 15       	cp	r17, r8
    1f8e:	10 f0       	brcs	.+4      	; 0x1f94 <vfprintf+0x680>
    1f90:	9e 2c       	mov	r9, r14
    1f92:	0b c0       	rjmp	.+22     	; 0x1faa <vfprintf+0x696>
    1f94:	9e 2c       	mov	r9, r14
    1f96:	98 0c       	add	r9, r8
    1f98:	91 1a       	sub	r9, r17
    1f9a:	18 2d       	mov	r17, r8
    1f9c:	06 c0       	rjmp	.+12     	; 0x1faa <vfprintf+0x696>
    1f9e:	80 e2       	ldi	r24, 0x20	; 32
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	b3 01       	movw	r22, r6
    1fa4:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1fa8:	1f 5f       	subi	r17, 0xFF	; 255
    1faa:	18 15       	cp	r17, r8
    1fac:	c0 f3       	brcs	.-16     	; 0x1f9e <vfprintf+0x68a>
    1fae:	04 c0       	rjmp	.+8      	; 0x1fb8 <vfprintf+0x6a4>
    1fb0:	18 15       	cp	r17, r8
    1fb2:	10 f4       	brcc	.+4      	; 0x1fb8 <vfprintf+0x6a4>
    1fb4:	81 1a       	sub	r8, r17
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <vfprintf+0x6a6>
    1fb8:	88 24       	eor	r8, r8
    1fba:	04 ff       	sbrs	r16, 4
    1fbc:	0f c0       	rjmp	.+30     	; 0x1fdc <vfprintf+0x6c8>
    1fbe:	80 e3       	ldi	r24, 0x30	; 48
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	b3 01       	movw	r22, r6
    1fc4:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1fc8:	02 ff       	sbrs	r16, 2
    1fca:	1d c0       	rjmp	.+58     	; 0x2006 <vfprintf+0x6f2>
    1fcc:	01 fd       	sbrc	r16, 1
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <vfprintf+0x6c2>
    1fd0:	88 e7       	ldi	r24, 0x78	; 120
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e c0       	rjmp	.+28     	; 0x1ff2 <vfprintf+0x6de>
    1fd6:	88 e5       	ldi	r24, 0x58	; 88
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0b c0       	rjmp	.+22     	; 0x1ff2 <vfprintf+0x6de>
    1fdc:	80 2f       	mov	r24, r16
    1fde:	86 78       	andi	r24, 0x86	; 134
    1fe0:	91 f0       	breq	.+36     	; 0x2006 <vfprintf+0x6f2>
    1fe2:	01 ff       	sbrs	r16, 1
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <vfprintf+0x6d6>
    1fe6:	8b e2       	ldi	r24, 0x2B	; 43
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <vfprintf+0x6d8>
    1fea:	80 e2       	ldi	r24, 0x20	; 32
    1fec:	f7 fc       	sbrc	r15, 7
    1fee:	8d e2       	ldi	r24, 0x2D	; 45
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	b3 01       	movw	r22, r6
    1ff4:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    1ff8:	06 c0       	rjmp	.+12     	; 0x2006 <vfprintf+0x6f2>
    1ffa:	80 e3       	ldi	r24, 0x30	; 48
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	b3 01       	movw	r22, r6
    2000:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    2004:	9a 94       	dec	r9
    2006:	e9 14       	cp	r14, r9
    2008:	c0 f3       	brcs	.-16     	; 0x1ffa <vfprintf+0x6e6>
    200a:	ea 94       	dec	r14
    200c:	e1 e0       	ldi	r30, 0x01	; 1
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	ec 0f       	add	r30, r28
    2012:	fd 1f       	adc	r31, r29
    2014:	ee 0d       	add	r30, r14
    2016:	f1 1d       	adc	r31, r1
    2018:	80 81       	ld	r24, Z
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	b3 01       	movw	r22, r6
    201e:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    2022:	ee 20       	and	r14, r14
    2024:	91 f7       	brne	.-28     	; 0x200a <vfprintf+0x6f6>
    2026:	06 c0       	rjmp	.+12     	; 0x2034 <vfprintf+0x720>
    2028:	80 e2       	ldi	r24, 0x20	; 32
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	b3 01       	movw	r22, r6
    202e:	0e 94 0d 18 	call	0x301a	; 0x301a <fputc>
    2032:	8a 94       	dec	r8
    2034:	88 20       	and	r8, r8
    2036:	c1 f7       	brne	.-16     	; 0x2028 <vfprintf+0x714>
    2038:	99 cc       	rjmp	.-1742   	; 0x196c <vfprintf+0x58>
    203a:	f3 01       	movw	r30, r6
    203c:	66 81       	ldd	r22, Z+6	; 0x06
    203e:	77 81       	ldd	r23, Z+7	; 0x07
    2040:	cb 01       	movw	r24, r22
    2042:	61 96       	adiw	r28, 0x11	; 17
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	ff 90       	pop	r15
    2058:	ef 90       	pop	r14
    205a:	df 90       	pop	r13
    205c:	cf 90       	pop	r12
    205e:	bf 90       	pop	r11
    2060:	af 90       	pop	r10
    2062:	9f 90       	pop	r9
    2064:	8f 90       	pop	r8
    2066:	7f 90       	pop	r7
    2068:	6f 90       	pop	r6
    206a:	5f 90       	pop	r5
    206c:	4f 90       	pop	r4
    206e:	3f 90       	pop	r3
    2070:	2f 90       	pop	r2
    2072:	08 95       	ret

00002074 <putval>:
    2074:	fc 01       	movw	r30, r24
    2076:	20 fd       	sbrc	r18, 0
    2078:	08 c0       	rjmp	.+16     	; 0x208a <putval+0x16>
    207a:	23 fd       	sbrc	r18, 3
    207c:	05 c0       	rjmp	.+10     	; 0x2088 <putval+0x14>
    207e:	22 ff       	sbrs	r18, 2
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <putval+0x12>
    2082:	73 83       	std	Z+3, r23	; 0x03
    2084:	62 83       	std	Z+2, r22	; 0x02
    2086:	51 83       	std	Z+1, r21	; 0x01
    2088:	40 83       	st	Z, r20
    208a:	08 95       	ret

0000208c <mulacc>:
    208c:	ef 92       	push	r14
    208e:	ff 92       	push	r15
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	44 ff       	sbrs	r20, 4
    2096:	02 c0       	rjmp	.+4      	; 0x209c <mulacc+0x10>
    2098:	33 e0       	ldi	r19, 0x03	; 3
    209a:	11 c0       	rjmp	.+34     	; 0x20be <mulacc+0x32>
    209c:	46 ff       	sbrs	r20, 6
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <mulacc+0x18>
    20a0:	34 e0       	ldi	r19, 0x04	; 4
    20a2:	0d c0       	rjmp	.+26     	; 0x20be <mulacc+0x32>
    20a4:	db 01       	movw	r26, r22
    20a6:	fc 01       	movw	r30, r24
    20a8:	aa 0f       	add	r26, r26
    20aa:	bb 1f       	adc	r27, r27
    20ac:	ee 1f       	adc	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	10 94       	com	r1
    20b2:	d1 f7       	brne	.-12     	; 0x20a8 <mulacc+0x1c>
    20b4:	6a 0f       	add	r22, r26
    20b6:	7b 1f       	adc	r23, r27
    20b8:	8e 1f       	adc	r24, r30
    20ba:	9f 1f       	adc	r25, r31
    20bc:	31 e0       	ldi	r19, 0x01	; 1
    20be:	66 0f       	add	r22, r22
    20c0:	77 1f       	adc	r23, r23
    20c2:	88 1f       	adc	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	31 50       	subi	r19, 0x01	; 1
    20c8:	d1 f7       	brne	.-12     	; 0x20be <mulacc+0x32>
    20ca:	7b 01       	movw	r14, r22
    20cc:	8c 01       	movw	r16, r24
    20ce:	e2 0e       	add	r14, r18
    20d0:	f1 1c       	adc	r15, r1
    20d2:	01 1d       	adc	r16, r1
    20d4:	11 1d       	adc	r17, r1
    20d6:	a8 01       	movw	r20, r16
    20d8:	97 01       	movw	r18, r14
    20da:	b7 01       	movw	r22, r14
    20dc:	ca 01       	movw	r24, r20
    20de:	1f 91       	pop	r17
    20e0:	0f 91       	pop	r16
    20e2:	ff 90       	pop	r15
    20e4:	ef 90       	pop	r14
    20e6:	08 95       	ret

000020e8 <skip_spaces>:
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	8c 01       	movw	r16, r24
    20f2:	c8 01       	movw	r24, r16
    20f4:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    20f8:	ec 01       	movw	r28, r24
    20fa:	97 fd       	sbrc	r25, 7
    20fc:	08 c0       	rjmp	.+16     	; 0x210e <skip_spaces+0x26>
    20fe:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <isspace>
    2102:	89 2b       	or	r24, r25
    2104:	b1 f7       	brne	.-20     	; 0x20f2 <skip_spaces+0xa>
    2106:	ce 01       	movw	r24, r28
    2108:	b8 01       	movw	r22, r16
    210a:	0e 94 a6 18 	call	0x314c	; 0x314c <ungetc>
    210e:	ce 01       	movw	r24, r28
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	08 95       	ret

0000211a <conv_int>:
    211a:	8f 92       	push	r8
    211c:	9f 92       	push	r9
    211e:	af 92       	push	r10
    2120:	bf 92       	push	r11
    2122:	df 92       	push	r13
    2124:	ef 92       	push	r14
    2126:	ff 92       	push	r15
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	5c 01       	movw	r10, r24
    2132:	eb 01       	movw	r28, r22
    2134:	4a 01       	movw	r8, r20
    2136:	12 2f       	mov	r17, r18
    2138:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    213c:	ac 01       	movw	r20, r24
    213e:	8b 32       	cpi	r24, 0x2B	; 43
    2140:	19 f0       	breq	.+6      	; 0x2148 <conv_int+0x2e>
    2142:	8d 32       	cpi	r24, 0x2D	; 45
    2144:	51 f4       	brne	.+20     	; 0x215a <conv_int+0x40>
    2146:	10 68       	ori	r17, 0x80	; 128
    2148:	21 97       	sbiw	r28, 0x01	; 1
    214a:	09 f4       	brne	.+2      	; 0x214e <conv_int+0x34>
    214c:	6d c0       	rjmp	.+218    	; 0x2228 <conv_int+0x10e>
    214e:	c5 01       	movw	r24, r10
    2150:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    2154:	ac 01       	movw	r20, r24
    2156:	97 fd       	sbrc	r25, 7
    2158:	67 c0       	rjmp	.+206    	; 0x2228 <conv_int+0x10e>
    215a:	6d ef       	ldi	r22, 0xFD	; 253
    215c:	d6 2e       	mov	r13, r22
    215e:	d1 22       	and	r13, r17
    2160:	8d 2d       	mov	r24, r13
    2162:	80 73       	andi	r24, 0x30	; 48
    2164:	01 f5       	brne	.+64     	; 0x21a6 <conv_int+0x8c>
    2166:	40 33       	cpi	r20, 0x30	; 48
    2168:	f1 f4       	brne	.+60     	; 0x21a6 <conv_int+0x8c>
    216a:	21 97       	sbiw	r28, 0x01	; 1
    216c:	09 f4       	brne	.+2      	; 0x2170 <conv_int+0x56>
    216e:	47 c0       	rjmp	.+142    	; 0x21fe <conv_int+0xe4>
    2170:	c5 01       	movw	r24, r10
    2172:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    2176:	ac 01       	movw	r20, r24
    2178:	97 fd       	sbrc	r25, 7
    217a:	41 c0       	rjmp	.+130    	; 0x21fe <conv_int+0xe4>
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	d8 2a       	or	r13, r24
    2180:	48 37       	cpi	r20, 0x78	; 120
    2182:	11 f0       	breq	.+4      	; 0x2188 <conv_int+0x6e>
    2184:	48 35       	cpi	r20, 0x58	; 88
    2186:	59 f4       	brne	.+22     	; 0x219e <conv_int+0x84>
    2188:	80 e4       	ldi	r24, 0x40	; 64
    218a:	d8 2a       	or	r13, r24
    218c:	21 97       	sbiw	r28, 0x01	; 1
    218e:	b9 f1       	breq	.+110    	; 0x21fe <conv_int+0xe4>
    2190:	c5 01       	movw	r24, r10
    2192:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    2196:	ac 01       	movw	r20, r24
    2198:	99 23       	and	r25, r25
    219a:	2c f4       	brge	.+10     	; 0x21a6 <conv_int+0x8c>
    219c:	30 c0       	rjmp	.+96     	; 0x21fe <conv_int+0xe4>
    219e:	d6 fc       	sbrc	r13, 6
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <conv_int+0x8c>
    21a2:	80 e1       	ldi	r24, 0x10	; 16
    21a4:	d8 2a       	or	r13, r24
    21a6:	ee 24       	eor	r14, r14
    21a8:	ff 24       	eor	r15, r15
    21aa:	87 01       	movw	r16, r14
    21ac:	24 2f       	mov	r18, r20
    21ae:	20 53       	subi	r18, 0x30	; 48
    21b0:	28 30       	cpi	r18, 0x08	; 8
    21b2:	88 f0       	brcs	.+34     	; 0x21d6 <conv_int+0xbc>
    21b4:	d4 fc       	sbrc	r13, 4
    21b6:	09 c0       	rjmp	.+18     	; 0x21ca <conv_int+0xb0>
    21b8:	2a 30       	cpi	r18, 0x0A	; 10
    21ba:	68 f0       	brcs	.+26     	; 0x21d6 <conv_int+0xbc>
    21bc:	d6 fe       	sbrs	r13, 6
    21be:	05 c0       	rjmp	.+10     	; 0x21ca <conv_int+0xb0>
    21c0:	2f 7d       	andi	r18, 0xDF	; 223
    21c2:	82 2f       	mov	r24, r18
    21c4:	81 51       	subi	r24, 0x11	; 17
    21c6:	86 30       	cpi	r24, 0x06	; 6
    21c8:	28 f0       	brcs	.+10     	; 0x21d4 <conv_int+0xba>
    21ca:	ca 01       	movw	r24, r20
    21cc:	b5 01       	movw	r22, r10
    21ce:	0e 94 a6 18 	call	0x314c	; 0x314c <ungetc>
    21d2:	12 c0       	rjmp	.+36     	; 0x21f8 <conv_int+0xde>
    21d4:	27 50       	subi	r18, 0x07	; 7
    21d6:	c8 01       	movw	r24, r16
    21d8:	b7 01       	movw	r22, r14
    21da:	4d 2d       	mov	r20, r13
    21dc:	0e 94 46 10 	call	0x208c	; 0x208c <mulacc>
    21e0:	7b 01       	movw	r14, r22
    21e2:	8c 01       	movw	r16, r24
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	d8 2a       	or	r13, r24
    21e8:	21 97       	sbiw	r28, 0x01	; 1
    21ea:	61 f0       	breq	.+24     	; 0x2204 <conv_int+0xea>
    21ec:	c5 01       	movw	r24, r10
    21ee:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    21f2:	ac 01       	movw	r20, r24
    21f4:	97 ff       	sbrs	r25, 7
    21f6:	da cf       	rjmp	.-76     	; 0x21ac <conv_int+0x92>
    21f8:	d1 fc       	sbrc	r13, 1
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <conv_int+0xea>
    21fc:	15 c0       	rjmp	.+42     	; 0x2228 <conv_int+0x10e>
    21fe:	ee 24       	eor	r14, r14
    2200:	ff 24       	eor	r15, r15
    2202:	87 01       	movw	r16, r14
    2204:	d7 fe       	sbrs	r13, 7
    2206:	08 c0       	rjmp	.+16     	; 0x2218 <conv_int+0xfe>
    2208:	10 95       	com	r17
    220a:	00 95       	com	r16
    220c:	f0 94       	com	r15
    220e:	e0 94       	com	r14
    2210:	e1 1c       	adc	r14, r1
    2212:	f1 1c       	adc	r15, r1
    2214:	01 1d       	adc	r16, r1
    2216:	11 1d       	adc	r17, r1
    2218:	c4 01       	movw	r24, r8
    221a:	b8 01       	movw	r22, r16
    221c:	a7 01       	movw	r20, r14
    221e:	2d 2d       	mov	r18, r13
    2220:	0e 94 3a 10 	call	0x2074	; 0x2074 <putval>
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	01 c0       	rjmp	.+2      	; 0x222a <conv_int+0x110>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	1f 91       	pop	r17
    2230:	0f 91       	pop	r16
    2232:	ff 90       	pop	r15
    2234:	ef 90       	pop	r14
    2236:	df 90       	pop	r13
    2238:	bf 90       	pop	r11
    223a:	af 90       	pop	r10
    223c:	9f 90       	pop	r9
    223e:	8f 90       	pop	r8
    2240:	08 95       	ret

00002242 <conv_brk>:
    2242:	6f 92       	push	r6
    2244:	7f 92       	push	r7
    2246:	8f 92       	push	r8
    2248:	9f 92       	push	r9
    224a:	af 92       	push	r10
    224c:	bf 92       	push	r11
    224e:	cf 92       	push	r12
    2250:	df 92       	push	r13
    2252:	ef 92       	push	r14
    2254:	ff 92       	push	r15
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	a0 97       	sbiw	r28, 0x20	; 32
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	5c 01       	movw	r10, r24
    2270:	6b 01       	movw	r12, r22
    2272:	8a 01       	movw	r16, r20
    2274:	79 01       	movw	r14, r18
    2276:	fe 01       	movw	r30, r28
    2278:	31 96       	adiw	r30, 0x01	; 1
    227a:	80 e2       	ldi	r24, 0x20	; 32
    227c:	df 01       	movw	r26, r30
    227e:	1d 92       	st	X+, r1
    2280:	8a 95       	dec	r24
    2282:	e9 f7       	brne	.-6      	; 0x227e <conv_brk+0x3c>
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	3f 01       	movw	r6, r30
    2290:	a1 e0       	ldi	r26, 0x01	; 1
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	f5 01       	movw	r30, r10
    2296:	83 81       	ldd	r24, Z+3	; 0x03
    2298:	f7 01       	movw	r30, r14
    229a:	83 fd       	sbrc	r24, 3
    229c:	25 91       	lpm	r18, Z+
    229e:	83 ff       	sbrs	r24, 3
    22a0:	21 91       	ld	r18, Z+
    22a2:	7f 01       	movw	r14, r30
    22a4:	22 23       	and	r18, r18
    22a6:	09 f4       	brne	.+2      	; 0x22aa <conv_brk+0x68>
    22a8:	81 c0       	rjmp	.+258    	; 0x23ac <conv_brk+0x16a>
    22aa:	2e 35       	cpi	r18, 0x5E	; 94
    22ac:	19 f4       	brne	.+6      	; 0x22b4 <conv_brk+0x72>
    22ae:	41 15       	cp	r20, r1
    22b0:	51 05       	cpc	r21, r1
    22b2:	69 f1       	breq	.+90     	; 0x230e <conv_brk+0xcc>
    22b4:	87 2f       	mov	r24, r23
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	84 17       	cp	r24, r20
    22ba:	95 07       	cpc	r25, r21
    22bc:	44 f4       	brge	.+16     	; 0x22ce <conv_brk+0x8c>
    22be:	2d 35       	cpi	r18, 0x5D	; 93
    22c0:	51 f1       	breq	.+84     	; 0x2316 <conv_brk+0xd4>
    22c2:	2d 32       	cpi	r18, 0x2D	; 45
    22c4:	21 f4       	brne	.+8      	; 0x22ce <conv_brk+0x8c>
    22c6:	33 23       	and	r19, r19
    22c8:	29 f4       	brne	.+10     	; 0x22d4 <conv_brk+0x92>
    22ca:	31 e0       	ldi	r19, 0x01	; 1
    22cc:	21 c0       	rjmp	.+66     	; 0x2310 <conv_brk+0xce>
    22ce:	33 23       	and	r19, r19
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <conv_brk+0x92>
    22d2:	62 2f       	mov	r22, r18
    22d4:	32 2f       	mov	r19, r18
    22d6:	83 2f       	mov	r24, r19
    22d8:	86 95       	lsr	r24
    22da:	86 95       	lsr	r24
    22dc:	86 95       	lsr	r24
    22de:	f3 01       	movw	r30, r6
    22e0:	e8 0f       	add	r30, r24
    22e2:	f1 1d       	adc	r31, r1
    22e4:	83 2f       	mov	r24, r19
    22e6:	87 70       	andi	r24, 0x07	; 7
    22e8:	4d 01       	movw	r8, r26
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <conv_brk+0xae>
    22ec:	88 0c       	add	r8, r8
    22ee:	99 1c       	adc	r9, r9
    22f0:	8a 95       	dec	r24
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <conv_brk+0xaa>
    22f4:	20 81       	ld	r18, Z
    22f6:	28 29       	or	r18, r8
    22f8:	20 83       	st	Z, r18
    22fa:	36 17       	cp	r19, r22
    22fc:	11 f4       	brne	.+4      	; 0x2302 <conv_brk+0xc0>
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	07 c0       	rjmp	.+14     	; 0x2310 <conv_brk+0xce>
    2302:	36 17       	cp	r19, r22
    2304:	10 f4       	brcc	.+4      	; 0x230a <conv_brk+0xc8>
    2306:	3f 5f       	subi	r19, 0xFF	; 255
    2308:	e6 cf       	rjmp	.-52     	; 0x22d6 <conv_brk+0x94>
    230a:	31 50       	subi	r19, 0x01	; 1
    230c:	e4 cf       	rjmp	.-56     	; 0x22d6 <conv_brk+0x94>
    230e:	71 e0       	ldi	r23, 0x01	; 1
    2310:	4f 5f       	subi	r20, 0xFF	; 255
    2312:	5f 4f       	sbci	r21, 0xFF	; 255
    2314:	bf cf       	rjmp	.-130    	; 0x2294 <conv_brk+0x52>
    2316:	33 23       	and	r19, r19
    2318:	19 f0       	breq	.+6      	; 0x2320 <conv_brk+0xde>
    231a:	8e 81       	ldd	r24, Y+6	; 0x06
    231c:	80 62       	ori	r24, 0x20	; 32
    231e:	8e 83       	std	Y+6, r24	; 0x06
    2320:	77 23       	and	r23, r23
    2322:	59 f0       	breq	.+22     	; 0x233a <conv_brk+0xf8>
    2324:	fe 01       	movw	r30, r28
    2326:	31 96       	adiw	r30, 0x01	; 1
    2328:	9e 01       	movw	r18, r28
    232a:	2f 5d       	subi	r18, 0xDF	; 223
    232c:	3f 4f       	sbci	r19, 0xFF	; 255
    232e:	80 81       	ld	r24, Z
    2330:	80 95       	com	r24
    2332:	81 93       	st	Z+, r24
    2334:	e2 17       	cp	r30, r18
    2336:	f3 07       	cpc	r31, r19
    2338:	d1 f7       	brne	.-12     	; 0x232e <conv_brk+0xec>
    233a:	99 24       	eor	r9, r9
    233c:	93 94       	inc	r9
    233e:	3e 01       	movw	r6, r28
    2340:	08 94       	sec
    2342:	61 1c       	adc	r6, r1
    2344:	71 1c       	adc	r7, r1
    2346:	c5 01       	movw	r24, r10
    2348:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    234c:	ac 01       	movw	r20, r24
    234e:	97 fd       	sbrc	r25, 7
    2350:	25 c0       	rjmp	.+74     	; 0x239c <conv_brk+0x15a>
    2352:	86 95       	lsr	r24
    2354:	86 95       	lsr	r24
    2356:	86 95       	lsr	r24
    2358:	f3 01       	movw	r30, r6
    235a:	e8 0f       	add	r30, r24
    235c:	f1 1d       	adc	r31, r1
    235e:	80 81       	ld	r24, Z
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9a 01       	movw	r18, r20
    2364:	27 70       	andi	r18, 0x07	; 7
    2366:	30 70       	andi	r19, 0x00	; 0
    2368:	02 c0       	rjmp	.+4      	; 0x236e <conv_brk+0x12c>
    236a:	95 95       	asr	r25
    236c:	87 95       	ror	r24
    236e:	2a 95       	dec	r18
    2370:	e2 f7       	brpl	.-8      	; 0x236a <conv_brk+0x128>
    2372:	80 fd       	sbrc	r24, 0
    2374:	05 c0       	rjmp	.+10     	; 0x2380 <conv_brk+0x13e>
    2376:	ca 01       	movw	r24, r20
    2378:	b5 01       	movw	r22, r10
    237a:	0e 94 a6 18 	call	0x314c	; 0x314c <ungetc>
    237e:	0e c0       	rjmp	.+28     	; 0x239c <conv_brk+0x15a>
    2380:	01 15       	cp	r16, r1
    2382:	11 05       	cpc	r17, r1
    2384:	19 f0       	breq	.+6      	; 0x238c <conv_brk+0x14a>
    2386:	d8 01       	movw	r26, r16
    2388:	4d 93       	st	X+, r20
    238a:	8d 01       	movw	r16, r26
    238c:	08 94       	sec
    238e:	c1 08       	sbc	r12, r1
    2390:	d1 08       	sbc	r13, r1
    2392:	99 24       	eor	r9, r9
    2394:	c1 14       	cp	r12, r1
    2396:	d1 04       	cpc	r13, r1
    2398:	b1 f6       	brne	.-84     	; 0x2346 <conv_brk+0x104>
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <conv_brk+0x15e>
    239c:	99 20       	and	r9, r9
    239e:	31 f4       	brne	.+12     	; 0x23ac <conv_brk+0x16a>
    23a0:	01 15       	cp	r16, r1
    23a2:	11 05       	cpc	r17, r1
    23a4:	29 f0       	breq	.+10     	; 0x23b0 <conv_brk+0x16e>
    23a6:	f8 01       	movw	r30, r16
    23a8:	10 82       	st	Z, r1
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <conv_brk+0x16e>
    23ac:	ee 24       	eor	r14, r14
    23ae:	ff 24       	eor	r15, r15
    23b0:	c7 01       	movw	r24, r14
    23b2:	a0 96       	adiw	r28, 0x20	; 32
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	ff 90       	pop	r15
    23c8:	ef 90       	pop	r14
    23ca:	df 90       	pop	r13
    23cc:	cf 90       	pop	r12
    23ce:	bf 90       	pop	r11
    23d0:	af 90       	pop	r10
    23d2:	9f 90       	pop	r9
    23d4:	8f 90       	pop	r8
    23d6:	7f 90       	pop	r7
    23d8:	6f 90       	pop	r6
    23da:	08 95       	ret

000023dc <conv_flt>:
    23dc:	2f 92       	push	r2
    23de:	3f 92       	push	r3
    23e0:	5f 92       	push	r5
    23e2:	6f 92       	push	r6
    23e4:	7f 92       	push	r7
    23e6:	8f 92       	push	r8
    23e8:	9f 92       	push	r9
    23ea:	af 92       	push	r10
    23ec:	bf 92       	push	r11
    23ee:	cf 92       	push	r12
    23f0:	df 92       	push	r13
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	3c 01       	movw	r6, r24
    2400:	7b 01       	movw	r14, r22
    2402:	1a 01       	movw	r2, r20
    2404:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    2408:	ec 01       	movw	r28, r24
    240a:	8b 32       	cpi	r24, 0x2B	; 43
    240c:	39 f0       	breq	.+14     	; 0x241c <conv_flt+0x40>
    240e:	8d 32       	cpi	r24, 0x2D	; 45
    2410:	11 f0       	breq	.+4      	; 0x2416 <conv_flt+0x3a>
    2412:	55 24       	eor	r5, r5
    2414:	11 c0       	rjmp	.+34     	; 0x2438 <conv_flt+0x5c>
    2416:	b0 e8       	ldi	r27, 0x80	; 128
    2418:	5b 2e       	mov	r5, r27
    241a:	01 c0       	rjmp	.+2      	; 0x241e <conv_flt+0x42>
    241c:	55 24       	eor	r5, r5
    241e:	08 94       	sec
    2420:	e1 08       	sbc	r14, r1
    2422:	f1 08       	sbc	r15, r1
    2424:	e1 14       	cp	r14, r1
    2426:	f1 04       	cpc	r15, r1
    2428:	09 f4       	brne	.+2      	; 0x242c <conv_flt+0x50>
    242a:	18 c1       	rjmp	.+560    	; 0x265c <conv_flt+0x280>
    242c:	c3 01       	movw	r24, r6
    242e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    2432:	ec 01       	movw	r28, r24
    2434:	97 fd       	sbrc	r25, 7
    2436:	12 c1       	rjmp	.+548    	; 0x265c <conv_flt+0x280>
    2438:	ce 01       	movw	r24, r28
    243a:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <tolower>
    243e:	89 36       	cpi	r24, 0x69	; 105
    2440:	91 05       	cpc	r25, r1
    2442:	21 f0       	breq	.+8      	; 0x244c <conv_flt+0x70>
    2444:	8e 36       	cpi	r24, 0x6E	; 110
    2446:	91 05       	cpc	r25, r1
    2448:	99 f5       	brne	.+102    	; 0x24b0 <conv_flt+0xd4>
    244a:	1d c0       	rjmp	.+58     	; 0x2486 <conv_flt+0xaa>
    244c:	09 ea       	ldi	r16, 0xA9	; 169
    244e:	10 e0       	ldi	r17, 0x00	; 0
    2450:	1c c0       	rjmp	.+56     	; 0x248a <conv_flt+0xae>
    2452:	08 94       	sec
    2454:	e1 08       	sbc	r14, r1
    2456:	f1 08       	sbc	r15, r1
    2458:	e1 14       	cp	r14, r1
    245a:	f1 04       	cpc	r15, r1
    245c:	71 f0       	breq	.+28     	; 0x247a <conv_flt+0x9e>
    245e:	c3 01       	movw	r24, r6
    2460:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    2464:	ec 01       	movw	r28, r24
    2466:	97 fd       	sbrc	r25, 7
    2468:	08 c0       	rjmp	.+16     	; 0x247a <conv_flt+0x9e>
    246a:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <tolower>
    246e:	d8 16       	cp	r13, r24
    2470:	61 f0       	breq	.+24     	; 0x248a <conv_flt+0xae>
    2472:	ce 01       	movw	r24, r28
    2474:	b3 01       	movw	r22, r6
    2476:	0e 94 a6 18 	call	0x314c	; 0x314c <ungetc>
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	0c 3a       	cpi	r16, 0xAC	; 172
    247e:	12 07       	cpc	r17, r18
    2480:	09 f0       	breq	.+2      	; 0x2484 <conv_flt+0xa8>
    2482:	ec c0       	rjmp	.+472    	; 0x265c <conv_flt+0x280>
    2484:	08 c0       	rjmp	.+16     	; 0x2496 <conv_flt+0xba>
    2486:	06 ea       	ldi	r16, 0xA6	; 166
    2488:	10 e0       	ldi	r17, 0x00	; 0
    248a:	f8 01       	movw	r30, r16
    248c:	0f 5f       	subi	r16, 0xFF	; 255
    248e:	1f 4f       	sbci	r17, 0xFF	; 255
    2490:	d4 90       	lpm	r13, Z+
    2492:	dd 20       	and	r13, r13
    2494:	f1 f6       	brne	.-68     	; 0x2452 <conv_flt+0x76>
    2496:	09 5a       	subi	r16, 0xA9	; 169
    2498:	10 40       	sbci	r17, 0x00	; 0
    249a:	29 f0       	breq	.+10     	; 0x24a6 <conv_flt+0xca>
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e8       	ldi	r26, 0x80	; 128
    24a2:	bf e7       	ldi	r27, 0x7F	; 127
    24a4:	cf c0       	rjmp	.+414    	; 0x2644 <conv_flt+0x268>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 ec       	ldi	r26, 0xC0	; 192
    24ac:	bf e7       	ldi	r27, 0x7F	; 127
    24ae:	ca c0       	rjmp	.+404    	; 0x2644 <conv_flt+0x268>
    24b0:	cc 24       	eor	r12, r12
    24b2:	dd 24       	eor	r13, r13
    24b4:	88 24       	eor	r8, r8
    24b6:	99 24       	eor	r9, r9
    24b8:	54 01       	movw	r10, r8
    24ba:	ae 01       	movw	r20, r28
    24bc:	40 53       	subi	r20, 0x30	; 48
    24be:	24 2f       	mov	r18, r20
    24c0:	4a 30       	cpi	r20, 0x0A	; 10
    24c2:	38 f5       	brcc	.+78     	; 0x2512 <conv_flt+0x136>
    24c4:	52 e0       	ldi	r21, 0x02	; 2
    24c6:	55 2a       	or	r5, r21
    24c8:	85 2d       	mov	r24, r5
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	ac 01       	movw	r20, r24
    24ce:	48 70       	andi	r20, 0x08	; 8
    24d0:	50 70       	andi	r21, 0x00	; 0
    24d2:	52 fe       	sbrs	r5, 2
    24d4:	06 c0       	rjmp	.+12     	; 0x24e2 <conv_flt+0x106>
    24d6:	45 2b       	or	r20, r21
    24d8:	11 f5       	brne	.+68     	; 0x251e <conv_flt+0x142>
    24da:	08 94       	sec
    24dc:	c1 1c       	adc	r12, r1
    24de:	d1 1c       	adc	r13, r1
    24e0:	1e c0       	rjmp	.+60     	; 0x251e <conv_flt+0x142>
    24e2:	45 2b       	or	r20, r21
    24e4:	19 f0       	breq	.+6      	; 0x24ec <conv_flt+0x110>
    24e6:	08 94       	sec
    24e8:	c1 08       	sbc	r12, r1
    24ea:	d1 08       	sbc	r13, r1
    24ec:	c5 01       	movw	r24, r10
    24ee:	b4 01       	movw	r22, r8
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	0e 94 46 10 	call	0x208c	; 0x208c <mulacc>
    24f6:	4b 01       	movw	r8, r22
    24f8:	5c 01       	movw	r10, r24
    24fa:	88 e9       	ldi	r24, 0x98	; 152
    24fc:	88 16       	cp	r8, r24
    24fe:	89 e9       	ldi	r24, 0x99	; 153
    2500:	98 06       	cpc	r9, r24
    2502:	89 e9       	ldi	r24, 0x99	; 153
    2504:	a8 06       	cpc	r10, r24
    2506:	89 e1       	ldi	r24, 0x19	; 25
    2508:	b8 06       	cpc	r11, r24
    250a:	48 f0       	brcs	.+18     	; 0x251e <conv_flt+0x142>
    250c:	94 e0       	ldi	r25, 0x04	; 4
    250e:	59 2a       	or	r5, r25
    2510:	06 c0       	rjmp	.+12     	; 0x251e <conv_flt+0x142>
    2512:	4e 3f       	cpi	r20, 0xFE	; 254
    2514:	81 f4       	brne	.+32     	; 0x2536 <conv_flt+0x15a>
    2516:	53 fc       	sbrc	r5, 3
    2518:	0e c0       	rjmp	.+28     	; 0x2536 <conv_flt+0x15a>
    251a:	e8 e0       	ldi	r30, 0x08	; 8
    251c:	5e 2a       	or	r5, r30
    251e:	08 94       	sec
    2520:	e1 08       	sbc	r14, r1
    2522:	f1 08       	sbc	r15, r1
    2524:	e1 14       	cp	r14, r1
    2526:	f1 04       	cpc	r15, r1
    2528:	31 f0       	breq	.+12     	; 0x2536 <conv_flt+0x15a>
    252a:	c3 01       	movw	r24, r6
    252c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    2530:	ec 01       	movw	r28, r24
    2532:	97 ff       	sbrs	r25, 7
    2534:	c2 cf       	rjmp	.-124    	; 0x24ba <conv_flt+0xde>
    2536:	51 fe       	sbrs	r5, 1
    2538:	91 c0       	rjmp	.+290    	; 0x265c <conv_flt+0x280>
    253a:	c5 36       	cpi	r28, 0x65	; 101
    253c:	19 f0       	breq	.+6      	; 0x2544 <conv_flt+0x168>
    253e:	c5 34       	cpi	r28, 0x45	; 69
    2540:	09 f0       	breq	.+2      	; 0x2544 <conv_flt+0x168>
    2542:	46 c0       	rjmp	.+140    	; 0x25d0 <conv_flt+0x1f4>
    2544:	08 94       	sec
    2546:	e1 08       	sbc	r14, r1
    2548:	f1 08       	sbc	r15, r1
    254a:	e1 14       	cp	r14, r1
    254c:	f1 04       	cpc	r15, r1
    254e:	09 f4       	brne	.+2      	; 0x2552 <conv_flt+0x176>
    2550:	85 c0       	rjmp	.+266    	; 0x265c <conv_flt+0x280>
    2552:	c3 01       	movw	r24, r6
    2554:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    2558:	ec 01       	movw	r28, r24
    255a:	97 fd       	sbrc	r25, 7
    255c:	7f c0       	rjmp	.+254    	; 0x265c <conv_flt+0x280>
    255e:	8b 32       	cpi	r24, 0x2B	; 43
    2560:	21 f0       	breq	.+8      	; 0x256a <conv_flt+0x18e>
    2562:	8d 32       	cpi	r24, 0x2D	; 45
    2564:	69 f4       	brne	.+26     	; 0x2580 <conv_flt+0x1a4>
    2566:	f0 e1       	ldi	r31, 0x10	; 16
    2568:	5f 2a       	or	r5, r31
    256a:	08 94       	sec
    256c:	e1 08       	sbc	r14, r1
    256e:	f1 08       	sbc	r15, r1
    2570:	e1 14       	cp	r14, r1
    2572:	f1 04       	cpc	r15, r1
    2574:	09 f4       	brne	.+2      	; 0x2578 <conv_flt+0x19c>
    2576:	72 c0       	rjmp	.+228    	; 0x265c <conv_flt+0x280>
    2578:	c3 01       	movw	r24, r6
    257a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    257e:	ec 01       	movw	r28, r24
    2580:	ce 01       	movw	r24, r28
    2582:	c0 97       	sbiw	r24, 0x30	; 48
    2584:	0a 97       	sbiw	r24, 0x0a	; 10
    2586:	08 f0       	brcs	.+2      	; 0x258a <conv_flt+0x1ae>
    2588:	69 c0       	rjmp	.+210    	; 0x265c <conv_flt+0x280>
    258a:	00 e0       	ldi	r16, 0x00	; 0
    258c:	10 e0       	ldi	r17, 0x00	; 0
    258e:	b8 01       	movw	r22, r16
    2590:	88 27       	eor	r24, r24
    2592:	77 fd       	sbrc	r23, 7
    2594:	80 95       	com	r24
    2596:	98 2f       	mov	r25, r24
    2598:	ae 01       	movw	r20, r28
    259a:	40 53       	subi	r20, 0x30	; 48
    259c:	24 2f       	mov	r18, r20
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	0e 94 46 10 	call	0x208c	; 0x208c <mulacc>
    25a4:	8b 01       	movw	r16, r22
    25a6:	08 94       	sec
    25a8:	e1 08       	sbc	r14, r1
    25aa:	f1 08       	sbc	r15, r1
    25ac:	e1 14       	cp	r14, r1
    25ae:	f1 04       	cpc	r15, r1
    25b0:	39 f0       	breq	.+14     	; 0x25c0 <conv_flt+0x1e4>
    25b2:	c3 01       	movw	r24, r6
    25b4:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    25b8:	ec 01       	movw	r28, r24
    25ba:	c0 97       	sbiw	r24, 0x30	; 48
    25bc:	0a 97       	sbiw	r24, 0x0a	; 10
    25be:	38 f3       	brcs	.-50     	; 0x258e <conv_flt+0x1b2>
    25c0:	b8 01       	movw	r22, r16
    25c2:	54 fe       	sbrs	r5, 4
    25c4:	03 c0       	rjmp	.+6      	; 0x25cc <conv_flt+0x1f0>
    25c6:	70 95       	com	r23
    25c8:	61 95       	neg	r22
    25ca:	7f 4f       	sbci	r23, 0xFF	; 255
    25cc:	c6 0e       	add	r12, r22
    25ce:	d7 1e       	adc	r13, r23
    25d0:	ef 28       	or	r14, r15
    25d2:	31 f0       	breq	.+12     	; 0x25e0 <conv_flt+0x204>
    25d4:	d7 fd       	sbrc	r29, 7
    25d6:	04 c0       	rjmp	.+8      	; 0x25e0 <conv_flt+0x204>
    25d8:	ce 01       	movw	r24, r28
    25da:	b3 01       	movw	r22, r6
    25dc:	0e 94 a6 18 	call	0x314c	; 0x314c <ungetc>
    25e0:	c5 01       	movw	r24, r10
    25e2:	b4 01       	movw	r22, r8
    25e4:	0e 94 80 14 	call	0x2900	; 0x2900 <__floatunsisf>
    25e8:	d7 fe       	sbrs	r13, 7
    25ea:	0d c0       	rjmp	.+26     	; 0x2606 <conv_flt+0x22a>
    25ec:	a5 ec       	ldi	r26, 0xC5	; 197
    25ee:	ea 2e       	mov	r14, r26
    25f0:	a0 e0       	ldi	r26, 0x00	; 0
    25f2:	fa 2e       	mov	r15, r26
    25f4:	d0 94       	com	r13
    25f6:	c1 94       	neg	r12
    25f8:	d1 08       	sbc	r13, r1
    25fa:	d3 94       	inc	r13
    25fc:	c0 e2       	ldi	r28, 0x20	; 32
    25fe:	d0 e0       	ldi	r29, 0x00	; 0
    2600:	00 e0       	ldi	r16, 0x00	; 0
    2602:	10 e0       	ldi	r17, 0x00	; 0
    2604:	0e c0       	rjmp	.+28     	; 0x2622 <conv_flt+0x246>
    2606:	fd ed       	ldi	r31, 0xDD	; 221
    2608:	ef 2e       	mov	r14, r31
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	ff 2e       	mov	r15, r31
    260e:	f6 cf       	rjmp	.-20     	; 0x25fc <conv_flt+0x220>
    2610:	f7 01       	movw	r30, r14
    2612:	25 91       	lpm	r18, Z+
    2614:	35 91       	lpm	r19, Z+
    2616:	45 91       	lpm	r20, Z+
    2618:	54 91       	lpm	r21, Z+
    261a:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    261e:	cc 1a       	sub	r12, r28
    2620:	dd 0a       	sbc	r13, r29
    2622:	cc 16       	cp	r12, r28
    2624:	dd 06       	cpc	r13, r29
    2626:	a0 f7       	brcc	.-24     	; 0x2610 <conv_flt+0x234>
    2628:	d6 95       	lsr	r29
    262a:	c7 95       	ror	r28
    262c:	0f 5f       	subi	r16, 0xFF	; 255
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	06 30       	cpi	r16, 0x06	; 6
    2632:	11 05       	cpc	r17, r1
    2634:	29 f0       	breq	.+10     	; 0x2640 <conv_flt+0x264>
    2636:	ec ef       	ldi	r30, 0xFC	; 252
    2638:	ff ef       	ldi	r31, 0xFF	; 255
    263a:	ee 0e       	add	r14, r30
    263c:	ff 1e       	adc	r15, r31
    263e:	f1 cf       	rjmp	.-30     	; 0x2622 <conv_flt+0x246>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	57 fc       	sbrc	r5, 7
    2646:	b0 58       	subi	r27, 0x80	; 128
    2648:	21 14       	cp	r2, r1
    264a:	31 04       	cpc	r3, r1
    264c:	29 f0       	breq	.+10     	; 0x2658 <conv_flt+0x27c>
    264e:	f1 01       	movw	r30, r2
    2650:	80 83       	st	Z, r24
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	a2 83       	std	Z+2, r26	; 0x02
    2656:	b3 83       	std	Z+3, r27	; 0x03
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	01 c0       	rjmp	.+2      	; 0x265e <conv_flt+0x282>
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	df 90       	pop	r13
    266c:	cf 90       	pop	r12
    266e:	bf 90       	pop	r11
    2670:	af 90       	pop	r10
    2672:	9f 90       	pop	r9
    2674:	8f 90       	pop	r8
    2676:	7f 90       	pop	r7
    2678:	6f 90       	pop	r6
    267a:	5f 90       	pop	r5
    267c:	3f 90       	pop	r3
    267e:	2f 90       	pop	r2
    2680:	08 95       	ret

00002682 <vfscanf>:
    2682:	5f 92       	push	r5
    2684:	6f 92       	push	r6
    2686:	7f 92       	push	r7
    2688:	8f 92       	push	r8
    268a:	9f 92       	push	r9
    268c:	af 92       	push	r10
    268e:	bf 92       	push	r11
    2690:	cf 92       	push	r12
    2692:	df 92       	push	r13
    2694:	ef 92       	push	r14
    2696:	ff 92       	push	r15
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	4c 01       	movw	r8, r24
    26a2:	5b 01       	movw	r10, r22
    26a4:	3a 01       	movw	r6, r20
    26a6:	fc 01       	movw	r30, r24
    26a8:	17 82       	std	Z+7, r1	; 0x07
    26aa:	16 82       	std	Z+6, r1	; 0x06
    26ac:	55 24       	eor	r5, r5
    26ae:	04 c1       	rjmp	.+520    	; 0x28b8 <vfscanf+0x236>
    26b0:	81 2f       	mov	r24, r17
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <isspace>
    26b8:	89 2b       	or	r24, r25
    26ba:	21 f0       	breq	.+8      	; 0x26c4 <vfscanf+0x42>
    26bc:	c4 01       	movw	r24, r8
    26be:	0e 94 74 10 	call	0x20e8	; 0x20e8 <skip_spaces>
    26c2:	fa c0       	rjmp	.+500    	; 0x28b8 <vfscanf+0x236>
    26c4:	15 32       	cpi	r17, 0x25	; 37
    26c6:	49 f4       	brne	.+18     	; 0x26da <vfscanf+0x58>
    26c8:	f5 01       	movw	r30, r10
    26ca:	f3 fc       	sbrc	r15, 3
    26cc:	65 91       	lpm	r22, Z+
    26ce:	f3 fe       	sbrs	r15, 3
    26d0:	61 91       	ld	r22, Z+
    26d2:	5f 01       	movw	r10, r30
    26d4:	65 32       	cpi	r22, 0x25	; 37
    26d6:	69 f4       	brne	.+26     	; 0x26f2 <vfscanf+0x70>
    26d8:	15 e2       	ldi	r17, 0x25	; 37
    26da:	c4 01       	movw	r24, r8
    26dc:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    26e0:	97 fd       	sbrc	r25, 7
    26e2:	f6 c0       	rjmp	.+492    	; 0x28d0 <vfscanf+0x24e>
    26e4:	18 17       	cp	r17, r24
    26e6:	09 f4       	brne	.+2      	; 0x26ea <vfscanf+0x68>
    26e8:	e7 c0       	rjmp	.+462    	; 0x28b8 <vfscanf+0x236>
    26ea:	b4 01       	movw	r22, r8
    26ec:	0e 94 a6 18 	call	0x314c	; 0x314c <ungetc>
    26f0:	f4 c0       	rjmp	.+488    	; 0x28da <vfscanf+0x258>
    26f2:	6a 32       	cpi	r22, 0x2A	; 42
    26f4:	19 f0       	breq	.+6      	; 0x26fc <vfscanf+0x7a>
    26f6:	16 2f       	mov	r17, r22
    26f8:	00 e0       	ldi	r16, 0x00	; 0
    26fa:	06 c0       	rjmp	.+12     	; 0x2708 <vfscanf+0x86>
    26fc:	f3 fc       	sbrc	r15, 3
    26fe:	15 91       	lpm	r17, Z+
    2700:	f3 fe       	sbrs	r15, 3
    2702:	11 91       	ld	r17, Z+
    2704:	5f 01       	movw	r10, r30
    2706:	01 e0       	ldi	r16, 0x01	; 1
    2708:	cc 24       	eor	r12, r12
    270a:	dd 24       	eor	r13, r13
    270c:	0e c0       	rjmp	.+28     	; 0x272a <vfscanf+0xa8>
    270e:	02 60       	ori	r16, 0x02	; 2
    2710:	b6 01       	movw	r22, r12
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	40 e2       	ldi	r20, 0x20	; 32
    2718:	0e 94 46 10 	call	0x208c	; 0x208c <mulacc>
    271c:	6b 01       	movw	r12, r22
    271e:	f5 01       	movw	r30, r10
    2720:	f3 fc       	sbrc	r15, 3
    2722:	15 91       	lpm	r17, Z+
    2724:	f3 fe       	sbrs	r15, 3
    2726:	11 91       	ld	r17, Z+
    2728:	5f 01       	movw	r10, r30
    272a:	21 2f       	mov	r18, r17
    272c:	20 53       	subi	r18, 0x30	; 48
    272e:	2a 30       	cpi	r18, 0x0A	; 10
    2730:	70 f3       	brcs	.-36     	; 0x270e <vfscanf+0x8c>
    2732:	01 fd       	sbrc	r16, 1
    2734:	04 c0       	rjmp	.+8      	; 0x273e <vfscanf+0xbc>
    2736:	cc 24       	eor	r12, r12
    2738:	ca 94       	dec	r12
    273a:	dc 2c       	mov	r13, r12
    273c:	04 c0       	rjmp	.+8      	; 0x2746 <vfscanf+0xc4>
    273e:	c1 14       	cp	r12, r1
    2740:	d1 04       	cpc	r13, r1
    2742:	09 f4       	brne	.+2      	; 0x2746 <vfscanf+0xc4>
    2744:	ca c0       	rjmp	.+404    	; 0x28da <vfscanf+0x258>
    2746:	18 36       	cpi	r17, 0x68	; 104
    2748:	21 f0       	breq	.+8      	; 0x2752 <vfscanf+0xd0>
    274a:	1c 36       	cpi	r17, 0x6C	; 108
    274c:	99 f4       	brne	.+38     	; 0x2774 <vfscanf+0xf2>
    274e:	f5 01       	movw	r30, r10
    2750:	0b c0       	rjmp	.+22     	; 0x2768 <vfscanf+0xe6>
    2752:	f5 01       	movw	r30, r10
    2754:	f3 fc       	sbrc	r15, 3
    2756:	65 91       	lpm	r22, Z+
    2758:	f3 fe       	sbrs	r15, 3
    275a:	61 91       	ld	r22, Z+
    275c:	68 36       	cpi	r22, 0x68	; 104
    275e:	19 f0       	breq	.+6      	; 0x2766 <vfscanf+0xe4>
    2760:	5f 01       	movw	r10, r30
    2762:	16 2f       	mov	r17, r22
    2764:	07 c0       	rjmp	.+14     	; 0x2774 <vfscanf+0xf2>
    2766:	08 60       	ori	r16, 0x08	; 8
    2768:	04 60       	ori	r16, 0x04	; 4
    276a:	f3 fc       	sbrc	r15, 3
    276c:	15 91       	lpm	r17, Z+
    276e:	f3 fe       	sbrs	r15, 3
    2770:	11 91       	ld	r17, Z+
    2772:	5f 01       	movw	r10, r30
    2774:	11 23       	and	r17, r17
    2776:	09 f4       	brne	.+2      	; 0x277a <vfscanf+0xf8>
    2778:	b0 c0       	rjmp	.+352    	; 0x28da <vfscanf+0x258>
    277a:	84 e9       	ldi	r24, 0x94	; 148
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	61 2f       	mov	r22, r17
    2780:	70 e0       	ldi	r23, 0x00	; 0
    2782:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <strchr_P>
    2786:	89 2b       	or	r24, r25
    2788:	09 f4       	brne	.+2      	; 0x278c <vfscanf+0x10a>
    278a:	a7 c0       	rjmp	.+334    	; 0x28da <vfscanf+0x258>
    278c:	80 2f       	mov	r24, r16
    278e:	00 ff       	sbrs	r16, 0
    2790:	03 c0       	rjmp	.+6      	; 0x2798 <vfscanf+0x116>
    2792:	ee 24       	eor	r14, r14
    2794:	ff 24       	eor	r15, r15
    2796:	07 c0       	rjmp	.+14     	; 0x27a6 <vfscanf+0x124>
    2798:	f3 01       	movw	r30, r6
    279a:	e0 80       	ld	r14, Z
    279c:	f1 80       	ldd	r15, Z+1	; 0x01
    279e:	22 e0       	ldi	r18, 0x02	; 2
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	62 0e       	add	r6, r18
    27a4:	73 1e       	adc	r7, r19
    27a6:	1e 36       	cpi	r17, 0x6E	; 110
    27a8:	51 f4       	brne	.+20     	; 0x27be <vfscanf+0x13c>
    27aa:	f4 01       	movw	r30, r8
    27ac:	46 81       	ldd	r20, Z+6	; 0x06
    27ae:	57 81       	ldd	r21, Z+7	; 0x07
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	70 e0       	ldi	r23, 0x00	; 0
    27b4:	c7 01       	movw	r24, r14
    27b6:	20 2f       	mov	r18, r16
    27b8:	0e 94 3a 10 	call	0x2074	; 0x2074 <putval>
    27bc:	7d c0       	rjmp	.+250    	; 0x28b8 <vfscanf+0x236>
    27be:	13 36       	cpi	r17, 0x63	; 99
    27c0:	b9 f4       	brne	.+46     	; 0x27f0 <vfscanf+0x16e>
    27c2:	81 fd       	sbrc	r24, 1
    27c4:	03 c0       	rjmp	.+6      	; 0x27cc <vfscanf+0x14a>
    27c6:	11 e0       	ldi	r17, 0x01	; 1
    27c8:	c1 2e       	mov	r12, r17
    27ca:	d1 2c       	mov	r13, r1
    27cc:	c4 01       	movw	r24, r8
    27ce:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    27d2:	97 fd       	sbrc	r25, 7
    27d4:	7d c0       	rjmp	.+250    	; 0x28d0 <vfscanf+0x24e>
    27d6:	e1 14       	cp	r14, r1
    27d8:	f1 04       	cpc	r15, r1
    27da:	19 f0       	breq	.+6      	; 0x27e2 <vfscanf+0x160>
    27dc:	f7 01       	movw	r30, r14
    27de:	81 93       	st	Z+, r24
    27e0:	7f 01       	movw	r14, r30
    27e2:	08 94       	sec
    27e4:	c1 08       	sbc	r12, r1
    27e6:	d1 08       	sbc	r13, r1
    27e8:	c1 14       	cp	r12, r1
    27ea:	d1 04       	cpc	r13, r1
    27ec:	79 f7       	brne	.-34     	; 0x27cc <vfscanf+0x14a>
    27ee:	62 c0       	rjmp	.+196    	; 0x28b4 <vfscanf+0x232>
    27f0:	1b 35       	cpi	r17, 0x5B	; 91
    27f2:	59 f4       	brne	.+22     	; 0x280a <vfscanf+0x188>
    27f4:	c4 01       	movw	r24, r8
    27f6:	b6 01       	movw	r22, r12
    27f8:	a7 01       	movw	r20, r14
    27fa:	95 01       	movw	r18, r10
    27fc:	0e 94 21 11 	call	0x2242	; 0x2242 <conv_brk>
    2800:	5c 01       	movw	r10, r24
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	09 f0       	breq	.+2      	; 0x2808 <vfscanf+0x186>
    2806:	56 c0       	rjmp	.+172    	; 0x28b4 <vfscanf+0x232>
    2808:	50 c0       	rjmp	.+160    	; 0x28aa <vfscanf+0x228>
    280a:	c4 01       	movw	r24, r8
    280c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <skip_spaces>
    2810:	97 fd       	sbrc	r25, 7
    2812:	5e c0       	rjmp	.+188    	; 0x28d0 <vfscanf+0x24e>
    2814:	1f 36       	cpi	r17, 0x6F	; 111
    2816:	d1 f1       	breq	.+116    	; 0x288c <vfscanf+0x20a>
    2818:	10 37       	cpi	r17, 0x70	; 112
    281a:	38 f4       	brcc	.+14     	; 0x282a <vfscanf+0x1a8>
    281c:	14 36       	cpi	r17, 0x64	; 100
    281e:	a1 f1       	breq	.+104    	; 0x2888 <vfscanf+0x206>
    2820:	19 36       	cpi	r17, 0x69	; 105
    2822:	a9 f1       	breq	.+106    	; 0x288e <vfscanf+0x20c>
    2824:	18 35       	cpi	r17, 0x58	; 88
    2826:	d1 f5       	brne	.+116    	; 0x289c <vfscanf+0x21a>
    2828:	2d c0       	rjmp	.+90     	; 0x2884 <vfscanf+0x202>
    282a:	13 37       	cpi	r17, 0x73	; 115
    282c:	51 f0       	breq	.+20     	; 0x2842 <vfscanf+0x1c0>
    282e:	14 37       	cpi	r17, 0x74	; 116
    2830:	18 f4       	brcc	.+6      	; 0x2838 <vfscanf+0x1b6>
    2832:	10 37       	cpi	r17, 0x70	; 112
    2834:	99 f5       	brne	.+102    	; 0x289c <vfscanf+0x21a>
    2836:	26 c0       	rjmp	.+76     	; 0x2884 <vfscanf+0x202>
    2838:	15 37       	cpi	r17, 0x75	; 117
    283a:	31 f1       	breq	.+76     	; 0x2888 <vfscanf+0x206>
    283c:	18 37       	cpi	r17, 0x78	; 120
    283e:	71 f5       	brne	.+92     	; 0x289c <vfscanf+0x21a>
    2840:	21 c0       	rjmp	.+66     	; 0x2884 <vfscanf+0x202>
    2842:	c4 01       	movw	r24, r8
    2844:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <fgetc>
    2848:	ec 01       	movw	r28, r24
    284a:	97 fd       	sbrc	r25, 7
    284c:	15 c0       	rjmp	.+42     	; 0x2878 <vfscanf+0x1f6>
    284e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <isspace>
    2852:	89 2b       	or	r24, r25
    2854:	29 f0       	breq	.+10     	; 0x2860 <vfscanf+0x1de>
    2856:	ce 01       	movw	r24, r28
    2858:	b4 01       	movw	r22, r8
    285a:	0e 94 a6 18 	call	0x314c	; 0x314c <ungetc>
    285e:	0c c0       	rjmp	.+24     	; 0x2878 <vfscanf+0x1f6>
    2860:	e1 14       	cp	r14, r1
    2862:	f1 04       	cpc	r15, r1
    2864:	19 f0       	breq	.+6      	; 0x286c <vfscanf+0x1ea>
    2866:	f7 01       	movw	r30, r14
    2868:	c1 93       	st	Z+, r28
    286a:	7f 01       	movw	r14, r30
    286c:	08 94       	sec
    286e:	c1 08       	sbc	r12, r1
    2870:	d1 08       	sbc	r13, r1
    2872:	c1 14       	cp	r12, r1
    2874:	d1 04       	cpc	r13, r1
    2876:	29 f7       	brne	.-54     	; 0x2842 <vfscanf+0x1c0>
    2878:	e1 14       	cp	r14, r1
    287a:	f1 04       	cpc	r15, r1
    287c:	d9 f0       	breq	.+54     	; 0x28b4 <vfscanf+0x232>
    287e:	f7 01       	movw	r30, r14
    2880:	10 82       	st	Z, r1
    2882:	18 c0       	rjmp	.+48     	; 0x28b4 <vfscanf+0x232>
    2884:	00 64       	ori	r16, 0x40	; 64
    2886:	03 c0       	rjmp	.+6      	; 0x288e <vfscanf+0x20c>
    2888:	00 62       	ori	r16, 0x20	; 32
    288a:	01 c0       	rjmp	.+2      	; 0x288e <vfscanf+0x20c>
    288c:	00 61       	ori	r16, 0x10	; 16
    288e:	c4 01       	movw	r24, r8
    2890:	b6 01       	movw	r22, r12
    2892:	a7 01       	movw	r20, r14
    2894:	20 2f       	mov	r18, r16
    2896:	0e 94 8d 10 	call	0x211a	; 0x211a <conv_int>
    289a:	05 c0       	rjmp	.+10     	; 0x28a6 <vfscanf+0x224>
    289c:	c4 01       	movw	r24, r8
    289e:	b6 01       	movw	r22, r12
    28a0:	a7 01       	movw	r20, r14
    28a2:	0e 94 ee 11 	call	0x23dc	; 0x23dc <conv_flt>
    28a6:	88 23       	and	r24, r24
    28a8:	29 f4       	brne	.+10     	; 0x28b4 <vfscanf+0x232>
    28aa:	f4 01       	movw	r30, r8
    28ac:	83 81       	ldd	r24, Z+3	; 0x03
    28ae:	80 73       	andi	r24, 0x30	; 48
    28b0:	79 f4       	brne	.+30     	; 0x28d0 <vfscanf+0x24e>
    28b2:	13 c0       	rjmp	.+38     	; 0x28da <vfscanf+0x258>
    28b4:	00 ff       	sbrs	r16, 0
    28b6:	53 94       	inc	r5
    28b8:	f4 01       	movw	r30, r8
    28ba:	f3 80       	ldd	r15, Z+3	; 0x03
    28bc:	f5 01       	movw	r30, r10
    28be:	f3 fc       	sbrc	r15, 3
    28c0:	15 91       	lpm	r17, Z+
    28c2:	f3 fe       	sbrs	r15, 3
    28c4:	11 91       	ld	r17, Z+
    28c6:	5f 01       	movw	r10, r30
    28c8:	11 23       	and	r17, r17
    28ca:	09 f0       	breq	.+2      	; 0x28ce <vfscanf+0x24c>
    28cc:	f1 ce       	rjmp	.-542    	; 0x26b0 <vfscanf+0x2e>
    28ce:	05 c0       	rjmp	.+10     	; 0x28da <vfscanf+0x258>
    28d0:	55 20       	and	r5, r5
    28d2:	19 f4       	brne	.+6      	; 0x28da <vfscanf+0x258>
    28d4:	2f ef       	ldi	r18, 0xFF	; 255
    28d6:	3f ef       	ldi	r19, 0xFF	; 255
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <vfscanf+0x25c>
    28da:	25 2d       	mov	r18, r5
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	c9 01       	movw	r24, r18
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	1f 91       	pop	r17
    28e6:	0f 91       	pop	r16
    28e8:	ff 90       	pop	r15
    28ea:	ef 90       	pop	r14
    28ec:	df 90       	pop	r13
    28ee:	cf 90       	pop	r12
    28f0:	bf 90       	pop	r11
    28f2:	af 90       	pop	r10
    28f4:	9f 90       	pop	r9
    28f6:	8f 90       	pop	r8
    28f8:	7f 90       	pop	r7
    28fa:	6f 90       	pop	r6
    28fc:	5f 90       	pop	r5
    28fe:	08 95       	ret

00002900 <__floatunsisf>:
    2900:	e8 94       	clt
    2902:	09 c0       	rjmp	.+18     	; 0x2916 <__floatsisf+0x12>

00002904 <__floatsisf>:
    2904:	97 fb       	bst	r25, 7
    2906:	3e f4       	brtc	.+14     	; 0x2916 <__floatsisf+0x12>
    2908:	90 95       	com	r25
    290a:	80 95       	com	r24
    290c:	70 95       	com	r23
    290e:	61 95       	neg	r22
    2910:	7f 4f       	sbci	r23, 0xFF	; 255
    2912:	8f 4f       	sbci	r24, 0xFF	; 255
    2914:	9f 4f       	sbci	r25, 0xFF	; 255
    2916:	99 23       	and	r25, r25
    2918:	a9 f0       	breq	.+42     	; 0x2944 <__floatsisf+0x40>
    291a:	f9 2f       	mov	r31, r25
    291c:	96 e9       	ldi	r25, 0x96	; 150
    291e:	bb 27       	eor	r27, r27
    2920:	93 95       	inc	r25
    2922:	f6 95       	lsr	r31
    2924:	87 95       	ror	r24
    2926:	77 95       	ror	r23
    2928:	67 95       	ror	r22
    292a:	b7 95       	ror	r27
    292c:	f1 11       	cpse	r31, r1
    292e:	f8 cf       	rjmp	.-16     	; 0x2920 <__floatsisf+0x1c>
    2930:	fa f4       	brpl	.+62     	; 0x2970 <__floatsisf+0x6c>
    2932:	bb 0f       	add	r27, r27
    2934:	11 f4       	brne	.+4      	; 0x293a <__floatsisf+0x36>
    2936:	60 ff       	sbrs	r22, 0
    2938:	1b c0       	rjmp	.+54     	; 0x2970 <__floatsisf+0x6c>
    293a:	6f 5f       	subi	r22, 0xFF	; 255
    293c:	7f 4f       	sbci	r23, 0xFF	; 255
    293e:	8f 4f       	sbci	r24, 0xFF	; 255
    2940:	9f 4f       	sbci	r25, 0xFF	; 255
    2942:	16 c0       	rjmp	.+44     	; 0x2970 <__floatsisf+0x6c>
    2944:	88 23       	and	r24, r24
    2946:	11 f0       	breq	.+4      	; 0x294c <__floatsisf+0x48>
    2948:	96 e9       	ldi	r25, 0x96	; 150
    294a:	11 c0       	rjmp	.+34     	; 0x296e <__floatsisf+0x6a>
    294c:	77 23       	and	r23, r23
    294e:	21 f0       	breq	.+8      	; 0x2958 <__floatsisf+0x54>
    2950:	9e e8       	ldi	r25, 0x8E	; 142
    2952:	87 2f       	mov	r24, r23
    2954:	76 2f       	mov	r23, r22
    2956:	05 c0       	rjmp	.+10     	; 0x2962 <__floatsisf+0x5e>
    2958:	66 23       	and	r22, r22
    295a:	71 f0       	breq	.+28     	; 0x2978 <__floatsisf+0x74>
    295c:	96 e8       	ldi	r25, 0x86	; 134
    295e:	86 2f       	mov	r24, r22
    2960:	70 e0       	ldi	r23, 0x00	; 0
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	2a f0       	brmi	.+10     	; 0x2970 <__floatsisf+0x6c>
    2966:	9a 95       	dec	r25
    2968:	66 0f       	add	r22, r22
    296a:	77 1f       	adc	r23, r23
    296c:	88 1f       	adc	r24, r24
    296e:	da f7       	brpl	.-10     	; 0x2966 <__floatsisf+0x62>
    2970:	88 0f       	add	r24, r24
    2972:	96 95       	lsr	r25
    2974:	87 95       	ror	r24
    2976:	97 f9       	bld	r25, 7
    2978:	08 95       	ret

0000297a <__mulsf3>:
    297a:	0b d0       	rcall	.+22     	; 0x2992 <__mulsf3x>
    297c:	78 c0       	rjmp	.+240    	; 0x2a6e <__fp_round>
    297e:	69 d0       	rcall	.+210    	; 0x2a52 <__fp_pscA>
    2980:	28 f0       	brcs	.+10     	; 0x298c <__mulsf3+0x12>
    2982:	6e d0       	rcall	.+220    	; 0x2a60 <__fp_pscB>
    2984:	18 f0       	brcs	.+6      	; 0x298c <__mulsf3+0x12>
    2986:	95 23       	and	r25, r21
    2988:	09 f0       	breq	.+2      	; 0x298c <__mulsf3+0x12>
    298a:	5a c0       	rjmp	.+180    	; 0x2a40 <__fp_inf>
    298c:	5f c0       	rjmp	.+190    	; 0x2a4c <__fp_nan>
    298e:	11 24       	eor	r1, r1
    2990:	a2 c0       	rjmp	.+324    	; 0x2ad6 <__fp_szero>

00002992 <__mulsf3x>:
    2992:	7e d0       	rcall	.+252    	; 0x2a90 <__fp_split3>
    2994:	a0 f3       	brcs	.-24     	; 0x297e <__mulsf3+0x4>

00002996 <__mulsf3_pse>:
    2996:	95 9f       	mul	r25, r21
    2998:	d1 f3       	breq	.-12     	; 0x298e <__mulsf3+0x14>
    299a:	95 0f       	add	r25, r21
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	55 1f       	adc	r21, r21
    29a0:	62 9f       	mul	r22, r18
    29a2:	f0 01       	movw	r30, r0
    29a4:	72 9f       	mul	r23, r18
    29a6:	bb 27       	eor	r27, r27
    29a8:	f0 0d       	add	r31, r0
    29aa:	b1 1d       	adc	r27, r1
    29ac:	63 9f       	mul	r22, r19
    29ae:	aa 27       	eor	r26, r26
    29b0:	f0 0d       	add	r31, r0
    29b2:	b1 1d       	adc	r27, r1
    29b4:	aa 1f       	adc	r26, r26
    29b6:	64 9f       	mul	r22, r20
    29b8:	66 27       	eor	r22, r22
    29ba:	b0 0d       	add	r27, r0
    29bc:	a1 1d       	adc	r26, r1
    29be:	66 1f       	adc	r22, r22
    29c0:	82 9f       	mul	r24, r18
    29c2:	22 27       	eor	r18, r18
    29c4:	b0 0d       	add	r27, r0
    29c6:	a1 1d       	adc	r26, r1
    29c8:	62 1f       	adc	r22, r18
    29ca:	73 9f       	mul	r23, r19
    29cc:	b0 0d       	add	r27, r0
    29ce:	a1 1d       	adc	r26, r1
    29d0:	62 1f       	adc	r22, r18
    29d2:	83 9f       	mul	r24, r19
    29d4:	a0 0d       	add	r26, r0
    29d6:	61 1d       	adc	r22, r1
    29d8:	22 1f       	adc	r18, r18
    29da:	74 9f       	mul	r23, r20
    29dc:	33 27       	eor	r19, r19
    29de:	a0 0d       	add	r26, r0
    29e0:	61 1d       	adc	r22, r1
    29e2:	23 1f       	adc	r18, r19
    29e4:	84 9f       	mul	r24, r20
    29e6:	60 0d       	add	r22, r0
    29e8:	21 1d       	adc	r18, r1
    29ea:	82 2f       	mov	r24, r18
    29ec:	76 2f       	mov	r23, r22
    29ee:	6a 2f       	mov	r22, r26
    29f0:	11 24       	eor	r1, r1
    29f2:	9f 57       	subi	r25, 0x7F	; 127
    29f4:	50 40       	sbci	r21, 0x00	; 0
    29f6:	8a f0       	brmi	.+34     	; 0x2a1a <__mulsf3_pse+0x84>
    29f8:	e1 f0       	breq	.+56     	; 0x2a32 <__mulsf3_pse+0x9c>
    29fa:	88 23       	and	r24, r24
    29fc:	4a f0       	brmi	.+18     	; 0x2a10 <__mulsf3_pse+0x7a>
    29fe:	ee 0f       	add	r30, r30
    2a00:	ff 1f       	adc	r31, r31
    2a02:	bb 1f       	adc	r27, r27
    2a04:	66 1f       	adc	r22, r22
    2a06:	77 1f       	adc	r23, r23
    2a08:	88 1f       	adc	r24, r24
    2a0a:	91 50       	subi	r25, 0x01	; 1
    2a0c:	50 40       	sbci	r21, 0x00	; 0
    2a0e:	a9 f7       	brne	.-22     	; 0x29fa <__mulsf3_pse+0x64>
    2a10:	9e 3f       	cpi	r25, 0xFE	; 254
    2a12:	51 05       	cpc	r21, r1
    2a14:	70 f0       	brcs	.+28     	; 0x2a32 <__mulsf3_pse+0x9c>
    2a16:	14 c0       	rjmp	.+40     	; 0x2a40 <__fp_inf>
    2a18:	5e c0       	rjmp	.+188    	; 0x2ad6 <__fp_szero>
    2a1a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a1c:	ec f3       	brlt	.-6      	; 0x2a18 <__mulsf3_pse+0x82>
    2a1e:	98 3e       	cpi	r25, 0xE8	; 232
    2a20:	dc f3       	brlt	.-10     	; 0x2a18 <__mulsf3_pse+0x82>
    2a22:	86 95       	lsr	r24
    2a24:	77 95       	ror	r23
    2a26:	67 95       	ror	r22
    2a28:	b7 95       	ror	r27
    2a2a:	f7 95       	ror	r31
    2a2c:	e7 95       	ror	r30
    2a2e:	9f 5f       	subi	r25, 0xFF	; 255
    2a30:	c1 f7       	brne	.-16     	; 0x2a22 <__mulsf3_pse+0x8c>
    2a32:	fe 2b       	or	r31, r30
    2a34:	88 0f       	add	r24, r24
    2a36:	91 1d       	adc	r25, r1
    2a38:	96 95       	lsr	r25
    2a3a:	87 95       	ror	r24
    2a3c:	97 f9       	bld	r25, 7
    2a3e:	08 95       	ret

00002a40 <__fp_inf>:
    2a40:	97 f9       	bld	r25, 7
    2a42:	9f 67       	ori	r25, 0x7F	; 127
    2a44:	80 e8       	ldi	r24, 0x80	; 128
    2a46:	70 e0       	ldi	r23, 0x00	; 0
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	08 95       	ret

00002a4c <__fp_nan>:
    2a4c:	9f ef       	ldi	r25, 0xFF	; 255
    2a4e:	80 ec       	ldi	r24, 0xC0	; 192
    2a50:	08 95       	ret

00002a52 <__fp_pscA>:
    2a52:	00 24       	eor	r0, r0
    2a54:	0a 94       	dec	r0
    2a56:	16 16       	cp	r1, r22
    2a58:	17 06       	cpc	r1, r23
    2a5a:	18 06       	cpc	r1, r24
    2a5c:	09 06       	cpc	r0, r25
    2a5e:	08 95       	ret

00002a60 <__fp_pscB>:
    2a60:	00 24       	eor	r0, r0
    2a62:	0a 94       	dec	r0
    2a64:	12 16       	cp	r1, r18
    2a66:	13 06       	cpc	r1, r19
    2a68:	14 06       	cpc	r1, r20
    2a6a:	05 06       	cpc	r0, r21
    2a6c:	08 95       	ret

00002a6e <__fp_round>:
    2a6e:	09 2e       	mov	r0, r25
    2a70:	03 94       	inc	r0
    2a72:	00 0c       	add	r0, r0
    2a74:	11 f4       	brne	.+4      	; 0x2a7a <__fp_round+0xc>
    2a76:	88 23       	and	r24, r24
    2a78:	52 f0       	brmi	.+20     	; 0x2a8e <__fp_round+0x20>
    2a7a:	bb 0f       	add	r27, r27
    2a7c:	40 f4       	brcc	.+16     	; 0x2a8e <__fp_round+0x20>
    2a7e:	bf 2b       	or	r27, r31
    2a80:	11 f4       	brne	.+4      	; 0x2a86 <__fp_round+0x18>
    2a82:	60 ff       	sbrs	r22, 0
    2a84:	04 c0       	rjmp	.+8      	; 0x2a8e <__fp_round+0x20>
    2a86:	6f 5f       	subi	r22, 0xFF	; 255
    2a88:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8e:	08 95       	ret

00002a90 <__fp_split3>:
    2a90:	57 fd       	sbrc	r21, 7
    2a92:	90 58       	subi	r25, 0x80	; 128
    2a94:	44 0f       	add	r20, r20
    2a96:	55 1f       	adc	r21, r21
    2a98:	59 f0       	breq	.+22     	; 0x2ab0 <__fp_splitA+0x10>
    2a9a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a9c:	71 f0       	breq	.+28     	; 0x2aba <__fp_splitA+0x1a>
    2a9e:	47 95       	ror	r20

00002aa0 <__fp_splitA>:
    2aa0:	88 0f       	add	r24, r24
    2aa2:	97 fb       	bst	r25, 7
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	61 f0       	breq	.+24     	; 0x2ac0 <__fp_splitA+0x20>
    2aa8:	9f 3f       	cpi	r25, 0xFF	; 255
    2aaa:	79 f0       	breq	.+30     	; 0x2aca <__fp_splitA+0x2a>
    2aac:	87 95       	ror	r24
    2aae:	08 95       	ret
    2ab0:	12 16       	cp	r1, r18
    2ab2:	13 06       	cpc	r1, r19
    2ab4:	14 06       	cpc	r1, r20
    2ab6:	55 1f       	adc	r21, r21
    2ab8:	f2 cf       	rjmp	.-28     	; 0x2a9e <__fp_split3+0xe>
    2aba:	46 95       	lsr	r20
    2abc:	f1 df       	rcall	.-30     	; 0x2aa0 <__fp_splitA>
    2abe:	08 c0       	rjmp	.+16     	; 0x2ad0 <__fp_splitA+0x30>
    2ac0:	16 16       	cp	r1, r22
    2ac2:	17 06       	cpc	r1, r23
    2ac4:	18 06       	cpc	r1, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	f1 cf       	rjmp	.-30     	; 0x2aac <__fp_splitA+0xc>
    2aca:	86 95       	lsr	r24
    2acc:	71 05       	cpc	r23, r1
    2ace:	61 05       	cpc	r22, r1
    2ad0:	08 94       	sec
    2ad2:	08 95       	ret

00002ad4 <__fp_zero>:
    2ad4:	e8 94       	clt

00002ad6 <__fp_szero>:
    2ad6:	bb 27       	eor	r27, r27
    2ad8:	66 27       	eor	r22, r22
    2ada:	77 27       	eor	r23, r23
    2adc:	cb 01       	movw	r24, r22
    2ade:	97 f9       	bld	r25, 7
    2ae0:	08 95       	ret

00002ae2 <__subsf3>:
    2ae2:	50 58       	subi	r21, 0x80	; 128

00002ae4 <__addsf3>:
    2ae4:	bb 27       	eor	r27, r27
    2ae6:	aa 27       	eor	r26, r26
    2ae8:	0e d0       	rcall	.+28     	; 0x2b06 <__addsf3x>
    2aea:	c1 cf       	rjmp	.-126    	; 0x2a6e <__fp_round>
    2aec:	b2 df       	rcall	.-156    	; 0x2a52 <__fp_pscA>
    2aee:	30 f0       	brcs	.+12     	; 0x2afc <__addsf3+0x18>
    2af0:	b7 df       	rcall	.-146    	; 0x2a60 <__fp_pscB>
    2af2:	20 f0       	brcs	.+8      	; 0x2afc <__addsf3+0x18>
    2af4:	31 f4       	brne	.+12     	; 0x2b02 <__addsf3+0x1e>
    2af6:	9f 3f       	cpi	r25, 0xFF	; 255
    2af8:	11 f4       	brne	.+4      	; 0x2afe <__addsf3+0x1a>
    2afa:	1e f4       	brtc	.+6      	; 0x2b02 <__addsf3+0x1e>
    2afc:	a7 cf       	rjmp	.-178    	; 0x2a4c <__fp_nan>
    2afe:	0e f4       	brtc	.+2      	; 0x2b02 <__addsf3+0x1e>
    2b00:	e0 95       	com	r30
    2b02:	e7 fb       	bst	r30, 7
    2b04:	9d cf       	rjmp	.-198    	; 0x2a40 <__fp_inf>

00002b06 <__addsf3x>:
    2b06:	e9 2f       	mov	r30, r25
    2b08:	c3 df       	rcall	.-122    	; 0x2a90 <__fp_split3>
    2b0a:	80 f3       	brcs	.-32     	; 0x2aec <__addsf3+0x8>
    2b0c:	ba 17       	cp	r27, r26
    2b0e:	62 07       	cpc	r22, r18
    2b10:	73 07       	cpc	r23, r19
    2b12:	84 07       	cpc	r24, r20
    2b14:	95 07       	cpc	r25, r21
    2b16:	18 f0       	brcs	.+6      	; 0x2b1e <__addsf3x+0x18>
    2b18:	71 f4       	brne	.+28     	; 0x2b36 <__addsf3x+0x30>
    2b1a:	9e f5       	brtc	.+102    	; 0x2b82 <__addsf3x+0x7c>
    2b1c:	db cf       	rjmp	.-74     	; 0x2ad4 <__fp_zero>
    2b1e:	0e f4       	brtc	.+2      	; 0x2b22 <__addsf3x+0x1c>
    2b20:	e0 95       	com	r30
    2b22:	0b 2e       	mov	r0, r27
    2b24:	ba 2f       	mov	r27, r26
    2b26:	a0 2d       	mov	r26, r0
    2b28:	0b 01       	movw	r0, r22
    2b2a:	b9 01       	movw	r22, r18
    2b2c:	90 01       	movw	r18, r0
    2b2e:	0c 01       	movw	r0, r24
    2b30:	ca 01       	movw	r24, r20
    2b32:	a0 01       	movw	r20, r0
    2b34:	11 24       	eor	r1, r1
    2b36:	ff 27       	eor	r31, r31
    2b38:	59 1b       	sub	r21, r25
    2b3a:	99 f0       	breq	.+38     	; 0x2b62 <__addsf3x+0x5c>
    2b3c:	59 3f       	cpi	r21, 0xF9	; 249
    2b3e:	50 f4       	brcc	.+20     	; 0x2b54 <__addsf3x+0x4e>
    2b40:	50 3e       	cpi	r21, 0xE0	; 224
    2b42:	68 f1       	brcs	.+90     	; 0x2b9e <__addsf3x+0x98>
    2b44:	1a 16       	cp	r1, r26
    2b46:	f0 40       	sbci	r31, 0x00	; 0
    2b48:	a2 2f       	mov	r26, r18
    2b4a:	23 2f       	mov	r18, r19
    2b4c:	34 2f       	mov	r19, r20
    2b4e:	44 27       	eor	r20, r20
    2b50:	58 5f       	subi	r21, 0xF8	; 248
    2b52:	f3 cf       	rjmp	.-26     	; 0x2b3a <__addsf3x+0x34>
    2b54:	46 95       	lsr	r20
    2b56:	37 95       	ror	r19
    2b58:	27 95       	ror	r18
    2b5a:	a7 95       	ror	r26
    2b5c:	f0 40       	sbci	r31, 0x00	; 0
    2b5e:	53 95       	inc	r21
    2b60:	c9 f7       	brne	.-14     	; 0x2b54 <__addsf3x+0x4e>
    2b62:	7e f4       	brtc	.+30     	; 0x2b82 <__addsf3x+0x7c>
    2b64:	1f 16       	cp	r1, r31
    2b66:	ba 0b       	sbc	r27, r26
    2b68:	62 0b       	sbc	r22, r18
    2b6a:	73 0b       	sbc	r23, r19
    2b6c:	84 0b       	sbc	r24, r20
    2b6e:	ba f0       	brmi	.+46     	; 0x2b9e <__addsf3x+0x98>
    2b70:	91 50       	subi	r25, 0x01	; 1
    2b72:	a1 f0       	breq	.+40     	; 0x2b9c <__addsf3x+0x96>
    2b74:	ff 0f       	add	r31, r31
    2b76:	bb 1f       	adc	r27, r27
    2b78:	66 1f       	adc	r22, r22
    2b7a:	77 1f       	adc	r23, r23
    2b7c:	88 1f       	adc	r24, r24
    2b7e:	c2 f7       	brpl	.-16     	; 0x2b70 <__addsf3x+0x6a>
    2b80:	0e c0       	rjmp	.+28     	; 0x2b9e <__addsf3x+0x98>
    2b82:	ba 0f       	add	r27, r26
    2b84:	62 1f       	adc	r22, r18
    2b86:	73 1f       	adc	r23, r19
    2b88:	84 1f       	adc	r24, r20
    2b8a:	48 f4       	brcc	.+18     	; 0x2b9e <__addsf3x+0x98>
    2b8c:	87 95       	ror	r24
    2b8e:	77 95       	ror	r23
    2b90:	67 95       	ror	r22
    2b92:	b7 95       	ror	r27
    2b94:	f7 95       	ror	r31
    2b96:	9e 3f       	cpi	r25, 0xFE	; 254
    2b98:	08 f0       	brcs	.+2      	; 0x2b9c <__addsf3x+0x96>
    2b9a:	b3 cf       	rjmp	.-154    	; 0x2b02 <__addsf3+0x1e>
    2b9c:	93 95       	inc	r25
    2b9e:	88 0f       	add	r24, r24
    2ba0:	08 f0       	brcs	.+2      	; 0x2ba4 <__addsf3x+0x9e>
    2ba2:	99 27       	eor	r25, r25
    2ba4:	ee 0f       	add	r30, r30
    2ba6:	97 95       	ror	r25
    2ba8:	87 95       	ror	r24
    2baa:	08 95       	ret

00002bac <__cmpsf2>:
    2bac:	9c d0       	rcall	.+312    	; 0x2ce6 <__fp_cmp>
    2bae:	08 f4       	brcc	.+2      	; 0x2bb2 <__cmpsf2+0x6>
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	08 95       	ret

00002bb4 <__divsf3>:
    2bb4:	0c d0       	rcall	.+24     	; 0x2bce <__divsf3x>
    2bb6:	5b cf       	rjmp	.-330    	; 0x2a6e <__fp_round>
    2bb8:	53 df       	rcall	.-346    	; 0x2a60 <__fp_pscB>
    2bba:	40 f0       	brcs	.+16     	; 0x2bcc <__divsf3+0x18>
    2bbc:	4a df       	rcall	.-364    	; 0x2a52 <__fp_pscA>
    2bbe:	30 f0       	brcs	.+12     	; 0x2bcc <__divsf3+0x18>
    2bc0:	21 f4       	brne	.+8      	; 0x2bca <__divsf3+0x16>
    2bc2:	5f 3f       	cpi	r21, 0xFF	; 255
    2bc4:	19 f0       	breq	.+6      	; 0x2bcc <__divsf3+0x18>
    2bc6:	3c cf       	rjmp	.-392    	; 0x2a40 <__fp_inf>
    2bc8:	51 11       	cpse	r21, r1
    2bca:	85 cf       	rjmp	.-246    	; 0x2ad6 <__fp_szero>
    2bcc:	3f cf       	rjmp	.-386    	; 0x2a4c <__fp_nan>

00002bce <__divsf3x>:
    2bce:	60 df       	rcall	.-320    	; 0x2a90 <__fp_split3>
    2bd0:	98 f3       	brcs	.-26     	; 0x2bb8 <__divsf3+0x4>

00002bd2 <__divsf3_pse>:
    2bd2:	99 23       	and	r25, r25
    2bd4:	c9 f3       	breq	.-14     	; 0x2bc8 <__divsf3+0x14>
    2bd6:	55 23       	and	r21, r21
    2bd8:	b1 f3       	breq	.-20     	; 0x2bc6 <__divsf3+0x12>
    2bda:	95 1b       	sub	r25, r21
    2bdc:	55 0b       	sbc	r21, r21
    2bde:	bb 27       	eor	r27, r27
    2be0:	aa 27       	eor	r26, r26
    2be2:	62 17       	cp	r22, r18
    2be4:	73 07       	cpc	r23, r19
    2be6:	84 07       	cpc	r24, r20
    2be8:	38 f0       	brcs	.+14     	; 0x2bf8 <__divsf3_pse+0x26>
    2bea:	9f 5f       	subi	r25, 0xFF	; 255
    2bec:	5f 4f       	sbci	r21, 0xFF	; 255
    2bee:	22 0f       	add	r18, r18
    2bf0:	33 1f       	adc	r19, r19
    2bf2:	44 1f       	adc	r20, r20
    2bf4:	aa 1f       	adc	r26, r26
    2bf6:	a9 f3       	breq	.-22     	; 0x2be2 <__divsf3_pse+0x10>
    2bf8:	33 d0       	rcall	.+102    	; 0x2c60 <__divsf3_pse+0x8e>
    2bfa:	0e 2e       	mov	r0, r30
    2bfc:	3a f0       	brmi	.+14     	; 0x2c0c <__divsf3_pse+0x3a>
    2bfe:	e0 e8       	ldi	r30, 0x80	; 128
    2c00:	30 d0       	rcall	.+96     	; 0x2c62 <__divsf3_pse+0x90>
    2c02:	91 50       	subi	r25, 0x01	; 1
    2c04:	50 40       	sbci	r21, 0x00	; 0
    2c06:	e6 95       	lsr	r30
    2c08:	00 1c       	adc	r0, r0
    2c0a:	ca f7       	brpl	.-14     	; 0x2bfe <__divsf3_pse+0x2c>
    2c0c:	29 d0       	rcall	.+82     	; 0x2c60 <__divsf3_pse+0x8e>
    2c0e:	fe 2f       	mov	r31, r30
    2c10:	27 d0       	rcall	.+78     	; 0x2c60 <__divsf3_pse+0x8e>
    2c12:	66 0f       	add	r22, r22
    2c14:	77 1f       	adc	r23, r23
    2c16:	88 1f       	adc	r24, r24
    2c18:	bb 1f       	adc	r27, r27
    2c1a:	26 17       	cp	r18, r22
    2c1c:	37 07       	cpc	r19, r23
    2c1e:	48 07       	cpc	r20, r24
    2c20:	ab 07       	cpc	r26, r27
    2c22:	b0 e8       	ldi	r27, 0x80	; 128
    2c24:	09 f0       	breq	.+2      	; 0x2c28 <__divsf3_pse+0x56>
    2c26:	bb 0b       	sbc	r27, r27
    2c28:	80 2d       	mov	r24, r0
    2c2a:	bf 01       	movw	r22, r30
    2c2c:	ff 27       	eor	r31, r31
    2c2e:	93 58       	subi	r25, 0x83	; 131
    2c30:	5f 4f       	sbci	r21, 0xFF	; 255
    2c32:	2a f0       	brmi	.+10     	; 0x2c3e <__divsf3_pse+0x6c>
    2c34:	9e 3f       	cpi	r25, 0xFE	; 254
    2c36:	51 05       	cpc	r21, r1
    2c38:	68 f0       	brcs	.+26     	; 0x2c54 <__divsf3_pse+0x82>
    2c3a:	02 cf       	rjmp	.-508    	; 0x2a40 <__fp_inf>
    2c3c:	4c cf       	rjmp	.-360    	; 0x2ad6 <__fp_szero>
    2c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c40:	ec f3       	brlt	.-6      	; 0x2c3c <__divsf3_pse+0x6a>
    2c42:	98 3e       	cpi	r25, 0xE8	; 232
    2c44:	dc f3       	brlt	.-10     	; 0x2c3c <__divsf3_pse+0x6a>
    2c46:	86 95       	lsr	r24
    2c48:	77 95       	ror	r23
    2c4a:	67 95       	ror	r22
    2c4c:	b7 95       	ror	r27
    2c4e:	f7 95       	ror	r31
    2c50:	9f 5f       	subi	r25, 0xFF	; 255
    2c52:	c9 f7       	brne	.-14     	; 0x2c46 <__divsf3_pse+0x74>
    2c54:	88 0f       	add	r24, r24
    2c56:	91 1d       	adc	r25, r1
    2c58:	96 95       	lsr	r25
    2c5a:	87 95       	ror	r24
    2c5c:	97 f9       	bld	r25, 7
    2c5e:	08 95       	ret
    2c60:	e1 e0       	ldi	r30, 0x01	; 1
    2c62:	66 0f       	add	r22, r22
    2c64:	77 1f       	adc	r23, r23
    2c66:	88 1f       	adc	r24, r24
    2c68:	bb 1f       	adc	r27, r27
    2c6a:	62 17       	cp	r22, r18
    2c6c:	73 07       	cpc	r23, r19
    2c6e:	84 07       	cpc	r24, r20
    2c70:	ba 07       	cpc	r27, r26
    2c72:	20 f0       	brcs	.+8      	; 0x2c7c <__divsf3_pse+0xaa>
    2c74:	62 1b       	sub	r22, r18
    2c76:	73 0b       	sbc	r23, r19
    2c78:	84 0b       	sbc	r24, r20
    2c7a:	ba 0b       	sbc	r27, r26
    2c7c:	ee 1f       	adc	r30, r30
    2c7e:	88 f7       	brcc	.-30     	; 0x2c62 <__divsf3_pse+0x90>
    2c80:	e0 95       	com	r30
    2c82:	08 95       	ret

00002c84 <__fixsfsi>:
    2c84:	04 d0       	rcall	.+8      	; 0x2c8e <__fixunssfsi>
    2c86:	68 94       	set
    2c88:	b1 11       	cpse	r27, r1
    2c8a:	25 cf       	rjmp	.-438    	; 0x2ad6 <__fp_szero>
    2c8c:	08 95       	ret

00002c8e <__fixunssfsi>:
    2c8e:	08 df       	rcall	.-496    	; 0x2aa0 <__fp_splitA>
    2c90:	88 f0       	brcs	.+34     	; 0x2cb4 <__fixunssfsi+0x26>
    2c92:	9f 57       	subi	r25, 0x7F	; 127
    2c94:	90 f0       	brcs	.+36     	; 0x2cba <__fixunssfsi+0x2c>
    2c96:	b9 2f       	mov	r27, r25
    2c98:	99 27       	eor	r25, r25
    2c9a:	b7 51       	subi	r27, 0x17	; 23
    2c9c:	a0 f0       	brcs	.+40     	; 0x2cc6 <__fixunssfsi+0x38>
    2c9e:	d1 f0       	breq	.+52     	; 0x2cd4 <__fixunssfsi+0x46>
    2ca0:	66 0f       	add	r22, r22
    2ca2:	77 1f       	adc	r23, r23
    2ca4:	88 1f       	adc	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	1a f0       	brmi	.+6      	; 0x2cb0 <__fixunssfsi+0x22>
    2caa:	ba 95       	dec	r27
    2cac:	c9 f7       	brne	.-14     	; 0x2ca0 <__fixunssfsi+0x12>
    2cae:	12 c0       	rjmp	.+36     	; 0x2cd4 <__fixunssfsi+0x46>
    2cb0:	b1 30       	cpi	r27, 0x01	; 1
    2cb2:	81 f0       	breq	.+32     	; 0x2cd4 <__fixunssfsi+0x46>
    2cb4:	0f df       	rcall	.-482    	; 0x2ad4 <__fp_zero>
    2cb6:	b1 e0       	ldi	r27, 0x01	; 1
    2cb8:	08 95       	ret
    2cba:	0c cf       	rjmp	.-488    	; 0x2ad4 <__fp_zero>
    2cbc:	67 2f       	mov	r22, r23
    2cbe:	78 2f       	mov	r23, r24
    2cc0:	88 27       	eor	r24, r24
    2cc2:	b8 5f       	subi	r27, 0xF8	; 248
    2cc4:	39 f0       	breq	.+14     	; 0x2cd4 <__fixunssfsi+0x46>
    2cc6:	b9 3f       	cpi	r27, 0xF9	; 249
    2cc8:	cc f3       	brlt	.-14     	; 0x2cbc <__fixunssfsi+0x2e>
    2cca:	86 95       	lsr	r24
    2ccc:	77 95       	ror	r23
    2cce:	67 95       	ror	r22
    2cd0:	b3 95       	inc	r27
    2cd2:	d9 f7       	brne	.-10     	; 0x2cca <__fixunssfsi+0x3c>
    2cd4:	3e f4       	brtc	.+14     	; 0x2ce4 <__fixunssfsi+0x56>
    2cd6:	90 95       	com	r25
    2cd8:	80 95       	com	r24
    2cda:	70 95       	com	r23
    2cdc:	61 95       	neg	r22
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce4:	08 95       	ret

00002ce6 <__fp_cmp>:
    2ce6:	99 0f       	add	r25, r25
    2ce8:	00 08       	sbc	r0, r0
    2cea:	55 0f       	add	r21, r21
    2cec:	aa 0b       	sbc	r26, r26
    2cee:	e0 e8       	ldi	r30, 0x80	; 128
    2cf0:	fe ef       	ldi	r31, 0xFE	; 254
    2cf2:	16 16       	cp	r1, r22
    2cf4:	17 06       	cpc	r1, r23
    2cf6:	e8 07       	cpc	r30, r24
    2cf8:	f9 07       	cpc	r31, r25
    2cfa:	c0 f0       	brcs	.+48     	; 0x2d2c <__fp_cmp+0x46>
    2cfc:	12 16       	cp	r1, r18
    2cfe:	13 06       	cpc	r1, r19
    2d00:	e4 07       	cpc	r30, r20
    2d02:	f5 07       	cpc	r31, r21
    2d04:	98 f0       	brcs	.+38     	; 0x2d2c <__fp_cmp+0x46>
    2d06:	62 1b       	sub	r22, r18
    2d08:	73 0b       	sbc	r23, r19
    2d0a:	84 0b       	sbc	r24, r20
    2d0c:	95 0b       	sbc	r25, r21
    2d0e:	39 f4       	brne	.+14     	; 0x2d1e <__fp_cmp+0x38>
    2d10:	0a 26       	eor	r0, r26
    2d12:	61 f0       	breq	.+24     	; 0x2d2c <__fp_cmp+0x46>
    2d14:	23 2b       	or	r18, r19
    2d16:	24 2b       	or	r18, r20
    2d18:	25 2b       	or	r18, r21
    2d1a:	21 f4       	brne	.+8      	; 0x2d24 <__fp_cmp+0x3e>
    2d1c:	08 95       	ret
    2d1e:	0a 26       	eor	r0, r26
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <__fp_cmp+0x3e>
    2d22:	a1 40       	sbci	r26, 0x01	; 1
    2d24:	a6 95       	lsr	r26
    2d26:	8f ef       	ldi	r24, 0xFF	; 255
    2d28:	81 1d       	adc	r24, r1
    2d2a:	81 1d       	adc	r24, r1
    2d2c:	08 95       	ret

00002d2e <__gesf2>:
    2d2e:	db df       	rcall	.-74     	; 0x2ce6 <__fp_cmp>
    2d30:	08 f4       	brcc	.+2      	; 0x2d34 <__gesf2+0x6>
    2d32:	8f ef       	ldi	r24, 0xFF	; 255
    2d34:	08 95       	ret

00002d36 <__udivmodhi4>:
    2d36:	aa 1b       	sub	r26, r26
    2d38:	bb 1b       	sub	r27, r27
    2d3a:	51 e1       	ldi	r21, 0x11	; 17
    2d3c:	07 c0       	rjmp	.+14     	; 0x2d4c <__udivmodhi4_ep>

00002d3e <__udivmodhi4_loop>:
    2d3e:	aa 1f       	adc	r26, r26
    2d40:	bb 1f       	adc	r27, r27
    2d42:	a6 17       	cp	r26, r22
    2d44:	b7 07       	cpc	r27, r23
    2d46:	10 f0       	brcs	.+4      	; 0x2d4c <__udivmodhi4_ep>
    2d48:	a6 1b       	sub	r26, r22
    2d4a:	b7 0b       	sbc	r27, r23

00002d4c <__udivmodhi4_ep>:
    2d4c:	88 1f       	adc	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	5a 95       	dec	r21
    2d52:	a9 f7       	brne	.-22     	; 0x2d3e <__udivmodhi4_loop>
    2d54:	80 95       	com	r24
    2d56:	90 95       	com	r25
    2d58:	bc 01       	movw	r22, r24
    2d5a:	cd 01       	movw	r24, r26
    2d5c:	08 95       	ret

00002d5e <__divmodhi4>:
    2d5e:	97 fb       	bst	r25, 7
    2d60:	09 2e       	mov	r0, r25
    2d62:	07 26       	eor	r0, r23
    2d64:	0a d0       	rcall	.+20     	; 0x2d7a <__divmodhi4_neg1>
    2d66:	77 fd       	sbrc	r23, 7
    2d68:	04 d0       	rcall	.+8      	; 0x2d72 <__divmodhi4_neg2>
    2d6a:	e5 df       	rcall	.-54     	; 0x2d36 <__udivmodhi4>
    2d6c:	06 d0       	rcall	.+12     	; 0x2d7a <__divmodhi4_neg1>
    2d6e:	00 20       	and	r0, r0
    2d70:	1a f4       	brpl	.+6      	; 0x2d78 <__divmodhi4_exit>

00002d72 <__divmodhi4_neg2>:
    2d72:	70 95       	com	r23
    2d74:	61 95       	neg	r22
    2d76:	7f 4f       	sbci	r23, 0xFF	; 255

00002d78 <__divmodhi4_exit>:
    2d78:	08 95       	ret

00002d7a <__divmodhi4_neg1>:
    2d7a:	f6 f7       	brtc	.-4      	; 0x2d78 <__divmodhi4_exit>
    2d7c:	90 95       	com	r25
    2d7e:	81 95       	neg	r24
    2d80:	9f 4f       	sbci	r25, 0xFF	; 255
    2d82:	08 95       	ret

00002d84 <__ftoa_engine>:
    2d84:	28 30       	cpi	r18, 0x08	; 8
    2d86:	08 f0       	brcs	.+2      	; 0x2d8a <__ftoa_engine+0x6>
    2d88:	27 e0       	ldi	r18, 0x07	; 7
    2d8a:	33 27       	eor	r19, r19
    2d8c:	da 01       	movw	r26, r20
    2d8e:	99 0f       	add	r25, r25
    2d90:	31 1d       	adc	r19, r1
    2d92:	87 fd       	sbrc	r24, 7
    2d94:	91 60       	ori	r25, 0x01	; 1
    2d96:	00 96       	adiw	r24, 0x00	; 0
    2d98:	61 05       	cpc	r22, r1
    2d9a:	71 05       	cpc	r23, r1
    2d9c:	39 f4       	brne	.+14     	; 0x2dac <__ftoa_engine+0x28>
    2d9e:	32 60       	ori	r19, 0x02	; 2
    2da0:	2e 5f       	subi	r18, 0xFE	; 254
    2da2:	3d 93       	st	X+, r19
    2da4:	30 e3       	ldi	r19, 0x30	; 48
    2da6:	2a 95       	dec	r18
    2da8:	e1 f7       	brne	.-8      	; 0x2da2 <__ftoa_engine+0x1e>
    2daa:	08 95       	ret
    2dac:	9f 3f       	cpi	r25, 0xFF	; 255
    2dae:	30 f0       	brcs	.+12     	; 0x2dbc <__ftoa_engine+0x38>
    2db0:	80 38       	cpi	r24, 0x80	; 128
    2db2:	71 05       	cpc	r23, r1
    2db4:	61 05       	cpc	r22, r1
    2db6:	09 f0       	breq	.+2      	; 0x2dba <__ftoa_engine+0x36>
    2db8:	3c 5f       	subi	r19, 0xFC	; 252
    2dba:	3c 5f       	subi	r19, 0xFC	; 252
    2dbc:	3d 93       	st	X+, r19
    2dbe:	91 30       	cpi	r25, 0x01	; 1
    2dc0:	08 f0       	brcs	.+2      	; 0x2dc4 <__ftoa_engine+0x40>
    2dc2:	80 68       	ori	r24, 0x80	; 128
    2dc4:	91 1d       	adc	r25, r1
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	1f 93       	push	r17
    2dcc:	0f 93       	push	r16
    2dce:	ff 92       	push	r15
    2dd0:	ef 92       	push	r14
    2dd2:	19 2f       	mov	r17, r25
    2dd4:	98 7f       	andi	r25, 0xF8	; 248
    2dd6:	96 95       	lsr	r25
    2dd8:	e9 2f       	mov	r30, r25
    2dda:	96 95       	lsr	r25
    2ddc:	96 95       	lsr	r25
    2dde:	e9 0f       	add	r30, r25
    2de0:	ff 27       	eor	r31, r31
    2de2:	e7 57       	subi	r30, 0x77	; 119
    2de4:	fe 4f       	sbci	r31, 0xFE	; 254
    2de6:	99 27       	eor	r25, r25
    2de8:	33 27       	eor	r19, r19
    2dea:	ee 24       	eor	r14, r14
    2dec:	ff 24       	eor	r15, r15
    2dee:	a7 01       	movw	r20, r14
    2df0:	e7 01       	movw	r28, r14
    2df2:	05 90       	lpm	r0, Z+
    2df4:	08 94       	sec
    2df6:	07 94       	ror	r0
    2df8:	28 f4       	brcc	.+10     	; 0x2e04 <__ftoa_engine+0x80>
    2dfa:	36 0f       	add	r19, r22
    2dfc:	e7 1e       	adc	r14, r23
    2dfe:	f8 1e       	adc	r15, r24
    2e00:	49 1f       	adc	r20, r25
    2e02:	51 1d       	adc	r21, r1
    2e04:	66 0f       	add	r22, r22
    2e06:	77 1f       	adc	r23, r23
    2e08:	88 1f       	adc	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	06 94       	lsr	r0
    2e0e:	a1 f7       	brne	.-24     	; 0x2df8 <__ftoa_engine+0x74>
    2e10:	05 90       	lpm	r0, Z+
    2e12:	07 94       	ror	r0
    2e14:	28 f4       	brcc	.+10     	; 0x2e20 <__ftoa_engine+0x9c>
    2e16:	e7 0e       	add	r14, r23
    2e18:	f8 1e       	adc	r15, r24
    2e1a:	49 1f       	adc	r20, r25
    2e1c:	56 1f       	adc	r21, r22
    2e1e:	c1 1d       	adc	r28, r1
    2e20:	77 0f       	add	r23, r23
    2e22:	88 1f       	adc	r24, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	66 1f       	adc	r22, r22
    2e28:	06 94       	lsr	r0
    2e2a:	a1 f7       	brne	.-24     	; 0x2e14 <__ftoa_engine+0x90>
    2e2c:	05 90       	lpm	r0, Z+
    2e2e:	07 94       	ror	r0
    2e30:	28 f4       	brcc	.+10     	; 0x2e3c <__ftoa_engine+0xb8>
    2e32:	f8 0e       	add	r15, r24
    2e34:	49 1f       	adc	r20, r25
    2e36:	56 1f       	adc	r21, r22
    2e38:	c7 1f       	adc	r28, r23
    2e3a:	d1 1d       	adc	r29, r1
    2e3c:	88 0f       	add	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	66 1f       	adc	r22, r22
    2e42:	77 1f       	adc	r23, r23
    2e44:	06 94       	lsr	r0
    2e46:	a1 f7       	brne	.-24     	; 0x2e30 <__ftoa_engine+0xac>
    2e48:	05 90       	lpm	r0, Z+
    2e4a:	07 94       	ror	r0
    2e4c:	20 f4       	brcc	.+8      	; 0x2e56 <__ftoa_engine+0xd2>
    2e4e:	49 0f       	add	r20, r25
    2e50:	56 1f       	adc	r21, r22
    2e52:	c7 1f       	adc	r28, r23
    2e54:	d8 1f       	adc	r29, r24
    2e56:	99 0f       	add	r25, r25
    2e58:	66 1f       	adc	r22, r22
    2e5a:	77 1f       	adc	r23, r23
    2e5c:	88 1f       	adc	r24, r24
    2e5e:	06 94       	lsr	r0
    2e60:	a9 f7       	brne	.-22     	; 0x2e4c <__ftoa_engine+0xc8>
    2e62:	84 91       	lpm	r24, Z+
    2e64:	10 95       	com	r17
    2e66:	17 70       	andi	r17, 0x07	; 7
    2e68:	41 f0       	breq	.+16     	; 0x2e7a <__ftoa_engine+0xf6>
    2e6a:	d6 95       	lsr	r29
    2e6c:	c7 95       	ror	r28
    2e6e:	57 95       	ror	r21
    2e70:	47 95       	ror	r20
    2e72:	f7 94       	ror	r15
    2e74:	e7 94       	ror	r14
    2e76:	1a 95       	dec	r17
    2e78:	c1 f7       	brne	.-16     	; 0x2e6a <__ftoa_engine+0xe6>
    2e7a:	ef e2       	ldi	r30, 0x2F	; 47
    2e7c:	f1 e0       	ldi	r31, 0x01	; 1
    2e7e:	68 94       	set
    2e80:	15 90       	lpm	r1, Z+
    2e82:	15 91       	lpm	r17, Z+
    2e84:	35 91       	lpm	r19, Z+
    2e86:	65 91       	lpm	r22, Z+
    2e88:	95 91       	lpm	r25, Z+
    2e8a:	05 90       	lpm	r0, Z+
    2e8c:	7f e2       	ldi	r23, 0x2F	; 47
    2e8e:	73 95       	inc	r23
    2e90:	e1 18       	sub	r14, r1
    2e92:	f1 0a       	sbc	r15, r17
    2e94:	43 0b       	sbc	r20, r19
    2e96:	56 0b       	sbc	r21, r22
    2e98:	c9 0b       	sbc	r28, r25
    2e9a:	d0 09       	sbc	r29, r0
    2e9c:	c0 f7       	brcc	.-16     	; 0x2e8e <__ftoa_engine+0x10a>
    2e9e:	e1 0c       	add	r14, r1
    2ea0:	f1 1e       	adc	r15, r17
    2ea2:	43 1f       	adc	r20, r19
    2ea4:	56 1f       	adc	r21, r22
    2ea6:	c9 1f       	adc	r28, r25
    2ea8:	d0 1d       	adc	r29, r0
    2eaa:	7e f4       	brtc	.+30     	; 0x2eca <__ftoa_engine+0x146>
    2eac:	70 33       	cpi	r23, 0x30	; 48
    2eae:	11 f4       	brne	.+4      	; 0x2eb4 <__ftoa_engine+0x130>
    2eb0:	8a 95       	dec	r24
    2eb2:	e6 cf       	rjmp	.-52     	; 0x2e80 <__ftoa_engine+0xfc>
    2eb4:	e8 94       	clt
    2eb6:	01 50       	subi	r16, 0x01	; 1
    2eb8:	30 f0       	brcs	.+12     	; 0x2ec6 <__ftoa_engine+0x142>
    2eba:	08 0f       	add	r16, r24
    2ebc:	0a f4       	brpl	.+2      	; 0x2ec0 <__ftoa_engine+0x13c>
    2ebe:	00 27       	eor	r16, r16
    2ec0:	02 17       	cp	r16, r18
    2ec2:	08 f4       	brcc	.+2      	; 0x2ec6 <__ftoa_engine+0x142>
    2ec4:	20 2f       	mov	r18, r16
    2ec6:	23 95       	inc	r18
    2ec8:	02 2f       	mov	r16, r18
    2eca:	7a 33       	cpi	r23, 0x3A	; 58
    2ecc:	28 f0       	brcs	.+10     	; 0x2ed8 <__ftoa_engine+0x154>
    2ece:	79 e3       	ldi	r23, 0x39	; 57
    2ed0:	7d 93       	st	X+, r23
    2ed2:	2a 95       	dec	r18
    2ed4:	e9 f7       	brne	.-6      	; 0x2ed0 <__ftoa_engine+0x14c>
    2ed6:	10 c0       	rjmp	.+32     	; 0x2ef8 <__ftoa_engine+0x174>
    2ed8:	7d 93       	st	X+, r23
    2eda:	2a 95       	dec	r18
    2edc:	89 f6       	brne	.-94     	; 0x2e80 <__ftoa_engine+0xfc>
    2ede:	06 94       	lsr	r0
    2ee0:	97 95       	ror	r25
    2ee2:	67 95       	ror	r22
    2ee4:	37 95       	ror	r19
    2ee6:	17 95       	ror	r17
    2ee8:	17 94       	ror	r1
    2eea:	e1 18       	sub	r14, r1
    2eec:	f1 0a       	sbc	r15, r17
    2eee:	43 0b       	sbc	r20, r19
    2ef0:	56 0b       	sbc	r21, r22
    2ef2:	c9 0b       	sbc	r28, r25
    2ef4:	d0 09       	sbc	r29, r0
    2ef6:	98 f0       	brcs	.+38     	; 0x2f1e <__ftoa_engine+0x19a>
    2ef8:	23 95       	inc	r18
    2efa:	7e 91       	ld	r23, -X
    2efc:	73 95       	inc	r23
    2efe:	7a 33       	cpi	r23, 0x3A	; 58
    2f00:	08 f0       	brcs	.+2      	; 0x2f04 <__ftoa_engine+0x180>
    2f02:	70 e3       	ldi	r23, 0x30	; 48
    2f04:	7c 93       	st	X, r23
    2f06:	20 13       	cpse	r18, r16
    2f08:	b8 f7       	brcc	.-18     	; 0x2ef8 <__ftoa_engine+0x174>
    2f0a:	7e 91       	ld	r23, -X
    2f0c:	70 61       	ori	r23, 0x10	; 16
    2f0e:	7d 93       	st	X+, r23
    2f10:	30 f0       	brcs	.+12     	; 0x2f1e <__ftoa_engine+0x19a>
    2f12:	83 95       	inc	r24
    2f14:	71 e3       	ldi	r23, 0x31	; 49
    2f16:	7d 93       	st	X+, r23
    2f18:	70 e3       	ldi	r23, 0x30	; 48
    2f1a:	2a 95       	dec	r18
    2f1c:	e1 f7       	brne	.-8      	; 0x2f16 <__ftoa_engine+0x192>
    2f1e:	11 24       	eor	r1, r1
    2f20:	ef 90       	pop	r14
    2f22:	ff 90       	pop	r15
    2f24:	0f 91       	pop	r16
    2f26:	1f 91       	pop	r17
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	99 27       	eor	r25, r25
    2f2e:	87 fd       	sbrc	r24, 7
    2f30:	90 95       	com	r25
    2f32:	08 95       	ret

00002f34 <isspace>:
    2f34:	91 11       	cpse	r25, r1
    2f36:	82 c1       	rjmp	.+772    	; 0x323c <__ctype_isfalse>
    2f38:	80 32       	cpi	r24, 0x20	; 32
    2f3a:	19 f0       	breq	.+6      	; 0x2f42 <isspace+0xe>
    2f3c:	89 50       	subi	r24, 0x09	; 9
    2f3e:	85 50       	subi	r24, 0x05	; 5
    2f40:	d0 f7       	brcc	.-12     	; 0x2f36 <isspace+0x2>
    2f42:	08 95       	ret

00002f44 <tolower>:
    2f44:	91 11       	cpse	r25, r1
    2f46:	08 95       	ret
    2f48:	81 54       	subi	r24, 0x41	; 65
    2f4a:	8a 51       	subi	r24, 0x1A	; 26
    2f4c:	08 f4       	brcc	.+2      	; 0x2f50 <tolower+0xc>
    2f4e:	80 5e       	subi	r24, 0xE0	; 224
    2f50:	85 5a       	subi	r24, 0xA5	; 165
    2f52:	08 95       	ret

00002f54 <strchr_P>:
    2f54:	fc 01       	movw	r30, r24
    2f56:	05 90       	lpm	r0, Z+
    2f58:	06 16       	cp	r0, r22
    2f5a:	21 f0       	breq	.+8      	; 0x2f64 <strchr_P+0x10>
    2f5c:	00 20       	and	r0, r0
    2f5e:	d9 f7       	brne	.-10     	; 0x2f56 <strchr_P+0x2>
    2f60:	c0 01       	movw	r24, r0
    2f62:	08 95       	ret
    2f64:	31 97       	sbiw	r30, 0x01	; 1
    2f66:	cf 01       	movw	r24, r30
    2f68:	08 95       	ret

00002f6a <strnlen_P>:
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	05 90       	lpm	r0, Z+
    2f6e:	61 50       	subi	r22, 0x01	; 1
    2f70:	70 40       	sbci	r23, 0x00	; 0
    2f72:	01 10       	cpse	r0, r1
    2f74:	d8 f7       	brcc	.-10     	; 0x2f6c <strnlen_P+0x2>
    2f76:	80 95       	com	r24
    2f78:	90 95       	com	r25
    2f7a:	8e 0f       	add	r24, r30
    2f7c:	9f 1f       	adc	r25, r31
    2f7e:	08 95       	ret

00002f80 <strnlen>:
    2f80:	fc 01       	movw	r30, r24
    2f82:	61 50       	subi	r22, 0x01	; 1
    2f84:	70 40       	sbci	r23, 0x00	; 0
    2f86:	01 90       	ld	r0, Z+
    2f88:	01 10       	cpse	r0, r1
    2f8a:	d8 f7       	brcc	.-10     	; 0x2f82 <strnlen+0x2>
    2f8c:	80 95       	com	r24
    2f8e:	90 95       	com	r25
    2f90:	8e 0f       	add	r24, r30
    2f92:	9f 1f       	adc	r25, r31
    2f94:	08 95       	ret

00002f96 <fgetc>:
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	ec 01       	movw	r28, r24
    2f9c:	4b 81       	ldd	r20, Y+3	; 0x03
    2f9e:	40 ff       	sbrs	r20, 0
    2fa0:	1a c0       	rjmp	.+52     	; 0x2fd6 <fgetc+0x40>
    2fa2:	46 ff       	sbrs	r20, 6
    2fa4:	0a c0       	rjmp	.+20     	; 0x2fba <fgetc+0x24>
    2fa6:	4f 7b       	andi	r20, 0xBF	; 191
    2fa8:	4b 83       	std	Y+3, r20	; 0x03
    2faa:	8e 81       	ldd	r24, Y+6	; 0x06
    2fac:	9f 81       	ldd	r25, Y+7	; 0x07
    2fae:	01 96       	adiw	r24, 0x01	; 1
    2fb0:	9f 83       	std	Y+7, r25	; 0x07
    2fb2:	8e 83       	std	Y+6, r24	; 0x06
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	2b c0       	rjmp	.+86     	; 0x3010 <fgetc+0x7a>
    2fba:	42 ff       	sbrs	r20, 2
    2fbc:	13 c0       	rjmp	.+38     	; 0x2fe4 <fgetc+0x4e>
    2fbe:	e8 81       	ld	r30, Y
    2fc0:	f9 81       	ldd	r31, Y+1	; 0x01
    2fc2:	80 81       	ld	r24, Z
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	33 27       	eor	r19, r19
    2fc8:	27 fd       	sbrc	r18, 7
    2fca:	30 95       	com	r19
    2fcc:	21 15       	cp	r18, r1
    2fce:	31 05       	cpc	r19, r1
    2fd0:	29 f4       	brne	.+10     	; 0x2fdc <fgetc+0x46>
    2fd2:	40 62       	ori	r20, 0x20	; 32
    2fd4:	4b 83       	std	Y+3, r20	; 0x03
    2fd6:	2f ef       	ldi	r18, 0xFF	; 255
    2fd8:	3f ef       	ldi	r19, 0xFF	; 255
    2fda:	1b c0       	rjmp	.+54     	; 0x3012 <fgetc+0x7c>
    2fdc:	31 96       	adiw	r30, 0x01	; 1
    2fde:	f9 83       	std	Y+1, r31	; 0x01
    2fe0:	e8 83       	st	Y, r30
    2fe2:	11 c0       	rjmp	.+34     	; 0x3006 <fgetc+0x70>
    2fe4:	ea 85       	ldd	r30, Y+10	; 0x0a
    2fe6:	fb 85       	ldd	r31, Y+11	; 0x0b
    2fe8:	ce 01       	movw	r24, r28
    2fea:	09 95       	icall
    2fec:	9c 01       	movw	r18, r24
    2fee:	97 ff       	sbrs	r25, 7
    2ff0:	0a c0       	rjmp	.+20     	; 0x3006 <fgetc+0x70>
    2ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff4:	2f 5f       	subi	r18, 0xFF	; 255
    2ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff8:	11 f0       	breq	.+4      	; 0x2ffe <fgetc+0x68>
    2ffa:	80 e2       	ldi	r24, 0x20	; 32
    2ffc:	01 c0       	rjmp	.+2      	; 0x3000 <fgetc+0x6a>
    2ffe:	80 e1       	ldi	r24, 0x10	; 16
    3000:	89 2b       	or	r24, r25
    3002:	8b 83       	std	Y+3, r24	; 0x03
    3004:	e8 cf       	rjmp	.-48     	; 0x2fd6 <fgetc+0x40>
    3006:	8e 81       	ldd	r24, Y+6	; 0x06
    3008:	9f 81       	ldd	r25, Y+7	; 0x07
    300a:	01 96       	adiw	r24, 0x01	; 1
    300c:	9f 83       	std	Y+7, r25	; 0x07
    300e:	8e 83       	std	Y+6, r24	; 0x06
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	c9 01       	movw	r24, r18
    3014:	df 91       	pop	r29
    3016:	cf 91       	pop	r28
    3018:	08 95       	ret

0000301a <fputc>:
    301a:	0f 93       	push	r16
    301c:	1f 93       	push	r17
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	8c 01       	movw	r16, r24
    3024:	eb 01       	movw	r28, r22
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	81 ff       	sbrs	r24, 1
    302a:	1b c0       	rjmp	.+54     	; 0x3062 <fputc+0x48>
    302c:	82 ff       	sbrs	r24, 2
    302e:	0d c0       	rjmp	.+26     	; 0x304a <fputc+0x30>
    3030:	2e 81       	ldd	r18, Y+6	; 0x06
    3032:	3f 81       	ldd	r19, Y+7	; 0x07
    3034:	8c 81       	ldd	r24, Y+4	; 0x04
    3036:	9d 81       	ldd	r25, Y+5	; 0x05
    3038:	28 17       	cp	r18, r24
    303a:	39 07       	cpc	r19, r25
    303c:	64 f4       	brge	.+24     	; 0x3056 <fputc+0x3c>
    303e:	e8 81       	ld	r30, Y
    3040:	f9 81       	ldd	r31, Y+1	; 0x01
    3042:	01 93       	st	Z+, r16
    3044:	f9 83       	std	Y+1, r31	; 0x01
    3046:	e8 83       	st	Y, r30
    3048:	06 c0       	rjmp	.+12     	; 0x3056 <fputc+0x3c>
    304a:	e8 85       	ldd	r30, Y+8	; 0x08
    304c:	f9 85       	ldd	r31, Y+9	; 0x09
    304e:	80 2f       	mov	r24, r16
    3050:	09 95       	icall
    3052:	89 2b       	or	r24, r25
    3054:	31 f4       	brne	.+12     	; 0x3062 <fputc+0x48>
    3056:	8e 81       	ldd	r24, Y+6	; 0x06
    3058:	9f 81       	ldd	r25, Y+7	; 0x07
    305a:	01 96       	adiw	r24, 0x01	; 1
    305c:	9f 83       	std	Y+7, r25	; 0x07
    305e:	8e 83       	std	Y+6, r24	; 0x06
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <fputc+0x4c>
    3062:	0f ef       	ldi	r16, 0xFF	; 255
    3064:	1f ef       	ldi	r17, 0xFF	; 255
    3066:	c8 01       	movw	r24, r16
    3068:	df 91       	pop	r29
    306a:	cf 91       	pop	r28
    306c:	1f 91       	pop	r17
    306e:	0f 91       	pop	r16
    3070:	08 95       	ret

00003072 <fputs>:
    3072:	ef 92       	push	r14
    3074:	ff 92       	push	r15
    3076:	0f 93       	push	r16
    3078:	1f 93       	push	r17
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	7c 01       	movw	r14, r24
    3080:	8b 01       	movw	r16, r22
    3082:	db 01       	movw	r26, r22
    3084:	13 96       	adiw	r26, 0x03	; 3
    3086:	8c 91       	ld	r24, X
    3088:	81 fd       	sbrc	r24, 1
    308a:	03 c0       	rjmp	.+6      	; 0x3092 <fputs+0x20>
    308c:	cf ef       	ldi	r28, 0xFF	; 255
    308e:	df ef       	ldi	r29, 0xFF	; 255
    3090:	13 c0       	rjmp	.+38     	; 0x30b8 <fputs+0x46>
    3092:	c0 e0       	ldi	r28, 0x00	; 0
    3094:	d0 e0       	ldi	r29, 0x00	; 0
    3096:	0b c0       	rjmp	.+22     	; 0x30ae <fputs+0x3c>
    3098:	d8 01       	movw	r26, r16
    309a:	18 96       	adiw	r26, 0x08	; 8
    309c:	ed 91       	ld	r30, X+
    309e:	fc 91       	ld	r31, X
    30a0:	19 97       	sbiw	r26, 0x09	; 9
    30a2:	b8 01       	movw	r22, r16
    30a4:	09 95       	icall
    30a6:	89 2b       	or	r24, r25
    30a8:	11 f0       	breq	.+4      	; 0x30ae <fputs+0x3c>
    30aa:	cf ef       	ldi	r28, 0xFF	; 255
    30ac:	df ef       	ldi	r29, 0xFF	; 255
    30ae:	f7 01       	movw	r30, r14
    30b0:	81 91       	ld	r24, Z+
    30b2:	7f 01       	movw	r14, r30
    30b4:	88 23       	and	r24, r24
    30b6:	81 f7       	brne	.-32     	; 0x3098 <fputs+0x26>
    30b8:	ce 01       	movw	r24, r28
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	1f 91       	pop	r17
    30c0:	0f 91       	pop	r16
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	08 95       	ret

000030c8 <fscanf>:
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	9e 01       	movw	r18, r28
    30d2:	27 5f       	subi	r18, 0xF7	; 247
    30d4:	3f 4f       	sbci	r19, 0xFF	; 255
    30d6:	8d 81       	ldd	r24, Y+5	; 0x05
    30d8:	9e 81       	ldd	r25, Y+6	; 0x06
    30da:	6f 81       	ldd	r22, Y+7	; 0x07
    30dc:	78 85       	ldd	r23, Y+8	; 0x08
    30de:	a9 01       	movw	r20, r18
    30e0:	0e 94 41 13 	call	0x2682	; 0x2682 <vfscanf>
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	08 95       	ret

000030ea <sprintf>:
    30ea:	0f 93       	push	r16
    30ec:	1f 93       	push	r17
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	2e 97       	sbiw	r28, 0x0e	; 14
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	0d 89       	ldd	r16, Y+21	; 0x15
    3104:	1e 89       	ldd	r17, Y+22	; 0x16
    3106:	86 e0       	ldi	r24, 0x06	; 6
    3108:	8c 83       	std	Y+4, r24	; 0x04
    310a:	1a 83       	std	Y+2, r17	; 0x02
    310c:	09 83       	std	Y+1, r16	; 0x01
    310e:	8f ef       	ldi	r24, 0xFF	; 255
    3110:	9f e7       	ldi	r25, 0x7F	; 127
    3112:	9e 83       	std	Y+6, r25	; 0x06
    3114:	8d 83       	std	Y+5, r24	; 0x05
    3116:	9e 01       	movw	r18, r28
    3118:	27 5e       	subi	r18, 0xE7	; 231
    311a:	3f 4f       	sbci	r19, 0xFF	; 255
    311c:	ce 01       	movw	r24, r28
    311e:	01 96       	adiw	r24, 0x01	; 1
    3120:	6f 89       	ldd	r22, Y+23	; 0x17
    3122:	78 8d       	ldd	r23, Y+24	; 0x18
    3124:	a9 01       	movw	r20, r18
    3126:	0e 94 8a 0c 	call	0x1914	; 0x1914 <vfprintf>
    312a:	2f 81       	ldd	r18, Y+7	; 0x07
    312c:	38 85       	ldd	r19, Y+8	; 0x08
    312e:	02 0f       	add	r16, r18
    3130:	13 1f       	adc	r17, r19
    3132:	f8 01       	movw	r30, r16
    3134:	10 82       	st	Z, r1
    3136:	2e 96       	adiw	r28, 0x0e	; 14
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	cf 91       	pop	r28
    3144:	df 91       	pop	r29
    3146:	1f 91       	pop	r17
    3148:	0f 91       	pop	r16
    314a:	08 95       	ret

0000314c <ungetc>:
    314c:	9c 01       	movw	r18, r24
    314e:	fb 01       	movw	r30, r22
    3150:	83 81       	ldd	r24, Z+3	; 0x03
    3152:	80 ff       	sbrs	r24, 0
    3154:	11 c0       	rjmp	.+34     	; 0x3178 <ungetc+0x2c>
    3156:	86 fd       	sbrc	r24, 6
    3158:	0f c0       	rjmp	.+30     	; 0x3178 <ungetc+0x2c>
    315a:	9f ef       	ldi	r25, 0xFF	; 255
    315c:	2f 3f       	cpi	r18, 0xFF	; 255
    315e:	39 07       	cpc	r19, r25
    3160:	59 f0       	breq	.+22     	; 0x3178 <ungetc+0x2c>
    3162:	22 83       	std	Z+2, r18	; 0x02
    3164:	80 64       	ori	r24, 0x40	; 64
    3166:	8f 7d       	andi	r24, 0xDF	; 223
    3168:	83 83       	std	Z+3, r24	; 0x03
    316a:	86 81       	ldd	r24, Z+6	; 0x06
    316c:	97 81       	ldd	r25, Z+7	; 0x07
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	97 83       	std	Z+7, r25	; 0x07
    3172:	86 83       	std	Z+6, r24	; 0x06
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	02 c0       	rjmp	.+4      	; 0x317c <ungetc+0x30>
    3178:	2f ef       	ldi	r18, 0xFF	; 255
    317a:	3f ef       	ldi	r19, 0xFF	; 255
    317c:	c9 01       	movw	r24, r18
    317e:	08 95       	ret

00003180 <__ultoa_invert>:
    3180:	fa 01       	movw	r30, r20
    3182:	aa 27       	eor	r26, r26
    3184:	28 30       	cpi	r18, 0x08	; 8
    3186:	51 f1       	breq	.+84     	; 0x31dc <__ultoa_invert+0x5c>
    3188:	20 31       	cpi	r18, 0x10	; 16
    318a:	81 f1       	breq	.+96     	; 0x31ec <__ultoa_invert+0x6c>
    318c:	e8 94       	clt
    318e:	6f 93       	push	r22
    3190:	6e 7f       	andi	r22, 0xFE	; 254
    3192:	6e 5f       	subi	r22, 0xFE	; 254
    3194:	7f 4f       	sbci	r23, 0xFF	; 255
    3196:	8f 4f       	sbci	r24, 0xFF	; 255
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	af 4f       	sbci	r26, 0xFF	; 255
    319c:	b1 e0       	ldi	r27, 0x01	; 1
    319e:	3e d0       	rcall	.+124    	; 0x321c <__ultoa_invert+0x9c>
    31a0:	b4 e0       	ldi	r27, 0x04	; 4
    31a2:	3c d0       	rcall	.+120    	; 0x321c <__ultoa_invert+0x9c>
    31a4:	67 0f       	add	r22, r23
    31a6:	78 1f       	adc	r23, r24
    31a8:	89 1f       	adc	r24, r25
    31aa:	9a 1f       	adc	r25, r26
    31ac:	a1 1d       	adc	r26, r1
    31ae:	68 0f       	add	r22, r24
    31b0:	79 1f       	adc	r23, r25
    31b2:	8a 1f       	adc	r24, r26
    31b4:	91 1d       	adc	r25, r1
    31b6:	a1 1d       	adc	r26, r1
    31b8:	6a 0f       	add	r22, r26
    31ba:	71 1d       	adc	r23, r1
    31bc:	81 1d       	adc	r24, r1
    31be:	91 1d       	adc	r25, r1
    31c0:	a1 1d       	adc	r26, r1
    31c2:	20 d0       	rcall	.+64     	; 0x3204 <__ultoa_invert+0x84>
    31c4:	09 f4       	brne	.+2      	; 0x31c8 <__ultoa_invert+0x48>
    31c6:	68 94       	set
    31c8:	3f 91       	pop	r19
    31ca:	2a e0       	ldi	r18, 0x0A	; 10
    31cc:	26 9f       	mul	r18, r22
    31ce:	11 24       	eor	r1, r1
    31d0:	30 19       	sub	r19, r0
    31d2:	30 5d       	subi	r19, 0xD0	; 208
    31d4:	31 93       	st	Z+, r19
    31d6:	de f6       	brtc	.-74     	; 0x318e <__ultoa_invert+0xe>
    31d8:	cf 01       	movw	r24, r30
    31da:	08 95       	ret
    31dc:	46 2f       	mov	r20, r22
    31de:	47 70       	andi	r20, 0x07	; 7
    31e0:	40 5d       	subi	r20, 0xD0	; 208
    31e2:	41 93       	st	Z+, r20
    31e4:	b3 e0       	ldi	r27, 0x03	; 3
    31e6:	0f d0       	rcall	.+30     	; 0x3206 <__ultoa_invert+0x86>
    31e8:	c9 f7       	brne	.-14     	; 0x31dc <__ultoa_invert+0x5c>
    31ea:	f6 cf       	rjmp	.-20     	; 0x31d8 <__ultoa_invert+0x58>
    31ec:	46 2f       	mov	r20, r22
    31ee:	4f 70       	andi	r20, 0x0F	; 15
    31f0:	40 5d       	subi	r20, 0xD0	; 208
    31f2:	4a 33       	cpi	r20, 0x3A	; 58
    31f4:	18 f0       	brcs	.+6      	; 0x31fc <__ultoa_invert+0x7c>
    31f6:	49 5d       	subi	r20, 0xD9	; 217
    31f8:	31 fd       	sbrc	r19, 1
    31fa:	40 52       	subi	r20, 0x20	; 32
    31fc:	41 93       	st	Z+, r20
    31fe:	02 d0       	rcall	.+4      	; 0x3204 <__ultoa_invert+0x84>
    3200:	a9 f7       	brne	.-22     	; 0x31ec <__ultoa_invert+0x6c>
    3202:	ea cf       	rjmp	.-44     	; 0x31d8 <__ultoa_invert+0x58>
    3204:	b4 e0       	ldi	r27, 0x04	; 4
    3206:	a6 95       	lsr	r26
    3208:	97 95       	ror	r25
    320a:	87 95       	ror	r24
    320c:	77 95       	ror	r23
    320e:	67 95       	ror	r22
    3210:	ba 95       	dec	r27
    3212:	c9 f7       	brne	.-14     	; 0x3206 <__ultoa_invert+0x86>
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	61 05       	cpc	r22, r1
    3218:	71 05       	cpc	r23, r1
    321a:	08 95       	ret
    321c:	9b 01       	movw	r18, r22
    321e:	ac 01       	movw	r20, r24
    3220:	0a 2e       	mov	r0, r26
    3222:	06 94       	lsr	r0
    3224:	57 95       	ror	r21
    3226:	47 95       	ror	r20
    3228:	37 95       	ror	r19
    322a:	27 95       	ror	r18
    322c:	ba 95       	dec	r27
    322e:	c9 f7       	brne	.-14     	; 0x3222 <__ultoa_invert+0xa2>
    3230:	62 0f       	add	r22, r18
    3232:	73 1f       	adc	r23, r19
    3234:	84 1f       	adc	r24, r20
    3236:	95 1f       	adc	r25, r21
    3238:	a0 1d       	adc	r26, r0
    323a:	08 95       	ret

0000323c <__ctype_isfalse>:
    323c:	99 27       	eor	r25, r25
    323e:	88 27       	eor	r24, r24

00003240 <__ctype_istrue>:
    3240:	08 95       	ret

00003242 <_exit>:
    3242:	f8 94       	cli

00003244 <__stop_program>:
    3244:	ff cf       	rjmp	.-2      	; 0x3244 <__stop_program>
