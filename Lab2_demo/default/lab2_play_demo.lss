
lab2_play_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000238  00800100  0000052c  000005c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800338  00800338  000007f8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000f5b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00000f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003b2  00000000  00000000  00000fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001a0  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000015b  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c8  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000195  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000165  00000000  00000000  000018d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  00001a3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 33       	cpi	r26, 0x38	; 56
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a8 e3       	ldi	r26, 0x38	; 56
  b6:	b3 e0       	ldi	r27, 0x03	; 3
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 35       	cpi	r26, 0x5B	; 91
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
  c6:	0c 94 94 02 	jmp	0x528	; 0x528 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_18>:
16 MHz 
------ = 62,500 Hz
 256 
 To generate a 1ms time base, 
*/
ISR( TIMER0_OVF_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	0b b6       	in	r0, 0x3b	; 59
  da:	0f 92       	push	r0
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31

	accumulator_a += increment_a;
  f8:	80 91 3d 03 	lds	r24, 0x033D
  fc:	90 91 3e 03 	lds	r25, 0x033E
 100:	a0 91 3f 03 	lds	r26, 0x033F
 104:	b0 91 40 03 	lds	r27, 0x0340
 108:	40 91 38 03 	lds	r20, 0x0338
 10c:	50 91 39 03 	lds	r21, 0x0339
 110:	60 91 3a 03 	lds	r22, 0x033A
 114:	70 91 3b 03 	lds	r23, 0x033B
 118:	84 0f       	add	r24, r20
 11a:	95 1f       	adc	r25, r21
 11c:	a6 1f       	adc	r26, r22
 11e:	b7 1f       	adc	r27, r23
 120:	80 93 3d 03 	sts	0x033D, r24
 124:	90 93 3e 03 	sts	0x033E, r25
 128:	a0 93 3f 03 	sts	0x033F, r26
 12c:	b0 93 40 03 	sts	0x0340, r27
	accumulator_b += increment_b;
 130:	80 91 49 03 	lds	r24, 0x0349
 134:	90 91 4a 03 	lds	r25, 0x034A
 138:	a0 91 4b 03 	lds	r26, 0x034B
 13c:	b0 91 4c 03 	lds	r27, 0x034C
 140:	40 91 51 03 	lds	r20, 0x0351
 144:	50 91 52 03 	lds	r21, 0x0352
 148:	60 91 53 03 	lds	r22, 0x0353
 14c:	70 91 54 03 	lds	r23, 0x0354
 150:	84 0f       	add	r24, r20
 152:	95 1f       	adc	r25, r21
 154:	a6 1f       	adc	r26, r22
 156:	b7 1f       	adc	r27, r23
 158:	80 93 49 03 	sts	0x0349, r24
 15c:	90 93 4a 03 	sts	0x034A, r25
 160:	a0 93 4b 03 	sts	0x034B, r26
 164:	b0 93 4c 03 	sts	0x034C, r27

	highbyte_a = accumulator_a >> 24;
 168:	80 91 3d 03 	lds	r24, 0x033D
 16c:	90 91 3e 03 	lds	r25, 0x033E
 170:	a0 91 3f 03 	lds	r26, 0x033F
 174:	b0 91 40 03 	lds	r27, 0x0340
 178:	8b 2f       	mov	r24, r27
 17a:	99 27       	eor	r25, r25
 17c:	aa 27       	eor	r26, r26
 17e:	bb 27       	eor	r27, r27
 180:	80 93 4d 03 	sts	0x034D, r24
	highbyte_b = accumulator_b >> 24;
 184:	80 91 49 03 	lds	r24, 0x0349
 188:	90 91 4a 03 	lds	r25, 0x034A
 18c:	a0 91 4b 03 	lds	r26, 0x034B
 190:	b0 91 4c 03 	lds	r27, 0x034C
 194:	8b 2f       	mov	r24, r27
 196:	99 27       	eor	r25, r25
 198:	aa 27       	eor	r26, r26
 19a:	bb 27       	eor	r27, r27
 19c:	80 93 56 03 	sts	0x0356, r24

	OCR0A = 128 + 
	   ( (
	   	   (sineTable[highbyte_b] + sineTable[highbyte_a])
 1a0:	c0 91 56 03 	lds	r28, 0x0356
 1a4:	e0 91 4d 03 	lds	r30, 0x034D
	   	                          * rampTable[rampCount]
 1a8:	80 91 45 03 	lds	r24, 0x0345
 1ac:	90 91 46 03 	lds	r25, 0x0346
 1b0:	a0 91 47 03 	lds	r26, 0x0347
 1b4:	b0 91 48 03 	lds	r27, 0x0348
	highbyte_a = accumulator_a >> 24;
	highbyte_b = accumulator_b >> 24;

	OCR0A = 128 + 
	   ( (
	   	   (sineTable[highbyte_b] + sineTable[highbyte_a])
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
 1ba:	c8 5c       	subi	r28, 0xC8	; 200
 1bc:	dd 4f       	sbci	r29, 0xFD	; 253
 1be:	48 81       	ld	r20, Y
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e8 5c       	subi	r30, 0xC8	; 200
 1c4:	fd 4f       	sbci	r31, 0xFD	; 253
 1c6:	20 81       	ld	r18, Z
 1c8:	33 27       	eor	r19, r19
 1ca:	27 fd       	sbrc	r18, 7
 1cc:	30 95       	com	r19
 1ce:	24 0f       	add	r18, r20
 1d0:	31 1d       	adc	r19, r1
 1d2:	47 fd       	sbrc	r20, 7
 1d4:	3a 95       	dec	r19
	   	                          * rampTable[rampCount]
 1d6:	fc 01       	movw	r30, r24
 1d8:	e0 50       	subi	r30, 0x00	; 0
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	40 81       	ld	r20, Z
 1de:	42 9f       	mul	r20, r18
 1e0:	c0 01       	movw	r24, r0
 1e2:	43 9f       	mul	r20, r19
 1e4:	90 0d       	add	r25, r0
 1e6:	11 24       	eor	r1, r1
	accumulator_b += increment_b;

	highbyte_a = accumulator_a >> 24;
	highbyte_b = accumulator_b >> 24;

	OCR0A = 128 + 
 1e8:	89 2f       	mov	r24, r25
 1ea:	80 58       	subi	r24, 0x80	; 128
 1ec:	87 bd       	out	0x27, r24	; 39
	   	   (sineTable[highbyte_b] + sineTable[highbyte_a])
	   	                          * rampTable[rampCount]
	   	 ) >> 8
	   );

	sample++;
 1ee:	80 91 57 03 	lds	r24, 0x0357
 1f2:	90 91 58 03 	lds	r25, 0x0358
 1f6:	a0 91 59 03 	lds	r26, 0x0359
 1fa:	b0 91 5a 03 	lds	r27, 0x035A
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	a1 1d       	adc	r26, r1
 202:	b1 1d       	adc	r27, r1
 204:	80 93 57 03 	sts	0x0357, r24
 208:	90 93 58 03 	sts	0x0358, r25
 20c:	a0 93 59 03 	sts	0x0359, r26
 210:	b0 93 5a 03 	sts	0x035A, r27

	//ramping up
	if( sample <= RAMPUPEND )
 214:	80 91 57 03 	lds	r24, 0x0357
 218:	90 91 58 03 	lds	r25, 0x0358
 21c:	a0 91 59 03 	lds	r26, 0x0359
 220:	b0 91 5a 03 	lds	r27, 0x035A
 224:	89 33       	cpi	r24, 0x39	; 57
 226:	91 40       	sbci	r25, 0x01	; 1
 228:	a1 05       	cpc	r26, r1
 22a:	b1 05       	cpc	r27, r1
 22c:	98 f4       	brcc	.+38     	; 0x254 <__vector_18+0x186>
		rampCount++;
 22e:	80 91 45 03 	lds	r24, 0x0345
 232:	90 91 46 03 	lds	r25, 0x0346
 236:	a0 91 47 03 	lds	r26, 0x0347
 23a:	b0 91 48 03 	lds	r27, 0x0348
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	a1 1d       	adc	r26, r1
 242:	b1 1d       	adc	r27, r1
 244:	80 93 45 03 	sts	0x0345, r24
 248:	90 93 46 03 	sts	0x0346, r25
 24c:	a0 93 47 03 	sts	0x0347, r26
 250:	b0 93 48 03 	sts	0x0348, r27
	//holdsteady the max value 
	if( sample <= RAMPUPEND && sample <= RAMPDOWNSTART)
 254:	80 91 57 03 	lds	r24, 0x0357
 258:	90 91 58 03 	lds	r25, 0x0358
 25c:	a0 91 59 03 	lds	r26, 0x0359
 260:	b0 91 5a 03 	lds	r27, 0x035A
 264:	89 33       	cpi	r24, 0x39	; 57
 266:	91 40       	sbci	r25, 0x01	; 1
 268:	a1 05       	cpc	r26, r1
 26a:	b1 05       	cpc	r27, r1
 26c:	c8 f4       	brcc	.+50     	; 0x2a0 <__vector_18+0x1d2>
 26e:	80 91 57 03 	lds	r24, 0x0357
 272:	90 91 58 03 	lds	r25, 0x0358
 276:	a0 91 59 03 	lds	r26, 0x0359
 27a:	b0 91 5a 03 	lds	r27, 0x035A
 27e:	8c 3e       	cpi	r24, 0xEC	; 236
 280:	92 4f       	sbci	r25, 0xF2	; 242
 282:	a1 05       	cpc	r26, r1
 284:	b1 05       	cpc	r27, r1
 286:	60 f4       	brcc	.+24     	; 0x2a0 <__vector_18+0x1d2>
		rampCount = RAMP_LENGTH - 1;
 288:	87 e3       	ldi	r24, 0x37	; 55
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	a0 e0       	ldi	r26, 0x00	; 0
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	80 93 45 03 	sts	0x0345, r24
 294:	90 93 46 03 	sts	0x0346, r25
 298:	a0 93 47 03 	sts	0x0347, r26
 29c:	b0 93 48 03 	sts	0x0348, r27
	//begin rampdown
	if( sample > RAMPDOWNSTART && sample <= RAMPDOWNSTART)
 2a0:	80 91 57 03 	lds	r24, 0x0357
 2a4:	90 91 58 03 	lds	r25, 0x0358
 2a8:	a0 91 59 03 	lds	r26, 0x0359
 2ac:	b0 91 5a 03 	lds	r27, 0x035A
 2b0:	8c 3e       	cpi	r24, 0xEC	; 236
 2b2:	92 4f       	sbci	r25, 0xF2	; 242
 2b4:	a1 05       	cpc	r26, r1
 2b6:	b1 05       	cpc	r27, r1
 2b8:	00 f1       	brcs	.+64     	; 0x2fa <__vector_18+0x22c>
 2ba:	80 91 57 03 	lds	r24, 0x0357
 2be:	90 91 58 03 	lds	r25, 0x0358
 2c2:	a0 91 59 03 	lds	r26, 0x0359
 2c6:	b0 91 5a 03 	lds	r27, 0x035A
 2ca:	8c 3e       	cpi	r24, 0xEC	; 236
 2cc:	92 4f       	sbci	r25, 0xF2	; 242
 2ce:	a1 05       	cpc	r26, r1
 2d0:	b1 05       	cpc	r27, r1
 2d2:	98 f4       	brcc	.+38     	; 0x2fa <__vector_18+0x22c>
		rampCount--;
 2d4:	80 91 45 03 	lds	r24, 0x0345
 2d8:	90 91 46 03 	lds	r25, 0x0346
 2dc:	a0 91 47 03 	lds	r26, 0x0347
 2e0:	b0 91 48 03 	lds	r27, 0x0348
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	a1 09       	sbc	r26, r1
 2e8:	b1 09       	sbc	r27, r1
 2ea:	80 93 45 03 	sts	0x0345, r24
 2ee:	90 93 46 03 	sts	0x0346, r25
 2f2:	a0 93 47 03 	sts	0x0347, r26
 2f6:	b0 93 48 03 	sts	0x0348, r27
	//finished ramping
	if(sample > RAMPDOWNEND)
 2fa:	80 91 57 03 	lds	r24, 0x0357
 2fe:	90 91 58 03 	lds	r25, 0x0358
 302:	a0 91 59 03 	lds	r26, 0x0359
 306:	b0 91 5a 03 	lds	r27, 0x035A
 30a:	85 32       	cpi	r24, 0x25	; 37
 30c:	94 4f       	sbci	r25, 0xF4	; 244
 30e:	a1 05       	cpc	r26, r1
 310:	b1 05       	cpc	r27, r1
 312:	40 f0       	brcs	.+16     	; 0x324 <__vector_18+0x256>
		rampCount = 0;
 314:	10 92 45 03 	sts	0x0345, r1
 318:	10 92 46 03 	sts	0x0346, r1
 31c:	10 92 47 03 	sts	0x0347, r1
 320:	10 92 48 03 	sts	0x0348, r1

	//generates a 1 ms timebase
	count--;
 324:	80 91 50 03 	lds	r24, 0x0350
 328:	81 50       	subi	r24, 0x01	; 1
 32a:	80 93 50 03 	sts	0x0350, r24
	if( count == 0){
 32e:	80 91 50 03 	lds	r24, 0x0350
 332:	81 11       	cpse	r24, r1
 334:	15 c0       	rjmp	.+42     	; 0x360 <__vector_18+0x292>
		count = COUNTMS;
 336:	8e e3       	ldi	r24, 0x3E	; 62
 338:	80 93 50 03 	sts	0x0350, r24
		time++;
 33c:	80 91 4e 03 	lds	r24, 0x034E
 340:	90 91 4f 03 	lds	r25, 0x034F
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	90 93 4f 03 	sts	0x034F, r25
 34a:	80 93 4e 03 	sts	0x034E, r24
		time1++;
 34e:	80 91 43 03 	lds	r24, 0x0343
 352:	90 91 44 03 	lds	r25, 0x0344
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	90 93 44 03 	sts	0x0344, r25
 35c:	80 93 43 03 	sts	0x0343, r24
	}

	
}
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0b be       	out	0x3b, r0	; 59
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <init_dtmf>:


void init_dtmf(){
	DDRB = 0;
 38a:	14 b8       	out	0x04, r1	; 4
	DDRB |= OUTPUT_PIN;
 38c:	23 9a       	sbi	0x04, 3	; 4

	time = 0;
 38e:	10 92 4f 03 	sts	0x034F, r1
 392:	10 92 4e 03 	sts	0x034E, r1

	TCCR0B = 0;
 396:	15 bc       	out	0x25, r1	; 37
	//set divider to 1, run T0 at 16 MHz 
	TCCR0B |= T0_CS00;
 398:	85 b5       	in	r24, 0x25	; 37
 39a:	81 60       	ori	r24, 0x01	; 1
 39c:	85 bd       	out	0x25, r24	; 37

	TIMSK0 = 0;
 39e:	ee e6       	ldi	r30, 0x6E	; 110
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	10 82       	st	Z, r1
	TIMSK0 |= TIMER0_OVERFLOW_INTERRUPT_ENABLE;
 3a4:	80 81       	ld	r24, Z
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	80 83       	st	Z, r24
	//turn on fast PWM and OC0A - output 
	TCCR0A = 0;
 3aa:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= WAVE_GEN_M00 + WAVE_GEN_M01 + COMPARE_MATCH_OUTPUT_A0 + COMPARE_MATCH_OUTPUT_A1; 
 3ac:	84 b5       	in	r24, 0x24	; 36
 3ae:	83 6c       	ori	r24, 0xC3	; 195
 3b0:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0;
 3b2:	17 bc       	out	0x27, r1	; 39
	sei();
 3b4:	78 94       	sei
 3b6:	08 95       	ret

000003b8 <play>:
}

//plays fA and fB for a duration of duration ms
void play(int fA, int fB, int duration){
	if( !is_playing ){
 3b8:	20 91 55 03 	lds	r18, 0x0355
 3bc:	21 11       	cpse	r18, r1
 3be:	68 c0       	rjmp	.+208    	; 0x490 <play+0xd8>
		is_playing = TRUE;
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	20 93 55 03 	sts	0x0355, r18
		switch( fA){
 3c6:	88 33       	cpi	r24, 0x38	; 56
 3c8:	25 e0       	ldi	r18, 0x05	; 5
 3ca:	92 07       	cpc	r25, r18
 3cc:	61 f0       	breq	.+24     	; 0x3e6 <play+0x2e>
 3ce:	85 3c       	cpi	r24, 0xC5	; 197
 3d0:	25 e0       	ldi	r18, 0x05	; 5
 3d2:	92 07       	cpc	r25, r18
 3d4:	a9 f0       	breq	.+42     	; 0x400 <play+0x48>
 3d6:	89 3b       	cpi	r24, 0xB9	; 185
 3d8:	94 40       	sbci	r25, 0x04	; 4
 3da:	b9 f4       	brne	.+46     	; 0x40a <play+0x52>
			case 1209: increment_a = INCREMENT_1209; break;
 3dc:	87 e3       	ldi	r24, 0x37	; 55
 3de:	98 eb       	ldi	r25, 0xB8	; 184
 3e0:	a3 ef       	ldi	r26, 0xF3	; 243
 3e2:	b4 e0       	ldi	r27, 0x04	; 4
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <play+0x36>
			case 1336: increment_a = INCREMENT_1336; break;
 3e6:	88 e4       	ldi	r24, 0x48	; 72
 3e8:	93 ee       	ldi	r25, 0xE3	; 227
 3ea:	a8 e7       	ldi	r26, 0x78	; 120
 3ec:	b5 e0       	ldi	r27, 0x05	; 5
 3ee:	80 93 38 03 	sts	0x0338, r24
 3f2:	90 93 39 03 	sts	0x0339, r25
 3f6:	a0 93 3a 03 	sts	0x033A, r26
 3fa:	b0 93 3b 03 	sts	0x033B, r27
 3fe:	0d c0       	rjmp	.+26     	; 0x41a <play+0x62>
			case 1477: increment_a = INCREMENT_1477; break;
 400:	8b e6       	ldi	r24, 0x6B	; 107
 402:	9c eb       	ldi	r25, 0xBC	; 188
 404:	ac e0       	ldi	r26, 0x0C	; 12
 406:	b6 e0       	ldi	r27, 0x06	; 6
 408:	f2 cf       	rjmp	.-28     	; 0x3ee <play+0x36>
			default: increment_a = 0; break;
 40a:	10 92 38 03 	sts	0x0338, r1
 40e:	10 92 39 03 	sts	0x0339, r1
 412:	10 92 3a 03 	sts	0x033A, r1
 416:	10 92 3b 03 	sts	0x033B, r1
		}

		switch ( fB) {
 41a:	62 30       	cpi	r22, 0x02	; 2
 41c:	83 e0       	ldi	r24, 0x03	; 3
 41e:	78 07       	cpc	r23, r24
 420:	91 f0       	breq	.+36     	; 0x446 <play+0x8e>
 422:	24 f4       	brge	.+8      	; 0x42c <play+0x74>
 424:	69 3b       	cpi	r22, 0xB9	; 185
 426:	72 40       	sbci	r23, 0x02	; 2
 428:	29 f5       	brne	.+74     	; 0x474 <play+0xbc>
 42a:	08 c0       	rjmp	.+16     	; 0x43c <play+0x84>
 42c:	69 33       	cpi	r22, 0x39	; 57
 42e:	23 e0       	ldi	r18, 0x03	; 3
 430:	72 07       	cpc	r23, r18
 432:	b1 f0       	breq	.+44     	; 0x460 <play+0xa8>
 434:	6d 3a       	cpi	r22, 0xAD	; 173
 436:	73 40       	sbci	r23, 0x03	; 3
 438:	e9 f4       	brne	.+58     	; 0x474 <play+0xbc>
 43a:	17 c0       	rjmp	.+46     	; 0x46a <play+0xb2>
			case 697: increment_b = INCREMENT_697; break;
 43c:	87 e3       	ldi	r24, 0x37	; 55
 43e:	9a ed       	ldi	r25, 0xDA	; 218
 440:	aa ed       	ldi	r26, 0xDA	; 218
 442:	b2 e0       	ldi	r27, 0x02	; 2
 444:	04 c0       	rjmp	.+8      	; 0x44e <play+0x96>
			case 770: increment_b = INCREMENT_770; break;
 446:	8e ed       	ldi	r24, 0xDE	; 222
 448:	95 e6       	ldi	r25, 0x65	; 101
 44a:	a7 e2       	ldi	r26, 0x27	; 39
 44c:	b3 e0       	ldi	r27, 0x03	; 3
 44e:	80 93 51 03 	sts	0x0351, r24
 452:	90 93 52 03 	sts	0x0352, r25
 456:	a0 93 53 03 	sts	0x0353, r26
 45a:	b0 93 54 03 	sts	0x0354, r27
 45e:	12 c0       	rjmp	.+36     	; 0x484 <play+0xcc>
			case 825: increment_b = INCREMENT_825; break;
 460:	87 eb       	ldi	r24, 0xB7	; 183
 462:	91 e1       	ldi	r25, 0x11	; 17
 464:	a1 e6       	ldi	r26, 0x61	; 97
 466:	b3 e0       	ldi	r27, 0x03	; 3
 468:	f2 cf       	rjmp	.-28     	; 0x44e <play+0x96>
			case 941: increment_b = INCREMENT_941; break;
 46a:	83 e8       	ldi	r24, 0x83	; 131
 46c:	91 e5       	ldi	r25, 0x51	; 81
 46e:	ab e8       	ldi	r26, 0x8B	; 139
 470:	b6 e2       	ldi	r27, 0x26	; 38
 472:	ed cf       	rjmp	.-38     	; 0x44e <play+0x96>
			default: increment_b = 0; break;
 474:	10 92 51 03 	sts	0x0351, r1
 478:	10 92 52 03 	sts	0x0352, r1
 47c:	10 92 53 03 	sts	0x0353, r1
 480:	10 92 54 03 	sts	0x0354, r1
		}
		dds_duration = duration;
 484:	50 93 42 03 	sts	0x0342, r21
 488:	40 93 41 03 	sts	0x0341, r20
		OCR0A = 128;	
 48c:	80 e8       	ldi	r24, 0x80	; 128
 48e:	87 bd       	out	0x27, r24	; 39
 490:	08 95       	ret

00000492 <stop_playing>:


}

void stop_playing(){
	is_playing = FALSE;
 492:	10 92 55 03 	sts	0x0355, r1
	sample = 0;
 496:	10 92 57 03 	sts	0x0357, r1
 49a:	10 92 58 03 	sts	0x0358, r1
 49e:	10 92 59 03 	sts	0x0359, r1
 4a2:	10 92 5a 03 	sts	0x035A, r1
	rampCount = 0;
 4a6:	10 92 45 03 	sts	0x0345, r1
 4aa:	10 92 46 03 	sts	0x0346, r1
 4ae:	10 92 47 03 	sts	0x0347, r1
 4b2:	10 92 48 03 	sts	0x0348, r1
	increment_a = increment_b = 0;
 4b6:	10 92 51 03 	sts	0x0351, r1
 4ba:	10 92 52 03 	sts	0x0352, r1
 4be:	10 92 53 03 	sts	0x0353, r1
 4c2:	10 92 54 03 	sts	0x0354, r1
 4c6:	10 92 38 03 	sts	0x0338, r1
 4ca:	10 92 39 03 	sts	0x0339, r1
 4ce:	10 92 3a 03 	sts	0x033A, r1
 4d2:	10 92 3b 03 	sts	0x033B, r1
	accumulator_a = accumulator_b = 0;
 4d6:	10 92 49 03 	sts	0x0349, r1
 4da:	10 92 4a 03 	sts	0x034A, r1
 4de:	10 92 4b 03 	sts	0x034B, r1
 4e2:	10 92 4c 03 	sts	0x034C, r1
 4e6:	10 92 3d 03 	sts	0x033D, r1
 4ea:	10 92 3e 03 	sts	0x033E, r1
 4ee:	10 92 3f 03 	sts	0x033F, r1
 4f2:	10 92 40 03 	sts	0x0340, r1
 4f6:	08 95       	ret

000004f8 <main>:
#include "dds.h"
#include "atmega1284p.h"


int main(){
	init_dtmf();
 4f8:	0e 94 c5 01 	call	0x38a	; 0x38a <init_dtmf>
	play(1209,697,1000);
 4fc:	48 ee       	ldi	r20, 0xE8	; 232
 4fe:	53 e0       	ldi	r21, 0x03	; 3
 500:	69 eb       	ldi	r22, 0xB9	; 185
 502:	72 e0       	ldi	r23, 0x02	; 2
 504:	89 eb       	ldi	r24, 0xB9	; 185
 506:	94 e0       	ldi	r25, 0x04	; 4
 508:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <play>
	while(1){
		if(time >= dds_duration){
 50c:	20 91 4e 03 	lds	r18, 0x034E
 510:	30 91 4f 03 	lds	r19, 0x034F
 514:	80 91 41 03 	lds	r24, 0x0341
 518:	90 91 42 03 	lds	r25, 0x0342
 51c:	28 17       	cp	r18, r24
 51e:	39 07       	cpc	r19, r25
 520:	a8 f3       	brcs	.-22     	; 0x50c <main+0x14>
			stop_playing();
 522:	0e 94 49 02 	call	0x492	; 0x492 <stop_playing>
 526:	f2 cf       	rjmp	.-28     	; 0x50c <main+0x14>

00000528 <_exit>:
 528:	f8 94       	cli

0000052a <__stop_program>:
 52a:	ff cf       	rjmp	.-2      	; 0x52a <__stop_program>
