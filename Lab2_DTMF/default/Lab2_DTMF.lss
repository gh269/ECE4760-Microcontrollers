
Lab2_DTMF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a6  00800100  00000ea8  00000f3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ea8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  008003a6  008003a6  000011e2  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  00002095  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000177e  00000000  00000000  00002195  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b10  00000000  00000000  00003913  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bde  00000000  00000000  00004423  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c8  00000000  00000000  00005004  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000051b  00000000  00000000  000052cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ca6  00000000  00000000  000057e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  0000648d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 3a       	cpi	r26, 0xA6	; 166
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	a6 ea       	ldi	r26, 0xA6	; 166
  b6:	b3 e0       	ldi	r27, 0x03	; 3
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 33       	cpi	r26, 0x3F	; 63
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 4f 04 	call	0x89e	; 0x89e <main>
  c6:	0c 94 52 07 	jmp	0xea4	; 0xea4 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <task1>:
*/

 
//******************************* 
//Task 1  
void task1(void) {
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
	time1=0;  //reset the task timer
  d6:	10 92 15 04 	sts	0x0415, r1
  da:	10 92 14 04 	sts	0x0414, r1

	//get lower nibble
	PORTDIR = 0x0f;
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	81 b9       	out	0x01, r24	; 1
	PORTDATA = 0xf0; 
  e2:	90 ef       	ldi	r25, 0xF0	; 240
  e4:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2a e1       	ldi	r18, 0x1A	; 26
  e8:	2a 95       	dec	r18
  ea:	f1 f7       	brne	.-4      	; 0xe8 <task1+0x1a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <task1+0x20>
	_delay_us(5);
	key = PORTIN;
  ee:	20 b1       	in	r18, 0x00	; 0
  f0:	20 93 16 04 	sts	0x0416, r18
  
	//get upper nibble
	PORTDIR = 0xf0;
  f4:	91 b9       	out	0x01, r25	; 1
	PORTDATA = 0x0f; 
  f6:	82 b9       	out	0x02, r24	; 2
  f8:	8a e1       	ldi	r24, 0x1A	; 26
  fa:	8a 95       	dec	r24
  fc:	f1 f7       	brne	.-4      	; 0xfa <task1+0x2c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <task1+0x32>
	_delay_us(5);
	key = key | PORTIN;
 100:	90 b1       	in	r25, 0x00	; 0
 102:	80 91 16 04 	lds	r24, 0x0416
 106:	98 2b       	or	r25, r24
 108:	90 93 16 04 	sts	0x0416, r25
  
	//find matching keycode in keytbl
	if (key != 0xff) {
 10c:	9f 3f       	cpi	r25, 0xFF	; 255
 10e:	a9 f0       	breq	.+42     	; 0x13a <task1+0x6c>
	  for (butnum=0; butnum<maxkeys; butnum++) {   
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0a c0       	rjmp	.+20     	; 0x128 <task1+0x5a>
 114:	28 2f       	mov	r18, r24
 116:	2f 5f       	subi	r18, 0xFF	; 255
	  	if (keytbl[butnum]==key)  break;   
 118:	e8 2f       	mov	r30, r24
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	e2 5c       	subi	r30, 0xC2	; 194
 11e:	fe 4f       	sbci	r31, 0xFE	; 254
 120:	30 81       	ld	r19, Z
 122:	39 17       	cp	r19, r25
 124:	31 f0       	breq	.+12     	; 0x132 <task1+0x64>
 126:	82 2f       	mov	r24, r18
	_delay_us(5);
	key = key | PORTIN;
  
	//find matching keycode in keytbl
	if (key != 0xff) {
	  for (butnum=0; butnum<maxkeys; butnum++) {   
 128:	8c 30       	cpi	r24, 0x0C	; 12
 12a:	a0 f3       	brcs	.-24     	; 0x114 <task1+0x46>
	  	if (keytbl[butnum]==key)  break;   
	  }

	  if (butnum==maxkeys) butnum=0;
 12c:	8c 30       	cpi	r24, 0x0C	; 12
 12e:	09 f4       	brne	.+2      	; 0x132 <task1+0x64>
 130:	04 c0       	rjmp	.+8      	; 0x13a <task1+0x6c>
	  else butnum++;	   //adjust by one to make range 1-16
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 10 04 	sts	0x0410, r24
 138:	02 c0       	rjmp	.+4      	; 0x13e <task1+0x70>
	}
	else butnum=0;
 13a:	10 92 10 04 	sts	0x0410, r1
	
	// Switching in the finite state machine.
	switch (PushState) {
 13e:	80 91 19 04 	lds	r24, 0x0419
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	91 f0       	breq	.+36     	; 0x16a <task1+0x9c>
 146:	20 f4       	brcc	.+8      	; 0x150 <task1+0x82>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	09 f0       	breq	.+2      	; 0x14e <task1+0x80>
 14c:	77 c0       	rjmp	.+238    	; 0x23c <task1+0x16e>
 14e:	06 c0       	rjmp	.+12     	; 0x15c <task1+0x8e>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	d1 f0       	breq	.+52     	; 0x188 <task1+0xba>
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	09 f0       	breq	.+2      	; 0x15a <task1+0x8c>
 158:	71 c0       	rjmp	.+226    	; 0x23c <task1+0x16e>
 15a:	63 c0       	rjmp	.+198    	; 0x222 <task1+0x154>
     case NoPush: 
        if (butnum != 0) PushState=MaybePush;
 15c:	80 91 10 04 	lds	r24, 0x0410
 160:	88 23       	and	r24, r24
 162:	09 f4       	brne	.+2      	; 0x166 <task1+0x98>
 164:	6b c0       	rjmp	.+214    	; 0x23c <task1+0x16e>
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	61 c0       	rjmp	.+194    	; 0x22c <task1+0x15e>
        else PushState=NoPush;
        break;
     case MaybePush:
        if (butnum != 0) {
 16a:	80 91 10 04 	lds	r24, 0x0410
 16e:	88 23       	and	r24, r24
 170:	49 f0       	breq	.+18     	; 0x184 <task1+0xb6>
           	PushState=Pushed; 
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	80 93 19 04 	sts	0x0419, r24
			PushFlag=1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 11 04 	sts	0x0411, r24
			//Test mode override
			if (~PINB & 0x01) {
 17e:	18 99       	sbic	0x03, 0	; 3
 180:	5d c0       	rjmp	.+186    	; 0x23c <task1+0x16e>
 182:	5a c0       	rjmp	.+180    	; 0x238 <task1+0x16a>
		 		PushFlag=0;			
		   	}  
        }
        else PushState=NoPush;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	52 c0       	rjmp	.+164    	; 0x22c <task1+0x15e>
        break;
     case Pushed:  
        if (butnum != 0) {
 188:	80 91 10 04 	lds	r24, 0x0410
 18c:	88 23       	and	r24, r24
 18e:	09 f4       	brne	.+2      	; 0x192 <task1+0xc4>
 190:	46 c0       	rjmp	.+140    	; 0x21e <task1+0x150>
			PushState=Pushed;
			//Test mode override
			if (~PINB & 0x01) {
 192:	18 99       	sbic	0x03, 0	; 3
 194:	53 c0       	rjmp	.+166    	; 0x23c <task1+0x16e>
		 		switch (butnum) {
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	21 f1       	breq	.+72     	; 0x1e2 <task1+0x114>
 19a:	38 f4       	brcc	.+14     	; 0x1aa <task1+0xdc>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	99 f0       	breq	.+38     	; 0x1c6 <task1+0xf8>
 1a0:	c8 f4       	brcc	.+50     	; 0x1d4 <task1+0x106>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <task1+0xda>
 1a6:	4a c0       	rjmp	.+148    	; 0x23c <task1+0x16e>
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <task1+0xea>
 1aa:	86 30       	cpi	r24, 0x06	; 6
 1ac:	41 f1       	breq	.+80     	; 0x1fe <task1+0x130>
 1ae:	00 f1       	brcs	.+64     	; 0x1f0 <task1+0x122>
 1b0:	87 30       	cpi	r24, 0x07	; 7
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <task1+0xe8>
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <task1+0x16e>
 1b6:	2a c0       	rjmp	.+84     	; 0x20c <task1+0x13e>
					case 1: 
						play(697, 0, 100);
 1b8:	44 e6       	ldi	r20, 0x64	; 100
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	89 eb       	ldi	r24, 0xB9	; 185
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	29 c0       	rjmp	.+82     	; 0x218 <task1+0x14a>
						break;
					case 2: 
						play(770, 0, 100);
 1c6:	44 e6       	ldi	r20, 0x64	; 100
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	93 e0       	ldi	r25, 0x03	; 3
 1d2:	22 c0       	rjmp	.+68     	; 0x218 <task1+0x14a>
						break;
					case 3: 
						play(852, 0, 100);
 1d4:	44 e6       	ldi	r20, 0x64	; 100
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	84 e5       	ldi	r24, 0x54	; 84
 1de:	93 e0       	ldi	r25, 0x03	; 3
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <task1+0x14a>
						break;
					case 4: 
						play(941, 0, 100);
 1e2:	44 e6       	ldi	r20, 0x64	; 100
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	8d ea       	ldi	r24, 0xAD	; 173
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	14 c0       	rjmp	.+40     	; 0x218 <task1+0x14a>
						break;
					case 5:
						play(1209, 0, 100);
 1f0:	44 e6       	ldi	r20, 0x64	; 100
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	89 eb       	ldi	r24, 0xB9	; 185
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <task1+0x14a>
						break;
					case 6:
						play(1336, 0, 100);
 1fe:	44 e6       	ldi	r20, 0x64	; 100
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	88 e3       	ldi	r24, 0x38	; 56
 208:	95 e0       	ldi	r25, 0x05	; 5
 20a:	06 c0       	rjmp	.+12     	; 0x218 <task1+0x14a>
						break;
					case 7: 
						play(1477, 0, 100);
 20c:	44 e6       	ldi	r20, 0x64	; 100
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	85 ec       	ldi	r24, 0xC5	; 197
 216:	95 e0       	ldi	r25, 0x05	; 5
 218:	0e 94 1d 04 	call	0x83a	; 0x83a <play>
						break;
 21c:	0f c0       	rjmp	.+30     	; 0x23c <task1+0x16e>
					default:
						break;
				}	
		   	}  
		}
        else PushState=MaybeNoPush;    
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	05 c0       	rjmp	.+10     	; 0x22c <task1+0x15e>
        break;
     case MaybeNoPush:
        if (butnum != 0) PushState=Pushed; 
 222:	80 91 10 04 	lds	r24, 0x0410
 226:	88 23       	and	r24, r24
 228:	21 f0       	breq	.+8      	; 0x232 <task1+0x164>
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	80 93 19 04 	sts	0x0419, r24
 230:	05 c0       	rjmp	.+10     	; 0x23c <task1+0x16e>
        else {
           PushState=NoPush;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 19 04 	sts	0x0419, r24
           PushFlag=0;
 238:	10 92 11 04 	sts	0x0411, r1
        }    
        break;
  	}

	if (PushFlag) {
 23c:	80 91 11 04 	lds	r24, 0x0411
 240:	88 23       	and	r24, r24
 242:	09 f4       	brne	.+2      	; 0x246 <task1+0x178>
 244:	71 c0       	rjmp	.+226    	; 0x328 <task1+0x25a>
		PushFlag = 0;
 246:	10 92 11 04 	sts	0x0411, r1
		// The * button was pressed. Clear all memory.
		if (butnum == 10) {
 24a:	20 91 10 04 	lds	r18, 0x0410
 24e:	2a 30       	cpi	r18, 0x0A	; 10
 250:	89 f4       	brne	.+34     	; 0x274 <task1+0x1a6>
 252:	e6 ea       	ldi	r30, 0xA6	; 166
 254:	f3 e0       	ldi	r31, 0x03	; 3
			for (int i = 0; i < 12; i++) {
				mem[i] = 0;
 256:	11 92       	st	Z+, r1
 258:	11 92       	st	Z+, r1

	if (PushFlag) {
		PushFlag = 0;
		// The * button was pressed. Clear all memory.
		if (butnum == 10) {
			for (int i = 0; i < 12; i++) {
 25a:	23 e0       	ldi	r18, 0x03	; 3
 25c:	ee 3b       	cpi	r30, 0xBE	; 190
 25e:	f2 07       	cpc	r31, r18
 260:	d1 f7       	brne	.-12     	; 0x256 <task1+0x188>
				mem[i] = 0;
			}
			mem_index = 0;
 262:	10 92 18 04 	sts	0x0418, r1
 266:	10 92 17 04 	sts	0x0417, r1
 26a:	c6 ea       	ldi	r28, 0xA6	; 166
 26c:	d3 e0       	ldi	r29, 0x03	; 3
				//play(high_freq[butnum], low_freq[butnum], 1000);
			}		
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
			fprintf(stdout, "%d ", mem[i]);
 26e:	0b e8       	ldi	r16, 0x8B	; 139
 270:	13 e0       	ldi	r17, 0x03	; 3
 272:	35 c0       	rjmp	.+106    	; 0x2de <task1+0x210>
				mem[i] = 0;
			}
			mem_index = 0;
		}
		// The # button was pressed. Play all sounds in memory.
		else if (butnum == 12) {
 274:	2c 30       	cpi	r18, 0x0C	; 12
 276:	f9 f4       	brne	.+62     	; 0x2b6 <task1+0x1e8>
 278:	c6 ea       	ldi	r28, 0xA6	; 166
 27a:	d3 e0       	ldi	r29, 0x03	; 3
			for (int i = 0; i < 12; i++) {
				if (mem[i] != 0) {
					fprintf(stdout, "%u\n\r", mem[i]);
 27c:	06 e8       	ldi	r16, 0x86	; 134
 27e:	13 e0       	ldi	r17, 0x03	; 3
			mem_index = 0;
		}
		// The # button was pressed. Play all sounds in memory.
		else if (butnum == 12) {
			for (int i = 0; i < 12; i++) {
				if (mem[i] != 0) {
 280:	89 91       	ld	r24, Y+
 282:	99 91       	ld	r25, Y+
 284:	00 97       	sbiw	r24, 0x00	; 0
 286:	91 f0       	breq	.+36     	; 0x2ac <task1+0x1de>
					fprintf(stdout, "%u\n\r", mem[i]);
 288:	9f 93       	push	r25
 28a:	8f 93       	push	r24
 28c:	1f 93       	push	r17
 28e:	0f 93       	push	r16
 290:	80 91 3c 04 	lds	r24, 0x043C
 294:	8f 93       	push	r24
 296:	80 91 3b 04 	lds	r24, 0x043B
 29a:	8f 93       	push	r24
 29c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <fprintf>
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
			}
			mem_index = 0;
		}
		// The # button was pressed. Play all sounds in memory.
		else if (butnum == 12) {
			for (int i = 0; i < 12; i++) {
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	ce 3b       	cpi	r28, 0xBE	; 190
 2b0:	d8 07       	cpc	r29, r24
 2b2:	31 f7       	brne	.-52     	; 0x280 <task1+0x1b2>
 2b4:	da cf       	rjmp	.-76     	; 0x26a <task1+0x19c>
				}
			}
		}
		// A normal button press. 
		else {
			if (mem_index < 12) {
 2b6:	80 91 17 04 	lds	r24, 0x0417
 2ba:	90 91 18 04 	lds	r25, 0x0418
 2be:	8c 30       	cpi	r24, 0x0C	; 12
 2c0:	91 05       	cpc	r25, r1
 2c2:	98 f6       	brcc	.-90     	; 0x26a <task1+0x19c>
				mem[mem_index] = butnum;
 2c4:	fc 01       	movw	r30, r24
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	ea 55       	subi	r30, 0x5A	; 90
 2cc:	fc 4f       	sbci	r31, 0xFC	; 252
 2ce:	20 83       	st	Z, r18
 2d0:	11 82       	std	Z+1, r1	; 0x01
				mem_index++;
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	90 93 18 04 	sts	0x0418, r25
 2d8:	80 93 17 04 	sts	0x0417, r24
 2dc:	c6 cf       	rjmp	.-116    	; 0x26a <task1+0x19c>
				//play(high_freq[butnum], low_freq[butnum], 1000);
			}		
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
			fprintf(stdout, "%d ", mem[i]);
 2de:	88 81       	ld	r24, Y
 2e0:	99 81       	ldd	r25, Y+1	; 0x01
 2e2:	22 96       	adiw	r28, 0x02	; 2
 2e4:	9f 93       	push	r25
 2e6:	8f 93       	push	r24
 2e8:	1f 93       	push	r17
 2ea:	0f 93       	push	r16
 2ec:	80 91 3c 04 	lds	r24, 0x043C
 2f0:	8f 93       	push	r24
 2f2:	80 91 3b 04 	lds	r24, 0x043B
 2f6:	8f 93       	push	r24
 2f8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <fprintf>
				mem_index++;
				//play(high_freq[butnum], low_freq[butnum], 1000);
			}		
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	23 e0       	ldi	r18, 0x03	; 3
 30a:	ce 3b       	cpi	r28, 0xBE	; 190
 30c:	d2 07       	cpc	r29, r18
 30e:	39 f7       	brne	.-50     	; 0x2de <task1+0x210>
			fprintf(stdout, "%d ", mem[i]);
		}
		fprintf(stdout, "\n\r");
 310:	60 91 3b 04 	lds	r22, 0x043B
 314:	70 91 3c 04 	lds	r23, 0x043C
 318:	8a e9       	ldi	r24, 0x9A	; 154
 31a:	93 e0       	ldi	r25, 0x03	; 3
	}
} 
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
			fprintf(stdout, "%d ", mem[i]);
		}
		fprintf(stdout, "\n\r");
 324:	0c 94 82 04 	jmp	0x904	; 0x904 <fputs>
	}
} 
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	08 95       	ret

00000332 <initialize>:
 
//Initialization used for the timer interrupts for debouncing
void initialize(void) {
	//set up timer 0 for 1 mSec timebase 
	OCR0A = 249;  		//set the compare re to 250 time ticks
 332:	89 ef       	ldi	r24, 0xF9	; 249
 334:	87 bd       	out	0x27, r24	; 39
	TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	80 93 6e 00 	sts	0x006E, r24
	//set prescalar to divide by 64 
	TCCR0B= 3; //0b00000011;	
 33c:	93 e0       	ldi	r25, 0x03	; 3
 33e:	95 bd       	out	0x25, r25	; 37
	// turn on clear-on-match
	TCCR0A= (1<<WGM01) ;
 340:	84 bd       	out	0x24, r24	; 36

	//init the task timers
	time1=0;  
 342:	10 92 15 04 	sts	0x0415, r1
 346:	10 92 14 04 	sts	0x0414, r1
	// PORT B is an input
	DDRB = 0x00;
 34a:	14 b8       	out	0x04, r1	; 4
	//for no button push
	PushFlag = 0;
 34c:	10 92 11 04 	sts	0x0411, r1
	//init the state machine
	PushState = NoPush;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 19 04 	sts	0x0419, r24

	mem_index = 0;
 356:	10 92 18 04 	sts	0x0418, r1
 35a:	10 92 17 04 	sts	0x0417, r1

	init_dtmf();
 35e:	0e 94 06 04 	call	0x80c	; 0x80c <init_dtmf>
	//crank up the ISRs
	sei() ;
 362:	78 94       	sei
 364:	08 95       	ret

00000366 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 366:	87 e6       	ldi	r24, 0x67	; 103
 368:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 36c:	88 e1       	ldi	r24, 0x18	; 24
 36e:	80 93 c1 00 	sts	0x00C1, r24
 372:	08 95       	ret

00000374 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 374:	cf 93       	push	r28
 376:	c8 2f       	mov	r28, r24

  if (c == '\a')
 378:	87 30       	cpi	r24, 0x07	; 7
 37a:	49 f4       	brne	.+18     	; 0x38e <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
 37c:	60 91 3d 04 	lds	r22, 0x043D
 380:	70 91 3e 04 	lds	r23, 0x043E
 384:	8d e9       	ldi	r24, 0x9D	; 157
 386:	93 e0       	ldi	r25, 0x03	; 3
 388:	0e 94 82 04 	call	0x904	; 0x904 <fputs>
 38c:	0b c0       	rjmp	.+22     	; 0x3a4 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
 38e:	8a 30       	cpi	r24, 0x0A	; 10
 390:	19 f4       	brne	.+6      	; 0x398 <uart_putchar+0x24>
    uart_putchar('\r', stream);
 392:	8d e0       	ldi	r24, 0x0D	; 13
 394:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 398:	80 91 c0 00 	lds	r24, 0x00C0
 39c:	85 ff       	sbrs	r24, 5
 39e:	fc cf       	rjmp	.-8      	; 0x398 <uart_putchar+0x24>
  UDR0 = c;
 3a0:	c0 93 c6 00 	sts	0x00C6, r28

  return 0;
}
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 3ac:	ef 92       	push	r14
 3ae:	ff 92       	push	r15
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	8c 01       	movw	r16, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 3ba:	80 91 be 03 	lds	r24, 0x03BE
 3be:	90 91 bf 03 	lds	r25, 0x03BF
 3c2:	89 2b       	or	r24, r25
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <uart_getchar+0x1c>
 3c6:	a1 c0       	rjmp	.+322    	; 0x50a <uart_getchar+0x15e>
 3c8:	c0 ec       	ldi	r28, 0xC0	; 192
 3ca:	d3 e0       	ldi	r29, 0x03	; 3
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 3cc:	80 91 c0 00 	lds	r24, 0x00C0
 3d0:	87 ff       	sbrs	r24, 7
 3d2:	fc cf       	rjmp	.-8      	; 0x3cc <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
 3d4:	80 91 c0 00 	lds	r24, 0x00C0
 3d8:	84 fd       	sbrc	r24, 4
 3da:	aa c0       	rjmp	.+340    	; 0x530 <uart_getchar+0x184>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 3dc:	80 91 c0 00 	lds	r24, 0x00C0
 3e0:	83 fd       	sbrc	r24, 3
 3e2:	a9 c0       	rjmp	.+338    	; 0x536 <uart_getchar+0x18a>
	  return _FDEV_ERR;
	c = UDR0;
 3e4:	80 91 c6 00 	lds	r24, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 3e8:	8d 30       	cpi	r24, 0x0D	; 13
 3ea:	61 f4       	brne	.+24     	; 0x404 <uart_getchar+0x58>
	  c = '\n';
	if (c == '\n')
	  {
	    *cp = c;
 3ec:	8a e0       	ldi	r24, 0x0A	; 10
 3ee:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
 3f0:	b8 01       	movw	r22, r16
 3f2:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
	    rxp = b;
 3f6:	80 ec       	ldi	r24, 0xC0	; 192
 3f8:	93 e0       	ldi	r25, 0x03	; 3
 3fa:	90 93 bf 03 	sts	0x03BF, r25
 3fe:	80 93 be 03 	sts	0x03BE, r24
	    break;
 402:	83 c0       	rjmp	.+262    	; 0x50a <uart_getchar+0x15e>
	  return _FDEV_ERR;
	c = UDR0;
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
	  c = '\n';
	if (c == '\n')
 404:	8a 30       	cpi	r24, 0x0A	; 10
 406:	91 f3       	breq	.-28     	; 0x3ec <uart_getchar+0x40>
	    *cp = c;
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
 408:	89 30       	cpi	r24, 0x09	; 9
 40a:	09 f4       	brne	.+2      	; 0x40e <uart_getchar+0x62>
	  c = ' ';
 40c:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 40e:	98 2f       	mov	r25, r24
 410:	90 52       	subi	r25, 0x20	; 32
 412:	9f 35       	cpi	r25, 0x5F	; 95
 414:	10 f0       	brcs	.+4      	; 0x41a <uart_getchar+0x6e>
 416:	80 3a       	cpi	r24, 0xA0	; 160
 418:	90 f0       	brcs	.+36     	; 0x43e <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 41a:	94 e0       	ldi	r25, 0x04	; 4
 41c:	cf 30       	cpi	r28, 0x0F	; 15
 41e:	d9 07       	cpc	r29, r25
 420:	49 f4       	brne	.+18     	; 0x434 <uart_getchar+0x88>
uart_putchar(char c, FILE *stream)
{

  if (c == '\a')
    {
      fputs("*ring*\n", stderr);
 422:	60 91 3d 04 	lds	r22, 0x043D
 426:	70 91 3e 04 	lds	r23, 0x043E
 42a:	8d e9       	ldi	r24, 0x9D	; 157
 42c:	93 e0       	ldi	r25, 0x03	; 3
 42e:	0e 94 82 04 	call	0x904	; 0x904 <fputs>
 432:	cc cf       	rjmp	.-104    	; 0x3cc <uart_getchar+0x20>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 434:	89 93       	st	Y+, r24
		uart_putchar(c, stream);
 436:	b8 01       	movw	r22, r16
 438:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
 43c:	c7 cf       	rjmp	.-114    	; 0x3cc <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
 43e:	82 31       	cpi	r24, 0x12	; 18
 440:	29 f1       	breq	.+74     	; 0x48c <uart_getchar+0xe0>
 442:	38 f4       	brcc	.+14     	; 0x452 <uart_getchar+0xa6>
 444:	83 30       	cpi	r24, 0x03	; 3
 446:	09 f4       	brne	.+2      	; 0x44a <uart_getchar+0x9e>
 448:	76 c0       	rjmp	.+236    	; 0x536 <uart_getchar+0x18a>
 44a:	88 30       	cpi	r24, 0x08	; 8
 44c:	09 f0       	breq	.+2      	; 0x450 <uart_getchar+0xa4>
 44e:	be cf       	rjmp	.-132    	; 0x3cc <uart_getchar+0x20>
 450:	09 c0       	rjmp	.+18     	; 0x464 <uart_getchar+0xb8>
 452:	87 31       	cpi	r24, 0x17	; 23
 454:	09 f4       	brne	.+2      	; 0x458 <uart_getchar+0xac>
 456:	4d c0       	rjmp	.+154    	; 0x4f2 <uart_getchar+0x146>
 458:	8f 37       	cpi	r24, 0x7F	; 127
 45a:	21 f0       	breq	.+8      	; 0x464 <uart_getchar+0xb8>
 45c:	85 31       	cpi	r24, 0x15	; 21
 45e:	09 f0       	breq	.+2      	; 0x462 <uart_getchar+0xb6>
 460:	b5 cf       	rjmp	.-150    	; 0x3cc <uart_getchar+0x20>
 462:	34 c0       	rjmp	.+104    	; 0x4cc <uart_getchar+0x120>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 464:	e3 e0       	ldi	r30, 0x03	; 3
 466:	c0 3c       	cpi	r28, 0xC0	; 192
 468:	de 07       	cpc	r29, r30
 46a:	09 f0       	breq	.+2      	; 0x46e <uart_getchar+0xc2>
 46c:	08 f4       	brcc	.+2      	; 0x470 <uart_getchar+0xc4>
 46e:	ae cf       	rjmp	.-164    	; 0x3cc <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
 470:	b8 01       	movw	r22, r16
 472:	88 e0       	ldi	r24, 0x08	; 8
 474:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
		uart_putchar(' ', stream);
 478:	b8 01       	movw	r22, r16
 47a:	80 e2       	ldi	r24, 0x20	; 32
 47c:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
		uart_putchar('\b', stream);
 480:	b8 01       	movw	r22, r16
 482:	88 e0       	ldi	r24, 0x08	; 8
 484:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
		cp--;
 488:	21 97       	sbiw	r28, 0x01	; 1
 48a:	a0 cf       	rjmp	.-192    	; 0x3cc <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 48c:	b8 01       	movw	r22, r16
 48e:	8d e0       	ldi	r24, 0x0D	; 13
 490:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 494:	80 ec       	ldi	r24, 0xC0	; 192
 496:	e8 2e       	mov	r14, r24
 498:	83 e0       	ldi	r24, 0x03	; 3
 49a:	f8 2e       	mov	r15, r24
 49c:	06 c0       	rjmp	.+12     	; 0x4aa <uart_getchar+0xfe>
	      uart_putchar(*cp2, stream);
 49e:	b8 01       	movw	r22, r16
 4a0:	f7 01       	movw	r30, r14
 4a2:	81 91       	ld	r24, Z+
 4a4:	7f 01       	movw	r14, r30
 4a6:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 4aa:	ec 16       	cp	r14, r28
 4ac:	fd 06       	cpc	r15, r29
 4ae:	b8 f3       	brcs	.-18     	; 0x49e <uart_getchar+0xf2>
 4b0:	8d cf       	rjmp	.-230    	; 0x3cc <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 4b2:	b8 01       	movw	r22, r16
 4b4:	88 e0       	ldi	r24, 0x08	; 8
 4b6:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
		uart_putchar(' ', stream);
 4ba:	b8 01       	movw	r22, r16
 4bc:	80 e2       	ldi	r24, 0x20	; 32
 4be:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
		uart_putchar('\b', stream);
 4c2:	b8 01       	movw	r22, r16
 4c4:	88 e0       	ldi	r24, 0x08	; 8
 4c6:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
		cp--;
 4ca:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 4cc:	f3 e0       	ldi	r31, 0x03	; 3
 4ce:	c0 3c       	cpi	r28, 0xC0	; 192
 4d0:	df 07       	cpc	r29, r31
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <uart_getchar+0x12a>
 4d4:	70 f7       	brcc	.-36     	; 0x4b2 <uart_getchar+0x106>
 4d6:	7a cf       	rjmp	.-268    	; 0x3cc <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 4d8:	b8 01       	movw	r22, r16
 4da:	88 e0       	ldi	r24, 0x08	; 8
 4dc:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
		uart_putchar(' ', stream);
 4e0:	b8 01       	movw	r22, r16
 4e2:	80 e2       	ldi	r24, 0x20	; 32
 4e4:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
		uart_putchar('\b', stream);
 4e8:	b8 01       	movw	r22, r16
 4ea:	88 e0       	ldi	r24, 0x08	; 8
 4ec:	0e 94 ba 01 	call	0x374	; 0x374 <uart_putchar>
		cp--;
 4f0:	e7 01       	movw	r28, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 4f2:	83 e0       	ldi	r24, 0x03	; 3
 4f4:	c0 3c       	cpi	r28, 0xC0	; 192
 4f6:	d8 07       	cpc	r29, r24
 4f8:	09 f0       	breq	.+2      	; 0x4fc <uart_getchar+0x150>
 4fa:	08 f4       	brcc	.+2      	; 0x4fe <uart_getchar+0x152>
 4fc:	67 cf       	rjmp	.-306    	; 0x3cc <uart_getchar+0x20>
 4fe:	fe 01       	movw	r30, r28
 500:	82 91       	ld	r24, -Z
 502:	7f 01       	movw	r14, r30
 504:	80 32       	cpi	r24, 0x20	; 32
 506:	41 f7       	brne	.-48     	; 0x4d8 <uart_getchar+0x12c>
 508:	61 cf       	rjmp	.-318    	; 0x3cc <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
 50a:	e0 91 be 03 	lds	r30, 0x03BE
 50e:	f0 91 bf 03 	lds	r31, 0x03BF
 512:	20 81       	ld	r18, Z
  if (c == '\n')
 514:	2a 30       	cpi	r18, 0x0A	; 10
 516:	31 f0       	breq	.+12     	; 0x524 <uart_getchar+0x178>
	      }
	    break;
	  }
      }

  c = *rxp++;
 518:	31 96       	adiw	r30, 0x01	; 1
 51a:	f0 93 bf 03 	sts	0x03BF, r31
 51e:	e0 93 be 03 	sts	0x03BE, r30
 522:	04 c0       	rjmp	.+8      	; 0x52c <uart_getchar+0x180>
  if (c == '\n')
    rxp = 0;
 524:	10 92 bf 03 	sts	0x03BF, r1
 528:	10 92 be 03 	sts	0x03BE, r1

  return c;
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	05 c0       	rjmp	.+10     	; 0x53a <uart_getchar+0x18e>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 530:	2e ef       	ldi	r18, 0xFE	; 254
 532:	3f ef       	ldi	r19, 0xFF	; 255
 534:	02 c0       	rjmp	.+4      	; 0x53a <uart_getchar+0x18e>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 536:	2f ef       	ldi	r18, 0xFF	; 255
 538:	3f ef       	ldi	r19, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 53a:	c9 01       	movw	r24, r18
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	ff 90       	pop	r15
 546:	ef 90       	pop	r14
 548:	08 95       	ret

0000054a <__vector_18>:
16 MHz 
------ = 62,500 Hz
 256 
 To generate a 1ms time base, 
*/
ISR( TIMER0_OVF_vect){
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	0b b6       	in	r0, 0x3b	; 59
 556:	0f 92       	push	r0
 558:	2f 93       	push	r18
 55a:	3f 93       	push	r19
 55c:	4f 93       	push	r20
 55e:	5f 93       	push	r21
 560:	6f 93       	push	r22
 562:	7f 93       	push	r23
 564:	8f 93       	push	r24
 566:	9f 93       	push	r25
 568:	af 93       	push	r26
 56a:	bf 93       	push	r27
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	ef 93       	push	r30
 572:	ff 93       	push	r31

	accumulator_a += increment_a;
 574:	80 91 20 04 	lds	r24, 0x0420
 578:	90 91 21 04 	lds	r25, 0x0421
 57c:	a0 91 22 04 	lds	r26, 0x0422
 580:	b0 91 23 04 	lds	r27, 0x0423
 584:	40 91 1b 04 	lds	r20, 0x041B
 588:	50 91 1c 04 	lds	r21, 0x041C
 58c:	60 91 1d 04 	lds	r22, 0x041D
 590:	70 91 1e 04 	lds	r23, 0x041E
 594:	84 0f       	add	r24, r20
 596:	95 1f       	adc	r25, r21
 598:	a6 1f       	adc	r26, r22
 59a:	b7 1f       	adc	r27, r23
 59c:	80 93 20 04 	sts	0x0420, r24
 5a0:	90 93 21 04 	sts	0x0421, r25
 5a4:	a0 93 22 04 	sts	0x0422, r26
 5a8:	b0 93 23 04 	sts	0x0423, r27
	accumulator_b += increment_b;
 5ac:	80 91 28 04 	lds	r24, 0x0428
 5b0:	90 91 29 04 	lds	r25, 0x0429
 5b4:	a0 91 2a 04 	lds	r26, 0x042A
 5b8:	b0 91 2b 04 	lds	r27, 0x042B
 5bc:	40 91 30 04 	lds	r20, 0x0430
 5c0:	50 91 31 04 	lds	r21, 0x0431
 5c4:	60 91 32 04 	lds	r22, 0x0432
 5c8:	70 91 33 04 	lds	r23, 0x0433
 5cc:	84 0f       	add	r24, r20
 5ce:	95 1f       	adc	r25, r21
 5d0:	a6 1f       	adc	r26, r22
 5d2:	b7 1f       	adc	r27, r23
 5d4:	80 93 28 04 	sts	0x0428, r24
 5d8:	90 93 29 04 	sts	0x0429, r25
 5dc:	a0 93 2a 04 	sts	0x042A, r26
 5e0:	b0 93 2b 04 	sts	0x042B, r27

	highbyte_a = accumulator_a >> 24;
 5e4:	80 91 20 04 	lds	r24, 0x0420
 5e8:	90 91 21 04 	lds	r25, 0x0421
 5ec:	a0 91 22 04 	lds	r26, 0x0422
 5f0:	b0 91 23 04 	lds	r27, 0x0423
 5f4:	8b 2f       	mov	r24, r27
 5f6:	99 27       	eor	r25, r25
 5f8:	aa 27       	eor	r26, r26
 5fa:	bb 27       	eor	r27, r27
 5fc:	80 93 2c 04 	sts	0x042C, r24
	highbyte_b = accumulator_b >> 24;
 600:	80 91 28 04 	lds	r24, 0x0428
 604:	90 91 29 04 	lds	r25, 0x0429
 608:	a0 91 2a 04 	lds	r26, 0x042A
 60c:	b0 91 2b 04 	lds	r27, 0x042B
 610:	8b 2f       	mov	r24, r27
 612:	99 27       	eor	r25, r25
 614:	aa 27       	eor	r26, r26
 616:	bb 27       	eor	r27, r27
 618:	80 93 34 04 	sts	0x0434, r24

	OCR0A = 128 + 
	   ( (
	   	   (sineTable[highbyte_b] + sineTable[highbyte_a])
 61c:	c0 91 34 04 	lds	r28, 0x0434
 620:	e0 91 2c 04 	lds	r30, 0x042C
	   	                          * rampTable[rampCount]
 624:	80 91 24 04 	lds	r24, 0x0424
 628:	90 91 25 04 	lds	r25, 0x0425
 62c:	a0 91 26 04 	lds	r26, 0x0426
 630:	b0 91 27 04 	lds	r27, 0x0427
	highbyte_a = accumulator_a >> 24;
	highbyte_b = accumulator_b >> 24;

	OCR0A = 128 + 
	   ( (
	   	   (sineTable[highbyte_b] + sineTable[highbyte_a])
 634:	d0 e0       	ldi	r29, 0x00	; 0
 636:	ca 57       	subi	r28, 0x7A	; 122
 638:	dd 4f       	sbci	r29, 0xFD	; 253
 63a:	48 81       	ld	r20, Y
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	ea 57       	subi	r30, 0x7A	; 122
 640:	fd 4f       	sbci	r31, 0xFD	; 253
 642:	20 81       	ld	r18, Z
 644:	33 27       	eor	r19, r19
 646:	27 fd       	sbrc	r18, 7
 648:	30 95       	com	r19
 64a:	24 0f       	add	r18, r20
 64c:	31 1d       	adc	r19, r1
 64e:	47 fd       	sbrc	r20, 7
 650:	3a 95       	dec	r19
	   	                          * rampTable[rampCount]
 652:	fc 01       	movw	r30, r24
 654:	e2 5b       	subi	r30, 0xB2	; 178
 656:	fe 4f       	sbci	r31, 0xFE	; 254
 658:	40 81       	ld	r20, Z
 65a:	42 9f       	mul	r20, r18
 65c:	c0 01       	movw	r24, r0
 65e:	43 9f       	mul	r20, r19
 660:	90 0d       	add	r25, r0
 662:	11 24       	eor	r1, r1
	   	 ) >> 7
 664:	88 0f       	add	r24, r24
 666:	89 2f       	mov	r24, r25
 668:	88 1f       	adc	r24, r24
 66a:	99 0b       	sbc	r25, r25
	accumulator_b += increment_b;

	highbyte_a = accumulator_a >> 24;
	highbyte_b = accumulator_b >> 24;

	OCR0A = 128 + 
 66c:	80 58       	subi	r24, 0x80	; 128
 66e:	87 bd       	out	0x27, r24	; 39
	   	   (sineTable[highbyte_b] + sineTable[highbyte_a])
	   	                          * rampTable[rampCount]
	   	 ) >> 7
	   );

	sample++;
 670:	80 91 35 04 	lds	r24, 0x0435
 674:	90 91 36 04 	lds	r25, 0x0436
 678:	a0 91 37 04 	lds	r26, 0x0437
 67c:	b0 91 38 04 	lds	r27, 0x0438
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	a1 1d       	adc	r26, r1
 684:	b1 1d       	adc	r27, r1
 686:	80 93 35 04 	sts	0x0435, r24
 68a:	90 93 36 04 	sts	0x0436, r25
 68e:	a0 93 37 04 	sts	0x0437, r26
 692:	b0 93 38 04 	sts	0x0438, r27

	//ramping up
	if( sample <= RAMPUPEND )
 696:	80 91 35 04 	lds	r24, 0x0435
 69a:	90 91 36 04 	lds	r25, 0x0436
 69e:	a0 91 37 04 	lds	r26, 0x0437
 6a2:	b0 91 38 04 	lds	r27, 0x0438
 6a6:	89 33       	cpi	r24, 0x39	; 57
 6a8:	91 40       	sbci	r25, 0x01	; 1
 6aa:	a1 05       	cpc	r26, r1
 6ac:	b1 05       	cpc	r27, r1
 6ae:	98 f4       	brcc	.+38     	; 0x6d6 <__vector_18+0x18c>
		rampCount++;
 6b0:	80 91 24 04 	lds	r24, 0x0424
 6b4:	90 91 25 04 	lds	r25, 0x0425
 6b8:	a0 91 26 04 	lds	r26, 0x0426
 6bc:	b0 91 27 04 	lds	r27, 0x0427
 6c0:	01 96       	adiw	r24, 0x01	; 1
 6c2:	a1 1d       	adc	r26, r1
 6c4:	b1 1d       	adc	r27, r1
 6c6:	80 93 24 04 	sts	0x0424, r24
 6ca:	90 93 25 04 	sts	0x0425, r25
 6ce:	a0 93 26 04 	sts	0x0426, r26
 6d2:	b0 93 27 04 	sts	0x0427, r27
	//holdsteady the max value 
	if( sample <= RAMPUPEND && sample <= RAMPDOWNSTART)
 6d6:	80 91 35 04 	lds	r24, 0x0435
 6da:	90 91 36 04 	lds	r25, 0x0436
 6de:	a0 91 37 04 	lds	r26, 0x0437
 6e2:	b0 91 38 04 	lds	r27, 0x0438
 6e6:	89 33       	cpi	r24, 0x39	; 57
 6e8:	91 40       	sbci	r25, 0x01	; 1
 6ea:	a1 05       	cpc	r26, r1
 6ec:	b1 05       	cpc	r27, r1
 6ee:	c8 f4       	brcc	.+50     	; 0x722 <__vector_18+0x1d8>
 6f0:	80 91 35 04 	lds	r24, 0x0435
 6f4:	90 91 36 04 	lds	r25, 0x0436
 6f8:	a0 91 37 04 	lds	r26, 0x0437
 6fc:	b0 91 38 04 	lds	r27, 0x0438
 700:	8c 3e       	cpi	r24, 0xEC	; 236
 702:	92 4f       	sbci	r25, 0xF2	; 242
 704:	a1 05       	cpc	r26, r1
 706:	b1 05       	cpc	r27, r1
 708:	60 f4       	brcc	.+24     	; 0x722 <__vector_18+0x1d8>
		rampCount = RAMP_LENGTH - 1;
 70a:	87 e3       	ldi	r24, 0x37	; 55
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	a0 e0       	ldi	r26, 0x00	; 0
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	80 93 24 04 	sts	0x0424, r24
 716:	90 93 25 04 	sts	0x0425, r25
 71a:	a0 93 26 04 	sts	0x0426, r26
 71e:	b0 93 27 04 	sts	0x0427, r27
	//begin rampdown
	if( sample > RAMPDOWNSTART && sample <= RAMPDOWNSTART)
 722:	80 91 35 04 	lds	r24, 0x0435
 726:	90 91 36 04 	lds	r25, 0x0436
 72a:	a0 91 37 04 	lds	r26, 0x0437
 72e:	b0 91 38 04 	lds	r27, 0x0438
 732:	8c 3e       	cpi	r24, 0xEC	; 236
 734:	92 4f       	sbci	r25, 0xF2	; 242
 736:	a1 05       	cpc	r26, r1
 738:	b1 05       	cpc	r27, r1
 73a:	00 f1       	brcs	.+64     	; 0x77c <__vector_18+0x232>
 73c:	80 91 35 04 	lds	r24, 0x0435
 740:	90 91 36 04 	lds	r25, 0x0436
 744:	a0 91 37 04 	lds	r26, 0x0437
 748:	b0 91 38 04 	lds	r27, 0x0438
 74c:	8c 3e       	cpi	r24, 0xEC	; 236
 74e:	92 4f       	sbci	r25, 0xF2	; 242
 750:	a1 05       	cpc	r26, r1
 752:	b1 05       	cpc	r27, r1
 754:	98 f4       	brcc	.+38     	; 0x77c <__vector_18+0x232>
		rampCount--;
 756:	80 91 24 04 	lds	r24, 0x0424
 75a:	90 91 25 04 	lds	r25, 0x0425
 75e:	a0 91 26 04 	lds	r26, 0x0426
 762:	b0 91 27 04 	lds	r27, 0x0427
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	a1 09       	sbc	r26, r1
 76a:	b1 09       	sbc	r27, r1
 76c:	80 93 24 04 	sts	0x0424, r24
 770:	90 93 25 04 	sts	0x0425, r25
 774:	a0 93 26 04 	sts	0x0426, r26
 778:	b0 93 27 04 	sts	0x0427, r27
	//finished ramping
	if(sample > RAMPDOWNEND)
 77c:	80 91 35 04 	lds	r24, 0x0435
 780:	90 91 36 04 	lds	r25, 0x0436
 784:	a0 91 37 04 	lds	r26, 0x0437
 788:	b0 91 38 04 	lds	r27, 0x0438
 78c:	85 32       	cpi	r24, 0x25	; 37
 78e:	94 4f       	sbci	r25, 0xF4	; 244
 790:	a1 05       	cpc	r26, r1
 792:	b1 05       	cpc	r27, r1
 794:	40 f0       	brcs	.+16     	; 0x7a6 <__vector_18+0x25c>
		rampCount = 0;
 796:	10 92 24 04 	sts	0x0424, r1
 79a:	10 92 25 04 	sts	0x0425, r1
 79e:	10 92 26 04 	sts	0x0426, r1
 7a2:	10 92 27 04 	sts	0x0427, r1

	//generates a 1 ms timebase
	count--;
 7a6:	80 91 2f 04 	lds	r24, 0x042F
 7aa:	81 50       	subi	r24, 0x01	; 1
 7ac:	80 93 2f 04 	sts	0x042F, r24
	if( count == 0){
 7b0:	80 91 2f 04 	lds	r24, 0x042F
 7b4:	81 11       	cpse	r24, r1
 7b6:	15 c0       	rjmp	.+42     	; 0x7e2 <__vector_18+0x298>
		count = COUNTMS;
 7b8:	8e e3       	ldi	r24, 0x3E	; 62
 7ba:	80 93 2f 04 	sts	0x042F, r24
		time++;
 7be:	80 91 2d 04 	lds	r24, 0x042D
 7c2:	90 91 2e 04 	lds	r25, 0x042E
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	90 93 2e 04 	sts	0x042E, r25
 7cc:	80 93 2d 04 	sts	0x042D, r24
		time1++;
 7d0:	80 91 14 04 	lds	r24, 0x0414
 7d4:	90 91 15 04 	lds	r25, 0x0415
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	90 93 15 04 	sts	0x0415, r25
 7de:	80 93 14 04 	sts	0x0414, r24
	}

	
}
 7e2:	ff 91       	pop	r31
 7e4:	ef 91       	pop	r30
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	bf 91       	pop	r27
 7ec:	af 91       	pop	r26
 7ee:	9f 91       	pop	r25
 7f0:	8f 91       	pop	r24
 7f2:	7f 91       	pop	r23
 7f4:	6f 91       	pop	r22
 7f6:	5f 91       	pop	r21
 7f8:	4f 91       	pop	r20
 7fa:	3f 91       	pop	r19
 7fc:	2f 91       	pop	r18
 7fe:	0f 90       	pop	r0
 800:	0b be       	out	0x3b, r0	; 59
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <init_dtmf>:


void init_dtmf(){
	DDRB = 0;
 80c:	14 b8       	out	0x04, r1	; 4
	DDRB |= OUTPUT_PIN;
 80e:	23 9a       	sbi	0x04, 3	; 4

	time = 0;
 810:	10 92 2e 04 	sts	0x042E, r1
 814:	10 92 2d 04 	sts	0x042D, r1

	TCCR0B = 0;
 818:	15 bc       	out	0x25, r1	; 37
	//set divider to 1, run T0 at 16 MHz 
	TCCR0B |= T0_CS00;
 81a:	85 b5       	in	r24, 0x25	; 37
 81c:	81 60       	ori	r24, 0x01	; 1
 81e:	85 bd       	out	0x25, r24	; 37

	TIMSK0 = 0;
 820:	ee e6       	ldi	r30, 0x6E	; 110
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	10 82       	st	Z, r1
	TIMSK0 |= TIMER0_OVERFLOW_INTERRUPT_ENABLE;
 826:	80 81       	ld	r24, Z
 828:	81 60       	ori	r24, 0x01	; 1
 82a:	80 83       	st	Z, r24
	//turn on fast PWM and OC0A - output 
	TCCR0A = 0;
 82c:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= WAVE_GEN_M00 + WAVE_GEN_M01 + COMPARE_MATCH_OUTPUT_A0 + COMPARE_MATCH_OUTPUT_A1; 
 82e:	84 b5       	in	r24, 0x24	; 36
 830:	83 6c       	ori	r24, 0xC3	; 195
 832:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0;
 834:	17 bc       	out	0x27, r1	; 39
	sei();
 836:	78 94       	sei
 838:	08 95       	ret

0000083a <play>:
}

//plays fA and fB for a duration of duration ms
void play(int fA, int fB, int duration){
 83a:	08 95       	ret

0000083c <stop_playing>:
	// OCR0A = 128;

}

void stop_playing(){
	sample = 0;
 83c:	10 92 35 04 	sts	0x0435, r1
 840:	10 92 36 04 	sts	0x0436, r1
 844:	10 92 37 04 	sts	0x0437, r1
 848:	10 92 38 04 	sts	0x0438, r1
	rampCount = 0;
 84c:	10 92 24 04 	sts	0x0424, r1
 850:	10 92 25 04 	sts	0x0425, r1
 854:	10 92 26 04 	sts	0x0426, r1
 858:	10 92 27 04 	sts	0x0427, r1
	increment_a = increment_b = 0;
 85c:	10 92 30 04 	sts	0x0430, r1
 860:	10 92 31 04 	sts	0x0431, r1
 864:	10 92 32 04 	sts	0x0432, r1
 868:	10 92 33 04 	sts	0x0433, r1
 86c:	10 92 1b 04 	sts	0x041B, r1
 870:	10 92 1c 04 	sts	0x041C, r1
 874:	10 92 1d 04 	sts	0x041D, r1
 878:	10 92 1e 04 	sts	0x041E, r1
	accumulator_a = accumulator_b = 0;
 87c:	10 92 28 04 	sts	0x0428, r1
 880:	10 92 29 04 	sts	0x0429, r1
 884:	10 92 2a 04 	sts	0x042A, r1
 888:	10 92 2b 04 	sts	0x042B, r1
 88c:	10 92 20 04 	sts	0x0420, r1
 890:	10 92 21 04 	sts	0x0421, r1
 894:	10 92 22 04 	sts	0x0422, r1
 898:	10 92 23 04 	sts	0x0423, r1
 89c:	08 95       	ret

0000089e <main>:
}

int main(void) {
  // Init port B to show keyboard result
  DDRB = 0xff;
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	84 b9       	out	0x04, r24	; 4
  // and turn out the LEDs
  PORTB = 0xff;   
 8a2:	85 b9       	out	0x05, r24	; 5
  
  // init the UART
  uart_init();
 8a4:	0e 94 b3 01 	call	0x366	; 0x366 <uart_init>
  stdout = stdin = stderr = &uart_str;
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	91 e0       	ldi	r25, 0x01	; 1
 8ac:	90 93 3e 04 	sts	0x043E, r25
 8b0:	80 93 3d 04 	sts	0x043D, r24
 8b4:	90 93 3a 04 	sts	0x043A, r25
 8b8:	80 93 39 04 	sts	0x0439, r24
 8bc:	90 93 3c 04 	sts	0x043C, r25
 8c0:	80 93 3b 04 	sts	0x043B, r24
  fprintf(stdout, "Starting...\n\r");
 8c4:	bc 01       	movw	r22, r24
 8c6:	8f e8       	ldi	r24, 0x8F	; 143
 8c8:	93 e0       	ldi	r25, 0x03	; 3
 8ca:	0e 94 82 04 	call	0x904	; 0x904 <fputs>

  initialize();
 8ce:	0e 94 99 01 	call	0x332	; 0x332 <initialize>

  //endless loop to read keyboard
  while(1) {
	//Used for debouncing
	//fprintf(stdout, "%u\n\r", time1);
    if (time1>=t1) {
 8d2:	80 91 14 04 	lds	r24, 0x0414
 8d6:	90 91 15 04 	lds	r25, 0x0415
 8da:	44 97       	sbiw	r24, 0x14	; 20
 8dc:	d0 f3       	brcs	.-12     	; 0x8d2 <main+0x34>
	  	//fprintf(stdout, "Entering task1...\n\r");	
		task1();
 8de:	0e 94 67 00 	call	0xce	; 0xce <task1>
 8e2:	f7 cf       	rjmp	.-18     	; 0x8d2 <main+0x34>

000008e4 <fprintf>:
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	cd b7       	in	r28, 0x3d	; 61
 8ea:	de b7       	in	r29, 0x3e	; 62
 8ec:	ce 01       	movw	r24, r28
 8ee:	09 96       	adiw	r24, 0x09	; 9
 8f0:	ac 01       	movw	r20, r24
 8f2:	6f 81       	ldd	r22, Y+7	; 0x07
 8f4:	78 85       	ldd	r23, Y+8	; 0x08
 8f6:	8d 81       	ldd	r24, Y+5	; 0x05
 8f8:	9e 81       	ldd	r25, Y+6	; 0x06
 8fa:	0e 94 ad 04 	call	0x95a	; 0x95a <vfprintf>
 8fe:	df 91       	pop	r29
 900:	cf 91       	pop	r28
 902:	08 95       	ret

00000904 <fputs>:
 904:	ef 92       	push	r14
 906:	ff 92       	push	r15
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	7c 01       	movw	r14, r24
 912:	8b 01       	movw	r16, r22
 914:	db 01       	movw	r26, r22
 916:	13 96       	adiw	r26, 0x03	; 3
 918:	8c 91       	ld	r24, X
 91a:	81 ff       	sbrs	r24, 1
 91c:	14 c0       	rjmp	.+40     	; 0x946 <fputs+0x42>
 91e:	c0 e0       	ldi	r28, 0x00	; 0
 920:	d0 e0       	ldi	r29, 0x00	; 0
 922:	0b c0       	rjmp	.+22     	; 0x93a <fputs+0x36>
 924:	d8 01       	movw	r26, r16
 926:	18 96       	adiw	r26, 0x08	; 8
 928:	ed 91       	ld	r30, X+
 92a:	fc 91       	ld	r31, X
 92c:	19 97       	sbiw	r26, 0x09	; 9
 92e:	b8 01       	movw	r22, r16
 930:	09 95       	icall
 932:	89 2b       	or	r24, r25
 934:	11 f0       	breq	.+4      	; 0x93a <fputs+0x36>
 936:	cf ef       	ldi	r28, 0xFF	; 255
 938:	df ef       	ldi	r29, 0xFF	; 255
 93a:	f7 01       	movw	r30, r14
 93c:	81 91       	ld	r24, Z+
 93e:	7f 01       	movw	r14, r30
 940:	81 11       	cpse	r24, r1
 942:	f0 cf       	rjmp	.-32     	; 0x924 <fputs+0x20>
 944:	02 c0       	rjmp	.+4      	; 0x94a <fputs+0x46>
 946:	cf ef       	ldi	r28, 0xFF	; 255
 948:	df ef       	ldi	r29, 0xFF	; 255
 94a:	ce 01       	movw	r24, r28
 94c:	df 91       	pop	r29
 94e:	cf 91       	pop	r28
 950:	1f 91       	pop	r17
 952:	0f 91       	pop	r16
 954:	ff 90       	pop	r15
 956:	ef 90       	pop	r14
 958:	08 95       	ret

0000095a <vfprintf>:
 95a:	2f 92       	push	r2
 95c:	3f 92       	push	r3
 95e:	4f 92       	push	r4
 960:	5f 92       	push	r5
 962:	6f 92       	push	r6
 964:	7f 92       	push	r7
 966:	8f 92       	push	r8
 968:	9f 92       	push	r9
 96a:	af 92       	push	r10
 96c:	bf 92       	push	r11
 96e:	cf 92       	push	r12
 970:	df 92       	push	r13
 972:	ef 92       	push	r14
 974:	ff 92       	push	r15
 976:	0f 93       	push	r16
 978:	1f 93       	push	r17
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	cd b7       	in	r28, 0x3d	; 61
 980:	de b7       	in	r29, 0x3e	; 62
 982:	2c 97       	sbiw	r28, 0x0c	; 12
 984:	0f b6       	in	r0, 0x3f	; 63
 986:	f8 94       	cli
 988:	de bf       	out	0x3e, r29	; 62
 98a:	0f be       	out	0x3f, r0	; 63
 98c:	cd bf       	out	0x3d, r28	; 61
 98e:	7c 01       	movw	r14, r24
 990:	6b 01       	movw	r12, r22
 992:	8a 01       	movw	r16, r20
 994:	fc 01       	movw	r30, r24
 996:	17 82       	std	Z+7, r1	; 0x07
 998:	16 82       	std	Z+6, r1	; 0x06
 99a:	83 81       	ldd	r24, Z+3	; 0x03
 99c:	81 ff       	sbrs	r24, 1
 99e:	c6 c1       	rjmp	.+908    	; 0xd2c <vfprintf+0x3d2>
 9a0:	88 24       	eor	r8, r8
 9a2:	83 94       	inc	r8
 9a4:	91 2c       	mov	r9, r1
 9a6:	8c 0e       	add	r8, r28
 9a8:	9d 1e       	adc	r9, r29
 9aa:	f7 01       	movw	r30, r14
 9ac:	93 81       	ldd	r25, Z+3	; 0x03
 9ae:	f6 01       	movw	r30, r12
 9b0:	93 fd       	sbrc	r25, 3
 9b2:	85 91       	lpm	r24, Z+
 9b4:	93 ff       	sbrs	r25, 3
 9b6:	81 91       	ld	r24, Z+
 9b8:	6f 01       	movw	r12, r30
 9ba:	88 23       	and	r24, r24
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <vfprintf+0x66>
 9be:	b2 c1       	rjmp	.+868    	; 0xd24 <vfprintf+0x3ca>
 9c0:	85 32       	cpi	r24, 0x25	; 37
 9c2:	39 f4       	brne	.+14     	; 0x9d2 <vfprintf+0x78>
 9c4:	93 fd       	sbrc	r25, 3
 9c6:	85 91       	lpm	r24, Z+
 9c8:	93 ff       	sbrs	r25, 3
 9ca:	81 91       	ld	r24, Z+
 9cc:	6f 01       	movw	r12, r30
 9ce:	85 32       	cpi	r24, 0x25	; 37
 9d0:	29 f4       	brne	.+10     	; 0x9dc <vfprintf+0x82>
 9d2:	b7 01       	movw	r22, r14
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 9da:	e7 cf       	rjmp	.-50     	; 0x9aa <vfprintf+0x50>
 9dc:	51 2c       	mov	r5, r1
 9de:	31 2c       	mov	r3, r1
 9e0:	20 e0       	ldi	r18, 0x00	; 0
 9e2:	20 32       	cpi	r18, 0x20	; 32
 9e4:	a8 f4       	brcc	.+42     	; 0xa10 <vfprintf+0xb6>
 9e6:	8b 32       	cpi	r24, 0x2B	; 43
 9e8:	61 f0       	breq	.+24     	; 0xa02 <vfprintf+0xa8>
 9ea:	28 f4       	brcc	.+10     	; 0x9f6 <vfprintf+0x9c>
 9ec:	80 32       	cpi	r24, 0x20	; 32
 9ee:	51 f0       	breq	.+20     	; 0xa04 <vfprintf+0xaa>
 9f0:	83 32       	cpi	r24, 0x23	; 35
 9f2:	71 f4       	brne	.+28     	; 0xa10 <vfprintf+0xb6>
 9f4:	0b c0       	rjmp	.+22     	; 0xa0c <vfprintf+0xb2>
 9f6:	8d 32       	cpi	r24, 0x2D	; 45
 9f8:	39 f0       	breq	.+14     	; 0xa08 <vfprintf+0xae>
 9fa:	80 33       	cpi	r24, 0x30	; 48
 9fc:	49 f4       	brne	.+18     	; 0xa10 <vfprintf+0xb6>
 9fe:	21 60       	ori	r18, 0x01	; 1
 a00:	28 c0       	rjmp	.+80     	; 0xa52 <vfprintf+0xf8>
 a02:	22 60       	ori	r18, 0x02	; 2
 a04:	24 60       	ori	r18, 0x04	; 4
 a06:	25 c0       	rjmp	.+74     	; 0xa52 <vfprintf+0xf8>
 a08:	28 60       	ori	r18, 0x08	; 8
 a0a:	23 c0       	rjmp	.+70     	; 0xa52 <vfprintf+0xf8>
 a0c:	20 61       	ori	r18, 0x10	; 16
 a0e:	21 c0       	rjmp	.+66     	; 0xa52 <vfprintf+0xf8>
 a10:	27 fd       	sbrc	r18, 7
 a12:	27 c0       	rjmp	.+78     	; 0xa62 <vfprintf+0x108>
 a14:	38 2f       	mov	r19, r24
 a16:	30 53       	subi	r19, 0x30	; 48
 a18:	3a 30       	cpi	r19, 0x0A	; 10
 a1a:	78 f4       	brcc	.+30     	; 0xa3a <vfprintf+0xe0>
 a1c:	26 ff       	sbrs	r18, 6
 a1e:	06 c0       	rjmp	.+12     	; 0xa2c <vfprintf+0xd2>
 a20:	fa e0       	ldi	r31, 0x0A	; 10
 a22:	5f 9e       	mul	r5, r31
 a24:	30 0d       	add	r19, r0
 a26:	11 24       	eor	r1, r1
 a28:	53 2e       	mov	r5, r19
 a2a:	13 c0       	rjmp	.+38     	; 0xa52 <vfprintf+0xf8>
 a2c:	8a e0       	ldi	r24, 0x0A	; 10
 a2e:	38 9e       	mul	r3, r24
 a30:	30 0d       	add	r19, r0
 a32:	11 24       	eor	r1, r1
 a34:	33 2e       	mov	r3, r19
 a36:	20 62       	ori	r18, 0x20	; 32
 a38:	0c c0       	rjmp	.+24     	; 0xa52 <vfprintf+0xf8>
 a3a:	8e 32       	cpi	r24, 0x2E	; 46
 a3c:	21 f4       	brne	.+8      	; 0xa46 <vfprintf+0xec>
 a3e:	26 fd       	sbrc	r18, 6
 a40:	71 c1       	rjmp	.+738    	; 0xd24 <vfprintf+0x3ca>
 a42:	20 64       	ori	r18, 0x40	; 64
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <vfprintf+0xf8>
 a46:	8c 36       	cpi	r24, 0x6C	; 108
 a48:	11 f4       	brne	.+4      	; 0xa4e <vfprintf+0xf4>
 a4a:	20 68       	ori	r18, 0x80	; 128
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <vfprintf+0xf8>
 a4e:	88 36       	cpi	r24, 0x68	; 104
 a50:	41 f4       	brne	.+16     	; 0xa62 <vfprintf+0x108>
 a52:	f6 01       	movw	r30, r12
 a54:	93 fd       	sbrc	r25, 3
 a56:	85 91       	lpm	r24, Z+
 a58:	93 ff       	sbrs	r25, 3
 a5a:	81 91       	ld	r24, Z+
 a5c:	6f 01       	movw	r12, r30
 a5e:	81 11       	cpse	r24, r1
 a60:	c0 cf       	rjmp	.-128    	; 0x9e2 <vfprintf+0x88>
 a62:	98 2f       	mov	r25, r24
 a64:	95 54       	subi	r25, 0x45	; 69
 a66:	93 30       	cpi	r25, 0x03	; 3
 a68:	18 f0       	brcs	.+6      	; 0xa70 <vfprintf+0x116>
 a6a:	90 52       	subi	r25, 0x20	; 32
 a6c:	93 30       	cpi	r25, 0x03	; 3
 a6e:	28 f4       	brcc	.+10     	; 0xa7a <vfprintf+0x120>
 a70:	0c 5f       	subi	r16, 0xFC	; 252
 a72:	1f 4f       	sbci	r17, 0xFF	; 255
 a74:	ff e3       	ldi	r31, 0x3F	; 63
 a76:	f9 83       	std	Y+1, r31	; 0x01
 a78:	0d c0       	rjmp	.+26     	; 0xa94 <vfprintf+0x13a>
 a7a:	83 36       	cpi	r24, 0x63	; 99
 a7c:	31 f0       	breq	.+12     	; 0xa8a <vfprintf+0x130>
 a7e:	83 37       	cpi	r24, 0x73	; 115
 a80:	71 f0       	breq	.+28     	; 0xa9e <vfprintf+0x144>
 a82:	83 35       	cpi	r24, 0x53	; 83
 a84:	09 f0       	breq	.+2      	; 0xa88 <vfprintf+0x12e>
 a86:	5e c0       	rjmp	.+188    	; 0xb44 <vfprintf+0x1ea>
 a88:	23 c0       	rjmp	.+70     	; 0xad0 <vfprintf+0x176>
 a8a:	f8 01       	movw	r30, r16
 a8c:	80 81       	ld	r24, Z
 a8e:	89 83       	std	Y+1, r24	; 0x01
 a90:	0e 5f       	subi	r16, 0xFE	; 254
 a92:	1f 4f       	sbci	r17, 0xFF	; 255
 a94:	44 24       	eor	r4, r4
 a96:	43 94       	inc	r4
 a98:	51 2c       	mov	r5, r1
 a9a:	54 01       	movw	r10, r8
 a9c:	15 c0       	rjmp	.+42     	; 0xac8 <vfprintf+0x16e>
 a9e:	38 01       	movw	r6, r16
 aa0:	f2 e0       	ldi	r31, 0x02	; 2
 aa2:	6f 0e       	add	r6, r31
 aa4:	71 1c       	adc	r7, r1
 aa6:	f8 01       	movw	r30, r16
 aa8:	a0 80       	ld	r10, Z
 aaa:	b1 80       	ldd	r11, Z+1	; 0x01
 aac:	26 ff       	sbrs	r18, 6
 aae:	03 c0       	rjmp	.+6      	; 0xab6 <vfprintf+0x15c>
 ab0:	65 2d       	mov	r22, r5
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0x160>
 ab6:	6f ef       	ldi	r22, 0xFF	; 255
 ab8:	7f ef       	ldi	r23, 0xFF	; 255
 aba:	c5 01       	movw	r24, r10
 abc:	2c 87       	std	Y+12, r18	; 0x0c
 abe:	0e 94 bd 06 	call	0xd7a	; 0xd7a <strnlen>
 ac2:	2c 01       	movw	r4, r24
 ac4:	83 01       	movw	r16, r6
 ac6:	2c 85       	ldd	r18, Y+12	; 0x0c
 ac8:	6f e7       	ldi	r22, 0x7F	; 127
 aca:	26 2e       	mov	r2, r22
 acc:	22 22       	and	r2, r18
 ace:	18 c0       	rjmp	.+48     	; 0xb00 <vfprintf+0x1a6>
 ad0:	38 01       	movw	r6, r16
 ad2:	f2 e0       	ldi	r31, 0x02	; 2
 ad4:	6f 0e       	add	r6, r31
 ad6:	71 1c       	adc	r7, r1
 ad8:	f8 01       	movw	r30, r16
 ada:	a0 80       	ld	r10, Z
 adc:	b1 80       	ldd	r11, Z+1	; 0x01
 ade:	26 ff       	sbrs	r18, 6
 ae0:	03 c0       	rjmp	.+6      	; 0xae8 <vfprintf+0x18e>
 ae2:	65 2d       	mov	r22, r5
 ae4:	70 e0       	ldi	r23, 0x00	; 0
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <vfprintf+0x192>
 ae8:	6f ef       	ldi	r22, 0xFF	; 255
 aea:	7f ef       	ldi	r23, 0xFF	; 255
 aec:	c5 01       	movw	r24, r10
 aee:	2c 87       	std	Y+12, r18	; 0x0c
 af0:	0e 94 b2 06 	call	0xd64	; 0xd64 <strnlen_P>
 af4:	2c 01       	movw	r4, r24
 af6:	2c 85       	ldd	r18, Y+12	; 0x0c
 af8:	50 e8       	ldi	r21, 0x80	; 128
 afa:	25 2e       	mov	r2, r21
 afc:	22 2a       	or	r2, r18
 afe:	83 01       	movw	r16, r6
 b00:	23 fc       	sbrc	r2, 3
 b02:	1c c0       	rjmp	.+56     	; 0xb3c <vfprintf+0x1e2>
 b04:	06 c0       	rjmp	.+12     	; 0xb12 <vfprintf+0x1b8>
 b06:	b7 01       	movw	r22, r14
 b08:	80 e2       	ldi	r24, 0x20	; 32
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 b10:	3a 94       	dec	r3
 b12:	83 2d       	mov	r24, r3
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	48 16       	cp	r4, r24
 b18:	59 06       	cpc	r5, r25
 b1a:	a8 f3       	brcs	.-22     	; 0xb06 <vfprintf+0x1ac>
 b1c:	0f c0       	rjmp	.+30     	; 0xb3c <vfprintf+0x1e2>
 b1e:	f5 01       	movw	r30, r10
 b20:	27 fc       	sbrc	r2, 7
 b22:	85 91       	lpm	r24, Z+
 b24:	27 fe       	sbrs	r2, 7
 b26:	81 91       	ld	r24, Z+
 b28:	5f 01       	movw	r10, r30
 b2a:	b7 01       	movw	r22, r14
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 b32:	31 10       	cpse	r3, r1
 b34:	3a 94       	dec	r3
 b36:	f1 e0       	ldi	r31, 0x01	; 1
 b38:	4f 1a       	sub	r4, r31
 b3a:	51 08       	sbc	r5, r1
 b3c:	41 14       	cp	r4, r1
 b3e:	51 04       	cpc	r5, r1
 b40:	71 f7       	brne	.-36     	; 0xb1e <vfprintf+0x1c4>
 b42:	ed c0       	rjmp	.+474    	; 0xd1e <vfprintf+0x3c4>
 b44:	84 36       	cpi	r24, 0x64	; 100
 b46:	11 f0       	breq	.+4      	; 0xb4c <vfprintf+0x1f2>
 b48:	89 36       	cpi	r24, 0x69	; 105
 b4a:	41 f5       	brne	.+80     	; 0xb9c <vfprintf+0x242>
 b4c:	f8 01       	movw	r30, r16
 b4e:	27 ff       	sbrs	r18, 7
 b50:	07 c0       	rjmp	.+14     	; 0xb60 <vfprintf+0x206>
 b52:	60 81       	ld	r22, Z
 b54:	71 81       	ldd	r23, Z+1	; 0x01
 b56:	82 81       	ldd	r24, Z+2	; 0x02
 b58:	93 81       	ldd	r25, Z+3	; 0x03
 b5a:	0c 5f       	subi	r16, 0xFC	; 252
 b5c:	1f 4f       	sbci	r17, 0xFF	; 255
 b5e:	08 c0       	rjmp	.+16     	; 0xb70 <vfprintf+0x216>
 b60:	60 81       	ld	r22, Z
 b62:	71 81       	ldd	r23, Z+1	; 0x01
 b64:	88 27       	eor	r24, r24
 b66:	77 fd       	sbrc	r23, 7
 b68:	80 95       	com	r24
 b6a:	98 2f       	mov	r25, r24
 b6c:	0e 5f       	subi	r16, 0xFE	; 254
 b6e:	1f 4f       	sbci	r17, 0xFF	; 255
 b70:	4f e6       	ldi	r20, 0x6F	; 111
 b72:	b4 2e       	mov	r11, r20
 b74:	b2 22       	and	r11, r18
 b76:	97 ff       	sbrs	r25, 7
 b78:	09 c0       	rjmp	.+18     	; 0xb8c <vfprintf+0x232>
 b7a:	90 95       	com	r25
 b7c:	80 95       	com	r24
 b7e:	70 95       	com	r23
 b80:	61 95       	neg	r22
 b82:	7f 4f       	sbci	r23, 0xFF	; 255
 b84:	8f 4f       	sbci	r24, 0xFF	; 255
 b86:	9f 4f       	sbci	r25, 0xFF	; 255
 b88:	f0 e8       	ldi	r31, 0x80	; 128
 b8a:	bf 2a       	or	r11, r31
 b8c:	2a e0       	ldi	r18, 0x0A	; 10
 b8e:	30 e0       	ldi	r19, 0x00	; 0
 b90:	a4 01       	movw	r20, r8
 b92:	0e 94 f4 06 	call	0xde8	; 0xde8 <__ultoa_invert>
 b96:	a8 2e       	mov	r10, r24
 b98:	a8 18       	sub	r10, r8
 b9a:	43 c0       	rjmp	.+134    	; 0xc22 <vfprintf+0x2c8>
 b9c:	85 37       	cpi	r24, 0x75	; 117
 b9e:	31 f4       	brne	.+12     	; 0xbac <vfprintf+0x252>
 ba0:	3f ee       	ldi	r19, 0xEF	; 239
 ba2:	b3 2e       	mov	r11, r19
 ba4:	b2 22       	and	r11, r18
 ba6:	2a e0       	ldi	r18, 0x0A	; 10
 ba8:	30 e0       	ldi	r19, 0x00	; 0
 baa:	24 c0       	rjmp	.+72     	; 0xbf4 <vfprintf+0x29a>
 bac:	99 ef       	ldi	r25, 0xF9	; 249
 bae:	b9 2e       	mov	r11, r25
 bb0:	b2 22       	and	r11, r18
 bb2:	8f 36       	cpi	r24, 0x6F	; 111
 bb4:	b9 f0       	breq	.+46     	; 0xbe4 <vfprintf+0x28a>
 bb6:	20 f4       	brcc	.+8      	; 0xbc0 <vfprintf+0x266>
 bb8:	88 35       	cpi	r24, 0x58	; 88
 bba:	09 f0       	breq	.+2      	; 0xbbe <vfprintf+0x264>
 bbc:	b3 c0       	rjmp	.+358    	; 0xd24 <vfprintf+0x3ca>
 bbe:	0d c0       	rjmp	.+26     	; 0xbda <vfprintf+0x280>
 bc0:	80 37       	cpi	r24, 0x70	; 112
 bc2:	21 f0       	breq	.+8      	; 0xbcc <vfprintf+0x272>
 bc4:	88 37       	cpi	r24, 0x78	; 120
 bc6:	09 f0       	breq	.+2      	; 0xbca <vfprintf+0x270>
 bc8:	ad c0       	rjmp	.+346    	; 0xd24 <vfprintf+0x3ca>
 bca:	02 c0       	rjmp	.+4      	; 0xbd0 <vfprintf+0x276>
 bcc:	20 e1       	ldi	r18, 0x10	; 16
 bce:	b2 2a       	or	r11, r18
 bd0:	b4 fe       	sbrs	r11, 4
 bd2:	0b c0       	rjmp	.+22     	; 0xbea <vfprintf+0x290>
 bd4:	84 e0       	ldi	r24, 0x04	; 4
 bd6:	b8 2a       	or	r11, r24
 bd8:	08 c0       	rjmp	.+16     	; 0xbea <vfprintf+0x290>
 bda:	24 ff       	sbrs	r18, 4
 bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <vfprintf+0x296>
 bde:	e6 e0       	ldi	r30, 0x06	; 6
 be0:	be 2a       	or	r11, r30
 be2:	06 c0       	rjmp	.+12     	; 0xbf0 <vfprintf+0x296>
 be4:	28 e0       	ldi	r18, 0x08	; 8
 be6:	30 e0       	ldi	r19, 0x00	; 0
 be8:	05 c0       	rjmp	.+10     	; 0xbf4 <vfprintf+0x29a>
 bea:	20 e1       	ldi	r18, 0x10	; 16
 bec:	30 e0       	ldi	r19, 0x00	; 0
 bee:	02 c0       	rjmp	.+4      	; 0xbf4 <vfprintf+0x29a>
 bf0:	20 e1       	ldi	r18, 0x10	; 16
 bf2:	32 e0       	ldi	r19, 0x02	; 2
 bf4:	f8 01       	movw	r30, r16
 bf6:	b7 fe       	sbrs	r11, 7
 bf8:	07 c0       	rjmp	.+14     	; 0xc08 <vfprintf+0x2ae>
 bfa:	60 81       	ld	r22, Z
 bfc:	71 81       	ldd	r23, Z+1	; 0x01
 bfe:	82 81       	ldd	r24, Z+2	; 0x02
 c00:	93 81       	ldd	r25, Z+3	; 0x03
 c02:	0c 5f       	subi	r16, 0xFC	; 252
 c04:	1f 4f       	sbci	r17, 0xFF	; 255
 c06:	06 c0       	rjmp	.+12     	; 0xc14 <vfprintf+0x2ba>
 c08:	60 81       	ld	r22, Z
 c0a:	71 81       	ldd	r23, Z+1	; 0x01
 c0c:	80 e0       	ldi	r24, 0x00	; 0
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0e 5f       	subi	r16, 0xFE	; 254
 c12:	1f 4f       	sbci	r17, 0xFF	; 255
 c14:	a4 01       	movw	r20, r8
 c16:	0e 94 f4 06 	call	0xde8	; 0xde8 <__ultoa_invert>
 c1a:	a8 2e       	mov	r10, r24
 c1c:	a8 18       	sub	r10, r8
 c1e:	ff e7       	ldi	r31, 0x7F	; 127
 c20:	bf 22       	and	r11, r31
 c22:	b6 fe       	sbrs	r11, 6
 c24:	0b c0       	rjmp	.+22     	; 0xc3c <vfprintf+0x2e2>
 c26:	2b 2d       	mov	r18, r11
 c28:	2e 7f       	andi	r18, 0xFE	; 254
 c2a:	a5 14       	cp	r10, r5
 c2c:	50 f4       	brcc	.+20     	; 0xc42 <vfprintf+0x2e8>
 c2e:	b4 fe       	sbrs	r11, 4
 c30:	0a c0       	rjmp	.+20     	; 0xc46 <vfprintf+0x2ec>
 c32:	b2 fc       	sbrc	r11, 2
 c34:	08 c0       	rjmp	.+16     	; 0xc46 <vfprintf+0x2ec>
 c36:	2b 2d       	mov	r18, r11
 c38:	2e 7e       	andi	r18, 0xEE	; 238
 c3a:	05 c0       	rjmp	.+10     	; 0xc46 <vfprintf+0x2ec>
 c3c:	7a 2c       	mov	r7, r10
 c3e:	2b 2d       	mov	r18, r11
 c40:	03 c0       	rjmp	.+6      	; 0xc48 <vfprintf+0x2ee>
 c42:	7a 2c       	mov	r7, r10
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <vfprintf+0x2ee>
 c46:	75 2c       	mov	r7, r5
 c48:	24 ff       	sbrs	r18, 4
 c4a:	0d c0       	rjmp	.+26     	; 0xc66 <vfprintf+0x30c>
 c4c:	fe 01       	movw	r30, r28
 c4e:	ea 0d       	add	r30, r10
 c50:	f1 1d       	adc	r31, r1
 c52:	80 81       	ld	r24, Z
 c54:	80 33       	cpi	r24, 0x30	; 48
 c56:	11 f4       	brne	.+4      	; 0xc5c <vfprintf+0x302>
 c58:	29 7e       	andi	r18, 0xE9	; 233
 c5a:	09 c0       	rjmp	.+18     	; 0xc6e <vfprintf+0x314>
 c5c:	22 ff       	sbrs	r18, 2
 c5e:	06 c0       	rjmp	.+12     	; 0xc6c <vfprintf+0x312>
 c60:	73 94       	inc	r7
 c62:	73 94       	inc	r7
 c64:	04 c0       	rjmp	.+8      	; 0xc6e <vfprintf+0x314>
 c66:	82 2f       	mov	r24, r18
 c68:	86 78       	andi	r24, 0x86	; 134
 c6a:	09 f0       	breq	.+2      	; 0xc6e <vfprintf+0x314>
 c6c:	73 94       	inc	r7
 c6e:	23 fd       	sbrc	r18, 3
 c70:	14 c0       	rjmp	.+40     	; 0xc9a <vfprintf+0x340>
 c72:	20 ff       	sbrs	r18, 0
 c74:	0f c0       	rjmp	.+30     	; 0xc94 <vfprintf+0x33a>
 c76:	5a 2c       	mov	r5, r10
 c78:	73 14       	cp	r7, r3
 c7a:	60 f4       	brcc	.+24     	; 0xc94 <vfprintf+0x33a>
 c7c:	53 0c       	add	r5, r3
 c7e:	57 18       	sub	r5, r7
 c80:	73 2c       	mov	r7, r3
 c82:	08 c0       	rjmp	.+16     	; 0xc94 <vfprintf+0x33a>
 c84:	b7 01       	movw	r22, r14
 c86:	80 e2       	ldi	r24, 0x20	; 32
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	2c 87       	std	Y+12, r18	; 0x0c
 c8c:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 c90:	73 94       	inc	r7
 c92:	2c 85       	ldd	r18, Y+12	; 0x0c
 c94:	73 14       	cp	r7, r3
 c96:	b0 f3       	brcs	.-20     	; 0xc84 <vfprintf+0x32a>
 c98:	04 c0       	rjmp	.+8      	; 0xca2 <vfprintf+0x348>
 c9a:	73 14       	cp	r7, r3
 c9c:	10 f4       	brcc	.+4      	; 0xca2 <vfprintf+0x348>
 c9e:	37 18       	sub	r3, r7
 ca0:	01 c0       	rjmp	.+2      	; 0xca4 <vfprintf+0x34a>
 ca2:	31 2c       	mov	r3, r1
 ca4:	24 ff       	sbrs	r18, 4
 ca6:	12 c0       	rjmp	.+36     	; 0xccc <vfprintf+0x372>
 ca8:	b7 01       	movw	r22, r14
 caa:	80 e3       	ldi	r24, 0x30	; 48
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	2c 87       	std	Y+12, r18	; 0x0c
 cb0:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 cb4:	2c 85       	ldd	r18, Y+12	; 0x0c
 cb6:	22 ff       	sbrs	r18, 2
 cb8:	1e c0       	rjmp	.+60     	; 0xcf6 <vfprintf+0x39c>
 cba:	21 ff       	sbrs	r18, 1
 cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <vfprintf+0x36a>
 cbe:	88 e5       	ldi	r24, 0x58	; 88
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <vfprintf+0x36e>
 cc4:	88 e7       	ldi	r24, 0x78	; 120
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	b7 01       	movw	r22, r14
 cca:	0c c0       	rjmp	.+24     	; 0xce4 <vfprintf+0x38a>
 ccc:	82 2f       	mov	r24, r18
 cce:	86 78       	andi	r24, 0x86	; 134
 cd0:	91 f0       	breq	.+36     	; 0xcf6 <vfprintf+0x39c>
 cd2:	21 fd       	sbrc	r18, 1
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x380>
 cd6:	80 e2       	ldi	r24, 0x20	; 32
 cd8:	01 c0       	rjmp	.+2      	; 0xcdc <vfprintf+0x382>
 cda:	8b e2       	ldi	r24, 0x2B	; 43
 cdc:	27 fd       	sbrc	r18, 7
 cde:	8d e2       	ldi	r24, 0x2D	; 45
 ce0:	b7 01       	movw	r22, r14
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <vfprintf+0x39c>
 cea:	b7 01       	movw	r22, r14
 cec:	80 e3       	ldi	r24, 0x30	; 48
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 cf4:	5a 94       	dec	r5
 cf6:	a5 14       	cp	r10, r5
 cf8:	c0 f3       	brcs	.-16     	; 0xcea <vfprintf+0x390>
 cfa:	aa 94       	dec	r10
 cfc:	f4 01       	movw	r30, r8
 cfe:	ea 0d       	add	r30, r10
 d00:	f1 1d       	adc	r31, r1
 d02:	b7 01       	movw	r22, r14
 d04:	80 81       	ld	r24, Z
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 d0c:	a1 10       	cpse	r10, r1
 d0e:	f5 cf       	rjmp	.-22     	; 0xcfa <vfprintf+0x3a0>
 d10:	06 c0       	rjmp	.+12     	; 0xd1e <vfprintf+0x3c4>
 d12:	b7 01       	movw	r22, r14
 d14:	80 e2       	ldi	r24, 0x20	; 32
 d16:	90 e0       	ldi	r25, 0x00	; 0
 d18:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 d1c:	3a 94       	dec	r3
 d1e:	31 10       	cpse	r3, r1
 d20:	f8 cf       	rjmp	.-16     	; 0xd12 <vfprintf+0x3b8>
 d22:	43 ce       	rjmp	.-890    	; 0x9aa <vfprintf+0x50>
 d24:	f7 01       	movw	r30, r14
 d26:	26 81       	ldd	r18, Z+6	; 0x06
 d28:	37 81       	ldd	r19, Z+7	; 0x07
 d2a:	02 c0       	rjmp	.+4      	; 0xd30 <vfprintf+0x3d6>
 d2c:	2f ef       	ldi	r18, 0xFF	; 255
 d2e:	3f ef       	ldi	r19, 0xFF	; 255
 d30:	c9 01       	movw	r24, r18
 d32:	2c 96       	adiw	r28, 0x0c	; 12
 d34:	0f b6       	in	r0, 0x3f	; 63
 d36:	f8 94       	cli
 d38:	de bf       	out	0x3e, r29	; 62
 d3a:	0f be       	out	0x3f, r0	; 63
 d3c:	cd bf       	out	0x3d, r28	; 61
 d3e:	df 91       	pop	r29
 d40:	cf 91       	pop	r28
 d42:	1f 91       	pop	r17
 d44:	0f 91       	pop	r16
 d46:	ff 90       	pop	r15
 d48:	ef 90       	pop	r14
 d4a:	df 90       	pop	r13
 d4c:	cf 90       	pop	r12
 d4e:	bf 90       	pop	r11
 d50:	af 90       	pop	r10
 d52:	9f 90       	pop	r9
 d54:	8f 90       	pop	r8
 d56:	7f 90       	pop	r7
 d58:	6f 90       	pop	r6
 d5a:	5f 90       	pop	r5
 d5c:	4f 90       	pop	r4
 d5e:	3f 90       	pop	r3
 d60:	2f 90       	pop	r2
 d62:	08 95       	ret

00000d64 <strnlen_P>:
 d64:	fc 01       	movw	r30, r24
 d66:	05 90       	lpm	r0, Z+
 d68:	61 50       	subi	r22, 0x01	; 1
 d6a:	70 40       	sbci	r23, 0x00	; 0
 d6c:	01 10       	cpse	r0, r1
 d6e:	d8 f7       	brcc	.-10     	; 0xd66 <strnlen_P+0x2>
 d70:	80 95       	com	r24
 d72:	90 95       	com	r25
 d74:	8e 0f       	add	r24, r30
 d76:	9f 1f       	adc	r25, r31
 d78:	08 95       	ret

00000d7a <strnlen>:
 d7a:	fc 01       	movw	r30, r24
 d7c:	61 50       	subi	r22, 0x01	; 1
 d7e:	70 40       	sbci	r23, 0x00	; 0
 d80:	01 90       	ld	r0, Z+
 d82:	01 10       	cpse	r0, r1
 d84:	d8 f7       	brcc	.-10     	; 0xd7c <strnlen+0x2>
 d86:	80 95       	com	r24
 d88:	90 95       	com	r25
 d8a:	8e 0f       	add	r24, r30
 d8c:	9f 1f       	adc	r25, r31
 d8e:	08 95       	ret

00000d90 <fputc>:
 d90:	0f 93       	push	r16
 d92:	1f 93       	push	r17
 d94:	cf 93       	push	r28
 d96:	df 93       	push	r29
 d98:	8c 01       	movw	r16, r24
 d9a:	eb 01       	movw	r28, r22
 d9c:	8b 81       	ldd	r24, Y+3	; 0x03
 d9e:	81 fd       	sbrc	r24, 1
 da0:	03 c0       	rjmp	.+6      	; 0xda8 <fputc+0x18>
 da2:	0f ef       	ldi	r16, 0xFF	; 255
 da4:	1f ef       	ldi	r17, 0xFF	; 255
 da6:	1a c0       	rjmp	.+52     	; 0xddc <fputc+0x4c>
 da8:	82 ff       	sbrs	r24, 2
 daa:	0d c0       	rjmp	.+26     	; 0xdc6 <fputc+0x36>
 dac:	2e 81       	ldd	r18, Y+6	; 0x06
 dae:	3f 81       	ldd	r19, Y+7	; 0x07
 db0:	8c 81       	ldd	r24, Y+4	; 0x04
 db2:	9d 81       	ldd	r25, Y+5	; 0x05
 db4:	28 17       	cp	r18, r24
 db6:	39 07       	cpc	r19, r25
 db8:	64 f4       	brge	.+24     	; 0xdd2 <fputc+0x42>
 dba:	e8 81       	ld	r30, Y
 dbc:	f9 81       	ldd	r31, Y+1	; 0x01
 dbe:	01 93       	st	Z+, r16
 dc0:	f9 83       	std	Y+1, r31	; 0x01
 dc2:	e8 83       	st	Y, r30
 dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <fputc+0x42>
 dc6:	e8 85       	ldd	r30, Y+8	; 0x08
 dc8:	f9 85       	ldd	r31, Y+9	; 0x09
 dca:	80 2f       	mov	r24, r16
 dcc:	09 95       	icall
 dce:	89 2b       	or	r24, r25
 dd0:	41 f7       	brne	.-48     	; 0xda2 <fputc+0x12>
 dd2:	8e 81       	ldd	r24, Y+6	; 0x06
 dd4:	9f 81       	ldd	r25, Y+7	; 0x07
 dd6:	01 96       	adiw	r24, 0x01	; 1
 dd8:	9f 83       	std	Y+7, r25	; 0x07
 dda:	8e 83       	std	Y+6, r24	; 0x06
 ddc:	c8 01       	movw	r24, r16
 dde:	df 91       	pop	r29
 de0:	cf 91       	pop	r28
 de2:	1f 91       	pop	r17
 de4:	0f 91       	pop	r16
 de6:	08 95       	ret

00000de8 <__ultoa_invert>:
 de8:	fa 01       	movw	r30, r20
 dea:	aa 27       	eor	r26, r26
 dec:	28 30       	cpi	r18, 0x08	; 8
 dee:	51 f1       	breq	.+84     	; 0xe44 <__ultoa_invert+0x5c>
 df0:	20 31       	cpi	r18, 0x10	; 16
 df2:	81 f1       	breq	.+96     	; 0xe54 <__ultoa_invert+0x6c>
 df4:	e8 94       	clt
 df6:	6f 93       	push	r22
 df8:	6e 7f       	andi	r22, 0xFE	; 254
 dfa:	6e 5f       	subi	r22, 0xFE	; 254
 dfc:	7f 4f       	sbci	r23, 0xFF	; 255
 dfe:	8f 4f       	sbci	r24, 0xFF	; 255
 e00:	9f 4f       	sbci	r25, 0xFF	; 255
 e02:	af 4f       	sbci	r26, 0xFF	; 255
 e04:	b1 e0       	ldi	r27, 0x01	; 1
 e06:	3e d0       	rcall	.+124    	; 0xe84 <__ultoa_invert+0x9c>
 e08:	b4 e0       	ldi	r27, 0x04	; 4
 e0a:	3c d0       	rcall	.+120    	; 0xe84 <__ultoa_invert+0x9c>
 e0c:	67 0f       	add	r22, r23
 e0e:	78 1f       	adc	r23, r24
 e10:	89 1f       	adc	r24, r25
 e12:	9a 1f       	adc	r25, r26
 e14:	a1 1d       	adc	r26, r1
 e16:	68 0f       	add	r22, r24
 e18:	79 1f       	adc	r23, r25
 e1a:	8a 1f       	adc	r24, r26
 e1c:	91 1d       	adc	r25, r1
 e1e:	a1 1d       	adc	r26, r1
 e20:	6a 0f       	add	r22, r26
 e22:	71 1d       	adc	r23, r1
 e24:	81 1d       	adc	r24, r1
 e26:	91 1d       	adc	r25, r1
 e28:	a1 1d       	adc	r26, r1
 e2a:	20 d0       	rcall	.+64     	; 0xe6c <__ultoa_invert+0x84>
 e2c:	09 f4       	brne	.+2      	; 0xe30 <__ultoa_invert+0x48>
 e2e:	68 94       	set
 e30:	3f 91       	pop	r19
 e32:	2a e0       	ldi	r18, 0x0A	; 10
 e34:	26 9f       	mul	r18, r22
 e36:	11 24       	eor	r1, r1
 e38:	30 19       	sub	r19, r0
 e3a:	30 5d       	subi	r19, 0xD0	; 208
 e3c:	31 93       	st	Z+, r19
 e3e:	de f6       	brtc	.-74     	; 0xdf6 <__ultoa_invert+0xe>
 e40:	cf 01       	movw	r24, r30
 e42:	08 95       	ret
 e44:	46 2f       	mov	r20, r22
 e46:	47 70       	andi	r20, 0x07	; 7
 e48:	40 5d       	subi	r20, 0xD0	; 208
 e4a:	41 93       	st	Z+, r20
 e4c:	b3 e0       	ldi	r27, 0x03	; 3
 e4e:	0f d0       	rcall	.+30     	; 0xe6e <__ultoa_invert+0x86>
 e50:	c9 f7       	brne	.-14     	; 0xe44 <__ultoa_invert+0x5c>
 e52:	f6 cf       	rjmp	.-20     	; 0xe40 <__ultoa_invert+0x58>
 e54:	46 2f       	mov	r20, r22
 e56:	4f 70       	andi	r20, 0x0F	; 15
 e58:	40 5d       	subi	r20, 0xD0	; 208
 e5a:	4a 33       	cpi	r20, 0x3A	; 58
 e5c:	18 f0       	brcs	.+6      	; 0xe64 <__ultoa_invert+0x7c>
 e5e:	49 5d       	subi	r20, 0xD9	; 217
 e60:	31 fd       	sbrc	r19, 1
 e62:	40 52       	subi	r20, 0x20	; 32
 e64:	41 93       	st	Z+, r20
 e66:	02 d0       	rcall	.+4      	; 0xe6c <__ultoa_invert+0x84>
 e68:	a9 f7       	brne	.-22     	; 0xe54 <__ultoa_invert+0x6c>
 e6a:	ea cf       	rjmp	.-44     	; 0xe40 <__ultoa_invert+0x58>
 e6c:	b4 e0       	ldi	r27, 0x04	; 4
 e6e:	a6 95       	lsr	r26
 e70:	97 95       	ror	r25
 e72:	87 95       	ror	r24
 e74:	77 95       	ror	r23
 e76:	67 95       	ror	r22
 e78:	ba 95       	dec	r27
 e7a:	c9 f7       	brne	.-14     	; 0xe6e <__ultoa_invert+0x86>
 e7c:	00 97       	sbiw	r24, 0x00	; 0
 e7e:	61 05       	cpc	r22, r1
 e80:	71 05       	cpc	r23, r1
 e82:	08 95       	ret
 e84:	9b 01       	movw	r18, r22
 e86:	ac 01       	movw	r20, r24
 e88:	0a 2e       	mov	r0, r26
 e8a:	06 94       	lsr	r0
 e8c:	57 95       	ror	r21
 e8e:	47 95       	ror	r20
 e90:	37 95       	ror	r19
 e92:	27 95       	ror	r18
 e94:	ba 95       	dec	r27
 e96:	c9 f7       	brne	.-14     	; 0xe8a <__ultoa_invert+0xa2>
 e98:	62 0f       	add	r22, r18
 e9a:	73 1f       	adc	r23, r19
 e9c:	84 1f       	adc	r24, r20
 e9e:	95 1f       	adc	r25, r21
 ea0:	a0 1d       	adc	r26, r0
 ea2:	08 95       	ret

00000ea4 <_exit>:
 ea4:	f8 94       	cli

00000ea6 <__stop_program>:
 ea6:	ff cf       	rjmp	.-2      	; 0xea6 <__stop_program>
