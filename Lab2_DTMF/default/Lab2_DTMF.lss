
Lab2_DTMF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a0  00800100  00000fce  00001062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  008003a0  008003a0  00001302  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002186  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  000021b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017fe  00000000  00000000  000022b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b39  00000000  00000000  00003ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bf0  00000000  00000000  000045ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002b4  00000000  00000000  000051dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000051b  00000000  00000000  00005490  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ccb  00000000  00000000  000059ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  00006676  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 3a       	cpi	r26, 0xA0	; 160
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	a0 ea       	ldi	r26, 0xA0	; 160
  b6:	b3 e0       	ldi	r27, 0x03	; 3
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 33       	cpi	r26, 0x39	; 57
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <main>
  c6:	0c 94 e5 07 	jmp	0xfca	; 0xfca <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <task1>:
*/

 
//******************************* 
//Task 1  
void task1(void) {
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
	time1=0;  //reset the task timer
  d6:	10 92 0f 04 	sts	0x040F, r1
  da:	10 92 0e 04 	sts	0x040E, r1

	//get lower nibble
	PORTDIR = 0x0f;
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	81 b9       	out	0x01, r24	; 1
	PORTDATA = 0xf0; 
  e2:	90 ef       	ldi	r25, 0xF0	; 240
  e4:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2a e1       	ldi	r18, 0x1A	; 26
  e8:	2a 95       	dec	r18
  ea:	f1 f7       	brne	.-4      	; 0xe8 <task1+0x1a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <task1+0x20>
	_delay_us(5);
	key = PORTIN;
  ee:	20 b1       	in	r18, 0x00	; 0
  f0:	20 93 12 04 	sts	0x0412, r18
  
	//get upper nibble
	PORTDIR = 0xf0;
  f4:	91 b9       	out	0x01, r25	; 1
	PORTDATA = 0x0f; 
  f6:	82 b9       	out	0x02, r24	; 2
  f8:	8a e1       	ldi	r24, 0x1A	; 26
  fa:	8a 95       	dec	r24
  fc:	f1 f7       	brne	.-4      	; 0xfa <task1+0x2c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <task1+0x32>
	_delay_us(5);
	key = key | PORTIN;
 100:	90 b1       	in	r25, 0x00	; 0
 102:	80 91 12 04 	lds	r24, 0x0412
 106:	98 2b       	or	r25, r24
 108:	90 93 12 04 	sts	0x0412, r25
  
	//find matching keycode in keytbl
	if (key != 0xff) {
 10c:	9f 3f       	cpi	r25, 0xFF	; 255
 10e:	a9 f0       	breq	.+42     	; 0x13a <task1+0x6c>
	  for (butnum=0; butnum<maxkeys; butnum++) {   
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0a c0       	rjmp	.+20     	; 0x128 <task1+0x5a>
 114:	28 2f       	mov	r18, r24
 116:	2f 5f       	subi	r18, 0xFF	; 255
	  	if (keytbl[butnum]==key)  break;   
 118:	e8 2f       	mov	r30, r24
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	e2 5c       	subi	r30, 0xC2	; 194
 11e:	fe 4f       	sbci	r31, 0xFE	; 254
 120:	30 81       	ld	r19, Z
 122:	39 17       	cp	r19, r25
 124:	31 f0       	breq	.+12     	; 0x132 <task1+0x64>
 126:	82 2f       	mov	r24, r18
	_delay_us(5);
	key = key | PORTIN;
  
	//find matching keycode in keytbl
	if (key != 0xff) {
	  for (butnum=0; butnum<maxkeys; butnum++) {   
 128:	8c 30       	cpi	r24, 0x0C	; 12
 12a:	a0 f3       	brcs	.-24     	; 0x114 <task1+0x46>
	  	if (keytbl[butnum]==key)  break;   
	  }

	  if (butnum==maxkeys) butnum=0;
 12c:	8c 30       	cpi	r24, 0x0C	; 12
 12e:	09 f4       	brne	.+2      	; 0x132 <task1+0x64>
 130:	04 c0       	rjmp	.+8      	; 0x13a <task1+0x6c>
	  else butnum++;	   //adjust by one to make range 1-16
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 0a 04 	sts	0x040A, r24
 138:	02 c0       	rjmp	.+4      	; 0x13e <task1+0x70>
	}
	else butnum=0;
 13a:	10 92 0a 04 	sts	0x040A, r1
	
	// Switching in the finite state machine.
	switch (PushState) {
 13e:	80 91 15 04 	lds	r24, 0x0415
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	91 f0       	breq	.+36     	; 0x16a <task1+0x9c>
 146:	20 f4       	brcc	.+8      	; 0x150 <task1+0x82>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	09 f0       	breq	.+2      	; 0x14e <task1+0x80>
 14c:	77 c0       	rjmp	.+238    	; 0x23c <task1+0x16e>
 14e:	06 c0       	rjmp	.+12     	; 0x15c <task1+0x8e>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	d1 f0       	breq	.+52     	; 0x188 <task1+0xba>
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	09 f0       	breq	.+2      	; 0x15a <task1+0x8c>
 158:	71 c0       	rjmp	.+226    	; 0x23c <task1+0x16e>
 15a:	63 c0       	rjmp	.+198    	; 0x222 <task1+0x154>
     case NoPush: 
        if (butnum != 0) PushState=MaybePush;
 15c:	80 91 0a 04 	lds	r24, 0x040A
 160:	88 23       	and	r24, r24
 162:	09 f4       	brne	.+2      	; 0x166 <task1+0x98>
 164:	6b c0       	rjmp	.+214    	; 0x23c <task1+0x16e>
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	61 c0       	rjmp	.+194    	; 0x22c <task1+0x15e>
        else PushState=NoPush;
        break;
     case MaybePush:
        if (butnum != 0) {
 16a:	80 91 0a 04 	lds	r24, 0x040A
 16e:	88 23       	and	r24, r24
 170:	49 f0       	breq	.+18     	; 0x184 <task1+0xb6>
           	PushState=Pushed; 
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	80 93 15 04 	sts	0x0415, r24
			PushFlag=1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 0b 04 	sts	0x040B, r24
			//Test mode override
			if (~PINB & 0x01) {
 17e:	18 99       	sbic	0x03, 0	; 3
 180:	5d c0       	rjmp	.+186    	; 0x23c <task1+0x16e>
 182:	5a c0       	rjmp	.+180    	; 0x238 <task1+0x16a>
		 		PushFlag=0;			
		   	}  
        }
        else PushState=NoPush;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	52 c0       	rjmp	.+164    	; 0x22c <task1+0x15e>
        break;
     case Pushed:  
        if (butnum != 0) {
 188:	80 91 0a 04 	lds	r24, 0x040A
 18c:	88 23       	and	r24, r24
 18e:	09 f4       	brne	.+2      	; 0x192 <task1+0xc4>
 190:	46 c0       	rjmp	.+140    	; 0x21e <task1+0x150>
			PushState=Pushed;
			//Test mode override
			if (~PINB & 0x01) {
 192:	18 99       	sbic	0x03, 0	; 3
 194:	53 c0       	rjmp	.+166    	; 0x23c <task1+0x16e>
		 		switch (butnum) {
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	21 f1       	breq	.+72     	; 0x1e2 <task1+0x114>
 19a:	38 f4       	brcc	.+14     	; 0x1aa <task1+0xdc>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	99 f0       	breq	.+38     	; 0x1c6 <task1+0xf8>
 1a0:	c8 f4       	brcc	.+50     	; 0x1d4 <task1+0x106>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <task1+0xda>
 1a6:	4a c0       	rjmp	.+148    	; 0x23c <task1+0x16e>
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <task1+0xea>
 1aa:	86 30       	cpi	r24, 0x06	; 6
 1ac:	41 f1       	breq	.+80     	; 0x1fe <task1+0x130>
 1ae:	00 f1       	brcs	.+64     	; 0x1f0 <task1+0x122>
 1b0:	87 30       	cpi	r24, 0x07	; 7
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <task1+0xe8>
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <task1+0x16e>
 1b6:	2a c0       	rjmp	.+84     	; 0x20c <task1+0x13e>
					case 1: 
						play(697, 0, 100);
 1b8:	44 e6       	ldi	r20, 0x64	; 100
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	89 eb       	ldi	r24, 0xB9	; 185
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	29 c0       	rjmp	.+82     	; 0x218 <task1+0x14a>
						break;
					case 2: 
						play(770, 0, 100);
 1c6:	44 e6       	ldi	r20, 0x64	; 100
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	93 e0       	ldi	r25, 0x03	; 3
 1d2:	22 c0       	rjmp	.+68     	; 0x218 <task1+0x14a>
						break;
					case 3: 
						play(852, 0, 100);
 1d4:	44 e6       	ldi	r20, 0x64	; 100
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	84 e5       	ldi	r24, 0x54	; 84
 1de:	93 e0       	ldi	r25, 0x03	; 3
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <task1+0x14a>
						break;
					case 4: 
						play(941, 0, 100);
 1e2:	44 e6       	ldi	r20, 0x64	; 100
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	8d ea       	ldi	r24, 0xAD	; 173
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	14 c0       	rjmp	.+40     	; 0x218 <task1+0x14a>
						break;
					case 5:
						play(1209, 0, 100);
 1f0:	44 e6       	ldi	r20, 0x64	; 100
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	89 eb       	ldi	r24, 0xB9	; 185
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <task1+0x14a>
						break;
					case 6:
						play(1336, 0, 100);
 1fe:	44 e6       	ldi	r20, 0x64	; 100
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	88 e3       	ldi	r24, 0x38	; 56
 208:	95 e0       	ldi	r25, 0x05	; 5
 20a:	06 c0       	rjmp	.+12     	; 0x218 <task1+0x14a>
						break;
					case 7: 
						play(1477, 0, 100);
 20c:	44 e6       	ldi	r20, 0x64	; 100
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	85 ec       	ldi	r24, 0xC5	; 197
 216:	95 e0       	ldi	r25, 0x05	; 5
 218:	0e 94 30 04 	call	0x860	; 0x860 <play>
						break;
 21c:	0f c0       	rjmp	.+30     	; 0x23c <task1+0x16e>
					default:
						break;
				}	
		   	}  
		}
        else PushState=MaybeNoPush;    
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	05 c0       	rjmp	.+10     	; 0x22c <task1+0x15e>
        break;
     case MaybeNoPush:
        if (butnum != 0) PushState=Pushed; 
 222:	80 91 0a 04 	lds	r24, 0x040A
 226:	88 23       	and	r24, r24
 228:	21 f0       	breq	.+8      	; 0x232 <task1+0x164>
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	80 93 15 04 	sts	0x0415, r24
 230:	05 c0       	rjmp	.+10     	; 0x23c <task1+0x16e>
        else {
           PushState=NoPush;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 15 04 	sts	0x0415, r24
           PushFlag=0;
 238:	10 92 0b 04 	sts	0x040B, r1
        }    
        break;
  	}

	if (PushFlag) {
 23c:	80 91 0b 04 	lds	r24, 0x040B
 240:	88 23       	and	r24, r24
 242:	09 f4       	brne	.+2      	; 0x246 <task1+0x178>
 244:	87 c0       	rjmp	.+270    	; 0x354 <task1+0x286>
		PushFlag = 0;
 246:	10 92 0b 04 	sts	0x040B, r1
		// The * button was pressed. Clear all memory.
		if (butnum == 10) {
 24a:	80 91 0a 04 	lds	r24, 0x040A
 24e:	8a 30       	cpi	r24, 0x0A	; 10
 250:	89 f4       	brne	.+34     	; 0x274 <task1+0x1a6>
 252:	e0 ea       	ldi	r30, 0xA0	; 160
 254:	f3 e0       	ldi	r31, 0x03	; 3
			for (int i = 0; i < 12; i++) {
				mem[i] = 0;
 256:	11 92       	st	Z+, r1
 258:	11 92       	st	Z+, r1

	if (PushFlag) {
		PushFlag = 0;
		// The * button was pressed. Clear all memory.
		if (butnum == 10) {
			for (int i = 0; i < 12; i++) {
 25a:	23 e0       	ldi	r18, 0x03	; 3
 25c:	e8 3b       	cpi	r30, 0xB8	; 184
 25e:	f2 07       	cpc	r31, r18
 260:	d1 f7       	brne	.-12     	; 0x256 <task1+0x188>
				mem[i] = 0;
			}
			mem_index = 0;
 262:	10 92 14 04 	sts	0x0414, r1
 266:	10 92 13 04 	sts	0x0413, r1
 26a:	c0 ea       	ldi	r28, 0xA0	; 160
 26c:	d3 e0       	ldi	r29, 0x03	; 3
				play(high_freq[butnum], low_freq[butnum], 1000);
			}		
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
			fprintf(stdout, "%d ", mem[i]);
 26e:	06 e8       	ldi	r16, 0x86	; 134
 270:	13 e0       	ldi	r17, 0x03	; 3
 272:	4b c0       	rjmp	.+150    	; 0x30a <task1+0x23c>
				mem[i] = 0;
			}
			mem_index = 0;
		}
		// The # button was pressed. Play all sounds in memory.
		else if (butnum == 12) {
 274:	8c 30       	cpi	r24, 0x0C	; 12
 276:	19 f5       	brne	.+70     	; 0x2be <task1+0x1f0>
 278:	c0 ea       	ldi	r28, 0xA0	; 160
 27a:	d3 e0       	ldi	r29, 0x03	; 3
			for (int i = 0; i < 12; i++) {
				if (mem[i] != 0) {
 27c:	89 91       	ld	r24, Y+
 27e:	99 91       	ld	r25, Y+
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	c1 f0       	breq	.+48     	; 0x2b4 <task1+0x1e6>
					//fprintf(stdout, "%u\n\r", mem[i]);
					play(high_freq[mem[i]], low_freq[mem[i]], 1000);
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	fc 01       	movw	r30, r24
 28a:	e2 5f       	subi	r30, 0xF2	; 242
 28c:	fe 4f       	sbci	r31, 0xFE	; 254
 28e:	60 81       	ld	r22, Z
 290:	71 81       	ldd	r23, Z+1	; 0x01
 292:	fc 01       	movw	r30, r24
 294:	ea 5d       	subi	r30, 0xDA	; 218
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	48 ee       	ldi	r20, 0xE8	; 232
 29a:	53 e0       	ldi	r21, 0x03	; 3
 29c:	80 81       	ld	r24, Z
 29e:	91 81       	ldd	r25, Z+1	; 0x01
 2a0:	0e 94 30 04 	call	0x860	; 0x860 <play>
					play(0, 0, 30);
 2a4:	4e e1       	ldi	r20, 0x1E	; 30
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 30 04 	call	0x860	; 0x860 <play>
			}
			mem_index = 0;
		}
		// The # button was pressed. Play all sounds in memory.
		else if (butnum == 12) {
			for (int i = 0; i < 12; i++) {
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	c8 3b       	cpi	r28, 0xB8	; 184
 2b8:	d8 07       	cpc	r29, r24
 2ba:	01 f7       	brne	.-64     	; 0x27c <task1+0x1ae>
 2bc:	d6 cf       	rjmp	.-84     	; 0x26a <task1+0x19c>
				}
			}
		}
		// A normal button press. 
		else {
			if (mem_index < 12) {
 2be:	20 91 13 04 	lds	r18, 0x0413
 2c2:	30 91 14 04 	lds	r19, 0x0414
 2c6:	2c 30       	cpi	r18, 0x0C	; 12
 2c8:	31 05       	cpc	r19, r1
 2ca:	78 f6       	brcc	.-98     	; 0x26a <task1+0x19c>
				mem[mem_index] = butnum;
 2cc:	f9 01       	movw	r30, r18
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	e0 56       	subi	r30, 0x60	; 96
 2d4:	fc 4f       	sbci	r31, 0xFC	; 252
 2d6:	80 83       	st	Z, r24
 2d8:	11 82       	std	Z+1, r1	; 0x01
				mem_index++;
 2da:	2f 5f       	subi	r18, 0xFF	; 255
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	30 93 14 04 	sts	0x0414, r19
 2e2:	20 93 13 04 	sts	0x0413, r18
				play(high_freq[butnum], low_freq[butnum], 1000);
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	fc 01       	movw	r30, r24
 2ee:	e2 5f       	subi	r30, 0xF2	; 242
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	60 81       	ld	r22, Z
 2f4:	71 81       	ldd	r23, Z+1	; 0x01
 2f6:	fc 01       	movw	r30, r24
 2f8:	ea 5d       	subi	r30, 0xDA	; 218
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	48 ee       	ldi	r20, 0xE8	; 232
 2fe:	53 e0       	ldi	r21, 0x03	; 3
 300:	80 81       	ld	r24, Z
 302:	91 81       	ldd	r25, Z+1	; 0x01
 304:	0e 94 30 04 	call	0x860	; 0x860 <play>
 308:	b0 cf       	rjmp	.-160    	; 0x26a <task1+0x19c>
			}		
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
			fprintf(stdout, "%d ", mem[i]);
 30a:	88 81       	ld	r24, Y
 30c:	99 81       	ldd	r25, Y+1	; 0x01
 30e:	22 96       	adiw	r28, 0x02	; 2
 310:	9f 93       	push	r25
 312:	8f 93       	push	r24
 314:	1f 93       	push	r17
 316:	0f 93       	push	r16
 318:	80 91 36 04 	lds	r24, 0x0436
 31c:	8f 93       	push	r24
 31e:	80 91 35 04 	lds	r24, 0x0435
 322:	8f 93       	push	r24
 324:	0e 94 05 05 	call	0xa0a	; 0xa0a <fprintf>
				mem_index++;
				play(high_freq[butnum], low_freq[butnum], 1000);
			}		
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	23 e0       	ldi	r18, 0x03	; 3
 336:	c8 3b       	cpi	r28, 0xB8	; 184
 338:	d2 07       	cpc	r29, r18
 33a:	39 f7       	brne	.-50     	; 0x30a <task1+0x23c>
			fprintf(stdout, "%d ", mem[i]);
		}
		fprintf(stdout, "\n\r");
 33c:	60 91 35 04 	lds	r22, 0x0435
 340:	70 91 36 04 	lds	r23, 0x0436
 344:	85 e9       	ldi	r24, 0x95	; 149
 346:	93 e0       	ldi	r25, 0x03	; 3
	}
} 
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
			fprintf(stdout, "%d ", mem[i]);
		}
		fprintf(stdout, "\n\r");
 350:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <fputs>
	}
} 
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	08 95       	ret

0000035e <initialize>:
 
//Initialization used for the timer interrupts for debouncing
void initialize(void) {
	//set up timer 0 for 1 mSec timebase 
	OCR0A = 249;  		//set the compare re to 250 time ticks
 35e:	89 ef       	ldi	r24, 0xF9	; 249
 360:	87 bd       	out	0x27, r24	; 39
	TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	80 93 6e 00 	sts	0x006E, r24
	//set prescalar to divide by 64 
	TCCR0B= 3; //0b00000011;	
 368:	93 e0       	ldi	r25, 0x03	; 3
 36a:	95 bd       	out	0x25, r25	; 37
	// turn on clear-on-match
	TCCR0A= (1<<WGM01) ;
 36c:	84 bd       	out	0x24, r24	; 36

	//init the task timers
	time1=0;  
 36e:	10 92 0f 04 	sts	0x040F, r1
 372:	10 92 0e 04 	sts	0x040E, r1
	// PORT B is an input
	DDRB = 0x00;
 376:	14 b8       	out	0x04, r1	; 4
	//for no button push
	PushFlag = 0;
 378:	10 92 0b 04 	sts	0x040B, r1
	//init the state machine
	PushState = NoPush;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	80 93 15 04 	sts	0x0415, r24

	mem_index = 0;
 382:	10 92 14 04 	sts	0x0414, r1
 386:	10 92 13 04 	sts	0x0413, r1

	init_dtmf();
 38a:	0e 94 19 04 	call	0x832	; 0x832 <init_dtmf>
	//crank up the ISRs
	sei() ;
 38e:	78 94       	sei
 390:	08 95       	ret

00000392 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 392:	87 e6       	ldi	r24, 0x67	; 103
 394:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 398:	88 e1       	ldi	r24, 0x18	; 24
 39a:	80 93 c1 00 	sts	0x00C1, r24
 39e:	08 95       	ret

000003a0 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 3a0:	cf 93       	push	r28
 3a2:	c8 2f       	mov	r28, r24

  if (c == '\a')
 3a4:	87 30       	cpi	r24, 0x07	; 7
 3a6:	49 f4       	brne	.+18     	; 0x3ba <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
 3a8:	60 91 37 04 	lds	r22, 0x0437
 3ac:	70 91 38 04 	lds	r23, 0x0438
 3b0:	88 e9       	ldi	r24, 0x98	; 152
 3b2:	93 e0       	ldi	r25, 0x03	; 3
 3b4:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputs>
 3b8:	0b c0       	rjmp	.+22     	; 0x3d0 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
 3ba:	8a 30       	cpi	r24, 0x0A	; 10
 3bc:	19 f4       	brne	.+6      	; 0x3c4 <uart_putchar+0x24>
    uart_putchar('\r', stream);
 3be:	8d e0       	ldi	r24, 0x0D	; 13
 3c0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 3c4:	80 91 c0 00 	lds	r24, 0x00C0
 3c8:	85 ff       	sbrs	r24, 5
 3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <uart_putchar+0x24>
  UDR0 = c;
 3cc:	c0 93 c6 00 	sts	0x00C6, r28

  return 0;
}
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 3d8:	ef 92       	push	r14
 3da:	ff 92       	push	r15
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	8c 01       	movw	r16, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 3e6:	80 91 b8 03 	lds	r24, 0x03B8
 3ea:	90 91 b9 03 	lds	r25, 0x03B9
 3ee:	89 2b       	or	r24, r25
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <uart_getchar+0x1c>
 3f2:	a1 c0       	rjmp	.+322    	; 0x536 <uart_getchar+0x15e>
 3f4:	ca eb       	ldi	r28, 0xBA	; 186
 3f6:	d3 e0       	ldi	r29, 0x03	; 3
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 3f8:	80 91 c0 00 	lds	r24, 0x00C0
 3fc:	87 ff       	sbrs	r24, 7
 3fe:	fc cf       	rjmp	.-8      	; 0x3f8 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
 400:	80 91 c0 00 	lds	r24, 0x00C0
 404:	84 fd       	sbrc	r24, 4
 406:	aa c0       	rjmp	.+340    	; 0x55c <uart_getchar+0x184>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 408:	80 91 c0 00 	lds	r24, 0x00C0
 40c:	83 fd       	sbrc	r24, 3
 40e:	a9 c0       	rjmp	.+338    	; 0x562 <uart_getchar+0x18a>
	  return _FDEV_ERR;
	c = UDR0;
 410:	80 91 c6 00 	lds	r24, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 414:	8d 30       	cpi	r24, 0x0D	; 13
 416:	61 f4       	brne	.+24     	; 0x430 <uart_getchar+0x58>
	  c = '\n';
	if (c == '\n')
	  {
	    *cp = c;
 418:	8a e0       	ldi	r24, 0x0A	; 10
 41a:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
 41c:	b8 01       	movw	r22, r16
 41e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
	    rxp = b;
 422:	8a eb       	ldi	r24, 0xBA	; 186
 424:	93 e0       	ldi	r25, 0x03	; 3
 426:	90 93 b9 03 	sts	0x03B9, r25
 42a:	80 93 b8 03 	sts	0x03B8, r24
	    break;
 42e:	83 c0       	rjmp	.+262    	; 0x536 <uart_getchar+0x15e>
	  return _FDEV_ERR;
	c = UDR0;
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
	  c = '\n';
	if (c == '\n')
 430:	8a 30       	cpi	r24, 0x0A	; 10
 432:	91 f3       	breq	.-28     	; 0x418 <uart_getchar+0x40>
	    *cp = c;
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
 434:	89 30       	cpi	r24, 0x09	; 9
 436:	09 f4       	brne	.+2      	; 0x43a <uart_getchar+0x62>
	  c = ' ';
 438:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 43a:	98 2f       	mov	r25, r24
 43c:	90 52       	subi	r25, 0x20	; 32
 43e:	9f 35       	cpi	r25, 0x5F	; 95
 440:	10 f0       	brcs	.+4      	; 0x446 <uart_getchar+0x6e>
 442:	80 3a       	cpi	r24, 0xA0	; 160
 444:	90 f0       	brcs	.+36     	; 0x46a <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 446:	94 e0       	ldi	r25, 0x04	; 4
 448:	c9 30       	cpi	r28, 0x09	; 9
 44a:	d9 07       	cpc	r29, r25
 44c:	49 f4       	brne	.+18     	; 0x460 <uart_getchar+0x88>
uart_putchar(char c, FILE *stream)
{

  if (c == '\a')
    {
      fputs("*ring*\n", stderr);
 44e:	60 91 37 04 	lds	r22, 0x0437
 452:	70 91 38 04 	lds	r23, 0x0438
 456:	88 e9       	ldi	r24, 0x98	; 152
 458:	93 e0       	ldi	r25, 0x03	; 3
 45a:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputs>
 45e:	cc cf       	rjmp	.-104    	; 0x3f8 <uart_getchar+0x20>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 460:	89 93       	st	Y+, r24
		uart_putchar(c, stream);
 462:	b8 01       	movw	r22, r16
 464:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
 468:	c7 cf       	rjmp	.-114    	; 0x3f8 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
 46a:	82 31       	cpi	r24, 0x12	; 18
 46c:	29 f1       	breq	.+74     	; 0x4b8 <uart_getchar+0xe0>
 46e:	38 f4       	brcc	.+14     	; 0x47e <uart_getchar+0xa6>
 470:	83 30       	cpi	r24, 0x03	; 3
 472:	09 f4       	brne	.+2      	; 0x476 <uart_getchar+0x9e>
 474:	76 c0       	rjmp	.+236    	; 0x562 <uart_getchar+0x18a>
 476:	88 30       	cpi	r24, 0x08	; 8
 478:	09 f0       	breq	.+2      	; 0x47c <uart_getchar+0xa4>
 47a:	be cf       	rjmp	.-132    	; 0x3f8 <uart_getchar+0x20>
 47c:	09 c0       	rjmp	.+18     	; 0x490 <uart_getchar+0xb8>
 47e:	87 31       	cpi	r24, 0x17	; 23
 480:	09 f4       	brne	.+2      	; 0x484 <uart_getchar+0xac>
 482:	4d c0       	rjmp	.+154    	; 0x51e <uart_getchar+0x146>
 484:	8f 37       	cpi	r24, 0x7F	; 127
 486:	21 f0       	breq	.+8      	; 0x490 <uart_getchar+0xb8>
 488:	85 31       	cpi	r24, 0x15	; 21
 48a:	09 f0       	breq	.+2      	; 0x48e <uart_getchar+0xb6>
 48c:	b5 cf       	rjmp	.-150    	; 0x3f8 <uart_getchar+0x20>
 48e:	34 c0       	rjmp	.+104    	; 0x4f8 <uart_getchar+0x120>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 490:	e3 e0       	ldi	r30, 0x03	; 3
 492:	ca 3b       	cpi	r28, 0xBA	; 186
 494:	de 07       	cpc	r29, r30
 496:	09 f0       	breq	.+2      	; 0x49a <uart_getchar+0xc2>
 498:	08 f4       	brcc	.+2      	; 0x49c <uart_getchar+0xc4>
 49a:	ae cf       	rjmp	.-164    	; 0x3f8 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
 49c:	b8 01       	movw	r22, r16
 49e:	88 e0       	ldi	r24, 0x08	; 8
 4a0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
		uart_putchar(' ', stream);
 4a4:	b8 01       	movw	r22, r16
 4a6:	80 e2       	ldi	r24, 0x20	; 32
 4a8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
		uart_putchar('\b', stream);
 4ac:	b8 01       	movw	r22, r16
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
		cp--;
 4b4:	21 97       	sbiw	r28, 0x01	; 1
 4b6:	a0 cf       	rjmp	.-192    	; 0x3f8 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 4b8:	b8 01       	movw	r22, r16
 4ba:	8d e0       	ldi	r24, 0x0D	; 13
 4bc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 4c0:	8a eb       	ldi	r24, 0xBA	; 186
 4c2:	e8 2e       	mov	r14, r24
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	f8 2e       	mov	r15, r24
 4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <uart_getchar+0xfe>
	      uart_putchar(*cp2, stream);
 4ca:	b8 01       	movw	r22, r16
 4cc:	f7 01       	movw	r30, r14
 4ce:	81 91       	ld	r24, Z+
 4d0:	7f 01       	movw	r14, r30
 4d2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 4d6:	ec 16       	cp	r14, r28
 4d8:	fd 06       	cpc	r15, r29
 4da:	b8 f3       	brcs	.-18     	; 0x4ca <uart_getchar+0xf2>
 4dc:	8d cf       	rjmp	.-230    	; 0x3f8 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 4de:	b8 01       	movw	r22, r16
 4e0:	88 e0       	ldi	r24, 0x08	; 8
 4e2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
		uart_putchar(' ', stream);
 4e6:	b8 01       	movw	r22, r16
 4e8:	80 e2       	ldi	r24, 0x20	; 32
 4ea:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
		uart_putchar('\b', stream);
 4ee:	b8 01       	movw	r22, r16
 4f0:	88 e0       	ldi	r24, 0x08	; 8
 4f2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
		cp--;
 4f6:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 4f8:	f3 e0       	ldi	r31, 0x03	; 3
 4fa:	ca 3b       	cpi	r28, 0xBA	; 186
 4fc:	df 07       	cpc	r29, r31
 4fe:	09 f0       	breq	.+2      	; 0x502 <uart_getchar+0x12a>
 500:	70 f7       	brcc	.-36     	; 0x4de <uart_getchar+0x106>
 502:	7a cf       	rjmp	.-268    	; 0x3f8 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 504:	b8 01       	movw	r22, r16
 506:	88 e0       	ldi	r24, 0x08	; 8
 508:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
		uart_putchar(' ', stream);
 50c:	b8 01       	movw	r22, r16
 50e:	80 e2       	ldi	r24, 0x20	; 32
 510:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
		uart_putchar('\b', stream);
 514:	b8 01       	movw	r22, r16
 516:	88 e0       	ldi	r24, 0x08	; 8
 518:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_putchar>
		cp--;
 51c:	e7 01       	movw	r28, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	ca 3b       	cpi	r28, 0xBA	; 186
 522:	d8 07       	cpc	r29, r24
 524:	09 f0       	breq	.+2      	; 0x528 <uart_getchar+0x150>
 526:	08 f4       	brcc	.+2      	; 0x52a <uart_getchar+0x152>
 528:	67 cf       	rjmp	.-306    	; 0x3f8 <uart_getchar+0x20>
 52a:	fe 01       	movw	r30, r28
 52c:	82 91       	ld	r24, -Z
 52e:	7f 01       	movw	r14, r30
 530:	80 32       	cpi	r24, 0x20	; 32
 532:	41 f7       	brne	.-48     	; 0x504 <uart_getchar+0x12c>
 534:	61 cf       	rjmp	.-318    	; 0x3f8 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
 536:	e0 91 b8 03 	lds	r30, 0x03B8
 53a:	f0 91 b9 03 	lds	r31, 0x03B9
 53e:	20 81       	ld	r18, Z
  if (c == '\n')
 540:	2a 30       	cpi	r18, 0x0A	; 10
 542:	31 f0       	breq	.+12     	; 0x550 <uart_getchar+0x178>
	      }
	    break;
	  }
      }

  c = *rxp++;
 544:	31 96       	adiw	r30, 0x01	; 1
 546:	f0 93 b9 03 	sts	0x03B9, r31
 54a:	e0 93 b8 03 	sts	0x03B8, r30
 54e:	04 c0       	rjmp	.+8      	; 0x558 <uart_getchar+0x180>
  if (c == '\n')
    rxp = 0;
 550:	10 92 b9 03 	sts	0x03B9, r1
 554:	10 92 b8 03 	sts	0x03B8, r1

  return c;
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	05 c0       	rjmp	.+10     	; 0x566 <uart_getchar+0x18e>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 55c:	2e ef       	ldi	r18, 0xFE	; 254
 55e:	3f ef       	ldi	r19, 0xFF	; 255
 560:	02 c0       	rjmp	.+4      	; 0x566 <uart_getchar+0x18e>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 562:	2f ef       	ldi	r18, 0xFF	; 255
 564:	3f ef       	ldi	r19, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 566:	c9 01       	movw	r24, r18
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	ff 90       	pop	r15
 572:	ef 90       	pop	r14
 574:	08 95       	ret

00000576 <__vector_18>:
16 MHz 
------ = 62,500 Hz
 256 
 To generate a 1ms time base, 
*/
ISR( TIMER0_OVF_vect){
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	0b b6       	in	r0, 0x3b	; 59
 582:	0f 92       	push	r0
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31

	accumulator_a += increment_a;
 5a0:	80 91 1c 04 	lds	r24, 0x041C
 5a4:	90 91 1d 04 	lds	r25, 0x041D
 5a8:	a0 91 1e 04 	lds	r26, 0x041E
 5ac:	b0 91 1f 04 	lds	r27, 0x041F
 5b0:	40 91 17 04 	lds	r20, 0x0417
 5b4:	50 91 18 04 	lds	r21, 0x0418
 5b8:	60 91 19 04 	lds	r22, 0x0419
 5bc:	70 91 1a 04 	lds	r23, 0x041A
 5c0:	84 0f       	add	r24, r20
 5c2:	95 1f       	adc	r25, r21
 5c4:	a6 1f       	adc	r26, r22
 5c6:	b7 1f       	adc	r27, r23
 5c8:	80 93 1c 04 	sts	0x041C, r24
 5cc:	90 93 1d 04 	sts	0x041D, r25
 5d0:	a0 93 1e 04 	sts	0x041E, r26
 5d4:	b0 93 1f 04 	sts	0x041F, r27
	accumulator_b += increment_b;
 5d8:	80 91 24 04 	lds	r24, 0x0424
 5dc:	90 91 25 04 	lds	r25, 0x0425
 5e0:	a0 91 26 04 	lds	r26, 0x0426
 5e4:	b0 91 27 04 	lds	r27, 0x0427
 5e8:	40 91 2a 04 	lds	r20, 0x042A
 5ec:	50 91 2b 04 	lds	r21, 0x042B
 5f0:	60 91 2c 04 	lds	r22, 0x042C
 5f4:	70 91 2d 04 	lds	r23, 0x042D
 5f8:	84 0f       	add	r24, r20
 5fa:	95 1f       	adc	r25, r21
 5fc:	a6 1f       	adc	r26, r22
 5fe:	b7 1f       	adc	r27, r23
 600:	80 93 24 04 	sts	0x0424, r24
 604:	90 93 25 04 	sts	0x0425, r25
 608:	a0 93 26 04 	sts	0x0426, r26
 60c:	b0 93 27 04 	sts	0x0427, r27

	highbyte_a = accumulator_a >> 24;
 610:	80 91 1c 04 	lds	r24, 0x041C
 614:	90 91 1d 04 	lds	r25, 0x041D
 618:	a0 91 1e 04 	lds	r26, 0x041E
 61c:	b0 91 1f 04 	lds	r27, 0x041F
 620:	8b 2f       	mov	r24, r27
 622:	99 27       	eor	r25, r25
 624:	aa 27       	eor	r26, r26
 626:	bb 27       	eor	r27, r27
 628:	80 93 28 04 	sts	0x0428, r24
	highbyte_b = accumulator_b >> 24;
 62c:	80 91 24 04 	lds	r24, 0x0424
 630:	90 91 25 04 	lds	r25, 0x0425
 634:	a0 91 26 04 	lds	r26, 0x0426
 638:	b0 91 27 04 	lds	r27, 0x0427
 63c:	8b 2f       	mov	r24, r27
 63e:	99 27       	eor	r25, r25
 640:	aa 27       	eor	r26, r26
 642:	bb 27       	eor	r27, r27
 644:	80 93 2e 04 	sts	0x042E, r24

	OCR0A = 128 + 
	   ( (
	   	   (sineTable[highbyte_b] + sineTable[highbyte_a])
 648:	c0 91 2e 04 	lds	r28, 0x042E
 64c:	e0 91 28 04 	lds	r30, 0x0428
	   	                          * rampTable[rampCount]
 650:	80 91 20 04 	lds	r24, 0x0420
 654:	90 91 21 04 	lds	r25, 0x0421
 658:	a0 91 22 04 	lds	r26, 0x0422
 65c:	b0 91 23 04 	lds	r27, 0x0423
	highbyte_a = accumulator_a >> 24;
	highbyte_b = accumulator_b >> 24;

	OCR0A = 128 + 
	   ( (
	   	   (sineTable[highbyte_b] + sineTable[highbyte_a])
 660:	d0 e0       	ldi	r29, 0x00	; 0
 662:	ca 57       	subi	r28, 0x7A	; 122
 664:	dd 4f       	sbci	r29, 0xFD	; 253
 666:	48 81       	ld	r20, Y
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	ea 57       	subi	r30, 0x7A	; 122
 66c:	fd 4f       	sbci	r31, 0xFD	; 253
 66e:	20 81       	ld	r18, Z
 670:	33 27       	eor	r19, r19
 672:	27 fd       	sbrc	r18, 7
 674:	30 95       	com	r19
 676:	24 0f       	add	r18, r20
 678:	31 1d       	adc	r19, r1
 67a:	47 fd       	sbrc	r20, 7
 67c:	3a 95       	dec	r19
	   	                          * rampTable[rampCount]
 67e:	fc 01       	movw	r30, r24
 680:	e2 5b       	subi	r30, 0xB2	; 178
 682:	fe 4f       	sbci	r31, 0xFE	; 254
 684:	40 81       	ld	r20, Z
 686:	42 9f       	mul	r20, r18
 688:	c0 01       	movw	r24, r0
 68a:	43 9f       	mul	r20, r19
 68c:	90 0d       	add	r25, r0
 68e:	11 24       	eor	r1, r1
	accumulator_b += increment_b;

	highbyte_a = accumulator_a >> 24;
	highbyte_b = accumulator_b >> 24;

	OCR0A = 128 + 
 690:	89 2f       	mov	r24, r25
 692:	80 58       	subi	r24, 0x80	; 128
 694:	87 bd       	out	0x27, r24	; 39
	   	   (sineTable[highbyte_b] + sineTable[highbyte_a])
	   	                          * rampTable[rampCount]
	   	 ) >> 8
	   );

	sample++;
 696:	80 91 2f 04 	lds	r24, 0x042F
 69a:	90 91 30 04 	lds	r25, 0x0430
 69e:	a0 91 31 04 	lds	r26, 0x0431
 6a2:	b0 91 32 04 	lds	r27, 0x0432
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	a1 1d       	adc	r26, r1
 6aa:	b1 1d       	adc	r27, r1
 6ac:	80 93 2f 04 	sts	0x042F, r24
 6b0:	90 93 30 04 	sts	0x0430, r25
 6b4:	a0 93 31 04 	sts	0x0431, r26
 6b8:	b0 93 32 04 	sts	0x0432, r27

	//ramping up
	if( sample <= RAMPUPEND )
 6bc:	80 91 2f 04 	lds	r24, 0x042F
 6c0:	90 91 30 04 	lds	r25, 0x0430
 6c4:	a0 91 31 04 	lds	r26, 0x0431
 6c8:	b0 91 32 04 	lds	r27, 0x0432
 6cc:	89 33       	cpi	r24, 0x39	; 57
 6ce:	91 40       	sbci	r25, 0x01	; 1
 6d0:	a1 05       	cpc	r26, r1
 6d2:	b1 05       	cpc	r27, r1
 6d4:	98 f4       	brcc	.+38     	; 0x6fc <__vector_18+0x186>
		rampCount++;
 6d6:	80 91 20 04 	lds	r24, 0x0420
 6da:	90 91 21 04 	lds	r25, 0x0421
 6de:	a0 91 22 04 	lds	r26, 0x0422
 6e2:	b0 91 23 04 	lds	r27, 0x0423
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	a1 1d       	adc	r26, r1
 6ea:	b1 1d       	adc	r27, r1
 6ec:	80 93 20 04 	sts	0x0420, r24
 6f0:	90 93 21 04 	sts	0x0421, r25
 6f4:	a0 93 22 04 	sts	0x0422, r26
 6f8:	b0 93 23 04 	sts	0x0423, r27
	//holdsteady the max value 
	if( sample <= RAMPUPEND && sample <= RAMPDOWNSTART)
 6fc:	80 91 2f 04 	lds	r24, 0x042F
 700:	90 91 30 04 	lds	r25, 0x0430
 704:	a0 91 31 04 	lds	r26, 0x0431
 708:	b0 91 32 04 	lds	r27, 0x0432
 70c:	89 33       	cpi	r24, 0x39	; 57
 70e:	91 40       	sbci	r25, 0x01	; 1
 710:	a1 05       	cpc	r26, r1
 712:	b1 05       	cpc	r27, r1
 714:	c8 f4       	brcc	.+50     	; 0x748 <__vector_18+0x1d2>
 716:	80 91 2f 04 	lds	r24, 0x042F
 71a:	90 91 30 04 	lds	r25, 0x0430
 71e:	a0 91 31 04 	lds	r26, 0x0431
 722:	b0 91 32 04 	lds	r27, 0x0432
 726:	8c 3e       	cpi	r24, 0xEC	; 236
 728:	92 4f       	sbci	r25, 0xF2	; 242
 72a:	a1 05       	cpc	r26, r1
 72c:	b1 05       	cpc	r27, r1
 72e:	60 f4       	brcc	.+24     	; 0x748 <__vector_18+0x1d2>
		rampCount = RAMP_LENGTH - 1;
 730:	87 e3       	ldi	r24, 0x37	; 55
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	a0 e0       	ldi	r26, 0x00	; 0
 736:	b0 e0       	ldi	r27, 0x00	; 0
 738:	80 93 20 04 	sts	0x0420, r24
 73c:	90 93 21 04 	sts	0x0421, r25
 740:	a0 93 22 04 	sts	0x0422, r26
 744:	b0 93 23 04 	sts	0x0423, r27
	//begin rampdown
	if( sample > RAMPDOWNSTART && sample <= RAMPDOWNSTART)
 748:	80 91 2f 04 	lds	r24, 0x042F
 74c:	90 91 30 04 	lds	r25, 0x0430
 750:	a0 91 31 04 	lds	r26, 0x0431
 754:	b0 91 32 04 	lds	r27, 0x0432
 758:	8c 3e       	cpi	r24, 0xEC	; 236
 75a:	92 4f       	sbci	r25, 0xF2	; 242
 75c:	a1 05       	cpc	r26, r1
 75e:	b1 05       	cpc	r27, r1
 760:	00 f1       	brcs	.+64     	; 0x7a2 <__vector_18+0x22c>
 762:	80 91 2f 04 	lds	r24, 0x042F
 766:	90 91 30 04 	lds	r25, 0x0430
 76a:	a0 91 31 04 	lds	r26, 0x0431
 76e:	b0 91 32 04 	lds	r27, 0x0432
 772:	8c 3e       	cpi	r24, 0xEC	; 236
 774:	92 4f       	sbci	r25, 0xF2	; 242
 776:	a1 05       	cpc	r26, r1
 778:	b1 05       	cpc	r27, r1
 77a:	98 f4       	brcc	.+38     	; 0x7a2 <__vector_18+0x22c>
		rampCount--;
 77c:	80 91 20 04 	lds	r24, 0x0420
 780:	90 91 21 04 	lds	r25, 0x0421
 784:	a0 91 22 04 	lds	r26, 0x0422
 788:	b0 91 23 04 	lds	r27, 0x0423
 78c:	01 97       	sbiw	r24, 0x01	; 1
 78e:	a1 09       	sbc	r26, r1
 790:	b1 09       	sbc	r27, r1
 792:	80 93 20 04 	sts	0x0420, r24
 796:	90 93 21 04 	sts	0x0421, r25
 79a:	a0 93 22 04 	sts	0x0422, r26
 79e:	b0 93 23 04 	sts	0x0423, r27
	//finished ramping
	if(sample > RAMPDOWNEND)
 7a2:	80 91 2f 04 	lds	r24, 0x042F
 7a6:	90 91 30 04 	lds	r25, 0x0430
 7aa:	a0 91 31 04 	lds	r26, 0x0431
 7ae:	b0 91 32 04 	lds	r27, 0x0432
 7b2:	85 32       	cpi	r24, 0x25	; 37
 7b4:	94 4f       	sbci	r25, 0xF4	; 244
 7b6:	a1 05       	cpc	r26, r1
 7b8:	b1 05       	cpc	r27, r1
 7ba:	40 f0       	brcs	.+16     	; 0x7cc <__vector_18+0x256>
		rampCount = 0;
 7bc:	10 92 20 04 	sts	0x0420, r1
 7c0:	10 92 21 04 	sts	0x0421, r1
 7c4:	10 92 22 04 	sts	0x0422, r1
 7c8:	10 92 23 04 	sts	0x0423, r1

	//generates a 1 ms timebase
	count--;
 7cc:	80 91 29 04 	lds	r24, 0x0429
 7d0:	81 50       	subi	r24, 0x01	; 1
 7d2:	80 93 29 04 	sts	0x0429, r24
	if( count == 0){
 7d6:	80 91 29 04 	lds	r24, 0x0429
 7da:	81 11       	cpse	r24, r1
 7dc:	15 c0       	rjmp	.+42     	; 0x808 <__vector_18+0x292>
		count = COUNTMS;
 7de:	8e e3       	ldi	r24, 0x3E	; 62
 7e0:	80 93 29 04 	sts	0x0429, r24
		time++;
 7e4:	80 91 10 04 	lds	r24, 0x0410
 7e8:	90 91 11 04 	lds	r25, 0x0411
 7ec:	01 96       	adiw	r24, 0x01	; 1
 7ee:	90 93 11 04 	sts	0x0411, r25
 7f2:	80 93 10 04 	sts	0x0410, r24
		time1++;
 7f6:	80 91 0e 04 	lds	r24, 0x040E
 7fa:	90 91 0f 04 	lds	r25, 0x040F
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	90 93 0f 04 	sts	0x040F, r25
 804:	80 93 0e 04 	sts	0x040E, r24
	}

	
}
 808:	ff 91       	pop	r31
 80a:	ef 91       	pop	r30
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	bf 91       	pop	r27
 812:	af 91       	pop	r26
 814:	9f 91       	pop	r25
 816:	8f 91       	pop	r24
 818:	7f 91       	pop	r23
 81a:	6f 91       	pop	r22
 81c:	5f 91       	pop	r21
 81e:	4f 91       	pop	r20
 820:	3f 91       	pop	r19
 822:	2f 91       	pop	r18
 824:	0f 90       	pop	r0
 826:	0b be       	out	0x3b, r0	; 59
 828:	0f 90       	pop	r0
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	0f 90       	pop	r0
 82e:	1f 90       	pop	r1
 830:	18 95       	reti

00000832 <init_dtmf>:


void init_dtmf(){
	DDRB = 0;
 832:	14 b8       	out	0x04, r1	; 4
	DDRB |= OUTPUT_PIN;
 834:	23 9a       	sbi	0x04, 3	; 4

	time = 0;
 836:	10 92 11 04 	sts	0x0411, r1
 83a:	10 92 10 04 	sts	0x0410, r1

	TCCR0B = 0;
 83e:	15 bc       	out	0x25, r1	; 37
	//set divider to 1, run T0 at 16 MHz 
	TCCR0B |= T0_CS00;
 840:	85 b5       	in	r24, 0x25	; 37
 842:	81 60       	ori	r24, 0x01	; 1
 844:	85 bd       	out	0x25, r24	; 37

	TIMSK0 = 0;
 846:	ee e6       	ldi	r30, 0x6E	; 110
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	10 82       	st	Z, r1
	TIMSK0 |= TIMER0_OVERFLOW_INTERRUPT_ENABLE;
 84c:	80 81       	ld	r24, Z
 84e:	81 60       	ori	r24, 0x01	; 1
 850:	80 83       	st	Z, r24
	//turn on fast PWM and OC0A - output 
	TCCR0A = 0;
 852:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= WAVE_GEN_M00 + WAVE_GEN_M01 + COMPARE_MATCH_OUTPUT_A0 + COMPARE_MATCH_OUTPUT_A1; 
 854:	84 b5       	in	r24, 0x24	; 36
 856:	83 6c       	ori	r24, 0xC3	; 195
 858:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0;
 85a:	17 bc       	out	0x27, r1	; 39
	sei();
 85c:	78 94       	sei
 85e:	08 95       	ret

00000860 <play>:
}

//plays fA and fB for a duration of duration ms
void play(int fA, int fB, int duration){
	if( !is_playing ){
 860:	20 91 16 04 	lds	r18, 0x0416
 864:	21 11       	cpse	r18, r1
 866:	68 c0       	rjmp	.+208    	; 0x938 <play+0xd8>
		is_playing = TRUE;
 868:	21 e0       	ldi	r18, 0x01	; 1
 86a:	20 93 16 04 	sts	0x0416, r18
		switch( fA){
 86e:	88 33       	cpi	r24, 0x38	; 56
 870:	25 e0       	ldi	r18, 0x05	; 5
 872:	92 07       	cpc	r25, r18
 874:	61 f0       	breq	.+24     	; 0x88e <play+0x2e>
 876:	85 3c       	cpi	r24, 0xC5	; 197
 878:	25 e0       	ldi	r18, 0x05	; 5
 87a:	92 07       	cpc	r25, r18
 87c:	a9 f0       	breq	.+42     	; 0x8a8 <play+0x48>
 87e:	89 3b       	cpi	r24, 0xB9	; 185
 880:	94 40       	sbci	r25, 0x04	; 4
 882:	b9 f4       	brne	.+46     	; 0x8b2 <play+0x52>
			case 1209: increment_a = INCREMENT_1209; break;
 884:	87 e3       	ldi	r24, 0x37	; 55
 886:	98 eb       	ldi	r25, 0xB8	; 184
 888:	a3 ef       	ldi	r26, 0xF3	; 243
 88a:	b4 e0       	ldi	r27, 0x04	; 4
 88c:	04 c0       	rjmp	.+8      	; 0x896 <play+0x36>
			case 1336: increment_a = INCREMENT_1336; break;
 88e:	88 e4       	ldi	r24, 0x48	; 72
 890:	93 ee       	ldi	r25, 0xE3	; 227
 892:	a8 e7       	ldi	r26, 0x78	; 120
 894:	b5 e0       	ldi	r27, 0x05	; 5
 896:	80 93 17 04 	sts	0x0417, r24
 89a:	90 93 18 04 	sts	0x0418, r25
 89e:	a0 93 19 04 	sts	0x0419, r26
 8a2:	b0 93 1a 04 	sts	0x041A, r27
 8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <play+0x62>
			case 1477: increment_a = INCREMENT_1477; break;
 8a8:	8b e6       	ldi	r24, 0x6B	; 107
 8aa:	9c eb       	ldi	r25, 0xBC	; 188
 8ac:	ac e0       	ldi	r26, 0x0C	; 12
 8ae:	b6 e0       	ldi	r27, 0x06	; 6
 8b0:	f2 cf       	rjmp	.-28     	; 0x896 <play+0x36>
			default: increment_a = 0; break;
 8b2:	10 92 17 04 	sts	0x0417, r1
 8b6:	10 92 18 04 	sts	0x0418, r1
 8ba:	10 92 19 04 	sts	0x0419, r1
 8be:	10 92 1a 04 	sts	0x041A, r1
		}

		switch ( fB) {
 8c2:	62 30       	cpi	r22, 0x02	; 2
 8c4:	83 e0       	ldi	r24, 0x03	; 3
 8c6:	78 07       	cpc	r23, r24
 8c8:	91 f0       	breq	.+36     	; 0x8ee <play+0x8e>
 8ca:	24 f4       	brge	.+8      	; 0x8d4 <play+0x74>
 8cc:	69 3b       	cpi	r22, 0xB9	; 185
 8ce:	72 40       	sbci	r23, 0x02	; 2
 8d0:	29 f5       	brne	.+74     	; 0x91c <play+0xbc>
 8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <play+0x84>
 8d4:	69 33       	cpi	r22, 0x39	; 57
 8d6:	23 e0       	ldi	r18, 0x03	; 3
 8d8:	72 07       	cpc	r23, r18
 8da:	b1 f0       	breq	.+44     	; 0x908 <play+0xa8>
 8dc:	6d 3a       	cpi	r22, 0xAD	; 173
 8de:	73 40       	sbci	r23, 0x03	; 3
 8e0:	e9 f4       	brne	.+58     	; 0x91c <play+0xbc>
 8e2:	17 c0       	rjmp	.+46     	; 0x912 <play+0xb2>
			case 697: increment_b = INCREMENT_697; break;
 8e4:	87 e3       	ldi	r24, 0x37	; 55
 8e6:	9a ed       	ldi	r25, 0xDA	; 218
 8e8:	aa ed       	ldi	r26, 0xDA	; 218
 8ea:	b2 e0       	ldi	r27, 0x02	; 2
 8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <play+0x96>
			case 770: increment_b = INCREMENT_770; break;
 8ee:	8e ed       	ldi	r24, 0xDE	; 222
 8f0:	95 e6       	ldi	r25, 0x65	; 101
 8f2:	a7 e2       	ldi	r26, 0x27	; 39
 8f4:	b3 e0       	ldi	r27, 0x03	; 3
 8f6:	80 93 2a 04 	sts	0x042A, r24
 8fa:	90 93 2b 04 	sts	0x042B, r25
 8fe:	a0 93 2c 04 	sts	0x042C, r26
 902:	b0 93 2d 04 	sts	0x042D, r27
 906:	12 c0       	rjmp	.+36     	; 0x92c <play+0xcc>
			case 825: increment_b = INCREMENT_825; break;
 908:	87 eb       	ldi	r24, 0xB7	; 183
 90a:	91 e1       	ldi	r25, 0x11	; 17
 90c:	a1 e6       	ldi	r26, 0x61	; 97
 90e:	b3 e0       	ldi	r27, 0x03	; 3
 910:	f2 cf       	rjmp	.-28     	; 0x8f6 <play+0x96>
			case 941: increment_b = INCREMENT_941; break;
 912:	83 e8       	ldi	r24, 0x83	; 131
 914:	91 e5       	ldi	r25, 0x51	; 81
 916:	ab e8       	ldi	r26, 0x8B	; 139
 918:	b6 e2       	ldi	r27, 0x26	; 38
 91a:	ed cf       	rjmp	.-38     	; 0x8f6 <play+0x96>
			default: increment_b = 0; break;
 91c:	10 92 2a 04 	sts	0x042A, r1
 920:	10 92 2b 04 	sts	0x042B, r1
 924:	10 92 2c 04 	sts	0x042C, r1
 928:	10 92 2d 04 	sts	0x042D, r1
		}
		dds_duration = duration;
 92c:	50 93 0d 04 	sts	0x040D, r21
 930:	40 93 0c 04 	sts	0x040C, r20
		OCR0A = 128;	
 934:	80 e8       	ldi	r24, 0x80	; 128
 936:	87 bd       	out	0x27, r24	; 39
 938:	08 95       	ret

0000093a <stop_playing>:


}

void stop_playing(){
	is_playing = FALSE;
 93a:	10 92 16 04 	sts	0x0416, r1
	sample = 0;
 93e:	10 92 2f 04 	sts	0x042F, r1
 942:	10 92 30 04 	sts	0x0430, r1
 946:	10 92 31 04 	sts	0x0431, r1
 94a:	10 92 32 04 	sts	0x0432, r1
	rampCount = 0;
 94e:	10 92 20 04 	sts	0x0420, r1
 952:	10 92 21 04 	sts	0x0421, r1
 956:	10 92 22 04 	sts	0x0422, r1
 95a:	10 92 23 04 	sts	0x0423, r1
	increment_a = increment_b = 0;
 95e:	10 92 2a 04 	sts	0x042A, r1
 962:	10 92 2b 04 	sts	0x042B, r1
 966:	10 92 2c 04 	sts	0x042C, r1
 96a:	10 92 2d 04 	sts	0x042D, r1
 96e:	10 92 17 04 	sts	0x0417, r1
 972:	10 92 18 04 	sts	0x0418, r1
 976:	10 92 19 04 	sts	0x0419, r1
 97a:	10 92 1a 04 	sts	0x041A, r1
	accumulator_a = accumulator_b = 0;
 97e:	10 92 24 04 	sts	0x0424, r1
 982:	10 92 25 04 	sts	0x0425, r1
 986:	10 92 26 04 	sts	0x0426, r1
 98a:	10 92 27 04 	sts	0x0427, r1
 98e:	10 92 1c 04 	sts	0x041C, r1
 992:	10 92 1d 04 	sts	0x041D, r1
 996:	10 92 1e 04 	sts	0x041E, r1
 99a:	10 92 1f 04 	sts	0x041F, r1
 99e:	08 95       	ret

000009a0 <main>:
}

int main(void) {
  // Init port B to show keyboard result
  DDRB = 0xff;
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	84 b9       	out	0x04, r24	; 4
  // and turn out the LEDs
  PORTB = 0xff;   
 9a4:	85 b9       	out	0x05, r24	; 5
  
  // init the UART
  uart_init();
 9a6:	0e 94 c9 01 	call	0x392	; 0x392 <uart_init>
  stdout = stdin = stderr = &uart_str;
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	91 e0       	ldi	r25, 0x01	; 1
 9ae:	90 93 38 04 	sts	0x0438, r25
 9b2:	80 93 37 04 	sts	0x0437, r24
 9b6:	90 93 34 04 	sts	0x0434, r25
 9ba:	80 93 33 04 	sts	0x0433, r24
 9be:	90 93 36 04 	sts	0x0436, r25
 9c2:	80 93 35 04 	sts	0x0435, r24
  fprintf(stdout, "Starting...\n\r");
 9c6:	bc 01       	movw	r22, r24
 9c8:	8a e8       	ldi	r24, 0x8A	; 138
 9ca:	93 e0       	ldi	r25, 0x03	; 3
 9cc:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputs>

  initialize();
 9d0:	0e 94 af 01 	call	0x35e	; 0x35e <initialize>

  //endless loop to read keyboard
  while(1) {
	//Used for debouncing
	//fprintf(stdout, "%u\n\r", time1);
    if (time1>=t1) {
 9d4:	80 91 0e 04 	lds	r24, 0x040E
 9d8:	90 91 0f 04 	lds	r25, 0x040F
 9dc:	44 97       	sbiw	r24, 0x14	; 20
 9de:	10 f0       	brcs	.+4      	; 0x9e4 <main+0x44>
	  	//fprintf(stdout, "Entering task1...\n\r");	
		task1();
 9e0:	0e 94 67 00 	call	0xce	; 0xce <task1>
	}
	if(time >= dds_duration){
 9e4:	20 91 10 04 	lds	r18, 0x0410
 9e8:	30 91 11 04 	lds	r19, 0x0411
 9ec:	80 91 0c 04 	lds	r24, 0x040C
 9f0:	90 91 0d 04 	lds	r25, 0x040D
 9f4:	28 17       	cp	r18, r24
 9f6:	39 07       	cpc	r19, r25
 9f8:	68 f3       	brcs	.-38     	; 0x9d4 <main+0x34>
		time = 0;
 9fa:	10 92 11 04 	sts	0x0411, r1
 9fe:	10 92 10 04 	sts	0x0410, r1
		OCR0A = 0;
 a02:	17 bc       	out	0x27, r1	; 39
		stop_playing();
 a04:	0e 94 9d 04 	call	0x93a	; 0x93a <stop_playing>
 a08:	e5 cf       	rjmp	.-54     	; 0x9d4 <main+0x34>

00000a0a <fprintf>:
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
 a12:	ce 01       	movw	r24, r28
 a14:	09 96       	adiw	r24, 0x09	; 9
 a16:	ac 01       	movw	r20, r24
 a18:	6f 81       	ldd	r22, Y+7	; 0x07
 a1a:	78 85       	ldd	r23, Y+8	; 0x08
 a1c:	8d 81       	ldd	r24, Y+5	; 0x05
 a1e:	9e 81       	ldd	r25, Y+6	; 0x06
 a20:	0e 94 40 05 	call	0xa80	; 0xa80 <vfprintf>
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	08 95       	ret

00000a2a <fputs>:
 a2a:	ef 92       	push	r14
 a2c:	ff 92       	push	r15
 a2e:	0f 93       	push	r16
 a30:	1f 93       	push	r17
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	7c 01       	movw	r14, r24
 a38:	8b 01       	movw	r16, r22
 a3a:	db 01       	movw	r26, r22
 a3c:	13 96       	adiw	r26, 0x03	; 3
 a3e:	8c 91       	ld	r24, X
 a40:	81 ff       	sbrs	r24, 1
 a42:	14 c0       	rjmp	.+40     	; 0xa6c <fputs+0x42>
 a44:	c0 e0       	ldi	r28, 0x00	; 0
 a46:	d0 e0       	ldi	r29, 0x00	; 0
 a48:	0b c0       	rjmp	.+22     	; 0xa60 <fputs+0x36>
 a4a:	d8 01       	movw	r26, r16
 a4c:	18 96       	adiw	r26, 0x08	; 8
 a4e:	ed 91       	ld	r30, X+
 a50:	fc 91       	ld	r31, X
 a52:	19 97       	sbiw	r26, 0x09	; 9
 a54:	b8 01       	movw	r22, r16
 a56:	09 95       	icall
 a58:	89 2b       	or	r24, r25
 a5a:	11 f0       	breq	.+4      	; 0xa60 <fputs+0x36>
 a5c:	cf ef       	ldi	r28, 0xFF	; 255
 a5e:	df ef       	ldi	r29, 0xFF	; 255
 a60:	f7 01       	movw	r30, r14
 a62:	81 91       	ld	r24, Z+
 a64:	7f 01       	movw	r14, r30
 a66:	81 11       	cpse	r24, r1
 a68:	f0 cf       	rjmp	.-32     	; 0xa4a <fputs+0x20>
 a6a:	02 c0       	rjmp	.+4      	; 0xa70 <fputs+0x46>
 a6c:	cf ef       	ldi	r28, 0xFF	; 255
 a6e:	df ef       	ldi	r29, 0xFF	; 255
 a70:	ce 01       	movw	r24, r28
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	1f 91       	pop	r17
 a78:	0f 91       	pop	r16
 a7a:	ff 90       	pop	r15
 a7c:	ef 90       	pop	r14
 a7e:	08 95       	ret

00000a80 <vfprintf>:
 a80:	2f 92       	push	r2
 a82:	3f 92       	push	r3
 a84:	4f 92       	push	r4
 a86:	5f 92       	push	r5
 a88:	6f 92       	push	r6
 a8a:	7f 92       	push	r7
 a8c:	8f 92       	push	r8
 a8e:	9f 92       	push	r9
 a90:	af 92       	push	r10
 a92:	bf 92       	push	r11
 a94:	cf 92       	push	r12
 a96:	df 92       	push	r13
 a98:	ef 92       	push	r14
 a9a:	ff 92       	push	r15
 a9c:	0f 93       	push	r16
 a9e:	1f 93       	push	r17
 aa0:	cf 93       	push	r28
 aa2:	df 93       	push	r29
 aa4:	cd b7       	in	r28, 0x3d	; 61
 aa6:	de b7       	in	r29, 0x3e	; 62
 aa8:	2c 97       	sbiw	r28, 0x0c	; 12
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	f8 94       	cli
 aae:	de bf       	out	0x3e, r29	; 62
 ab0:	0f be       	out	0x3f, r0	; 63
 ab2:	cd bf       	out	0x3d, r28	; 61
 ab4:	7c 01       	movw	r14, r24
 ab6:	6b 01       	movw	r12, r22
 ab8:	8a 01       	movw	r16, r20
 aba:	fc 01       	movw	r30, r24
 abc:	17 82       	std	Z+7, r1	; 0x07
 abe:	16 82       	std	Z+6, r1	; 0x06
 ac0:	83 81       	ldd	r24, Z+3	; 0x03
 ac2:	81 ff       	sbrs	r24, 1
 ac4:	c6 c1       	rjmp	.+908    	; 0xe52 <vfprintf+0x3d2>
 ac6:	88 24       	eor	r8, r8
 ac8:	83 94       	inc	r8
 aca:	91 2c       	mov	r9, r1
 acc:	8c 0e       	add	r8, r28
 ace:	9d 1e       	adc	r9, r29
 ad0:	f7 01       	movw	r30, r14
 ad2:	93 81       	ldd	r25, Z+3	; 0x03
 ad4:	f6 01       	movw	r30, r12
 ad6:	93 fd       	sbrc	r25, 3
 ad8:	85 91       	lpm	r24, Z+
 ada:	93 ff       	sbrs	r25, 3
 adc:	81 91       	ld	r24, Z+
 ade:	6f 01       	movw	r12, r30
 ae0:	88 23       	and	r24, r24
 ae2:	09 f4       	brne	.+2      	; 0xae6 <vfprintf+0x66>
 ae4:	b2 c1       	rjmp	.+868    	; 0xe4a <vfprintf+0x3ca>
 ae6:	85 32       	cpi	r24, 0x25	; 37
 ae8:	39 f4       	brne	.+14     	; 0xaf8 <vfprintf+0x78>
 aea:	93 fd       	sbrc	r25, 3
 aec:	85 91       	lpm	r24, Z+
 aee:	93 ff       	sbrs	r25, 3
 af0:	81 91       	ld	r24, Z+
 af2:	6f 01       	movw	r12, r30
 af4:	85 32       	cpi	r24, 0x25	; 37
 af6:	29 f4       	brne	.+10     	; 0xb02 <vfprintf+0x82>
 af8:	b7 01       	movw	r22, r14
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
 b00:	e7 cf       	rjmp	.-50     	; 0xad0 <vfprintf+0x50>
 b02:	51 2c       	mov	r5, r1
 b04:	31 2c       	mov	r3, r1
 b06:	20 e0       	ldi	r18, 0x00	; 0
 b08:	20 32       	cpi	r18, 0x20	; 32
 b0a:	a8 f4       	brcc	.+42     	; 0xb36 <vfprintf+0xb6>
 b0c:	8b 32       	cpi	r24, 0x2B	; 43
 b0e:	61 f0       	breq	.+24     	; 0xb28 <vfprintf+0xa8>
 b10:	28 f4       	brcc	.+10     	; 0xb1c <vfprintf+0x9c>
 b12:	80 32       	cpi	r24, 0x20	; 32
 b14:	51 f0       	breq	.+20     	; 0xb2a <vfprintf+0xaa>
 b16:	83 32       	cpi	r24, 0x23	; 35
 b18:	71 f4       	brne	.+28     	; 0xb36 <vfprintf+0xb6>
 b1a:	0b c0       	rjmp	.+22     	; 0xb32 <vfprintf+0xb2>
 b1c:	8d 32       	cpi	r24, 0x2D	; 45
 b1e:	39 f0       	breq	.+14     	; 0xb2e <vfprintf+0xae>
 b20:	80 33       	cpi	r24, 0x30	; 48
 b22:	49 f4       	brne	.+18     	; 0xb36 <vfprintf+0xb6>
 b24:	21 60       	ori	r18, 0x01	; 1
 b26:	28 c0       	rjmp	.+80     	; 0xb78 <vfprintf+0xf8>
 b28:	22 60       	ori	r18, 0x02	; 2
 b2a:	24 60       	ori	r18, 0x04	; 4
 b2c:	25 c0       	rjmp	.+74     	; 0xb78 <vfprintf+0xf8>
 b2e:	28 60       	ori	r18, 0x08	; 8
 b30:	23 c0       	rjmp	.+70     	; 0xb78 <vfprintf+0xf8>
 b32:	20 61       	ori	r18, 0x10	; 16
 b34:	21 c0       	rjmp	.+66     	; 0xb78 <vfprintf+0xf8>
 b36:	27 fd       	sbrc	r18, 7
 b38:	27 c0       	rjmp	.+78     	; 0xb88 <vfprintf+0x108>
 b3a:	38 2f       	mov	r19, r24
 b3c:	30 53       	subi	r19, 0x30	; 48
 b3e:	3a 30       	cpi	r19, 0x0A	; 10
 b40:	78 f4       	brcc	.+30     	; 0xb60 <vfprintf+0xe0>
 b42:	26 ff       	sbrs	r18, 6
 b44:	06 c0       	rjmp	.+12     	; 0xb52 <vfprintf+0xd2>
 b46:	fa e0       	ldi	r31, 0x0A	; 10
 b48:	5f 9e       	mul	r5, r31
 b4a:	30 0d       	add	r19, r0
 b4c:	11 24       	eor	r1, r1
 b4e:	53 2e       	mov	r5, r19
 b50:	13 c0       	rjmp	.+38     	; 0xb78 <vfprintf+0xf8>
 b52:	8a e0       	ldi	r24, 0x0A	; 10
 b54:	38 9e       	mul	r3, r24
 b56:	30 0d       	add	r19, r0
 b58:	11 24       	eor	r1, r1
 b5a:	33 2e       	mov	r3, r19
 b5c:	20 62       	ori	r18, 0x20	; 32
 b5e:	0c c0       	rjmp	.+24     	; 0xb78 <vfprintf+0xf8>
 b60:	8e 32       	cpi	r24, 0x2E	; 46
 b62:	21 f4       	brne	.+8      	; 0xb6c <vfprintf+0xec>
 b64:	26 fd       	sbrc	r18, 6
 b66:	71 c1       	rjmp	.+738    	; 0xe4a <vfprintf+0x3ca>
 b68:	20 64       	ori	r18, 0x40	; 64
 b6a:	06 c0       	rjmp	.+12     	; 0xb78 <vfprintf+0xf8>
 b6c:	8c 36       	cpi	r24, 0x6C	; 108
 b6e:	11 f4       	brne	.+4      	; 0xb74 <vfprintf+0xf4>
 b70:	20 68       	ori	r18, 0x80	; 128
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <vfprintf+0xf8>
 b74:	88 36       	cpi	r24, 0x68	; 104
 b76:	41 f4       	brne	.+16     	; 0xb88 <vfprintf+0x108>
 b78:	f6 01       	movw	r30, r12
 b7a:	93 fd       	sbrc	r25, 3
 b7c:	85 91       	lpm	r24, Z+
 b7e:	93 ff       	sbrs	r25, 3
 b80:	81 91       	ld	r24, Z+
 b82:	6f 01       	movw	r12, r30
 b84:	81 11       	cpse	r24, r1
 b86:	c0 cf       	rjmp	.-128    	; 0xb08 <vfprintf+0x88>
 b88:	98 2f       	mov	r25, r24
 b8a:	95 54       	subi	r25, 0x45	; 69
 b8c:	93 30       	cpi	r25, 0x03	; 3
 b8e:	18 f0       	brcs	.+6      	; 0xb96 <vfprintf+0x116>
 b90:	90 52       	subi	r25, 0x20	; 32
 b92:	93 30       	cpi	r25, 0x03	; 3
 b94:	28 f4       	brcc	.+10     	; 0xba0 <vfprintf+0x120>
 b96:	0c 5f       	subi	r16, 0xFC	; 252
 b98:	1f 4f       	sbci	r17, 0xFF	; 255
 b9a:	ff e3       	ldi	r31, 0x3F	; 63
 b9c:	f9 83       	std	Y+1, r31	; 0x01
 b9e:	0d c0       	rjmp	.+26     	; 0xbba <vfprintf+0x13a>
 ba0:	83 36       	cpi	r24, 0x63	; 99
 ba2:	31 f0       	breq	.+12     	; 0xbb0 <vfprintf+0x130>
 ba4:	83 37       	cpi	r24, 0x73	; 115
 ba6:	71 f0       	breq	.+28     	; 0xbc4 <vfprintf+0x144>
 ba8:	83 35       	cpi	r24, 0x53	; 83
 baa:	09 f0       	breq	.+2      	; 0xbae <vfprintf+0x12e>
 bac:	5e c0       	rjmp	.+188    	; 0xc6a <vfprintf+0x1ea>
 bae:	23 c0       	rjmp	.+70     	; 0xbf6 <vfprintf+0x176>
 bb0:	f8 01       	movw	r30, r16
 bb2:	80 81       	ld	r24, Z
 bb4:	89 83       	std	Y+1, r24	; 0x01
 bb6:	0e 5f       	subi	r16, 0xFE	; 254
 bb8:	1f 4f       	sbci	r17, 0xFF	; 255
 bba:	44 24       	eor	r4, r4
 bbc:	43 94       	inc	r4
 bbe:	51 2c       	mov	r5, r1
 bc0:	54 01       	movw	r10, r8
 bc2:	15 c0       	rjmp	.+42     	; 0xbee <vfprintf+0x16e>
 bc4:	38 01       	movw	r6, r16
 bc6:	f2 e0       	ldi	r31, 0x02	; 2
 bc8:	6f 0e       	add	r6, r31
 bca:	71 1c       	adc	r7, r1
 bcc:	f8 01       	movw	r30, r16
 bce:	a0 80       	ld	r10, Z
 bd0:	b1 80       	ldd	r11, Z+1	; 0x01
 bd2:	26 ff       	sbrs	r18, 6
 bd4:	03 c0       	rjmp	.+6      	; 0xbdc <vfprintf+0x15c>
 bd6:	65 2d       	mov	r22, r5
 bd8:	70 e0       	ldi	r23, 0x00	; 0
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <vfprintf+0x160>
 bdc:	6f ef       	ldi	r22, 0xFF	; 255
 bde:	7f ef       	ldi	r23, 0xFF	; 255
 be0:	c5 01       	movw	r24, r10
 be2:	2c 87       	std	Y+12, r18	; 0x0c
 be4:	0e 94 50 07 	call	0xea0	; 0xea0 <strnlen>
 be8:	2c 01       	movw	r4, r24
 bea:	83 01       	movw	r16, r6
 bec:	2c 85       	ldd	r18, Y+12	; 0x0c
 bee:	6f e7       	ldi	r22, 0x7F	; 127
 bf0:	26 2e       	mov	r2, r22
 bf2:	22 22       	and	r2, r18
 bf4:	18 c0       	rjmp	.+48     	; 0xc26 <vfprintf+0x1a6>
 bf6:	38 01       	movw	r6, r16
 bf8:	f2 e0       	ldi	r31, 0x02	; 2
 bfa:	6f 0e       	add	r6, r31
 bfc:	71 1c       	adc	r7, r1
 bfe:	f8 01       	movw	r30, r16
 c00:	a0 80       	ld	r10, Z
 c02:	b1 80       	ldd	r11, Z+1	; 0x01
 c04:	26 ff       	sbrs	r18, 6
 c06:	03 c0       	rjmp	.+6      	; 0xc0e <vfprintf+0x18e>
 c08:	65 2d       	mov	r22, r5
 c0a:	70 e0       	ldi	r23, 0x00	; 0
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <vfprintf+0x192>
 c0e:	6f ef       	ldi	r22, 0xFF	; 255
 c10:	7f ef       	ldi	r23, 0xFF	; 255
 c12:	c5 01       	movw	r24, r10
 c14:	2c 87       	std	Y+12, r18	; 0x0c
 c16:	0e 94 45 07 	call	0xe8a	; 0xe8a <strnlen_P>
 c1a:	2c 01       	movw	r4, r24
 c1c:	2c 85       	ldd	r18, Y+12	; 0x0c
 c1e:	50 e8       	ldi	r21, 0x80	; 128
 c20:	25 2e       	mov	r2, r21
 c22:	22 2a       	or	r2, r18
 c24:	83 01       	movw	r16, r6
 c26:	23 fc       	sbrc	r2, 3
 c28:	1c c0       	rjmp	.+56     	; 0xc62 <vfprintf+0x1e2>
 c2a:	06 c0       	rjmp	.+12     	; 0xc38 <vfprintf+0x1b8>
 c2c:	b7 01       	movw	r22, r14
 c2e:	80 e2       	ldi	r24, 0x20	; 32
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
 c36:	3a 94       	dec	r3
 c38:	83 2d       	mov	r24, r3
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	48 16       	cp	r4, r24
 c3e:	59 06       	cpc	r5, r25
 c40:	a8 f3       	brcs	.-22     	; 0xc2c <vfprintf+0x1ac>
 c42:	0f c0       	rjmp	.+30     	; 0xc62 <vfprintf+0x1e2>
 c44:	f5 01       	movw	r30, r10
 c46:	27 fc       	sbrc	r2, 7
 c48:	85 91       	lpm	r24, Z+
 c4a:	27 fe       	sbrs	r2, 7
 c4c:	81 91       	ld	r24, Z+
 c4e:	5f 01       	movw	r10, r30
 c50:	b7 01       	movw	r22, r14
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
 c58:	31 10       	cpse	r3, r1
 c5a:	3a 94       	dec	r3
 c5c:	f1 e0       	ldi	r31, 0x01	; 1
 c5e:	4f 1a       	sub	r4, r31
 c60:	51 08       	sbc	r5, r1
 c62:	41 14       	cp	r4, r1
 c64:	51 04       	cpc	r5, r1
 c66:	71 f7       	brne	.-36     	; 0xc44 <vfprintf+0x1c4>
 c68:	ed c0       	rjmp	.+474    	; 0xe44 <vfprintf+0x3c4>
 c6a:	84 36       	cpi	r24, 0x64	; 100
 c6c:	11 f0       	breq	.+4      	; 0xc72 <vfprintf+0x1f2>
 c6e:	89 36       	cpi	r24, 0x69	; 105
 c70:	41 f5       	brne	.+80     	; 0xcc2 <vfprintf+0x242>
 c72:	f8 01       	movw	r30, r16
 c74:	27 ff       	sbrs	r18, 7
 c76:	07 c0       	rjmp	.+14     	; 0xc86 <vfprintf+0x206>
 c78:	60 81       	ld	r22, Z
 c7a:	71 81       	ldd	r23, Z+1	; 0x01
 c7c:	82 81       	ldd	r24, Z+2	; 0x02
 c7e:	93 81       	ldd	r25, Z+3	; 0x03
 c80:	0c 5f       	subi	r16, 0xFC	; 252
 c82:	1f 4f       	sbci	r17, 0xFF	; 255
 c84:	08 c0       	rjmp	.+16     	; 0xc96 <vfprintf+0x216>
 c86:	60 81       	ld	r22, Z
 c88:	71 81       	ldd	r23, Z+1	; 0x01
 c8a:	88 27       	eor	r24, r24
 c8c:	77 fd       	sbrc	r23, 7
 c8e:	80 95       	com	r24
 c90:	98 2f       	mov	r25, r24
 c92:	0e 5f       	subi	r16, 0xFE	; 254
 c94:	1f 4f       	sbci	r17, 0xFF	; 255
 c96:	4f e6       	ldi	r20, 0x6F	; 111
 c98:	b4 2e       	mov	r11, r20
 c9a:	b2 22       	and	r11, r18
 c9c:	97 ff       	sbrs	r25, 7
 c9e:	09 c0       	rjmp	.+18     	; 0xcb2 <vfprintf+0x232>
 ca0:	90 95       	com	r25
 ca2:	80 95       	com	r24
 ca4:	70 95       	com	r23
 ca6:	61 95       	neg	r22
 ca8:	7f 4f       	sbci	r23, 0xFF	; 255
 caa:	8f 4f       	sbci	r24, 0xFF	; 255
 cac:	9f 4f       	sbci	r25, 0xFF	; 255
 cae:	f0 e8       	ldi	r31, 0x80	; 128
 cb0:	bf 2a       	or	r11, r31
 cb2:	2a e0       	ldi	r18, 0x0A	; 10
 cb4:	30 e0       	ldi	r19, 0x00	; 0
 cb6:	a4 01       	movw	r20, r8
 cb8:	0e 94 87 07 	call	0xf0e	; 0xf0e <__ultoa_invert>
 cbc:	a8 2e       	mov	r10, r24
 cbe:	a8 18       	sub	r10, r8
 cc0:	43 c0       	rjmp	.+134    	; 0xd48 <vfprintf+0x2c8>
 cc2:	85 37       	cpi	r24, 0x75	; 117
 cc4:	31 f4       	brne	.+12     	; 0xcd2 <vfprintf+0x252>
 cc6:	3f ee       	ldi	r19, 0xEF	; 239
 cc8:	b3 2e       	mov	r11, r19
 cca:	b2 22       	and	r11, r18
 ccc:	2a e0       	ldi	r18, 0x0A	; 10
 cce:	30 e0       	ldi	r19, 0x00	; 0
 cd0:	24 c0       	rjmp	.+72     	; 0xd1a <vfprintf+0x29a>
 cd2:	99 ef       	ldi	r25, 0xF9	; 249
 cd4:	b9 2e       	mov	r11, r25
 cd6:	b2 22       	and	r11, r18
 cd8:	8f 36       	cpi	r24, 0x6F	; 111
 cda:	b9 f0       	breq	.+46     	; 0xd0a <vfprintf+0x28a>
 cdc:	20 f4       	brcc	.+8      	; 0xce6 <vfprintf+0x266>
 cde:	88 35       	cpi	r24, 0x58	; 88
 ce0:	09 f0       	breq	.+2      	; 0xce4 <vfprintf+0x264>
 ce2:	b3 c0       	rjmp	.+358    	; 0xe4a <vfprintf+0x3ca>
 ce4:	0d c0       	rjmp	.+26     	; 0xd00 <vfprintf+0x280>
 ce6:	80 37       	cpi	r24, 0x70	; 112
 ce8:	21 f0       	breq	.+8      	; 0xcf2 <vfprintf+0x272>
 cea:	88 37       	cpi	r24, 0x78	; 120
 cec:	09 f0       	breq	.+2      	; 0xcf0 <vfprintf+0x270>
 cee:	ad c0       	rjmp	.+346    	; 0xe4a <vfprintf+0x3ca>
 cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <vfprintf+0x276>
 cf2:	20 e1       	ldi	r18, 0x10	; 16
 cf4:	b2 2a       	or	r11, r18
 cf6:	b4 fe       	sbrs	r11, 4
 cf8:	0b c0       	rjmp	.+22     	; 0xd10 <vfprintf+0x290>
 cfa:	84 e0       	ldi	r24, 0x04	; 4
 cfc:	b8 2a       	or	r11, r24
 cfe:	08 c0       	rjmp	.+16     	; 0xd10 <vfprintf+0x290>
 d00:	24 ff       	sbrs	r18, 4
 d02:	09 c0       	rjmp	.+18     	; 0xd16 <vfprintf+0x296>
 d04:	e6 e0       	ldi	r30, 0x06	; 6
 d06:	be 2a       	or	r11, r30
 d08:	06 c0       	rjmp	.+12     	; 0xd16 <vfprintf+0x296>
 d0a:	28 e0       	ldi	r18, 0x08	; 8
 d0c:	30 e0       	ldi	r19, 0x00	; 0
 d0e:	05 c0       	rjmp	.+10     	; 0xd1a <vfprintf+0x29a>
 d10:	20 e1       	ldi	r18, 0x10	; 16
 d12:	30 e0       	ldi	r19, 0x00	; 0
 d14:	02 c0       	rjmp	.+4      	; 0xd1a <vfprintf+0x29a>
 d16:	20 e1       	ldi	r18, 0x10	; 16
 d18:	32 e0       	ldi	r19, 0x02	; 2
 d1a:	f8 01       	movw	r30, r16
 d1c:	b7 fe       	sbrs	r11, 7
 d1e:	07 c0       	rjmp	.+14     	; 0xd2e <vfprintf+0x2ae>
 d20:	60 81       	ld	r22, Z
 d22:	71 81       	ldd	r23, Z+1	; 0x01
 d24:	82 81       	ldd	r24, Z+2	; 0x02
 d26:	93 81       	ldd	r25, Z+3	; 0x03
 d28:	0c 5f       	subi	r16, 0xFC	; 252
 d2a:	1f 4f       	sbci	r17, 0xFF	; 255
 d2c:	06 c0       	rjmp	.+12     	; 0xd3a <vfprintf+0x2ba>
 d2e:	60 81       	ld	r22, Z
 d30:	71 81       	ldd	r23, Z+1	; 0x01
 d32:	80 e0       	ldi	r24, 0x00	; 0
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	0e 5f       	subi	r16, 0xFE	; 254
 d38:	1f 4f       	sbci	r17, 0xFF	; 255
 d3a:	a4 01       	movw	r20, r8
 d3c:	0e 94 87 07 	call	0xf0e	; 0xf0e <__ultoa_invert>
 d40:	a8 2e       	mov	r10, r24
 d42:	a8 18       	sub	r10, r8
 d44:	ff e7       	ldi	r31, 0x7F	; 127
 d46:	bf 22       	and	r11, r31
 d48:	b6 fe       	sbrs	r11, 6
 d4a:	0b c0       	rjmp	.+22     	; 0xd62 <vfprintf+0x2e2>
 d4c:	2b 2d       	mov	r18, r11
 d4e:	2e 7f       	andi	r18, 0xFE	; 254
 d50:	a5 14       	cp	r10, r5
 d52:	50 f4       	brcc	.+20     	; 0xd68 <vfprintf+0x2e8>
 d54:	b4 fe       	sbrs	r11, 4
 d56:	0a c0       	rjmp	.+20     	; 0xd6c <vfprintf+0x2ec>
 d58:	b2 fc       	sbrc	r11, 2
 d5a:	08 c0       	rjmp	.+16     	; 0xd6c <vfprintf+0x2ec>
 d5c:	2b 2d       	mov	r18, r11
 d5e:	2e 7e       	andi	r18, 0xEE	; 238
 d60:	05 c0       	rjmp	.+10     	; 0xd6c <vfprintf+0x2ec>
 d62:	7a 2c       	mov	r7, r10
 d64:	2b 2d       	mov	r18, r11
 d66:	03 c0       	rjmp	.+6      	; 0xd6e <vfprintf+0x2ee>
 d68:	7a 2c       	mov	r7, r10
 d6a:	01 c0       	rjmp	.+2      	; 0xd6e <vfprintf+0x2ee>
 d6c:	75 2c       	mov	r7, r5
 d6e:	24 ff       	sbrs	r18, 4
 d70:	0d c0       	rjmp	.+26     	; 0xd8c <vfprintf+0x30c>
 d72:	fe 01       	movw	r30, r28
 d74:	ea 0d       	add	r30, r10
 d76:	f1 1d       	adc	r31, r1
 d78:	80 81       	ld	r24, Z
 d7a:	80 33       	cpi	r24, 0x30	; 48
 d7c:	11 f4       	brne	.+4      	; 0xd82 <vfprintf+0x302>
 d7e:	29 7e       	andi	r18, 0xE9	; 233
 d80:	09 c0       	rjmp	.+18     	; 0xd94 <vfprintf+0x314>
 d82:	22 ff       	sbrs	r18, 2
 d84:	06 c0       	rjmp	.+12     	; 0xd92 <vfprintf+0x312>
 d86:	73 94       	inc	r7
 d88:	73 94       	inc	r7
 d8a:	04 c0       	rjmp	.+8      	; 0xd94 <vfprintf+0x314>
 d8c:	82 2f       	mov	r24, r18
 d8e:	86 78       	andi	r24, 0x86	; 134
 d90:	09 f0       	breq	.+2      	; 0xd94 <vfprintf+0x314>
 d92:	73 94       	inc	r7
 d94:	23 fd       	sbrc	r18, 3
 d96:	14 c0       	rjmp	.+40     	; 0xdc0 <vfprintf+0x340>
 d98:	20 ff       	sbrs	r18, 0
 d9a:	0f c0       	rjmp	.+30     	; 0xdba <vfprintf+0x33a>
 d9c:	5a 2c       	mov	r5, r10
 d9e:	73 14       	cp	r7, r3
 da0:	60 f4       	brcc	.+24     	; 0xdba <vfprintf+0x33a>
 da2:	53 0c       	add	r5, r3
 da4:	57 18       	sub	r5, r7
 da6:	73 2c       	mov	r7, r3
 da8:	08 c0       	rjmp	.+16     	; 0xdba <vfprintf+0x33a>
 daa:	b7 01       	movw	r22, r14
 dac:	80 e2       	ldi	r24, 0x20	; 32
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	2c 87       	std	Y+12, r18	; 0x0c
 db2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
 db6:	73 94       	inc	r7
 db8:	2c 85       	ldd	r18, Y+12	; 0x0c
 dba:	73 14       	cp	r7, r3
 dbc:	b0 f3       	brcs	.-20     	; 0xdaa <vfprintf+0x32a>
 dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <vfprintf+0x348>
 dc0:	73 14       	cp	r7, r3
 dc2:	10 f4       	brcc	.+4      	; 0xdc8 <vfprintf+0x348>
 dc4:	37 18       	sub	r3, r7
 dc6:	01 c0       	rjmp	.+2      	; 0xdca <vfprintf+0x34a>
 dc8:	31 2c       	mov	r3, r1
 dca:	24 ff       	sbrs	r18, 4
 dcc:	12 c0       	rjmp	.+36     	; 0xdf2 <vfprintf+0x372>
 dce:	b7 01       	movw	r22, r14
 dd0:	80 e3       	ldi	r24, 0x30	; 48
 dd2:	90 e0       	ldi	r25, 0x00	; 0
 dd4:	2c 87       	std	Y+12, r18	; 0x0c
 dd6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
 dda:	2c 85       	ldd	r18, Y+12	; 0x0c
 ddc:	22 ff       	sbrs	r18, 2
 dde:	1e c0       	rjmp	.+60     	; 0xe1c <vfprintf+0x39c>
 de0:	21 ff       	sbrs	r18, 1
 de2:	03 c0       	rjmp	.+6      	; 0xdea <vfprintf+0x36a>
 de4:	88 e5       	ldi	r24, 0x58	; 88
 de6:	90 e0       	ldi	r25, 0x00	; 0
 de8:	02 c0       	rjmp	.+4      	; 0xdee <vfprintf+0x36e>
 dea:	88 e7       	ldi	r24, 0x78	; 120
 dec:	90 e0       	ldi	r25, 0x00	; 0
 dee:	b7 01       	movw	r22, r14
 df0:	0c c0       	rjmp	.+24     	; 0xe0a <vfprintf+0x38a>
 df2:	82 2f       	mov	r24, r18
 df4:	86 78       	andi	r24, 0x86	; 134
 df6:	91 f0       	breq	.+36     	; 0xe1c <vfprintf+0x39c>
 df8:	21 fd       	sbrc	r18, 1
 dfa:	02 c0       	rjmp	.+4      	; 0xe00 <vfprintf+0x380>
 dfc:	80 e2       	ldi	r24, 0x20	; 32
 dfe:	01 c0       	rjmp	.+2      	; 0xe02 <vfprintf+0x382>
 e00:	8b e2       	ldi	r24, 0x2B	; 43
 e02:	27 fd       	sbrc	r18, 7
 e04:	8d e2       	ldi	r24, 0x2D	; 45
 e06:	b7 01       	movw	r22, r14
 e08:	90 e0       	ldi	r25, 0x00	; 0
 e0a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
 e0e:	06 c0       	rjmp	.+12     	; 0xe1c <vfprintf+0x39c>
 e10:	b7 01       	movw	r22, r14
 e12:	80 e3       	ldi	r24, 0x30	; 48
 e14:	90 e0       	ldi	r25, 0x00	; 0
 e16:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
 e1a:	5a 94       	dec	r5
 e1c:	a5 14       	cp	r10, r5
 e1e:	c0 f3       	brcs	.-16     	; 0xe10 <vfprintf+0x390>
 e20:	aa 94       	dec	r10
 e22:	f4 01       	movw	r30, r8
 e24:	ea 0d       	add	r30, r10
 e26:	f1 1d       	adc	r31, r1
 e28:	b7 01       	movw	r22, r14
 e2a:	80 81       	ld	r24, Z
 e2c:	90 e0       	ldi	r25, 0x00	; 0
 e2e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
 e32:	a1 10       	cpse	r10, r1
 e34:	f5 cf       	rjmp	.-22     	; 0xe20 <vfprintf+0x3a0>
 e36:	06 c0       	rjmp	.+12     	; 0xe44 <vfprintf+0x3c4>
 e38:	b7 01       	movw	r22, r14
 e3a:	80 e2       	ldi	r24, 0x20	; 32
 e3c:	90 e0       	ldi	r25, 0x00	; 0
 e3e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
 e42:	3a 94       	dec	r3
 e44:	31 10       	cpse	r3, r1
 e46:	f8 cf       	rjmp	.-16     	; 0xe38 <vfprintf+0x3b8>
 e48:	43 ce       	rjmp	.-890    	; 0xad0 <vfprintf+0x50>
 e4a:	f7 01       	movw	r30, r14
 e4c:	26 81       	ldd	r18, Z+6	; 0x06
 e4e:	37 81       	ldd	r19, Z+7	; 0x07
 e50:	02 c0       	rjmp	.+4      	; 0xe56 <vfprintf+0x3d6>
 e52:	2f ef       	ldi	r18, 0xFF	; 255
 e54:	3f ef       	ldi	r19, 0xFF	; 255
 e56:	c9 01       	movw	r24, r18
 e58:	2c 96       	adiw	r28, 0x0c	; 12
 e5a:	0f b6       	in	r0, 0x3f	; 63
 e5c:	f8 94       	cli
 e5e:	de bf       	out	0x3e, r29	; 62
 e60:	0f be       	out	0x3f, r0	; 63
 e62:	cd bf       	out	0x3d, r28	; 61
 e64:	df 91       	pop	r29
 e66:	cf 91       	pop	r28
 e68:	1f 91       	pop	r17
 e6a:	0f 91       	pop	r16
 e6c:	ff 90       	pop	r15
 e6e:	ef 90       	pop	r14
 e70:	df 90       	pop	r13
 e72:	cf 90       	pop	r12
 e74:	bf 90       	pop	r11
 e76:	af 90       	pop	r10
 e78:	9f 90       	pop	r9
 e7a:	8f 90       	pop	r8
 e7c:	7f 90       	pop	r7
 e7e:	6f 90       	pop	r6
 e80:	5f 90       	pop	r5
 e82:	4f 90       	pop	r4
 e84:	3f 90       	pop	r3
 e86:	2f 90       	pop	r2
 e88:	08 95       	ret

00000e8a <strnlen_P>:
 e8a:	fc 01       	movw	r30, r24
 e8c:	05 90       	lpm	r0, Z+
 e8e:	61 50       	subi	r22, 0x01	; 1
 e90:	70 40       	sbci	r23, 0x00	; 0
 e92:	01 10       	cpse	r0, r1
 e94:	d8 f7       	brcc	.-10     	; 0xe8c <strnlen_P+0x2>
 e96:	80 95       	com	r24
 e98:	90 95       	com	r25
 e9a:	8e 0f       	add	r24, r30
 e9c:	9f 1f       	adc	r25, r31
 e9e:	08 95       	ret

00000ea0 <strnlen>:
 ea0:	fc 01       	movw	r30, r24
 ea2:	61 50       	subi	r22, 0x01	; 1
 ea4:	70 40       	sbci	r23, 0x00	; 0
 ea6:	01 90       	ld	r0, Z+
 ea8:	01 10       	cpse	r0, r1
 eaa:	d8 f7       	brcc	.-10     	; 0xea2 <strnlen+0x2>
 eac:	80 95       	com	r24
 eae:	90 95       	com	r25
 eb0:	8e 0f       	add	r24, r30
 eb2:	9f 1f       	adc	r25, r31
 eb4:	08 95       	ret

00000eb6 <fputc>:
 eb6:	0f 93       	push	r16
 eb8:	1f 93       	push	r17
 eba:	cf 93       	push	r28
 ebc:	df 93       	push	r29
 ebe:	8c 01       	movw	r16, r24
 ec0:	eb 01       	movw	r28, r22
 ec2:	8b 81       	ldd	r24, Y+3	; 0x03
 ec4:	81 fd       	sbrc	r24, 1
 ec6:	03 c0       	rjmp	.+6      	; 0xece <fputc+0x18>
 ec8:	0f ef       	ldi	r16, 0xFF	; 255
 eca:	1f ef       	ldi	r17, 0xFF	; 255
 ecc:	1a c0       	rjmp	.+52     	; 0xf02 <fputc+0x4c>
 ece:	82 ff       	sbrs	r24, 2
 ed0:	0d c0       	rjmp	.+26     	; 0xeec <fputc+0x36>
 ed2:	2e 81       	ldd	r18, Y+6	; 0x06
 ed4:	3f 81       	ldd	r19, Y+7	; 0x07
 ed6:	8c 81       	ldd	r24, Y+4	; 0x04
 ed8:	9d 81       	ldd	r25, Y+5	; 0x05
 eda:	28 17       	cp	r18, r24
 edc:	39 07       	cpc	r19, r25
 ede:	64 f4       	brge	.+24     	; 0xef8 <fputc+0x42>
 ee0:	e8 81       	ld	r30, Y
 ee2:	f9 81       	ldd	r31, Y+1	; 0x01
 ee4:	01 93       	st	Z+, r16
 ee6:	f9 83       	std	Y+1, r31	; 0x01
 ee8:	e8 83       	st	Y, r30
 eea:	06 c0       	rjmp	.+12     	; 0xef8 <fputc+0x42>
 eec:	e8 85       	ldd	r30, Y+8	; 0x08
 eee:	f9 85       	ldd	r31, Y+9	; 0x09
 ef0:	80 2f       	mov	r24, r16
 ef2:	09 95       	icall
 ef4:	89 2b       	or	r24, r25
 ef6:	41 f7       	brne	.-48     	; 0xec8 <fputc+0x12>
 ef8:	8e 81       	ldd	r24, Y+6	; 0x06
 efa:	9f 81       	ldd	r25, Y+7	; 0x07
 efc:	01 96       	adiw	r24, 0x01	; 1
 efe:	9f 83       	std	Y+7, r25	; 0x07
 f00:	8e 83       	std	Y+6, r24	; 0x06
 f02:	c8 01       	movw	r24, r16
 f04:	df 91       	pop	r29
 f06:	cf 91       	pop	r28
 f08:	1f 91       	pop	r17
 f0a:	0f 91       	pop	r16
 f0c:	08 95       	ret

00000f0e <__ultoa_invert>:
 f0e:	fa 01       	movw	r30, r20
 f10:	aa 27       	eor	r26, r26
 f12:	28 30       	cpi	r18, 0x08	; 8
 f14:	51 f1       	breq	.+84     	; 0xf6a <__ultoa_invert+0x5c>
 f16:	20 31       	cpi	r18, 0x10	; 16
 f18:	81 f1       	breq	.+96     	; 0xf7a <__ultoa_invert+0x6c>
 f1a:	e8 94       	clt
 f1c:	6f 93       	push	r22
 f1e:	6e 7f       	andi	r22, 0xFE	; 254
 f20:	6e 5f       	subi	r22, 0xFE	; 254
 f22:	7f 4f       	sbci	r23, 0xFF	; 255
 f24:	8f 4f       	sbci	r24, 0xFF	; 255
 f26:	9f 4f       	sbci	r25, 0xFF	; 255
 f28:	af 4f       	sbci	r26, 0xFF	; 255
 f2a:	b1 e0       	ldi	r27, 0x01	; 1
 f2c:	3e d0       	rcall	.+124    	; 0xfaa <__ultoa_invert+0x9c>
 f2e:	b4 e0       	ldi	r27, 0x04	; 4
 f30:	3c d0       	rcall	.+120    	; 0xfaa <__ultoa_invert+0x9c>
 f32:	67 0f       	add	r22, r23
 f34:	78 1f       	adc	r23, r24
 f36:	89 1f       	adc	r24, r25
 f38:	9a 1f       	adc	r25, r26
 f3a:	a1 1d       	adc	r26, r1
 f3c:	68 0f       	add	r22, r24
 f3e:	79 1f       	adc	r23, r25
 f40:	8a 1f       	adc	r24, r26
 f42:	91 1d       	adc	r25, r1
 f44:	a1 1d       	adc	r26, r1
 f46:	6a 0f       	add	r22, r26
 f48:	71 1d       	adc	r23, r1
 f4a:	81 1d       	adc	r24, r1
 f4c:	91 1d       	adc	r25, r1
 f4e:	a1 1d       	adc	r26, r1
 f50:	20 d0       	rcall	.+64     	; 0xf92 <__ultoa_invert+0x84>
 f52:	09 f4       	brne	.+2      	; 0xf56 <__ultoa_invert+0x48>
 f54:	68 94       	set
 f56:	3f 91       	pop	r19
 f58:	2a e0       	ldi	r18, 0x0A	; 10
 f5a:	26 9f       	mul	r18, r22
 f5c:	11 24       	eor	r1, r1
 f5e:	30 19       	sub	r19, r0
 f60:	30 5d       	subi	r19, 0xD0	; 208
 f62:	31 93       	st	Z+, r19
 f64:	de f6       	brtc	.-74     	; 0xf1c <__ultoa_invert+0xe>
 f66:	cf 01       	movw	r24, r30
 f68:	08 95       	ret
 f6a:	46 2f       	mov	r20, r22
 f6c:	47 70       	andi	r20, 0x07	; 7
 f6e:	40 5d       	subi	r20, 0xD0	; 208
 f70:	41 93       	st	Z+, r20
 f72:	b3 e0       	ldi	r27, 0x03	; 3
 f74:	0f d0       	rcall	.+30     	; 0xf94 <__ultoa_invert+0x86>
 f76:	c9 f7       	brne	.-14     	; 0xf6a <__ultoa_invert+0x5c>
 f78:	f6 cf       	rjmp	.-20     	; 0xf66 <__ultoa_invert+0x58>
 f7a:	46 2f       	mov	r20, r22
 f7c:	4f 70       	andi	r20, 0x0F	; 15
 f7e:	40 5d       	subi	r20, 0xD0	; 208
 f80:	4a 33       	cpi	r20, 0x3A	; 58
 f82:	18 f0       	brcs	.+6      	; 0xf8a <__ultoa_invert+0x7c>
 f84:	49 5d       	subi	r20, 0xD9	; 217
 f86:	31 fd       	sbrc	r19, 1
 f88:	40 52       	subi	r20, 0x20	; 32
 f8a:	41 93       	st	Z+, r20
 f8c:	02 d0       	rcall	.+4      	; 0xf92 <__ultoa_invert+0x84>
 f8e:	a9 f7       	brne	.-22     	; 0xf7a <__ultoa_invert+0x6c>
 f90:	ea cf       	rjmp	.-44     	; 0xf66 <__ultoa_invert+0x58>
 f92:	b4 e0       	ldi	r27, 0x04	; 4
 f94:	a6 95       	lsr	r26
 f96:	97 95       	ror	r25
 f98:	87 95       	ror	r24
 f9a:	77 95       	ror	r23
 f9c:	67 95       	ror	r22
 f9e:	ba 95       	dec	r27
 fa0:	c9 f7       	brne	.-14     	; 0xf94 <__ultoa_invert+0x86>
 fa2:	00 97       	sbiw	r24, 0x00	; 0
 fa4:	61 05       	cpc	r22, r1
 fa6:	71 05       	cpc	r23, r1
 fa8:	08 95       	ret
 faa:	9b 01       	movw	r18, r22
 fac:	ac 01       	movw	r20, r24
 fae:	0a 2e       	mov	r0, r26
 fb0:	06 94       	lsr	r0
 fb2:	57 95       	ror	r21
 fb4:	47 95       	ror	r20
 fb6:	37 95       	ror	r19
 fb8:	27 95       	ror	r18
 fba:	ba 95       	dec	r27
 fbc:	c9 f7       	brne	.-14     	; 0xfb0 <__ultoa_invert+0xa2>
 fbe:	62 0f       	add	r22, r18
 fc0:	73 1f       	adc	r23, r19
 fc2:	84 1f       	adc	r24, r20
 fc4:	95 1f       	adc	r25, r21
 fc6:	a0 1d       	adc	r26, r0
 fc8:	08 95       	ret

00000fca <_exit>:
 fca:	f8 94       	cli

00000fcc <__stop_program>:
 fcc:	ff cf       	rjmp	.-2      	; 0xfcc <__stop_program>
