
Lab2_DTMF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000b04  00000b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  0080016e  0080016e  00000c06  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001a8a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001536  00000000  00000000  00001b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a6d  00000000  00000000  000030cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ae7  00000000  00000000  00003b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000258  00000000  00000000  00004624  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000460  00000000  00000000  0000487c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c0a  00000000  00000000  00004cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  000058e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e0       	ldi	r30, 0x04	; 4
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 36       	cpi	r26, 0x6E	; 110
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e6       	ldi	r26, 0x6E	; 110
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 3e       	cpi	r26, 0xE6	; 230
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <main>
  c6:	0c 94 80 05 	jmp	0xb00	; 0xb00 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_16>:
// putchar and getchar are in uart.c
FILE uart_str = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);

//**********************************************************
//timer 0 comare match ISR
ISR (TIMER0_COMPA_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  //Decrement the  time if they are not already zero
  if (time1>0) 	--time1;
  dc:	80 91 da 01 	lds	r24, 0x01DA
  e0:	90 91 db 01 	lds	r25, 0x01DB
  e4:	89 2b       	or	r24, r25
  e6:	49 f0       	breq	.+18     	; 0xfa <__vector_16+0x2c>
  e8:	80 91 da 01 	lds	r24, 0x01DA
  ec:	90 91 db 01 	lds	r25, 0x01DB
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	90 93 db 01 	sts	0x01DB, r25
  f6:	80 93 da 01 	sts	0x01DA, r24
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <play>:

// For compilation purposes only. MUST REMOVE!
void play(int a, int b, int c) {
 108:	08 95       	ret

0000010a <task1>:
	return;
}
 
//******************************* 
//Task 1  
void task1(void) {
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
	time1=t1;  //reset the task timer
 112:	84 e1       	ldi	r24, 0x14	; 20
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 db 01 	sts	0x01DB, r25
 11a:	80 93 da 01 	sts	0x01DA, r24

	//get lower nibble
	PORTDIR = 0x0f;
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	81 b9       	out	0x01, r24	; 1
	PORTDATA = 0xf0; 
 122:	90 ef       	ldi	r25, 0xF0	; 240
 124:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2a e1       	ldi	r18, 0x1A	; 26
 128:	2a 95       	dec	r18
 12a:	f1 f7       	brne	.-4      	; 0x128 <task1+0x1e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <task1+0x24>
	_delay_us(5);
	key = PORTIN;
 12e:	20 b1       	in	r18, 0x00	; 0
 130:	20 93 dc 01 	sts	0x01DC, r18
  
	//get upper nibble
	PORTDIR = 0xf0;
 134:	91 b9       	out	0x01, r25	; 1
	PORTDATA = 0x0f; 
 136:	82 b9       	out	0x02, r24	; 2
 138:	8a e1       	ldi	r24, 0x1A	; 26
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <task1+0x30>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <task1+0x36>
	_delay_us(5);
	key = key | PORTIN;
 140:	90 b1       	in	r25, 0x00	; 0
 142:	80 91 dc 01 	lds	r24, 0x01DC
 146:	98 2b       	or	r25, r24
 148:	90 93 dc 01 	sts	0x01DC, r25
  
	//find matching keycode in keytbl
	if (key != 0xff) {
 14c:	9f 3f       	cpi	r25, 0xFF	; 255
 14e:	a9 f0       	breq	.+42     	; 0x17a <task1+0x70>
	  for (butnum=0; butnum<maxkeys; butnum++) {   
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0a c0       	rjmp	.+20     	; 0x168 <task1+0x5e>
 154:	28 2f       	mov	r18, r24
 156:	2f 5f       	subi	r18, 0xFF	; 255
	  	if (keytbl[butnum]==key)  break;   
 158:	e8 2f       	mov	r30, r24
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	e2 5c       	subi	r30, 0xC2	; 194
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	30 81       	ld	r19, Z
 162:	39 17       	cp	r19, r25
 164:	31 f0       	breq	.+12     	; 0x172 <task1+0x68>
 166:	82 2f       	mov	r24, r18
	_delay_us(5);
	key = key | PORTIN;
  
	//find matching keycode in keytbl
	if (key != 0xff) {
	  for (butnum=0; butnum<maxkeys; butnum++) {   
 168:	8c 30       	cpi	r24, 0x0C	; 12
 16a:	a0 f3       	brcs	.-24     	; 0x154 <task1+0x4a>
	  	if (keytbl[butnum]==key)  break;   
	  }

	  if (butnum==maxkeys) butnum=0;
 16c:	8c 30       	cpi	r24, 0x0C	; 12
 16e:	09 f4       	brne	.+2      	; 0x172 <task1+0x68>
 170:	04 c0       	rjmp	.+8      	; 0x17a <task1+0x70>
	  else butnum++;	   //adjust by one to make range 1-16
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 d8 01 	sts	0x01D8, r24
 178:	02 c0       	rjmp	.+4      	; 0x17e <task1+0x74>
	}
	else butnum=0;
 17a:	10 92 d8 01 	sts	0x01D8, r1
	
	// Switching in the finite state machine.
	switch (PushState) {
 17e:	80 91 df 01 	lds	r24, 0x01DF
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	79 f0       	breq	.+30     	; 0x1a4 <task1+0x9a>
 186:	18 f4       	brcc	.+6      	; 0x18e <task1+0x84>
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	81 f5       	brne	.+96     	; 0x1ec <task1+0xe2>
 18c:	05 c0       	rjmp	.+10     	; 0x198 <task1+0x8e>
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	c1 f0       	breq	.+48     	; 0x1c2 <task1+0xb8>
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	59 f5       	brne	.+86     	; 0x1ec <task1+0xe2>
 196:	1d c0       	rjmp	.+58     	; 0x1d2 <task1+0xc8>
     case NoPush: 
        if (butnum != 0) PushState=MaybePush;
 198:	80 91 d8 01 	lds	r24, 0x01D8
 19c:	88 23       	and	r24, r24
 19e:	31 f1       	breq	.+76     	; 0x1ec <task1+0xe2>
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	1c c0       	rjmp	.+56     	; 0x1dc <task1+0xd2>
        else PushState=NoPush;
        break;
     case MaybePush:
        if (butnum != 0) {
 1a4:	80 91 d8 01 	lds	r24, 0x01D8
 1a8:	88 23       	and	r24, r24
 1aa:	49 f0       	breq	.+18     	; 0x1be <task1+0xb4>
           	PushState=Pushed; 
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	80 93 df 01 	sts	0x01DF, r24
			PushFlag=1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 d9 01 	sts	0x01D9, r24
			//Test mode override
			if (~PINB & 0x01) {
 1b8:	18 99       	sbic	0x03, 0	; 3
 1ba:	18 c0       	rjmp	.+48     	; 0x1ec <task1+0xe2>
 1bc:	15 c0       	rjmp	.+42     	; 0x1e8 <task1+0xde>
		 		PushFlag=0;
								
		   	}  
        }
        else PushState=NoPush;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0d c0       	rjmp	.+26     	; 0x1dc <task1+0xd2>
        break;
     case Pushed:  
        if (butnum != 0) {
 1c2:	80 91 d8 01 	lds	r24, 0x01D8
 1c6:	88 23       	and	r24, r24
 1c8:	11 f0       	breq	.+4      	; 0x1ce <task1+0xc4>
			PushState=Pushed;
			//Test mode override
			if (~PINB & 0x01) {
 1ca:	83 b1       	in	r24, 0x03	; 3
 1cc:	0f c0       	rjmp	.+30     	; 0x1ec <task1+0xe2>
					default:
						break;
				}	
		   	}  
		}
        else PushState=MaybeNoPush;    
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <task1+0xd2>
        break;
     case MaybeNoPush:
        if (butnum != 0) PushState=Pushed; 
 1d2:	80 91 d8 01 	lds	r24, 0x01D8
 1d6:	88 23       	and	r24, r24
 1d8:	21 f0       	breq	.+8      	; 0x1e2 <task1+0xd8>
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	80 93 df 01 	sts	0x01DF, r24
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <task1+0xe2>
        else {
           PushState=NoPush;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 df 01 	sts	0x01DF, r24
           PushFlag=0;
 1e8:	10 92 d9 01 	sts	0x01D9, r1
        }    
        break;
  	}

	if (PushFlag) {
 1ec:	80 91 d9 01 	lds	r24, 0x01D9
 1f0:	88 23       	and	r24, r24
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <task1+0xec>
 1f4:	71 c0       	rjmp	.+226    	; 0x2d8 <task1+0x1ce>
		PushFlag = 0;
 1f6:	10 92 d9 01 	sts	0x01D9, r1
		// The * button was pressed. Clear all memory.
		if (butnum == 10) {
 1fa:	20 91 d8 01 	lds	r18, 0x01D8
 1fe:	2a 30       	cpi	r18, 0x0A	; 10
 200:	89 f4       	brne	.+34     	; 0x224 <task1+0x11a>
 202:	ee e6       	ldi	r30, 0x6E	; 110
 204:	f1 e0       	ldi	r31, 0x01	; 1
			for (int i = 0; i < 12; i++) {
				mem[i] = 0;
 206:	11 92       	st	Z+, r1
 208:	11 92       	st	Z+, r1

	if (PushFlag) {
		PushFlag = 0;
		// The * button was pressed. Clear all memory.
		if (butnum == 10) {
			for (int i = 0; i < 12; i++) {
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	e6 38       	cpi	r30, 0x86	; 134
 20e:	f2 07       	cpc	r31, r18
 210:	d1 f7       	brne	.-12     	; 0x206 <task1+0xfc>
				mem[i] = 0;
			}
			mem_index = 0;
 212:	10 92 de 01 	sts	0x01DE, r1
 216:	10 92 dd 01 	sts	0x01DD, r1
 21a:	ce e6       	ldi	r28, 0x6E	; 110
 21c:	d1 e0       	ldi	r29, 0x01	; 1
				//play(high_freq[butnum], low_freq[butnum], 1000);
			}		
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
			fprintf(stdout, "%d ", mem[i]);
 21e:	03 e5       	ldi	r16, 0x53	; 83
 220:	11 e0       	ldi	r17, 0x01	; 1
 222:	35 c0       	rjmp	.+106    	; 0x28e <task1+0x184>
				mem[i] = 0;
			}
			mem_index = 0;
		}
		// The # button was pressed. Play all sounds in memory.
		else if (butnum == 12) {
 224:	2c 30       	cpi	r18, 0x0C	; 12
 226:	f9 f4       	brne	.+62     	; 0x266 <task1+0x15c>
 228:	ce e6       	ldi	r28, 0x6E	; 110
 22a:	d1 e0       	ldi	r29, 0x01	; 1
			for (int i = 0; i < 12; i++) {
				if (mem[i] != 0) {
					fprintf(stdout, "%u\n\r", mem[i]);
 22c:	0e e4       	ldi	r16, 0x4E	; 78
 22e:	11 e0       	ldi	r17, 0x01	; 1
			mem_index = 0;
		}
		// The # button was pressed. Play all sounds in memory.
		else if (butnum == 12) {
			for (int i = 0; i < 12; i++) {
				if (mem[i] != 0) {
 230:	89 91       	ld	r24, Y+
 232:	99 91       	ld	r25, Y+
 234:	00 97       	sbiw	r24, 0x00	; 0
 236:	91 f0       	breq	.+36     	; 0x25c <task1+0x152>
					fprintf(stdout, "%u\n\r", mem[i]);
 238:	9f 93       	push	r25
 23a:	8f 93       	push	r24
 23c:	1f 93       	push	r17
 23e:	0f 93       	push	r16
 240:	80 91 e3 01 	lds	r24, 0x01E3
 244:	8f 93       	push	r24
 246:	80 91 e2 01 	lds	r24, 0x01E2
 24a:	8f 93       	push	r24
 24c:	0e 94 a0 02 	call	0x540	; 0x540 <fprintf>
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
			}
			mem_index = 0;
		}
		// The # button was pressed. Play all sounds in memory.
		else if (butnum == 12) {
			for (int i = 0; i < 12; i++) {
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	c6 38       	cpi	r28, 0x86	; 134
 260:	d8 07       	cpc	r29, r24
 262:	31 f7       	brne	.-52     	; 0x230 <task1+0x126>
 264:	da cf       	rjmp	.-76     	; 0x21a <task1+0x110>
				}
			}
		}
		// A normal button press. 
		else {
			if (mem_index < 12) {
 266:	80 91 dd 01 	lds	r24, 0x01DD
 26a:	90 91 de 01 	lds	r25, 0x01DE
 26e:	8c 30       	cpi	r24, 0x0C	; 12
 270:	91 05       	cpc	r25, r1
 272:	98 f6       	brcc	.-90     	; 0x21a <task1+0x110>
				mem[mem_index] = butnum;
 274:	fc 01       	movw	r30, r24
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	e2 59       	subi	r30, 0x92	; 146
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	20 83       	st	Z, r18
 280:	11 82       	std	Z+1, r1	; 0x01
				mem_index++;
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	90 93 de 01 	sts	0x01DE, r25
 288:	80 93 dd 01 	sts	0x01DD, r24
 28c:	c6 cf       	rjmp	.-116    	; 0x21a <task1+0x110>
				//play(high_freq[butnum], low_freq[butnum], 1000);
			}		
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
			fprintf(stdout, "%d ", mem[i]);
 28e:	88 81       	ld	r24, Y
 290:	99 81       	ldd	r25, Y+1	; 0x01
 292:	22 96       	adiw	r28, 0x02	; 2
 294:	9f 93       	push	r25
 296:	8f 93       	push	r24
 298:	1f 93       	push	r17
 29a:	0f 93       	push	r16
 29c:	80 91 e3 01 	lds	r24, 0x01E3
 2a0:	8f 93       	push	r24
 2a2:	80 91 e2 01 	lds	r24, 0x01E2
 2a6:	8f 93       	push	r24
 2a8:	0e 94 a0 02 	call	0x540	; 0x540 <fprintf>
				mem_index++;
				//play(high_freq[butnum], low_freq[butnum], 1000);
			}		
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	c6 38       	cpi	r28, 0x86	; 134
 2bc:	d2 07       	cpc	r29, r18
 2be:	39 f7       	brne	.-50     	; 0x28e <task1+0x184>
			fprintf(stdout, "%d ", mem[i]);
		}
		fprintf(stdout, "\n\r");
 2c0:	60 91 e2 01 	lds	r22, 0x01E2
 2c4:	70 91 e3 01 	lds	r23, 0x01E3
 2c8:	82 e6       	ldi	r24, 0x62	; 98
 2ca:	91 e0       	ldi	r25, 0x01	; 1
	}
} 
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
		}
		// For debugging purposes without sound.
		for (int i = 0; i < 12; i++) {
			fprintf(stdout, "%d ", mem[i]);
		}
		fprintf(stdout, "\n\r");
 2d4:	0c 94 b0 02 	jmp	0x560	; 0x560 <fputs>
	}
} 
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	08 95       	ret

000002e2 <initialize>:
 
//Initialization used for the timer interrupts for debouncing
void initialize(void) {
	//set up timer 0 for 1 mSec timebase 
	OCR0A = 249;  		//set the compare re to 250 time ticks
 2e2:	89 ef       	ldi	r24, 0xF9	; 249
 2e4:	87 bd       	out	0x27, r24	; 39
	TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	80 93 6e 00 	sts	0x006E, r24
	//set prescalar to divide by 64 
	TCCR0B= 3; //0b00000011;	
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	95 bd       	out	0x25, r25	; 37
	// turn on clear-on-match
	TCCR0A= (1<<WGM01) ;
 2f0:	84 bd       	out	0x24, r24	; 36

	//init the task timers
	time1=t1;  
 2f2:	84 e1       	ldi	r24, 0x14	; 20
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	90 93 db 01 	sts	0x01DB, r25
 2fa:	80 93 da 01 	sts	0x01DA, r24
	// PORT B is an input
	DDRB = 0x00;
 2fe:	14 b8       	out	0x04, r1	; 4
	//for no button push
	PushFlag = 0;
 300:	10 92 d9 01 	sts	0x01D9, r1
	//init the state machine
	PushState = NoPush;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 df 01 	sts	0x01DF, r24

	mem_index = 0;
 30a:	10 92 de 01 	sts	0x01DE, r1
 30e:	10 92 dd 01 	sts	0x01DD, r1

	//crank up the ISRs
	sei() ;
 312:	78 94       	sei
 314:	08 95       	ret

00000316 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 316:	87 e6       	ldi	r24, 0x67	; 103
 318:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 31c:	88 e1       	ldi	r24, 0x18	; 24
 31e:	80 93 c1 00 	sts	0x00C1, r24
 322:	08 95       	ret

00000324 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 324:	cf 93       	push	r28
 326:	c8 2f       	mov	r28, r24

  if (c == '\a')
 328:	87 30       	cpi	r24, 0x07	; 7
 32a:	49 f4       	brne	.+18     	; 0x33e <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
 32c:	60 91 e4 01 	lds	r22, 0x01E4
 330:	70 91 e5 01 	lds	r23, 0x01E5
 334:	85 e6       	ldi	r24, 0x65	; 101
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 b0 02 	call	0x560	; 0x560 <fputs>
 33c:	0b c0       	rjmp	.+22     	; 0x354 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
 33e:	8a 30       	cpi	r24, 0x0A	; 10
 340:	19 f4       	brne	.+6      	; 0x348 <uart_putchar+0x24>
    uart_putchar('\r', stream);
 342:	8d e0       	ldi	r24, 0x0D	; 13
 344:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 348:	80 91 c0 00 	lds	r24, 0x00C0
 34c:	85 ff       	sbrs	r24, 5
 34e:	fc cf       	rjmp	.-8      	; 0x348 <uart_putchar+0x24>
  UDR0 = c;
 350:	c0 93 c6 00 	sts	0x00C6, r28

  return 0;
}
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	8c 01       	movw	r16, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 36a:	80 91 86 01 	lds	r24, 0x0186
 36e:	90 91 87 01 	lds	r25, 0x0187
 372:	89 2b       	or	r24, r25
 374:	09 f0       	breq	.+2      	; 0x378 <uart_getchar+0x1c>
 376:	a1 c0       	rjmp	.+322    	; 0x4ba <uart_getchar+0x15e>
 378:	c8 e8       	ldi	r28, 0x88	; 136
 37a:	d1 e0       	ldi	r29, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 37c:	80 91 c0 00 	lds	r24, 0x00C0
 380:	87 ff       	sbrs	r24, 7
 382:	fc cf       	rjmp	.-8      	; 0x37c <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
 384:	80 91 c0 00 	lds	r24, 0x00C0
 388:	84 fd       	sbrc	r24, 4
 38a:	aa c0       	rjmp	.+340    	; 0x4e0 <uart_getchar+0x184>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 38c:	80 91 c0 00 	lds	r24, 0x00C0
 390:	83 fd       	sbrc	r24, 3
 392:	a9 c0       	rjmp	.+338    	; 0x4e6 <uart_getchar+0x18a>
	  return _FDEV_ERR;
	c = UDR0;
 394:	80 91 c6 00 	lds	r24, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 398:	8d 30       	cpi	r24, 0x0D	; 13
 39a:	61 f4       	brne	.+24     	; 0x3b4 <uart_getchar+0x58>
	  c = '\n';
	if (c == '\n')
	  {
	    *cp = c;
 39c:	8a e0       	ldi	r24, 0x0A	; 10
 39e:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
 3a0:	b8 01       	movw	r22, r16
 3a2:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
	    rxp = b;
 3a6:	88 e8       	ldi	r24, 0x88	; 136
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	90 93 87 01 	sts	0x0187, r25
 3ae:	80 93 86 01 	sts	0x0186, r24
	    break;
 3b2:	83 c0       	rjmp	.+262    	; 0x4ba <uart_getchar+0x15e>
	  return _FDEV_ERR;
	c = UDR0;
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
	  c = '\n';
	if (c == '\n')
 3b4:	8a 30       	cpi	r24, 0x0A	; 10
 3b6:	91 f3       	breq	.-28     	; 0x39c <uart_getchar+0x40>
	    *cp = c;
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
 3b8:	89 30       	cpi	r24, 0x09	; 9
 3ba:	09 f4       	brne	.+2      	; 0x3be <uart_getchar+0x62>
	  c = ' ';
 3bc:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 3be:	98 2f       	mov	r25, r24
 3c0:	90 52       	subi	r25, 0x20	; 32
 3c2:	9f 35       	cpi	r25, 0x5F	; 95
 3c4:	10 f0       	brcs	.+4      	; 0x3ca <uart_getchar+0x6e>
 3c6:	80 3a       	cpi	r24, 0xA0	; 160
 3c8:	90 f0       	brcs	.+36     	; 0x3ee <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	c7 3d       	cpi	r28, 0xD7	; 215
 3ce:	d9 07       	cpc	r29, r25
 3d0:	49 f4       	brne	.+18     	; 0x3e4 <uart_getchar+0x88>
uart_putchar(char c, FILE *stream)
{

  if (c == '\a')
    {
      fputs("*ring*\n", stderr);
 3d2:	60 91 e4 01 	lds	r22, 0x01E4
 3d6:	70 91 e5 01 	lds	r23, 0x01E5
 3da:	85 e6       	ldi	r24, 0x65	; 101
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 b0 02 	call	0x560	; 0x560 <fputs>
 3e2:	cc cf       	rjmp	.-104    	; 0x37c <uart_getchar+0x20>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 3e4:	89 93       	st	Y+, r24
		uart_putchar(c, stream);
 3e6:	b8 01       	movw	r22, r16
 3e8:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
 3ec:	c7 cf       	rjmp	.-114    	; 0x37c <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
 3ee:	82 31       	cpi	r24, 0x12	; 18
 3f0:	29 f1       	breq	.+74     	; 0x43c <uart_getchar+0xe0>
 3f2:	38 f4       	brcc	.+14     	; 0x402 <uart_getchar+0xa6>
 3f4:	83 30       	cpi	r24, 0x03	; 3
 3f6:	09 f4       	brne	.+2      	; 0x3fa <uart_getchar+0x9e>
 3f8:	76 c0       	rjmp	.+236    	; 0x4e6 <uart_getchar+0x18a>
 3fa:	88 30       	cpi	r24, 0x08	; 8
 3fc:	09 f0       	breq	.+2      	; 0x400 <uart_getchar+0xa4>
 3fe:	be cf       	rjmp	.-132    	; 0x37c <uart_getchar+0x20>
 400:	09 c0       	rjmp	.+18     	; 0x414 <uart_getchar+0xb8>
 402:	87 31       	cpi	r24, 0x17	; 23
 404:	09 f4       	brne	.+2      	; 0x408 <uart_getchar+0xac>
 406:	4d c0       	rjmp	.+154    	; 0x4a2 <uart_getchar+0x146>
 408:	8f 37       	cpi	r24, 0x7F	; 127
 40a:	21 f0       	breq	.+8      	; 0x414 <uart_getchar+0xb8>
 40c:	85 31       	cpi	r24, 0x15	; 21
 40e:	09 f0       	breq	.+2      	; 0x412 <uart_getchar+0xb6>
 410:	b5 cf       	rjmp	.-150    	; 0x37c <uart_getchar+0x20>
 412:	34 c0       	rjmp	.+104    	; 0x47c <uart_getchar+0x120>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 414:	e1 e0       	ldi	r30, 0x01	; 1
 416:	c8 38       	cpi	r28, 0x88	; 136
 418:	de 07       	cpc	r29, r30
 41a:	09 f0       	breq	.+2      	; 0x41e <uart_getchar+0xc2>
 41c:	08 f4       	brcc	.+2      	; 0x420 <uart_getchar+0xc4>
 41e:	ae cf       	rjmp	.-164    	; 0x37c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
 420:	b8 01       	movw	r22, r16
 422:	88 e0       	ldi	r24, 0x08	; 8
 424:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
		uart_putchar(' ', stream);
 428:	b8 01       	movw	r22, r16
 42a:	80 e2       	ldi	r24, 0x20	; 32
 42c:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
		uart_putchar('\b', stream);
 430:	b8 01       	movw	r22, r16
 432:	88 e0       	ldi	r24, 0x08	; 8
 434:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
		cp--;
 438:	21 97       	sbiw	r28, 0x01	; 1
 43a:	a0 cf       	rjmp	.-192    	; 0x37c <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 43c:	b8 01       	movw	r22, r16
 43e:	8d e0       	ldi	r24, 0x0D	; 13
 440:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 444:	88 e8       	ldi	r24, 0x88	; 136
 446:	e8 2e       	mov	r14, r24
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	f8 2e       	mov	r15, r24
 44c:	06 c0       	rjmp	.+12     	; 0x45a <uart_getchar+0xfe>
	      uart_putchar(*cp2, stream);
 44e:	b8 01       	movw	r22, r16
 450:	f7 01       	movw	r30, r14
 452:	81 91       	ld	r24, Z+
 454:	7f 01       	movw	r14, r30
 456:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 45a:	ec 16       	cp	r14, r28
 45c:	fd 06       	cpc	r15, r29
 45e:	b8 f3       	brcs	.-18     	; 0x44e <uart_getchar+0xf2>
 460:	8d cf       	rjmp	.-230    	; 0x37c <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 462:	b8 01       	movw	r22, r16
 464:	88 e0       	ldi	r24, 0x08	; 8
 466:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
		uart_putchar(' ', stream);
 46a:	b8 01       	movw	r22, r16
 46c:	80 e2       	ldi	r24, 0x20	; 32
 46e:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
		uart_putchar('\b', stream);
 472:	b8 01       	movw	r22, r16
 474:	88 e0       	ldi	r24, 0x08	; 8
 476:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
		cp--;
 47a:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 47c:	f1 e0       	ldi	r31, 0x01	; 1
 47e:	c8 38       	cpi	r28, 0x88	; 136
 480:	df 07       	cpc	r29, r31
 482:	09 f0       	breq	.+2      	; 0x486 <uart_getchar+0x12a>
 484:	70 f7       	brcc	.-36     	; 0x462 <uart_getchar+0x106>
 486:	7a cf       	rjmp	.-268    	; 0x37c <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 488:	b8 01       	movw	r22, r16
 48a:	88 e0       	ldi	r24, 0x08	; 8
 48c:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
		uart_putchar(' ', stream);
 490:	b8 01       	movw	r22, r16
 492:	80 e2       	ldi	r24, 0x20	; 32
 494:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
		uart_putchar('\b', stream);
 498:	b8 01       	movw	r22, r16
 49a:	88 e0       	ldi	r24, 0x08	; 8
 49c:	0e 94 92 01 	call	0x324	; 0x324 <uart_putchar>
		cp--;
 4a0:	e7 01       	movw	r28, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	c8 38       	cpi	r28, 0x88	; 136
 4a6:	d8 07       	cpc	r29, r24
 4a8:	09 f0       	breq	.+2      	; 0x4ac <uart_getchar+0x150>
 4aa:	08 f4       	brcc	.+2      	; 0x4ae <uart_getchar+0x152>
 4ac:	67 cf       	rjmp	.-306    	; 0x37c <uart_getchar+0x20>
 4ae:	fe 01       	movw	r30, r28
 4b0:	82 91       	ld	r24, -Z
 4b2:	7f 01       	movw	r14, r30
 4b4:	80 32       	cpi	r24, 0x20	; 32
 4b6:	41 f7       	brne	.-48     	; 0x488 <uart_getchar+0x12c>
 4b8:	61 cf       	rjmp	.-318    	; 0x37c <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
 4ba:	e0 91 86 01 	lds	r30, 0x0186
 4be:	f0 91 87 01 	lds	r31, 0x0187
 4c2:	20 81       	ld	r18, Z
  if (c == '\n')
 4c4:	2a 30       	cpi	r18, 0x0A	; 10
 4c6:	31 f0       	breq	.+12     	; 0x4d4 <uart_getchar+0x178>
	      }
	    break;
	  }
      }

  c = *rxp++;
 4c8:	31 96       	adiw	r30, 0x01	; 1
 4ca:	f0 93 87 01 	sts	0x0187, r31
 4ce:	e0 93 86 01 	sts	0x0186, r30
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <uart_getchar+0x180>
  if (c == '\n')
    rxp = 0;
 4d4:	10 92 87 01 	sts	0x0187, r1
 4d8:	10 92 86 01 	sts	0x0186, r1

  return c;
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <uart_getchar+0x18e>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 4e0:	2e ef       	ldi	r18, 0xFE	; 254
 4e2:	3f ef       	ldi	r19, 0xFF	; 255
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <uart_getchar+0x18e>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 4e6:	2f ef       	ldi	r18, 0xFF	; 255
 4e8:	3f ef       	ldi	r19, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 4ea:	c9 01       	movw	r24, r18
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	08 95       	ret

000004fa <main>:
}

int main(void) {
  // Init port B to show keyboard result
  DDRB = 0xff;
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	84 b9       	out	0x04, r24	; 4
  // and turn out the LEDs
  PORTB = 0xff;   
 4fe:	85 b9       	out	0x05, r24	; 5
  
  // init the UART
  uart_init();
 500:	0e 94 8b 01 	call	0x316	; 0x316 <uart_init>
  stdout = stdin = stderr = &uart_str;
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	90 93 e5 01 	sts	0x01E5, r25
 50c:	80 93 e4 01 	sts	0x01E4, r24
 510:	90 93 e1 01 	sts	0x01E1, r25
 514:	80 93 e0 01 	sts	0x01E0, r24
 518:	90 93 e3 01 	sts	0x01E3, r25
 51c:	80 93 e2 01 	sts	0x01E2, r24
  fprintf(stdout, "Starting...\n\r");
 520:	bc 01       	movw	r22, r24
 522:	87 e5       	ldi	r24, 0x57	; 87
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0e 94 b0 02 	call	0x560	; 0x560 <fputs>

  initialize();
 52a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <initialize>

  //endless loop to read keyboard
  while(1) {
	//Used for debouncing
    if (time1==0) {
 52e:	80 91 da 01 	lds	r24, 0x01DA
 532:	90 91 db 01 	lds	r25, 0x01DB
 536:	89 2b       	or	r24, r25
 538:	d1 f7       	brne	.-12     	; 0x52e <main+0x34>
	  	//fprintf(stdout, "Entering task2...\n\r");	
		task1();
 53a:	0e 94 85 00 	call	0x10a	; 0x10a <task1>
 53e:	f7 cf       	rjmp	.-18     	; 0x52e <main+0x34>

00000540 <fprintf>:
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
 548:	ce 01       	movw	r24, r28
 54a:	09 96       	adiw	r24, 0x09	; 9
 54c:	ac 01       	movw	r20, r24
 54e:	6f 81       	ldd	r22, Y+7	; 0x07
 550:	78 85       	ldd	r23, Y+8	; 0x08
 552:	8d 81       	ldd	r24, Y+5	; 0x05
 554:	9e 81       	ldd	r25, Y+6	; 0x06
 556:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vfprintf>
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <fputs>:
 560:	ef 92       	push	r14
 562:	ff 92       	push	r15
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	7c 01       	movw	r14, r24
 56e:	8b 01       	movw	r16, r22
 570:	db 01       	movw	r26, r22
 572:	13 96       	adiw	r26, 0x03	; 3
 574:	8c 91       	ld	r24, X
 576:	81 ff       	sbrs	r24, 1
 578:	14 c0       	rjmp	.+40     	; 0x5a2 <fputs+0x42>
 57a:	c0 e0       	ldi	r28, 0x00	; 0
 57c:	d0 e0       	ldi	r29, 0x00	; 0
 57e:	0b c0       	rjmp	.+22     	; 0x596 <fputs+0x36>
 580:	d8 01       	movw	r26, r16
 582:	18 96       	adiw	r26, 0x08	; 8
 584:	ed 91       	ld	r30, X+
 586:	fc 91       	ld	r31, X
 588:	19 97       	sbiw	r26, 0x09	; 9
 58a:	b8 01       	movw	r22, r16
 58c:	09 95       	icall
 58e:	89 2b       	or	r24, r25
 590:	11 f0       	breq	.+4      	; 0x596 <fputs+0x36>
 592:	cf ef       	ldi	r28, 0xFF	; 255
 594:	df ef       	ldi	r29, 0xFF	; 255
 596:	f7 01       	movw	r30, r14
 598:	81 91       	ld	r24, Z+
 59a:	7f 01       	movw	r14, r30
 59c:	81 11       	cpse	r24, r1
 59e:	f0 cf       	rjmp	.-32     	; 0x580 <fputs+0x20>
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <fputs+0x46>
 5a2:	cf ef       	ldi	r28, 0xFF	; 255
 5a4:	df ef       	ldi	r29, 0xFF	; 255
 5a6:	ce 01       	movw	r24, r28
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	08 95       	ret

000005b6 <vfprintf>:
 5b6:	2f 92       	push	r2
 5b8:	3f 92       	push	r3
 5ba:	4f 92       	push	r4
 5bc:	5f 92       	push	r5
 5be:	6f 92       	push	r6
 5c0:	7f 92       	push	r7
 5c2:	8f 92       	push	r8
 5c4:	9f 92       	push	r9
 5c6:	af 92       	push	r10
 5c8:	bf 92       	push	r11
 5ca:	cf 92       	push	r12
 5cc:	df 92       	push	r13
 5ce:	ef 92       	push	r14
 5d0:	ff 92       	push	r15
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	2c 97       	sbiw	r28, 0x0c	; 12
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	7c 01       	movw	r14, r24
 5ec:	6b 01       	movw	r12, r22
 5ee:	8a 01       	movw	r16, r20
 5f0:	fc 01       	movw	r30, r24
 5f2:	17 82       	std	Z+7, r1	; 0x07
 5f4:	16 82       	std	Z+6, r1	; 0x06
 5f6:	83 81       	ldd	r24, Z+3	; 0x03
 5f8:	81 ff       	sbrs	r24, 1
 5fa:	c6 c1       	rjmp	.+908    	; 0x988 <vfprintf+0x3d2>
 5fc:	88 24       	eor	r8, r8
 5fe:	83 94       	inc	r8
 600:	91 2c       	mov	r9, r1
 602:	8c 0e       	add	r8, r28
 604:	9d 1e       	adc	r9, r29
 606:	f7 01       	movw	r30, r14
 608:	93 81       	ldd	r25, Z+3	; 0x03
 60a:	f6 01       	movw	r30, r12
 60c:	93 fd       	sbrc	r25, 3
 60e:	85 91       	lpm	r24, Z+
 610:	93 ff       	sbrs	r25, 3
 612:	81 91       	ld	r24, Z+
 614:	6f 01       	movw	r12, r30
 616:	88 23       	and	r24, r24
 618:	09 f4       	brne	.+2      	; 0x61c <vfprintf+0x66>
 61a:	b2 c1       	rjmp	.+868    	; 0x980 <vfprintf+0x3ca>
 61c:	85 32       	cpi	r24, 0x25	; 37
 61e:	39 f4       	brne	.+14     	; 0x62e <vfprintf+0x78>
 620:	93 fd       	sbrc	r25, 3
 622:	85 91       	lpm	r24, Z+
 624:	93 ff       	sbrs	r25, 3
 626:	81 91       	ld	r24, Z+
 628:	6f 01       	movw	r12, r30
 62a:	85 32       	cpi	r24, 0x25	; 37
 62c:	29 f4       	brne	.+10     	; 0x638 <vfprintf+0x82>
 62e:	b7 01       	movw	r22, r14
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 636:	e7 cf       	rjmp	.-50     	; 0x606 <vfprintf+0x50>
 638:	51 2c       	mov	r5, r1
 63a:	31 2c       	mov	r3, r1
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	20 32       	cpi	r18, 0x20	; 32
 640:	a8 f4       	brcc	.+42     	; 0x66c <vfprintf+0xb6>
 642:	8b 32       	cpi	r24, 0x2B	; 43
 644:	61 f0       	breq	.+24     	; 0x65e <vfprintf+0xa8>
 646:	28 f4       	brcc	.+10     	; 0x652 <vfprintf+0x9c>
 648:	80 32       	cpi	r24, 0x20	; 32
 64a:	51 f0       	breq	.+20     	; 0x660 <vfprintf+0xaa>
 64c:	83 32       	cpi	r24, 0x23	; 35
 64e:	71 f4       	brne	.+28     	; 0x66c <vfprintf+0xb6>
 650:	0b c0       	rjmp	.+22     	; 0x668 <vfprintf+0xb2>
 652:	8d 32       	cpi	r24, 0x2D	; 45
 654:	39 f0       	breq	.+14     	; 0x664 <vfprintf+0xae>
 656:	80 33       	cpi	r24, 0x30	; 48
 658:	49 f4       	brne	.+18     	; 0x66c <vfprintf+0xb6>
 65a:	21 60       	ori	r18, 0x01	; 1
 65c:	28 c0       	rjmp	.+80     	; 0x6ae <vfprintf+0xf8>
 65e:	22 60       	ori	r18, 0x02	; 2
 660:	24 60       	ori	r18, 0x04	; 4
 662:	25 c0       	rjmp	.+74     	; 0x6ae <vfprintf+0xf8>
 664:	28 60       	ori	r18, 0x08	; 8
 666:	23 c0       	rjmp	.+70     	; 0x6ae <vfprintf+0xf8>
 668:	20 61       	ori	r18, 0x10	; 16
 66a:	21 c0       	rjmp	.+66     	; 0x6ae <vfprintf+0xf8>
 66c:	27 fd       	sbrc	r18, 7
 66e:	27 c0       	rjmp	.+78     	; 0x6be <vfprintf+0x108>
 670:	38 2f       	mov	r19, r24
 672:	30 53       	subi	r19, 0x30	; 48
 674:	3a 30       	cpi	r19, 0x0A	; 10
 676:	78 f4       	brcc	.+30     	; 0x696 <vfprintf+0xe0>
 678:	26 ff       	sbrs	r18, 6
 67a:	06 c0       	rjmp	.+12     	; 0x688 <vfprintf+0xd2>
 67c:	fa e0       	ldi	r31, 0x0A	; 10
 67e:	5f 9e       	mul	r5, r31
 680:	30 0d       	add	r19, r0
 682:	11 24       	eor	r1, r1
 684:	53 2e       	mov	r5, r19
 686:	13 c0       	rjmp	.+38     	; 0x6ae <vfprintf+0xf8>
 688:	8a e0       	ldi	r24, 0x0A	; 10
 68a:	38 9e       	mul	r3, r24
 68c:	30 0d       	add	r19, r0
 68e:	11 24       	eor	r1, r1
 690:	33 2e       	mov	r3, r19
 692:	20 62       	ori	r18, 0x20	; 32
 694:	0c c0       	rjmp	.+24     	; 0x6ae <vfprintf+0xf8>
 696:	8e 32       	cpi	r24, 0x2E	; 46
 698:	21 f4       	brne	.+8      	; 0x6a2 <vfprintf+0xec>
 69a:	26 fd       	sbrc	r18, 6
 69c:	71 c1       	rjmp	.+738    	; 0x980 <vfprintf+0x3ca>
 69e:	20 64       	ori	r18, 0x40	; 64
 6a0:	06 c0       	rjmp	.+12     	; 0x6ae <vfprintf+0xf8>
 6a2:	8c 36       	cpi	r24, 0x6C	; 108
 6a4:	11 f4       	brne	.+4      	; 0x6aa <vfprintf+0xf4>
 6a6:	20 68       	ori	r18, 0x80	; 128
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <vfprintf+0xf8>
 6aa:	88 36       	cpi	r24, 0x68	; 104
 6ac:	41 f4       	brne	.+16     	; 0x6be <vfprintf+0x108>
 6ae:	f6 01       	movw	r30, r12
 6b0:	93 fd       	sbrc	r25, 3
 6b2:	85 91       	lpm	r24, Z+
 6b4:	93 ff       	sbrs	r25, 3
 6b6:	81 91       	ld	r24, Z+
 6b8:	6f 01       	movw	r12, r30
 6ba:	81 11       	cpse	r24, r1
 6bc:	c0 cf       	rjmp	.-128    	; 0x63e <vfprintf+0x88>
 6be:	98 2f       	mov	r25, r24
 6c0:	95 54       	subi	r25, 0x45	; 69
 6c2:	93 30       	cpi	r25, 0x03	; 3
 6c4:	18 f0       	brcs	.+6      	; 0x6cc <vfprintf+0x116>
 6c6:	90 52       	subi	r25, 0x20	; 32
 6c8:	93 30       	cpi	r25, 0x03	; 3
 6ca:	28 f4       	brcc	.+10     	; 0x6d6 <vfprintf+0x120>
 6cc:	0c 5f       	subi	r16, 0xFC	; 252
 6ce:	1f 4f       	sbci	r17, 0xFF	; 255
 6d0:	ff e3       	ldi	r31, 0x3F	; 63
 6d2:	f9 83       	std	Y+1, r31	; 0x01
 6d4:	0d c0       	rjmp	.+26     	; 0x6f0 <vfprintf+0x13a>
 6d6:	83 36       	cpi	r24, 0x63	; 99
 6d8:	31 f0       	breq	.+12     	; 0x6e6 <vfprintf+0x130>
 6da:	83 37       	cpi	r24, 0x73	; 115
 6dc:	71 f0       	breq	.+28     	; 0x6fa <vfprintf+0x144>
 6de:	83 35       	cpi	r24, 0x53	; 83
 6e0:	09 f0       	breq	.+2      	; 0x6e4 <vfprintf+0x12e>
 6e2:	5e c0       	rjmp	.+188    	; 0x7a0 <vfprintf+0x1ea>
 6e4:	23 c0       	rjmp	.+70     	; 0x72c <vfprintf+0x176>
 6e6:	f8 01       	movw	r30, r16
 6e8:	80 81       	ld	r24, Z
 6ea:	89 83       	std	Y+1, r24	; 0x01
 6ec:	0e 5f       	subi	r16, 0xFE	; 254
 6ee:	1f 4f       	sbci	r17, 0xFF	; 255
 6f0:	44 24       	eor	r4, r4
 6f2:	43 94       	inc	r4
 6f4:	51 2c       	mov	r5, r1
 6f6:	54 01       	movw	r10, r8
 6f8:	15 c0       	rjmp	.+42     	; 0x724 <vfprintf+0x16e>
 6fa:	38 01       	movw	r6, r16
 6fc:	f2 e0       	ldi	r31, 0x02	; 2
 6fe:	6f 0e       	add	r6, r31
 700:	71 1c       	adc	r7, r1
 702:	f8 01       	movw	r30, r16
 704:	a0 80       	ld	r10, Z
 706:	b1 80       	ldd	r11, Z+1	; 0x01
 708:	26 ff       	sbrs	r18, 6
 70a:	03 c0       	rjmp	.+6      	; 0x712 <vfprintf+0x15c>
 70c:	65 2d       	mov	r22, r5
 70e:	70 e0       	ldi	r23, 0x00	; 0
 710:	02 c0       	rjmp	.+4      	; 0x716 <vfprintf+0x160>
 712:	6f ef       	ldi	r22, 0xFF	; 255
 714:	7f ef       	ldi	r23, 0xFF	; 255
 716:	c5 01       	movw	r24, r10
 718:	2c 87       	std	Y+12, r18	; 0x0c
 71a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <strnlen>
 71e:	2c 01       	movw	r4, r24
 720:	83 01       	movw	r16, r6
 722:	2c 85       	ldd	r18, Y+12	; 0x0c
 724:	6f e7       	ldi	r22, 0x7F	; 127
 726:	26 2e       	mov	r2, r22
 728:	22 22       	and	r2, r18
 72a:	18 c0       	rjmp	.+48     	; 0x75c <vfprintf+0x1a6>
 72c:	38 01       	movw	r6, r16
 72e:	f2 e0       	ldi	r31, 0x02	; 2
 730:	6f 0e       	add	r6, r31
 732:	71 1c       	adc	r7, r1
 734:	f8 01       	movw	r30, r16
 736:	a0 80       	ld	r10, Z
 738:	b1 80       	ldd	r11, Z+1	; 0x01
 73a:	26 ff       	sbrs	r18, 6
 73c:	03 c0       	rjmp	.+6      	; 0x744 <vfprintf+0x18e>
 73e:	65 2d       	mov	r22, r5
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <vfprintf+0x192>
 744:	6f ef       	ldi	r22, 0xFF	; 255
 746:	7f ef       	ldi	r23, 0xFF	; 255
 748:	c5 01       	movw	r24, r10
 74a:	2c 87       	std	Y+12, r18	; 0x0c
 74c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <strnlen_P>
 750:	2c 01       	movw	r4, r24
 752:	2c 85       	ldd	r18, Y+12	; 0x0c
 754:	50 e8       	ldi	r21, 0x80	; 128
 756:	25 2e       	mov	r2, r21
 758:	22 2a       	or	r2, r18
 75a:	83 01       	movw	r16, r6
 75c:	23 fc       	sbrc	r2, 3
 75e:	1c c0       	rjmp	.+56     	; 0x798 <vfprintf+0x1e2>
 760:	06 c0       	rjmp	.+12     	; 0x76e <vfprintf+0x1b8>
 762:	b7 01       	movw	r22, r14
 764:	80 e2       	ldi	r24, 0x20	; 32
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 76c:	3a 94       	dec	r3
 76e:	83 2d       	mov	r24, r3
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	48 16       	cp	r4, r24
 774:	59 06       	cpc	r5, r25
 776:	a8 f3       	brcs	.-22     	; 0x762 <vfprintf+0x1ac>
 778:	0f c0       	rjmp	.+30     	; 0x798 <vfprintf+0x1e2>
 77a:	f5 01       	movw	r30, r10
 77c:	27 fc       	sbrc	r2, 7
 77e:	85 91       	lpm	r24, Z+
 780:	27 fe       	sbrs	r2, 7
 782:	81 91       	ld	r24, Z+
 784:	5f 01       	movw	r10, r30
 786:	b7 01       	movw	r22, r14
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 78e:	31 10       	cpse	r3, r1
 790:	3a 94       	dec	r3
 792:	f1 e0       	ldi	r31, 0x01	; 1
 794:	4f 1a       	sub	r4, r31
 796:	51 08       	sbc	r5, r1
 798:	41 14       	cp	r4, r1
 79a:	51 04       	cpc	r5, r1
 79c:	71 f7       	brne	.-36     	; 0x77a <vfprintf+0x1c4>
 79e:	ed c0       	rjmp	.+474    	; 0x97a <vfprintf+0x3c4>
 7a0:	84 36       	cpi	r24, 0x64	; 100
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <vfprintf+0x1f2>
 7a4:	89 36       	cpi	r24, 0x69	; 105
 7a6:	41 f5       	brne	.+80     	; 0x7f8 <vfprintf+0x242>
 7a8:	f8 01       	movw	r30, r16
 7aa:	27 ff       	sbrs	r18, 7
 7ac:	07 c0       	rjmp	.+14     	; 0x7bc <vfprintf+0x206>
 7ae:	60 81       	ld	r22, Z
 7b0:	71 81       	ldd	r23, Z+1	; 0x01
 7b2:	82 81       	ldd	r24, Z+2	; 0x02
 7b4:	93 81       	ldd	r25, Z+3	; 0x03
 7b6:	0c 5f       	subi	r16, 0xFC	; 252
 7b8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ba:	08 c0       	rjmp	.+16     	; 0x7cc <vfprintf+0x216>
 7bc:	60 81       	ld	r22, Z
 7be:	71 81       	ldd	r23, Z+1	; 0x01
 7c0:	88 27       	eor	r24, r24
 7c2:	77 fd       	sbrc	r23, 7
 7c4:	80 95       	com	r24
 7c6:	98 2f       	mov	r25, r24
 7c8:	0e 5f       	subi	r16, 0xFE	; 254
 7ca:	1f 4f       	sbci	r17, 0xFF	; 255
 7cc:	4f e6       	ldi	r20, 0x6F	; 111
 7ce:	b4 2e       	mov	r11, r20
 7d0:	b2 22       	and	r11, r18
 7d2:	97 ff       	sbrs	r25, 7
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <vfprintf+0x232>
 7d6:	90 95       	com	r25
 7d8:	80 95       	com	r24
 7da:	70 95       	com	r23
 7dc:	61 95       	neg	r22
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	f0 e8       	ldi	r31, 0x80	; 128
 7e6:	bf 2a       	or	r11, r31
 7e8:	2a e0       	ldi	r18, 0x0A	; 10
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	a4 01       	movw	r20, r8
 7ee:	0e 94 22 05 	call	0xa44	; 0xa44 <__ultoa_invert>
 7f2:	a8 2e       	mov	r10, r24
 7f4:	a8 18       	sub	r10, r8
 7f6:	43 c0       	rjmp	.+134    	; 0x87e <vfprintf+0x2c8>
 7f8:	85 37       	cpi	r24, 0x75	; 117
 7fa:	31 f4       	brne	.+12     	; 0x808 <vfprintf+0x252>
 7fc:	3f ee       	ldi	r19, 0xEF	; 239
 7fe:	b3 2e       	mov	r11, r19
 800:	b2 22       	and	r11, r18
 802:	2a e0       	ldi	r18, 0x0A	; 10
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	24 c0       	rjmp	.+72     	; 0x850 <vfprintf+0x29a>
 808:	99 ef       	ldi	r25, 0xF9	; 249
 80a:	b9 2e       	mov	r11, r25
 80c:	b2 22       	and	r11, r18
 80e:	8f 36       	cpi	r24, 0x6F	; 111
 810:	b9 f0       	breq	.+46     	; 0x840 <vfprintf+0x28a>
 812:	20 f4       	brcc	.+8      	; 0x81c <vfprintf+0x266>
 814:	88 35       	cpi	r24, 0x58	; 88
 816:	09 f0       	breq	.+2      	; 0x81a <vfprintf+0x264>
 818:	b3 c0       	rjmp	.+358    	; 0x980 <vfprintf+0x3ca>
 81a:	0d c0       	rjmp	.+26     	; 0x836 <vfprintf+0x280>
 81c:	80 37       	cpi	r24, 0x70	; 112
 81e:	21 f0       	breq	.+8      	; 0x828 <vfprintf+0x272>
 820:	88 37       	cpi	r24, 0x78	; 120
 822:	09 f0       	breq	.+2      	; 0x826 <vfprintf+0x270>
 824:	ad c0       	rjmp	.+346    	; 0x980 <vfprintf+0x3ca>
 826:	02 c0       	rjmp	.+4      	; 0x82c <vfprintf+0x276>
 828:	20 e1       	ldi	r18, 0x10	; 16
 82a:	b2 2a       	or	r11, r18
 82c:	b4 fe       	sbrs	r11, 4
 82e:	0b c0       	rjmp	.+22     	; 0x846 <vfprintf+0x290>
 830:	84 e0       	ldi	r24, 0x04	; 4
 832:	b8 2a       	or	r11, r24
 834:	08 c0       	rjmp	.+16     	; 0x846 <vfprintf+0x290>
 836:	24 ff       	sbrs	r18, 4
 838:	09 c0       	rjmp	.+18     	; 0x84c <vfprintf+0x296>
 83a:	e6 e0       	ldi	r30, 0x06	; 6
 83c:	be 2a       	or	r11, r30
 83e:	06 c0       	rjmp	.+12     	; 0x84c <vfprintf+0x296>
 840:	28 e0       	ldi	r18, 0x08	; 8
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	05 c0       	rjmp	.+10     	; 0x850 <vfprintf+0x29a>
 846:	20 e1       	ldi	r18, 0x10	; 16
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <vfprintf+0x29a>
 84c:	20 e1       	ldi	r18, 0x10	; 16
 84e:	32 e0       	ldi	r19, 0x02	; 2
 850:	f8 01       	movw	r30, r16
 852:	b7 fe       	sbrs	r11, 7
 854:	07 c0       	rjmp	.+14     	; 0x864 <vfprintf+0x2ae>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	82 81       	ldd	r24, Z+2	; 0x02
 85c:	93 81       	ldd	r25, Z+3	; 0x03
 85e:	0c 5f       	subi	r16, 0xFC	; 252
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	06 c0       	rjmp	.+12     	; 0x870 <vfprintf+0x2ba>
 864:	60 81       	ld	r22, Z
 866:	71 81       	ldd	r23, Z+1	; 0x01
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 5f       	subi	r16, 0xFE	; 254
 86e:	1f 4f       	sbci	r17, 0xFF	; 255
 870:	a4 01       	movw	r20, r8
 872:	0e 94 22 05 	call	0xa44	; 0xa44 <__ultoa_invert>
 876:	a8 2e       	mov	r10, r24
 878:	a8 18       	sub	r10, r8
 87a:	ff e7       	ldi	r31, 0x7F	; 127
 87c:	bf 22       	and	r11, r31
 87e:	b6 fe       	sbrs	r11, 6
 880:	0b c0       	rjmp	.+22     	; 0x898 <vfprintf+0x2e2>
 882:	2b 2d       	mov	r18, r11
 884:	2e 7f       	andi	r18, 0xFE	; 254
 886:	a5 14       	cp	r10, r5
 888:	50 f4       	brcc	.+20     	; 0x89e <vfprintf+0x2e8>
 88a:	b4 fe       	sbrs	r11, 4
 88c:	0a c0       	rjmp	.+20     	; 0x8a2 <vfprintf+0x2ec>
 88e:	b2 fc       	sbrc	r11, 2
 890:	08 c0       	rjmp	.+16     	; 0x8a2 <vfprintf+0x2ec>
 892:	2b 2d       	mov	r18, r11
 894:	2e 7e       	andi	r18, 0xEE	; 238
 896:	05 c0       	rjmp	.+10     	; 0x8a2 <vfprintf+0x2ec>
 898:	7a 2c       	mov	r7, r10
 89a:	2b 2d       	mov	r18, r11
 89c:	03 c0       	rjmp	.+6      	; 0x8a4 <vfprintf+0x2ee>
 89e:	7a 2c       	mov	r7, r10
 8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <vfprintf+0x2ee>
 8a2:	75 2c       	mov	r7, r5
 8a4:	24 ff       	sbrs	r18, 4
 8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <vfprintf+0x30c>
 8a8:	fe 01       	movw	r30, r28
 8aa:	ea 0d       	add	r30, r10
 8ac:	f1 1d       	adc	r31, r1
 8ae:	80 81       	ld	r24, Z
 8b0:	80 33       	cpi	r24, 0x30	; 48
 8b2:	11 f4       	brne	.+4      	; 0x8b8 <vfprintf+0x302>
 8b4:	29 7e       	andi	r18, 0xE9	; 233
 8b6:	09 c0       	rjmp	.+18     	; 0x8ca <vfprintf+0x314>
 8b8:	22 ff       	sbrs	r18, 2
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <vfprintf+0x312>
 8bc:	73 94       	inc	r7
 8be:	73 94       	inc	r7
 8c0:	04 c0       	rjmp	.+8      	; 0x8ca <vfprintf+0x314>
 8c2:	82 2f       	mov	r24, r18
 8c4:	86 78       	andi	r24, 0x86	; 134
 8c6:	09 f0       	breq	.+2      	; 0x8ca <vfprintf+0x314>
 8c8:	73 94       	inc	r7
 8ca:	23 fd       	sbrc	r18, 3
 8cc:	14 c0       	rjmp	.+40     	; 0x8f6 <vfprintf+0x340>
 8ce:	20 ff       	sbrs	r18, 0
 8d0:	0f c0       	rjmp	.+30     	; 0x8f0 <vfprintf+0x33a>
 8d2:	5a 2c       	mov	r5, r10
 8d4:	73 14       	cp	r7, r3
 8d6:	60 f4       	brcc	.+24     	; 0x8f0 <vfprintf+0x33a>
 8d8:	53 0c       	add	r5, r3
 8da:	57 18       	sub	r5, r7
 8dc:	73 2c       	mov	r7, r3
 8de:	08 c0       	rjmp	.+16     	; 0x8f0 <vfprintf+0x33a>
 8e0:	b7 01       	movw	r22, r14
 8e2:	80 e2       	ldi	r24, 0x20	; 32
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	2c 87       	std	Y+12, r18	; 0x0c
 8e8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 8ec:	73 94       	inc	r7
 8ee:	2c 85       	ldd	r18, Y+12	; 0x0c
 8f0:	73 14       	cp	r7, r3
 8f2:	b0 f3       	brcs	.-20     	; 0x8e0 <vfprintf+0x32a>
 8f4:	04 c0       	rjmp	.+8      	; 0x8fe <vfprintf+0x348>
 8f6:	73 14       	cp	r7, r3
 8f8:	10 f4       	brcc	.+4      	; 0x8fe <vfprintf+0x348>
 8fa:	37 18       	sub	r3, r7
 8fc:	01 c0       	rjmp	.+2      	; 0x900 <vfprintf+0x34a>
 8fe:	31 2c       	mov	r3, r1
 900:	24 ff       	sbrs	r18, 4
 902:	12 c0       	rjmp	.+36     	; 0x928 <vfprintf+0x372>
 904:	b7 01       	movw	r22, r14
 906:	80 e3       	ldi	r24, 0x30	; 48
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	2c 87       	std	Y+12, r18	; 0x0c
 90c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 910:	2c 85       	ldd	r18, Y+12	; 0x0c
 912:	22 ff       	sbrs	r18, 2
 914:	1e c0       	rjmp	.+60     	; 0x952 <vfprintf+0x39c>
 916:	21 ff       	sbrs	r18, 1
 918:	03 c0       	rjmp	.+6      	; 0x920 <vfprintf+0x36a>
 91a:	88 e5       	ldi	r24, 0x58	; 88
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <vfprintf+0x36e>
 920:	88 e7       	ldi	r24, 0x78	; 120
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	b7 01       	movw	r22, r14
 926:	0c c0       	rjmp	.+24     	; 0x940 <vfprintf+0x38a>
 928:	82 2f       	mov	r24, r18
 92a:	86 78       	andi	r24, 0x86	; 134
 92c:	91 f0       	breq	.+36     	; 0x952 <vfprintf+0x39c>
 92e:	21 fd       	sbrc	r18, 1
 930:	02 c0       	rjmp	.+4      	; 0x936 <vfprintf+0x380>
 932:	80 e2       	ldi	r24, 0x20	; 32
 934:	01 c0       	rjmp	.+2      	; 0x938 <vfprintf+0x382>
 936:	8b e2       	ldi	r24, 0x2B	; 43
 938:	27 fd       	sbrc	r18, 7
 93a:	8d e2       	ldi	r24, 0x2D	; 45
 93c:	b7 01       	movw	r22, r14
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 944:	06 c0       	rjmp	.+12     	; 0x952 <vfprintf+0x39c>
 946:	b7 01       	movw	r22, r14
 948:	80 e3       	ldi	r24, 0x30	; 48
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 950:	5a 94       	dec	r5
 952:	a5 14       	cp	r10, r5
 954:	c0 f3       	brcs	.-16     	; 0x946 <vfprintf+0x390>
 956:	aa 94       	dec	r10
 958:	f4 01       	movw	r30, r8
 95a:	ea 0d       	add	r30, r10
 95c:	f1 1d       	adc	r31, r1
 95e:	b7 01       	movw	r22, r14
 960:	80 81       	ld	r24, Z
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 968:	a1 10       	cpse	r10, r1
 96a:	f5 cf       	rjmp	.-22     	; 0x956 <vfprintf+0x3a0>
 96c:	06 c0       	rjmp	.+12     	; 0x97a <vfprintf+0x3c4>
 96e:	b7 01       	movw	r22, r14
 970:	80 e2       	ldi	r24, 0x20	; 32
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 978:	3a 94       	dec	r3
 97a:	31 10       	cpse	r3, r1
 97c:	f8 cf       	rjmp	.-16     	; 0x96e <vfprintf+0x3b8>
 97e:	43 ce       	rjmp	.-890    	; 0x606 <vfprintf+0x50>
 980:	f7 01       	movw	r30, r14
 982:	26 81       	ldd	r18, Z+6	; 0x06
 984:	37 81       	ldd	r19, Z+7	; 0x07
 986:	02 c0       	rjmp	.+4      	; 0x98c <vfprintf+0x3d6>
 988:	2f ef       	ldi	r18, 0xFF	; 255
 98a:	3f ef       	ldi	r19, 0xFF	; 255
 98c:	c9 01       	movw	r24, r18
 98e:	2c 96       	adiw	r28, 0x0c	; 12
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	f8 94       	cli
 994:	de bf       	out	0x3e, r29	; 62
 996:	0f be       	out	0x3f, r0	; 63
 998:	cd bf       	out	0x3d, r28	; 61
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	1f 91       	pop	r17
 9a0:	0f 91       	pop	r16
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	df 90       	pop	r13
 9a8:	cf 90       	pop	r12
 9aa:	bf 90       	pop	r11
 9ac:	af 90       	pop	r10
 9ae:	9f 90       	pop	r9
 9b0:	8f 90       	pop	r8
 9b2:	7f 90       	pop	r7
 9b4:	6f 90       	pop	r6
 9b6:	5f 90       	pop	r5
 9b8:	4f 90       	pop	r4
 9ba:	3f 90       	pop	r3
 9bc:	2f 90       	pop	r2
 9be:	08 95       	ret

000009c0 <strnlen_P>:
 9c0:	fc 01       	movw	r30, r24
 9c2:	05 90       	lpm	r0, Z+
 9c4:	61 50       	subi	r22, 0x01	; 1
 9c6:	70 40       	sbci	r23, 0x00	; 0
 9c8:	01 10       	cpse	r0, r1
 9ca:	d8 f7       	brcc	.-10     	; 0x9c2 <strnlen_P+0x2>
 9cc:	80 95       	com	r24
 9ce:	90 95       	com	r25
 9d0:	8e 0f       	add	r24, r30
 9d2:	9f 1f       	adc	r25, r31
 9d4:	08 95       	ret

000009d6 <strnlen>:
 9d6:	fc 01       	movw	r30, r24
 9d8:	61 50       	subi	r22, 0x01	; 1
 9da:	70 40       	sbci	r23, 0x00	; 0
 9dc:	01 90       	ld	r0, Z+
 9de:	01 10       	cpse	r0, r1
 9e0:	d8 f7       	brcc	.-10     	; 0x9d8 <strnlen+0x2>
 9e2:	80 95       	com	r24
 9e4:	90 95       	com	r25
 9e6:	8e 0f       	add	r24, r30
 9e8:	9f 1f       	adc	r25, r31
 9ea:	08 95       	ret

000009ec <fputc>:
 9ec:	0f 93       	push	r16
 9ee:	1f 93       	push	r17
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	8c 01       	movw	r16, r24
 9f6:	eb 01       	movw	r28, r22
 9f8:	8b 81       	ldd	r24, Y+3	; 0x03
 9fa:	81 fd       	sbrc	r24, 1
 9fc:	03 c0       	rjmp	.+6      	; 0xa04 <fputc+0x18>
 9fe:	0f ef       	ldi	r16, 0xFF	; 255
 a00:	1f ef       	ldi	r17, 0xFF	; 255
 a02:	1a c0       	rjmp	.+52     	; 0xa38 <fputc+0x4c>
 a04:	82 ff       	sbrs	r24, 2
 a06:	0d c0       	rjmp	.+26     	; 0xa22 <fputc+0x36>
 a08:	2e 81       	ldd	r18, Y+6	; 0x06
 a0a:	3f 81       	ldd	r19, Y+7	; 0x07
 a0c:	8c 81       	ldd	r24, Y+4	; 0x04
 a0e:	9d 81       	ldd	r25, Y+5	; 0x05
 a10:	28 17       	cp	r18, r24
 a12:	39 07       	cpc	r19, r25
 a14:	64 f4       	brge	.+24     	; 0xa2e <fputc+0x42>
 a16:	e8 81       	ld	r30, Y
 a18:	f9 81       	ldd	r31, Y+1	; 0x01
 a1a:	01 93       	st	Z+, r16
 a1c:	f9 83       	std	Y+1, r31	; 0x01
 a1e:	e8 83       	st	Y, r30
 a20:	06 c0       	rjmp	.+12     	; 0xa2e <fputc+0x42>
 a22:	e8 85       	ldd	r30, Y+8	; 0x08
 a24:	f9 85       	ldd	r31, Y+9	; 0x09
 a26:	80 2f       	mov	r24, r16
 a28:	09 95       	icall
 a2a:	89 2b       	or	r24, r25
 a2c:	41 f7       	brne	.-48     	; 0x9fe <fputc+0x12>
 a2e:	8e 81       	ldd	r24, Y+6	; 0x06
 a30:	9f 81       	ldd	r25, Y+7	; 0x07
 a32:	01 96       	adiw	r24, 0x01	; 1
 a34:	9f 83       	std	Y+7, r25	; 0x07
 a36:	8e 83       	std	Y+6, r24	; 0x06
 a38:	c8 01       	movw	r24, r16
 a3a:	df 91       	pop	r29
 a3c:	cf 91       	pop	r28
 a3e:	1f 91       	pop	r17
 a40:	0f 91       	pop	r16
 a42:	08 95       	ret

00000a44 <__ultoa_invert>:
 a44:	fa 01       	movw	r30, r20
 a46:	aa 27       	eor	r26, r26
 a48:	28 30       	cpi	r18, 0x08	; 8
 a4a:	51 f1       	breq	.+84     	; 0xaa0 <__ultoa_invert+0x5c>
 a4c:	20 31       	cpi	r18, 0x10	; 16
 a4e:	81 f1       	breq	.+96     	; 0xab0 <__ultoa_invert+0x6c>
 a50:	e8 94       	clt
 a52:	6f 93       	push	r22
 a54:	6e 7f       	andi	r22, 0xFE	; 254
 a56:	6e 5f       	subi	r22, 0xFE	; 254
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	af 4f       	sbci	r26, 0xFF	; 255
 a60:	b1 e0       	ldi	r27, 0x01	; 1
 a62:	3e d0       	rcall	.+124    	; 0xae0 <__ultoa_invert+0x9c>
 a64:	b4 e0       	ldi	r27, 0x04	; 4
 a66:	3c d0       	rcall	.+120    	; 0xae0 <__ultoa_invert+0x9c>
 a68:	67 0f       	add	r22, r23
 a6a:	78 1f       	adc	r23, r24
 a6c:	89 1f       	adc	r24, r25
 a6e:	9a 1f       	adc	r25, r26
 a70:	a1 1d       	adc	r26, r1
 a72:	68 0f       	add	r22, r24
 a74:	79 1f       	adc	r23, r25
 a76:	8a 1f       	adc	r24, r26
 a78:	91 1d       	adc	r25, r1
 a7a:	a1 1d       	adc	r26, r1
 a7c:	6a 0f       	add	r22, r26
 a7e:	71 1d       	adc	r23, r1
 a80:	81 1d       	adc	r24, r1
 a82:	91 1d       	adc	r25, r1
 a84:	a1 1d       	adc	r26, r1
 a86:	20 d0       	rcall	.+64     	; 0xac8 <__ultoa_invert+0x84>
 a88:	09 f4       	brne	.+2      	; 0xa8c <__ultoa_invert+0x48>
 a8a:	68 94       	set
 a8c:	3f 91       	pop	r19
 a8e:	2a e0       	ldi	r18, 0x0A	; 10
 a90:	26 9f       	mul	r18, r22
 a92:	11 24       	eor	r1, r1
 a94:	30 19       	sub	r19, r0
 a96:	30 5d       	subi	r19, 0xD0	; 208
 a98:	31 93       	st	Z+, r19
 a9a:	de f6       	brtc	.-74     	; 0xa52 <__ultoa_invert+0xe>
 a9c:	cf 01       	movw	r24, r30
 a9e:	08 95       	ret
 aa0:	46 2f       	mov	r20, r22
 aa2:	47 70       	andi	r20, 0x07	; 7
 aa4:	40 5d       	subi	r20, 0xD0	; 208
 aa6:	41 93       	st	Z+, r20
 aa8:	b3 e0       	ldi	r27, 0x03	; 3
 aaa:	0f d0       	rcall	.+30     	; 0xaca <__ultoa_invert+0x86>
 aac:	c9 f7       	brne	.-14     	; 0xaa0 <__ultoa_invert+0x5c>
 aae:	f6 cf       	rjmp	.-20     	; 0xa9c <__ultoa_invert+0x58>
 ab0:	46 2f       	mov	r20, r22
 ab2:	4f 70       	andi	r20, 0x0F	; 15
 ab4:	40 5d       	subi	r20, 0xD0	; 208
 ab6:	4a 33       	cpi	r20, 0x3A	; 58
 ab8:	18 f0       	brcs	.+6      	; 0xac0 <__ultoa_invert+0x7c>
 aba:	49 5d       	subi	r20, 0xD9	; 217
 abc:	31 fd       	sbrc	r19, 1
 abe:	40 52       	subi	r20, 0x20	; 32
 ac0:	41 93       	st	Z+, r20
 ac2:	02 d0       	rcall	.+4      	; 0xac8 <__ultoa_invert+0x84>
 ac4:	a9 f7       	brne	.-22     	; 0xab0 <__ultoa_invert+0x6c>
 ac6:	ea cf       	rjmp	.-44     	; 0xa9c <__ultoa_invert+0x58>
 ac8:	b4 e0       	ldi	r27, 0x04	; 4
 aca:	a6 95       	lsr	r26
 acc:	97 95       	ror	r25
 ace:	87 95       	ror	r24
 ad0:	77 95       	ror	r23
 ad2:	67 95       	ror	r22
 ad4:	ba 95       	dec	r27
 ad6:	c9 f7       	brne	.-14     	; 0xaca <__ultoa_invert+0x86>
 ad8:	00 97       	sbiw	r24, 0x00	; 0
 ada:	61 05       	cpc	r22, r1
 adc:	71 05       	cpc	r23, r1
 ade:	08 95       	ret
 ae0:	9b 01       	movw	r18, r22
 ae2:	ac 01       	movw	r20, r24
 ae4:	0a 2e       	mov	r0, r26
 ae6:	06 94       	lsr	r0
 ae8:	57 95       	ror	r21
 aea:	47 95       	ror	r20
 aec:	37 95       	ror	r19
 aee:	27 95       	ror	r18
 af0:	ba 95       	dec	r27
 af2:	c9 f7       	brne	.-14     	; 0xae6 <__ultoa_invert+0xa2>
 af4:	62 0f       	add	r22, r18
 af6:	73 1f       	adc	r23, r19
 af8:	84 1f       	adc	r24, r20
 afa:	95 1f       	adc	r25, r21
 afc:	a0 1d       	adc	r26, r0
 afe:	08 95       	ret

00000b00 <_exit>:
 b00:	f8 94       	cli

00000b02 <__stop_program>:
 b02:	ff cf       	rjmp	.-2      	; 0xb02 <__stop_program>
