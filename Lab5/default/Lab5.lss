
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00001fea  0000205e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000184  008001aa  00002094  00002108  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002108  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000380  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001243  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000348  00000000  00000000  000036eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001043  00000000  00000000  00003a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00004a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b0  00000000  00000000  00004d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c4d  00000000  00000000  00005208  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_13>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__vector_16>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__vector_20>
      54:	0c 94 88 03 	jmp	0x710	; 0x710 <__vector_21>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_line1>:
      cc:	43 75 72 72 65 6e 74 3a 00 00                       Current:..

000000d6 <LCD_line2>:
      d6:	44 65 73 69 72 65 64 3a 00 00                       Desired:..

000000e0 <__c.1957>:
      e0:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d0 e4       	ldi	r29, 0x40	; 64
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	11 e0       	ldi	r17, 0x01	; 1
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	ea ee       	ldi	r30, 0xEA	; 234
     100:	ff e1       	ldi	r31, 0x1F	; 31
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	aa 3a       	cpi	r26, 0xAA	; 170
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	13 e0       	ldi	r17, 0x03	; 3
     114:	aa ea       	ldi	r26, 0xAA	; 170
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	ae 32       	cpi	r26, 0x2E	; 46
     11e:	b1 07       	cpc	r27, r17
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 95 07 	call	0xf2a	; 0xf2a <main>
     126:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

0000012e <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     12e:	1f 92       	push	r1
     130:	0f 92       	push	r0
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	0f 92       	push	r0
     136:	0b b6       	in	r0, 0x3b	; 59
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	2f 92       	push	r2
     13e:	3f 92       	push	r3
     140:	4f 92       	push	r4
     142:	5f 92       	push	r5
     144:	6f 92       	push	r6
     146:	7f 92       	push	r7
     148:	8f 92       	push	r8
     14a:	9f 92       	push	r9
     14c:	af 92       	push	r10
     14e:	bf 92       	push	r11
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	2f 93       	push	r18
     15e:	3f 93       	push	r19
     160:	4f 93       	push	r20
     162:	5f 93       	push	r21
     164:	6f 93       	push	r22
     166:	7f 93       	push	r23
     168:	8f 93       	push	r24
     16a:	9f 93       	push	r25
     16c:	af 93       	push	r26
     16e:	bf 93       	push	r27
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	ef 93       	push	r30
     176:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
  
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     178:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     17c:	50 90 e6 02 	lds	r5, 0x02E6
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     180:	b0 9b       	sbis	0x16, 0	; 22
     182:	14 c0       	rjmp	.+40     	; 0x1ac <__vector_13+0x7e>
    ++kernel.cycles;
     184:	80 91 1d 03 	lds	r24, 0x031D
     188:	90 91 1e 03 	lds	r25, 0x031E
     18c:	a0 91 1f 03 	lds	r26, 0x031F
     190:	b0 91 20 03 	lds	r27, 0x0320
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	a1 1d       	adc	r26, r1
     198:	b1 1d       	adc	r27, r1
     19a:	80 93 1d 03 	sts	0x031D, r24
     19e:	90 93 1e 03 	sts	0x031E, r25
     1a2:	a0 93 1f 03 	sts	0x031F, r26
     1a6:	b0 93 20 03 	sts	0x0320, r27
    TIFR1 |= (1<<TOV1) ;
     1aa:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     1ac:	80 91 84 00 	lds	r24, 0x0084
     1b0:	90 91 85 00 	lds	r25, 0x0085
     1b4:	3c 01       	movw	r6, r24
     1b6:	88 24       	eor	r8, r8
     1b8:	99 24       	eor	r9, r9
     1ba:	80 91 1d 03 	lds	r24, 0x031D
     1be:	90 91 1e 03 	lds	r25, 0x031E
     1c2:	a0 91 1f 03 	lds	r26, 0x031F
     1c6:	b0 91 20 03 	lds	r27, 0x0320
     1ca:	dc 01       	movw	r26, r24
     1cc:	99 27       	eor	r25, r25
     1ce:	88 27       	eor	r24, r24
     1d0:	68 0e       	add	r6, r24
     1d2:	79 1e       	adc	r7, r25
     1d4:	8a 1e       	adc	r8, r26
     1d6:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     1d8:	40 90 e5 02 	lds	r4, 0x02E5
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	ff ef       	ldi	r31, 0xFF	; 255
     1e2:	af 2e       	mov	r10, r31
     1e4:	ff ef       	ldi	r31, 0xFF	; 255
     1e6:	bf 2e       	mov	r11, r31
     1e8:	ff ef       	ldi	r31, 0xFF	; 255
     1ea:	cf 2e       	mov	r12, r31
     1ec:	ff e7       	ldi	r31, 0x7F	; 127
     1ee:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     1f0:	eb e0       	ldi	r30, 0x0B	; 11
     1f2:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
  t->state = READYQ;
     1f4:	33 24       	eor	r3, r3
     1f6:	33 94       	inc	r3
      } else if (t->release < nextHit) {
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     1f8:	cb e0       	ldi	r28, 0x0B	; 11
     1fa:	d0 e0       	ldi	r29, 0x00	; 0
     1fc:	43 c0       	rjmp	.+134    	; 0x284 <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     1fe:	62 9d       	mul	r22, r2
     200:	d0 01       	movw	r26, r0
     202:	11 24       	eor	r1, r1
     204:	a9 51       	subi	r26, 0x19	; 25
     206:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     208:	1a 96       	adiw	r26, 0x0a	; 10
     20a:	8c 91       	ld	r24, X
     20c:	1a 97       	sbiw	r26, 0x0a	; 10
     20e:	82 30       	cpi	r24, 0x02	; 2
     210:	a1 f4       	brne	.+40     	; 0x23a <__vector_13+0x10c>
      if (t->release <= now) {
     212:	12 96       	adiw	r26, 0x02	; 2
     214:	ed 90       	ld	r14, X+
     216:	fd 90       	ld	r15, X+
     218:	0d 91       	ld	r16, X+
     21a:	1c 91       	ld	r17, X
     21c:	15 97       	sbiw	r26, 0x05	; 5
     21e:	6e 14       	cp	r6, r14
     220:	7f 04       	cpc	r7, r15
     222:	80 06       	cpc	r8, r16
     224:	91 06       	cpc	r9, r17
     226:	20 f0       	brcs	.+8      	; 0x230 <__vector_13+0x102>
  t->state = READYQ;
     228:	1a 96       	adiw	r26, 0x0a	; 10
     22a:	3c 92       	st	X, r3
     22c:	1a 97       	sbiw	r26, 0x0a	; 10
     22e:	05 c0       	rjmp	.+10     	; 0x23a <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     230:	ea 14       	cp	r14, r10
     232:	fb 04       	cpc	r15, r11
     234:	0c 05       	cpc	r16, r12
     236:	1d 05       	cpc	r17, r13
     238:	10 f0       	brcs	.+4      	; 0x23e <__vector_13+0x110>
     23a:	86 01       	movw	r16, r12
     23c:	75 01       	movw	r14, r10
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     23e:	1a 96       	adiw	r26, 0x0a	; 10
     240:	8c 91       	ld	r24, X
     242:	1a 97       	sbiw	r26, 0x0a	; 10
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	d9 f4       	brne	.+54     	; 0x27e <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     248:	87 2f       	mov	r24, r23
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	8c 9f       	mul	r24, r28
     24e:	f0 01       	movw	r30, r0
     250:	8d 9f       	mul	r24, r29
     252:	f0 0d       	add	r31, r0
     254:	9c 9f       	mul	r25, r28
     256:	f0 0d       	add	r31, r0
     258:	11 24       	eor	r1, r1
     25a:	eb 51       	subi	r30, 0x1B	; 27
     25c:	fd 4f       	sbci	r31, 0xFD	; 253
     25e:	16 96       	adiw	r26, 0x06	; 6
     260:	2d 91       	ld	r18, X+
     262:	3d 91       	ld	r19, X+
     264:	4d 91       	ld	r20, X+
     266:	5c 91       	ld	r21, X
     268:	19 97       	sbiw	r26, 0x09	; 9
     26a:	80 85       	ldd	r24, Z+8	; 0x08
     26c:	91 85       	ldd	r25, Z+9	; 0x09
     26e:	a2 85       	ldd	r26, Z+10	; 0x0a
     270:	b3 85       	ldd	r27, Z+11	; 0x0b
     272:	28 17       	cp	r18, r24
     274:	39 07       	cpc	r19, r25
     276:	4a 07       	cpc	r20, r26
     278:	5b 07       	cpc	r21, r27
     27a:	08 f4       	brcc	.+2      	; 0x27e <__vector_13+0x150>
     27c:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     27e:	6f 5f       	subi	r22, 0xFF	; 255
     280:	57 01       	movw	r10, r14
     282:	68 01       	movw	r12, r16
     284:	46 16       	cp	r4, r22
     286:	08 f0       	brcs	.+2      	; 0x28a <__vector_13+0x15c>
     288:	ba cf       	rjmp	.-140    	; 0x1fe <__vector_13+0xd0>
    }
  }
  //fprintf(stdout, "Old: %u New: %u\n\r", oldrunning, running);
  //fprintf(stdout, "NumTasks: %u\n\r", kernel.nbrOfTasks);
  //fprintf(stdout, "Current time: %lu\n\r", (unsigned long) trtCurrentTime());
  if (running != oldrunning) { // perform context switch?
     28a:	75 15       	cp	r23, r5
     28c:	b1 f0       	breq	.+44     	; 0x2ba <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     28e:	eb e0       	ldi	r30, 0x0B	; 11
     290:	5e 9e       	mul	r5, r30
     292:	d0 01       	movw	r26, r0
     294:	11 24       	eor	r1, r1
     296:	a9 51       	subi	r26, 0x19	; 25
     298:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     29a:	8d b7       	in	r24, 0x3d	; 61
     29c:	8c 93       	st	X, r24
    t->sph = SPH;
     29e:	8e b7       	in	r24, 0x3e	; 62
     2a0:	11 96       	adiw	r26, 0x01	; 1
     2a2:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     2a4:	7e 9f       	mul	r23, r30
     2a6:	f0 01       	movw	r30, r0
     2a8:	11 24       	eor	r1, r1
     2aa:	e9 51       	subi	r30, 0x19	; 25
     2ac:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     2ae:	81 81       	ldd	r24, Z+1	; 0x01
     2b0:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     2b2:	80 81       	ld	r24, Z
     2b4:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     2b6:	70 93 e6 02 	sts	0x02E6, r23

  }

  kernel.nextHit = nextHit;  
     2ba:	a0 92 21 03 	sts	0x0321, r10
     2be:	b0 92 22 03 	sts	0x0322, r11
     2c2:	c0 92 23 03 	sts	0x0323, r12
     2c6:	d0 92 24 03 	sts	0x0324, r13

  now = (kernel.cycles << 16) + TCNT1;
     2ca:	20 91 84 00 	lds	r18, 0x0084
     2ce:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	80 91 1d 03 	lds	r24, 0x031D
     2da:	90 91 1e 03 	lds	r25, 0x031E
     2de:	a0 91 1f 03 	lds	r26, 0x031F
     2e2:	b0 91 20 03 	lds	r27, 0x0320
     2e6:	dc 01       	movw	r26, r24
     2e8:	99 27       	eor	r25, r25
     2ea:	88 27       	eor	r24, r24
     2ec:	28 0f       	add	r18, r24
     2ee:	39 1f       	adc	r19, r25
     2f0:	4a 1f       	adc	r20, r26
     2f2:	5b 1f       	adc	r21, r27
     2f4:	d6 01       	movw	r26, r12
     2f6:	c5 01       	movw	r24, r10
     2f8:	82 1b       	sub	r24, r18
     2fa:	93 0b       	sbc	r25, r19
     2fc:	a4 0b       	sbc	r26, r20
     2fe:	b5 0b       	sbc	r27, r21
     300:	9c 01       	movw	r18, r24
     302:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     304:	84 30       	cpi	r24, 0x04	; 4
     306:	91 05       	cpc	r25, r1
     308:	a1 05       	cpc	r26, r1
     30a:	b1 05       	cpc	r27, r1
     30c:	24 f4       	brge	.+8      	; 0x316 <__vector_13+0x1e8>
     30e:	24 e0       	ldi	r18, 0x04	; 4
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     316:	80 91 84 00 	lds	r24, 0x0084
     31a:	90 91 85 00 	lds	r25, 0x0085
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	82 0f       	add	r24, r18
     324:	93 1f       	adc	r25, r19
     326:	a4 1f       	adc	r26, r20
     328:	b5 1f       	adc	r27, r21
     32a:	80 50       	subi	r24, 0x00	; 0
     32c:	90 40       	sbci	r25, 0x00	; 0
     32e:	a1 40       	sbci	r26, 0x01	; 1
     330:	b0 40       	sbci	r27, 0x00	; 0
     332:	38 f4       	brcc	.+14     	; 0x342 <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     334:	80 91 84 00 	lds	r24, 0x0084
     338:	90 91 85 00 	lds	r25, 0x0085
     33c:	82 0f       	add	r24, r18
     33e:	93 1f       	adc	r25, r19
     340:	0e c0       	rjmp	.+28     	; 0x35e <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     342:	80 91 84 00 	lds	r24, 0x0084
     346:	90 91 85 00 	lds	r25, 0x0085
     34a:	8c 5f       	subi	r24, 0xFC	; 252
     34c:	9f 4f       	sbci	r25, 0xFF	; 255
     34e:	28 f4       	brcc	.+10     	; 0x35a <__vector_13+0x22c>
    OCR1A = 0x0000;
     350:	10 92 89 00 	sts	0x0089, r1
     354:	10 92 88 00 	sts	0x0088, r1
     358:	06 c0       	rjmp	.+12     	; 0x366 <__vector_13+0x238>
  } else {
    OCR1A = 4;
     35a:	84 e0       	ldi	r24, 0x04	; 4
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	90 93 89 00 	sts	0x0089, r25
     362:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	80 93 6f 00 	sts	0x006F, r24
}
     36c:	ff 91       	pop	r31
     36e:	ef 91       	pop	r30
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	bf 91       	pop	r27
     376:	af 91       	pop	r26
     378:	9f 91       	pop	r25
     37a:	8f 91       	pop	r24
     37c:	7f 91       	pop	r23
     37e:	6f 91       	pop	r22
     380:	5f 91       	pop	r21
     382:	4f 91       	pop	r20
     384:	3f 91       	pop	r19
     386:	2f 91       	pop	r18
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	cf 90       	pop	r12
     394:	bf 90       	pop	r11
     396:	af 90       	pop	r10
     398:	9f 90       	pop	r9
     39a:	8f 90       	pop	r8
     39c:	7f 90       	pop	r7
     39e:	6f 90       	pop	r6
     3a0:	5f 90       	pop	r5
     3a2:	4f 90       	pop	r4
     3a4:	3f 90       	pop	r3
     3a6:	2f 90       	pop	r2
     3a8:	0f 90       	pop	r0
     3aa:	0b be       	out	0x3b, r0	; 59
     3ac:	0f 90       	pop	r0
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	0f 90       	pop	r0
     3b2:	1f 90       	pop	r1
     3b4:	18 95       	reti

000003b6 <trtInitKernel>:


/********************************** API ************************************/

void trtInitKernel(int idlestack) {
     3b6:	10 92 85 00 	sts	0x0085, r1
     3ba:	10 92 84 00 	sts	0x0084, r1

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
  TCCR1A = 0x00;         /* normal operation */
     3be:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     3c2:	25 e0       	ldi	r18, 0x05	; 5
     3c4:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     3c8:	22 e0       	ldi	r18, 0x02	; 2
     3ca:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     3ce:	2f ef       	ldi	r18, 0xFF	; 255
     3d0:	30 e4       	ldi	r19, 0x40	; 64
     3d2:	28 1b       	sub	r18, r24
     3d4:	39 0b       	sbc	r19, r25
     3d6:	30 93 1c 03 	sts	0x031C, r19
     3da:	20 93 1b 03 	sts	0x031B, r18
  kernel.nbrOfTasks = 0;
     3de:	10 92 e5 02 	sts	0x02E5, r1
  kernel.running = 0;
     3e2:	10 92 e6 02 	sts	0x02E6, r1

  kernel.cycles = 0x0000;
     3e6:	10 92 1d 03 	sts	0x031D, r1
     3ea:	10 92 1e 03 	sts	0x031E, r1
     3ee:	10 92 1f 03 	sts	0x031F, r1
     3f2:	10 92 20 03 	sts	0x0320, r1
  kernel.nextHit = 0x7FFFFFFF;
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	9f ef       	ldi	r25, 0xFF	; 255
     3fa:	af ef       	ldi	r26, 0xFF	; 255
     3fc:	bf e7       	ldi	r27, 0x7F	; 127
     3fe:	80 93 21 03 	sts	0x0321, r24
     402:	90 93 22 03 	sts	0x0322, r25
     406:	a0 93 23 03 	sts	0x0323, r26
     40a:	b0 93 24 03 	sts	0x0324, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     40e:	80 93 ed 02 	sts	0x02ED, r24
     412:	90 93 ee 02 	sts	0x02EE, r25
     416:	a0 93 ef 02 	sts	0x02EF, r26
     41a:	b0 93 f0 02 	sts	0x02F0, r27
  kernel.tasks[0].release = 0x00000000;
     41e:	10 92 e9 02 	sts	0x02E9, r1
     422:	10 92 ea 02 	sts	0x02EA, r1
     426:	10 92 eb 02 	sts	0x02EB, r1
     42a:	10 92 ec 02 	sts	0x02EC, r1

  sei(); /* set enabled interrupts */
     42e:	78 94       	sei
}
     430:	08 95       	ret

00000432 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     432:	8f 92       	push	r8
     434:	9f 92       	push	r9
     436:	af 92       	push	r10
     438:	bf 92       	push	r11
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	49 01       	movw	r8, r18
     44c:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     44e:	f8 94       	cli

  ++kernel.nbrOfTasks;
     450:	20 91 e5 02 	lds	r18, 0x02E5
     454:	2f 5f       	subi	r18, 0xFF	; 255
     456:	20 93 e5 02 	sts	0x02E5, r18

  sp = kernel.memptr;
     45a:	c0 91 1b 03 	lds	r28, 0x031B
     45e:	d0 91 1c 03 	lds	r29, 0x031C
  kernel.memptr -= stacksize;  // decrease free mem ptr
     462:	9e 01       	movw	r18, r28
     464:	26 1b       	sub	r18, r22
     466:	37 0b       	sbc	r19, r23
     468:	30 93 1c 03 	sts	0x031C, r19
     46c:	20 93 1b 03 	sts	0x031B, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     470:	88 83       	st	Y, r24
     472:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     474:	92 93       	st	-Z, r25
     476:	31 97       	sbiw	r30, 0x01	; 1
     478:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     47a:	ce 01       	movw	r24, r28
     47c:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     47e:	1c 92       	st	X, r1
     480:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     482:	a8 17       	cp	r26, r24
     484:	b9 07       	cpc	r27, r25
     486:	d9 f7       	brne	.-10     	; 0x47e <trtCreateTask+0x4c>
     488:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     48a:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     48c:	d2 92       	st	-Z, r13
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     492:	9e 01       	movw	r18, r28
     494:	24 52       	subi	r18, 0x24	; 36
     496:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     498:	1c 92       	st	X, r1
     49a:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     49c:	a2 17       	cp	r26, r18
     49e:	b3 07       	cpc	r27, r19
     4a0:	d9 f7       	brne	.-10     	; 0x498 <trtCreateTask+0x66>
     4a2:	9f 01       	movw	r18, r30
     4a4:	26 50       	subi	r18, 0x06	; 6
     4a6:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     4a8:	e0 91 e5 02 	lds	r30, 0x02E5
     4ac:	8b e0       	ldi	r24, 0x0B	; 11
     4ae:	e8 9f       	mul	r30, r24
     4b0:	f0 01       	movw	r30, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	e9 51       	subi	r30, 0x19	; 25
     4b6:	fd 4f       	sbci	r31, 0xFD	; 253
  ///*
  t->release = release;
     4b8:	82 82       	std	Z+2, r8	; 0x02
     4ba:	93 82       	std	Z+3, r9	; 0x03
     4bc:	a4 82       	std	Z+4, r10	; 0x04
     4be:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     4c0:	e6 82       	std	Z+6, r14	; 0x06
     4c2:	f7 82       	std	Z+7, r15	; 0x07
     4c4:	00 87       	std	Z+8, r16	; 0x08
     4c6:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	82 87       	std	Z+10, r24	; 0x0a
  //*/
  t->spl = lo8(sp);       // store stack pointer
     4cc:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     4ce:	31 83       	std	Z+1, r19	; 0x01
  

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     4d0:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>

}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	08 95       	ret

000004ee <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {
     4ee:	f8 94       	cli

  cli(); // turn off interrupts

  kernel.semaphores[semnbr-1] = initVal;
     4f0:	e5 ee       	ldi	r30, 0xE5	; 229
     4f2:	f2 e0       	ldi	r31, 0x02	; 2
     4f4:	e8 0f       	add	r30, r24
     4f6:	f1 1d       	adc	r31, r1
     4f8:	65 a7       	std	Z+45, r22	; 0x2d
  
  sei(); // set enabled interrupts;
     4fa:	78 94       	sei
}
     4fc:	08 95       	ret

000004fe <trtWait>:

void trtWait(uint8_t semnbr) {
     4fe:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     500:	20 91 e6 02 	lds	r18, 0x02E6

  cli(); // disable interrupts
     504:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     506:	e8 2f       	mov	r30, r24
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	ee 5e       	subi	r30, 0xEE	; 238
     50c:	fc 4f       	sbci	r31, 0xFC	; 252
  if ((*s) > 0) {
     50e:	80 81       	ld	r24, Z
     510:	88 23       	and	r24, r24
     512:	19 f0       	breq	.+6      	; 0x51a <trtWait+0x1c>
    (*s)--;
     514:	81 50       	subi	r24, 0x01	; 1
     516:	80 83       	st	Z, r24
     518:	10 c0       	rjmp	.+32     	; 0x53a <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	8b e0       	ldi	r24, 0x0B	; 11
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	28 9f       	mul	r18, r24
     522:	f0 01       	movw	r30, r0
     524:	29 9f       	mul	r18, r25
     526:	f0 0d       	add	r31, r0
     528:	38 9f       	mul	r19, r24
     52a:	f0 0d       	add	r31, r0
     52c:	11 24       	eor	r1, r1
     52e:	e9 51       	subi	r30, 0x19	; 25
     530:	fd 4f       	sbci	r31, 0xFD	; 253
     532:	4e 5f       	subi	r20, 0xFE	; 254
     534:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     536:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
  }

  sei(); // reenable interrupts
     53a:	78 94       	sei
}
     53c:	08 95       	ret

0000053e <trtSignal>:

void trtSignal(uint8_t semnbr) {
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     546:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     548:	00 91 e5 02 	lds	r16, 0x02E5
     54c:	e1 e0       	ldi	r30, 0x01	; 1
     54e:	4f ef       	ldi	r20, 0xFF	; 255
     550:	5f ef       	ldi	r21, 0xFF	; 255
     552:	6f ef       	ldi	r22, 0xFF	; 255
     554:	7f ef       	ldi	r23, 0xFF	; 255
     556:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     558:	8b e0       	ldi	r24, 0x0B	; 11
     55a:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     55c:	21 2f       	mov	r18, r17
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	2e 5f       	subi	r18, 0xFE	; 254
     562:	3f 4f       	sbci	r19, 0xFF	; 255
     564:	1e c0       	rjmp	.+60     	; 0x5a2 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     566:	ef 9d       	mul	r30, r15
     568:	d0 01       	movw	r26, r0
     56a:	11 24       	eor	r1, r1
     56c:	a9 51       	subi	r26, 0x19	; 25
     56e:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     570:	1a 96       	adiw	r26, 0x0a	; 10
     572:	8c 91       	ld	r24, X
     574:	1a 97       	sbiw	r26, 0x0a	; 10
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	82 17       	cp	r24, r18
     57a:	93 07       	cpc	r25, r19
     57c:	69 f4       	brne	.+26     	; 0x598 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     57e:	16 96       	adiw	r26, 0x06	; 6
     580:	8d 91       	ld	r24, X+
     582:	9d 91       	ld	r25, X+
     584:	0d 90       	ld	r0, X+
     586:	bc 91       	ld	r27, X
     588:	a0 2d       	mov	r26, r0
     58a:	48 17       	cp	r20, r24
     58c:	59 07       	cpc	r21, r25
     58e:	6a 07       	cpc	r22, r26
     590:	7b 07       	cpc	r23, r27
     592:	10 f0       	brcs	.+4      	; 0x598 <trtSignal+0x5a>
     594:	fe 2f       	mov	r31, r30
     596:	02 c0       	rjmp	.+4      	; 0x59c <trtSignal+0x5e>
     598:	db 01       	movw	r26, r22
     59a:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     59c:	ef 5f       	subi	r30, 0xFF	; 255
     59e:	ac 01       	movw	r20, r24
     5a0:	bd 01       	movw	r22, r26
     5a2:	0e 17       	cp	r16, r30
     5a4:	00 f7       	brcc	.-64     	; 0x566 <trtSignal+0x28>
  minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     5a6:	ff 23       	and	r31, r31
     5a8:	41 f4       	brne	.+16     	; 0x5ba <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     5aa:	e1 2f       	mov	r30, r17
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	ec 51       	subi	r30, 0x1C	; 28
     5b0:	fd 4f       	sbci	r31, 0xFD	; 253
     5b2:	86 a5       	ldd	r24, Z+46	; 0x2e
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	86 a7       	std	Z+46, r24	; 0x2e
     5b8:	11 c0       	rjmp	.+34     	; 0x5dc <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     5ba:	2f 2f       	mov	r18, r31
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	8b e0       	ldi	r24, 0x0B	; 11
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	28 9f       	mul	r18, r24
     5c4:	f0 01       	movw	r30, r0
     5c6:	29 9f       	mul	r18, r25
     5c8:	f0 0d       	add	r31, r0
     5ca:	38 9f       	mul	r19, r24
     5cc:	f0 0d       	add	r31, r0
     5ce:	11 24       	eor	r1, r1
     5d0:	eb 51       	subi	r30, 0x1B	; 27
     5d2:	fd 4f       	sbci	r31, 0xFD	; 253
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5d8:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
  }

  sei(); // reenable interrupts
     5dc:	78 94       	sei
}
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	08 95       	ret

000005e6 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {
     5e6:	20 91 84 00 	lds	r18, 0x0084
     5ea:	30 91 85 00 	lds	r19, 0x0085
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	80 91 1d 03 	lds	r24, 0x031D
     5f6:	90 91 1e 03 	lds	r25, 0x031E
     5fa:	a0 91 1f 03 	lds	r26, 0x031F
     5fe:	b0 91 20 03 	lds	r27, 0x0320
     602:	dc 01       	movw	r26, r24
     604:	99 27       	eor	r25, r25
     606:	88 27       	eor	r24, r24
     608:	28 0f       	add	r18, r24
     60a:	39 1f       	adc	r19, r25
     60c:	4a 1f       	adc	r20, r26
     60e:	5b 1f       	adc	r21, r27

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
}
     610:	b9 01       	movw	r22, r18
     612:	ca 01       	movw	r24, r20
     614:	08 95       	ret

00000616 <trtSleepUntil>:


void trtSleepUntil(uint32_t release, uint32_t deadline) {
     616:	e0 91 e6 02 	lds	r30, 0x02E6
     61a:	ab e0       	ldi	r26, 0x0B	; 11
     61c:	ea 9f       	mul	r30, r26
     61e:	f0 01       	movw	r30, r0
     620:	11 24       	eor	r1, r1
     622:	e9 51       	subi	r30, 0x19	; 25
     624:	fd 4f       	sbci	r31, 0xFD	; 253

  struct task *t;

  t = &kernel.tasks[kernel.running];

  cli(); // turn off interrupts
     626:	f8 94       	cli

  t->state = TIMEQ;
     628:	a2 e0       	ldi	r26, 0x02	; 2
     62a:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     62c:	62 83       	std	Z+2, r22	; 0x02
     62e:	73 83       	std	Z+3, r23	; 0x03
     630:	84 83       	std	Z+4, r24	; 0x04
     632:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     634:	26 83       	std	Z+6, r18	; 0x06
     636:	37 83       	std	Z+7, r19	; 0x07
     638:	40 87       	std	Z+8, r20	; 0x08
     63a:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     63c:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
}
     640:	08 95       	ret

00000642 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     642:	80 91 e6 02 	lds	r24, 0x02E6
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	2b e0       	ldi	r18, 0x0B	; 11
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	82 9f       	mul	r24, r18
     64e:	f0 01       	movw	r30, r0
     650:	83 9f       	mul	r24, r19
     652:	f0 0d       	add	r31, r0
     654:	92 9f       	mul	r25, r18
     656:	f0 0d       	add	r31, r0
     658:	11 24       	eor	r1, r1
     65a:	eb 51       	subi	r30, 0x1B	; 27
     65c:	fd 4f       	sbci	r31, 0xFD	; 253
     65e:	df 01       	movw	r26, r30
     660:	14 96       	adiw	r26, 0x04	; 4
     662:	64 81       	ldd	r22, Z+4	; 0x04
     664:	11 96       	adiw	r26, 0x01	; 1
     666:	7c 91       	ld	r23, X
     668:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     66a:	12 96       	adiw	r26, 0x02	; 2
     66c:	8c 91       	ld	r24, X
     66e:	12 97       	sbiw	r26, 0x02	; 2
     670:	13 96       	adiw	r26, 0x03	; 3
     672:	9c 91       	ld	r25, X
     674:	08 95       	ret

00000676 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     676:	80 91 e6 02 	lds	r24, 0x02E6
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2b e0       	ldi	r18, 0x0B	; 11
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	82 9f       	mul	r24, r18
     682:	f0 01       	movw	r30, r0
     684:	83 9f       	mul	r24, r19
     686:	f0 0d       	add	r31, r0
     688:	92 9f       	mul	r25, r18
     68a:	f0 0d       	add	r31, r0
     68c:	11 24       	eor	r1, r1
     68e:	eb 51       	subi	r30, 0x1B	; 27
     690:	fd 4f       	sbci	r31, 0xFD	; 253
     692:	df 01       	movw	r26, r30
     694:	18 96       	adiw	r26, 0x08	; 8
     696:	60 85       	ldd	r22, Z+8	; 0x08
     698:	11 96       	adiw	r26, 0x01	; 1
     69a:	7c 91       	ld	r23, X
     69c:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     69e:	12 96       	adiw	r26, 0x02	; 2
     6a0:	8c 91       	ld	r24, X
     6a2:	12 97       	sbiw	r26, 0x02	; 2
     6a4:	13 96       	adiw	r26, 0x03	; 3
     6a6:	9c 91       	ld	r25, X
     6a8:	08 95       	ret

000006aa <trtTerminate>:

void trtTerminate(void) {
     6aa:	f8 94       	cli

  cli();

  kernel.tasks[kernel.running].state = TERMINATED;
     6ac:	80 91 e6 02 	lds	r24, 0x02E6
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	2b e0       	ldi	r18, 0x0B	; 11
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	82 9f       	mul	r24, r18
     6b8:	f0 01       	movw	r30, r0
     6ba:	83 9f       	mul	r24, r19
     6bc:	f0 0d       	add	r31, r0
     6be:	92 9f       	mul	r25, r18
     6c0:	f0 0d       	add	r31, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	eb 51       	subi	r30, 0x1B	; 27
     6c6:	fd 4f       	sbci	r31, 0xFD	; 253
     6c8:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     6ca:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
}
     6ce:	08 95       	ret

000006d0 <trtAccept>:

// --- added by bruce land --------------
uint8_t trtAccept(uint8_t semnbr) {
     6d0:	f8 94       	cli
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts

  s = &kernel.semaphores[semnbr-1];
     6d2:	e8 2f       	mov	r30, r24
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	ee 5e       	subi	r30, 0xEE	; 238
     6d8:	fc 4f       	sbci	r31, 0xFC	; 252
  temp = *s ;
     6da:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     6dc:	88 23       	and	r24, r24
     6de:	19 f0       	breq	.+6      	; 0x6e6 <trtAccept+0x16>
    (*s)--;
     6e0:	81 50       	subi	r24, 0x01	; 1
     6e2:	80 83       	st	Z, r24
     6e4:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     6e6:	78 94       	sei
  return temp ;
}
     6e8:	08 95       	ret

000006ea <trt_uart_init>:
/*
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
void
trt_uart_init(void)
{
     6ea:	87 e6       	ldi	r24, 0x67	; 103
     6ec:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     6f0:	e1 ec       	ldi	r30, 0xC1	; 193
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	88 e1       	ldi	r24, 0x18	; 24
     6f6:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     6f8:	10 92 fd 01 	sts	0x01FD, r1
     6fc:	10 92 fc 01 	sts	0x01FC, r1
  tx_out = 0;
     700:	10 92 ff 01 	sts	0x01FF, r1
     704:	10 92 fe 01 	sts	0x01FE, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     708:	80 81       	ld	r24, Z
     70a:	80 68       	ori	r24, 0x80	; 128
     70c:	80 83       	st	Z, r24
}
     70e:	08 95       	ret

00000710 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	0b b6       	in	r0, 0x3b	; 59
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	8f 93       	push	r24
     724:	9f 93       	push	r25
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     72a:	20 91 fc 01 	lds	r18, 0x01FC
     72e:	30 91 fd 01 	lds	r19, 0x01FD
     732:	80 91 fe 01 	lds	r24, 0x01FE
     736:	90 91 ff 01 	lds	r25, 0x01FF
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	31 f4       	brne	.+12     	; 0x74c <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     740:	80 91 c1 00 	lds	r24, 0x00C1
     744:	8f 7d       	andi	r24, 0xDF	; 223
     746:	80 93 c1 00 	sts	0x00C1, r24
     74a:	1d c0       	rjmp	.+58     	; 0x786 <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     74c:	e0 91 fe 01 	lds	r30, 0x01FE
     750:	f0 91 ff 01 	lds	r31, 0x01FF
     754:	e0 50       	subi	r30, 0x00	; 0
     756:	fe 4f       	sbci	r31, 0xFE	; 254
     758:	80 81       	ld	r24, Z
     75a:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     75e:	80 91 fe 01 	lds	r24, 0x01FE
     762:	90 91 ff 01 	lds	r25, 0x01FF
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	90 93 ff 01 	sts	0x01FF, r25
     76c:	80 93 fe 01 	sts	0x01FE, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     770:	80 91 fe 01 	lds	r24, 0x01FE
     774:	90 91 ff 01 	lds	r25, 0x01FF
     778:	88 3c       	cpi	r24, 0xC8	; 200
     77a:	91 05       	cpc	r25, r1
     77c:	21 f4       	brne	.+8      	; 0x786 <__vector_21+0x76>
     77e:	10 92 ff 01 	sts	0x01FF, r1
     782:	10 92 fe 01 	sts	0x01FE, r1
  }
}
     786:	ff 91       	pop	r31
     788:	ef 91       	pop	r30
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	3f 91       	pop	r19
     790:	2f 91       	pop	r18
     792:	0f 90       	pop	r0
     794:	0b be       	out	0x3b, r0	; 59
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	0f 90       	pop	r0
     79c:	1f 90       	pop	r1
     79e:	18 95       	reti

000007a0 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     7a0:	1f 93       	push	r17
     7a2:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     7a4:	8a 30       	cpi	r24, 0x0A	; 10
     7a6:	19 f4       	brne	.+6      	; 0x7ae <uart_putchar+0xe>
     7a8:	8d e0       	ldi	r24, 0x0D	; 13
     7aa:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
  char i = tx_in;
     7ae:	80 91 fc 01 	lds	r24, 0x01FC
     7b2:	90 91 fd 01 	lds	r25, 0x01FD
  i++;
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     7b8:	88 3c       	cpi	r24, 0xC8	; 200
     7ba:	09 f4       	brne	.+2      	; 0x7be <uart_putchar+0x1e>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     7be:	e0 91 fc 01 	lds	r30, 0x01FC
     7c2:	f0 91 fd 01 	lds	r31, 0x01FD
     7c6:	e0 50       	subi	r30, 0x00	; 0
     7c8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ca:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     7cc:	28 2f       	mov	r18, r24
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	80 91 fe 01 	lds	r24, 0x01FE
     7d4:	90 91 ff 01 	lds	r25, 0x01FF
     7d8:	28 17       	cp	r18, r24
     7da:	39 07       	cpc	r19, r25
     7dc:	c9 f3       	breq	.-14     	; 0x7d0 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     7de:	30 93 fd 01 	sts	0x01FD, r19
     7e2:	20 93 fc 01 	sts	0x01FC, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     7e6:	80 91 c1 00 	lds	r24, 0x00C1
     7ea:	80 62       	ori	r24, 0x20	; 32
     7ec:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	1f 91       	pop	r17
     7f6:	08 95       	ret

000007f8 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	0b b6       	in	r0, 0x3b	; 59
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
	trt_rx_c = UDR0;
     81e:	80 91 c6 00 	lds	r24, 0x00C6
     822:	80 93 25 03 	sts	0x0325, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
}
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	bf 91       	pop	r27
     832:	af 91       	pop	r26
     834:	9f 91       	pop	r25
     836:	8f 91       	pop	r24
     838:	7f 91       	pop	r23
     83a:	6f 91       	pop	r22
     83c:	5f 91       	pop	r21
     83e:	4f 91       	pop	r20
     840:	3f 91       	pop	r19
     842:	2f 91       	pop	r18
     844:	0f 90       	pop	r0
     846:	0b be       	out	0x3b, r0	; 59
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     860:	80 91 aa 01 	lds	r24, 0x01AA
     864:	90 91 ab 01 	lds	r25, 0x01AB
     868:	89 2b       	or	r24, r25
     86a:	09 f0       	breq	.+2      	; 0x86e <uart_getchar+0x1c>
     86c:	a2 c0       	rjmp	.+324    	; 0x9b2 <uart_getchar+0x160>
     86e:	0c ea       	ldi	r16, 0xAC	; 172
     870:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	if (UCSR0A & _BV(FE0))
     878:	80 91 c0 00 	lds	r24, 0x00C0
     87c:	84 ff       	sbrs	r24, 4
     87e:	03 c0       	rjmp	.+6      	; 0x886 <uart_getchar+0x34>
     880:	2e ef       	ldi	r18, 0xFE	; 254
     882:	3f ef       	ldi	r19, 0xFF	; 255
     884:	aa c0       	rjmp	.+340    	; 0x9da <uart_getchar+0x188>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     886:	80 91 c0 00 	lds	r24, 0x00C0
     88a:	83 fd       	sbrc	r24, 3
     88c:	a4 c0       	rjmp	.+328    	; 0x9d6 <uart_getchar+0x184>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     88e:	90 91 25 03 	lds	r25, 0x0325

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     892:	9d 30       	cpi	r25, 0x0D	; 13
     894:	11 f0       	breq	.+4      	; 0x89a <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     896:	9a 30       	cpi	r25, 0x0A	; 10
     898:	81 f4       	brne	.+32     	; 0x8ba <uart_getchar+0x68>
	  {
	    *cp = c;
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	f8 01       	movw	r30, r16
     89e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     8a0:	b7 01       	movw	r22, r14
     8a2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
	    rxp = b;
     8a6:	8c ea       	ldi	r24, 0xAC	; 172
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	90 93 ab 01 	sts	0x01AB, r25
     8ae:	80 93 aa 01 	sts	0x01AA, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
     8b8:	7c c0       	rjmp	.+248    	; 0x9b2 <uart_getchar+0x160>
	    break;
	  }
	else if (c == '\t')
     8ba:	99 30       	cpi	r25, 0x09	; 9
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <uart_getchar+0x6e>
     8be:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     8c0:	89 2f       	mov	r24, r25
     8c2:	80 52       	subi	r24, 0x20	; 32
     8c4:	8f 35       	cpi	r24, 0x5F	; 95
     8c6:	10 f0       	brcs	.+4      	; 0x8cc <uart_getchar+0x7a>
     8c8:	90 3a       	cpi	r25, 0xA0	; 160
     8ca:	78 f0       	brcs	.+30     	; 0x8ea <uart_getchar+0x98>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     8cc:	f1 e0       	ldi	r31, 0x01	; 1
     8ce:	0b 3f       	cpi	r16, 0xFB	; 251
     8d0:	1f 07       	cpc	r17, r31
     8d2:	19 f4       	brne	.+6      	; 0x8da <uart_getchar+0x88>
	      uart_putchar('\a', stream);
     8d4:	b7 01       	movw	r22, r14
     8d6:	87 e0       	ldi	r24, 0x07	; 7
     8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <uart_getchar+0x92>
	    else
	      {
		*cp++ = c;
     8da:	f8 01       	movw	r30, r16
     8dc:	91 93       	st	Z+, r25
     8de:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     8e0:	b7 01       	movw	r22, r14
     8e2:	89 2f       	mov	r24, r25
     8e4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     8e8:	c4 cf       	rjmp	.-120    	; 0x872 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     8ea:	92 31       	cpi	r25, 0x12	; 18
     8ec:	39 f1       	breq	.+78     	; 0x93c <uart_getchar+0xea>
     8ee:	93 31       	cpi	r25, 0x13	; 19
     8f0:	38 f4       	brcc	.+14     	; 0x900 <uart_getchar+0xae>
     8f2:	93 30       	cpi	r25, 0x03	; 3
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <uart_getchar+0xa6>
     8f6:	6f c0       	rjmp	.+222    	; 0x9d6 <uart_getchar+0x184>
     8f8:	98 30       	cpi	r25, 0x08	; 8
     8fa:	09 f0       	breq	.+2      	; 0x8fe <uart_getchar+0xac>
     8fc:	ba cf       	rjmp	.-140    	; 0x872 <uart_getchar+0x20>
     8fe:	09 c0       	rjmp	.+18     	; 0x912 <uart_getchar+0xc0>
     900:	97 31       	cpi	r25, 0x17	; 23
     902:	09 f4       	brne	.+2      	; 0x906 <uart_getchar+0xb4>
     904:	4b c0       	rjmp	.+150    	; 0x99c <uart_getchar+0x14a>
     906:	9f 37       	cpi	r25, 0x7F	; 127
     908:	21 f0       	breq	.+8      	; 0x912 <uart_getchar+0xc0>
     90a:	95 31       	cpi	r25, 0x15	; 21
     90c:	09 f0       	breq	.+2      	; 0x910 <uart_getchar+0xbe>
     90e:	b1 cf       	rjmp	.-158    	; 0x872 <uart_getchar+0x20>
     910:	32 c0       	rjmp	.+100    	; 0x976 <uart_getchar+0x124>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     912:	f1 e0       	ldi	r31, 0x01	; 1
     914:	0c 3a       	cpi	r16, 0xAC	; 172
     916:	1f 07       	cpc	r17, r31
     918:	09 f0       	breq	.+2      	; 0x91c <uart_getchar+0xca>
     91a:	08 f4       	brcc	.+2      	; 0x91e <uart_getchar+0xcc>
     91c:	aa cf       	rjmp	.-172    	; 0x872 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     91e:	b7 01       	movw	r22, r14
     920:	88 e0       	ldi	r24, 0x08	; 8
     922:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     926:	b7 01       	movw	r22, r14
     928:	80 e2       	ldi	r24, 0x20	; 32
     92a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     92e:	b7 01       	movw	r22, r14
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		cp--;
     936:	01 50       	subi	r16, 0x01	; 1
     938:	10 40       	sbci	r17, 0x00	; 0
     93a:	9b cf       	rjmp	.-202    	; 0x872 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     93c:	b7 01       	movw	r22, r14
     93e:	8d e0       	ldi	r24, 0x0D	; 13
     940:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     944:	cc ea       	ldi	r28, 0xAC	; 172
     946:	d1 e0       	ldi	r29, 0x01	; 1
     948:	04 c0       	rjmp	.+8      	; 0x952 <uart_getchar+0x100>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     94a:	b7 01       	movw	r22, r14
     94c:	89 91       	ld	r24, Y+
     94e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     952:	c0 17       	cp	r28, r16
     954:	d1 07       	cpc	r29, r17
     956:	c8 f3       	brcs	.-14     	; 0x94a <uart_getchar+0xf8>
     958:	8c cf       	rjmp	.-232    	; 0x872 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     95a:	b7 01       	movw	r22, r14
     95c:	88 e0       	ldi	r24, 0x08	; 8
     95e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     962:	b7 01       	movw	r22, r14
     964:	80 e2       	ldi	r24, 0x20	; 32
     966:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     96a:	b7 01       	movw	r22, r14
     96c:	88 e0       	ldi	r24, 0x08	; 8
     96e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		cp--;
     972:	01 50       	subi	r16, 0x01	; 1
     974:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	0c 3a       	cpi	r16, 0xAC	; 172
     97a:	18 07       	cpc	r17, r24
     97c:	09 f0       	breq	.+2      	; 0x980 <uart_getchar+0x12e>
     97e:	68 f7       	brcc	.-38     	; 0x95a <uart_getchar+0x108>
     980:	78 cf       	rjmp	.-272    	; 0x872 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     982:	b7 01       	movw	r22, r14
     984:	88 e0       	ldi	r24, 0x08	; 8
     986:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     98a:	b7 01       	movw	r22, r14
     98c:	80 e2       	ldi	r24, 0x20	; 32
     98e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     992:	b7 01       	movw	r22, r14
     994:	88 e0       	ldi	r24, 0x08	; 8
     996:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     99a:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     99c:	e1 e0       	ldi	r30, 0x01	; 1
     99e:	0c 3a       	cpi	r16, 0xAC	; 172
     9a0:	1e 07       	cpc	r17, r30
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <uart_getchar+0x154>
     9a4:	08 f4       	brcc	.+2      	; 0x9a8 <uart_getchar+0x156>
     9a6:	65 cf       	rjmp	.-310    	; 0x872 <uart_getchar+0x20>
     9a8:	e8 01       	movw	r28, r16
     9aa:	8a 91       	ld	r24, -Y
     9ac:	80 32       	cpi	r24, 0x20	; 32
     9ae:	49 f7       	brne	.-46     	; 0x982 <uart_getchar+0x130>
     9b0:	60 cf       	rjmp	.-320    	; 0x872 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     9b2:	e0 91 aa 01 	lds	r30, 0x01AA
     9b6:	f0 91 ab 01 	lds	r31, 0x01AB
     9ba:	81 91       	ld	r24, Z+
     9bc:	f0 93 ab 01 	sts	0x01AB, r31
     9c0:	e0 93 aa 01 	sts	0x01AA, r30
  if (c == '\n')
     9c4:	8a 30       	cpi	r24, 0x0A	; 10
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <uart_getchar+0x17e>
    rxp = 0;
     9c8:	10 92 ab 01 	sts	0x01AB, r1
     9cc:	10 92 aa 01 	sts	0x01AA, r1

  return c;
     9d0:	28 2f       	mov	r18, r24
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <uart_getchar+0x188>
     9d6:	2f ef       	ldi	r18, 0xFF	; 255
     9d8:	3f ef       	ldi	r19, 0xFF	; 255
}
     9da:	c9 01       	movw	r24, r18
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     9ea:	28 2f       	mov	r18, r24
     9ec:	20 7f       	andi	r18, 0xF0	; 240
     9ee:	28 b9       	out	0x08, r18	; 8

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
	LCP|=1<<LCD_RS;
     9f0:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     9f2:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9f4:	20 e4       	ldi	r18, 0x40	; 64
     9f6:	3f e1       	ldi	r19, 0x1F	; 31
     9f8:	f9 01       	movw	r30, r18
     9fa:	31 97       	sbiw	r30, 0x01	; 1
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     9fe:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     a00:	40 98       	cbi	0x08, 0	; 8
     a02:	f9 01       	movw	r30, r18
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	74 e0       	ldi	r23, 0x04	; 4
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	7a 95       	dec	r23
     a12:	e1 f7       	brne	.-8      	; 0xa0c <LCDsendChar+0x22>
     a14:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     a16:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     a18:	42 9a       	sbi	0x08, 2	; 8
     a1a:	c9 01       	movw	r24, r18
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     a20:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     a22:	40 98       	cbi	0x08, 0	; 8
     a24:	c9 01       	movw	r24, r18
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     a2a:	08 95       	ret

00000a2c <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     a2c:	28 2f       	mov	r18, r24
     a2e:	20 7f       	andi	r18, 0xF0	; 240
     a30:	28 b9       	out	0x08, r18	; 8
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
	LCP|=1<<LCD_E;		
     a32:	42 9a       	sbi	0x08, 2	; 8
     a34:	20 e4       	ldi	r18, 0x40	; 64
     a36:	3f e1       	ldi	r19, 0x1F	; 31
     a38:	f9 01       	movw	r30, r18
     a3a:	31 97       	sbiw	r30, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     a3e:	42 98       	cbi	0x08, 2	; 8
     a40:	f9 01       	movw	r30, r18
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	e4 e0       	ldi	r30, 0x04	; 4
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	ea 95       	dec	r30
     a50:	e1 f7       	brne	.-8      	; 0xa4a <LCDsendCommand+0x1e>
     a52:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     a54:	42 9a       	sbi	0x08, 2	; 8
     a56:	c9 01       	movw	r24, r18
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     a5c:	42 98       	cbi	0x08, 2	; 8
     a5e:	c9 01       	movw	r24, r18
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	f1 f7       	brne	.-4      	; 0xa60 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     a64:	08 95       	ret

00000a66 <LCDclr>:
	}

#endif
}			
void LCDclr(void)				//Clears LCD
{
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
	LCDsendCommand(1<<LCD_CLR);
}
     a6c:	08 95       	ret

00000a6e <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
	LCDsendCommand(1<<LCD_HOME);
}
     a74:	08 95       	ret

00000a76 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     a80:	00 97       	sbiw	r24, 0x00	; 0
     a82:	49 f0       	breq	.+18     	; 0xa96 <LCDstring+0x20>
     a84:	ec 01       	movw	r28, r24
     a86:	10 e0       	ldi	r17, 0x00	; 0
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     a8a:	89 91       	ld	r24, Y+
     a8c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     a90:	1f 5f       	subi	r17, 0xFF	; 255
     a92:	10 17       	cp	r17, r16
     a94:	d0 f3       	brcs	.-12     	; 0xa8a <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	08 95       	ret

00000aa0 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
     aa0:	62 30       	cpi	r22, 0x02	; 2
     aa2:	31 f0       	breq	.+12     	; 0xab0 <LCDGotoXY+0x10>
     aa4:	63 30       	cpi	r22, 0x03	; 3
     aa6:	31 f0       	breq	.+12     	; 0xab4 <LCDGotoXY+0x14>
     aa8:	61 30       	cpi	r22, 0x01	; 1
     aaa:	29 f4       	brne	.+10     	; 0xab6 <LCDGotoXY+0x16>
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     aac:	80 5c       	subi	r24, 0xC0	; 192
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     ab0:	8c 5e       	subi	r24, 0xEC	; 236
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     ab4:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     ab6:	80 68       	ori	r24, 0x80	; 128
     ab8:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
	
}
     abc:	08 95       	ret

00000abe <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	ec 01       	movw	r28, r24
     ac6:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     ac8:	64 2f       	mov	r22, r20
     aca:	0e 94 50 05 	call	0xaa0	; 0xaa0 <LCDGotoXY>
     ace:	10 e0       	ldi	r17, 0x00	; 0
     ad0:	03 c0       	rjmp	.+6      	; 0xad8 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     ad2:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     ad6:	1f 5f       	subi	r17, 0xFF	; 255
     ad8:	fe 01       	movw	r30, r28
     ada:	e1 0f       	add	r30, r17
     adc:	f1 1d       	adc	r31, r1
     ade:	84 91       	lpm	r24, Z+
     ae0:	88 23       	and	r24, r24
     ae2:	b9 f7       	brne	.-18     	; 0xad2 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	08 95       	ret

00000aec <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	7c 01       	movw	r14, r24
     afa:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     afc:	11 0f       	add	r17, r17
     afe:	11 0f       	add	r17, r17
     b00:	11 0f       	add	r17, r17
     b02:	10 64       	ori	r17, 0x40	; 64
     b04:	c0 e0       	ldi	r28, 0x00	; 0
     b06:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     b08:	f7 01       	movw	r30, r14
     b0a:	ec 0f       	add	r30, r28
     b0c:	fd 1f       	adc	r31, r29
     b0e:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     b10:	81 2f       	mov	r24, r17
     b12:	8c 0f       	add	r24, r28
     b14:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
		LCDsendChar(pcc);
     b18:	80 2f       	mov	r24, r16
     b1a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     b1e:	21 96       	adiw	r28, 0x01	; 1
     b20:	c8 30       	cpi	r28, 0x08	; 8
     b22:	d1 05       	cpc	r29, r1
     b24:	89 f7       	brne	.-30     	; 0xb08 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	08 95       	ret

00000b34 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	80 e6       	ldi	r24, 0x60	; 96
     b3c:	9a ee       	ldi	r25, 0xEA	; 234
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     b42:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     b44:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     b46:	87 b1       	in	r24, 0x07	; 7
     b48:	80 6f       	ori	r24, 0xF0	; 240
     b4a:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     b4c:	87 b1       	in	r24, 0x07	; 7
     b4e:	87 60       	ori	r24, 0x07	; 7
     b50:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b52:	80 e3       	ldi	r24, 0x30	; 48
     b54:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b56:	42 9a       	sbi	0x08, 2	; 8
     b58:	20 e4       	ldi	r18, 0x40	; 64
     b5a:	3f e1       	ldi	r19, 0x1F	; 31
     b5c:	f9 01       	movw	r30, r18
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	f1 f7       	brne	.-4      	; 0xb5e <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b62:	42 98       	cbi	0x08, 2	; 8
     b64:	f9 01       	movw	r30, r18
     b66:	31 97       	sbiw	r30, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b6a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b6c:	42 9a       	sbi	0x08, 2	; 8
     b6e:	c9 01       	movw	r24, r18
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b74:	42 98       	cbi	0x08, 2	; 8
     b76:	c9 01       	movw	r24, r18
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     b7c:	80 e2       	ldi	r24, 0x20	; 32
     b7e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b80:	42 9a       	sbi	0x08, 2	; 8
     b82:	c9 01       	movw	r24, r18
     b84:	01 97       	sbiw	r24, 0x01	; 1
     b86:	f1 f7       	brne	.-4      	; 0xb84 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b88:	42 98       	cbi	0x08, 2	; 8
     b8a:	c9 01       	movw	r24, r18
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     b90:	88 e2       	ldi	r24, 0x28	; 40
     b92:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     b96:	8c e0       	ldi	r24, 0x0C	; 12
     b98:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
     b9c:	cc e8       	ldi	r28, 0x8C	; 140
     b9e:	d0 e0       	ldi	r29, 0x00	; 0
     ba0:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     ba2:	16 2f       	mov	r17, r22
     ba4:	1f 5f       	subi	r17, 0xFF	; 255
     ba6:	ce 01       	movw	r24, r28
     ba8:	0e 94 76 05 	call	0xaec	; 0xaec <LCDdefinechar>
     bac:	28 96       	adiw	r28, 0x08	; 8
     bae:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     bb0:	18 30       	cpi	r17, 0x08	; 8
     bb2:	b9 f7       	brne	.-18     	; 0xba2 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	08 95       	ret

00000bbc <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	08 2f       	mov	r16, r24
     bc2:	10 e0       	ldi	r17, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     bc6:	8e e1       	ldi	r24, 0x1E	; 30
     bc8:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     bcc:	1f 5f       	subi	r17, 0xFF	; 255
     bce:	10 17       	cp	r17, r16
     bd0:	d0 f3       	brcs	.-12     	; 0xbc6 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	08 95       	ret

00000bd8 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	08 2f       	mov	r16, r24
     bde:	10 e0       	ldi	r17, 0x00	; 0
     be0:	04 c0       	rjmp	.+8      	; 0xbea <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     be2:	88 e1       	ldi	r24, 0x18	; 24
     be4:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     be8:	1f 5f       	subi	r17, 0xFF	; 255
     bea:	10 17       	cp	r17, r16
     bec:	d0 f3       	brcs	.-12     	; 0xbe2 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	08 95       	ret

00000bf4 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
     bf4:	8e e0       	ldi	r24, 0x0E	; 14
     bf6:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
	LCDsendCommand(0x0E);
}
     bfa:	08 95       	ret

00000bfc <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
     bfc:	8f e0       	ldi	r24, 0x0F	; 15
     bfe:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
	LCDsendCommand(0x0F);
}
     c02:	08 95       	ret

00000c04 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
     c04:	8c e0       	ldi	r24, 0x0C	; 12
     c06:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
	LCDsendCommand(0x0C);
}
     c0a:	08 95       	ret

00000c0c <LCDblank>:
void LCDblank(void)		//blanks LCD
{
     c0c:	88 e0       	ldi	r24, 0x08	; 8
     c0e:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
	LCDsendCommand(0x08);
}
     c12:	08 95       	ret

00000c14 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
     c14:	8c e0       	ldi	r24, 0x0C	; 12
     c16:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
	LCDsendCommand(0x0C);
}
     c1a:	08 95       	ret

00000c1c <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	08 2f       	mov	r16, r24
     c22:	10 e0       	ldi	r17, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     c26:	80 e1       	ldi	r24, 0x10	; 16
     c28:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c2c:	1f 5f       	subi	r17, 0xFF	; 255
     c2e:	10 17       	cp	r17, r16
     c30:	d0 f3       	brcs	.-12     	; 0xc26 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	08 95       	ret

00000c38 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	08 2f       	mov	r16, r24
     c3e:	10 e0       	ldi	r17, 0x00	; 0
     c40:	04 c0       	rjmp	.+8      	; 0xc4a <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     c42:	84 e1       	ldi	r24, 0x14	; 20
     c44:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c48:	1f 5f       	subi	r17, 0xFF	; 255
     c4a:	10 17       	cp	r17, r16
     c4c:	d0 f3       	brcs	.-12     	; 0xc42 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	08 95       	ret

00000c54 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     c64:	96 e0       	ldi	r25, 0x06	; 6
     c66:	89 9f       	mul	r24, r25
     c68:	c0 01       	movw	r24, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	24 2f       	mov	r18, r20
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	ac 01       	movw	r20, r24
     c72:	42 9f       	mul	r20, r18
     c74:	c0 01       	movw	r24, r0
     c76:	43 9f       	mul	r20, r19
     c78:	90 0d       	add	r25, r0
     c7a:	52 9f       	mul	r21, r18
     c7c:	90 0d       	add	r25, r0
     c7e:	11 24       	eor	r1, r1
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__divmodhi4>
     c86:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     c88:	cb 01       	movw	r24, r22
     c8a:	66 e0       	ldi	r22, 0x06	; 6
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__udivmodhi4>
     c92:	e8 2e       	mov	r14, r24
     c94:	ff 24       	eor	r15, r15
     c96:	00 e0       	ldi	r16, 0x00	; 0
     c98:	10 e0       	ldi	r17, 0x00	; 0
     c9a:	12 c0       	rjmp	.+36     	; 0xcc0 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     c9c:	c8 01       	movw	r24, r16
     c9e:	05 96       	adiw	r24, 0x05	; 5
     ca0:	c8 17       	cp	r28, r24
     ca2:	d9 07       	cpc	r29, r25
     ca4:	10 f0       	brcs	.+4      	; 0xcaa <LCDprogressBar+0x56>
     ca6:	85 e0       	ldi	r24, 0x05	; 5
     ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     caa:	c0 17       	cp	r28, r16
     cac:	d1 07       	cpc	r29, r17
     cae:	10 f0       	brcs	.+4      	; 0xcb4 <LCDprogressBar+0x60>
     cb0:	8e 2d       	mov	r24, r14
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <LCDprogressBar+0x62>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     cb6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     cba:	f3 94       	inc	r15
     cbc:	0a 5f       	subi	r16, 0xFA	; 250
     cbe:	1f 4f       	sbci	r17, 0xFF	; 255
     cc0:	fd 14       	cp	r15, r13
     cc2:	60 f3       	brcs	.-40     	; 0xc9c <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	08 95       	ret

00000cd4 <__vector_16>:

/********************************************************************/
// 							ISRs & Helper Functions
/********************************************************************/
// --- Timer ISR ------------------------
ISR (TIMER0_COMPA_vect) {
     cd4:	1f 92       	push	r1
     cd6:	0f 92       	push	r0
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	0f 92       	push	r0
     cdc:	0b b6       	in	r0, 0x3b	; 59
     cde:	0f 92       	push	r0
     ce0:	11 24       	eor	r1, r1
     ce2:	2f 93       	push	r18
     ce4:	3f 93       	push	r19
     ce6:	4f 93       	push	r20
     ce8:	5f 93       	push	r21
     cea:	6f 93       	push	r22
     cec:	7f 93       	push	r23
     cee:	8f 93       	push	r24
     cf0:	9f 93       	push	r25
     cf2:	af 93       	push	r26
     cf4:	bf 93       	push	r27
     cf6:	ef 93       	push	r30
     cf8:	ff 93       	push	r31
	trtWait(SEM_SHARED);
     cfa:	84 e0       	ldi	r24, 0x04	; 4
     cfc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	if (time_rem > 0) {
     d00:	80 91 e3 02 	lds	r24, 0x02E3
     d04:	90 91 e4 02 	lds	r25, 0x02E4
     d08:	18 16       	cp	r1, r24
     d0a:	19 06       	cpc	r1, r25
     d0c:	f4 f4       	brge	.+60     	; 0xd4a <__vector_16+0x76>
		if (msec < 1000) {
     d0e:	80 91 ce 02 	lds	r24, 0x02CE
     d12:	90 91 cf 02 	lds	r25, 0x02CF
     d16:	88 5e       	subi	r24, 0xE8	; 232
     d18:	93 40       	sbci	r25, 0x03	; 3
     d1a:	54 f4       	brge	.+20     	; 0xd30 <__vector_16+0x5c>
			msec++;
     d1c:	80 91 ce 02 	lds	r24, 0x02CE
     d20:	90 91 cf 02 	lds	r25, 0x02CF
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	90 93 cf 02 	sts	0x02CF, r25
     d2a:	80 93 ce 02 	sts	0x02CE, r24
     d2e:	0d c0       	rjmp	.+26     	; 0xd4a <__vector_16+0x76>
		}
		else {
			msec = 0;
     d30:	10 92 cf 02 	sts	0x02CF, r1
     d34:	10 92 ce 02 	sts	0x02CE, r1
			time_rem--;
     d38:	80 91 e3 02 	lds	r24, 0x02E3
     d3c:	90 91 e4 02 	lds	r25, 0x02E4
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	90 93 e4 02 	sts	0x02E4, r25
     d46:	80 93 e3 02 	sts	0x02E3, r24
		}
	}
    trtSignal(SEM_SHARED);
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
}
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	bf 91       	pop	r27
     d56:	af 91       	pop	r26
     d58:	9f 91       	pop	r25
     d5a:	8f 91       	pop	r24
     d5c:	7f 91       	pop	r23
     d5e:	6f 91       	pop	r22
     d60:	5f 91       	pop	r21
     d62:	4f 91       	pop	r20
     d64:	3f 91       	pop	r19
     d66:	2f 91       	pop	r18
     d68:	0f 90       	pop	r0
     d6a:	0b be       	out	0x3b, r0	; 59
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti

00000d76 <init_lcd>:


//**********************************************************
// LCD setup
void init_lcd(void) {
     d76:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCDinit>
	LCDinit();				//initialize the display
	LCDcursorOFF();
     d7a:	0e 94 02 06 	call	0xc04	; 0xc04 <LCDcursorOFF>
	LCDclr();				//clear the display
     d7e:	0e 94 33 05 	call	0xa66	; 0xa66 <LCDclr>
	LCDGotoXY(0,0);
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 50 05 	call	0xaa0	; 0xaa0 <LCDGotoXY>
}
     d8a:	08 95       	ret

00000d8c <adc_init>:

//********************************************************** 
// ADC setup
void adc_init(void){
     d8c:	ea e7       	ldi	r30, 0x7A	; 122
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	87 60       	ori	r24, 0x07	; 7
     d94:	80 83       	st	Z, r24
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
     d96:	ac e7       	ldi	r26, 0x7C	; 124
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	8c 91       	ld	r24, X
     d9c:	80 64       	ori	r24, 0x40	; 64
     d9e:	8c 93       	st	X, r24
	//ADMUX |= (0<<REFS1)
	ADCSRA |= (1<<ADEN);                //Turn on ADC
     da0:	80 81       	ld	r24, Z
     da2:	80 68       	ori	r24, 0x80	; 128
     da4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
     da6:	80 81       	ld	r24, Z
     da8:	80 64       	ori	r24, 0x40	; 64
     daa:	80 83       	st	Z, r24
}
     dac:	08 95       	ret

00000dae <read_adc>:
 
uint16_t read_adc(uint8_t channel){
     dae:	90 91 7c 00 	lds	r25, 0x007C
     db2:	90 7f       	andi	r25, 0xF0	; 240
     db4:	90 93 7c 00 	sts	0x007C, r25
	ADMUX &= 0xF0;                    //Clear the older channel that was read
	ADMUX |= channel;                //Defines the new ADC channel to be read
     db8:	90 91 7c 00 	lds	r25, 0x007C
     dbc:	98 2b       	or	r25, r24
     dbe:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
     dc2:	80 91 7a 00 	lds	r24, 0x007A
     dc6:	80 64       	ori	r24, 0x40	; 64
     dc8:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
     dcc:	80 91 7a 00 	lds	r24, 0x007A
     dd0:	86 fd       	sbrc	r24, 6
     dd2:	fc cf       	rjmp	.-8      	; 0xdcc <read_adc+0x1e>
	return ADCW;                    //Returns the ADC value of the chosen channel
     dd4:	20 91 78 00 	lds	r18, 0x0078
     dd8:	30 91 79 00 	lds	r19, 0x0079
}
     ddc:	c9 01       	movw	r24, r18
     dde:	08 95       	ret

00000de0 <initialize>:
// http://hekilledmywire.wordpress.com/2011/03/16/using-the-adc-tutorial-part-5/

//********************************************************** 
//Set it all up
void initialize(void) {
     de0:	11 b8       	out	0x01, r1	; 1
	DDRA = 0x00;		// ADC Port
	PORTA = 0x00;
     de2:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xff;    	// LCD connections
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     de8:	18 b8       	out	0x08, r1	; 8
	DDRD = 0x0C;		// LED status light && Relay
     dea:	8c e0       	ldi	r24, 0x0C	; 12
     dec:	8a b9       	out	0x0a, r24	; 10
	PORTC = 0x08;		// Initialize relay to high
     dee:	88 e0       	ldi	r24, 0x08	; 8
     df0:	88 b9       	out	0x08, r24	; 8

	// ******************** 
	//initialize variables
	trtWait(SEM_SHARED);
     df2:	84 e0       	ldi	r24, 0x04	; 4
     df4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	cTemp = 0.0;
     df8:	10 92 27 03 	sts	0x0327, r1
     dfc:	10 92 26 03 	sts	0x0326, r1
	dTemp = 0.0;
     e00:	10 92 d1 02 	sts	0x02D1, r1
     e04:	10 92 d0 02 	sts	0x02D0, r1
	time_rem = 0;
     e08:	10 92 e4 02 	sts	0x02E4, r1
     e0c:	10 92 e3 02 	sts	0x02E3, r1
	msec = 0;
     e10:	10 92 cf 02 	sts	0x02CF, r1
     e14:	10 92 ce 02 	sts	0x02CE, r1
	trtSignal(SEM_SHARED);
     e18:	84 e0       	ldi	r24, 0x04	; 4
     e1a:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>

	// ******************** 
	//init LCD
	init_lcd();
     e1e:	0e 94 bb 06 	call	0xd76	; 0xd76 <init_lcd>
	LCDclr();
     e22:	0e 94 33 05 	call	0xa66	; 0xa66 <LCDclr>
	// put some stuff on LCD
	CopyStringtoLCD(LCD_line1, 0, 0);//start at char=0 line=0
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	8c ec       	ldi	r24, 0xCC	; 204
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 5f 05 	call	0xabe	; 0xabe <CopyStringtoLCD>
	CopyStringtoLCD(LCD_line2, 0, 1); 
     e32:	41 e0       	ldi	r20, 0x01	; 1
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	86 ed       	ldi	r24, 0xD6	; 214
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 5f 05 	call	0xabe	; 0xabe <CopyStringtoLCD>
}

//********************************************************** 
// ADC setup
void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
     e3e:	ea e7       	ldi	r30, 0x7A	; 122
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	87 60       	ori	r24, 0x07	; 7
     e46:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
     e48:	ac e7       	ldi	r26, 0x7C	; 124
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	8c 91       	ld	r24, X
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24
	//ADMUX |= (0<<REFS1)
	ADCSRA |= (1<<ADEN);                //Turn on ADC
     e52:	80 81       	ld	r24, Z
     e54:	80 68       	ori	r24, 0x80	; 128
     e56:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
     e58:	80 81       	ld	r24, Z
     e5a:	80 64       	ori	r24, 0x40	; 64
     e5c:	80 83       	st	Z, r24
	//init ADC
	adc_init();

	// ******************** 
	//set up timer 0 for 1 mSec timebase 
	TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
     e5e:	92 e0       	ldi	r25, 0x02	; 2
     e60:	90 93 6e 00 	sts	0x006E, r25
	OCR0A = 249;  		//set the compare reg to 250 time ticks
     e64:	89 ef       	ldi	r24, 0xF9	; 249
     e66:	87 bd       	out	0x27, r24	; 39
	//set prescalar to divide by 64 
	TCCR0B= 3; 	
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	85 bd       	out	0x25, r24	; 37
	// turn on clear-on-match
	TCCR0A= (1<<WGM01) ;
     e6c:	94 bd       	out	0x24, r25	; 36

	// ********************
	//crank up the ISRs
	sei();
     e6e:	78 94       	sei
}  
     e70:	08 95       	ret

00000e72 <adjustTemp>:
	  trtSleepUntil(rel, dead);	
  	}
}

// --- define task 3  ----------------------------------------
void adjustTemp(void* args) {
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
	ADCSRA |= (1<<ADEN);                //Turn on ADC
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
}
 
uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                    //Clear the older channel that was read
     e7a:	80 91 7c 00 	lds	r24, 0x007C
     e7e:	80 7f       	andi	r24, 0xF0	; 240
     e80:	80 93 7c 00 	sts	0x007C, r24
	ADMUX |= channel;                //Defines the new ADC channel to be read
     e84:	80 91 7c 00 	lds	r24, 0x007C
     e88:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
     e8c:	80 91 7a 00 	lds	r24, 0x007A
     e90:	80 64       	ori	r24, 0x40	; 64
     e92:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
     e96:	80 91 7a 00 	lds	r24, 0x007A
     e9a:	86 fd       	sbrc	r24, 6
     e9c:	fc cf       	rjmp	.-8      	; 0xe96 <adjustTemp+0x24>
	return ADCW;                    //Returns the ADC value of the chosen channel
     e9e:	00 91 78 00 	lds	r16, 0x0078
     ea2:	10 91 79 00 	lds	r17, 0x0079
		//fprintf(stdout, "ADC: %i\n\r", adc_in);

		// Control mechanism
		// If adjusted adc value is lower than desired. 
		// Set the control bit to off
		trtWait(SEM_SHARED);
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
		adc_val = adc_in;
     eac:	10 93 c9 02 	sts	0x02C9, r17
     eb0:	00 93 c8 02 	sts	0x02C8, r16
		if (adc_val < dTemp) {
     eb4:	20 91 c8 02 	lds	r18, 0x02C8
     eb8:	30 91 c9 02 	lds	r19, 0x02C9
     ebc:	80 91 d0 02 	lds	r24, 0x02D0
     ec0:	90 91 d1 02 	lds	r25, 0x02D1
     ec4:	28 17       	cp	r18, r24
     ec6:	39 07       	cpc	r19, r25
     ec8:	14 f4       	brge	.+4      	; 0xece <adjustTemp+0x5c>
			//fprintf(stdout, "Turning on");
			PORTD &= ~RELAY_EN;
     eca:	5b 98       	cbi	0x0b, 3	; 11
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <adjustTemp+0x5e>
		}
		else {
			//fprintf(stdout, "Turning off");
			PORTD |= RELAY_EN;
     ece:	5b 9a       	sbi	0x0b, 3	; 11
		}
		trtSignal(SEM_SHARED);
     ed0:	84 e0       	ldi	r24, 0x04	; 4
     ed2:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     ed6:	60 91 1d 03 	lds	r22, 0x031D
     eda:	70 91 1e 03 	lds	r23, 0x031E
     ede:	80 91 1f 03 	lds	r24, 0x031F
     ee2:	90 91 20 03 	lds	r25, 0x0320
     ee6:	cb 01       	movw	r24, r22
     ee8:	77 27       	eor	r23, r23
     eea:	66 27       	eor	r22, r22
     eec:	e0 90 84 00 	lds	r14, 0x0084
     ef0:	f0 90 85 00 	lds	r15, 0x0085

		// sleep
	  	rel = trtCurrentTime() + SECONDS2TICKS(0.25);
	  	dead = trtCurrentTime() + SECONDS2TICKS(0.5);
	  	trtSleepUntil(rel, dead);	
     ef4:	20 91 84 00 	lds	r18, 0x0084
     ef8:	30 91 85 00 	lds	r19, 0x0085
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	26 0f       	add	r18, r22
     f02:	37 1f       	adc	r19, r23
     f04:	48 1f       	adc	r20, r24
     f06:	59 1f       	adc	r21, r25
     f08:	2c 57       	subi	r18, 0x7C	; 124
     f0a:	31 4e       	sbci	r19, 0xE1	; 225
     f0c:	4f 4f       	sbci	r20, 0xFF	; 255
     f0e:	5f 4f       	sbci	r21, 0xFF	; 255
     f10:	00 e0       	ldi	r16, 0x00	; 0
     f12:	10 e0       	ldi	r17, 0x00	; 0
     f14:	6e 0d       	add	r22, r14
     f16:	7f 1d       	adc	r23, r15
     f18:	80 1f       	adc	r24, r16
     f1a:	91 1f       	adc	r25, r17
     f1c:	6e 5b       	subi	r22, 0xBE	; 190
     f1e:	70 4f       	sbci	r23, 0xF0	; 240
     f20:	8f 4f       	sbci	r24, 0xFF	; 255
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	0e 94 0b 03 	call	0x616	; 0x616 <trtSleepUntil>
     f28:	a8 cf       	rjmp	.-176    	; 0xe7a <adjustTemp+0x8>

00000f2a <main>:
	}
}

// --- Main Program ----------------------------------
int main(void) {
     f2a:	cf 92       	push	r12
     f2c:	df 92       	push	r13
     f2e:	ef 92       	push	r14
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     f36:	87 e6       	ldi	r24, 0x67	; 103
     f38:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     f3c:	88 e1       	ldi	r24, 0x18	; 24
     f3e:	80 93 c1 00 	sts	0x00C1, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     f42:	10 92 fd 01 	sts	0x01FD, r1
     f46:	10 92 fc 01 	sts	0x01FC, r1
  tx_out = 0;
     f4a:	10 92 ff 01 	sts	0x01FF, r1
     f4e:	10 92 fe 01 	sts	0x01FE, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     f52:	80 91 c1 00 	lds	r24, 0x00C1
     f56:	80 68       	ori	r24, 0x80	; 128
     f58:	80 93 c1 00 	sts	0x00C1, r24
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
  stdout = stdin = stderr = &uart0;
     f5c:	6b e9       	ldi	r22, 0x9B	; 155
     f5e:	71 e0       	ldi	r23, 0x01	; 1
     f60:	70 93 2d 03 	sts	0x032D, r23
     f64:	60 93 2c 03 	sts	0x032C, r22
     f68:	70 93 29 03 	sts	0x0329, r23
     f6c:	60 93 28 03 	sts	0x0328, r22
     f70:	70 93 2b 03 	sts	0x032B, r23
     f74:	60 93 2a 03 	sts	0x032A, r22
  fprintf(stdout,"\n\r Welcome to KitchenBot UI \n\r Please input your instructions below\n\r\n\r");
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputs>
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     f80:	10 92 85 00 	sts	0x0085, r1
     f84:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     f88:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     f8c:	85 e0       	ldi	r24, 0x05	; 5
     f8e:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	80 93 6f 00 	sts	0x006F, r24

  kernel.memptr = (void*)(RAMEND - idlestack);
     f98:	8f ea       	ldi	r24, 0xAF	; 175
     f9a:	90 e4       	ldi	r25, 0x40	; 64
     f9c:	90 93 1c 03 	sts	0x031C, r25
     fa0:	80 93 1b 03 	sts	0x031B, r24
  kernel.nbrOfTasks = 0;
     fa4:	10 92 e5 02 	sts	0x02E5, r1
  kernel.running = 0;
     fa8:	10 92 e6 02 	sts	0x02E6, r1

  kernel.cycles = 0x0000;
     fac:	10 92 1d 03 	sts	0x031D, r1
     fb0:	10 92 1e 03 	sts	0x031E, r1
     fb4:	10 92 1f 03 	sts	0x031F, r1
     fb8:	10 92 20 03 	sts	0x0320, r1
  kernel.nextHit = 0x7FFFFFFF;
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
     fbe:	9f ef       	ldi	r25, 0xFF	; 255
     fc0:	af ef       	ldi	r26, 0xFF	; 255
     fc2:	bf e7       	ldi	r27, 0x7F	; 127
     fc4:	80 93 21 03 	sts	0x0321, r24
     fc8:	90 93 22 03 	sts	0x0322, r25
     fcc:	a0 93 23 03 	sts	0x0323, r26
     fd0:	b0 93 24 03 	sts	0x0324, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     fd4:	80 93 ed 02 	sts	0x02ED, r24
     fd8:	90 93 ee 02 	sts	0x02EE, r25
     fdc:	a0 93 ef 02 	sts	0x02EF, r26
     fe0:	b0 93 f0 02 	sts	0x02F0, r27
  kernel.tasks[0].release = 0x00000000;
     fe4:	10 92 e9 02 	sts	0x02E9, r1
     fe8:	10 92 ea 02 	sts	0x02EA, r1
     fec:	10 92 eb 02 	sts	0x02EB, r1
     ff0:	10 92 ec 02 	sts	0x02EC, r1

  sei(); /* set enabled interrupts */
     ff4:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     ff6:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     ff8:	10 92 13 03 	sts	0x0313, r1
  
  sei(); // set enabled interrupts;
     ffc:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     ffe:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1000:	10 92 14 03 	sts	0x0314, r1
  
  sei(); // set enabled interrupts;
    1004:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1006:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 16 03 	sts	0x0316, r24
  
  sei(); // set enabled interrupts;
    100e:	78 94       	sei

  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variable

  // --- create tasks  ----------------
  trtCreateTask(serialComm, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[0]));
    1010:	1a ec       	ldi	r17, 0xCA	; 202
    1012:	c1 2e       	mov	r12, r17
    1014:	12 e0       	ldi	r17, 0x02	; 2
    1016:	d1 2e       	mov	r13, r17
    1018:	ba e1       	ldi	r27, 0x1A	; 26
    101a:	eb 2e       	mov	r14, r27
    101c:	b6 e0       	ldi	r27, 0x06	; 6
    101e:	fb 2e       	mov	r15, r27
    1020:	01 2d       	mov	r16, r1
    1022:	11 2d       	mov	r17, r1
    1024:	2a e1       	ldi	r18, 0x1A	; 26
    1026:	36 e0       	ldi	r19, 0x06	; 6
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	68 ee       	ldi	r22, 0xE8	; 232
    102e:	73 e0       	ldi	r23, 0x03	; 3
    1030:	89 ec       	ldi	r24, 0xC9	; 201
    1032:	98 e0       	ldi	r25, 0x08	; 8
    1034:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
  trtCreateTask(lcdComm, 1000, SECONDS2TICKS(0.25), SECONDS2TICKS(0.5), &(args[0]));
    1038:	a4 e8       	ldi	r26, 0x84	; 132
    103a:	ea 2e       	mov	r14, r26
    103c:	ae e1       	ldi	r26, 0x1E	; 30
    103e:	fa 2e       	mov	r15, r26
    1040:	01 2d       	mov	r16, r1
    1042:	11 2d       	mov	r17, r1
    1044:	22 e4       	ldi	r18, 0x42	; 66
    1046:	3f e0       	ldi	r19, 0x0F	; 15
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	68 ee       	ldi	r22, 0xE8	; 232
    104e:	73 e0       	ldi	r23, 0x03	; 3
    1050:	85 e4       	ldi	r24, 0x45	; 69
    1052:	98 e0       	ldi	r25, 0x08	; 8
    1054:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
  trtCreateTask(adjustTemp, 1000, SECONDS2TICKS(0.25), SECONDS2TICKS(0.5), &(args[0]));
    1058:	22 e4       	ldi	r18, 0x42	; 66
    105a:	3f e0       	ldi	r19, 0x0F	; 15
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	68 ee       	ldi	r22, 0xE8	; 232
    1062:	73 e0       	ldi	r23, 0x03	; 3
    1064:	89 e3       	ldi	r24, 0x39	; 57
    1066:	97 e0       	ldi	r25, 0x07	; 7
    1068:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
  // --- Idle task --------------------------------------
  // For debugging, blink an LED
  // For production, you would probably comment out the body of the WHILE
  while (1) {
  	// Light turn on when it is heating up. 
  	if (cTemp >= dTemp) {
    106c:	20 91 26 03 	lds	r18, 0x0326
    1070:	30 91 27 03 	lds	r19, 0x0327
    1074:	80 91 d0 02 	lds	r24, 0x02D0
    1078:	90 91 d1 02 	lds	r25, 0x02D1
    107c:	28 17       	cp	r18, r24
    107e:	39 07       	cpc	r19, r25
    1080:	14 f0       	brlt	.+4      	; 0x1086 <main+0x15c>
		PORTD |= LED_EN;
    1082:	5a 9a       	sbi	0x0b, 2	; 11
    1084:	f3 cf       	rjmp	.-26     	; 0x106c <main+0x142>
	}
	else {
		PORTD &= ~LED_EN;
    1086:	5a 98       	cbi	0x0b, 2	; 11
    1088:	f1 cf       	rjmp	.-30     	; 0x106c <main+0x142>

0000108a <lcdComm>:
		trtSignal(SEM_SHARED);
	}
}

// --- define task 2  ----------------------------------------
void lcdComm(void* args) {
    108a:	af 92       	push	r10
    108c:	bf 92       	push	r11
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
	uint32_t rel, dead;
	// increment time counter and format string 
	while (TRUE) {
	  // display the current temp
	  trtWait(SEM_SHARED) ;
	  sprintf(lcd_buffer, "%iC      ", cTemp);
    109e:	c2 ed       	ldi	r28, 0xD2	; 210
    10a0:	d2 e0       	ldi	r29, 0x02	; 2
    10a2:	98 e4       	ldi	r25, 0x48	; 72
    10a4:	a9 2e       	mov	r10, r25
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	b9 2e       	mov	r11, r25
	  LCDGotoXY(9, 0);
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
	  // display the desired temp 
	  //sprintf(lcd_buffer, "%iC", dTemp);
	  sprintf(lcd_buffer, "%is      ", time_rem);
    10aa:	82 e5       	ldi	r24, 0x52	; 82
    10ac:	c8 2e       	mov	r12, r24
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	d8 2e       	mov	r13, r24
void lcdComm(void* args) {
	uint32_t rel, dead;
	// increment time counter and format string 
	while (TRUE) {
	  // display the current temp
	  trtWait(SEM_SHARED) ;
    10b2:	84 e0       	ldi	r24, 0x04	; 4
    10b4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	  sprintf(lcd_buffer, "%iC      ", cTemp);
    10b8:	80 91 26 03 	lds	r24, 0x0326
    10bc:	90 91 27 03 	lds	r25, 0x0327
    10c0:	9f 93       	push	r25
    10c2:	8f 93       	push	r24
    10c4:	bf 92       	push	r11
    10c6:	af 92       	push	r10
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	0e 94 18 0a 	call	0x1430	; 0x1430 <sprintf>
	  LCDGotoXY(9, 0);
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	89 e0       	ldi	r24, 0x09	; 9
    10d4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <LCDGotoXY>
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
    10d8:	fe 01       	movw	r30, r28
    10da:	01 90       	ld	r0, Z+
    10dc:	00 20       	and	r0, r0
    10de:	e9 f7       	brne	.-6      	; 0x10da <lcdComm+0x50>
    10e0:	31 97       	sbiw	r30, 0x01	; 1
    10e2:	ec 1b       	sub	r30, r28
    10e4:	fd 0b       	sbc	r31, r29
    10e6:	6e 2f       	mov	r22, r30
    10e8:	82 ed       	ldi	r24, 0xD2	; 210
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	0e 94 3b 05 	call	0xa76	; 0xa76 <LCDstring>
	  // display the desired temp 
	  //sprintf(lcd_buffer, "%iC", dTemp);
	  sprintf(lcd_buffer, "%is      ", time_rem);
    10f0:	80 91 e3 02 	lds	r24, 0x02E3
    10f4:	90 91 e4 02 	lds	r25, 0x02E4
    10f8:	9f 93       	push	r25
    10fa:	8f 93       	push	r24
    10fc:	df 92       	push	r13
    10fe:	cf 92       	push	r12
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	0e 94 18 0a 	call	0x1430	; 0x1430 <sprintf>
	  LCDGotoXY(9, 1);
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	89 e0       	ldi	r24, 0x09	; 9
    110c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <LCDGotoXY>
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
    1110:	fe 01       	movw	r30, r28
    1112:	01 90       	ld	r0, Z+
    1114:	00 20       	and	r0, r0
    1116:	e9 f7       	brne	.-6      	; 0x1112 <lcdComm+0x88>
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	ec 1b       	sub	r30, r28
    111c:	fd 0b       	sbc	r31, r29
    111e:	6e 2f       	mov	r22, r30
    1120:	82 ed       	ldi	r24, 0xD2	; 210
    1122:	92 e0       	ldi	r25, 0x02	; 2
    1124:	0e 94 3b 05 	call	0xa76	; 0xa76 <LCDstring>
	  trtSignal(SEM_SHARED) ;
    1128:	84 e0       	ldi	r24, 0x04	; 4
    112a:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    112e:	60 91 1d 03 	lds	r22, 0x031D
    1132:	70 91 1e 03 	lds	r23, 0x031E
    1136:	80 91 1f 03 	lds	r24, 0x031F
    113a:	90 91 20 03 	lds	r25, 0x0320
    113e:	cb 01       	movw	r24, r22
    1140:	77 27       	eor	r23, r23
    1142:	66 27       	eor	r22, r22
    1144:	e0 90 84 00 	lds	r14, 0x0084
    1148:	f0 90 85 00 	lds	r15, 0x0085
	  // sleep
	  rel = trtCurrentTime() + SECONDS2TICKS(0.25);
	  dead = trtCurrentTime() + SECONDS2TICKS(0.5);
	  trtSleepUntil(rel, dead);	
    114c:	20 91 84 00 	lds	r18, 0x0084
    1150:	30 91 85 00 	lds	r19, 0x0085
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	26 0f       	add	r18, r22
    115a:	37 1f       	adc	r19, r23
    115c:	48 1f       	adc	r20, r24
    115e:	59 1f       	adc	r21, r25
    1160:	2c 57       	subi	r18, 0x7C	; 124
    1162:	31 4e       	sbci	r19, 0xE1	; 225
    1164:	4f 4f       	sbci	r20, 0xFF	; 255
    1166:	5f 4f       	sbci	r21, 0xFF	; 255
    1168:	00 e0       	ldi	r16, 0x00	; 0
    116a:	10 e0       	ldi	r17, 0x00	; 0
    116c:	6e 0d       	add	r22, r14
    116e:	7f 1d       	adc	r23, r15
    1170:	80 1f       	adc	r24, r16
    1172:	91 1f       	adc	r25, r17
    1174:	6e 5b       	subi	r22, 0xBE	; 190
    1176:	70 4f       	sbci	r23, 0xF0	; 240
    1178:	8f 4f       	sbci	r24, 0xFF	; 255
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	0e 94 0b 03 	call	0x616	; 0x616 <trtSleepUntil>
    1180:	8d b7       	in	r24, 0x3d	; 61
    1182:	9e b7       	in	r25, 0x3e	; 62
    1184:	0c 96       	adiw	r24, 0x0c	; 12
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	9e bf       	out	0x3e, r25	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	8d bf       	out	0x3d, r24	; 61
    1190:	90 cf       	rjmp	.-224    	; 0x10b2 <lcdComm+0x28>

00001192 <serialComm>:

/********************************************************************/
// 							FSM Tasks
/********************************************************************/
// --- define task 1  ----------------------------------------
void serialComm(void* args) {
    1192:	6f 92       	push	r6
    1194:	7f 92       	push	r7
    1196:	8f 92       	push	r8
    1198:	9f 92       	push	r9
    119a:	af 92       	push	r10
    119c:	bf 92       	push	r11
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <serialComm+0x1e>
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <serialComm+0x20>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <serialComm+0x22>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	// Declare the command and num variables
	volatile int num ;
	char cmd[4] ;
    // initialize
    initialize();
    11b8:	0e 94 f0 06 	call	0xde0	; 0xde0 <initialize>
	while (TRUE) {
		// commands:
		// 'temp' sets the desired temperature
		// 'time' sets the desired time
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s%u", cmd, &num) ;
    11bc:	3e 01       	movw	r6, r28
    11be:	08 94       	sec
    11c0:	61 1c       	adc	r6, r1
    11c2:	71 1c       	adc	r7, r1
    11c4:	8e 01       	movw	r16, r28
    11c6:	0d 5f       	subi	r16, 0xFD	; 253
    11c8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ca:	5c e5       	ldi	r21, 0x5C	; 92
    11cc:	85 2e       	mov	r8, r21
    11ce:	51 e0       	ldi	r21, 0x01	; 1
    11d0:	95 2e       	mov	r9, r21
		// update shared variables
		trtWait(SEM_SHARED) ;
		if (strcmp(cmd, "temp") == 0) {
			dTemp = num;
			//volatile int t = adc_val < dTemp;
			fprintf(stdout, "dTemp: %i, adc: %i\n\r", dTemp, adc_val); 
    11d2:	46 e6       	ldi	r20, 0x66	; 102
    11d4:	a4 2e       	mov	r10, r20
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	b4 2e       	mov	r11, r20
		}
		if (strcmp(cmd, "time") == 0) {
			time_rem = num;
			msec= 0;
			fprintf(stdout, "Time: %i\n\r", time_rem); 
    11da:	30 e8       	ldi	r19, 0x80	; 128
    11dc:	c3 2e       	mov	r12, r19
    11de:	31 e0       	ldi	r19, 0x01	; 1
    11e0:	d3 2e       	mov	r13, r19
		}
		if (strcmp(cmd, "set") == 0) {
			cTemp = num;
			fprintf(stdout, "cTemp: %i\n\r", time_rem); 
    11e2:	2f e8       	ldi	r18, 0x8F	; 143
    11e4:	e2 2e       	mov	r14, r18
    11e6:	21 e0       	ldi	r18, 0x01	; 1
    11e8:	f2 2e       	mov	r15, r18
    initialize();
	while (TRUE) {
		// commands:
		// 'temp' sets the desired temperature
		// 'time' sets the desired time
		fprintf(stdout, ">") ;
    11ea:	60 91 2a 03 	lds	r22, 0x032A
    11ee:	70 91 2b 03 	lds	r23, 0x032B
    11f2:	8e e3       	ldi	r24, 0x3E	; 62
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
		fscanf(stdin, "%s%u", cmd, &num) ;
    11fa:	7f 92       	push	r7
    11fc:	6f 92       	push	r6
    11fe:	1f 93       	push	r17
    1200:	0f 93       	push	r16
    1202:	9f 92       	push	r9
    1204:	8f 92       	push	r8
    1206:	80 91 28 03 	lds	r24, 0x0328
    120a:	90 91 29 03 	lds	r25, 0x0329
    120e:	9f 93       	push	r25
    1210:	8f 93       	push	r24
    1212:	0e 94 05 0a 	call	0x140a	; 0x140a <fscanf>
		// update shared variables
		trtWait(SEM_SHARED) ;
    1216:	84 e0       	ldi	r24, 0x04	; 4
    1218:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
		if (strcmp(cmd, "temp") == 0) {
    121c:	61 e6       	ldi	r22, 0x61	; 97
    121e:	71 e0       	ldi	r23, 0x01	; 1
    1220:	c8 01       	movw	r24, r16
    1222:	0e 94 94 09 	call	0x1328	; 0x1328 <strcmp>
    1226:	9c 01       	movw	r18, r24
    1228:	8d b7       	in	r24, 0x3d	; 61
    122a:	9e b7       	in	r25, 0x3e	; 62
    122c:	08 96       	adiw	r24, 0x08	; 8
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	9e bf       	out	0x3e, r25	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	8d bf       	out	0x3d, r24	; 61
    1238:	23 2b       	or	r18, r19
    123a:	21 f5       	brne	.+72     	; 0x1284 <serialComm+0xf2>
			dTemp = num;
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	90 93 d1 02 	sts	0x02D1, r25
    1244:	80 93 d0 02 	sts	0x02D0, r24
			//volatile int t = adc_val < dTemp;
			fprintf(stdout, "dTemp: %i, adc: %i\n\r", dTemp, adc_val); 
    1248:	80 91 c8 02 	lds	r24, 0x02C8
    124c:	90 91 c9 02 	lds	r25, 0x02C9
    1250:	20 91 d0 02 	lds	r18, 0x02D0
    1254:	30 91 d1 02 	lds	r19, 0x02D1
    1258:	9f 93       	push	r25
    125a:	8f 93       	push	r24
    125c:	3f 93       	push	r19
    125e:	2f 93       	push	r18
    1260:	bf 92       	push	r11
    1262:	af 92       	push	r10
    1264:	80 91 2a 03 	lds	r24, 0x032A
    1268:	90 91 2b 03 	lds	r25, 0x032B
    126c:	9f 93       	push	r25
    126e:	8f 93       	push	r24
    1270:	0e 94 9d 09 	call	0x133a	; 0x133a <fprintf>
    1274:	8d b7       	in	r24, 0x3d	; 61
    1276:	9e b7       	in	r25, 0x3e	; 62
    1278:	08 96       	adiw	r24, 0x08	; 8
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	9e bf       	out	0x3e, r25	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	8d bf       	out	0x3d, r24	; 61
		}
		if (strcmp(cmd, "time") == 0) {
    1284:	6b e7       	ldi	r22, 0x7B	; 123
    1286:	71 e0       	ldi	r23, 0x01	; 1
    1288:	c8 01       	movw	r24, r16
    128a:	0e 94 94 09 	call	0x1328	; 0x1328 <strcmp>
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	11 f5       	brne	.+68     	; 0x12d6 <serialComm+0x144>
			time_rem = num;
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
    1296:	90 93 e4 02 	sts	0x02E4, r25
    129a:	80 93 e3 02 	sts	0x02E3, r24
			msec= 0;
    129e:	10 92 cf 02 	sts	0x02CF, r1
    12a2:	10 92 ce 02 	sts	0x02CE, r1
			fprintf(stdout, "Time: %i\n\r", time_rem); 
    12a6:	80 91 e3 02 	lds	r24, 0x02E3
    12aa:	90 91 e4 02 	lds	r25, 0x02E4
    12ae:	9f 93       	push	r25
    12b0:	8f 93       	push	r24
    12b2:	df 92       	push	r13
    12b4:	cf 92       	push	r12
    12b6:	80 91 2a 03 	lds	r24, 0x032A
    12ba:	90 91 2b 03 	lds	r25, 0x032B
    12be:	9f 93       	push	r25
    12c0:	8f 93       	push	r24
    12c2:	0e 94 9d 09 	call	0x133a	; 0x133a <fprintf>
    12c6:	8d b7       	in	r24, 0x3d	; 61
    12c8:	9e b7       	in	r25, 0x3e	; 62
    12ca:	06 96       	adiw	r24, 0x06	; 6
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	9e bf       	out	0x3e, r25	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	8d bf       	out	0x3d, r24	; 61
		}
		if (strcmp(cmd, "set") == 0) {
    12d6:	6b e8       	ldi	r22, 0x8B	; 139
    12d8:	71 e0       	ldi	r23, 0x01	; 1
    12da:	c8 01       	movw	r24, r16
    12dc:	0e 94 94 09 	call	0x1328	; 0x1328 <strcmp>
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	f1 f4       	brne	.+60     	; 0x1320 <serialComm+0x18e>
			cTemp = num;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	90 93 27 03 	sts	0x0327, r25
    12ec:	80 93 26 03 	sts	0x0326, r24
			fprintf(stdout, "cTemp: %i\n\r", time_rem); 
    12f0:	80 91 e3 02 	lds	r24, 0x02E3
    12f4:	90 91 e4 02 	lds	r25, 0x02E4
    12f8:	9f 93       	push	r25
    12fa:	8f 93       	push	r24
    12fc:	ff 92       	push	r15
    12fe:	ef 92       	push	r14
    1300:	80 91 2a 03 	lds	r24, 0x032A
    1304:	90 91 2b 03 	lds	r25, 0x032B
    1308:	9f 93       	push	r25
    130a:	8f 93       	push	r24
    130c:	0e 94 9d 09 	call	0x133a	; 0x133a <fprintf>
    1310:	8d b7       	in	r24, 0x3d	; 61
    1312:	9e b7       	in	r25, 0x3e	; 62
    1314:	06 96       	adiw	r24, 0x06	; 6
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	9e bf       	out	0x3e, r25	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	8d bf       	out	0x3d, r24	; 61
		}
		trtSignal(SEM_SHARED);
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
    1326:	61 cf       	rjmp	.-318    	; 0x11ea <serialComm+0x58>

00001328 <strcmp>:
    1328:	fb 01       	movw	r30, r22
    132a:	dc 01       	movw	r26, r24
    132c:	8d 91       	ld	r24, X+
    132e:	01 90       	ld	r0, Z+
    1330:	80 19       	sub	r24, r0
    1332:	01 10       	cpse	r0, r1
    1334:	d9 f3       	breq	.-10     	; 0x132c <strcmp+0x4>
    1336:	99 0b       	sbc	r25, r25
    1338:	08 95       	ret

0000133a <fprintf>:
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e3 ea       	ldi	r30, 0xA3	; 163
    1340:	f9 e0       	ldi	r31, 0x09	; 9
    1342:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__prologue_saves__+0x20>
    1346:	ce 01       	movw	r24, r28
    1348:	09 96       	adiw	r24, 0x09	; 9
    134a:	ac 01       	movw	r20, r24
    134c:	6f 81       	ldd	r22, Y+7	; 0x07
    134e:	78 85       	ldd	r23, Y+8	; 0x08
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	0e 94 3b 0a 	call	0x1476	; 0x1476 <vfprintf>
    1358:	20 96       	adiw	r28, 0x00	; 0
    135a:	e2 e0       	ldi	r30, 0x02	; 2
    135c:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__epilogue_restores__+0x20>

00001360 <fputc>:
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	8c 01       	movw	r16, r24
    136a:	eb 01       	movw	r28, r22
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	81 ff       	sbrs	r24, 1
    1370:	1b c0       	rjmp	.+54     	; 0x13a8 <fputc+0x48>
    1372:	82 ff       	sbrs	r24, 2
    1374:	0d c0       	rjmp	.+26     	; 0x1390 <fputc+0x30>
    1376:	2e 81       	ldd	r18, Y+6	; 0x06
    1378:	3f 81       	ldd	r19, Y+7	; 0x07
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	28 17       	cp	r18, r24
    1380:	39 07       	cpc	r19, r25
    1382:	64 f4       	brge	.+24     	; 0x139c <fputc+0x3c>
    1384:	e8 81       	ld	r30, Y
    1386:	f9 81       	ldd	r31, Y+1	; 0x01
    1388:	01 93       	st	Z+, r16
    138a:	f9 83       	std	Y+1, r31	; 0x01
    138c:	e8 83       	st	Y, r30
    138e:	06 c0       	rjmp	.+12     	; 0x139c <fputc+0x3c>
    1390:	e8 85       	ldd	r30, Y+8	; 0x08
    1392:	f9 85       	ldd	r31, Y+9	; 0x09
    1394:	80 2f       	mov	r24, r16
    1396:	09 95       	icall
    1398:	89 2b       	or	r24, r25
    139a:	31 f4       	brne	.+12     	; 0x13a8 <fputc+0x48>
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	9f 81       	ldd	r25, Y+7	; 0x07
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	9f 83       	std	Y+7, r25	; 0x07
    13a4:	8e 83       	std	Y+6, r24	; 0x06
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <fputc+0x4c>
    13a8:	0f ef       	ldi	r16, 0xFF	; 255
    13aa:	1f ef       	ldi	r17, 0xFF	; 255
    13ac:	c8 01       	movw	r24, r16
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	08 95       	ret

000013b8 <fputs>:
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	7c 01       	movw	r14, r24
    13c6:	8b 01       	movw	r16, r22
    13c8:	db 01       	movw	r26, r22
    13ca:	13 96       	adiw	r26, 0x03	; 3
    13cc:	8c 91       	ld	r24, X
    13ce:	81 fd       	sbrc	r24, 1
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <fputs+0x20>
    13d2:	cf ef       	ldi	r28, 0xFF	; 255
    13d4:	df ef       	ldi	r29, 0xFF	; 255
    13d6:	13 c0       	rjmp	.+38     	; 0x13fe <fputs+0x46>
    13d8:	c0 e0       	ldi	r28, 0x00	; 0
    13da:	d0 e0       	ldi	r29, 0x00	; 0
    13dc:	0b c0       	rjmp	.+22     	; 0x13f4 <fputs+0x3c>
    13de:	d8 01       	movw	r26, r16
    13e0:	18 96       	adiw	r26, 0x08	; 8
    13e2:	ed 91       	ld	r30, X+
    13e4:	fc 91       	ld	r31, X
    13e6:	19 97       	sbiw	r26, 0x09	; 9
    13e8:	b8 01       	movw	r22, r16
    13ea:	09 95       	icall
    13ec:	89 2b       	or	r24, r25
    13ee:	11 f0       	breq	.+4      	; 0x13f4 <fputs+0x3c>
    13f0:	cf ef       	ldi	r28, 0xFF	; 255
    13f2:	df ef       	ldi	r29, 0xFF	; 255
    13f4:	f7 01       	movw	r30, r14
    13f6:	81 91       	ld	r24, Z+
    13f8:	7f 01       	movw	r14, r30
    13fa:	88 23       	and	r24, r24
    13fc:	81 f7       	brne	.-32     	; 0x13de <fputs+0x26>
    13fe:	ce 01       	movw	r24, r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	e6 e0       	ldi	r30, 0x06	; 6
    1406:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__epilogue_restores__+0x18>

0000140a <fscanf>:
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	eb e0       	ldi	r30, 0x0B	; 11
    1410:	fa e0       	ldi	r31, 0x0A	; 10
    1412:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__prologue_saves__+0x20>
    1416:	ce 01       	movw	r24, r28
    1418:	09 96       	adiw	r24, 0x09	; 9
    141a:	ac 01       	movw	r20, r24
    141c:	6f 81       	ldd	r22, Y+7	; 0x07
    141e:	78 85       	ldd	r23, Y+8	; 0x08
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vfscanf>
    1428:	20 96       	adiw	r28, 0x00	; 0
    142a:	e2 e0       	ldi	r30, 0x02	; 2
    142c:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__epilogue_restores__+0x20>

00001430 <sprintf>:
    1430:	ae e0       	ldi	r26, 0x0E	; 14
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	ee e1       	ldi	r30, 0x1E	; 30
    1436:	fa e0       	ldi	r31, 0x0A	; 10
    1438:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__prologue_saves__+0x1c>
    143c:	0d 89       	ldd	r16, Y+21	; 0x15
    143e:	1e 89       	ldd	r17, Y+22	; 0x16
    1440:	86 e0       	ldi	r24, 0x06	; 6
    1442:	8c 83       	std	Y+4, r24	; 0x04
    1444:	1a 83       	std	Y+2, r17	; 0x02
    1446:	09 83       	std	Y+1, r16	; 0x01
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	9f e7       	ldi	r25, 0x7F	; 127
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	ce 01       	movw	r24, r28
    1452:	49 96       	adiw	r24, 0x19	; 25
    1454:	ac 01       	movw	r20, r24
    1456:	6f 89       	ldd	r22, Y+23	; 0x17
    1458:	78 8d       	ldd	r23, Y+24	; 0x18
    145a:	ce 01       	movw	r24, r28
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <vfprintf>
    1462:	2f 81       	ldd	r18, Y+7	; 0x07
    1464:	38 85       	ldd	r19, Y+8	; 0x08
    1466:	02 0f       	add	r16, r18
    1468:	13 1f       	adc	r17, r19
    146a:	f8 01       	movw	r30, r16
    146c:	10 82       	st	Z, r1
    146e:	2e 96       	adiw	r28, 0x0e	; 14
    1470:	e4 e0       	ldi	r30, 0x04	; 4
    1472:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__epilogue_restores__+0x1c>

00001476 <vfprintf>:
    1476:	ab e0       	ldi	r26, 0x0B	; 11
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e1 e4       	ldi	r30, 0x41	; 65
    147c:	fa e0       	ldi	r31, 0x0A	; 10
    147e:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__>
    1482:	3c 01       	movw	r6, r24
    1484:	2b 01       	movw	r4, r22
    1486:	5a 01       	movw	r10, r20
    1488:	fc 01       	movw	r30, r24
    148a:	17 82       	std	Z+7, r1	; 0x07
    148c:	16 82       	std	Z+6, r1	; 0x06
    148e:	83 81       	ldd	r24, Z+3	; 0x03
    1490:	81 fd       	sbrc	r24, 1
    1492:	03 c0       	rjmp	.+6      	; 0x149a <vfprintf+0x24>
    1494:	6f ef       	ldi	r22, 0xFF	; 255
    1496:	7f ef       	ldi	r23, 0xFF	; 255
    1498:	c8 c1       	rjmp	.+912    	; 0x182a <vfprintf+0x3b4>
    149a:	9a e0       	ldi	r25, 0x0A	; 10
    149c:	89 2e       	mov	r8, r25
    149e:	1e 01       	movw	r2, r28
    14a0:	08 94       	sec
    14a2:	21 1c       	adc	r2, r1
    14a4:	31 1c       	adc	r3, r1
    14a6:	f3 01       	movw	r30, r6
    14a8:	23 81       	ldd	r18, Z+3	; 0x03
    14aa:	f2 01       	movw	r30, r4
    14ac:	23 fd       	sbrc	r18, 3
    14ae:	85 91       	lpm	r24, Z+
    14b0:	23 ff       	sbrs	r18, 3
    14b2:	81 91       	ld	r24, Z+
    14b4:	2f 01       	movw	r4, r30
    14b6:	88 23       	and	r24, r24
    14b8:	09 f4       	brne	.+2      	; 0x14bc <vfprintf+0x46>
    14ba:	b4 c1       	rjmp	.+872    	; 0x1824 <vfprintf+0x3ae>
    14bc:	85 32       	cpi	r24, 0x25	; 37
    14be:	39 f4       	brne	.+14     	; 0x14ce <vfprintf+0x58>
    14c0:	23 fd       	sbrc	r18, 3
    14c2:	85 91       	lpm	r24, Z+
    14c4:	23 ff       	sbrs	r18, 3
    14c6:	81 91       	ld	r24, Z+
    14c8:	2f 01       	movw	r4, r30
    14ca:	85 32       	cpi	r24, 0x25	; 37
    14cc:	29 f4       	brne	.+10     	; 0x14d8 <vfprintf+0x62>
    14ce:	b3 01       	movw	r22, r6
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    14d6:	e7 cf       	rjmp	.-50     	; 0x14a6 <vfprintf+0x30>
    14d8:	98 2f       	mov	r25, r24
    14da:	dd 24       	eor	r13, r13
    14dc:	cc 24       	eor	r12, r12
    14de:	99 24       	eor	r9, r9
    14e0:	ff e1       	ldi	r31, 0x1F	; 31
    14e2:	fd 15       	cp	r31, r13
    14e4:	d0 f0       	brcs	.+52     	; 0x151a <vfprintf+0xa4>
    14e6:	9b 32       	cpi	r25, 0x2B	; 43
    14e8:	69 f0       	breq	.+26     	; 0x1504 <vfprintf+0x8e>
    14ea:	9c 32       	cpi	r25, 0x2C	; 44
    14ec:	28 f4       	brcc	.+10     	; 0x14f8 <vfprintf+0x82>
    14ee:	90 32       	cpi	r25, 0x20	; 32
    14f0:	59 f0       	breq	.+22     	; 0x1508 <vfprintf+0x92>
    14f2:	93 32       	cpi	r25, 0x23	; 35
    14f4:	91 f4       	brne	.+36     	; 0x151a <vfprintf+0xa4>
    14f6:	0e c0       	rjmp	.+28     	; 0x1514 <vfprintf+0x9e>
    14f8:	9d 32       	cpi	r25, 0x2D	; 45
    14fa:	49 f0       	breq	.+18     	; 0x150e <vfprintf+0x98>
    14fc:	90 33       	cpi	r25, 0x30	; 48
    14fe:	69 f4       	brne	.+26     	; 0x151a <vfprintf+0xa4>
    1500:	41 e0       	ldi	r20, 0x01	; 1
    1502:	24 c0       	rjmp	.+72     	; 0x154c <vfprintf+0xd6>
    1504:	52 e0       	ldi	r21, 0x02	; 2
    1506:	d5 2a       	or	r13, r21
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	d8 2a       	or	r13, r24
    150c:	28 c0       	rjmp	.+80     	; 0x155e <vfprintf+0xe8>
    150e:	98 e0       	ldi	r25, 0x08	; 8
    1510:	d9 2a       	or	r13, r25
    1512:	25 c0       	rjmp	.+74     	; 0x155e <vfprintf+0xe8>
    1514:	e0 e1       	ldi	r30, 0x10	; 16
    1516:	de 2a       	or	r13, r30
    1518:	22 c0       	rjmp	.+68     	; 0x155e <vfprintf+0xe8>
    151a:	d7 fc       	sbrc	r13, 7
    151c:	29 c0       	rjmp	.+82     	; 0x1570 <vfprintf+0xfa>
    151e:	89 2f       	mov	r24, r25
    1520:	80 53       	subi	r24, 0x30	; 48
    1522:	8a 30       	cpi	r24, 0x0A	; 10
    1524:	70 f4       	brcc	.+28     	; 0x1542 <vfprintf+0xcc>
    1526:	d6 fe       	sbrs	r13, 6
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <vfprintf+0xbe>
    152a:	98 9c       	mul	r9, r8
    152c:	90 2c       	mov	r9, r0
    152e:	11 24       	eor	r1, r1
    1530:	98 0e       	add	r9, r24
    1532:	15 c0       	rjmp	.+42     	; 0x155e <vfprintf+0xe8>
    1534:	c8 9c       	mul	r12, r8
    1536:	c0 2c       	mov	r12, r0
    1538:	11 24       	eor	r1, r1
    153a:	c8 0e       	add	r12, r24
    153c:	f0 e2       	ldi	r31, 0x20	; 32
    153e:	df 2a       	or	r13, r31
    1540:	0e c0       	rjmp	.+28     	; 0x155e <vfprintf+0xe8>
    1542:	9e 32       	cpi	r25, 0x2E	; 46
    1544:	29 f4       	brne	.+10     	; 0x1550 <vfprintf+0xda>
    1546:	d6 fc       	sbrc	r13, 6
    1548:	6d c1       	rjmp	.+730    	; 0x1824 <vfprintf+0x3ae>
    154a:	40 e4       	ldi	r20, 0x40	; 64
    154c:	d4 2a       	or	r13, r20
    154e:	07 c0       	rjmp	.+14     	; 0x155e <vfprintf+0xe8>
    1550:	9c 36       	cpi	r25, 0x6C	; 108
    1552:	19 f4       	brne	.+6      	; 0x155a <vfprintf+0xe4>
    1554:	50 e8       	ldi	r21, 0x80	; 128
    1556:	d5 2a       	or	r13, r21
    1558:	02 c0       	rjmp	.+4      	; 0x155e <vfprintf+0xe8>
    155a:	98 36       	cpi	r25, 0x68	; 104
    155c:	49 f4       	brne	.+18     	; 0x1570 <vfprintf+0xfa>
    155e:	f2 01       	movw	r30, r4
    1560:	23 fd       	sbrc	r18, 3
    1562:	95 91       	lpm	r25, Z+
    1564:	23 ff       	sbrs	r18, 3
    1566:	91 91       	ld	r25, Z+
    1568:	2f 01       	movw	r4, r30
    156a:	99 23       	and	r25, r25
    156c:	09 f0       	breq	.+2      	; 0x1570 <vfprintf+0xfa>
    156e:	b8 cf       	rjmp	.-144    	; 0x14e0 <vfprintf+0x6a>
    1570:	89 2f       	mov	r24, r25
    1572:	85 54       	subi	r24, 0x45	; 69
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	18 f0       	brcs	.+6      	; 0x157e <vfprintf+0x108>
    1578:	80 52       	subi	r24, 0x20	; 32
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	38 f4       	brcc	.+14     	; 0x158c <vfprintf+0x116>
    157e:	44 e0       	ldi	r20, 0x04	; 4
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	a4 0e       	add	r10, r20
    1584:	b5 1e       	adc	r11, r21
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	59 83       	std	Y+1, r21	; 0x01
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <vfprintf+0x134>
    158c:	93 36       	cpi	r25, 0x63	; 99
    158e:	31 f0       	breq	.+12     	; 0x159c <vfprintf+0x126>
    1590:	93 37       	cpi	r25, 0x73	; 115
    1592:	79 f0       	breq	.+30     	; 0x15b2 <vfprintf+0x13c>
    1594:	93 35       	cpi	r25, 0x53	; 83
    1596:	09 f0       	breq	.+2      	; 0x159a <vfprintf+0x124>
    1598:	56 c0       	rjmp	.+172    	; 0x1646 <vfprintf+0x1d0>
    159a:	20 c0       	rjmp	.+64     	; 0x15dc <vfprintf+0x166>
    159c:	f5 01       	movw	r30, r10
    159e:	80 81       	ld	r24, Z
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	42 e0       	ldi	r20, 0x02	; 2
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	a4 0e       	add	r10, r20
    15a8:	b5 1e       	adc	r11, r21
    15aa:	71 01       	movw	r14, r2
    15ac:	01 e0       	ldi	r16, 0x01	; 1
    15ae:	10 e0       	ldi	r17, 0x00	; 0
    15b0:	12 c0       	rjmp	.+36     	; 0x15d6 <vfprintf+0x160>
    15b2:	f5 01       	movw	r30, r10
    15b4:	e0 80       	ld	r14, Z
    15b6:	f1 80       	ldd	r15, Z+1	; 0x01
    15b8:	d6 fc       	sbrc	r13, 6
    15ba:	03 c0       	rjmp	.+6      	; 0x15c2 <vfprintf+0x14c>
    15bc:	6f ef       	ldi	r22, 0xFF	; 255
    15be:	7f ef       	ldi	r23, 0xFF	; 255
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <vfprintf+0x150>
    15c2:	69 2d       	mov	r22, r9
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	42 e0       	ldi	r20, 0x02	; 2
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	a4 0e       	add	r10, r20
    15cc:	b5 1e       	adc	r11, r21
    15ce:	c7 01       	movw	r24, r14
    15d0:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <strnlen>
    15d4:	8c 01       	movw	r16, r24
    15d6:	5f e7       	ldi	r21, 0x7F	; 127
    15d8:	d5 22       	and	r13, r21
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <vfprintf+0x18e>
    15dc:	f5 01       	movw	r30, r10
    15de:	e0 80       	ld	r14, Z
    15e0:	f1 80       	ldd	r15, Z+1	; 0x01
    15e2:	d6 fc       	sbrc	r13, 6
    15e4:	03 c0       	rjmp	.+6      	; 0x15ec <vfprintf+0x176>
    15e6:	6f ef       	ldi	r22, 0xFF	; 255
    15e8:	7f ef       	ldi	r23, 0xFF	; 255
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <vfprintf+0x17a>
    15ec:	69 2d       	mov	r22, r9
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	42 e0       	ldi	r20, 0x02	; 2
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	a4 0e       	add	r10, r20
    15f6:	b5 1e       	adc	r11, r21
    15f8:	c7 01       	movw	r24, r14
    15fa:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <strnlen_P>
    15fe:	8c 01       	movw	r16, r24
    1600:	50 e8       	ldi	r21, 0x80	; 128
    1602:	d5 2a       	or	r13, r21
    1604:	d3 fe       	sbrs	r13, 3
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <vfprintf+0x1a0>
    1608:	1a c0       	rjmp	.+52     	; 0x163e <vfprintf+0x1c8>
    160a:	b3 01       	movw	r22, r6
    160c:	80 e2       	ldi	r24, 0x20	; 32
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    1614:	ca 94       	dec	r12
    1616:	8c 2d       	mov	r24, r12
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	08 17       	cp	r16, r24
    161c:	19 07       	cpc	r17, r25
    161e:	a8 f3       	brcs	.-22     	; 0x160a <vfprintf+0x194>
    1620:	0e c0       	rjmp	.+28     	; 0x163e <vfprintf+0x1c8>
    1622:	f7 01       	movw	r30, r14
    1624:	d7 fc       	sbrc	r13, 7
    1626:	85 91       	lpm	r24, Z+
    1628:	d7 fe       	sbrs	r13, 7
    162a:	81 91       	ld	r24, Z+
    162c:	7f 01       	movw	r14, r30
    162e:	b3 01       	movw	r22, r6
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    1636:	c1 10       	cpse	r12, r1
    1638:	ca 94       	dec	r12
    163a:	01 50       	subi	r16, 0x01	; 1
    163c:	10 40       	sbci	r17, 0x00	; 0
    163e:	01 15       	cp	r16, r1
    1640:	11 05       	cpc	r17, r1
    1642:	79 f7       	brne	.-34     	; 0x1622 <vfprintf+0x1ac>
    1644:	ec c0       	rjmp	.+472    	; 0x181e <vfprintf+0x3a8>
    1646:	94 36       	cpi	r25, 0x64	; 100
    1648:	11 f0       	breq	.+4      	; 0x164e <vfprintf+0x1d8>
    164a:	99 36       	cpi	r25, 0x69	; 105
    164c:	71 f5       	brne	.+92     	; 0x16aa <vfprintf+0x234>
    164e:	d7 fe       	sbrs	r13, 7
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <vfprintf+0x1ec>
    1652:	f5 01       	movw	r30, r10
    1654:	e0 80       	ld	r14, Z
    1656:	f1 80       	ldd	r15, Z+1	; 0x01
    1658:	02 81       	ldd	r16, Z+2	; 0x02
    165a:	13 81       	ldd	r17, Z+3	; 0x03
    165c:	44 e0       	ldi	r20, 0x04	; 4
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	0a c0       	rjmp	.+20     	; 0x1676 <vfprintf+0x200>
    1662:	f5 01       	movw	r30, r10
    1664:	80 81       	ld	r24, Z
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	7c 01       	movw	r14, r24
    166a:	00 27       	eor	r16, r16
    166c:	f7 fc       	sbrc	r15, 7
    166e:	00 95       	com	r16
    1670:	10 2f       	mov	r17, r16
    1672:	42 e0       	ldi	r20, 0x02	; 2
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	a4 0e       	add	r10, r20
    1678:	b5 1e       	adc	r11, r21
    167a:	5f e6       	ldi	r21, 0x6F	; 111
    167c:	d5 22       	and	r13, r21
    167e:	17 ff       	sbrs	r17, 7
    1680:	0a c0       	rjmp	.+20     	; 0x1696 <vfprintf+0x220>
    1682:	10 95       	com	r17
    1684:	00 95       	com	r16
    1686:	f0 94       	com	r15
    1688:	e0 94       	com	r14
    168a:	e1 1c       	adc	r14, r1
    168c:	f1 1c       	adc	r15, r1
    168e:	01 1d       	adc	r16, r1
    1690:	11 1d       	adc	r17, r1
    1692:	80 e8       	ldi	r24, 0x80	; 128
    1694:	d8 2a       	or	r13, r24
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	a1 01       	movw	r20, r2
    169c:	c8 01       	movw	r24, r16
    169e:	b7 01       	movw	r22, r14
    16a0:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <__ultoa_invert>
    16a4:	f8 2e       	mov	r15, r24
    16a6:	f2 18       	sub	r15, r2
    16a8:	40 c0       	rjmp	.+128    	; 0x172a <vfprintf+0x2b4>
    16aa:	95 37       	cpi	r25, 0x75	; 117
    16ac:	29 f4       	brne	.+10     	; 0x16b8 <vfprintf+0x242>
    16ae:	1d 2d       	mov	r17, r13
    16b0:	1f 7e       	andi	r17, 0xEF	; 239
    16b2:	2a e0       	ldi	r18, 0x0A	; 10
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	1d c0       	rjmp	.+58     	; 0x16f2 <vfprintf+0x27c>
    16b8:	1d 2d       	mov	r17, r13
    16ba:	19 7f       	andi	r17, 0xF9	; 249
    16bc:	9f 36       	cpi	r25, 0x6F	; 111
    16be:	61 f0       	breq	.+24     	; 0x16d8 <vfprintf+0x262>
    16c0:	90 37       	cpi	r25, 0x70	; 112
    16c2:	20 f4       	brcc	.+8      	; 0x16cc <vfprintf+0x256>
    16c4:	98 35       	cpi	r25, 0x58	; 88
    16c6:	09 f0       	breq	.+2      	; 0x16ca <vfprintf+0x254>
    16c8:	ad c0       	rjmp	.+346    	; 0x1824 <vfprintf+0x3ae>
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <vfprintf+0x274>
    16cc:	90 37       	cpi	r25, 0x70	; 112
    16ce:	39 f0       	breq	.+14     	; 0x16de <vfprintf+0x268>
    16d0:	98 37       	cpi	r25, 0x78	; 120
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <vfprintf+0x260>
    16d4:	a7 c0       	rjmp	.+334    	; 0x1824 <vfprintf+0x3ae>
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <vfprintf+0x26a>
    16d8:	28 e0       	ldi	r18, 0x08	; 8
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	0a c0       	rjmp	.+20     	; 0x16f2 <vfprintf+0x27c>
    16de:	10 61       	ori	r17, 0x10	; 16
    16e0:	14 fd       	sbrc	r17, 4
    16e2:	14 60       	ori	r17, 0x04	; 4
    16e4:	20 e1       	ldi	r18, 0x10	; 16
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <vfprintf+0x27c>
    16ea:	14 fd       	sbrc	r17, 4
    16ec:	16 60       	ori	r17, 0x06	; 6
    16ee:	20 e1       	ldi	r18, 0x10	; 16
    16f0:	32 e0       	ldi	r19, 0x02	; 2
    16f2:	17 ff       	sbrs	r17, 7
    16f4:	08 c0       	rjmp	.+16     	; 0x1706 <vfprintf+0x290>
    16f6:	f5 01       	movw	r30, r10
    16f8:	60 81       	ld	r22, Z
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	44 e0       	ldi	r20, 0x04	; 4
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	08 c0       	rjmp	.+16     	; 0x1716 <vfprintf+0x2a0>
    1706:	f5 01       	movw	r30, r10
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	bc 01       	movw	r22, r24
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	42 e0       	ldi	r20, 0x02	; 2
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	a4 0e       	add	r10, r20
    1718:	b5 1e       	adc	r11, r21
    171a:	a1 01       	movw	r20, r2
    171c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <__ultoa_invert>
    1720:	f8 2e       	mov	r15, r24
    1722:	f2 18       	sub	r15, r2
    1724:	8f e7       	ldi	r24, 0x7F	; 127
    1726:	d8 2e       	mov	r13, r24
    1728:	d1 22       	and	r13, r17
    172a:	d6 fe       	sbrs	r13, 6
    172c:	0b c0       	rjmp	.+22     	; 0x1744 <vfprintf+0x2ce>
    172e:	5e ef       	ldi	r21, 0xFE	; 254
    1730:	d5 22       	and	r13, r21
    1732:	f9 14       	cp	r15, r9
    1734:	38 f4       	brcc	.+14     	; 0x1744 <vfprintf+0x2ce>
    1736:	d4 fe       	sbrs	r13, 4
    1738:	07 c0       	rjmp	.+14     	; 0x1748 <vfprintf+0x2d2>
    173a:	d2 fc       	sbrc	r13, 2
    173c:	05 c0       	rjmp	.+10     	; 0x1748 <vfprintf+0x2d2>
    173e:	8f ee       	ldi	r24, 0xEF	; 239
    1740:	d8 22       	and	r13, r24
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <vfprintf+0x2d2>
    1744:	1f 2d       	mov	r17, r15
    1746:	01 c0       	rjmp	.+2      	; 0x174a <vfprintf+0x2d4>
    1748:	19 2d       	mov	r17, r9
    174a:	d4 fe       	sbrs	r13, 4
    174c:	0d c0       	rjmp	.+26     	; 0x1768 <vfprintf+0x2f2>
    174e:	fe 01       	movw	r30, r28
    1750:	ef 0d       	add	r30, r15
    1752:	f1 1d       	adc	r31, r1
    1754:	80 81       	ld	r24, Z
    1756:	80 33       	cpi	r24, 0x30	; 48
    1758:	19 f4       	brne	.+6      	; 0x1760 <vfprintf+0x2ea>
    175a:	99 ee       	ldi	r25, 0xE9	; 233
    175c:	d9 22       	and	r13, r25
    175e:	08 c0       	rjmp	.+16     	; 0x1770 <vfprintf+0x2fa>
    1760:	1f 5f       	subi	r17, 0xFF	; 255
    1762:	d2 fe       	sbrs	r13, 2
    1764:	05 c0       	rjmp	.+10     	; 0x1770 <vfprintf+0x2fa>
    1766:	03 c0       	rjmp	.+6      	; 0x176e <vfprintf+0x2f8>
    1768:	8d 2d       	mov	r24, r13
    176a:	86 78       	andi	r24, 0x86	; 134
    176c:	09 f0       	breq	.+2      	; 0x1770 <vfprintf+0x2fa>
    176e:	1f 5f       	subi	r17, 0xFF	; 255
    1770:	0d 2d       	mov	r16, r13
    1772:	d3 fc       	sbrc	r13, 3
    1774:	14 c0       	rjmp	.+40     	; 0x179e <vfprintf+0x328>
    1776:	d0 fe       	sbrs	r13, 0
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <vfprintf+0x322>
    177a:	1c 15       	cp	r17, r12
    177c:	10 f0       	brcs	.+4      	; 0x1782 <vfprintf+0x30c>
    177e:	9f 2c       	mov	r9, r15
    1780:	0b c0       	rjmp	.+22     	; 0x1798 <vfprintf+0x322>
    1782:	9f 2c       	mov	r9, r15
    1784:	9c 0c       	add	r9, r12
    1786:	91 1a       	sub	r9, r17
    1788:	1c 2d       	mov	r17, r12
    178a:	06 c0       	rjmp	.+12     	; 0x1798 <vfprintf+0x322>
    178c:	b3 01       	movw	r22, r6
    178e:	80 e2       	ldi	r24, 0x20	; 32
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    1796:	1f 5f       	subi	r17, 0xFF	; 255
    1798:	1c 15       	cp	r17, r12
    179a:	c0 f3       	brcs	.-16     	; 0x178c <vfprintf+0x316>
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <vfprintf+0x330>
    179e:	1c 15       	cp	r17, r12
    17a0:	10 f4       	brcc	.+4      	; 0x17a6 <vfprintf+0x330>
    17a2:	c1 1a       	sub	r12, r17
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <vfprintf+0x332>
    17a6:	cc 24       	eor	r12, r12
    17a8:	04 ff       	sbrs	r16, 4
    17aa:	10 c0       	rjmp	.+32     	; 0x17cc <vfprintf+0x356>
    17ac:	b3 01       	movw	r22, r6
    17ae:	80 e3       	ldi	r24, 0x30	; 48
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    17b6:	02 ff       	sbrs	r16, 2
    17b8:	1e c0       	rjmp	.+60     	; 0x17f6 <vfprintf+0x380>
    17ba:	01 fd       	sbrc	r16, 1
    17bc:	03 c0       	rjmp	.+6      	; 0x17c4 <vfprintf+0x34e>
    17be:	88 e7       	ldi	r24, 0x78	; 120
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <vfprintf+0x352>
    17c4:	88 e5       	ldi	r24, 0x58	; 88
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	b3 01       	movw	r22, r6
    17ca:	0c c0       	rjmp	.+24     	; 0x17e4 <vfprintf+0x36e>
    17cc:	80 2f       	mov	r24, r16
    17ce:	86 78       	andi	r24, 0x86	; 134
    17d0:	91 f0       	breq	.+36     	; 0x17f6 <vfprintf+0x380>
    17d2:	01 ff       	sbrs	r16, 1
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <vfprintf+0x364>
    17d6:	8b e2       	ldi	r24, 0x2B	; 43
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <vfprintf+0x366>
    17da:	80 e2       	ldi	r24, 0x20	; 32
    17dc:	d7 fc       	sbrc	r13, 7
    17de:	8d e2       	ldi	r24, 0x2D	; 45
    17e0:	b3 01       	movw	r22, r6
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <vfprintf+0x380>
    17ea:	b3 01       	movw	r22, r6
    17ec:	80 e3       	ldi	r24, 0x30	; 48
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    17f4:	9a 94       	dec	r9
    17f6:	f9 14       	cp	r15, r9
    17f8:	c0 f3       	brcs	.-16     	; 0x17ea <vfprintf+0x374>
    17fa:	fa 94       	dec	r15
    17fc:	f1 01       	movw	r30, r2
    17fe:	ef 0d       	add	r30, r15
    1800:	f1 1d       	adc	r31, r1
    1802:	b3 01       	movw	r22, r6
    1804:	80 81       	ld	r24, Z
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    180c:	ff 20       	and	r15, r15
    180e:	a9 f7       	brne	.-22     	; 0x17fa <vfprintf+0x384>
    1810:	06 c0       	rjmp	.+12     	; 0x181e <vfprintf+0x3a8>
    1812:	b3 01       	movw	r22, r6
    1814:	80 e2       	ldi	r24, 0x20	; 32
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    181c:	ca 94       	dec	r12
    181e:	cc 20       	and	r12, r12
    1820:	c1 f7       	brne	.-16     	; 0x1812 <vfprintf+0x39c>
    1822:	41 ce       	rjmp	.-894    	; 0x14a6 <vfprintf+0x30>
    1824:	f3 01       	movw	r30, r6
    1826:	66 81       	ldd	r22, Z+6	; 0x06
    1828:	77 81       	ldd	r23, Z+7	; 0x07
    182a:	cb 01       	movw	r24, r22
    182c:	2b 96       	adiw	r28, 0x0b	; 11
    182e:	e2 e1       	ldi	r30, 0x12	; 18
    1830:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__>

00001834 <putval>:
    1834:	fc 01       	movw	r30, r24
    1836:	20 fd       	sbrc	r18, 0
    1838:	08 c0       	rjmp	.+16     	; 0x184a <putval+0x16>
    183a:	23 fd       	sbrc	r18, 3
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <putval+0x14>
    183e:	22 ff       	sbrs	r18, 2
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <putval+0x12>
    1842:	73 83       	std	Z+3, r23	; 0x03
    1844:	62 83       	std	Z+2, r22	; 0x02
    1846:	51 83       	std	Z+1, r21	; 0x01
    1848:	40 83       	st	Z, r20
    184a:	08 95       	ret

0000184c <mulacc>:
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	44 ff       	sbrs	r20, 4
    1856:	02 c0       	rjmp	.+4      	; 0x185c <mulacc+0x10>
    1858:	33 e0       	ldi	r19, 0x03	; 3
    185a:	11 c0       	rjmp	.+34     	; 0x187e <mulacc+0x32>
    185c:	46 ff       	sbrs	r20, 6
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <mulacc+0x18>
    1860:	34 e0       	ldi	r19, 0x04	; 4
    1862:	0d c0       	rjmp	.+26     	; 0x187e <mulacc+0x32>
    1864:	db 01       	movw	r26, r22
    1866:	fc 01       	movw	r30, r24
    1868:	aa 0f       	add	r26, r26
    186a:	bb 1f       	adc	r27, r27
    186c:	ee 1f       	adc	r30, r30
    186e:	ff 1f       	adc	r31, r31
    1870:	10 94       	com	r1
    1872:	d1 f7       	brne	.-12     	; 0x1868 <mulacc+0x1c>
    1874:	6a 0f       	add	r22, r26
    1876:	7b 1f       	adc	r23, r27
    1878:	8e 1f       	adc	r24, r30
    187a:	9f 1f       	adc	r25, r31
    187c:	31 e0       	ldi	r19, 0x01	; 1
    187e:	66 0f       	add	r22, r22
    1880:	77 1f       	adc	r23, r23
    1882:	88 1f       	adc	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	31 50       	subi	r19, 0x01	; 1
    1888:	d1 f7       	brne	.-12     	; 0x187e <mulacc+0x32>
    188a:	7b 01       	movw	r14, r22
    188c:	8c 01       	movw	r16, r24
    188e:	e2 0e       	add	r14, r18
    1890:	f1 1c       	adc	r15, r1
    1892:	01 1d       	adc	r16, r1
    1894:	11 1d       	adc	r17, r1
    1896:	a8 01       	movw	r20, r16
    1898:	97 01       	movw	r18, r14
    189a:	b7 01       	movw	r22, r14
    189c:	ca 01       	movw	r24, r20
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	08 95       	ret

000018a8 <skip_spaces>:
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	8c 01       	movw	r16, r24
    18b2:	c8 01       	movw	r24, r16
    18b4:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <fgetc>
    18b8:	ec 01       	movw	r28, r24
    18ba:	97 fd       	sbrc	r25, 7
    18bc:	08 c0       	rjmp	.+16     	; 0x18ce <skip_spaces+0x26>
    18be:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <isspace>
    18c2:	89 2b       	or	r24, r25
    18c4:	b1 f7       	brne	.-20     	; 0x18b2 <skip_spaces+0xa>
    18c6:	b8 01       	movw	r22, r16
    18c8:	ce 01       	movw	r24, r28
    18ca:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <ungetc>
    18ce:	ce 01       	movw	r24, r28
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	08 95       	ret

000018da <conv_int>:
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e3 e7       	ldi	r30, 0x73	; 115
    18e0:	fc e0       	ldi	r31, 0x0C	; 12
    18e2:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <__prologue_saves__+0x10>
    18e6:	ec 01       	movw	r28, r24
    18e8:	c6 2e       	mov	r12, r22
    18ea:	5a 01       	movw	r10, r20
    18ec:	12 2f       	mov	r17, r18
    18ee:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <fgetc>
    18f2:	ac 01       	movw	r20, r24
    18f4:	8b 32       	cpi	r24, 0x2B	; 43
    18f6:	19 f0       	breq	.+6      	; 0x18fe <conv_int+0x24>
    18f8:	8d 32       	cpi	r24, 0x2D	; 45
    18fa:	51 f4       	brne	.+20     	; 0x1910 <conv_int+0x36>
    18fc:	10 68       	ori	r17, 0x80	; 128
    18fe:	ca 94       	dec	r12
    1900:	09 f4       	brne	.+2      	; 0x1904 <conv_int+0x2a>
    1902:	6d c0       	rjmp	.+218    	; 0x19de <conv_int+0x104>
    1904:	ce 01       	movw	r24, r28
    1906:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <fgetc>
    190a:	ac 01       	movw	r20, r24
    190c:	97 fd       	sbrc	r25, 7
    190e:	67 c0       	rjmp	.+206    	; 0x19de <conv_int+0x104>
    1910:	6d ef       	ldi	r22, 0xFD	; 253
    1912:	d6 2e       	mov	r13, r22
    1914:	d1 22       	and	r13, r17
    1916:	8d 2d       	mov	r24, r13
    1918:	80 73       	andi	r24, 0x30	; 48
    191a:	01 f5       	brne	.+64     	; 0x195c <conv_int+0x82>
    191c:	40 33       	cpi	r20, 0x30	; 48
    191e:	f1 f4       	brne	.+60     	; 0x195c <conv_int+0x82>
    1920:	ca 94       	dec	r12
    1922:	09 f4       	brne	.+2      	; 0x1926 <conv_int+0x4c>
    1924:	47 c0       	rjmp	.+142    	; 0x19b4 <conv_int+0xda>
    1926:	ce 01       	movw	r24, r28
    1928:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <fgetc>
    192c:	ac 01       	movw	r20, r24
    192e:	97 fd       	sbrc	r25, 7
    1930:	41 c0       	rjmp	.+130    	; 0x19b4 <conv_int+0xda>
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	d8 2a       	or	r13, r24
    1936:	48 37       	cpi	r20, 0x78	; 120
    1938:	11 f0       	breq	.+4      	; 0x193e <conv_int+0x64>
    193a:	48 35       	cpi	r20, 0x58	; 88
    193c:	59 f4       	brne	.+22     	; 0x1954 <conv_int+0x7a>
    193e:	80 e4       	ldi	r24, 0x40	; 64
    1940:	d8 2a       	or	r13, r24
    1942:	ca 94       	dec	r12
    1944:	b9 f1       	breq	.+110    	; 0x19b4 <conv_int+0xda>
    1946:	ce 01       	movw	r24, r28
    1948:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <fgetc>
    194c:	ac 01       	movw	r20, r24
    194e:	99 23       	and	r25, r25
    1950:	2c f4       	brge	.+10     	; 0x195c <conv_int+0x82>
    1952:	30 c0       	rjmp	.+96     	; 0x19b4 <conv_int+0xda>
    1954:	d6 fc       	sbrc	r13, 6
    1956:	02 c0       	rjmp	.+4      	; 0x195c <conv_int+0x82>
    1958:	80 e1       	ldi	r24, 0x10	; 16
    195a:	d8 2a       	or	r13, r24
    195c:	ee 24       	eor	r14, r14
    195e:	ff 24       	eor	r15, r15
    1960:	87 01       	movw	r16, r14
    1962:	24 2f       	mov	r18, r20
    1964:	20 53       	subi	r18, 0x30	; 48
    1966:	28 30       	cpi	r18, 0x08	; 8
    1968:	88 f0       	brcs	.+34     	; 0x198c <conv_int+0xb2>
    196a:	d4 fc       	sbrc	r13, 4
    196c:	09 c0       	rjmp	.+18     	; 0x1980 <conv_int+0xa6>
    196e:	2a 30       	cpi	r18, 0x0A	; 10
    1970:	68 f0       	brcs	.+26     	; 0x198c <conv_int+0xb2>
    1972:	d6 fe       	sbrs	r13, 6
    1974:	05 c0       	rjmp	.+10     	; 0x1980 <conv_int+0xa6>
    1976:	2f 7d       	andi	r18, 0xDF	; 223
    1978:	82 2f       	mov	r24, r18
    197a:	81 51       	subi	r24, 0x11	; 17
    197c:	86 30       	cpi	r24, 0x06	; 6
    197e:	28 f0       	brcs	.+10     	; 0x198a <conv_int+0xb0>
    1980:	be 01       	movw	r22, r28
    1982:	ca 01       	movw	r24, r20
    1984:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <ungetc>
    1988:	12 c0       	rjmp	.+36     	; 0x19ae <conv_int+0xd4>
    198a:	27 50       	subi	r18, 0x07	; 7
    198c:	4d 2d       	mov	r20, r13
    198e:	c8 01       	movw	r24, r16
    1990:	b7 01       	movw	r22, r14
    1992:	0e 94 26 0c 	call	0x184c	; 0x184c <mulacc>
    1996:	7b 01       	movw	r14, r22
    1998:	8c 01       	movw	r16, r24
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	d8 2a       	or	r13, r24
    199e:	ca 94       	dec	r12
    19a0:	61 f0       	breq	.+24     	; 0x19ba <conv_int+0xe0>
    19a2:	ce 01       	movw	r24, r28
    19a4:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <fgetc>
    19a8:	ac 01       	movw	r20, r24
    19aa:	97 ff       	sbrs	r25, 7
    19ac:	da cf       	rjmp	.-76     	; 0x1962 <conv_int+0x88>
    19ae:	d1 fc       	sbrc	r13, 1
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <conv_int+0xe0>
    19b2:	15 c0       	rjmp	.+42     	; 0x19de <conv_int+0x104>
    19b4:	ee 24       	eor	r14, r14
    19b6:	ff 24       	eor	r15, r15
    19b8:	87 01       	movw	r16, r14
    19ba:	d7 fe       	sbrs	r13, 7
    19bc:	08 c0       	rjmp	.+16     	; 0x19ce <conv_int+0xf4>
    19be:	10 95       	com	r17
    19c0:	00 95       	com	r16
    19c2:	f0 94       	com	r15
    19c4:	e0 94       	com	r14
    19c6:	e1 1c       	adc	r14, r1
    19c8:	f1 1c       	adc	r15, r1
    19ca:	01 1d       	adc	r16, r1
    19cc:	11 1d       	adc	r17, r1
    19ce:	2d 2d       	mov	r18, r13
    19d0:	b8 01       	movw	r22, r16
    19d2:	a7 01       	movw	r20, r14
    19d4:	c5 01       	movw	r24, r10
    19d6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <putval>
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <conv_int+0x106>
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	ea e0       	ldi	r30, 0x0A	; 10
    19e6:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__epilogue_restores__+0x10>

000019ea <conv_brk>:
    19ea:	a0 e2       	ldi	r26, 0x20	; 32
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	eb ef       	ldi	r30, 0xFB	; 251
    19f0:	fc e0       	ldi	r31, 0x0C	; 12
    19f2:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__prologue_saves__+0x8>
    19f6:	6c 01       	movw	r12, r24
    19f8:	a6 2e       	mov	r10, r22
    19fa:	8a 01       	movw	r16, r20
    19fc:	79 01       	movw	r14, r18
    19fe:	fe 01       	movw	r30, r28
    1a00:	31 96       	adiw	r30, 0x01	; 1
    1a02:	80 e2       	ldi	r24, 0x20	; 32
    1a04:	df 01       	movw	r26, r30
    1a06:	1d 92       	st	X+, r1
    1a08:	8a 95       	dec	r24
    1a0a:	e9 f7       	brne	.-6      	; 0x1a06 <conv_brk+0x1c>
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	4f 01       	movw	r8, r30
    1a18:	a1 e0       	ldi	r26, 0x01	; 1
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	f6 01       	movw	r30, r12
    1a1e:	83 81       	ldd	r24, Z+3	; 0x03
    1a20:	f7 01       	movw	r30, r14
    1a22:	83 fd       	sbrc	r24, 3
    1a24:	25 91       	lpm	r18, Z+
    1a26:	83 ff       	sbrs	r24, 3
    1a28:	21 91       	ld	r18, Z+
    1a2a:	7f 01       	movw	r14, r30
    1a2c:	22 23       	and	r18, r18
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <conv_brk+0x48>
    1a30:	7e c0       	rjmp	.+252    	; 0x1b2e <conv_brk+0x144>
    1a32:	2e 35       	cpi	r18, 0x5E	; 94
    1a34:	19 f4       	brne	.+6      	; 0x1a3c <conv_brk+0x52>
    1a36:	41 15       	cp	r20, r1
    1a38:	51 05       	cpc	r21, r1
    1a3a:	69 f1       	breq	.+90     	; 0x1a96 <conv_brk+0xac>
    1a3c:	87 2f       	mov	r24, r23
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	84 17       	cp	r24, r20
    1a42:	95 07       	cpc	r25, r21
    1a44:	44 f4       	brge	.+16     	; 0x1a56 <conv_brk+0x6c>
    1a46:	2d 35       	cpi	r18, 0x5D	; 93
    1a48:	51 f1       	breq	.+84     	; 0x1a9e <conv_brk+0xb4>
    1a4a:	2d 32       	cpi	r18, 0x2D	; 45
    1a4c:	21 f4       	brne	.+8      	; 0x1a56 <conv_brk+0x6c>
    1a4e:	33 23       	and	r19, r19
    1a50:	29 f4       	brne	.+10     	; 0x1a5c <conv_brk+0x72>
    1a52:	31 e0       	ldi	r19, 0x01	; 1
    1a54:	21 c0       	rjmp	.+66     	; 0x1a98 <conv_brk+0xae>
    1a56:	33 23       	and	r19, r19
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <conv_brk+0x72>
    1a5a:	62 2f       	mov	r22, r18
    1a5c:	32 2f       	mov	r19, r18
    1a5e:	83 2f       	mov	r24, r19
    1a60:	86 95       	lsr	r24
    1a62:	86 95       	lsr	r24
    1a64:	86 95       	lsr	r24
    1a66:	f4 01       	movw	r30, r8
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f1 1d       	adc	r31, r1
    1a6c:	83 2f       	mov	r24, r19
    1a6e:	87 70       	andi	r24, 0x07	; 7
    1a70:	3d 01       	movw	r6, r26
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <conv_brk+0x8e>
    1a74:	66 0c       	add	r6, r6
    1a76:	77 1c       	adc	r7, r7
    1a78:	8a 95       	dec	r24
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <conv_brk+0x8a>
    1a7c:	20 81       	ld	r18, Z
    1a7e:	26 29       	or	r18, r6
    1a80:	20 83       	st	Z, r18
    1a82:	36 17       	cp	r19, r22
    1a84:	11 f4       	brne	.+4      	; 0x1a8a <conv_brk+0xa0>
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	07 c0       	rjmp	.+14     	; 0x1a98 <conv_brk+0xae>
    1a8a:	36 17       	cp	r19, r22
    1a8c:	10 f4       	brcc	.+4      	; 0x1a92 <conv_brk+0xa8>
    1a8e:	3f 5f       	subi	r19, 0xFF	; 255
    1a90:	e6 cf       	rjmp	.-52     	; 0x1a5e <conv_brk+0x74>
    1a92:	31 50       	subi	r19, 0x01	; 1
    1a94:	e4 cf       	rjmp	.-56     	; 0x1a5e <conv_brk+0x74>
    1a96:	71 e0       	ldi	r23, 0x01	; 1
    1a98:	4f 5f       	subi	r20, 0xFF	; 255
    1a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a9c:	bf cf       	rjmp	.-130    	; 0x1a1c <conv_brk+0x32>
    1a9e:	33 23       	and	r19, r19
    1aa0:	19 f0       	breq	.+6      	; 0x1aa8 <conv_brk+0xbe>
    1aa2:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa4:	80 62       	ori	r24, 0x20	; 32
    1aa6:	8e 83       	std	Y+6, r24	; 0x06
    1aa8:	77 23       	and	r23, r23
    1aaa:	59 f0       	breq	.+22     	; 0x1ac2 <conv_brk+0xd8>
    1aac:	fe 01       	movw	r30, r28
    1aae:	31 96       	adiw	r30, 0x01	; 1
    1ab0:	9e 01       	movw	r18, r28
    1ab2:	2f 5d       	subi	r18, 0xDF	; 223
    1ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab6:	80 81       	ld	r24, Z
    1ab8:	80 95       	com	r24
    1aba:	81 93       	st	Z+, r24
    1abc:	e2 17       	cp	r30, r18
    1abe:	f3 07       	cpc	r31, r19
    1ac0:	d1 f7       	brne	.-12     	; 0x1ab6 <conv_brk+0xcc>
    1ac2:	bb 24       	eor	r11, r11
    1ac4:	b3 94       	inc	r11
    1ac6:	4e 01       	movw	r8, r28
    1ac8:	08 94       	sec
    1aca:	81 1c       	adc	r8, r1
    1acc:	91 1c       	adc	r9, r1
    1ace:	c6 01       	movw	r24, r12
    1ad0:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <fgetc>
    1ad4:	ac 01       	movw	r20, r24
    1ad6:	97 fd       	sbrc	r25, 7
    1ad8:	22 c0       	rjmp	.+68     	; 0x1b1e <conv_brk+0x134>
    1ada:	86 95       	lsr	r24
    1adc:	86 95       	lsr	r24
    1ade:	86 95       	lsr	r24
    1ae0:	f4 01       	movw	r30, r8
    1ae2:	e8 0f       	add	r30, r24
    1ae4:	f1 1d       	adc	r31, r1
    1ae6:	80 81       	ld	r24, Z
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9a 01       	movw	r18, r20
    1aec:	27 70       	andi	r18, 0x07	; 7
    1aee:	30 70       	andi	r19, 0x00	; 0
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <conv_brk+0x10c>
    1af2:	95 95       	asr	r25
    1af4:	87 95       	ror	r24
    1af6:	2a 95       	dec	r18
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <conv_brk+0x108>
    1afa:	80 fd       	sbrc	r24, 0
    1afc:	05 c0       	rjmp	.+10     	; 0x1b08 <conv_brk+0x11e>
    1afe:	b6 01       	movw	r22, r12
    1b00:	ca 01       	movw	r24, r20
    1b02:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <ungetc>
    1b06:	0b c0       	rjmp	.+22     	; 0x1b1e <conv_brk+0x134>
    1b08:	01 15       	cp	r16, r1
    1b0a:	11 05       	cpc	r17, r1
    1b0c:	19 f0       	breq	.+6      	; 0x1b14 <conv_brk+0x12a>
    1b0e:	d8 01       	movw	r26, r16
    1b10:	4d 93       	st	X+, r20
    1b12:	8d 01       	movw	r16, r26
    1b14:	aa 94       	dec	r10
    1b16:	bb 24       	eor	r11, r11
    1b18:	aa 20       	and	r10, r10
    1b1a:	c9 f6       	brne	.-78     	; 0x1ace <conv_brk+0xe4>
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <conv_brk+0x138>
    1b1e:	bb 20       	and	r11, r11
    1b20:	31 f4       	brne	.+12     	; 0x1b2e <conv_brk+0x144>
    1b22:	01 15       	cp	r16, r1
    1b24:	11 05       	cpc	r17, r1
    1b26:	29 f0       	breq	.+10     	; 0x1b32 <conv_brk+0x148>
    1b28:	f8 01       	movw	r30, r16
    1b2a:	10 82       	st	Z, r1
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <conv_brk+0x148>
    1b2e:	ee 24       	eor	r14, r14
    1b30:	ff 24       	eor	r15, r15
    1b32:	c7 01       	movw	r24, r14
    1b34:	a0 96       	adiw	r28, 0x20	; 32
    1b36:	ee e0       	ldi	r30, 0x0E	; 14
    1b38:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__epilogue_restores__+0x8>

00001b3c <vfscanf>:
    1b3c:	a0 e0       	ldi	r26, 0x00	; 0
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e4 ea       	ldi	r30, 0xA4	; 164
    1b42:	fd e0       	ldi	r31, 0x0D	; 13
    1b44:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__prologue_saves__+0x8>
    1b48:	5c 01       	movw	r10, r24
    1b4a:	6b 01       	movw	r12, r22
    1b4c:	3a 01       	movw	r6, r20
    1b4e:	fc 01       	movw	r30, r24
    1b50:	17 82       	std	Z+7, r1	; 0x07
    1b52:	16 82       	std	Z+6, r1	; 0x06
    1b54:	88 24       	eor	r8, r8
    1b56:	ea c0       	rjmp	.+468    	; 0x1d2c <vfscanf+0x1f0>
    1b58:	81 2f       	mov	r24, r17
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <isspace>
    1b60:	89 2b       	or	r24, r25
    1b62:	21 f0       	breq	.+8      	; 0x1b6c <vfscanf+0x30>
    1b64:	c5 01       	movw	r24, r10
    1b66:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <skip_spaces>
    1b6a:	e0 c0       	rjmp	.+448    	; 0x1d2c <vfscanf+0x1f0>
    1b6c:	15 32       	cpi	r17, 0x25	; 37
    1b6e:	49 f4       	brne	.+18     	; 0x1b82 <vfscanf+0x46>
    1b70:	f6 01       	movw	r30, r12
    1b72:	f3 fc       	sbrc	r15, 3
    1b74:	65 91       	lpm	r22, Z+
    1b76:	f3 fe       	sbrs	r15, 3
    1b78:	61 91       	ld	r22, Z+
    1b7a:	6f 01       	movw	r12, r30
    1b7c:	65 32       	cpi	r22, 0x25	; 37
    1b7e:	69 f4       	brne	.+26     	; 0x1b9a <vfscanf+0x5e>
    1b80:	15 e2       	ldi	r17, 0x25	; 37
    1b82:	c5 01       	movw	r24, r10
    1b84:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <fgetc>
    1b88:	97 fd       	sbrc	r25, 7
    1b8a:	dc c0       	rjmp	.+440    	; 0x1d44 <vfscanf+0x208>
    1b8c:	18 17       	cp	r17, r24
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <vfscanf+0x56>
    1b90:	cd c0       	rjmp	.+410    	; 0x1d2c <vfscanf+0x1f0>
    1b92:	b5 01       	movw	r22, r10
    1b94:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <ungetc>
    1b98:	da c0       	rjmp	.+436    	; 0x1d4e <vfscanf+0x212>
    1b9a:	6a 32       	cpi	r22, 0x2A	; 42
    1b9c:	19 f0       	breq	.+6      	; 0x1ba4 <vfscanf+0x68>
    1b9e:	16 2f       	mov	r17, r22
    1ba0:	00 e0       	ldi	r16, 0x00	; 0
    1ba2:	06 c0       	rjmp	.+12     	; 0x1bb0 <vfscanf+0x74>
    1ba4:	f3 fc       	sbrc	r15, 3
    1ba6:	15 91       	lpm	r17, Z+
    1ba8:	f3 fe       	sbrs	r15, 3
    1baa:	11 91       	ld	r17, Z+
    1bac:	6f 01       	movw	r12, r30
    1bae:	01 e0       	ldi	r16, 0x01	; 1
    1bb0:	99 24       	eor	r9, r9
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <vfscanf+0x96>
    1bb4:	02 60       	ori	r16, 0x02	; 2
    1bb6:	69 2d       	mov	r22, r9
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	40 e2       	ldi	r20, 0x20	; 32
    1bc0:	0e 94 26 0c 	call	0x184c	; 0x184c <mulacc>
    1bc4:	96 2e       	mov	r9, r22
    1bc6:	f6 01       	movw	r30, r12
    1bc8:	f3 fc       	sbrc	r15, 3
    1bca:	15 91       	lpm	r17, Z+
    1bcc:	f3 fe       	sbrs	r15, 3
    1bce:	11 91       	ld	r17, Z+
    1bd0:	6f 01       	movw	r12, r30
    1bd2:	21 2f       	mov	r18, r17
    1bd4:	20 53       	subi	r18, 0x30	; 48
    1bd6:	2a 30       	cpi	r18, 0x0A	; 10
    1bd8:	68 f3       	brcs	.-38     	; 0x1bb4 <vfscanf+0x78>
    1bda:	01 fd       	sbrc	r16, 1
    1bdc:	03 c0       	rjmp	.+6      	; 0x1be4 <vfscanf+0xa8>
    1bde:	99 24       	eor	r9, r9
    1be0:	9a 94       	dec	r9
    1be2:	03 c0       	rjmp	.+6      	; 0x1bea <vfscanf+0xae>
    1be4:	99 20       	and	r9, r9
    1be6:	09 f4       	brne	.+2      	; 0x1bea <vfscanf+0xae>
    1be8:	b2 c0       	rjmp	.+356    	; 0x1d4e <vfscanf+0x212>
    1bea:	18 36       	cpi	r17, 0x68	; 104
    1bec:	21 f0       	breq	.+8      	; 0x1bf6 <vfscanf+0xba>
    1bee:	1c 36       	cpi	r17, 0x6C	; 108
    1bf0:	99 f4       	brne	.+38     	; 0x1c18 <vfscanf+0xdc>
    1bf2:	f6 01       	movw	r30, r12
    1bf4:	0b c0       	rjmp	.+22     	; 0x1c0c <vfscanf+0xd0>
    1bf6:	f6 01       	movw	r30, r12
    1bf8:	f3 fc       	sbrc	r15, 3
    1bfa:	65 91       	lpm	r22, Z+
    1bfc:	f3 fe       	sbrs	r15, 3
    1bfe:	61 91       	ld	r22, Z+
    1c00:	68 36       	cpi	r22, 0x68	; 104
    1c02:	19 f0       	breq	.+6      	; 0x1c0a <vfscanf+0xce>
    1c04:	6f 01       	movw	r12, r30
    1c06:	16 2f       	mov	r17, r22
    1c08:	07 c0       	rjmp	.+14     	; 0x1c18 <vfscanf+0xdc>
    1c0a:	08 60       	ori	r16, 0x08	; 8
    1c0c:	04 60       	ori	r16, 0x04	; 4
    1c0e:	f3 fc       	sbrc	r15, 3
    1c10:	15 91       	lpm	r17, Z+
    1c12:	f3 fe       	sbrs	r15, 3
    1c14:	11 91       	ld	r17, Z+
    1c16:	6f 01       	movw	r12, r30
    1c18:	11 23       	and	r17, r17
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <vfscanf+0xe2>
    1c1c:	98 c0       	rjmp	.+304    	; 0x1d4e <vfscanf+0x212>
    1c1e:	61 2f       	mov	r22, r17
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	80 ee       	ldi	r24, 0xE0	; 224
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <strchr_P>
    1c2a:	89 2b       	or	r24, r25
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <vfscanf+0xf4>
    1c2e:	8f c0       	rjmp	.+286    	; 0x1d4e <vfscanf+0x212>
    1c30:	80 2f       	mov	r24, r16
    1c32:	00 ff       	sbrs	r16, 0
    1c34:	03 c0       	rjmp	.+6      	; 0x1c3c <vfscanf+0x100>
    1c36:	ee 24       	eor	r14, r14
    1c38:	ff 24       	eor	r15, r15
    1c3a:	07 c0       	rjmp	.+14     	; 0x1c4a <vfscanf+0x10e>
    1c3c:	f3 01       	movw	r30, r6
    1c3e:	e0 80       	ld	r14, Z
    1c40:	f1 80       	ldd	r15, Z+1	; 0x01
    1c42:	22 e0       	ldi	r18, 0x02	; 2
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	62 0e       	add	r6, r18
    1c48:	73 1e       	adc	r7, r19
    1c4a:	1e 36       	cpi	r17, 0x6E	; 110
    1c4c:	51 f4       	brne	.+20     	; 0x1c62 <vfscanf+0x126>
    1c4e:	f5 01       	movw	r30, r10
    1c50:	46 81       	ldd	r20, Z+6	; 0x06
    1c52:	57 81       	ldd	r21, Z+7	; 0x07
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	20 2f       	mov	r18, r16
    1c5a:	c7 01       	movw	r24, r14
    1c5c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <putval>
    1c60:	65 c0       	rjmp	.+202    	; 0x1d2c <vfscanf+0x1f0>
    1c62:	13 36       	cpi	r17, 0x63	; 99
    1c64:	91 f4       	brne	.+36     	; 0x1c8a <vfscanf+0x14e>
    1c66:	81 fd       	sbrc	r24, 1
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <vfscanf+0x132>
    1c6a:	99 24       	eor	r9, r9
    1c6c:	93 94       	inc	r9
    1c6e:	c5 01       	movw	r24, r10
    1c70:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <fgetc>
    1c74:	97 fd       	sbrc	r25, 7
    1c76:	66 c0       	rjmp	.+204    	; 0x1d44 <vfscanf+0x208>
    1c78:	e1 14       	cp	r14, r1
    1c7a:	f1 04       	cpc	r15, r1
    1c7c:	19 f0       	breq	.+6      	; 0x1c84 <vfscanf+0x148>
    1c7e:	f7 01       	movw	r30, r14
    1c80:	81 93       	st	Z+, r24
    1c82:	7f 01       	movw	r14, r30
    1c84:	9a 94       	dec	r9
    1c86:	99 f7       	brne	.-26     	; 0x1c6e <vfscanf+0x132>
    1c88:	4f c0       	rjmp	.+158    	; 0x1d28 <vfscanf+0x1ec>
    1c8a:	1b 35       	cpi	r17, 0x5B	; 91
    1c8c:	59 f4       	brne	.+22     	; 0x1ca4 <vfscanf+0x168>
    1c8e:	96 01       	movw	r18, r12
    1c90:	a7 01       	movw	r20, r14
    1c92:	69 2d       	mov	r22, r9
    1c94:	c5 01       	movw	r24, r10
    1c96:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <conv_brk>
    1c9a:	6c 01       	movw	r12, r24
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <vfscanf+0x166>
    1ca0:	43 c0       	rjmp	.+134    	; 0x1d28 <vfscanf+0x1ec>
    1ca2:	3d c0       	rjmp	.+122    	; 0x1d1e <vfscanf+0x1e2>
    1ca4:	c5 01       	movw	r24, r10
    1ca6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <skip_spaces>
    1caa:	97 fd       	sbrc	r25, 7
    1cac:	4b c0       	rjmp	.+150    	; 0x1d44 <vfscanf+0x208>
    1cae:	1f 36       	cpi	r17, 0x6F	; 111
    1cb0:	59 f1       	breq	.+86     	; 0x1d08 <vfscanf+0x1cc>
    1cb2:	10 37       	cpi	r17, 0x70	; 112
    1cb4:	28 f4       	brcc	.+10     	; 0x1cc0 <vfscanf+0x184>
    1cb6:	14 36       	cpi	r17, 0x64	; 100
    1cb8:	29 f1       	breq	.+74     	; 0x1d04 <vfscanf+0x1c8>
    1cba:	19 36       	cpi	r17, 0x69	; 105
    1cbc:	39 f5       	brne	.+78     	; 0x1d0c <vfscanf+0x1d0>
    1cbe:	27 c0       	rjmp	.+78     	; 0x1d0e <vfscanf+0x1d2>
    1cc0:	13 37       	cpi	r17, 0x73	; 115
    1cc2:	19 f0       	breq	.+6      	; 0x1cca <vfscanf+0x18e>
    1cc4:	15 37       	cpi	r17, 0x75	; 117
    1cc6:	11 f5       	brne	.+68     	; 0x1d0c <vfscanf+0x1d0>
    1cc8:	1d c0       	rjmp	.+58     	; 0x1d04 <vfscanf+0x1c8>
    1cca:	c5 01       	movw	r24, r10
    1ccc:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <fgetc>
    1cd0:	ec 01       	movw	r28, r24
    1cd2:	97 fd       	sbrc	r25, 7
    1cd4:	11 c0       	rjmp	.+34     	; 0x1cf8 <vfscanf+0x1bc>
    1cd6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <isspace>
    1cda:	89 2b       	or	r24, r25
    1cdc:	29 f0       	breq	.+10     	; 0x1ce8 <vfscanf+0x1ac>
    1cde:	b5 01       	movw	r22, r10
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <ungetc>
    1ce6:	08 c0       	rjmp	.+16     	; 0x1cf8 <vfscanf+0x1bc>
    1ce8:	e1 14       	cp	r14, r1
    1cea:	f1 04       	cpc	r15, r1
    1cec:	19 f0       	breq	.+6      	; 0x1cf4 <vfscanf+0x1b8>
    1cee:	f7 01       	movw	r30, r14
    1cf0:	c1 93       	st	Z+, r28
    1cf2:	7f 01       	movw	r14, r30
    1cf4:	9a 94       	dec	r9
    1cf6:	49 f7       	brne	.-46     	; 0x1cca <vfscanf+0x18e>
    1cf8:	e1 14       	cp	r14, r1
    1cfa:	f1 04       	cpc	r15, r1
    1cfc:	a9 f0       	breq	.+42     	; 0x1d28 <vfscanf+0x1ec>
    1cfe:	f7 01       	movw	r30, r14
    1d00:	10 82       	st	Z, r1
    1d02:	12 c0       	rjmp	.+36     	; 0x1d28 <vfscanf+0x1ec>
    1d04:	00 62       	ori	r16, 0x20	; 32
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <vfscanf+0x1d2>
    1d08:	00 61       	ori	r16, 0x10	; 16
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <vfscanf+0x1d2>
    1d0c:	00 64       	ori	r16, 0x40	; 64
    1d0e:	20 2f       	mov	r18, r16
    1d10:	a7 01       	movw	r20, r14
    1d12:	69 2d       	mov	r22, r9
    1d14:	c5 01       	movw	r24, r10
    1d16:	0e 94 6d 0c 	call	0x18da	; 0x18da <conv_int>
    1d1a:	88 23       	and	r24, r24
    1d1c:	29 f4       	brne	.+10     	; 0x1d28 <vfscanf+0x1ec>
    1d1e:	f5 01       	movw	r30, r10
    1d20:	83 81       	ldd	r24, Z+3	; 0x03
    1d22:	80 73       	andi	r24, 0x30	; 48
    1d24:	79 f4       	brne	.+30     	; 0x1d44 <vfscanf+0x208>
    1d26:	13 c0       	rjmp	.+38     	; 0x1d4e <vfscanf+0x212>
    1d28:	00 ff       	sbrs	r16, 0
    1d2a:	83 94       	inc	r8
    1d2c:	f5 01       	movw	r30, r10
    1d2e:	f3 80       	ldd	r15, Z+3	; 0x03
    1d30:	f6 01       	movw	r30, r12
    1d32:	f3 fc       	sbrc	r15, 3
    1d34:	15 91       	lpm	r17, Z+
    1d36:	f3 fe       	sbrs	r15, 3
    1d38:	11 91       	ld	r17, Z+
    1d3a:	6f 01       	movw	r12, r30
    1d3c:	11 23       	and	r17, r17
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <vfscanf+0x206>
    1d40:	0b cf       	rjmp	.-490    	; 0x1b58 <vfscanf+0x1c>
    1d42:	05 c0       	rjmp	.+10     	; 0x1d4e <vfscanf+0x212>
    1d44:	88 20       	and	r8, r8
    1d46:	19 f4       	brne	.+6      	; 0x1d4e <vfscanf+0x212>
    1d48:	2f ef       	ldi	r18, 0xFF	; 255
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <vfscanf+0x216>
    1d4e:	28 2d       	mov	r18, r8
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	c9 01       	movw	r24, r18
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	ee e0       	ldi	r30, 0x0E	; 14
    1d5a:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__epilogue_restores__+0x8>

00001d5e <strchr_P>:
    1d5e:	fc 01       	movw	r30, r24
    1d60:	05 90       	lpm	r0, Z+
    1d62:	06 16       	cp	r0, r22
    1d64:	21 f0       	breq	.+8      	; 0x1d6e <strchr_P+0x10>
    1d66:	00 20       	and	r0, r0
    1d68:	d9 f7       	brne	.-10     	; 0x1d60 <strchr_P+0x2>
    1d6a:	c0 01       	movw	r24, r0
    1d6c:	08 95       	ret
    1d6e:	31 97       	sbiw	r30, 0x01	; 1
    1d70:	cf 01       	movw	r24, r30
    1d72:	08 95       	ret

00001d74 <strnlen_P>:
    1d74:	fc 01       	movw	r30, r24
    1d76:	05 90       	lpm	r0, Z+
    1d78:	61 50       	subi	r22, 0x01	; 1
    1d7a:	70 40       	sbci	r23, 0x00	; 0
    1d7c:	01 10       	cpse	r0, r1
    1d7e:	d8 f7       	brcc	.-10     	; 0x1d76 <strnlen_P+0x2>
    1d80:	80 95       	com	r24
    1d82:	90 95       	com	r25
    1d84:	8e 0f       	add	r24, r30
    1d86:	9f 1f       	adc	r25, r31
    1d88:	08 95       	ret

00001d8a <strnlen>:
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	61 50       	subi	r22, 0x01	; 1
    1d8e:	70 40       	sbci	r23, 0x00	; 0
    1d90:	01 90       	ld	r0, Z+
    1d92:	01 10       	cpse	r0, r1
    1d94:	d8 f7       	brcc	.-10     	; 0x1d8c <strnlen+0x2>
    1d96:	80 95       	com	r24
    1d98:	90 95       	com	r25
    1d9a:	8e 0f       	add	r24, r30
    1d9c:	9f 1f       	adc	r25, r31
    1d9e:	08 95       	ret

00001da0 <fgetc>:
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	ec 01       	movw	r28, r24
    1da6:	4b 81       	ldd	r20, Y+3	; 0x03
    1da8:	40 ff       	sbrs	r20, 0
    1daa:	1a c0       	rjmp	.+52     	; 0x1de0 <fgetc+0x40>
    1dac:	46 ff       	sbrs	r20, 6
    1dae:	0a c0       	rjmp	.+20     	; 0x1dc4 <fgetc+0x24>
    1db0:	4f 7b       	andi	r20, 0xBF	; 191
    1db2:	4b 83       	std	Y+3, r20	; 0x03
    1db4:	8e 81       	ldd	r24, Y+6	; 0x06
    1db6:	9f 81       	ldd	r25, Y+7	; 0x07
    1db8:	01 96       	adiw	r24, 0x01	; 1
    1dba:	9f 83       	std	Y+7, r25	; 0x07
    1dbc:	8e 83       	std	Y+6, r24	; 0x06
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	2b c0       	rjmp	.+86     	; 0x1e1a <fgetc+0x7a>
    1dc4:	42 ff       	sbrs	r20, 2
    1dc6:	13 c0       	rjmp	.+38     	; 0x1dee <fgetc+0x4e>
    1dc8:	e8 81       	ld	r30, Y
    1dca:	f9 81       	ldd	r31, Y+1	; 0x01
    1dcc:	80 81       	ld	r24, Z
    1dce:	28 2f       	mov	r18, r24
    1dd0:	33 27       	eor	r19, r19
    1dd2:	27 fd       	sbrc	r18, 7
    1dd4:	30 95       	com	r19
    1dd6:	21 15       	cp	r18, r1
    1dd8:	31 05       	cpc	r19, r1
    1dda:	29 f4       	brne	.+10     	; 0x1de6 <fgetc+0x46>
    1ddc:	40 62       	ori	r20, 0x20	; 32
    1dde:	4b 83       	std	Y+3, r20	; 0x03
    1de0:	2f ef       	ldi	r18, 0xFF	; 255
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	1b c0       	rjmp	.+54     	; 0x1e1c <fgetc+0x7c>
    1de6:	31 96       	adiw	r30, 0x01	; 1
    1de8:	f9 83       	std	Y+1, r31	; 0x01
    1dea:	e8 83       	st	Y, r30
    1dec:	11 c0       	rjmp	.+34     	; 0x1e10 <fgetc+0x70>
    1dee:	ea 85       	ldd	r30, Y+10	; 0x0a
    1df0:	fb 85       	ldd	r31, Y+11	; 0x0b
    1df2:	ce 01       	movw	r24, r28
    1df4:	09 95       	icall
    1df6:	9c 01       	movw	r18, r24
    1df8:	97 ff       	sbrs	r25, 7
    1dfa:	0a c0       	rjmp	.+20     	; 0x1e10 <fgetc+0x70>
    1dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfe:	2f 5f       	subi	r18, 0xFF	; 255
    1e00:	3f 4f       	sbci	r19, 0xFF	; 255
    1e02:	11 f0       	breq	.+4      	; 0x1e08 <fgetc+0x68>
    1e04:	80 e2       	ldi	r24, 0x20	; 32
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <fgetc+0x6a>
    1e08:	80 e1       	ldi	r24, 0x10	; 16
    1e0a:	89 2b       	or	r24, r25
    1e0c:	8b 83       	std	Y+3, r24	; 0x03
    1e0e:	e8 cf       	rjmp	.-48     	; 0x1de0 <fgetc+0x40>
    1e10:	8e 81       	ldd	r24, Y+6	; 0x06
    1e12:	9f 81       	ldd	r25, Y+7	; 0x07
    1e14:	01 96       	adiw	r24, 0x01	; 1
    1e16:	9f 83       	std	Y+7, r25	; 0x07
    1e18:	8e 83       	std	Y+6, r24	; 0x06
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	c9 01       	movw	r24, r18
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	08 95       	ret

00001e24 <ungetc>:
    1e24:	9c 01       	movw	r18, r24
    1e26:	fb 01       	movw	r30, r22
    1e28:	83 81       	ldd	r24, Z+3	; 0x03
    1e2a:	80 ff       	sbrs	r24, 0
    1e2c:	11 c0       	rjmp	.+34     	; 0x1e50 <ungetc+0x2c>
    1e2e:	86 fd       	sbrc	r24, 6
    1e30:	0f c0       	rjmp	.+30     	; 0x1e50 <ungetc+0x2c>
    1e32:	9f ef       	ldi	r25, 0xFF	; 255
    1e34:	2f 3f       	cpi	r18, 0xFF	; 255
    1e36:	39 07       	cpc	r19, r25
    1e38:	59 f0       	breq	.+22     	; 0x1e50 <ungetc+0x2c>
    1e3a:	22 83       	std	Z+2, r18	; 0x02
    1e3c:	80 64       	ori	r24, 0x40	; 64
    1e3e:	8f 7d       	andi	r24, 0xDF	; 223
    1e40:	83 83       	std	Z+3, r24	; 0x03
    1e42:	86 81       	ldd	r24, Z+6	; 0x06
    1e44:	97 81       	ldd	r25, Z+7	; 0x07
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	97 83       	std	Z+7, r25	; 0x07
    1e4a:	86 83       	std	Z+6, r24	; 0x06
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <ungetc+0x30>
    1e50:	2f ef       	ldi	r18, 0xFF	; 255
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	c9 01       	movw	r24, r18
    1e56:	08 95       	ret

00001e58 <__ultoa_invert>:
    1e58:	fa 01       	movw	r30, r20
    1e5a:	aa 27       	eor	r26, r26
    1e5c:	28 30       	cpi	r18, 0x08	; 8
    1e5e:	51 f1       	breq	.+84     	; 0x1eb4 <__ultoa_invert+0x5c>
    1e60:	20 31       	cpi	r18, 0x10	; 16
    1e62:	81 f1       	breq	.+96     	; 0x1ec4 <__ultoa_invert+0x6c>
    1e64:	e8 94       	clt
    1e66:	6f 93       	push	r22
    1e68:	6e 7f       	andi	r22, 0xFE	; 254
    1e6a:	6e 5f       	subi	r22, 0xFE	; 254
    1e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e70:	9f 4f       	sbci	r25, 0xFF	; 255
    1e72:	af 4f       	sbci	r26, 0xFF	; 255
    1e74:	b1 e0       	ldi	r27, 0x01	; 1
    1e76:	3e d0       	rcall	.+124    	; 0x1ef4 <__ultoa_invert+0x9c>
    1e78:	b4 e0       	ldi	r27, 0x04	; 4
    1e7a:	3c d0       	rcall	.+120    	; 0x1ef4 <__ultoa_invert+0x9c>
    1e7c:	67 0f       	add	r22, r23
    1e7e:	78 1f       	adc	r23, r24
    1e80:	89 1f       	adc	r24, r25
    1e82:	9a 1f       	adc	r25, r26
    1e84:	a1 1d       	adc	r26, r1
    1e86:	68 0f       	add	r22, r24
    1e88:	79 1f       	adc	r23, r25
    1e8a:	8a 1f       	adc	r24, r26
    1e8c:	91 1d       	adc	r25, r1
    1e8e:	a1 1d       	adc	r26, r1
    1e90:	6a 0f       	add	r22, r26
    1e92:	71 1d       	adc	r23, r1
    1e94:	81 1d       	adc	r24, r1
    1e96:	91 1d       	adc	r25, r1
    1e98:	a1 1d       	adc	r26, r1
    1e9a:	20 d0       	rcall	.+64     	; 0x1edc <__ultoa_invert+0x84>
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <__ultoa_invert+0x48>
    1e9e:	68 94       	set
    1ea0:	3f 91       	pop	r19
    1ea2:	2a e0       	ldi	r18, 0x0A	; 10
    1ea4:	26 9f       	mul	r18, r22
    1ea6:	11 24       	eor	r1, r1
    1ea8:	30 19       	sub	r19, r0
    1eaa:	30 5d       	subi	r19, 0xD0	; 208
    1eac:	31 93       	st	Z+, r19
    1eae:	de f6       	brtc	.-74     	; 0x1e66 <__ultoa_invert+0xe>
    1eb0:	cf 01       	movw	r24, r30
    1eb2:	08 95       	ret
    1eb4:	46 2f       	mov	r20, r22
    1eb6:	47 70       	andi	r20, 0x07	; 7
    1eb8:	40 5d       	subi	r20, 0xD0	; 208
    1eba:	41 93       	st	Z+, r20
    1ebc:	b3 e0       	ldi	r27, 0x03	; 3
    1ebe:	0f d0       	rcall	.+30     	; 0x1ede <__ultoa_invert+0x86>
    1ec0:	c9 f7       	brne	.-14     	; 0x1eb4 <__ultoa_invert+0x5c>
    1ec2:	f6 cf       	rjmp	.-20     	; 0x1eb0 <__ultoa_invert+0x58>
    1ec4:	46 2f       	mov	r20, r22
    1ec6:	4f 70       	andi	r20, 0x0F	; 15
    1ec8:	40 5d       	subi	r20, 0xD0	; 208
    1eca:	4a 33       	cpi	r20, 0x3A	; 58
    1ecc:	18 f0       	brcs	.+6      	; 0x1ed4 <__ultoa_invert+0x7c>
    1ece:	49 5d       	subi	r20, 0xD9	; 217
    1ed0:	31 fd       	sbrc	r19, 1
    1ed2:	40 52       	subi	r20, 0x20	; 32
    1ed4:	41 93       	st	Z+, r20
    1ed6:	02 d0       	rcall	.+4      	; 0x1edc <__ultoa_invert+0x84>
    1ed8:	a9 f7       	brne	.-22     	; 0x1ec4 <__ultoa_invert+0x6c>
    1eda:	ea cf       	rjmp	.-44     	; 0x1eb0 <__ultoa_invert+0x58>
    1edc:	b4 e0       	ldi	r27, 0x04	; 4
    1ede:	a6 95       	lsr	r26
    1ee0:	97 95       	ror	r25
    1ee2:	87 95       	ror	r24
    1ee4:	77 95       	ror	r23
    1ee6:	67 95       	ror	r22
    1ee8:	ba 95       	dec	r27
    1eea:	c9 f7       	brne	.-14     	; 0x1ede <__ultoa_invert+0x86>
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	61 05       	cpc	r22, r1
    1ef0:	71 05       	cpc	r23, r1
    1ef2:	08 95       	ret
    1ef4:	9b 01       	movw	r18, r22
    1ef6:	ac 01       	movw	r20, r24
    1ef8:	0a 2e       	mov	r0, r26
    1efa:	06 94       	lsr	r0
    1efc:	57 95       	ror	r21
    1efe:	47 95       	ror	r20
    1f00:	37 95       	ror	r19
    1f02:	27 95       	ror	r18
    1f04:	ba 95       	dec	r27
    1f06:	c9 f7       	brne	.-14     	; 0x1efa <__ultoa_invert+0xa2>
    1f08:	62 0f       	add	r22, r18
    1f0a:	73 1f       	adc	r23, r19
    1f0c:	84 1f       	adc	r24, r20
    1f0e:	95 1f       	adc	r25, r21
    1f10:	a0 1d       	adc	r26, r0
    1f12:	08 95       	ret

00001f14 <__udivmodhi4>:
    1f14:	aa 1b       	sub	r26, r26
    1f16:	bb 1b       	sub	r27, r27
    1f18:	51 e1       	ldi	r21, 0x11	; 17
    1f1a:	07 c0       	rjmp	.+14     	; 0x1f2a <__udivmodhi4_ep>

00001f1c <__udivmodhi4_loop>:
    1f1c:	aa 1f       	adc	r26, r26
    1f1e:	bb 1f       	adc	r27, r27
    1f20:	a6 17       	cp	r26, r22
    1f22:	b7 07       	cpc	r27, r23
    1f24:	10 f0       	brcs	.+4      	; 0x1f2a <__udivmodhi4_ep>
    1f26:	a6 1b       	sub	r26, r22
    1f28:	b7 0b       	sbc	r27, r23

00001f2a <__udivmodhi4_ep>:
    1f2a:	88 1f       	adc	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	5a 95       	dec	r21
    1f30:	a9 f7       	brne	.-22     	; 0x1f1c <__udivmodhi4_loop>
    1f32:	80 95       	com	r24
    1f34:	90 95       	com	r25
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	08 95       	ret

00001f3c <__divmodhi4>:
    1f3c:	97 fb       	bst	r25, 7
    1f3e:	09 2e       	mov	r0, r25
    1f40:	07 26       	eor	r0, r23
    1f42:	0a d0       	rcall	.+20     	; 0x1f58 <__divmodhi4_neg1>
    1f44:	77 fd       	sbrc	r23, 7
    1f46:	04 d0       	rcall	.+8      	; 0x1f50 <__divmodhi4_neg2>
    1f48:	e5 df       	rcall	.-54     	; 0x1f14 <__udivmodhi4>
    1f4a:	06 d0       	rcall	.+12     	; 0x1f58 <__divmodhi4_neg1>
    1f4c:	00 20       	and	r0, r0
    1f4e:	1a f4       	brpl	.+6      	; 0x1f56 <__divmodhi4_exit>

00001f50 <__divmodhi4_neg2>:
    1f50:	70 95       	com	r23
    1f52:	61 95       	neg	r22
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255

00001f56 <__divmodhi4_exit>:
    1f56:	08 95       	ret

00001f58 <__divmodhi4_neg1>:
    1f58:	f6 f7       	brtc	.-4      	; 0x1f56 <__divmodhi4_exit>
    1f5a:	90 95       	com	r25
    1f5c:	81 95       	neg	r24
    1f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f60:	08 95       	ret

00001f62 <isspace>:
    1f62:	91 11       	cpse	r25, r1
    1f64:	06 c0       	rjmp	.+12     	; 0x1f72 <__ctype_isfalse>
    1f66:	80 32       	cpi	r24, 0x20	; 32
    1f68:	19 f0       	breq	.+6      	; 0x1f70 <isspace+0xe>
    1f6a:	89 50       	subi	r24, 0x09	; 9
    1f6c:	85 50       	subi	r24, 0x05	; 5
    1f6e:	d0 f7       	brcc	.-12     	; 0x1f64 <isspace+0x2>
    1f70:	08 95       	ret

00001f72 <__ctype_isfalse>:
    1f72:	99 27       	eor	r25, r25
    1f74:	88 27       	eor	r24, r24

00001f76 <__ctype_istrue>:
    1f76:	08 95       	ret

00001f78 <__prologue_saves__>:
    1f78:	2f 92       	push	r2
    1f7a:	3f 92       	push	r3
    1f7c:	4f 92       	push	r4
    1f7e:	5f 92       	push	r5
    1f80:	6f 92       	push	r6
    1f82:	7f 92       	push	r7
    1f84:	8f 92       	push	r8
    1f86:	9f 92       	push	r9
    1f88:	af 92       	push	r10
    1f8a:	bf 92       	push	r11
    1f8c:	cf 92       	push	r12
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	ca 1b       	sub	r28, r26
    1fa2:	db 0b       	sbc	r29, r27
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	09 94       	ijmp

00001fb0 <__epilogue_restores__>:
    1fb0:	2a 88       	ldd	r2, Y+18	; 0x12
    1fb2:	39 88       	ldd	r3, Y+17	; 0x11
    1fb4:	48 88       	ldd	r4, Y+16	; 0x10
    1fb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fba:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fc2:	b9 84       	ldd	r11, Y+9	; 0x09
    1fc4:	c8 84       	ldd	r12, Y+8	; 0x08
    1fc6:	df 80       	ldd	r13, Y+7	; 0x07
    1fc8:	ee 80       	ldd	r14, Y+6	; 0x06
    1fca:	fd 80       	ldd	r15, Y+5	; 0x05
    1fcc:	0c 81       	ldd	r16, Y+4	; 0x04
    1fce:	1b 81       	ldd	r17, Y+3	; 0x03
    1fd0:	aa 81       	ldd	r26, Y+2	; 0x02
    1fd2:	b9 81       	ldd	r27, Y+1	; 0x01
    1fd4:	ce 0f       	add	r28, r30
    1fd6:	d1 1d       	adc	r29, r1
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	ed 01       	movw	r28, r26
    1fe4:	08 95       	ret

00001fe6 <_exit>:
    1fe6:	f8 94       	cli

00001fe8 <__stop_program>:
    1fe8:	ff cf       	rjmp	.-2      	; 0x1fe8 <__stop_program>
