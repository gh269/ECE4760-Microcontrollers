
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00001fa8  0000203c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000182  008001a0  008001a0  000020dc  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000374  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011a4  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000342  00000000  00000000  00003614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f1a  00000000  00000000  00003956  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00004870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a1  00000000  00000000  00004b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bf5  00000000  00000000  00004ff1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_13>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__vector_16>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__vector_20>
      54:	0c 94 88 03 	jmp	0x710	; 0x710 <__vector_21>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_line1>:
      cc:	43 75 72 72 65 6e 74 3a 00 00                       Current:..

000000d6 <LCD_line2>:
      d6:	44 65 73 69 72 65 64 3a 00 00                       Desired:..

000000e0 <__c.1988>:
      e0:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d0 e4       	ldi	r29, 0x40	; 64
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	11 e0       	ldi	r17, 0x01	; 1
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	e8 ea       	ldi	r30, 0xA8	; 168
     100:	ff e1       	ldi	r31, 0x1F	; 31
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a0 3a       	cpi	r26, 0xA0	; 160
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	13 e0       	ldi	r17, 0x03	; 3
     114:	a0 ea       	ldi	r26, 0xA0	; 160
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a2 32       	cpi	r26, 0x22	; 34
     11e:	b1 07       	cpc	r27, r17
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 51 07 	call	0xea2	; 0xea2 <main>
     126:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     12e:	1f 92       	push	r1
     130:	0f 92       	push	r0
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	0f 92       	push	r0
     136:	0b b6       	in	r0, 0x3b	; 59
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	2f 92       	push	r2
     13e:	3f 92       	push	r3
     140:	4f 92       	push	r4
     142:	5f 92       	push	r5
     144:	6f 92       	push	r6
     146:	7f 92       	push	r7
     148:	8f 92       	push	r8
     14a:	9f 92       	push	r9
     14c:	af 92       	push	r10
     14e:	bf 92       	push	r11
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	2f 93       	push	r18
     15e:	3f 93       	push	r19
     160:	4f 93       	push	r20
     162:	5f 93       	push	r21
     164:	6f 93       	push	r22
     166:	7f 93       	push	r23
     168:	8f 93       	push	r24
     16a:	9f 93       	push	r25
     16c:	af 93       	push	r26
     16e:	bf 93       	push	r27
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	ef 93       	push	r30
     176:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
  
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     178:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     17c:	50 90 da 02 	lds	r5, 0x02DA
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     180:	b0 9b       	sbis	0x16, 0	; 22
     182:	14 c0       	rjmp	.+40     	; 0x1ac <__vector_13+0x7e>
    ++kernel.cycles;
     184:	80 91 11 03 	lds	r24, 0x0311
     188:	90 91 12 03 	lds	r25, 0x0312
     18c:	a0 91 13 03 	lds	r26, 0x0313
     190:	b0 91 14 03 	lds	r27, 0x0314
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	a1 1d       	adc	r26, r1
     198:	b1 1d       	adc	r27, r1
     19a:	80 93 11 03 	sts	0x0311, r24
     19e:	90 93 12 03 	sts	0x0312, r25
     1a2:	a0 93 13 03 	sts	0x0313, r26
     1a6:	b0 93 14 03 	sts	0x0314, r27
    TIFR1 |= (1<<TOV1) ;
     1aa:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     1ac:	80 91 84 00 	lds	r24, 0x0084
     1b0:	90 91 85 00 	lds	r25, 0x0085
     1b4:	3c 01       	movw	r6, r24
     1b6:	88 24       	eor	r8, r8
     1b8:	99 24       	eor	r9, r9
     1ba:	80 91 11 03 	lds	r24, 0x0311
     1be:	90 91 12 03 	lds	r25, 0x0312
     1c2:	a0 91 13 03 	lds	r26, 0x0313
     1c6:	b0 91 14 03 	lds	r27, 0x0314
     1ca:	dc 01       	movw	r26, r24
     1cc:	99 27       	eor	r25, r25
     1ce:	88 27       	eor	r24, r24
     1d0:	68 0e       	add	r6, r24
     1d2:	79 1e       	adc	r7, r25
     1d4:	8a 1e       	adc	r8, r26
     1d6:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     1d8:	40 90 d9 02 	lds	r4, 0x02D9
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	ff ef       	ldi	r31, 0xFF	; 255
     1e2:	af 2e       	mov	r10, r31
     1e4:	ff ef       	ldi	r31, 0xFF	; 255
     1e6:	bf 2e       	mov	r11, r31
     1e8:	ff ef       	ldi	r31, 0xFF	; 255
     1ea:	cf 2e       	mov	r12, r31
     1ec:	ff e7       	ldi	r31, 0x7F	; 127
     1ee:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     1f0:	eb e0       	ldi	r30, 0x0B	; 11
     1f2:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
  t->state = READYQ;
     1f4:	33 24       	eor	r3, r3
     1f6:	33 94       	inc	r3
      } else if (t->release < nextHit) {
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     1f8:	cb e0       	ldi	r28, 0x0B	; 11
     1fa:	d0 e0       	ldi	r29, 0x00	; 0
     1fc:	43 c0       	rjmp	.+134    	; 0x284 <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     1fe:	62 9d       	mul	r22, r2
     200:	d0 01       	movw	r26, r0
     202:	11 24       	eor	r1, r1
     204:	a5 52       	subi	r26, 0x25	; 37
     206:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     208:	1a 96       	adiw	r26, 0x0a	; 10
     20a:	8c 91       	ld	r24, X
     20c:	1a 97       	sbiw	r26, 0x0a	; 10
     20e:	82 30       	cpi	r24, 0x02	; 2
     210:	a1 f4       	brne	.+40     	; 0x23a <__vector_13+0x10c>
      if (t->release <= now) {
     212:	12 96       	adiw	r26, 0x02	; 2
     214:	ed 90       	ld	r14, X+
     216:	fd 90       	ld	r15, X+
     218:	0d 91       	ld	r16, X+
     21a:	1c 91       	ld	r17, X
     21c:	15 97       	sbiw	r26, 0x05	; 5
     21e:	6e 14       	cp	r6, r14
     220:	7f 04       	cpc	r7, r15
     222:	80 06       	cpc	r8, r16
     224:	91 06       	cpc	r9, r17
     226:	20 f0       	brcs	.+8      	; 0x230 <__vector_13+0x102>
  t->state = READYQ;
     228:	1a 96       	adiw	r26, 0x0a	; 10
     22a:	3c 92       	st	X, r3
     22c:	1a 97       	sbiw	r26, 0x0a	; 10
     22e:	05 c0       	rjmp	.+10     	; 0x23a <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     230:	ea 14       	cp	r14, r10
     232:	fb 04       	cpc	r15, r11
     234:	0c 05       	cpc	r16, r12
     236:	1d 05       	cpc	r17, r13
     238:	10 f0       	brcs	.+4      	; 0x23e <__vector_13+0x110>
     23a:	86 01       	movw	r16, r12
     23c:	75 01       	movw	r14, r10
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     23e:	1a 96       	adiw	r26, 0x0a	; 10
     240:	8c 91       	ld	r24, X
     242:	1a 97       	sbiw	r26, 0x0a	; 10
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	d9 f4       	brne	.+54     	; 0x27e <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     248:	87 2f       	mov	r24, r23
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	8c 9f       	mul	r24, r28
     24e:	f0 01       	movw	r30, r0
     250:	8d 9f       	mul	r24, r29
     252:	f0 0d       	add	r31, r0
     254:	9c 9f       	mul	r25, r28
     256:	f0 0d       	add	r31, r0
     258:	11 24       	eor	r1, r1
     25a:	e7 52       	subi	r30, 0x27	; 39
     25c:	fd 4f       	sbci	r31, 0xFD	; 253
     25e:	16 96       	adiw	r26, 0x06	; 6
     260:	2d 91       	ld	r18, X+
     262:	3d 91       	ld	r19, X+
     264:	4d 91       	ld	r20, X+
     266:	5c 91       	ld	r21, X
     268:	19 97       	sbiw	r26, 0x09	; 9
     26a:	80 85       	ldd	r24, Z+8	; 0x08
     26c:	91 85       	ldd	r25, Z+9	; 0x09
     26e:	a2 85       	ldd	r26, Z+10	; 0x0a
     270:	b3 85       	ldd	r27, Z+11	; 0x0b
     272:	28 17       	cp	r18, r24
     274:	39 07       	cpc	r19, r25
     276:	4a 07       	cpc	r20, r26
     278:	5b 07       	cpc	r21, r27
     27a:	08 f4       	brcc	.+2      	; 0x27e <__vector_13+0x150>
     27c:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     27e:	6f 5f       	subi	r22, 0xFF	; 255
     280:	57 01       	movw	r10, r14
     282:	68 01       	movw	r12, r16
     284:	46 16       	cp	r4, r22
     286:	08 f0       	brcs	.+2      	; 0x28a <__vector_13+0x15c>
     288:	ba cf       	rjmp	.-140    	; 0x1fe <__vector_13+0xd0>
    }
  }
  //fprintf(stdout, "Old: %u New: %u\n\r", oldrunning, running);
  //fprintf(stdout, "NumTasks: %u\n\r", kernel.nbrOfTasks);
  //fprintf(stdout, "Current time: %lu\n\r", (unsigned long) trtCurrentTime());
  if (running != oldrunning) { // perform context switch?
     28a:	75 15       	cp	r23, r5
     28c:	b1 f0       	breq	.+44     	; 0x2ba <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     28e:	eb e0       	ldi	r30, 0x0B	; 11
     290:	5e 9e       	mul	r5, r30
     292:	d0 01       	movw	r26, r0
     294:	11 24       	eor	r1, r1
     296:	a5 52       	subi	r26, 0x25	; 37
     298:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     29a:	8d b7       	in	r24, 0x3d	; 61
     29c:	8c 93       	st	X, r24
    t->sph = SPH;
     29e:	8e b7       	in	r24, 0x3e	; 62
     2a0:	11 96       	adiw	r26, 0x01	; 1
     2a2:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     2a4:	7e 9f       	mul	r23, r30
     2a6:	f0 01       	movw	r30, r0
     2a8:	11 24       	eor	r1, r1
     2aa:	e5 52       	subi	r30, 0x25	; 37
     2ac:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     2ae:	81 81       	ldd	r24, Z+1	; 0x01
     2b0:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     2b2:	80 81       	ld	r24, Z
     2b4:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     2b6:	70 93 da 02 	sts	0x02DA, r23

  }

  kernel.nextHit = nextHit;  
     2ba:	a0 92 15 03 	sts	0x0315, r10
     2be:	b0 92 16 03 	sts	0x0316, r11
     2c2:	c0 92 17 03 	sts	0x0317, r12
     2c6:	d0 92 18 03 	sts	0x0318, r13

  now = (kernel.cycles << 16) + TCNT1;
     2ca:	20 91 84 00 	lds	r18, 0x0084
     2ce:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	80 91 11 03 	lds	r24, 0x0311
     2da:	90 91 12 03 	lds	r25, 0x0312
     2de:	a0 91 13 03 	lds	r26, 0x0313
     2e2:	b0 91 14 03 	lds	r27, 0x0314
     2e6:	dc 01       	movw	r26, r24
     2e8:	99 27       	eor	r25, r25
     2ea:	88 27       	eor	r24, r24
     2ec:	28 0f       	add	r18, r24
     2ee:	39 1f       	adc	r19, r25
     2f0:	4a 1f       	adc	r20, r26
     2f2:	5b 1f       	adc	r21, r27
     2f4:	d6 01       	movw	r26, r12
     2f6:	c5 01       	movw	r24, r10
     2f8:	82 1b       	sub	r24, r18
     2fa:	93 0b       	sbc	r25, r19
     2fc:	a4 0b       	sbc	r26, r20
     2fe:	b5 0b       	sbc	r27, r21
     300:	9c 01       	movw	r18, r24
     302:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     304:	84 30       	cpi	r24, 0x04	; 4
     306:	91 05       	cpc	r25, r1
     308:	a1 05       	cpc	r26, r1
     30a:	b1 05       	cpc	r27, r1
     30c:	24 f4       	brge	.+8      	; 0x316 <__vector_13+0x1e8>
     30e:	24 e0       	ldi	r18, 0x04	; 4
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     316:	80 91 84 00 	lds	r24, 0x0084
     31a:	90 91 85 00 	lds	r25, 0x0085
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	82 0f       	add	r24, r18
     324:	93 1f       	adc	r25, r19
     326:	a4 1f       	adc	r26, r20
     328:	b5 1f       	adc	r27, r21
     32a:	80 50       	subi	r24, 0x00	; 0
     32c:	90 40       	sbci	r25, 0x00	; 0
     32e:	a1 40       	sbci	r26, 0x01	; 1
     330:	b0 40       	sbci	r27, 0x00	; 0
     332:	38 f4       	brcc	.+14     	; 0x342 <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     334:	80 91 84 00 	lds	r24, 0x0084
     338:	90 91 85 00 	lds	r25, 0x0085
     33c:	82 0f       	add	r24, r18
     33e:	93 1f       	adc	r25, r19
     340:	0e c0       	rjmp	.+28     	; 0x35e <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     342:	80 91 84 00 	lds	r24, 0x0084
     346:	90 91 85 00 	lds	r25, 0x0085
     34a:	8c 5f       	subi	r24, 0xFC	; 252
     34c:	9f 4f       	sbci	r25, 0xFF	; 255
     34e:	28 f4       	brcc	.+10     	; 0x35a <__vector_13+0x22c>
    OCR1A = 0x0000;
     350:	10 92 89 00 	sts	0x0089, r1
     354:	10 92 88 00 	sts	0x0088, r1
     358:	06 c0       	rjmp	.+12     	; 0x366 <__vector_13+0x238>
  } else {
    OCR1A = 4;
     35a:	84 e0       	ldi	r24, 0x04	; 4
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	90 93 89 00 	sts	0x0089, r25
     362:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	80 93 6f 00 	sts	0x006F, r24
}
     36c:	ff 91       	pop	r31
     36e:	ef 91       	pop	r30
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	bf 91       	pop	r27
     376:	af 91       	pop	r26
     378:	9f 91       	pop	r25
     37a:	8f 91       	pop	r24
     37c:	7f 91       	pop	r23
     37e:	6f 91       	pop	r22
     380:	5f 91       	pop	r21
     382:	4f 91       	pop	r20
     384:	3f 91       	pop	r19
     386:	2f 91       	pop	r18
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	cf 90       	pop	r12
     394:	bf 90       	pop	r11
     396:	af 90       	pop	r10
     398:	9f 90       	pop	r9
     39a:	8f 90       	pop	r8
     39c:	7f 90       	pop	r7
     39e:	6f 90       	pop	r6
     3a0:	5f 90       	pop	r5
     3a2:	4f 90       	pop	r4
     3a4:	3f 90       	pop	r3
     3a6:	2f 90       	pop	r2
     3a8:	0f 90       	pop	r0
     3aa:	0b be       	out	0x3b, r0	; 59
     3ac:	0f 90       	pop	r0
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	0f 90       	pop	r0
     3b2:	1f 90       	pop	r1
     3b4:	18 95       	reti

000003b6 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     3b6:	10 92 85 00 	sts	0x0085, r1
     3ba:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     3be:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     3c2:	25 e0       	ldi	r18, 0x05	; 5
     3c4:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     3c8:	22 e0       	ldi	r18, 0x02	; 2
     3ca:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     3ce:	2f ef       	ldi	r18, 0xFF	; 255
     3d0:	30 e4       	ldi	r19, 0x40	; 64
     3d2:	28 1b       	sub	r18, r24
     3d4:	39 0b       	sbc	r19, r25
     3d6:	30 93 10 03 	sts	0x0310, r19
     3da:	20 93 0f 03 	sts	0x030F, r18
  kernel.nbrOfTasks = 0;
     3de:	10 92 d9 02 	sts	0x02D9, r1
  kernel.running = 0;
     3e2:	10 92 da 02 	sts	0x02DA, r1

  kernel.cycles = 0x0000;
     3e6:	10 92 11 03 	sts	0x0311, r1
     3ea:	10 92 12 03 	sts	0x0312, r1
     3ee:	10 92 13 03 	sts	0x0313, r1
     3f2:	10 92 14 03 	sts	0x0314, r1
  kernel.nextHit = 0x7FFFFFFF;
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	9f ef       	ldi	r25, 0xFF	; 255
     3fa:	af ef       	ldi	r26, 0xFF	; 255
     3fc:	bf e7       	ldi	r27, 0x7F	; 127
     3fe:	80 93 15 03 	sts	0x0315, r24
     402:	90 93 16 03 	sts	0x0316, r25
     406:	a0 93 17 03 	sts	0x0317, r26
     40a:	b0 93 18 03 	sts	0x0318, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     40e:	80 93 e1 02 	sts	0x02E1, r24
     412:	90 93 e2 02 	sts	0x02E2, r25
     416:	a0 93 e3 02 	sts	0x02E3, r26
     41a:	b0 93 e4 02 	sts	0x02E4, r27
  kernel.tasks[0].release = 0x00000000;
     41e:	10 92 dd 02 	sts	0x02DD, r1
     422:	10 92 de 02 	sts	0x02DE, r1
     426:	10 92 df 02 	sts	0x02DF, r1
     42a:	10 92 e0 02 	sts	0x02E0, r1

  sei(); /* set enabled interrupts */
     42e:	78 94       	sei
}
     430:	08 95       	ret

00000432 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     432:	8f 92       	push	r8
     434:	9f 92       	push	r9
     436:	af 92       	push	r10
     438:	bf 92       	push	r11
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	49 01       	movw	r8, r18
     44c:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     44e:	f8 94       	cli

  ++kernel.nbrOfTasks;
     450:	20 91 d9 02 	lds	r18, 0x02D9
     454:	2f 5f       	subi	r18, 0xFF	; 255
     456:	20 93 d9 02 	sts	0x02D9, r18

  sp = kernel.memptr;
     45a:	c0 91 0f 03 	lds	r28, 0x030F
     45e:	d0 91 10 03 	lds	r29, 0x0310
  kernel.memptr -= stacksize;  // decrease free mem ptr
     462:	9e 01       	movw	r18, r28
     464:	26 1b       	sub	r18, r22
     466:	37 0b       	sbc	r19, r23
     468:	30 93 10 03 	sts	0x0310, r19
     46c:	20 93 0f 03 	sts	0x030F, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     470:	88 83       	st	Y, r24
     472:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     474:	92 93       	st	-Z, r25
     476:	31 97       	sbiw	r30, 0x01	; 1
     478:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     47a:	ce 01       	movw	r24, r28
     47c:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     47e:	1c 92       	st	X, r1
     480:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     482:	a8 17       	cp	r26, r24
     484:	b9 07       	cpc	r27, r25
     486:	d9 f7       	brne	.-10     	; 0x47e <trtCreateTask+0x4c>
     488:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     48a:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     48c:	d2 92       	st	-Z, r13
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     492:	9e 01       	movw	r18, r28
     494:	24 52       	subi	r18, 0x24	; 36
     496:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     498:	1c 92       	st	X, r1
     49a:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     49c:	a2 17       	cp	r26, r18
     49e:	b3 07       	cpc	r27, r19
     4a0:	d9 f7       	brne	.-10     	; 0x498 <trtCreateTask+0x66>
     4a2:	9f 01       	movw	r18, r30
     4a4:	26 50       	subi	r18, 0x06	; 6
     4a6:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     4a8:	e0 91 d9 02 	lds	r30, 0x02D9
     4ac:	8b e0       	ldi	r24, 0x0B	; 11
     4ae:	e8 9f       	mul	r30, r24
     4b0:	f0 01       	movw	r30, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	e5 52       	subi	r30, 0x25	; 37
     4b6:	fd 4f       	sbci	r31, 0xFD	; 253
  ///*
  t->release = release;
     4b8:	82 82       	std	Z+2, r8	; 0x02
     4ba:	93 82       	std	Z+3, r9	; 0x03
     4bc:	a4 82       	std	Z+4, r10	; 0x04
     4be:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     4c0:	e6 82       	std	Z+6, r14	; 0x06
     4c2:	f7 82       	std	Z+7, r15	; 0x07
     4c4:	00 87       	std	Z+8, r16	; 0x08
     4c6:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	82 87       	std	Z+10, r24	; 0x0a
  //*/
  t->spl = lo8(sp);       // store stack pointer
     4cc:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     4ce:	31 83       	std	Z+1, r19	; 0x01
  

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     4d0:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>

}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	08 95       	ret

000004ee <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     4ee:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     4f0:	e9 ed       	ldi	r30, 0xD9	; 217
     4f2:	f2 e0       	ldi	r31, 0x02	; 2
     4f4:	e8 0f       	add	r30, r24
     4f6:	f1 1d       	adc	r31, r1
     4f8:	65 a7       	std	Z+45, r22	; 0x2d
  
  sei(); // set enabled interrupts;
     4fa:	78 94       	sei
}
     4fc:	08 95       	ret

000004fe <trtWait>:

void trtWait(uint8_t semnbr) {
     4fe:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     500:	20 91 da 02 	lds	r18, 0x02DA

  cli(); // disable interrupts
     504:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     506:	e8 2f       	mov	r30, r24
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	ea 5f       	subi	r30, 0xFA	; 250
     50c:	fc 4f       	sbci	r31, 0xFC	; 252
  if ((*s) > 0) {
     50e:	80 81       	ld	r24, Z
     510:	88 23       	and	r24, r24
     512:	19 f0       	breq	.+6      	; 0x51a <trtWait+0x1c>
    (*s)--;
     514:	81 50       	subi	r24, 0x01	; 1
     516:	80 83       	st	Z, r24
     518:	10 c0       	rjmp	.+32     	; 0x53a <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	8b e0       	ldi	r24, 0x0B	; 11
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	28 9f       	mul	r18, r24
     522:	f0 01       	movw	r30, r0
     524:	29 9f       	mul	r18, r25
     526:	f0 0d       	add	r31, r0
     528:	38 9f       	mul	r19, r24
     52a:	f0 0d       	add	r31, r0
     52c:	11 24       	eor	r1, r1
     52e:	e5 52       	subi	r30, 0x25	; 37
     530:	fd 4f       	sbci	r31, 0xFD	; 253
     532:	4e 5f       	subi	r20, 0xFE	; 254
     534:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     536:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
  }

  sei(); // reenable interrupts
     53a:	78 94       	sei
}
     53c:	08 95       	ret

0000053e <trtSignal>:

void trtSignal(uint8_t semnbr) {
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     546:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     548:	00 91 d9 02 	lds	r16, 0x02D9
     54c:	e1 e0       	ldi	r30, 0x01	; 1
     54e:	4f ef       	ldi	r20, 0xFF	; 255
     550:	5f ef       	ldi	r21, 0xFF	; 255
     552:	6f ef       	ldi	r22, 0xFF	; 255
     554:	7f ef       	ldi	r23, 0xFF	; 255
     556:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     558:	8b e0       	ldi	r24, 0x0B	; 11
     55a:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     55c:	21 2f       	mov	r18, r17
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	2e 5f       	subi	r18, 0xFE	; 254
     562:	3f 4f       	sbci	r19, 0xFF	; 255
     564:	1e c0       	rjmp	.+60     	; 0x5a2 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     566:	ef 9d       	mul	r30, r15
     568:	d0 01       	movw	r26, r0
     56a:	11 24       	eor	r1, r1
     56c:	a5 52       	subi	r26, 0x25	; 37
     56e:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     570:	1a 96       	adiw	r26, 0x0a	; 10
     572:	8c 91       	ld	r24, X
     574:	1a 97       	sbiw	r26, 0x0a	; 10
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	82 17       	cp	r24, r18
     57a:	93 07       	cpc	r25, r19
     57c:	69 f4       	brne	.+26     	; 0x598 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     57e:	16 96       	adiw	r26, 0x06	; 6
     580:	8d 91       	ld	r24, X+
     582:	9d 91       	ld	r25, X+
     584:	0d 90       	ld	r0, X+
     586:	bc 91       	ld	r27, X
     588:	a0 2d       	mov	r26, r0
     58a:	48 17       	cp	r20, r24
     58c:	59 07       	cpc	r21, r25
     58e:	6a 07       	cpc	r22, r26
     590:	7b 07       	cpc	r23, r27
     592:	10 f0       	brcs	.+4      	; 0x598 <trtSignal+0x5a>
     594:	fe 2f       	mov	r31, r30
     596:	02 c0       	rjmp	.+4      	; 0x59c <trtSignal+0x5e>
     598:	db 01       	movw	r26, r22
     59a:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     59c:	ef 5f       	subi	r30, 0xFF	; 255
     59e:	ac 01       	movw	r20, r24
     5a0:	bd 01       	movw	r22, r26
     5a2:	0e 17       	cp	r16, r30
     5a4:	00 f7       	brcc	.-64     	; 0x566 <trtSignal+0x28>
  minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     5a6:	ff 23       	and	r31, r31
     5a8:	41 f4       	brne	.+16     	; 0x5ba <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     5aa:	e1 2f       	mov	r30, r17
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	e8 52       	subi	r30, 0x28	; 40
     5b0:	fd 4f       	sbci	r31, 0xFD	; 253
     5b2:	86 a5       	ldd	r24, Z+46	; 0x2e
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	86 a7       	std	Z+46, r24	; 0x2e
     5b8:	11 c0       	rjmp	.+34     	; 0x5dc <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     5ba:	2f 2f       	mov	r18, r31
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	8b e0       	ldi	r24, 0x0B	; 11
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	28 9f       	mul	r18, r24
     5c4:	f0 01       	movw	r30, r0
     5c6:	29 9f       	mul	r18, r25
     5c8:	f0 0d       	add	r31, r0
     5ca:	38 9f       	mul	r19, r24
     5cc:	f0 0d       	add	r31, r0
     5ce:	11 24       	eor	r1, r1
     5d0:	e7 52       	subi	r30, 0x27	; 39
     5d2:	fd 4f       	sbci	r31, 0xFD	; 253
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5d8:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
  }

  sei(); // reenable interrupts
     5dc:	78 94       	sei
}
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	08 95       	ret

000005e6 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     5e6:	20 91 84 00 	lds	r18, 0x0084
     5ea:	30 91 85 00 	lds	r19, 0x0085
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	80 91 11 03 	lds	r24, 0x0311
     5f6:	90 91 12 03 	lds	r25, 0x0312
     5fa:	a0 91 13 03 	lds	r26, 0x0313
     5fe:	b0 91 14 03 	lds	r27, 0x0314
     602:	dc 01       	movw	r26, r24
     604:	99 27       	eor	r25, r25
     606:	88 27       	eor	r24, r24
     608:	28 0f       	add	r18, r24
     60a:	39 1f       	adc	r19, r25
     60c:	4a 1f       	adc	r20, r26
     60e:	5b 1f       	adc	r21, r27
}
     610:	b9 01       	movw	r22, r18
     612:	ca 01       	movw	r24, r20
     614:	08 95       	ret

00000616 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     616:	e0 91 da 02 	lds	r30, 0x02DA
     61a:	ab e0       	ldi	r26, 0x0B	; 11
     61c:	ea 9f       	mul	r30, r26
     61e:	f0 01       	movw	r30, r0
     620:	11 24       	eor	r1, r1
     622:	e5 52       	subi	r30, 0x25	; 37
     624:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     626:	f8 94       	cli

  t->state = TIMEQ;
     628:	a2 e0       	ldi	r26, 0x02	; 2
     62a:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     62c:	62 83       	std	Z+2, r22	; 0x02
     62e:	73 83       	std	Z+3, r23	; 0x03
     630:	84 83       	std	Z+4, r24	; 0x04
     632:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     634:	26 83       	std	Z+6, r18	; 0x06
     636:	37 83       	std	Z+7, r19	; 0x07
     638:	40 87       	std	Z+8, r20	; 0x08
     63a:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     63c:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
}
     640:	08 95       	ret

00000642 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     642:	80 91 da 02 	lds	r24, 0x02DA
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	2b e0       	ldi	r18, 0x0B	; 11
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	82 9f       	mul	r24, r18
     64e:	f0 01       	movw	r30, r0
     650:	83 9f       	mul	r24, r19
     652:	f0 0d       	add	r31, r0
     654:	92 9f       	mul	r25, r18
     656:	f0 0d       	add	r31, r0
     658:	11 24       	eor	r1, r1
     65a:	e7 52       	subi	r30, 0x27	; 39
     65c:	fd 4f       	sbci	r31, 0xFD	; 253
     65e:	df 01       	movw	r26, r30
     660:	14 96       	adiw	r26, 0x04	; 4
     662:	64 81       	ldd	r22, Z+4	; 0x04
     664:	11 96       	adiw	r26, 0x01	; 1
     666:	7c 91       	ld	r23, X
     668:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     66a:	12 96       	adiw	r26, 0x02	; 2
     66c:	8c 91       	ld	r24, X
     66e:	12 97       	sbiw	r26, 0x02	; 2
     670:	13 96       	adiw	r26, 0x03	; 3
     672:	9c 91       	ld	r25, X
     674:	08 95       	ret

00000676 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     676:	80 91 da 02 	lds	r24, 0x02DA
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2b e0       	ldi	r18, 0x0B	; 11
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	82 9f       	mul	r24, r18
     682:	f0 01       	movw	r30, r0
     684:	83 9f       	mul	r24, r19
     686:	f0 0d       	add	r31, r0
     688:	92 9f       	mul	r25, r18
     68a:	f0 0d       	add	r31, r0
     68c:	11 24       	eor	r1, r1
     68e:	e7 52       	subi	r30, 0x27	; 39
     690:	fd 4f       	sbci	r31, 0xFD	; 253
     692:	df 01       	movw	r26, r30
     694:	18 96       	adiw	r26, 0x08	; 8
     696:	60 85       	ldd	r22, Z+8	; 0x08
     698:	11 96       	adiw	r26, 0x01	; 1
     69a:	7c 91       	ld	r23, X
     69c:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     69e:	12 96       	adiw	r26, 0x02	; 2
     6a0:	8c 91       	ld	r24, X
     6a2:	12 97       	sbiw	r26, 0x02	; 2
     6a4:	13 96       	adiw	r26, 0x03	; 3
     6a6:	9c 91       	ld	r25, X
     6a8:	08 95       	ret

000006aa <trtTerminate>:

void trtTerminate(void) {

  cli();
     6aa:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     6ac:	80 91 da 02 	lds	r24, 0x02DA
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	2b e0       	ldi	r18, 0x0B	; 11
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	82 9f       	mul	r24, r18
     6b8:	f0 01       	movw	r30, r0
     6ba:	83 9f       	mul	r24, r19
     6bc:	f0 0d       	add	r31, r0
     6be:	92 9f       	mul	r25, r18
     6c0:	f0 0d       	add	r31, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	e7 52       	subi	r30, 0x27	; 39
     6c6:	fd 4f       	sbci	r31, 0xFD	; 253
     6c8:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     6ca:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
}
     6ce:	08 95       	ret

000006d0 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     6d0:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     6d2:	e8 2f       	mov	r30, r24
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	ea 5f       	subi	r30, 0xFA	; 250
     6d8:	fc 4f       	sbci	r31, 0xFC	; 252
  temp = *s ;
     6da:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     6dc:	88 23       	and	r24, r24
     6de:	19 f0       	breq	.+6      	; 0x6e6 <trtAccept+0x16>
    (*s)--;
     6e0:	81 50       	subi	r24, 0x01	; 1
     6e2:	80 83       	st	Z, r24
     6e4:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     6e6:	78 94       	sei
  return temp ;
}
     6e8:	08 95       	ret

000006ea <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     6ea:	87 e6       	ldi	r24, 0x67	; 103
     6ec:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     6f0:	e1 ec       	ldi	r30, 0xC1	; 193
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	88 e1       	ldi	r24, 0x18	; 24
     6f6:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     6f8:	10 92 f3 01 	sts	0x01F3, r1
     6fc:	10 92 f2 01 	sts	0x01F2, r1
  tx_out = 0;
     700:	10 92 f5 01 	sts	0x01F5, r1
     704:	10 92 f4 01 	sts	0x01F4, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     708:	80 81       	ld	r24, Z
     70a:	80 68       	ori	r24, 0x80	; 128
     70c:	80 83       	st	Z, r24
}
     70e:	08 95       	ret

00000710 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	0b b6       	in	r0, 0x3b	; 59
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	8f 93       	push	r24
     724:	9f 93       	push	r25
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     72a:	20 91 f2 01 	lds	r18, 0x01F2
     72e:	30 91 f3 01 	lds	r19, 0x01F3
     732:	80 91 f4 01 	lds	r24, 0x01F4
     736:	90 91 f5 01 	lds	r25, 0x01F5
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	31 f4       	brne	.+12     	; 0x74c <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     740:	80 91 c1 00 	lds	r24, 0x00C1
     744:	8f 7d       	andi	r24, 0xDF	; 223
     746:	80 93 c1 00 	sts	0x00C1, r24
     74a:	1d c0       	rjmp	.+58     	; 0x786 <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     74c:	e0 91 f4 01 	lds	r30, 0x01F4
     750:	f0 91 f5 01 	lds	r31, 0x01F5
     754:	ea 50       	subi	r30, 0x0A	; 10
     756:	fe 4f       	sbci	r31, 0xFE	; 254
     758:	80 81       	ld	r24, Z
     75a:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     75e:	80 91 f4 01 	lds	r24, 0x01F4
     762:	90 91 f5 01 	lds	r25, 0x01F5
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	90 93 f5 01 	sts	0x01F5, r25
     76c:	80 93 f4 01 	sts	0x01F4, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     770:	80 91 f4 01 	lds	r24, 0x01F4
     774:	90 91 f5 01 	lds	r25, 0x01F5
     778:	88 3c       	cpi	r24, 0xC8	; 200
     77a:	91 05       	cpc	r25, r1
     77c:	21 f4       	brne	.+8      	; 0x786 <__vector_21+0x76>
     77e:	10 92 f5 01 	sts	0x01F5, r1
     782:	10 92 f4 01 	sts	0x01F4, r1
  }
}
     786:	ff 91       	pop	r31
     788:	ef 91       	pop	r30
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	3f 91       	pop	r19
     790:	2f 91       	pop	r18
     792:	0f 90       	pop	r0
     794:	0b be       	out	0x3b, r0	; 59
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	0f 90       	pop	r0
     79c:	1f 90       	pop	r1
     79e:	18 95       	reti

000007a0 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     7a0:	1f 93       	push	r17
     7a2:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     7a4:	8a 30       	cpi	r24, 0x0A	; 10
     7a6:	19 f4       	brne	.+6      	; 0x7ae <uart_putchar+0xe>
     7a8:	8d e0       	ldi	r24, 0x0D	; 13
     7aa:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
  char i = tx_in;
     7ae:	80 91 f2 01 	lds	r24, 0x01F2
     7b2:	90 91 f3 01 	lds	r25, 0x01F3
  i++;
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     7b8:	88 3c       	cpi	r24, 0xC8	; 200
     7ba:	09 f4       	brne	.+2      	; 0x7be <uart_putchar+0x1e>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     7be:	e0 91 f2 01 	lds	r30, 0x01F2
     7c2:	f0 91 f3 01 	lds	r31, 0x01F3
     7c6:	ea 50       	subi	r30, 0x0A	; 10
     7c8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ca:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     7cc:	28 2f       	mov	r18, r24
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	80 91 f4 01 	lds	r24, 0x01F4
     7d4:	90 91 f5 01 	lds	r25, 0x01F5
     7d8:	28 17       	cp	r18, r24
     7da:	39 07       	cpc	r19, r25
     7dc:	c9 f3       	breq	.-14     	; 0x7d0 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     7de:	30 93 f3 01 	sts	0x01F3, r19
     7e2:	20 93 f2 01 	sts	0x01F2, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     7e6:	80 91 c1 00 	lds	r24, 0x00C1
     7ea:	80 62       	ori	r24, 0x20	; 32
     7ec:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	1f 91       	pop	r17
     7f6:	08 95       	ret

000007f8 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	0b b6       	in	r0, 0x3b	; 59
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
	trt_rx_c = UDR0;
     81e:	80 91 c6 00 	lds	r24, 0x00C6
     822:	80 93 19 03 	sts	0x0319, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
}
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	bf 91       	pop	r27
     832:	af 91       	pop	r26
     834:	9f 91       	pop	r25
     836:	8f 91       	pop	r24
     838:	7f 91       	pop	r23
     83a:	6f 91       	pop	r22
     83c:	5f 91       	pop	r21
     83e:	4f 91       	pop	r20
     840:	3f 91       	pop	r19
     842:	2f 91       	pop	r18
     844:	0f 90       	pop	r0
     846:	0b be       	out	0x3b, r0	; 59
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     860:	80 91 a0 01 	lds	r24, 0x01A0
     864:	90 91 a1 01 	lds	r25, 0x01A1
     868:	89 2b       	or	r24, r25
     86a:	09 f0       	breq	.+2      	; 0x86e <uart_getchar+0x1c>
     86c:	a1 c0       	rjmp	.+322    	; 0x9b0 <uart_getchar+0x15e>
     86e:	02 ea       	ldi	r16, 0xA2	; 162
     870:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	if (UCSR0A & _BV(FE0))
     878:	80 91 c0 00 	lds	r24, 0x00C0
     87c:	84 ff       	sbrs	r24, 4
     87e:	03 c0       	rjmp	.+6      	; 0x886 <uart_getchar+0x34>
     880:	2e ef       	ldi	r18, 0xFE	; 254
     882:	3f ef       	ldi	r19, 0xFF	; 255
     884:	a9 c0       	rjmp	.+338    	; 0x9d8 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     886:	80 91 c0 00 	lds	r24, 0x00C0
     88a:	83 fd       	sbrc	r24, 3
     88c:	a3 c0       	rjmp	.+326    	; 0x9d4 <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     88e:	90 91 19 03 	lds	r25, 0x0319

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     892:	9d 30       	cpi	r25, 0x0D	; 13
     894:	11 f0       	breq	.+4      	; 0x89a <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     896:	9a 30       	cpi	r25, 0x0A	; 10
     898:	81 f4       	brne	.+32     	; 0x8ba <uart_getchar+0x68>
	  {
	    *cp = c;
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	f8 01       	movw	r30, r16
     89e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     8a0:	b7 01       	movw	r22, r14
     8a2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
	    rxp = b;
     8a6:	82 ea       	ldi	r24, 0xA2	; 162
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	90 93 a1 01 	sts	0x01A1, r25
     8ae:	80 93 a0 01 	sts	0x01A0, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
     8b8:	7b c0       	rjmp	.+246    	; 0x9b0 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     8ba:	99 30       	cpi	r25, 0x09	; 9
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <uart_getchar+0x6e>
     8be:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     8c0:	89 2f       	mov	r24, r25
     8c2:	80 52       	subi	r24, 0x20	; 32
     8c4:	8f 35       	cpi	r24, 0x5F	; 95
     8c6:	10 f0       	brcs	.+4      	; 0x8cc <uart_getchar+0x7a>
     8c8:	90 3a       	cpi	r25, 0xA0	; 160
     8ca:	70 f0       	brcs	.+28     	; 0x8e8 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     8cc:	f1 e0       	ldi	r31, 0x01	; 1
     8ce:	01 3f       	cpi	r16, 0xF1	; 241
     8d0:	1f 07       	cpc	r17, r31
     8d2:	11 f4       	brne	.+4      	; 0x8d8 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     8d4:	87 e0       	ldi	r24, 0x07	; 7
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     8d8:	f8 01       	movw	r30, r16
     8da:	91 93       	st	Z+, r25
     8dc:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     8de:	89 2f       	mov	r24, r25
     8e0:	b7 01       	movw	r22, r14
     8e2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     8e6:	c5 cf       	rjmp	.-118    	; 0x872 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     8e8:	92 31       	cpi	r25, 0x12	; 18
     8ea:	39 f1       	breq	.+78     	; 0x93a <uart_getchar+0xe8>
     8ec:	93 31       	cpi	r25, 0x13	; 19
     8ee:	38 f4       	brcc	.+14     	; 0x8fe <uart_getchar+0xac>
     8f0:	93 30       	cpi	r25, 0x03	; 3
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <uart_getchar+0xa4>
     8f4:	6f c0       	rjmp	.+222    	; 0x9d4 <uart_getchar+0x182>
     8f6:	98 30       	cpi	r25, 0x08	; 8
     8f8:	09 f0       	breq	.+2      	; 0x8fc <uart_getchar+0xaa>
     8fa:	bb cf       	rjmp	.-138    	; 0x872 <uart_getchar+0x20>
     8fc:	09 c0       	rjmp	.+18     	; 0x910 <uart_getchar+0xbe>
     8fe:	97 31       	cpi	r25, 0x17	; 23
     900:	09 f4       	brne	.+2      	; 0x904 <uart_getchar+0xb2>
     902:	4b c0       	rjmp	.+150    	; 0x99a <uart_getchar+0x148>
     904:	9f 37       	cpi	r25, 0x7F	; 127
     906:	21 f0       	breq	.+8      	; 0x910 <uart_getchar+0xbe>
     908:	95 31       	cpi	r25, 0x15	; 21
     90a:	09 f0       	breq	.+2      	; 0x90e <uart_getchar+0xbc>
     90c:	b2 cf       	rjmp	.-156    	; 0x872 <uart_getchar+0x20>
     90e:	32 c0       	rjmp	.+100    	; 0x974 <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	02 3a       	cpi	r16, 0xA2	; 162
     914:	1f 07       	cpc	r17, r31
     916:	09 f0       	breq	.+2      	; 0x91a <uart_getchar+0xc8>
     918:	08 f4       	brcc	.+2      	; 0x91c <uart_getchar+0xca>
     91a:	ab cf       	rjmp	.-170    	; 0x872 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     91c:	88 e0       	ldi	r24, 0x08	; 8
     91e:	b7 01       	movw	r22, r14
     920:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	b7 01       	movw	r22, r14
     928:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     92c:	88 e0       	ldi	r24, 0x08	; 8
     92e:	b7 01       	movw	r22, r14
     930:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		cp--;
     934:	01 50       	subi	r16, 0x01	; 1
     936:	10 40       	sbci	r17, 0x00	; 0
     938:	9c cf       	rjmp	.-200    	; 0x872 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     93a:	8d e0       	ldi	r24, 0x0D	; 13
     93c:	b7 01       	movw	r22, r14
     93e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     942:	c2 ea       	ldi	r28, 0xA2	; 162
     944:	d1 e0       	ldi	r29, 0x01	; 1
     946:	04 c0       	rjmp	.+8      	; 0x950 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     948:	89 91       	ld	r24, Y+
     94a:	b7 01       	movw	r22, r14
     94c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     950:	c0 17       	cp	r28, r16
     952:	d1 07       	cpc	r29, r17
     954:	c8 f3       	brcs	.-14     	; 0x948 <uart_getchar+0xf6>
     956:	8d cf       	rjmp	.-230    	; 0x872 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     958:	88 e0       	ldi	r24, 0x08	; 8
     95a:	b7 01       	movw	r22, r14
     95c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     960:	80 e2       	ldi	r24, 0x20	; 32
     962:	b7 01       	movw	r22, r14
     964:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	b7 01       	movw	r22, r14
     96c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		cp--;
     970:	01 50       	subi	r16, 0x01	; 1
     972:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	02 3a       	cpi	r16, 0xA2	; 162
     978:	18 07       	cpc	r17, r24
     97a:	09 f0       	breq	.+2      	; 0x97e <uart_getchar+0x12c>
     97c:	68 f7       	brcc	.-38     	; 0x958 <uart_getchar+0x106>
     97e:	79 cf       	rjmp	.-270    	; 0x872 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     980:	88 e0       	ldi	r24, 0x08	; 8
     982:	b7 01       	movw	r22, r14
     984:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     988:	80 e2       	ldi	r24, 0x20	; 32
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     990:	88 e0       	ldi	r24, 0x08	; 8
     992:	b7 01       	movw	r22, r14
     994:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     998:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     99a:	e1 e0       	ldi	r30, 0x01	; 1
     99c:	02 3a       	cpi	r16, 0xA2	; 162
     99e:	1e 07       	cpc	r17, r30
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <uart_getchar+0x152>
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <uart_getchar+0x154>
     9a4:	66 cf       	rjmp	.-308    	; 0x872 <uart_getchar+0x20>
     9a6:	e8 01       	movw	r28, r16
     9a8:	8a 91       	ld	r24, -Y
     9aa:	80 32       	cpi	r24, 0x20	; 32
     9ac:	49 f7       	brne	.-46     	; 0x980 <uart_getchar+0x12e>
     9ae:	61 cf       	rjmp	.-318    	; 0x872 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     9b0:	e0 91 a0 01 	lds	r30, 0x01A0
     9b4:	f0 91 a1 01 	lds	r31, 0x01A1
     9b8:	81 91       	ld	r24, Z+
     9ba:	f0 93 a1 01 	sts	0x01A1, r31
     9be:	e0 93 a0 01 	sts	0x01A0, r30
  if (c == '\n')
     9c2:	8a 30       	cpi	r24, 0x0A	; 10
     9c4:	21 f4       	brne	.+8      	; 0x9ce <uart_getchar+0x17c>
    rxp = 0;
     9c6:	10 92 a1 01 	sts	0x01A1, r1
     9ca:	10 92 a0 01 	sts	0x01A0, r1

  return c;
     9ce:	28 2f       	mov	r18, r24
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <uart_getchar+0x186>
     9d4:	2f ef       	ldi	r18, 0xFF	; 255
     9d6:	3f ef       	ldi	r19, 0xFF	; 255
}
     9d8:	c9 01       	movw	r24, r18
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret

000009e8 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     9e8:	28 2f       	mov	r18, r24
     9ea:	20 7f       	andi	r18, 0xF0	; 240
     9ec:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     9ee:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     9f0:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9f2:	20 e4       	ldi	r18, 0x40	; 64
     9f4:	3f e1       	ldi	r19, 0x1F	; 31
     9f6:	f9 01       	movw	r30, r18
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     9fc:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     9fe:	40 98       	cbi	0x08, 0	; 8
     a00:	f9 01       	movw	r30, r18
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	f1 f7       	brne	.-4      	; 0xa02 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	74 e0       	ldi	r23, 0x04	; 4
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	7a 95       	dec	r23
     a10:	e1 f7       	brne	.-8      	; 0xa0a <LCDsendChar+0x22>
     a12:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     a14:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     a16:	42 9a       	sbi	0x08, 2	; 8
     a18:	c9 01       	movw	r24, r18
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     a1e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     a20:	40 98       	cbi	0x08, 0	; 8
     a22:	c9 01       	movw	r24, r18
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     a28:	08 95       	ret

00000a2a <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     a2a:	28 2f       	mov	r18, r24
     a2c:	20 7f       	andi	r18, 0xF0	; 240
     a2e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     a30:	42 9a       	sbi	0x08, 2	; 8
     a32:	20 e4       	ldi	r18, 0x40	; 64
     a34:	3f e1       	ldi	r19, 0x1F	; 31
     a36:	f9 01       	movw	r30, r18
     a38:	31 97       	sbiw	r30, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     a3c:	42 98       	cbi	0x08, 2	; 8
     a3e:	f9 01       	movw	r30, r18
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	e4 e0       	ldi	r30, 0x04	; 4
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	ea 95       	dec	r30
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <LCDsendCommand+0x1e>
     a50:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     a52:	42 9a       	sbi	0x08, 2	; 8
     a54:	c9 01       	movw	r24, r18
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     a5a:	42 98       	cbi	0x08, 2	; 8
     a5c:	c9 01       	movw	r24, r18
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     a62:	08 95       	ret

00000a64 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     a6a:	08 95       	ret

00000a6c <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     a72:	08 95       	ret

00000a74 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	49 f0       	breq	.+18     	; 0xa94 <LCDstring+0x20>
     a82:	ec 01       	movw	r28, r24
     a84:	10 e0       	ldi	r17, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     a88:	89 91       	ld	r24, Y+
     a8a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     a8e:	1f 5f       	subi	r17, 0xFF	; 255
     a90:	10 17       	cp	r17, r16
     a92:	d0 f3       	brcs	.-12     	; 0xa88 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     a9e:	62 30       	cpi	r22, 0x02	; 2
     aa0:	31 f0       	breq	.+12     	; 0xaae <LCDGotoXY+0x10>
     aa2:	63 30       	cpi	r22, 0x03	; 3
     aa4:	31 f0       	breq	.+12     	; 0xab2 <LCDGotoXY+0x14>
     aa6:	61 30       	cpi	r22, 0x01	; 1
     aa8:	29 f4       	brne	.+10     	; 0xab4 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     aaa:	80 5c       	subi	r24, 0xC0	; 192
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     aae:	8c 5e       	subi	r24, 0xEC	; 236
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     ab2:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     ab4:	80 68       	ori	r24, 0x80	; 128
     ab6:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
	
}
     aba:	08 95       	ret

00000abc <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ec 01       	movw	r28, r24
     ac4:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     ac6:	64 2f       	mov	r22, r20
     ac8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
     acc:	10 e0       	ldi	r17, 0x00	; 0
     ace:	03 c0       	rjmp	.+6      	; 0xad6 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     ad0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     ad4:	1f 5f       	subi	r17, 0xFF	; 255
     ad6:	fe 01       	movw	r30, r28
     ad8:	e1 0f       	add	r30, r17
     ada:	f1 1d       	adc	r31, r1
     adc:	84 91       	lpm	r24, Z+
     ade:	88 23       	and	r24, r24
     ae0:	b9 f7       	brne	.-18     	; 0xad0 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	08 95       	ret

00000aea <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	7c 01       	movw	r14, r24
     af8:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     afa:	11 0f       	add	r17, r17
     afc:	11 0f       	add	r17, r17
     afe:	11 0f       	add	r17, r17
     b00:	10 64       	ori	r17, 0x40	; 64
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     b06:	f7 01       	movw	r30, r14
     b08:	ec 0f       	add	r30, r28
     b0a:	fd 1f       	adc	r31, r29
     b0c:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     b0e:	81 2f       	mov	r24, r17
     b10:	8c 0f       	add	r24, r28
     b12:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		LCDsendChar(pcc);
     b16:	80 2f       	mov	r24, r16
     b18:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     b1c:	21 96       	adiw	r28, 0x01	; 1
     b1e:	c8 30       	cpi	r28, 0x08	; 8
     b20:	d1 05       	cpc	r29, r1
     b22:	89 f7       	brne	.-30     	; 0xb06 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	08 95       	ret

00000b32 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	80 e6       	ldi	r24, 0x60	; 96
     b3a:	9a ee       	ldi	r25, 0xEA	; 234
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     b40:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     b42:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     b44:	87 b1       	in	r24, 0x07	; 7
     b46:	80 6f       	ori	r24, 0xF0	; 240
     b48:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     b4a:	87 b1       	in	r24, 0x07	; 7
     b4c:	87 60       	ori	r24, 0x07	; 7
     b4e:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b50:	80 e3       	ldi	r24, 0x30	; 48
     b52:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b54:	42 9a       	sbi	0x08, 2	; 8
     b56:	20 e4       	ldi	r18, 0x40	; 64
     b58:	3f e1       	ldi	r19, 0x1F	; 31
     b5a:	f9 01       	movw	r30, r18
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b60:	42 98       	cbi	0x08, 2	; 8
     b62:	f9 01       	movw	r30, r18
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b68:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b6a:	42 9a       	sbi	0x08, 2	; 8
     b6c:	c9 01       	movw	r24, r18
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b72:	42 98       	cbi	0x08, 2	; 8
     b74:	c9 01       	movw	r24, r18
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     b7a:	80 e2       	ldi	r24, 0x20	; 32
     b7c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b7e:	42 9a       	sbi	0x08, 2	; 8
     b80:	c9 01       	movw	r24, r18
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b86:	42 98       	cbi	0x08, 2	; 8
     b88:	c9 01       	movw	r24, r18
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     b8e:	88 e2       	ldi	r24, 0x28	; 40
     b90:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     b94:	8c e0       	ldi	r24, 0x0C	; 12
     b96:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
     b9a:	cc e8       	ldi	r28, 0x8C	; 140
     b9c:	d0 e0       	ldi	r29, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     ba0:	16 2f       	mov	r17, r22
     ba2:	1f 5f       	subi	r17, 0xFF	; 255
     ba4:	ce 01       	movw	r24, r28
     ba6:	0e 94 75 05 	call	0xaea	; 0xaea <LCDdefinechar>
     baa:	28 96       	adiw	r28, 0x08	; 8
     bac:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     bae:	18 30       	cpi	r17, 0x08	; 8
     bb0:	b9 f7       	brne	.-18     	; 0xba0 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	08 95       	ret

00000bba <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	08 2f       	mov	r16, r24
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     bc4:	8e e1       	ldi	r24, 0x1E	; 30
     bc6:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     bca:	1f 5f       	subi	r17, 0xFF	; 255
     bcc:	10 17       	cp	r17, r16
     bce:	d0 f3       	brcs	.-12     	; 0xbc4 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	08 2f       	mov	r16, r24
     bdc:	10 e0       	ldi	r17, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     be0:	88 e1       	ldi	r24, 0x18	; 24
     be2:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     be6:	1f 5f       	subi	r17, 0xFF	; 255
     be8:	10 17       	cp	r17, r16
     bea:	d0 f3       	brcs	.-12     	; 0xbe0 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	08 95       	ret

00000bf2 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     bf2:	8e e0       	ldi	r24, 0x0E	; 14
     bf4:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     bf8:	08 95       	ret

00000bfa <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     bfa:	8f e0       	ldi	r24, 0x0F	; 15
     bfc:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c00:	08 95       	ret

00000c02 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     c02:	8c e0       	ldi	r24, 0x0C	; 12
     c04:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c08:	08 95       	ret

00000c0a <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c10:	08 95       	ret

00000c12 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     c12:	8c e0       	ldi	r24, 0x0C	; 12
     c14:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c18:	08 95       	ret

00000c1a <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	08 2f       	mov	r16, r24
     c20:	10 e0       	ldi	r17, 0x00	; 0
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     c24:	80 e1       	ldi	r24, 0x10	; 16
     c26:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c2a:	1f 5f       	subi	r17, 0xFF	; 255
     c2c:	10 17       	cp	r17, r16
     c2e:	d0 f3       	brcs	.-12     	; 0xc24 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	08 2f       	mov	r16, r24
     c3c:	10 e0       	ldi	r17, 0x00	; 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     c40:	84 e1       	ldi	r24, 0x14	; 20
     c42:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c46:	1f 5f       	subi	r17, 0xFF	; 255
     c48:	10 17       	cp	r17, r16
     c4a:	d0 f3       	brcs	.-12     	; 0xc40 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     c62:	96 e0       	ldi	r25, 0x06	; 6
     c64:	89 9f       	mul	r24, r25
     c66:	c0 01       	movw	r24, r0
     c68:	11 24       	eor	r1, r1
     c6a:	24 2f       	mov	r18, r20
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	ac 01       	movw	r20, r24
     c70:	42 9f       	mul	r20, r18
     c72:	c0 01       	movw	r24, r0
     c74:	43 9f       	mul	r20, r19
     c76:	90 0d       	add	r25, r0
     c78:	52 9f       	mul	r21, r18
     c7a:	90 0d       	add	r25, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	0e 94 4e 09 	call	0x129c	; 0x129c <__divmodhi4>
     c84:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     c86:	cb 01       	movw	r24, r22
     c88:	66 e0       	ldi	r22, 0x06	; 6
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 3a 09 	call	0x1274	; 0x1274 <__udivmodhi4>
     c90:	e8 2e       	mov	r14, r24
     c92:	ff 24       	eor	r15, r15
     c94:	00 e0       	ldi	r16, 0x00	; 0
     c96:	10 e0       	ldi	r17, 0x00	; 0
     c98:	12 c0       	rjmp	.+36     	; 0xcbe <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     c9a:	c8 01       	movw	r24, r16
     c9c:	05 96       	adiw	r24, 0x05	; 5
     c9e:	c8 17       	cp	r28, r24
     ca0:	d9 07       	cpc	r29, r25
     ca2:	10 f0       	brcs	.+4      	; 0xca8 <LCDprogressBar+0x56>
     ca4:	85 e0       	ldi	r24, 0x05	; 5
     ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     ca8:	c0 17       	cp	r28, r16
     caa:	d1 07       	cpc	r29, r17
     cac:	10 f0       	brcs	.+4      	; 0xcb2 <LCDprogressBar+0x60>
     cae:	8e 2d       	mov	r24, r14
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <LCDprogressBar+0x62>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     cb4:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     cb8:	f3 94       	inc	r15
     cba:	0a 5f       	subi	r16, 0xFA	; 250
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	fd 14       	cp	r15, r13
     cc0:	60 f3       	brcs	.-40     	; 0xc9a <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	08 95       	ret

00000cd2 <__vector_16>:
		}
	}
    trtSignal(SEM_SHARED);
}
*/
ISR (TIMER0_COMPA_vect) {
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	0b b6       	in	r0, 0x3b	; 59
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	2f 93       	push	r18
     ce2:	3f 93       	push	r19
     ce4:	4f 93       	push	r20
     ce6:	5f 93       	push	r21
     ce8:	6f 93       	push	r22
     cea:	7f 93       	push	r23
     cec:	8f 93       	push	r24
     cee:	9f 93       	push	r25
     cf0:	af 93       	push	r26
     cf2:	bf 93       	push	r27
     cf4:	ef 93       	push	r30
     cf6:	ff 93       	push	r31
	trtWait(SEM_SHARED);
     cf8:	84 e0       	ldi	r24, 0x04	; 4
     cfa:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	if (time_rem > 0) {
     cfe:	80 91 d7 02 	lds	r24, 0x02D7
     d02:	90 91 d8 02 	lds	r25, 0x02D8
     d06:	18 16       	cp	r1, r24
     d08:	19 06       	cpc	r1, r25
     d0a:	f4 f4       	brge	.+60     	; 0xd48 <__vector_16+0x76>
		if (msec < 1000) {
     d0c:	80 91 c2 02 	lds	r24, 0x02C2
     d10:	90 91 c3 02 	lds	r25, 0x02C3
     d14:	88 5e       	subi	r24, 0xE8	; 232
     d16:	93 40       	sbci	r25, 0x03	; 3
     d18:	54 f4       	brge	.+20     	; 0xd2e <__vector_16+0x5c>
			msec++;
     d1a:	80 91 c2 02 	lds	r24, 0x02C2
     d1e:	90 91 c3 02 	lds	r25, 0x02C3
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	90 93 c3 02 	sts	0x02C3, r25
     d28:	80 93 c2 02 	sts	0x02C2, r24
     d2c:	0d c0       	rjmp	.+26     	; 0xd48 <__vector_16+0x76>
		}
		else {
			msec = 0;
     d2e:	10 92 c3 02 	sts	0x02C3, r1
     d32:	10 92 c2 02 	sts	0x02C2, r1
			time_rem--;
     d36:	80 91 d7 02 	lds	r24, 0x02D7
     d3a:	90 91 d8 02 	lds	r25, 0x02D8
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	90 93 d8 02 	sts	0x02D8, r25
     d44:	80 93 d7 02 	sts	0x02D7, r24
		}
	}
    trtSignal(SEM_SHARED);
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
}
     d4e:	ff 91       	pop	r31
     d50:	ef 91       	pop	r30
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0b be       	out	0x3b, r0	; 59
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <init_lcd>:


//**********************************************************
// LCD setup
void init_lcd(void) {
	LCDinit();				//initialize the display
     d74:	0e 94 99 05 	call	0xb32	; 0xb32 <LCDinit>
	LCDcursorOFF();
     d78:	0e 94 01 06 	call	0xc02	; 0xc02 <LCDcursorOFF>
	LCDclr();				//clear the display
     d7c:	0e 94 32 05 	call	0xa64	; 0xa64 <LCDclr>
	LCDGotoXY(0,0);
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
}
     d88:	08 95       	ret

00000d8a <adc_init>:

//********************************************************** 
// ADC setup
void adc_init(void){
 ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
     d8a:	ea e7       	ldi	r30, 0x7A	; 122
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	87 60       	ori	r24, 0x07	; 7
     d92:	80 83       	st	Z, r24
 ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
     d94:	ac e7       	ldi	r26, 0x7C	; 124
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	8c 91       	ld	r24, X
     d9a:	80 64       	ori	r24, 0x40	; 64
     d9c:	8c 93       	st	X, r24
 ADCSRA |= (1<<ADEN);                //Turn on ADC
     d9e:	80 81       	ld	r24, Z
     da0:	80 68       	ori	r24, 0x80	; 128
     da2:	80 83       	st	Z, r24
 ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
     da4:	80 81       	ld	r24, Z
     da6:	80 64       	ori	r24, 0x40	; 64
     da8:	80 83       	st	Z, r24
}
     daa:	08 95       	ret

00000dac <read_adc>:
 
uint16_t read_adc(uint8_t channel){
 ADMUX &= 0xF0;                    //Clear the older channel that was read
     dac:	90 91 7c 00 	lds	r25, 0x007C
     db0:	90 7f       	andi	r25, 0xF0	; 240
     db2:	90 93 7c 00 	sts	0x007C, r25
 ADMUX |= channel;                //Defines the new ADC channel to be read
     db6:	90 91 7c 00 	lds	r25, 0x007C
     dba:	98 2b       	or	r25, r24
     dbc:	90 93 7c 00 	sts	0x007C, r25
 ADCSRA |= (1<<ADSC);                //Starts a new conversion
     dc0:	80 91 7a 00 	lds	r24, 0x007A
     dc4:	80 64       	ori	r24, 0x40	; 64
     dc6:	80 93 7a 00 	sts	0x007A, r24
 while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
     dca:	80 91 7a 00 	lds	r24, 0x007A
     dce:	86 fd       	sbrc	r24, 6
     dd0:	fc cf       	rjmp	.-8      	; 0xdca <read_adc+0x1e>
 return ADCW;                    //Returns the ADC value of the chosen channel
     dd2:	20 91 78 00 	lds	r18, 0x0078
     dd6:	30 91 79 00 	lds	r19, 0x0079
}
     dda:	c9 01       	movw	r24, r18
     ddc:	08 95       	ret

00000dde <initialize>:
// http://hekilledmywire.wordpress.com/2011/03/16/using-the-adc-tutorial-part-5/

//********************************************************** 
//Set it all up
void initialize(void) {
  DDRC = 0xff;    	// LCD connections
     dde:	8f ef       	ldi	r24, 0xFF	; 255
     de0:	87 b9       	out	0x07, r24	; 7
  PORTC = 0x00;
     de2:	18 b8       	out	0x08, r1	; 8
  DDRD |= 0x04;	// LED status light
     de4:	52 9a       	sbi	0x0a, 2	; 10
  //DDRB = 0x00; 		// switch connections
  //PORTB = 0xff; 	// pullup on

  //******************** 
  //initialize variables
  trtWait(SEM_SHARED);
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
  cTemp = 0.0;
     dec:	10 92 1b 03 	sts	0x031B, r1
     df0:	10 92 1a 03 	sts	0x031A, r1
  dTemp = 0.0;
     df4:	10 92 c5 02 	sts	0x02C5, r1
     df8:	10 92 c4 02 	sts	0x02C4, r1
  time_rem = 0;
     dfc:	10 92 d8 02 	sts	0x02D8, r1
     e00:	10 92 d7 02 	sts	0x02D7, r1
  msec = 0;
     e04:	10 92 c3 02 	sts	0x02C3, r1
     e08:	10 92 c2 02 	sts	0x02C2, r1
  trtSignal(SEM_SHARED);
     e0c:	84 e0       	ldi	r24, 0x04	; 4
     e0e:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>

  //******************** 
  //init LCD
  init_lcd();
     e12:	0e 94 ba 06 	call	0xd74	; 0xd74 <init_lcd>
  LCDclr();
     e16:	0e 94 32 05 	call	0xa64	; 0xa64 <LCDclr>
  // put some stuff on LCD
  CopyStringtoLCD(LCD_line1, 0, 0);//start at char=0 line=0
     e1a:	8c ec       	ldi	r24, 0xCC	; 204
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	0e 94 5e 05 	call	0xabc	; 0xabc <CopyStringtoLCD>
  CopyStringtoLCD(LCD_line2, 0, 1); 
     e26:	86 ed       	ldi	r24, 0xD6	; 214
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	0e 94 5e 05 	call	0xabc	; 0xabc <CopyStringtoLCD>
  // turn on clear-on-match
  TCCR2A= (1<<WGM21) ;
  */

  //set up timer 0 for 1 mSec timebase 
  TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	90 93 6e 00 	sts	0x006E, r25
  OCR0A = 249;  		//set the compare reg to 250 time ticks
     e38:	89 ef       	ldi	r24, 0xF9	; 249
     e3a:	87 bd       	out	0x27, r24	; 39
  //set prescalar to divide by 64 
  TCCR0B= 3; 	
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	85 bd       	out	0x25, r24	; 37
  // turn on clear-on-match
  TCCR0A= (1<<WGM01) ;
     e40:	94 bd       	out	0x24, r25	; 36

  // ********************
  //crank up the ISRs
  sei();
     e42:	78 94       	sei
}  
     e44:	08 95       	ret

00000e46 <adjustTemp>:
	  trtSleepUntil(rel, dead);	
  	}
}

// --- define task 3  ----------------------------------------
void adjustTemp(void* args) {
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     e4e:	20 91 11 03 	lds	r18, 0x0311
     e52:	30 91 12 03 	lds	r19, 0x0312
     e56:	40 91 13 03 	lds	r20, 0x0313
     e5a:	50 91 14 03 	lds	r21, 0x0314
     e5e:	a9 01       	movw	r20, r18
     e60:	33 27       	eor	r19, r19
     e62:	22 27       	eor	r18, r18
     e64:	60 91 84 00 	lds	r22, 0x0084
     e68:	70 91 85 00 	lds	r23, 0x0085
		}
		*/
		// sleep
	  	rel = trtCurrentTime() + SECONDS2TICKS(0.02);
	  	dead = trtCurrentTime() + SECONDS2TICKS(0.03);
	  	trtSleepUntil(rel, dead);	
     e6c:	e0 90 84 00 	lds	r14, 0x0084
     e70:	f0 90 85 00 	lds	r15, 0x0085
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	62 0f       	add	r22, r18
     e7a:	73 1f       	adc	r23, r19
     e7c:	84 1f       	adc	r24, r20
     e7e:	95 1f       	adc	r25, r21
     e80:	68 5c       	subi	r22, 0xC8	; 200
     e82:	7e 4f       	sbci	r23, 0xFE	; 254
     e84:	8f 4f       	sbci	r24, 0xFF	; 255
     e86:	9f 4f       	sbci	r25, 0xFF	; 255
     e88:	00 e0       	ldi	r16, 0x00	; 0
     e8a:	10 e0       	ldi	r17, 0x00	; 0
     e8c:	2e 0d       	add	r18, r14
     e8e:	3f 1d       	adc	r19, r15
     e90:	40 1f       	adc	r20, r16
     e92:	51 1f       	adc	r21, r17
     e94:	2c 52       	subi	r18, 0x2C	; 44
     e96:	3e 4f       	sbci	r19, 0xFE	; 254
     e98:	4f 4f       	sbci	r20, 0xFF	; 255
     e9a:	5f 4f       	sbci	r21, 0xFF	; 255
     e9c:	0e 94 0b 03 	call	0x616	; 0x616 <trtSleepUntil>
     ea0:	d6 cf       	rjmp	.-84     	; 0xe4e <adjustTemp+0x8>

00000ea2 <main>:
	}
}

// --- Main Program ----------------------------------
int main(void) {
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     eae:	0e 94 75 03 	call	0x6ea	; 0x6ea <trt_uart_init>
  stdout = stdin = stderr = &uart0;
     eb2:	62 e9       	ldi	r22, 0x92	; 146
     eb4:	71 e0       	ldi	r23, 0x01	; 1
     eb6:	70 93 21 03 	sts	0x0321, r23
     eba:	60 93 20 03 	sts	0x0320, r22
     ebe:	70 93 1d 03 	sts	0x031D, r23
     ec2:	60 93 1c 03 	sts	0x031C, r22
     ec6:	70 93 1f 03 	sts	0x031F, r23
     eca:	60 93 1e 03 	sts	0x031E, r22
  fprintf(stdout,"\n\r Welcome to KitchenBot UI \n\r Please input your instructions below\n\r\n\r");
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 a7 09 	call	0x134e	; 0x134e <fputs>
    // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
     ed6:	80 e5       	ldi	r24, 0x50	; 80
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 db 01 	call	0x3b6	; 0x3b6 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     ede:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     ee0:	10 92 07 03 	sts	0x0307, r1
  
  sei(); // set enabled interrupts;
     ee4:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     ee6:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     ee8:	10 92 08 03 	sts	0x0308, r1
  
  sei(); // set enabled interrupts;
     eec:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     eee:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 93 0a 03 	sts	0x030A, r24
  
  sei(); // set enabled interrupts;
     ef6:	78 94       	sei

  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variable

  // --- create tasks  ----------------
  trtCreateTask(serialComm, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[0]));
     ef8:	8d e4       	ldi	r24, 0x4D	; 77
     efa:	98 e0       	ldi	r25, 0x08	; 8
     efc:	68 ee       	ldi	r22, 0xE8	; 232
     efe:	73 e0       	ldi	r23, 0x03	; 3
     f00:	2a e1       	ldi	r18, 0x1A	; 26
     f02:	36 e0       	ldi	r19, 0x06	; 6
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	ea e1       	ldi	r30, 0x1A	; 26
     f0a:	ee 2e       	mov	r14, r30
     f0c:	e6 e0       	ldi	r30, 0x06	; 6
     f0e:	fe 2e       	mov	r15, r30
     f10:	01 2d       	mov	r16, r1
     f12:	11 2d       	mov	r17, r1
     f14:	be eb       	ldi	r27, 0xBE	; 190
     f16:	cb 2e       	mov	r12, r27
     f18:	b2 e0       	ldi	r27, 0x02	; 2
     f1a:	db 2e       	mov	r13, r27
     f1c:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
  trtCreateTask(lcdComm, 1000, SECONDS2TICKS(0.2), SECONDS2TICKS(0.4), &(args[0]));
     f20:	8f ea       	ldi	r24, 0xAF	; 175
     f22:	97 e0       	ldi	r25, 0x07	; 7
     f24:	68 ee       	ldi	r22, 0xE8	; 232
     f26:	73 e0       	ldi	r23, 0x03	; 3
     f28:	25 e3       	ldi	r18, 0x35	; 53
     f2a:	3c e0       	ldi	r19, 0x0C	; 12
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	aa e6       	ldi	r26, 0x6A	; 106
     f32:	ea 2e       	mov	r14, r26
     f34:	a8 e1       	ldi	r26, 0x18	; 24
     f36:	fa 2e       	mov	r15, r26
     f38:	01 2d       	mov	r16, r1
     f3a:	11 2d       	mov	r17, r1
     f3c:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
  // --- Idle task --------------------------------------
  // For debugging, blink an LED
  // For production, you would probably comment out the body of the WHILE
  while (1) {
  	// Light turn on when it is heating up. 
  	if (cTemp >= dTemp) {
     f40:	20 91 1a 03 	lds	r18, 0x031A
     f44:	30 91 1b 03 	lds	r19, 0x031B
     f48:	80 91 c4 02 	lds	r24, 0x02C4
     f4c:	90 91 c5 02 	lds	r25, 0x02C5
     f50:	28 17       	cp	r18, r24
     f52:	39 07       	cpc	r19, r25
     f54:	14 f0       	brlt	.+4      	; 0xf5a <main+0xb8>
		PORTD |= 0x04;
     f56:	5a 9a       	sbi	0x0b, 2	; 11
     f58:	f3 cf       	rjmp	.-26     	; 0xf40 <main+0x9e>
	}
	else {
		PORTD &= 0xFB;
     f5a:	5a 98       	cbi	0x0b, 2	; 11
     f5c:	f1 cf       	rjmp	.-30     	; 0xf40 <main+0x9e>

00000f5e <lcdComm>:
		trtSignal(SEM_SHARED);
	}
}

// --- define task 2  ----------------------------------------
void lcdComm(void* args) {
     f5e:	af 92       	push	r10
     f60:	bf 92       	push	r11
     f62:	cf 92       	push	r12
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
	uint32_t rel, dead;
	// increment time counter and format string 
	while (TRUE) {
	  // display the current temp
	  trtWait(SEM_SHARED) ;
	  sprintf(lcd_buffer, "%iF      ", cTemp);
     f72:	c6 ec       	ldi	r28, 0xC6	; 198
     f74:	d2 e0       	ldi	r29, 0x02	; 2
     f76:	b8 e4       	ldi	r27, 0x48	; 72
     f78:	ab 2e       	mov	r10, r27
     f7a:	b1 e0       	ldi	r27, 0x01	; 1
     f7c:	bb 2e       	mov	r11, r27
	  LCDGotoXY(9, 0);
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
	  // display the desired temp 
	  //sprintf(lcd_buffer, "%iF", dTemp);
	  sprintf(lcd_buffer, "%is      ", time_rem);
     f7e:	a2 e5       	ldi	r26, 0x52	; 82
     f80:	ca 2e       	mov	r12, r26
     f82:	a1 e0       	ldi	r26, 0x01	; 1
     f84:	da 2e       	mov	r13, r26
void lcdComm(void* args) {
	uint32_t rel, dead;
	// increment time counter and format string 
	while (TRUE) {
	  // display the current temp
	  trtWait(SEM_SHARED) ;
     f86:	84 e0       	ldi	r24, 0x04	; 4
     f88:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	  sprintf(lcd_buffer, "%iF      ", cTemp);
     f8c:	80 91 1a 03 	lds	r24, 0x031A
     f90:	90 91 1b 03 	lds	r25, 0x031B
     f94:	00 d0       	rcall	.+0      	; 0xf96 <lcdComm+0x38>
     f96:	00 d0       	rcall	.+0      	; 0xf98 <lcdComm+0x3a>
     f98:	00 d0       	rcall	.+0      	; 0xf9a <lcdComm+0x3c>
     f9a:	ed b7       	in	r30, 0x3d	; 61
     f9c:	fe b7       	in	r31, 0x3e	; 62
     f9e:	31 96       	adiw	r30, 0x01	; 1
     fa0:	ad b7       	in	r26, 0x3d	; 61
     fa2:	be b7       	in	r27, 0x3e	; 62
     fa4:	12 96       	adiw	r26, 0x02	; 2
     fa6:	dc 93       	st	X, r29
     fa8:	ce 93       	st	-X, r28
     faa:	11 97       	sbiw	r26, 0x01	; 1
     fac:	b3 82       	std	Z+3, r11	; 0x03
     fae:	a2 82       	std	Z+2, r10	; 0x02
     fb0:	95 83       	std	Z+5, r25	; 0x05
     fb2:	84 83       	std	Z+4, r24	; 0x04
     fb4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <sprintf>
	  LCDGotoXY(9, 0);
     fb8:	8d b7       	in	r24, 0x3d	; 61
     fba:	9e b7       	in	r25, 0x3e	; 62
     fbc:	06 96       	adiw	r24, 0x06	; 6
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	9e bf       	out	0x3e, r25	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	8d bf       	out	0x3d, r24	; 61
     fc8:	89 e0       	ldi	r24, 0x09	; 9
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
     fd0:	fe 01       	movw	r30, r28
     fd2:	01 90       	ld	r0, Z+
     fd4:	00 20       	and	r0, r0
     fd6:	e9 f7       	brne	.-6      	; 0xfd2 <lcdComm+0x74>
     fd8:	31 97       	sbiw	r30, 0x01	; 1
     fda:	ec 1b       	sub	r30, r28
     fdc:	fd 0b       	sbc	r31, r29
     fde:	ce 01       	movw	r24, r28
     fe0:	6e 2f       	mov	r22, r30
     fe2:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCDstring>
	  // display the desired temp 
	  //sprintf(lcd_buffer, "%iF", dTemp);
	  sprintf(lcd_buffer, "%is      ", time_rem);
     fe6:	80 91 d7 02 	lds	r24, 0x02D7
     fea:	90 91 d8 02 	lds	r25, 0x02D8
     fee:	00 d0       	rcall	.+0      	; 0xff0 <lcdComm+0x92>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <lcdComm+0x94>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <lcdComm+0x96>
     ff4:	ed b7       	in	r30, 0x3d	; 61
     ff6:	fe b7       	in	r31, 0x3e	; 62
     ff8:	31 96       	adiw	r30, 0x01	; 1
     ffa:	ad b7       	in	r26, 0x3d	; 61
     ffc:	be b7       	in	r27, 0x3e	; 62
     ffe:	12 96       	adiw	r26, 0x02	; 2
    1000:	dc 93       	st	X, r29
    1002:	ce 93       	st	-X, r28
    1004:	11 97       	sbiw	r26, 0x01	; 1
    1006:	d3 82       	std	Z+3, r13	; 0x03
    1008:	c2 82       	std	Z+2, r12	; 0x02
    100a:	95 83       	std	Z+5, r25	; 0x05
    100c:	84 83       	std	Z+4, r24	; 0x04
    100e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <sprintf>
	  LCDGotoXY(9, 1);
    1012:	8d b7       	in	r24, 0x3d	; 61
    1014:	9e b7       	in	r25, 0x3e	; 62
    1016:	06 96       	adiw	r24, 0x06	; 6
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	9e bf       	out	0x3e, r25	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	8d bf       	out	0x3d, r24	; 61
    1022:	89 e0       	ldi	r24, 0x09	; 9
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
    102a:	fe 01       	movw	r30, r28
    102c:	01 90       	ld	r0, Z+
    102e:	00 20       	and	r0, r0
    1030:	e9 f7       	brne	.-6      	; 0x102c <lcdComm+0xce>
    1032:	31 97       	sbiw	r30, 0x01	; 1
    1034:	ec 1b       	sub	r30, r28
    1036:	fd 0b       	sbc	r31, r29
    1038:	ce 01       	movw	r24, r28
    103a:	6e 2f       	mov	r22, r30
    103c:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCDstring>
	  trtSignal(SEM_SHARED) ;
    1040:	84 e0       	ldi	r24, 0x04	; 4
    1042:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    1046:	20 91 11 03 	lds	r18, 0x0311
    104a:	30 91 12 03 	lds	r19, 0x0312
    104e:	40 91 13 03 	lds	r20, 0x0313
    1052:	50 91 14 03 	lds	r21, 0x0314
    1056:	a9 01       	movw	r20, r18
    1058:	33 27       	eor	r19, r19
    105a:	22 27       	eor	r18, r18
    105c:	60 91 84 00 	lds	r22, 0x0084
    1060:	70 91 85 00 	lds	r23, 0x0085
	  // sleep
	  rel = trtCurrentTime() + SECONDS2TICKS(0.25);
	  dead = trtCurrentTime() + SECONDS2TICKS(0.5);
	  trtSleepUntil(rel, dead);	
    1064:	e0 90 84 00 	lds	r14, 0x0084
    1068:	f0 90 85 00 	lds	r15, 0x0085
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	62 0f       	add	r22, r18
    1072:	73 1f       	adc	r23, r19
    1074:	84 1f       	adc	r24, r20
    1076:	95 1f       	adc	r25, r21
    1078:	6e 5b       	subi	r22, 0xBE	; 190
    107a:	70 4f       	sbci	r23, 0xF0	; 240
    107c:	8f 4f       	sbci	r24, 0xFF	; 255
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	00 e0       	ldi	r16, 0x00	; 0
    1082:	10 e0       	ldi	r17, 0x00	; 0
    1084:	2e 0d       	add	r18, r14
    1086:	3f 1d       	adc	r19, r15
    1088:	40 1f       	adc	r20, r16
    108a:	51 1f       	adc	r21, r17
    108c:	2c 57       	subi	r18, 0x7C	; 124
    108e:	31 4e       	sbci	r19, 0xE1	; 225
    1090:	4f 4f       	sbci	r20, 0xFF	; 255
    1092:	5f 4f       	sbci	r21, 0xFF	; 255
    1094:	0e 94 0b 03 	call	0x616	; 0x616 <trtSleepUntil>
    1098:	76 cf       	rjmp	.-276    	; 0xf86 <lcdComm+0x28>

0000109a <serialComm>:

/********************************************************************/
// 							FSM Tasks
/********************************************************************/
// --- define task 1  ----------------------------------------
void serialComm(void* args) {
    109a:	6f 92       	push	r6
    109c:	7f 92       	push	r7
    109e:	8f 92       	push	r8
    10a0:	9f 92       	push	r9
    10a2:	af 92       	push	r10
    10a4:	bf 92       	push	r11
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <serialComm+0x1e>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <serialComm+0x20>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <serialComm+0x22>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
	// Declare the command and num variables
	volatile int num ;
	char cmd[4] ;
    // initialize
    initialize();
    10c0:	0e 94 ef 06 	call	0xdde	; 0xdde <initialize>
	while (TRUE) {
		// commands:
		// 'temp' sets the desired temperature
		// 'time' sets the desired time
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s%u", cmd, &num) ;
    10c4:	3c e5       	ldi	r19, 0x5C	; 92
    10c6:	63 2e       	mov	r6, r19
    10c8:	31 e0       	ldi	r19, 0x01	; 1
    10ca:	73 2e       	mov	r7, r19
    10cc:	8e 01       	movw	r16, r28
    10ce:	0d 5f       	subi	r16, 0xFD	; 253
    10d0:	1f 4f       	sbci	r17, 0xFF	; 255
    10d2:	4e 01       	movw	r8, r28
    10d4:	08 94       	sec
    10d6:	81 1c       	adc	r8, r1
    10d8:	91 1c       	adc	r9, r1
		// update shared variables
		trtWait(SEM_SHARED) ;
		if (strcmp(cmd, "temp") == 0) {
			dTemp = num;
			fprintf(stdout, "dTemp: %i\n\r", dTemp); 
    10da:	26 e6       	ldi	r18, 0x66	; 102
    10dc:	a2 2e       	mov	r10, r18
    10de:	21 e0       	ldi	r18, 0x01	; 1
    10e0:	b2 2e       	mov	r11, r18
		}
		if (strcmp(cmd, "time") == 0) {
			time_rem = num;
			//msec= 0;
			fprintf(stdout, "Time: %i\n\r", time_rem); 
    10e2:	97 e7       	ldi	r25, 0x77	; 119
    10e4:	c9 2e       	mov	r12, r25
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	d9 2e       	mov	r13, r25
		}
		if (strcmp(cmd, "set") == 0) {
			cTemp = num;
			fprintf(stdout, "cTemp: %i\n\r", time_rem); 
    10ea:	86 e8       	ldi	r24, 0x86	; 134
    10ec:	e8 2e       	mov	r14, r24
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	f8 2e       	mov	r15, r24
    initialize();
	while (TRUE) {
		// commands:
		// 'temp' sets the desired temperature
		// 'time' sets the desired time
		fprintf(stdout, ">") ;
    10f2:	60 91 1e 03 	lds	r22, 0x031E
    10f6:	70 91 1f 03 	lds	r23, 0x031F
    10fa:	8e e3       	ldi	r24, 0x3E	; 62
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <fputc>
		fscanf(stdin, "%s%u", cmd, &num) ;
    1102:	8d b7       	in	r24, 0x3d	; 61
    1104:	9e b7       	in	r25, 0x3e	; 62
    1106:	08 97       	sbiw	r24, 0x08	; 8
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	9e bf       	out	0x3e, r25	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	8d bf       	out	0x3d, r24	; 61
    1112:	ed b7       	in	r30, 0x3d	; 61
    1114:	fe b7       	in	r31, 0x3e	; 62
    1116:	31 96       	adiw	r30, 0x01	; 1
    1118:	80 91 1c 03 	lds	r24, 0x031C
    111c:	90 91 1d 03 	lds	r25, 0x031D
    1120:	ad b7       	in	r26, 0x3d	; 61
    1122:	be b7       	in	r27, 0x3e	; 62
    1124:	12 96       	adiw	r26, 0x02	; 2
    1126:	9c 93       	st	X, r25
    1128:	8e 93       	st	-X, r24
    112a:	11 97       	sbiw	r26, 0x01	; 1
    112c:	73 82       	std	Z+3, r7	; 0x03
    112e:	62 82       	std	Z+2, r6	; 0x02
    1130:	15 83       	std	Z+5, r17	; 0x05
    1132:	04 83       	std	Z+4, r16	; 0x04
    1134:	97 82       	std	Z+7, r9	; 0x07
    1136:	86 82       	std	Z+6, r8	; 0x06
    1138:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <fscanf>
		// update shared variables
		trtWait(SEM_SHARED) ;
    113c:	8d b7       	in	r24, 0x3d	; 61
    113e:	9e b7       	in	r25, 0x3e	; 62
    1140:	08 96       	adiw	r24, 0x08	; 8
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	9e bf       	out	0x3e, r25	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	8d bf       	out	0x3d, r24	; 61
    114c:	84 e0       	ldi	r24, 0x04	; 4
    114e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
		if (strcmp(cmd, "temp") == 0) {
    1152:	c8 01       	movw	r24, r16
    1154:	61 e6       	ldi	r22, 0x61	; 97
    1156:	71 e0       	ldi	r23, 0x01	; 1
    1158:	0e 94 61 09 	call	0x12c2	; 0x12c2 <strcmp>
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	41 f5       	brne	.+80     	; 0x11b0 <serialComm+0x116>
			dTemp = num;
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	90 93 c5 02 	sts	0x02C5, r25
    1168:	80 93 c4 02 	sts	0x02C4, r24
			fprintf(stdout, "dTemp: %i\n\r", dTemp); 
    116c:	20 91 c4 02 	lds	r18, 0x02C4
    1170:	30 91 c5 02 	lds	r19, 0x02C5
    1174:	00 d0       	rcall	.+0      	; 0x1176 <serialComm+0xdc>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <serialComm+0xde>
    1178:	00 d0       	rcall	.+0      	; 0x117a <serialComm+0xe0>
    117a:	ed b7       	in	r30, 0x3d	; 61
    117c:	fe b7       	in	r31, 0x3e	; 62
    117e:	31 96       	adiw	r30, 0x01	; 1
    1180:	80 91 1e 03 	lds	r24, 0x031E
    1184:	90 91 1f 03 	lds	r25, 0x031F
    1188:	ad b7       	in	r26, 0x3d	; 61
    118a:	be b7       	in	r27, 0x3e	; 62
    118c:	12 96       	adiw	r26, 0x02	; 2
    118e:	9c 93       	st	X, r25
    1190:	8e 93       	st	-X, r24
    1192:	11 97       	sbiw	r26, 0x01	; 1
    1194:	b3 82       	std	Z+3, r11	; 0x03
    1196:	a2 82       	std	Z+2, r10	; 0x02
    1198:	35 83       	std	Z+5, r19	; 0x05
    119a:	24 83       	std	Z+4, r18	; 0x04
    119c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fprintf>
    11a0:	8d b7       	in	r24, 0x3d	; 61
    11a2:	9e b7       	in	r25, 0x3e	; 62
    11a4:	06 96       	adiw	r24, 0x06	; 6
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	9e bf       	out	0x3e, r25	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	8d bf       	out	0x3d, r24	; 61
		}
		if (strcmp(cmd, "time") == 0) {
    11b0:	c8 01       	movw	r24, r16
    11b2:	62 e7       	ldi	r22, 0x72	; 114
    11b4:	71 e0       	ldi	r23, 0x01	; 1
    11b6:	0e 94 61 09 	call	0x12c2	; 0x12c2 <strcmp>
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	41 f5       	brne	.+80     	; 0x120e <serialComm+0x174>
			time_rem = num;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	90 93 d8 02 	sts	0x02D8, r25
    11c6:	80 93 d7 02 	sts	0x02D7, r24
			//msec= 0;
			fprintf(stdout, "Time: %i\n\r", time_rem); 
    11ca:	20 91 d7 02 	lds	r18, 0x02D7
    11ce:	30 91 d8 02 	lds	r19, 0x02D8
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <serialComm+0x13a>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <serialComm+0x13c>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <serialComm+0x13e>
    11d8:	ed b7       	in	r30, 0x3d	; 61
    11da:	fe b7       	in	r31, 0x3e	; 62
    11dc:	31 96       	adiw	r30, 0x01	; 1
    11de:	80 91 1e 03 	lds	r24, 0x031E
    11e2:	90 91 1f 03 	lds	r25, 0x031F
    11e6:	ad b7       	in	r26, 0x3d	; 61
    11e8:	be b7       	in	r27, 0x3e	; 62
    11ea:	12 96       	adiw	r26, 0x02	; 2
    11ec:	9c 93       	st	X, r25
    11ee:	8e 93       	st	-X, r24
    11f0:	11 97       	sbiw	r26, 0x01	; 1
    11f2:	d3 82       	std	Z+3, r13	; 0x03
    11f4:	c2 82       	std	Z+2, r12	; 0x02
    11f6:	35 83       	std	Z+5, r19	; 0x05
    11f8:	24 83       	std	Z+4, r18	; 0x04
    11fa:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fprintf>
    11fe:	8d b7       	in	r24, 0x3d	; 61
    1200:	9e b7       	in	r25, 0x3e	; 62
    1202:	06 96       	adiw	r24, 0x06	; 6
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	9e bf       	out	0x3e, r25	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	8d bf       	out	0x3d, r24	; 61
		}
		if (strcmp(cmd, "set") == 0) {
    120e:	c8 01       	movw	r24, r16
    1210:	62 e8       	ldi	r22, 0x82	; 130
    1212:	71 e0       	ldi	r23, 0x01	; 1
    1214:	0e 94 61 09 	call	0x12c2	; 0x12c2 <strcmp>
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	41 f5       	brne	.+80     	; 0x126c <serialComm+0x1d2>
			cTemp = num;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	9a 81       	ldd	r25, Y+2	; 0x02
    1220:	90 93 1b 03 	sts	0x031B, r25
    1224:	80 93 1a 03 	sts	0x031A, r24
			fprintf(stdout, "cTemp: %i\n\r", time_rem); 
    1228:	20 91 d7 02 	lds	r18, 0x02D7
    122c:	30 91 d8 02 	lds	r19, 0x02D8
    1230:	00 d0       	rcall	.+0      	; 0x1232 <serialComm+0x198>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <serialComm+0x19a>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <serialComm+0x19c>
    1236:	ed b7       	in	r30, 0x3d	; 61
    1238:	fe b7       	in	r31, 0x3e	; 62
    123a:	31 96       	adiw	r30, 0x01	; 1
    123c:	80 91 1e 03 	lds	r24, 0x031E
    1240:	90 91 1f 03 	lds	r25, 0x031F
    1244:	ad b7       	in	r26, 0x3d	; 61
    1246:	be b7       	in	r27, 0x3e	; 62
    1248:	12 96       	adiw	r26, 0x02	; 2
    124a:	9c 93       	st	X, r25
    124c:	8e 93       	st	-X, r24
    124e:	11 97       	sbiw	r26, 0x01	; 1
    1250:	f3 82       	std	Z+3, r15	; 0x03
    1252:	e2 82       	std	Z+2, r14	; 0x02
    1254:	35 83       	std	Z+5, r19	; 0x05
    1256:	24 83       	std	Z+4, r18	; 0x04
    1258:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fprintf>
    125c:	8d b7       	in	r24, 0x3d	; 61
    125e:	9e b7       	in	r25, 0x3e	; 62
    1260:	06 96       	adiw	r24, 0x06	; 6
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	9e bf       	out	0x3e, r25	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	8d bf       	out	0x3d, r24	; 61
		}
		trtSignal(SEM_SHARED);
    126c:	84 e0       	ldi	r24, 0x04	; 4
    126e:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
    1272:	3f cf       	rjmp	.-386    	; 0x10f2 <serialComm+0x58>

00001274 <__udivmodhi4>:
    1274:	aa 1b       	sub	r26, r26
    1276:	bb 1b       	sub	r27, r27
    1278:	51 e1       	ldi	r21, 0x11	; 17
    127a:	07 c0       	rjmp	.+14     	; 0x128a <__udivmodhi4_ep>

0000127c <__udivmodhi4_loop>:
    127c:	aa 1f       	adc	r26, r26
    127e:	bb 1f       	adc	r27, r27
    1280:	a6 17       	cp	r26, r22
    1282:	b7 07       	cpc	r27, r23
    1284:	10 f0       	brcs	.+4      	; 0x128a <__udivmodhi4_ep>
    1286:	a6 1b       	sub	r26, r22
    1288:	b7 0b       	sbc	r27, r23

0000128a <__udivmodhi4_ep>:
    128a:	88 1f       	adc	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	5a 95       	dec	r21
    1290:	a9 f7       	brne	.-22     	; 0x127c <__udivmodhi4_loop>
    1292:	80 95       	com	r24
    1294:	90 95       	com	r25
    1296:	bc 01       	movw	r22, r24
    1298:	cd 01       	movw	r24, r26
    129a:	08 95       	ret

0000129c <__divmodhi4>:
    129c:	97 fb       	bst	r25, 7
    129e:	09 2e       	mov	r0, r25
    12a0:	07 26       	eor	r0, r23
    12a2:	0a d0       	rcall	.+20     	; 0x12b8 <__divmodhi4_neg1>
    12a4:	77 fd       	sbrc	r23, 7
    12a6:	04 d0       	rcall	.+8      	; 0x12b0 <__divmodhi4_neg2>
    12a8:	e5 df       	rcall	.-54     	; 0x1274 <__udivmodhi4>
    12aa:	06 d0       	rcall	.+12     	; 0x12b8 <__divmodhi4_neg1>
    12ac:	00 20       	and	r0, r0
    12ae:	1a f4       	brpl	.+6      	; 0x12b6 <__divmodhi4_exit>

000012b0 <__divmodhi4_neg2>:
    12b0:	70 95       	com	r23
    12b2:	61 95       	neg	r22
    12b4:	7f 4f       	sbci	r23, 0xFF	; 255

000012b6 <__divmodhi4_exit>:
    12b6:	08 95       	ret

000012b8 <__divmodhi4_neg1>:
    12b8:	f6 f7       	brtc	.-4      	; 0x12b6 <__divmodhi4_exit>
    12ba:	90 95       	com	r25
    12bc:	81 95       	neg	r24
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	08 95       	ret

000012c2 <strcmp>:
    12c2:	fb 01       	movw	r30, r22
    12c4:	dc 01       	movw	r26, r24
    12c6:	8d 91       	ld	r24, X+
    12c8:	01 90       	ld	r0, Z+
    12ca:	80 19       	sub	r24, r0
    12cc:	01 10       	cpse	r0, r1
    12ce:	d9 f3       	breq	.-10     	; 0x12c6 <strcmp+0x4>
    12d0:	99 0b       	sbc	r25, r25
    12d2:	08 95       	ret

000012d4 <fprintf>:
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	9e 01       	movw	r18, r28
    12de:	27 5f       	subi	r18, 0xF7	; 247
    12e0:	3f 4f       	sbci	r19, 0xFF	; 255
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	6f 81       	ldd	r22, Y+7	; 0x07
    12e8:	78 85       	ldd	r23, Y+8	; 0x08
    12ea:	a9 01       	movw	r20, r18
    12ec:	0e 94 14 0a 	call	0x1428	; 0x1428 <vfprintf>
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <fputc>:
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	8c 01       	movw	r16, r24
    1300:	eb 01       	movw	r28, r22
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	81 ff       	sbrs	r24, 1
    1306:	1b c0       	rjmp	.+54     	; 0x133e <fputc+0x48>
    1308:	82 ff       	sbrs	r24, 2
    130a:	0d c0       	rjmp	.+26     	; 0x1326 <fputc+0x30>
    130c:	2e 81       	ldd	r18, Y+6	; 0x06
    130e:	3f 81       	ldd	r19, Y+7	; 0x07
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 17       	cp	r18, r24
    1316:	39 07       	cpc	r19, r25
    1318:	64 f4       	brge	.+24     	; 0x1332 <fputc+0x3c>
    131a:	e8 81       	ld	r30, Y
    131c:	f9 81       	ldd	r31, Y+1	; 0x01
    131e:	01 93       	st	Z+, r16
    1320:	f9 83       	std	Y+1, r31	; 0x01
    1322:	e8 83       	st	Y, r30
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <fputc+0x3c>
    1326:	e8 85       	ldd	r30, Y+8	; 0x08
    1328:	f9 85       	ldd	r31, Y+9	; 0x09
    132a:	80 2f       	mov	r24, r16
    132c:	09 95       	icall
    132e:	89 2b       	or	r24, r25
    1330:	31 f4       	brne	.+12     	; 0x133e <fputc+0x48>
    1332:	8e 81       	ldd	r24, Y+6	; 0x06
    1334:	9f 81       	ldd	r25, Y+7	; 0x07
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	9f 83       	std	Y+7, r25	; 0x07
    133a:	8e 83       	std	Y+6, r24	; 0x06
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <fputc+0x4c>
    133e:	0f ef       	ldi	r16, 0xFF	; 255
    1340:	1f ef       	ldi	r17, 0xFF	; 255
    1342:	c8 01       	movw	r24, r16
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <fputs>:
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	7c 01       	movw	r14, r24
    135c:	8b 01       	movw	r16, r22
    135e:	db 01       	movw	r26, r22
    1360:	13 96       	adiw	r26, 0x03	; 3
    1362:	8c 91       	ld	r24, X
    1364:	81 fd       	sbrc	r24, 1
    1366:	03 c0       	rjmp	.+6      	; 0x136e <fputs+0x20>
    1368:	cf ef       	ldi	r28, 0xFF	; 255
    136a:	df ef       	ldi	r29, 0xFF	; 255
    136c:	13 c0       	rjmp	.+38     	; 0x1394 <fputs+0x46>
    136e:	c0 e0       	ldi	r28, 0x00	; 0
    1370:	d0 e0       	ldi	r29, 0x00	; 0
    1372:	0b c0       	rjmp	.+22     	; 0x138a <fputs+0x3c>
    1374:	d8 01       	movw	r26, r16
    1376:	18 96       	adiw	r26, 0x08	; 8
    1378:	ed 91       	ld	r30, X+
    137a:	fc 91       	ld	r31, X
    137c:	19 97       	sbiw	r26, 0x09	; 9
    137e:	b8 01       	movw	r22, r16
    1380:	09 95       	icall
    1382:	89 2b       	or	r24, r25
    1384:	11 f0       	breq	.+4      	; 0x138a <fputs+0x3c>
    1386:	cf ef       	ldi	r28, 0xFF	; 255
    1388:	df ef       	ldi	r29, 0xFF	; 255
    138a:	f7 01       	movw	r30, r14
    138c:	81 91       	ld	r24, Z+
    138e:	7f 01       	movw	r14, r30
    1390:	88 23       	and	r24, r24
    1392:	81 f7       	brne	.-32     	; 0x1374 <fputs+0x26>
    1394:	ce 01       	movw	r24, r28
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	08 95       	ret

000013a4 <fscanf>:
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	9e 01       	movw	r18, r28
    13ae:	27 5f       	subi	r18, 0xF7	; 247
    13b0:	3f 4f       	sbci	r19, 0xFF	; 255
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	6f 81       	ldd	r22, Y+7	; 0x07
    13b8:	78 85       	ldd	r23, Y+8	; 0x08
    13ba:	a9 01       	movw	r20, r18
    13bc:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <vfscanf>
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <sprintf>:
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	2e 97       	sbiw	r28, 0x0e	; 14
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	0d 89       	ldd	r16, Y+21	; 0x15
    13e0:	1e 89       	ldd	r17, Y+22	; 0x16
    13e2:	86 e0       	ldi	r24, 0x06	; 6
    13e4:	8c 83       	std	Y+4, r24	; 0x04
    13e6:	1a 83       	std	Y+2, r17	; 0x02
    13e8:	09 83       	std	Y+1, r16	; 0x01
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	9f e7       	ldi	r25, 0x7F	; 127
    13ee:	9e 83       	std	Y+6, r25	; 0x06
    13f0:	8d 83       	std	Y+5, r24	; 0x05
    13f2:	9e 01       	movw	r18, r28
    13f4:	27 5e       	subi	r18, 0xE7	; 231
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	6f 89       	ldd	r22, Y+23	; 0x17
    13fe:	78 8d       	ldd	r23, Y+24	; 0x18
    1400:	a9 01       	movw	r20, r18
    1402:	0e 94 14 0a 	call	0x1428	; 0x1428 <vfprintf>
    1406:	2f 81       	ldd	r18, Y+7	; 0x07
    1408:	38 85       	ldd	r19, Y+8	; 0x08
    140a:	02 0f       	add	r16, r18
    140c:	13 1f       	adc	r17, r19
    140e:	f8 01       	movw	r30, r16
    1410:	10 82       	st	Z, r1
    1412:	2e 96       	adiw	r28, 0x0e	; 14
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	08 95       	ret

00001428 <vfprintf>:
    1428:	2f 92       	push	r2
    142a:	3f 92       	push	r3
    142c:	4f 92       	push	r4
    142e:	5f 92       	push	r5
    1430:	6f 92       	push	r6
    1432:	7f 92       	push	r7
    1434:	8f 92       	push	r8
    1436:	9f 92       	push	r9
    1438:	af 92       	push	r10
    143a:	bf 92       	push	r11
    143c:	cf 92       	push	r12
    143e:	df 92       	push	r13
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	2b 97       	sbiw	r28, 0x0b	; 11
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	3c 01       	movw	r6, r24
    145e:	2b 01       	movw	r4, r22
    1460:	5a 01       	movw	r10, r20
    1462:	fc 01       	movw	r30, r24
    1464:	17 82       	std	Z+7, r1	; 0x07
    1466:	16 82       	std	Z+6, r1	; 0x06
    1468:	83 81       	ldd	r24, Z+3	; 0x03
    146a:	81 fd       	sbrc	r24, 1
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <vfprintf+0x4c>
    146e:	6f ef       	ldi	r22, 0xFF	; 255
    1470:	7f ef       	ldi	r23, 0xFF	; 255
    1472:	c6 c1       	rjmp	.+908    	; 0x1800 <vfprintf+0x3d8>
    1474:	9a e0       	ldi	r25, 0x0A	; 10
    1476:	89 2e       	mov	r8, r25
    1478:	1e 01       	movw	r2, r28
    147a:	08 94       	sec
    147c:	21 1c       	adc	r2, r1
    147e:	31 1c       	adc	r3, r1
    1480:	f3 01       	movw	r30, r6
    1482:	23 81       	ldd	r18, Z+3	; 0x03
    1484:	f2 01       	movw	r30, r4
    1486:	23 fd       	sbrc	r18, 3
    1488:	85 91       	lpm	r24, Z+
    148a:	23 ff       	sbrs	r18, 3
    148c:	81 91       	ld	r24, Z+
    148e:	2f 01       	movw	r4, r30
    1490:	88 23       	and	r24, r24
    1492:	09 f4       	brne	.+2      	; 0x1496 <vfprintf+0x6e>
    1494:	b2 c1       	rjmp	.+868    	; 0x17fa <vfprintf+0x3d2>
    1496:	85 32       	cpi	r24, 0x25	; 37
    1498:	39 f4       	brne	.+14     	; 0x14a8 <vfprintf+0x80>
    149a:	23 fd       	sbrc	r18, 3
    149c:	85 91       	lpm	r24, Z+
    149e:	23 ff       	sbrs	r18, 3
    14a0:	81 91       	ld	r24, Z+
    14a2:	2f 01       	movw	r4, r30
    14a4:	85 32       	cpi	r24, 0x25	; 37
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <vfprintf+0x8a>
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	b3 01       	movw	r22, r6
    14ac:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <fputc>
    14b0:	e7 cf       	rjmp	.-50     	; 0x1480 <vfprintf+0x58>
    14b2:	98 2f       	mov	r25, r24
    14b4:	ff 24       	eor	r15, r15
    14b6:	ee 24       	eor	r14, r14
    14b8:	99 24       	eor	r9, r9
    14ba:	ff e1       	ldi	r31, 0x1F	; 31
    14bc:	ff 15       	cp	r31, r15
    14be:	d0 f0       	brcs	.+52     	; 0x14f4 <vfprintf+0xcc>
    14c0:	9b 32       	cpi	r25, 0x2B	; 43
    14c2:	69 f0       	breq	.+26     	; 0x14de <vfprintf+0xb6>
    14c4:	9c 32       	cpi	r25, 0x2C	; 44
    14c6:	28 f4       	brcc	.+10     	; 0x14d2 <vfprintf+0xaa>
    14c8:	90 32       	cpi	r25, 0x20	; 32
    14ca:	59 f0       	breq	.+22     	; 0x14e2 <vfprintf+0xba>
    14cc:	93 32       	cpi	r25, 0x23	; 35
    14ce:	91 f4       	brne	.+36     	; 0x14f4 <vfprintf+0xcc>
    14d0:	0e c0       	rjmp	.+28     	; 0x14ee <vfprintf+0xc6>
    14d2:	9d 32       	cpi	r25, 0x2D	; 45
    14d4:	49 f0       	breq	.+18     	; 0x14e8 <vfprintf+0xc0>
    14d6:	90 33       	cpi	r25, 0x30	; 48
    14d8:	69 f4       	brne	.+26     	; 0x14f4 <vfprintf+0xcc>
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	24 c0       	rjmp	.+72     	; 0x1526 <vfprintf+0xfe>
    14de:	52 e0       	ldi	r21, 0x02	; 2
    14e0:	f5 2a       	or	r15, r21
    14e2:	84 e0       	ldi	r24, 0x04	; 4
    14e4:	f8 2a       	or	r15, r24
    14e6:	28 c0       	rjmp	.+80     	; 0x1538 <vfprintf+0x110>
    14e8:	98 e0       	ldi	r25, 0x08	; 8
    14ea:	f9 2a       	or	r15, r25
    14ec:	25 c0       	rjmp	.+74     	; 0x1538 <vfprintf+0x110>
    14ee:	e0 e1       	ldi	r30, 0x10	; 16
    14f0:	fe 2a       	or	r15, r30
    14f2:	22 c0       	rjmp	.+68     	; 0x1538 <vfprintf+0x110>
    14f4:	f7 fc       	sbrc	r15, 7
    14f6:	29 c0       	rjmp	.+82     	; 0x154a <vfprintf+0x122>
    14f8:	89 2f       	mov	r24, r25
    14fa:	80 53       	subi	r24, 0x30	; 48
    14fc:	8a 30       	cpi	r24, 0x0A	; 10
    14fe:	70 f4       	brcc	.+28     	; 0x151c <vfprintf+0xf4>
    1500:	f6 fe       	sbrs	r15, 6
    1502:	05 c0       	rjmp	.+10     	; 0x150e <vfprintf+0xe6>
    1504:	98 9c       	mul	r9, r8
    1506:	90 2c       	mov	r9, r0
    1508:	11 24       	eor	r1, r1
    150a:	98 0e       	add	r9, r24
    150c:	15 c0       	rjmp	.+42     	; 0x1538 <vfprintf+0x110>
    150e:	e8 9c       	mul	r14, r8
    1510:	e0 2c       	mov	r14, r0
    1512:	11 24       	eor	r1, r1
    1514:	e8 0e       	add	r14, r24
    1516:	f0 e2       	ldi	r31, 0x20	; 32
    1518:	ff 2a       	or	r15, r31
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <vfprintf+0x110>
    151c:	9e 32       	cpi	r25, 0x2E	; 46
    151e:	29 f4       	brne	.+10     	; 0x152a <vfprintf+0x102>
    1520:	f6 fc       	sbrc	r15, 6
    1522:	6b c1       	rjmp	.+726    	; 0x17fa <vfprintf+0x3d2>
    1524:	40 e4       	ldi	r20, 0x40	; 64
    1526:	f4 2a       	or	r15, r20
    1528:	07 c0       	rjmp	.+14     	; 0x1538 <vfprintf+0x110>
    152a:	9c 36       	cpi	r25, 0x6C	; 108
    152c:	19 f4       	brne	.+6      	; 0x1534 <vfprintf+0x10c>
    152e:	50 e8       	ldi	r21, 0x80	; 128
    1530:	f5 2a       	or	r15, r21
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <vfprintf+0x110>
    1534:	98 36       	cpi	r25, 0x68	; 104
    1536:	49 f4       	brne	.+18     	; 0x154a <vfprintf+0x122>
    1538:	f2 01       	movw	r30, r4
    153a:	23 fd       	sbrc	r18, 3
    153c:	95 91       	lpm	r25, Z+
    153e:	23 ff       	sbrs	r18, 3
    1540:	91 91       	ld	r25, Z+
    1542:	2f 01       	movw	r4, r30
    1544:	99 23       	and	r25, r25
    1546:	09 f0       	breq	.+2      	; 0x154a <vfprintf+0x122>
    1548:	b8 cf       	rjmp	.-144    	; 0x14ba <vfprintf+0x92>
    154a:	89 2f       	mov	r24, r25
    154c:	85 54       	subi	r24, 0x45	; 69
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	18 f0       	brcs	.+6      	; 0x1558 <vfprintf+0x130>
    1552:	80 52       	subi	r24, 0x20	; 32
    1554:	83 30       	cpi	r24, 0x03	; 3
    1556:	38 f4       	brcc	.+14     	; 0x1566 <vfprintf+0x13e>
    1558:	44 e0       	ldi	r20, 0x04	; 4
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	a4 0e       	add	r10, r20
    155e:	b5 1e       	adc	r11, r21
    1560:	5f e3       	ldi	r21, 0x3F	; 63
    1562:	59 83       	std	Y+1, r21	; 0x01
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <vfprintf+0x15c>
    1566:	93 36       	cpi	r25, 0x63	; 99
    1568:	31 f0       	breq	.+12     	; 0x1576 <vfprintf+0x14e>
    156a:	93 37       	cpi	r25, 0x73	; 115
    156c:	79 f0       	breq	.+30     	; 0x158c <vfprintf+0x164>
    156e:	93 35       	cpi	r25, 0x53	; 83
    1570:	09 f0       	breq	.+2      	; 0x1574 <vfprintf+0x14c>
    1572:	56 c0       	rjmp	.+172    	; 0x1620 <vfprintf+0x1f8>
    1574:	20 c0       	rjmp	.+64     	; 0x15b6 <vfprintf+0x18e>
    1576:	f5 01       	movw	r30, r10
    1578:	80 81       	ld	r24, Z
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	42 e0       	ldi	r20, 0x02	; 2
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	a4 0e       	add	r10, r20
    1582:	b5 1e       	adc	r11, r21
    1584:	61 01       	movw	r12, r2
    1586:	01 e0       	ldi	r16, 0x01	; 1
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	12 c0       	rjmp	.+36     	; 0x15b0 <vfprintf+0x188>
    158c:	f5 01       	movw	r30, r10
    158e:	c0 80       	ld	r12, Z
    1590:	d1 80       	ldd	r13, Z+1	; 0x01
    1592:	f6 fc       	sbrc	r15, 6
    1594:	03 c0       	rjmp	.+6      	; 0x159c <vfprintf+0x174>
    1596:	6f ef       	ldi	r22, 0xFF	; 255
    1598:	7f ef       	ldi	r23, 0xFF	; 255
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <vfprintf+0x178>
    159c:	69 2d       	mov	r22, r9
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	42 e0       	ldi	r20, 0x02	; 2
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	a4 0e       	add	r10, r20
    15a6:	b5 1e       	adc	r11, r21
    15a8:	c6 01       	movw	r24, r12
    15aa:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <strnlen>
    15ae:	8c 01       	movw	r16, r24
    15b0:	5f e7       	ldi	r21, 0x7F	; 127
    15b2:	f5 22       	and	r15, r21
    15b4:	14 c0       	rjmp	.+40     	; 0x15de <vfprintf+0x1b6>
    15b6:	f5 01       	movw	r30, r10
    15b8:	c0 80       	ld	r12, Z
    15ba:	d1 80       	ldd	r13, Z+1	; 0x01
    15bc:	f6 fc       	sbrc	r15, 6
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <vfprintf+0x19e>
    15c0:	6f ef       	ldi	r22, 0xFF	; 255
    15c2:	7f ef       	ldi	r23, 0xFF	; 255
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <vfprintf+0x1a2>
    15c6:	69 2d       	mov	r22, r9
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	42 e0       	ldi	r20, 0x02	; 2
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	a4 0e       	add	r10, r20
    15d0:	b5 1e       	adc	r11, r21
    15d2:	c6 01       	movw	r24, r12
    15d4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <strnlen_P>
    15d8:	8c 01       	movw	r16, r24
    15da:	50 e8       	ldi	r21, 0x80	; 128
    15dc:	f5 2a       	or	r15, r21
    15de:	f3 fe       	sbrs	r15, 3
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <vfprintf+0x1c8>
    15e2:	1a c0       	rjmp	.+52     	; 0x1618 <vfprintf+0x1f0>
    15e4:	80 e2       	ldi	r24, 0x20	; 32
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	b3 01       	movw	r22, r6
    15ea:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <fputc>
    15ee:	ea 94       	dec	r14
    15f0:	8e 2d       	mov	r24, r14
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	08 17       	cp	r16, r24
    15f6:	19 07       	cpc	r17, r25
    15f8:	a8 f3       	brcs	.-22     	; 0x15e4 <vfprintf+0x1bc>
    15fa:	0e c0       	rjmp	.+28     	; 0x1618 <vfprintf+0x1f0>
    15fc:	f6 01       	movw	r30, r12
    15fe:	f7 fc       	sbrc	r15, 7
    1600:	85 91       	lpm	r24, Z+
    1602:	f7 fe       	sbrs	r15, 7
    1604:	81 91       	ld	r24, Z+
    1606:	6f 01       	movw	r12, r30
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	b3 01       	movw	r22, r6
    160c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <fputc>
    1610:	e1 10       	cpse	r14, r1
    1612:	ea 94       	dec	r14
    1614:	01 50       	subi	r16, 0x01	; 1
    1616:	10 40       	sbci	r17, 0x00	; 0
    1618:	01 15       	cp	r16, r1
    161a:	11 05       	cpc	r17, r1
    161c:	79 f7       	brne	.-34     	; 0x15fc <vfprintf+0x1d4>
    161e:	ea c0       	rjmp	.+468    	; 0x17f4 <vfprintf+0x3cc>
    1620:	94 36       	cpi	r25, 0x64	; 100
    1622:	11 f0       	breq	.+4      	; 0x1628 <vfprintf+0x200>
    1624:	99 36       	cpi	r25, 0x69	; 105
    1626:	69 f5       	brne	.+90     	; 0x1682 <vfprintf+0x25a>
    1628:	f7 fe       	sbrs	r15, 7
    162a:	08 c0       	rjmp	.+16     	; 0x163c <vfprintf+0x214>
    162c:	f5 01       	movw	r30, r10
    162e:	20 81       	ld	r18, Z
    1630:	31 81       	ldd	r19, Z+1	; 0x01
    1632:	42 81       	ldd	r20, Z+2	; 0x02
    1634:	53 81       	ldd	r21, Z+3	; 0x03
    1636:	84 e0       	ldi	r24, 0x04	; 4
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0a c0       	rjmp	.+20     	; 0x1650 <vfprintf+0x228>
    163c:	f5 01       	movw	r30, r10
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	9c 01       	movw	r18, r24
    1644:	44 27       	eor	r20, r20
    1646:	37 fd       	sbrc	r19, 7
    1648:	40 95       	com	r20
    164a:	54 2f       	mov	r21, r20
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a8 0e       	add	r10, r24
    1652:	b9 1e       	adc	r11, r25
    1654:	9f e6       	ldi	r25, 0x6F	; 111
    1656:	f9 22       	and	r15, r25
    1658:	57 ff       	sbrs	r21, 7
    165a:	09 c0       	rjmp	.+18     	; 0x166e <vfprintf+0x246>
    165c:	50 95       	com	r21
    165e:	40 95       	com	r20
    1660:	30 95       	com	r19
    1662:	21 95       	neg	r18
    1664:	3f 4f       	sbci	r19, 0xFF	; 255
    1666:	4f 4f       	sbci	r20, 0xFF	; 255
    1668:	5f 4f       	sbci	r21, 0xFF	; 255
    166a:	e0 e8       	ldi	r30, 0x80	; 128
    166c:	fe 2a       	or	r15, r30
    166e:	ca 01       	movw	r24, r20
    1670:	b9 01       	movw	r22, r18
    1672:	a1 01       	movw	r20, r2
    1674:	2a e0       	ldi	r18, 0x0A	; 10
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__ultoa_invert>
    167c:	d8 2e       	mov	r13, r24
    167e:	d2 18       	sub	r13, r2
    1680:	40 c0       	rjmp	.+128    	; 0x1702 <vfprintf+0x2da>
    1682:	95 37       	cpi	r25, 0x75	; 117
    1684:	29 f4       	brne	.+10     	; 0x1690 <vfprintf+0x268>
    1686:	1f 2d       	mov	r17, r15
    1688:	1f 7e       	andi	r17, 0xEF	; 239
    168a:	2a e0       	ldi	r18, 0x0A	; 10
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	1d c0       	rjmp	.+58     	; 0x16ca <vfprintf+0x2a2>
    1690:	1f 2d       	mov	r17, r15
    1692:	19 7f       	andi	r17, 0xF9	; 249
    1694:	9f 36       	cpi	r25, 0x6F	; 111
    1696:	61 f0       	breq	.+24     	; 0x16b0 <vfprintf+0x288>
    1698:	90 37       	cpi	r25, 0x70	; 112
    169a:	20 f4       	brcc	.+8      	; 0x16a4 <vfprintf+0x27c>
    169c:	98 35       	cpi	r25, 0x58	; 88
    169e:	09 f0       	breq	.+2      	; 0x16a2 <vfprintf+0x27a>
    16a0:	ac c0       	rjmp	.+344    	; 0x17fa <vfprintf+0x3d2>
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <vfprintf+0x29a>
    16a4:	90 37       	cpi	r25, 0x70	; 112
    16a6:	39 f0       	breq	.+14     	; 0x16b6 <vfprintf+0x28e>
    16a8:	98 37       	cpi	r25, 0x78	; 120
    16aa:	09 f0       	breq	.+2      	; 0x16ae <vfprintf+0x286>
    16ac:	a6 c0       	rjmp	.+332    	; 0x17fa <vfprintf+0x3d2>
    16ae:	04 c0       	rjmp	.+8      	; 0x16b8 <vfprintf+0x290>
    16b0:	28 e0       	ldi	r18, 0x08	; 8
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	0a c0       	rjmp	.+20     	; 0x16ca <vfprintf+0x2a2>
    16b6:	10 61       	ori	r17, 0x10	; 16
    16b8:	14 fd       	sbrc	r17, 4
    16ba:	14 60       	ori	r17, 0x04	; 4
    16bc:	20 e1       	ldi	r18, 0x10	; 16
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	04 c0       	rjmp	.+8      	; 0x16ca <vfprintf+0x2a2>
    16c2:	14 fd       	sbrc	r17, 4
    16c4:	16 60       	ori	r17, 0x06	; 6
    16c6:	20 e1       	ldi	r18, 0x10	; 16
    16c8:	32 e0       	ldi	r19, 0x02	; 2
    16ca:	17 ff       	sbrs	r17, 7
    16cc:	08 c0       	rjmp	.+16     	; 0x16de <vfprintf+0x2b6>
    16ce:	f5 01       	movw	r30, r10
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	44 e0       	ldi	r20, 0x04	; 4
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	08 c0       	rjmp	.+16     	; 0x16ee <vfprintf+0x2c6>
    16de:	f5 01       	movw	r30, r10
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	bc 01       	movw	r22, r24
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	42 e0       	ldi	r20, 0x02	; 2
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	a4 0e       	add	r10, r20
    16f0:	b5 1e       	adc	r11, r21
    16f2:	a1 01       	movw	r20, r2
    16f4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__ultoa_invert>
    16f8:	d8 2e       	mov	r13, r24
    16fa:	d2 18       	sub	r13, r2
    16fc:	8f e7       	ldi	r24, 0x7F	; 127
    16fe:	f8 2e       	mov	r15, r24
    1700:	f1 22       	and	r15, r17
    1702:	f6 fe       	sbrs	r15, 6
    1704:	0b c0       	rjmp	.+22     	; 0x171c <vfprintf+0x2f4>
    1706:	5e ef       	ldi	r21, 0xFE	; 254
    1708:	f5 22       	and	r15, r21
    170a:	d9 14       	cp	r13, r9
    170c:	38 f4       	brcc	.+14     	; 0x171c <vfprintf+0x2f4>
    170e:	f4 fe       	sbrs	r15, 4
    1710:	07 c0       	rjmp	.+14     	; 0x1720 <vfprintf+0x2f8>
    1712:	f2 fc       	sbrc	r15, 2
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <vfprintf+0x2f8>
    1716:	8f ee       	ldi	r24, 0xEF	; 239
    1718:	f8 22       	and	r15, r24
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <vfprintf+0x2f8>
    171c:	1d 2d       	mov	r17, r13
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <vfprintf+0x2fa>
    1720:	19 2d       	mov	r17, r9
    1722:	f4 fe       	sbrs	r15, 4
    1724:	0d c0       	rjmp	.+26     	; 0x1740 <vfprintf+0x318>
    1726:	fe 01       	movw	r30, r28
    1728:	ed 0d       	add	r30, r13
    172a:	f1 1d       	adc	r31, r1
    172c:	80 81       	ld	r24, Z
    172e:	80 33       	cpi	r24, 0x30	; 48
    1730:	19 f4       	brne	.+6      	; 0x1738 <vfprintf+0x310>
    1732:	99 ee       	ldi	r25, 0xE9	; 233
    1734:	f9 22       	and	r15, r25
    1736:	08 c0       	rjmp	.+16     	; 0x1748 <vfprintf+0x320>
    1738:	1f 5f       	subi	r17, 0xFF	; 255
    173a:	f2 fe       	sbrs	r15, 2
    173c:	05 c0       	rjmp	.+10     	; 0x1748 <vfprintf+0x320>
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <vfprintf+0x31e>
    1740:	8f 2d       	mov	r24, r15
    1742:	86 78       	andi	r24, 0x86	; 134
    1744:	09 f0       	breq	.+2      	; 0x1748 <vfprintf+0x320>
    1746:	1f 5f       	subi	r17, 0xFF	; 255
    1748:	0f 2d       	mov	r16, r15
    174a:	f3 fc       	sbrc	r15, 3
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <vfprintf+0x34e>
    174e:	f0 fe       	sbrs	r15, 0
    1750:	0f c0       	rjmp	.+30     	; 0x1770 <vfprintf+0x348>
    1752:	1e 15       	cp	r17, r14
    1754:	10 f0       	brcs	.+4      	; 0x175a <vfprintf+0x332>
    1756:	9d 2c       	mov	r9, r13
    1758:	0b c0       	rjmp	.+22     	; 0x1770 <vfprintf+0x348>
    175a:	9d 2c       	mov	r9, r13
    175c:	9e 0c       	add	r9, r14
    175e:	91 1a       	sub	r9, r17
    1760:	1e 2d       	mov	r17, r14
    1762:	06 c0       	rjmp	.+12     	; 0x1770 <vfprintf+0x348>
    1764:	80 e2       	ldi	r24, 0x20	; 32
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	b3 01       	movw	r22, r6
    176a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <fputc>
    176e:	1f 5f       	subi	r17, 0xFF	; 255
    1770:	1e 15       	cp	r17, r14
    1772:	c0 f3       	brcs	.-16     	; 0x1764 <vfprintf+0x33c>
    1774:	04 c0       	rjmp	.+8      	; 0x177e <vfprintf+0x356>
    1776:	1e 15       	cp	r17, r14
    1778:	10 f4       	brcc	.+4      	; 0x177e <vfprintf+0x356>
    177a:	e1 1a       	sub	r14, r17
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <vfprintf+0x358>
    177e:	ee 24       	eor	r14, r14
    1780:	04 ff       	sbrs	r16, 4
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <vfprintf+0x37a>
    1784:	80 e3       	ldi	r24, 0x30	; 48
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	b3 01       	movw	r22, r6
    178a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <fputc>
    178e:	02 ff       	sbrs	r16, 2
    1790:	1d c0       	rjmp	.+58     	; 0x17cc <vfprintf+0x3a4>
    1792:	01 fd       	sbrc	r16, 1
    1794:	03 c0       	rjmp	.+6      	; 0x179c <vfprintf+0x374>
    1796:	88 e7       	ldi	r24, 0x78	; 120
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e c0       	rjmp	.+28     	; 0x17b8 <vfprintf+0x390>
    179c:	88 e5       	ldi	r24, 0x58	; 88
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0b c0       	rjmp	.+22     	; 0x17b8 <vfprintf+0x390>
    17a2:	80 2f       	mov	r24, r16
    17a4:	86 78       	andi	r24, 0x86	; 134
    17a6:	91 f0       	breq	.+36     	; 0x17cc <vfprintf+0x3a4>
    17a8:	01 ff       	sbrs	r16, 1
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <vfprintf+0x388>
    17ac:	8b e2       	ldi	r24, 0x2B	; 43
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <vfprintf+0x38a>
    17b0:	80 e2       	ldi	r24, 0x20	; 32
    17b2:	f7 fc       	sbrc	r15, 7
    17b4:	8d e2       	ldi	r24, 0x2D	; 45
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	b3 01       	movw	r22, r6
    17ba:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <fputc>
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <vfprintf+0x3a4>
    17c0:	80 e3       	ldi	r24, 0x30	; 48
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	b3 01       	movw	r22, r6
    17c6:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <fputc>
    17ca:	9a 94       	dec	r9
    17cc:	d9 14       	cp	r13, r9
    17ce:	c0 f3       	brcs	.-16     	; 0x17c0 <vfprintf+0x398>
    17d0:	da 94       	dec	r13
    17d2:	f1 01       	movw	r30, r2
    17d4:	ed 0d       	add	r30, r13
    17d6:	f1 1d       	adc	r31, r1
    17d8:	80 81       	ld	r24, Z
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	b3 01       	movw	r22, r6
    17de:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <fputc>
    17e2:	dd 20       	and	r13, r13
    17e4:	a9 f7       	brne	.-22     	; 0x17d0 <vfprintf+0x3a8>
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0x3cc>
    17e8:	80 e2       	ldi	r24, 0x20	; 32
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	b3 01       	movw	r22, r6
    17ee:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <fputc>
    17f2:	ea 94       	dec	r14
    17f4:	ee 20       	and	r14, r14
    17f6:	c1 f7       	brne	.-16     	; 0x17e8 <vfprintf+0x3c0>
    17f8:	43 ce       	rjmp	.-890    	; 0x1480 <vfprintf+0x58>
    17fa:	f3 01       	movw	r30, r6
    17fc:	66 81       	ldd	r22, Z+6	; 0x06
    17fe:	77 81       	ldd	r23, Z+7	; 0x07
    1800:	cb 01       	movw	r24, r22
    1802:	2b 96       	adiw	r28, 0x0b	; 11
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	df 90       	pop	r13
    181c:	cf 90       	pop	r12
    181e:	bf 90       	pop	r11
    1820:	af 90       	pop	r10
    1822:	9f 90       	pop	r9
    1824:	8f 90       	pop	r8
    1826:	7f 90       	pop	r7
    1828:	6f 90       	pop	r6
    182a:	5f 90       	pop	r5
    182c:	4f 90       	pop	r4
    182e:	3f 90       	pop	r3
    1830:	2f 90       	pop	r2
    1832:	08 95       	ret

00001834 <putval>:
    1834:	fc 01       	movw	r30, r24
    1836:	20 fd       	sbrc	r18, 0
    1838:	08 c0       	rjmp	.+16     	; 0x184a <putval+0x16>
    183a:	23 fd       	sbrc	r18, 3
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <putval+0x14>
    183e:	22 ff       	sbrs	r18, 2
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <putval+0x12>
    1842:	73 83       	std	Z+3, r23	; 0x03
    1844:	62 83       	std	Z+2, r22	; 0x02
    1846:	51 83       	std	Z+1, r21	; 0x01
    1848:	40 83       	st	Z, r20
    184a:	08 95       	ret

0000184c <mulacc>:
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	44 ff       	sbrs	r20, 4
    1856:	02 c0       	rjmp	.+4      	; 0x185c <mulacc+0x10>
    1858:	33 e0       	ldi	r19, 0x03	; 3
    185a:	11 c0       	rjmp	.+34     	; 0x187e <mulacc+0x32>
    185c:	46 ff       	sbrs	r20, 6
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <mulacc+0x18>
    1860:	34 e0       	ldi	r19, 0x04	; 4
    1862:	0d c0       	rjmp	.+26     	; 0x187e <mulacc+0x32>
    1864:	db 01       	movw	r26, r22
    1866:	fc 01       	movw	r30, r24
    1868:	aa 0f       	add	r26, r26
    186a:	bb 1f       	adc	r27, r27
    186c:	ee 1f       	adc	r30, r30
    186e:	ff 1f       	adc	r31, r31
    1870:	10 94       	com	r1
    1872:	d1 f7       	brne	.-12     	; 0x1868 <mulacc+0x1c>
    1874:	6a 0f       	add	r22, r26
    1876:	7b 1f       	adc	r23, r27
    1878:	8e 1f       	adc	r24, r30
    187a:	9f 1f       	adc	r25, r31
    187c:	31 e0       	ldi	r19, 0x01	; 1
    187e:	66 0f       	add	r22, r22
    1880:	77 1f       	adc	r23, r23
    1882:	88 1f       	adc	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	31 50       	subi	r19, 0x01	; 1
    1888:	d1 f7       	brne	.-12     	; 0x187e <mulacc+0x32>
    188a:	7b 01       	movw	r14, r22
    188c:	8c 01       	movw	r16, r24
    188e:	e2 0e       	add	r14, r18
    1890:	f1 1c       	adc	r15, r1
    1892:	01 1d       	adc	r16, r1
    1894:	11 1d       	adc	r17, r1
    1896:	a8 01       	movw	r20, r16
    1898:	97 01       	movw	r18, r14
    189a:	b7 01       	movw	r22, r14
    189c:	ca 01       	movw	r24, r20
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	08 95       	ret

000018a8 <skip_spaces>:
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	8c 01       	movw	r16, r24
    18b2:	c8 01       	movw	r24, r16
    18b4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <fgetc>
    18b8:	ec 01       	movw	r28, r24
    18ba:	97 fd       	sbrc	r25, 7
    18bc:	08 c0       	rjmp	.+16     	; 0x18ce <skip_spaces+0x26>
    18be:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <isspace>
    18c2:	89 2b       	or	r24, r25
    18c4:	b1 f7       	brne	.-20     	; 0x18b2 <skip_spaces+0xa>
    18c6:	ce 01       	movw	r24, r28
    18c8:	b8 01       	movw	r22, r16
    18ca:	0e 94 57 0f 	call	0x1eae	; 0x1eae <ungetc>
    18ce:	ce 01       	movw	r24, r28
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	08 95       	ret

000018da <conv_int>:
    18da:	af 92       	push	r10
    18dc:	bf 92       	push	r11
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	ec 01       	movw	r28, r24
    18f0:	c6 2e       	mov	r12, r22
    18f2:	5a 01       	movw	r10, r20
    18f4:	12 2f       	mov	r17, r18
    18f6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <fgetc>
    18fa:	ac 01       	movw	r20, r24
    18fc:	8b 32       	cpi	r24, 0x2B	; 43
    18fe:	19 f0       	breq	.+6      	; 0x1906 <conv_int+0x2c>
    1900:	8d 32       	cpi	r24, 0x2D	; 45
    1902:	51 f4       	brne	.+20     	; 0x1918 <conv_int+0x3e>
    1904:	10 68       	ori	r17, 0x80	; 128
    1906:	ca 94       	dec	r12
    1908:	09 f4       	brne	.+2      	; 0x190c <conv_int+0x32>
    190a:	6d c0       	rjmp	.+218    	; 0x19e6 <conv_int+0x10c>
    190c:	ce 01       	movw	r24, r28
    190e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <fgetc>
    1912:	ac 01       	movw	r20, r24
    1914:	97 fd       	sbrc	r25, 7
    1916:	67 c0       	rjmp	.+206    	; 0x19e6 <conv_int+0x10c>
    1918:	6d ef       	ldi	r22, 0xFD	; 253
    191a:	d6 2e       	mov	r13, r22
    191c:	d1 22       	and	r13, r17
    191e:	8d 2d       	mov	r24, r13
    1920:	80 73       	andi	r24, 0x30	; 48
    1922:	01 f5       	brne	.+64     	; 0x1964 <conv_int+0x8a>
    1924:	40 33       	cpi	r20, 0x30	; 48
    1926:	f1 f4       	brne	.+60     	; 0x1964 <conv_int+0x8a>
    1928:	ca 94       	dec	r12
    192a:	09 f4       	brne	.+2      	; 0x192e <conv_int+0x54>
    192c:	47 c0       	rjmp	.+142    	; 0x19bc <conv_int+0xe2>
    192e:	ce 01       	movw	r24, r28
    1930:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <fgetc>
    1934:	ac 01       	movw	r20, r24
    1936:	97 fd       	sbrc	r25, 7
    1938:	41 c0       	rjmp	.+130    	; 0x19bc <conv_int+0xe2>
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	d8 2a       	or	r13, r24
    193e:	48 37       	cpi	r20, 0x78	; 120
    1940:	11 f0       	breq	.+4      	; 0x1946 <conv_int+0x6c>
    1942:	48 35       	cpi	r20, 0x58	; 88
    1944:	59 f4       	brne	.+22     	; 0x195c <conv_int+0x82>
    1946:	80 e4       	ldi	r24, 0x40	; 64
    1948:	d8 2a       	or	r13, r24
    194a:	ca 94       	dec	r12
    194c:	b9 f1       	breq	.+110    	; 0x19bc <conv_int+0xe2>
    194e:	ce 01       	movw	r24, r28
    1950:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <fgetc>
    1954:	ac 01       	movw	r20, r24
    1956:	99 23       	and	r25, r25
    1958:	2c f4       	brge	.+10     	; 0x1964 <conv_int+0x8a>
    195a:	30 c0       	rjmp	.+96     	; 0x19bc <conv_int+0xe2>
    195c:	d6 fc       	sbrc	r13, 6
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <conv_int+0x8a>
    1960:	80 e1       	ldi	r24, 0x10	; 16
    1962:	d8 2a       	or	r13, r24
    1964:	ee 24       	eor	r14, r14
    1966:	ff 24       	eor	r15, r15
    1968:	87 01       	movw	r16, r14
    196a:	24 2f       	mov	r18, r20
    196c:	20 53       	subi	r18, 0x30	; 48
    196e:	28 30       	cpi	r18, 0x08	; 8
    1970:	88 f0       	brcs	.+34     	; 0x1994 <conv_int+0xba>
    1972:	d4 fc       	sbrc	r13, 4
    1974:	09 c0       	rjmp	.+18     	; 0x1988 <conv_int+0xae>
    1976:	2a 30       	cpi	r18, 0x0A	; 10
    1978:	68 f0       	brcs	.+26     	; 0x1994 <conv_int+0xba>
    197a:	d6 fe       	sbrs	r13, 6
    197c:	05 c0       	rjmp	.+10     	; 0x1988 <conv_int+0xae>
    197e:	2f 7d       	andi	r18, 0xDF	; 223
    1980:	82 2f       	mov	r24, r18
    1982:	81 51       	subi	r24, 0x11	; 17
    1984:	86 30       	cpi	r24, 0x06	; 6
    1986:	28 f0       	brcs	.+10     	; 0x1992 <conv_int+0xb8>
    1988:	ca 01       	movw	r24, r20
    198a:	be 01       	movw	r22, r28
    198c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <ungetc>
    1990:	12 c0       	rjmp	.+36     	; 0x19b6 <conv_int+0xdc>
    1992:	27 50       	subi	r18, 0x07	; 7
    1994:	c8 01       	movw	r24, r16
    1996:	b7 01       	movw	r22, r14
    1998:	4d 2d       	mov	r20, r13
    199a:	0e 94 26 0c 	call	0x184c	; 0x184c <mulacc>
    199e:	7b 01       	movw	r14, r22
    19a0:	8c 01       	movw	r16, r24
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	d8 2a       	or	r13, r24
    19a6:	ca 94       	dec	r12
    19a8:	61 f0       	breq	.+24     	; 0x19c2 <conv_int+0xe8>
    19aa:	ce 01       	movw	r24, r28
    19ac:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <fgetc>
    19b0:	ac 01       	movw	r20, r24
    19b2:	97 ff       	sbrs	r25, 7
    19b4:	da cf       	rjmp	.-76     	; 0x196a <conv_int+0x90>
    19b6:	d1 fc       	sbrc	r13, 1
    19b8:	04 c0       	rjmp	.+8      	; 0x19c2 <conv_int+0xe8>
    19ba:	15 c0       	rjmp	.+42     	; 0x19e6 <conv_int+0x10c>
    19bc:	ee 24       	eor	r14, r14
    19be:	ff 24       	eor	r15, r15
    19c0:	87 01       	movw	r16, r14
    19c2:	d7 fe       	sbrs	r13, 7
    19c4:	08 c0       	rjmp	.+16     	; 0x19d6 <conv_int+0xfc>
    19c6:	10 95       	com	r17
    19c8:	00 95       	com	r16
    19ca:	f0 94       	com	r15
    19cc:	e0 94       	com	r14
    19ce:	e1 1c       	adc	r14, r1
    19d0:	f1 1c       	adc	r15, r1
    19d2:	01 1d       	adc	r16, r1
    19d4:	11 1d       	adc	r17, r1
    19d6:	c5 01       	movw	r24, r10
    19d8:	b8 01       	movw	r22, r16
    19da:	a7 01       	movw	r20, r14
    19dc:	2d 2d       	mov	r18, r13
    19de:	0e 94 1a 0c 	call	0x1834	; 0x1834 <putval>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	01 c0       	rjmp	.+2      	; 0x19e8 <conv_int+0x10e>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	df 90       	pop	r13
    19f6:	cf 90       	pop	r12
    19f8:	bf 90       	pop	r11
    19fa:	af 90       	pop	r10
    19fc:	08 95       	ret

000019fe <conv_brk>:
    19fe:	6f 92       	push	r6
    1a00:	7f 92       	push	r7
    1a02:	8f 92       	push	r8
    1a04:	9f 92       	push	r9
    1a06:	af 92       	push	r10
    1a08:	bf 92       	push	r11
    1a0a:	cf 92       	push	r12
    1a0c:	df 92       	push	r13
    1a0e:	ef 92       	push	r14
    1a10:	ff 92       	push	r15
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	a0 97       	sbiw	r28, 0x20	; 32
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	6c 01       	movw	r12, r24
    1a2c:	a6 2e       	mov	r10, r22
    1a2e:	8a 01       	movw	r16, r20
    1a30:	79 01       	movw	r14, r18
    1a32:	fe 01       	movw	r30, r28
    1a34:	31 96       	adiw	r30, 0x01	; 1
    1a36:	80 e2       	ldi	r24, 0x20	; 32
    1a38:	df 01       	movw	r26, r30
    1a3a:	1d 92       	st	X+, r1
    1a3c:	8a 95       	dec	r24
    1a3e:	e9 f7       	brne	.-6      	; 0x1a3a <conv_brk+0x3c>
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	4f 01       	movw	r8, r30
    1a4c:	a1 e0       	ldi	r26, 0x01	; 1
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	f6 01       	movw	r30, r12
    1a52:	83 81       	ldd	r24, Z+3	; 0x03
    1a54:	f7 01       	movw	r30, r14
    1a56:	83 fd       	sbrc	r24, 3
    1a58:	25 91       	lpm	r18, Z+
    1a5a:	83 ff       	sbrs	r24, 3
    1a5c:	21 91       	ld	r18, Z+
    1a5e:	7f 01       	movw	r14, r30
    1a60:	22 23       	and	r18, r18
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <conv_brk+0x68>
    1a64:	7e c0       	rjmp	.+252    	; 0x1b62 <conv_brk+0x164>
    1a66:	2e 35       	cpi	r18, 0x5E	; 94
    1a68:	19 f4       	brne	.+6      	; 0x1a70 <conv_brk+0x72>
    1a6a:	41 15       	cp	r20, r1
    1a6c:	51 05       	cpc	r21, r1
    1a6e:	69 f1       	breq	.+90     	; 0x1aca <conv_brk+0xcc>
    1a70:	87 2f       	mov	r24, r23
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	84 17       	cp	r24, r20
    1a76:	95 07       	cpc	r25, r21
    1a78:	44 f4       	brge	.+16     	; 0x1a8a <conv_brk+0x8c>
    1a7a:	2d 35       	cpi	r18, 0x5D	; 93
    1a7c:	51 f1       	breq	.+84     	; 0x1ad2 <conv_brk+0xd4>
    1a7e:	2d 32       	cpi	r18, 0x2D	; 45
    1a80:	21 f4       	brne	.+8      	; 0x1a8a <conv_brk+0x8c>
    1a82:	33 23       	and	r19, r19
    1a84:	29 f4       	brne	.+10     	; 0x1a90 <conv_brk+0x92>
    1a86:	31 e0       	ldi	r19, 0x01	; 1
    1a88:	21 c0       	rjmp	.+66     	; 0x1acc <conv_brk+0xce>
    1a8a:	33 23       	and	r19, r19
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <conv_brk+0x92>
    1a8e:	62 2f       	mov	r22, r18
    1a90:	32 2f       	mov	r19, r18
    1a92:	83 2f       	mov	r24, r19
    1a94:	86 95       	lsr	r24
    1a96:	86 95       	lsr	r24
    1a98:	86 95       	lsr	r24
    1a9a:	f4 01       	movw	r30, r8
    1a9c:	e8 0f       	add	r30, r24
    1a9e:	f1 1d       	adc	r31, r1
    1aa0:	83 2f       	mov	r24, r19
    1aa2:	87 70       	andi	r24, 0x07	; 7
    1aa4:	3d 01       	movw	r6, r26
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <conv_brk+0xae>
    1aa8:	66 0c       	add	r6, r6
    1aaa:	77 1c       	adc	r7, r7
    1aac:	8a 95       	dec	r24
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <conv_brk+0xaa>
    1ab0:	20 81       	ld	r18, Z
    1ab2:	26 29       	or	r18, r6
    1ab4:	20 83       	st	Z, r18
    1ab6:	36 17       	cp	r19, r22
    1ab8:	11 f4       	brne	.+4      	; 0x1abe <conv_brk+0xc0>
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	07 c0       	rjmp	.+14     	; 0x1acc <conv_brk+0xce>
    1abe:	36 17       	cp	r19, r22
    1ac0:	10 f4       	brcc	.+4      	; 0x1ac6 <conv_brk+0xc8>
    1ac2:	3f 5f       	subi	r19, 0xFF	; 255
    1ac4:	e6 cf       	rjmp	.-52     	; 0x1a92 <conv_brk+0x94>
    1ac6:	31 50       	subi	r19, 0x01	; 1
    1ac8:	e4 cf       	rjmp	.-56     	; 0x1a92 <conv_brk+0x94>
    1aca:	71 e0       	ldi	r23, 0x01	; 1
    1acc:	4f 5f       	subi	r20, 0xFF	; 255
    1ace:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad0:	bf cf       	rjmp	.-130    	; 0x1a50 <conv_brk+0x52>
    1ad2:	33 23       	and	r19, r19
    1ad4:	19 f0       	breq	.+6      	; 0x1adc <conv_brk+0xde>
    1ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad8:	80 62       	ori	r24, 0x20	; 32
    1ada:	8e 83       	std	Y+6, r24	; 0x06
    1adc:	77 23       	and	r23, r23
    1ade:	59 f0       	breq	.+22     	; 0x1af6 <conv_brk+0xf8>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	31 96       	adiw	r30, 0x01	; 1
    1ae4:	9e 01       	movw	r18, r28
    1ae6:	2f 5d       	subi	r18, 0xDF	; 223
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	80 95       	com	r24
    1aee:	81 93       	st	Z+, r24
    1af0:	e2 17       	cp	r30, r18
    1af2:	f3 07       	cpc	r31, r19
    1af4:	d1 f7       	brne	.-12     	; 0x1aea <conv_brk+0xec>
    1af6:	bb 24       	eor	r11, r11
    1af8:	b3 94       	inc	r11
    1afa:	4e 01       	movw	r8, r28
    1afc:	08 94       	sec
    1afe:	81 1c       	adc	r8, r1
    1b00:	91 1c       	adc	r9, r1
    1b02:	c6 01       	movw	r24, r12
    1b04:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <fgetc>
    1b08:	ac 01       	movw	r20, r24
    1b0a:	97 fd       	sbrc	r25, 7
    1b0c:	22 c0       	rjmp	.+68     	; 0x1b52 <conv_brk+0x154>
    1b0e:	86 95       	lsr	r24
    1b10:	86 95       	lsr	r24
    1b12:	86 95       	lsr	r24
    1b14:	f4 01       	movw	r30, r8
    1b16:	e8 0f       	add	r30, r24
    1b18:	f1 1d       	adc	r31, r1
    1b1a:	80 81       	ld	r24, Z
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9a 01       	movw	r18, r20
    1b20:	27 70       	andi	r18, 0x07	; 7
    1b22:	30 70       	andi	r19, 0x00	; 0
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <conv_brk+0x12c>
    1b26:	95 95       	asr	r25
    1b28:	87 95       	ror	r24
    1b2a:	2a 95       	dec	r18
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <conv_brk+0x128>
    1b2e:	80 fd       	sbrc	r24, 0
    1b30:	05 c0       	rjmp	.+10     	; 0x1b3c <conv_brk+0x13e>
    1b32:	ca 01       	movw	r24, r20
    1b34:	b6 01       	movw	r22, r12
    1b36:	0e 94 57 0f 	call	0x1eae	; 0x1eae <ungetc>
    1b3a:	0b c0       	rjmp	.+22     	; 0x1b52 <conv_brk+0x154>
    1b3c:	01 15       	cp	r16, r1
    1b3e:	11 05       	cpc	r17, r1
    1b40:	19 f0       	breq	.+6      	; 0x1b48 <conv_brk+0x14a>
    1b42:	d8 01       	movw	r26, r16
    1b44:	4d 93       	st	X+, r20
    1b46:	8d 01       	movw	r16, r26
    1b48:	aa 94       	dec	r10
    1b4a:	bb 24       	eor	r11, r11
    1b4c:	aa 20       	and	r10, r10
    1b4e:	c9 f6       	brne	.-78     	; 0x1b02 <conv_brk+0x104>
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <conv_brk+0x158>
    1b52:	bb 20       	and	r11, r11
    1b54:	31 f4       	brne	.+12     	; 0x1b62 <conv_brk+0x164>
    1b56:	01 15       	cp	r16, r1
    1b58:	11 05       	cpc	r17, r1
    1b5a:	29 f0       	breq	.+10     	; 0x1b66 <conv_brk+0x168>
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	10 82       	st	Z, r1
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <conv_brk+0x168>
    1b62:	ee 24       	eor	r14, r14
    1b64:	ff 24       	eor	r15, r15
    1b66:	c7 01       	movw	r24, r14
    1b68:	a0 96       	adiw	r28, 0x20	; 32
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	ff 90       	pop	r15
    1b7e:	ef 90       	pop	r14
    1b80:	df 90       	pop	r13
    1b82:	cf 90       	pop	r12
    1b84:	bf 90       	pop	r11
    1b86:	af 90       	pop	r10
    1b88:	9f 90       	pop	r9
    1b8a:	8f 90       	pop	r8
    1b8c:	7f 90       	pop	r7
    1b8e:	6f 90       	pop	r6
    1b90:	08 95       	ret

00001b92 <vfscanf>:
    1b92:	6f 92       	push	r6
    1b94:	7f 92       	push	r7
    1b96:	8f 92       	push	r8
    1b98:	9f 92       	push	r9
    1b9a:	af 92       	push	r10
    1b9c:	bf 92       	push	r11
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	5c 01       	movw	r10, r24
    1bb0:	6b 01       	movw	r12, r22
    1bb2:	3a 01       	movw	r6, r20
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	17 82       	std	Z+7, r1	; 0x07
    1bb8:	16 82       	std	Z+6, r1	; 0x06
    1bba:	88 24       	eor	r8, r8
    1bbc:	ea c0       	rjmp	.+468    	; 0x1d92 <vfscanf+0x200>
    1bbe:	81 2f       	mov	r24, r17
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <isspace>
    1bc6:	89 2b       	or	r24, r25
    1bc8:	21 f0       	breq	.+8      	; 0x1bd2 <vfscanf+0x40>
    1bca:	c5 01       	movw	r24, r10
    1bcc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <skip_spaces>
    1bd0:	e0 c0       	rjmp	.+448    	; 0x1d92 <vfscanf+0x200>
    1bd2:	15 32       	cpi	r17, 0x25	; 37
    1bd4:	49 f4       	brne	.+18     	; 0x1be8 <vfscanf+0x56>
    1bd6:	f6 01       	movw	r30, r12
    1bd8:	f3 fc       	sbrc	r15, 3
    1bda:	65 91       	lpm	r22, Z+
    1bdc:	f3 fe       	sbrs	r15, 3
    1bde:	61 91       	ld	r22, Z+
    1be0:	6f 01       	movw	r12, r30
    1be2:	65 32       	cpi	r22, 0x25	; 37
    1be4:	69 f4       	brne	.+26     	; 0x1c00 <vfscanf+0x6e>
    1be6:	15 e2       	ldi	r17, 0x25	; 37
    1be8:	c5 01       	movw	r24, r10
    1bea:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <fgetc>
    1bee:	97 fd       	sbrc	r25, 7
    1bf0:	dc c0       	rjmp	.+440    	; 0x1daa <vfscanf+0x218>
    1bf2:	18 17       	cp	r17, r24
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <vfscanf+0x66>
    1bf6:	cd c0       	rjmp	.+410    	; 0x1d92 <vfscanf+0x200>
    1bf8:	b5 01       	movw	r22, r10
    1bfa:	0e 94 57 0f 	call	0x1eae	; 0x1eae <ungetc>
    1bfe:	da c0       	rjmp	.+436    	; 0x1db4 <vfscanf+0x222>
    1c00:	6a 32       	cpi	r22, 0x2A	; 42
    1c02:	19 f0       	breq	.+6      	; 0x1c0a <vfscanf+0x78>
    1c04:	16 2f       	mov	r17, r22
    1c06:	00 e0       	ldi	r16, 0x00	; 0
    1c08:	06 c0       	rjmp	.+12     	; 0x1c16 <vfscanf+0x84>
    1c0a:	f3 fc       	sbrc	r15, 3
    1c0c:	15 91       	lpm	r17, Z+
    1c0e:	f3 fe       	sbrs	r15, 3
    1c10:	11 91       	ld	r17, Z+
    1c12:	6f 01       	movw	r12, r30
    1c14:	01 e0       	ldi	r16, 0x01	; 1
    1c16:	99 24       	eor	r9, r9
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <vfscanf+0xa6>
    1c1a:	02 60       	ori	r16, 0x02	; 2
    1c1c:	69 2d       	mov	r22, r9
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	0e 94 26 0c 	call	0x184c	; 0x184c <mulacc>
    1c2a:	96 2e       	mov	r9, r22
    1c2c:	f6 01       	movw	r30, r12
    1c2e:	f3 fc       	sbrc	r15, 3
    1c30:	15 91       	lpm	r17, Z+
    1c32:	f3 fe       	sbrs	r15, 3
    1c34:	11 91       	ld	r17, Z+
    1c36:	6f 01       	movw	r12, r30
    1c38:	21 2f       	mov	r18, r17
    1c3a:	20 53       	subi	r18, 0x30	; 48
    1c3c:	2a 30       	cpi	r18, 0x0A	; 10
    1c3e:	68 f3       	brcs	.-38     	; 0x1c1a <vfscanf+0x88>
    1c40:	01 fd       	sbrc	r16, 1
    1c42:	03 c0       	rjmp	.+6      	; 0x1c4a <vfscanf+0xb8>
    1c44:	99 24       	eor	r9, r9
    1c46:	9a 94       	dec	r9
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <vfscanf+0xbe>
    1c4a:	99 20       	and	r9, r9
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <vfscanf+0xbe>
    1c4e:	b2 c0       	rjmp	.+356    	; 0x1db4 <vfscanf+0x222>
    1c50:	18 36       	cpi	r17, 0x68	; 104
    1c52:	21 f0       	breq	.+8      	; 0x1c5c <vfscanf+0xca>
    1c54:	1c 36       	cpi	r17, 0x6C	; 108
    1c56:	99 f4       	brne	.+38     	; 0x1c7e <vfscanf+0xec>
    1c58:	f6 01       	movw	r30, r12
    1c5a:	0b c0       	rjmp	.+22     	; 0x1c72 <vfscanf+0xe0>
    1c5c:	f6 01       	movw	r30, r12
    1c5e:	f3 fc       	sbrc	r15, 3
    1c60:	65 91       	lpm	r22, Z+
    1c62:	f3 fe       	sbrs	r15, 3
    1c64:	61 91       	ld	r22, Z+
    1c66:	68 36       	cpi	r22, 0x68	; 104
    1c68:	19 f0       	breq	.+6      	; 0x1c70 <vfscanf+0xde>
    1c6a:	6f 01       	movw	r12, r30
    1c6c:	16 2f       	mov	r17, r22
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <vfscanf+0xec>
    1c70:	08 60       	ori	r16, 0x08	; 8
    1c72:	04 60       	ori	r16, 0x04	; 4
    1c74:	f3 fc       	sbrc	r15, 3
    1c76:	15 91       	lpm	r17, Z+
    1c78:	f3 fe       	sbrs	r15, 3
    1c7a:	11 91       	ld	r17, Z+
    1c7c:	6f 01       	movw	r12, r30
    1c7e:	11 23       	and	r17, r17
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <vfscanf+0xf2>
    1c82:	98 c0       	rjmp	.+304    	; 0x1db4 <vfscanf+0x222>
    1c84:	80 ee       	ldi	r24, 0xE0	; 224
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	61 2f       	mov	r22, r17
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <strchr_P>
    1c90:	89 2b       	or	r24, r25
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <vfscanf+0x104>
    1c94:	8f c0       	rjmp	.+286    	; 0x1db4 <vfscanf+0x222>
    1c96:	80 2f       	mov	r24, r16
    1c98:	00 ff       	sbrs	r16, 0
    1c9a:	03 c0       	rjmp	.+6      	; 0x1ca2 <vfscanf+0x110>
    1c9c:	ee 24       	eor	r14, r14
    1c9e:	ff 24       	eor	r15, r15
    1ca0:	07 c0       	rjmp	.+14     	; 0x1cb0 <vfscanf+0x11e>
    1ca2:	f3 01       	movw	r30, r6
    1ca4:	e0 80       	ld	r14, Z
    1ca6:	f1 80       	ldd	r15, Z+1	; 0x01
    1ca8:	22 e0       	ldi	r18, 0x02	; 2
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	62 0e       	add	r6, r18
    1cae:	73 1e       	adc	r7, r19
    1cb0:	1e 36       	cpi	r17, 0x6E	; 110
    1cb2:	51 f4       	brne	.+20     	; 0x1cc8 <vfscanf+0x136>
    1cb4:	f5 01       	movw	r30, r10
    1cb6:	46 81       	ldd	r20, Z+6	; 0x06
    1cb8:	57 81       	ldd	r21, Z+7	; 0x07
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	c7 01       	movw	r24, r14
    1cc0:	20 2f       	mov	r18, r16
    1cc2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <putval>
    1cc6:	65 c0       	rjmp	.+202    	; 0x1d92 <vfscanf+0x200>
    1cc8:	13 36       	cpi	r17, 0x63	; 99
    1cca:	91 f4       	brne	.+36     	; 0x1cf0 <vfscanf+0x15e>
    1ccc:	81 fd       	sbrc	r24, 1
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <vfscanf+0x142>
    1cd0:	99 24       	eor	r9, r9
    1cd2:	93 94       	inc	r9
    1cd4:	c5 01       	movw	r24, r10
    1cd6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <fgetc>
    1cda:	97 fd       	sbrc	r25, 7
    1cdc:	66 c0       	rjmp	.+204    	; 0x1daa <vfscanf+0x218>
    1cde:	e1 14       	cp	r14, r1
    1ce0:	f1 04       	cpc	r15, r1
    1ce2:	19 f0       	breq	.+6      	; 0x1cea <vfscanf+0x158>
    1ce4:	f7 01       	movw	r30, r14
    1ce6:	81 93       	st	Z+, r24
    1ce8:	7f 01       	movw	r14, r30
    1cea:	9a 94       	dec	r9
    1cec:	99 f7       	brne	.-26     	; 0x1cd4 <vfscanf+0x142>
    1cee:	4f c0       	rjmp	.+158    	; 0x1d8e <vfscanf+0x1fc>
    1cf0:	1b 35       	cpi	r17, 0x5B	; 91
    1cf2:	59 f4       	brne	.+22     	; 0x1d0a <vfscanf+0x178>
    1cf4:	c5 01       	movw	r24, r10
    1cf6:	69 2d       	mov	r22, r9
    1cf8:	a7 01       	movw	r20, r14
    1cfa:	96 01       	movw	r18, r12
    1cfc:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <conv_brk>
    1d00:	6c 01       	movw	r12, r24
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <vfscanf+0x176>
    1d06:	43 c0       	rjmp	.+134    	; 0x1d8e <vfscanf+0x1fc>
    1d08:	3d c0       	rjmp	.+122    	; 0x1d84 <vfscanf+0x1f2>
    1d0a:	c5 01       	movw	r24, r10
    1d0c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <skip_spaces>
    1d10:	97 fd       	sbrc	r25, 7
    1d12:	4b c0       	rjmp	.+150    	; 0x1daa <vfscanf+0x218>
    1d14:	1f 36       	cpi	r17, 0x6F	; 111
    1d16:	59 f1       	breq	.+86     	; 0x1d6e <vfscanf+0x1dc>
    1d18:	10 37       	cpi	r17, 0x70	; 112
    1d1a:	28 f4       	brcc	.+10     	; 0x1d26 <vfscanf+0x194>
    1d1c:	14 36       	cpi	r17, 0x64	; 100
    1d1e:	29 f1       	breq	.+74     	; 0x1d6a <vfscanf+0x1d8>
    1d20:	19 36       	cpi	r17, 0x69	; 105
    1d22:	39 f5       	brne	.+78     	; 0x1d72 <vfscanf+0x1e0>
    1d24:	27 c0       	rjmp	.+78     	; 0x1d74 <vfscanf+0x1e2>
    1d26:	13 37       	cpi	r17, 0x73	; 115
    1d28:	19 f0       	breq	.+6      	; 0x1d30 <vfscanf+0x19e>
    1d2a:	15 37       	cpi	r17, 0x75	; 117
    1d2c:	11 f5       	brne	.+68     	; 0x1d72 <vfscanf+0x1e0>
    1d2e:	1d c0       	rjmp	.+58     	; 0x1d6a <vfscanf+0x1d8>
    1d30:	c5 01       	movw	r24, r10
    1d32:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <fgetc>
    1d36:	ec 01       	movw	r28, r24
    1d38:	97 fd       	sbrc	r25, 7
    1d3a:	11 c0       	rjmp	.+34     	; 0x1d5e <vfscanf+0x1cc>
    1d3c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <isspace>
    1d40:	89 2b       	or	r24, r25
    1d42:	29 f0       	breq	.+10     	; 0x1d4e <vfscanf+0x1bc>
    1d44:	ce 01       	movw	r24, r28
    1d46:	b5 01       	movw	r22, r10
    1d48:	0e 94 57 0f 	call	0x1eae	; 0x1eae <ungetc>
    1d4c:	08 c0       	rjmp	.+16     	; 0x1d5e <vfscanf+0x1cc>
    1d4e:	e1 14       	cp	r14, r1
    1d50:	f1 04       	cpc	r15, r1
    1d52:	19 f0       	breq	.+6      	; 0x1d5a <vfscanf+0x1c8>
    1d54:	f7 01       	movw	r30, r14
    1d56:	c1 93       	st	Z+, r28
    1d58:	7f 01       	movw	r14, r30
    1d5a:	9a 94       	dec	r9
    1d5c:	49 f7       	brne	.-46     	; 0x1d30 <vfscanf+0x19e>
    1d5e:	e1 14       	cp	r14, r1
    1d60:	f1 04       	cpc	r15, r1
    1d62:	a9 f0       	breq	.+42     	; 0x1d8e <vfscanf+0x1fc>
    1d64:	f7 01       	movw	r30, r14
    1d66:	10 82       	st	Z, r1
    1d68:	12 c0       	rjmp	.+36     	; 0x1d8e <vfscanf+0x1fc>
    1d6a:	00 62       	ori	r16, 0x20	; 32
    1d6c:	03 c0       	rjmp	.+6      	; 0x1d74 <vfscanf+0x1e2>
    1d6e:	00 61       	ori	r16, 0x10	; 16
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <vfscanf+0x1e2>
    1d72:	00 64       	ori	r16, 0x40	; 64
    1d74:	c5 01       	movw	r24, r10
    1d76:	69 2d       	mov	r22, r9
    1d78:	a7 01       	movw	r20, r14
    1d7a:	20 2f       	mov	r18, r16
    1d7c:	0e 94 6d 0c 	call	0x18da	; 0x18da <conv_int>
    1d80:	88 23       	and	r24, r24
    1d82:	29 f4       	brne	.+10     	; 0x1d8e <vfscanf+0x1fc>
    1d84:	f5 01       	movw	r30, r10
    1d86:	83 81       	ldd	r24, Z+3	; 0x03
    1d88:	80 73       	andi	r24, 0x30	; 48
    1d8a:	79 f4       	brne	.+30     	; 0x1daa <vfscanf+0x218>
    1d8c:	13 c0       	rjmp	.+38     	; 0x1db4 <vfscanf+0x222>
    1d8e:	00 ff       	sbrs	r16, 0
    1d90:	83 94       	inc	r8
    1d92:	f5 01       	movw	r30, r10
    1d94:	f3 80       	ldd	r15, Z+3	; 0x03
    1d96:	f6 01       	movw	r30, r12
    1d98:	f3 fc       	sbrc	r15, 3
    1d9a:	15 91       	lpm	r17, Z+
    1d9c:	f3 fe       	sbrs	r15, 3
    1d9e:	11 91       	ld	r17, Z+
    1da0:	6f 01       	movw	r12, r30
    1da2:	11 23       	and	r17, r17
    1da4:	09 f0       	breq	.+2      	; 0x1da8 <vfscanf+0x216>
    1da6:	0b cf       	rjmp	.-490    	; 0x1bbe <vfscanf+0x2c>
    1da8:	05 c0       	rjmp	.+10     	; 0x1db4 <vfscanf+0x222>
    1daa:	88 20       	and	r8, r8
    1dac:	19 f4       	brne	.+6      	; 0x1db4 <vfscanf+0x222>
    1dae:	2f ef       	ldi	r18, 0xFF	; 255
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <vfscanf+0x226>
    1db4:	28 2d       	mov	r18, r8
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	c9 01       	movw	r24, r18
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	bf 90       	pop	r11
    1dcc:	af 90       	pop	r10
    1dce:	9f 90       	pop	r9
    1dd0:	8f 90       	pop	r8
    1dd2:	7f 90       	pop	r7
    1dd4:	6f 90       	pop	r6
    1dd6:	08 95       	ret

00001dd8 <isspace>:
    1dd8:	91 11       	cpse	r25, r1
    1dda:	e1 c0       	rjmp	.+450    	; 0x1f9e <__ctype_isfalse>
    1ddc:	80 32       	cpi	r24, 0x20	; 32
    1dde:	19 f0       	breq	.+6      	; 0x1de6 <isspace+0xe>
    1de0:	89 50       	subi	r24, 0x09	; 9
    1de2:	85 50       	subi	r24, 0x05	; 5
    1de4:	d0 f7       	brcc	.-12     	; 0x1dda <isspace+0x2>
    1de6:	08 95       	ret

00001de8 <strchr_P>:
    1de8:	fc 01       	movw	r30, r24
    1dea:	05 90       	lpm	r0, Z+
    1dec:	06 16       	cp	r0, r22
    1dee:	21 f0       	breq	.+8      	; 0x1df8 <strchr_P+0x10>
    1df0:	00 20       	and	r0, r0
    1df2:	d9 f7       	brne	.-10     	; 0x1dea <strchr_P+0x2>
    1df4:	c0 01       	movw	r24, r0
    1df6:	08 95       	ret
    1df8:	31 97       	sbiw	r30, 0x01	; 1
    1dfa:	cf 01       	movw	r24, r30
    1dfc:	08 95       	ret

00001dfe <strnlen_P>:
    1dfe:	fc 01       	movw	r30, r24
    1e00:	05 90       	lpm	r0, Z+
    1e02:	61 50       	subi	r22, 0x01	; 1
    1e04:	70 40       	sbci	r23, 0x00	; 0
    1e06:	01 10       	cpse	r0, r1
    1e08:	d8 f7       	brcc	.-10     	; 0x1e00 <strnlen_P+0x2>
    1e0a:	80 95       	com	r24
    1e0c:	90 95       	com	r25
    1e0e:	8e 0f       	add	r24, r30
    1e10:	9f 1f       	adc	r25, r31
    1e12:	08 95       	ret

00001e14 <strnlen>:
    1e14:	fc 01       	movw	r30, r24
    1e16:	61 50       	subi	r22, 0x01	; 1
    1e18:	70 40       	sbci	r23, 0x00	; 0
    1e1a:	01 90       	ld	r0, Z+
    1e1c:	01 10       	cpse	r0, r1
    1e1e:	d8 f7       	brcc	.-10     	; 0x1e16 <strnlen+0x2>
    1e20:	80 95       	com	r24
    1e22:	90 95       	com	r25
    1e24:	8e 0f       	add	r24, r30
    1e26:	9f 1f       	adc	r25, r31
    1e28:	08 95       	ret

00001e2a <fgetc>:
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	ec 01       	movw	r28, r24
    1e30:	4b 81       	ldd	r20, Y+3	; 0x03
    1e32:	40 ff       	sbrs	r20, 0
    1e34:	1a c0       	rjmp	.+52     	; 0x1e6a <fgetc+0x40>
    1e36:	46 ff       	sbrs	r20, 6
    1e38:	0a c0       	rjmp	.+20     	; 0x1e4e <fgetc+0x24>
    1e3a:	4f 7b       	andi	r20, 0xBF	; 191
    1e3c:	4b 83       	std	Y+3, r20	; 0x03
    1e3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e40:	9f 81       	ldd	r25, Y+7	; 0x07
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	9f 83       	std	Y+7, r25	; 0x07
    1e46:	8e 83       	std	Y+6, r24	; 0x06
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	2b c0       	rjmp	.+86     	; 0x1ea4 <fgetc+0x7a>
    1e4e:	42 ff       	sbrs	r20, 2
    1e50:	13 c0       	rjmp	.+38     	; 0x1e78 <fgetc+0x4e>
    1e52:	e8 81       	ld	r30, Y
    1e54:	f9 81       	ldd	r31, Y+1	; 0x01
    1e56:	80 81       	ld	r24, Z
    1e58:	28 2f       	mov	r18, r24
    1e5a:	33 27       	eor	r19, r19
    1e5c:	27 fd       	sbrc	r18, 7
    1e5e:	30 95       	com	r19
    1e60:	21 15       	cp	r18, r1
    1e62:	31 05       	cpc	r19, r1
    1e64:	29 f4       	brne	.+10     	; 0x1e70 <fgetc+0x46>
    1e66:	40 62       	ori	r20, 0x20	; 32
    1e68:	4b 83       	std	Y+3, r20	; 0x03
    1e6a:	2f ef       	ldi	r18, 0xFF	; 255
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	1b c0       	rjmp	.+54     	; 0x1ea6 <fgetc+0x7c>
    1e70:	31 96       	adiw	r30, 0x01	; 1
    1e72:	f9 83       	std	Y+1, r31	; 0x01
    1e74:	e8 83       	st	Y, r30
    1e76:	11 c0       	rjmp	.+34     	; 0x1e9a <fgetc+0x70>
    1e78:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e7a:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	09 95       	icall
    1e80:	9c 01       	movw	r18, r24
    1e82:	97 ff       	sbrs	r25, 7
    1e84:	0a c0       	rjmp	.+20     	; 0x1e9a <fgetc+0x70>
    1e86:	9b 81       	ldd	r25, Y+3	; 0x03
    1e88:	2f 5f       	subi	r18, 0xFF	; 255
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8c:	11 f0       	breq	.+4      	; 0x1e92 <fgetc+0x68>
    1e8e:	80 e2       	ldi	r24, 0x20	; 32
    1e90:	01 c0       	rjmp	.+2      	; 0x1e94 <fgetc+0x6a>
    1e92:	80 e1       	ldi	r24, 0x10	; 16
    1e94:	89 2b       	or	r24, r25
    1e96:	8b 83       	std	Y+3, r24	; 0x03
    1e98:	e8 cf       	rjmp	.-48     	; 0x1e6a <fgetc+0x40>
    1e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	9f 83       	std	Y+7, r25	; 0x07
    1ea2:	8e 83       	std	Y+6, r24	; 0x06
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	c9 01       	movw	r24, r18
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	08 95       	ret

00001eae <ungetc>:
    1eae:	9c 01       	movw	r18, r24
    1eb0:	fb 01       	movw	r30, r22
    1eb2:	83 81       	ldd	r24, Z+3	; 0x03
    1eb4:	80 ff       	sbrs	r24, 0
    1eb6:	11 c0       	rjmp	.+34     	; 0x1eda <ungetc+0x2c>
    1eb8:	86 fd       	sbrc	r24, 6
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <ungetc+0x2c>
    1ebc:	9f ef       	ldi	r25, 0xFF	; 255
    1ebe:	2f 3f       	cpi	r18, 0xFF	; 255
    1ec0:	39 07       	cpc	r19, r25
    1ec2:	59 f0       	breq	.+22     	; 0x1eda <ungetc+0x2c>
    1ec4:	22 83       	std	Z+2, r18	; 0x02
    1ec6:	80 64       	ori	r24, 0x40	; 64
    1ec8:	8f 7d       	andi	r24, 0xDF	; 223
    1eca:	83 83       	std	Z+3, r24	; 0x03
    1ecc:	86 81       	ldd	r24, Z+6	; 0x06
    1ece:	97 81       	ldd	r25, Z+7	; 0x07
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	97 83       	std	Z+7, r25	; 0x07
    1ed4:	86 83       	std	Z+6, r24	; 0x06
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <ungetc+0x30>
    1eda:	2f ef       	ldi	r18, 0xFF	; 255
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	c9 01       	movw	r24, r18
    1ee0:	08 95       	ret

00001ee2 <__ultoa_invert>:
    1ee2:	fa 01       	movw	r30, r20
    1ee4:	aa 27       	eor	r26, r26
    1ee6:	28 30       	cpi	r18, 0x08	; 8
    1ee8:	51 f1       	breq	.+84     	; 0x1f3e <__ultoa_invert+0x5c>
    1eea:	20 31       	cpi	r18, 0x10	; 16
    1eec:	81 f1       	breq	.+96     	; 0x1f4e <__ultoa_invert+0x6c>
    1eee:	e8 94       	clt
    1ef0:	6f 93       	push	r22
    1ef2:	6e 7f       	andi	r22, 0xFE	; 254
    1ef4:	6e 5f       	subi	r22, 0xFE	; 254
    1ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef8:	8f 4f       	sbci	r24, 0xFF	; 255
    1efa:	9f 4f       	sbci	r25, 0xFF	; 255
    1efc:	af 4f       	sbci	r26, 0xFF	; 255
    1efe:	b1 e0       	ldi	r27, 0x01	; 1
    1f00:	3e d0       	rcall	.+124    	; 0x1f7e <__ultoa_invert+0x9c>
    1f02:	b4 e0       	ldi	r27, 0x04	; 4
    1f04:	3c d0       	rcall	.+120    	; 0x1f7e <__ultoa_invert+0x9c>
    1f06:	67 0f       	add	r22, r23
    1f08:	78 1f       	adc	r23, r24
    1f0a:	89 1f       	adc	r24, r25
    1f0c:	9a 1f       	adc	r25, r26
    1f0e:	a1 1d       	adc	r26, r1
    1f10:	68 0f       	add	r22, r24
    1f12:	79 1f       	adc	r23, r25
    1f14:	8a 1f       	adc	r24, r26
    1f16:	91 1d       	adc	r25, r1
    1f18:	a1 1d       	adc	r26, r1
    1f1a:	6a 0f       	add	r22, r26
    1f1c:	71 1d       	adc	r23, r1
    1f1e:	81 1d       	adc	r24, r1
    1f20:	91 1d       	adc	r25, r1
    1f22:	a1 1d       	adc	r26, r1
    1f24:	20 d0       	rcall	.+64     	; 0x1f66 <__ultoa_invert+0x84>
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <__ultoa_invert+0x48>
    1f28:	68 94       	set
    1f2a:	3f 91       	pop	r19
    1f2c:	2a e0       	ldi	r18, 0x0A	; 10
    1f2e:	26 9f       	mul	r18, r22
    1f30:	11 24       	eor	r1, r1
    1f32:	30 19       	sub	r19, r0
    1f34:	30 5d       	subi	r19, 0xD0	; 208
    1f36:	31 93       	st	Z+, r19
    1f38:	de f6       	brtc	.-74     	; 0x1ef0 <__ultoa_invert+0xe>
    1f3a:	cf 01       	movw	r24, r30
    1f3c:	08 95       	ret
    1f3e:	46 2f       	mov	r20, r22
    1f40:	47 70       	andi	r20, 0x07	; 7
    1f42:	40 5d       	subi	r20, 0xD0	; 208
    1f44:	41 93       	st	Z+, r20
    1f46:	b3 e0       	ldi	r27, 0x03	; 3
    1f48:	0f d0       	rcall	.+30     	; 0x1f68 <__ultoa_invert+0x86>
    1f4a:	c9 f7       	brne	.-14     	; 0x1f3e <__ultoa_invert+0x5c>
    1f4c:	f6 cf       	rjmp	.-20     	; 0x1f3a <__ultoa_invert+0x58>
    1f4e:	46 2f       	mov	r20, r22
    1f50:	4f 70       	andi	r20, 0x0F	; 15
    1f52:	40 5d       	subi	r20, 0xD0	; 208
    1f54:	4a 33       	cpi	r20, 0x3A	; 58
    1f56:	18 f0       	brcs	.+6      	; 0x1f5e <__ultoa_invert+0x7c>
    1f58:	49 5d       	subi	r20, 0xD9	; 217
    1f5a:	31 fd       	sbrc	r19, 1
    1f5c:	40 52       	subi	r20, 0x20	; 32
    1f5e:	41 93       	st	Z+, r20
    1f60:	02 d0       	rcall	.+4      	; 0x1f66 <__ultoa_invert+0x84>
    1f62:	a9 f7       	brne	.-22     	; 0x1f4e <__ultoa_invert+0x6c>
    1f64:	ea cf       	rjmp	.-44     	; 0x1f3a <__ultoa_invert+0x58>
    1f66:	b4 e0       	ldi	r27, 0x04	; 4
    1f68:	a6 95       	lsr	r26
    1f6a:	97 95       	ror	r25
    1f6c:	87 95       	ror	r24
    1f6e:	77 95       	ror	r23
    1f70:	67 95       	ror	r22
    1f72:	ba 95       	dec	r27
    1f74:	c9 f7       	brne	.-14     	; 0x1f68 <__ultoa_invert+0x86>
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	61 05       	cpc	r22, r1
    1f7a:	71 05       	cpc	r23, r1
    1f7c:	08 95       	ret
    1f7e:	9b 01       	movw	r18, r22
    1f80:	ac 01       	movw	r20, r24
    1f82:	0a 2e       	mov	r0, r26
    1f84:	06 94       	lsr	r0
    1f86:	57 95       	ror	r21
    1f88:	47 95       	ror	r20
    1f8a:	37 95       	ror	r19
    1f8c:	27 95       	ror	r18
    1f8e:	ba 95       	dec	r27
    1f90:	c9 f7       	brne	.-14     	; 0x1f84 <__ultoa_invert+0xa2>
    1f92:	62 0f       	add	r22, r18
    1f94:	73 1f       	adc	r23, r19
    1f96:	84 1f       	adc	r24, r20
    1f98:	95 1f       	adc	r25, r21
    1f9a:	a0 1d       	adc	r26, r0
    1f9c:	08 95       	ret

00001f9e <__ctype_isfalse>:
    1f9e:	99 27       	eor	r25, r25
    1fa0:	88 27       	eor	r24, r24

00001fa2 <__ctype_istrue>:
    1fa2:	08 95       	ret

00001fa4 <_exit>:
    1fa4:	f8 94       	cli

00001fa6 <__stop_program>:
    1fa6:	ff cf       	rjmp	.-2      	; 0x1fa6 <__stop_program>
