
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000228  00800100  00002a2e  00002ac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000195  00800328  00800328  00002cea  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00002cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000559  00000000  00000000  00002dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000252f  00000000  00000000  00003323  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d57  00000000  00000000  00005852  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019fc  00000000  00000000  000065a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000430  00000000  00000000  00007fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000082a  00000000  00000000  000083d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000116d  00000000  00000000  00008c02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_13>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_16>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__vector_20>
      54:	0c 94 88 03 	jmp	0x710	; 0x710 <__vector_21>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_line1>:
      cc:	43 75 72 72 65 6e 74 3a 00 00                       Current:..

000000d6 <LCD_line2>:
      d6:	44 65 73 69 72 65 64 3a 00 00                       Desired:..

000000e0 <__c.1988>:
      e0:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d0 e4       	ldi	r29, 0x40	; 64
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	13 e0       	ldi	r17, 0x03	; 3
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	ee e2       	ldi	r30, 0x2E	; 46
     100:	fa e2       	ldi	r31, 0x2A	; 42
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a8 32       	cpi	r26, 0x28	; 40
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	14 e0       	ldi	r17, 0x04	; 4
     114:	a8 e2       	ldi	r26, 0x28	; 40
     116:	b3 e0       	ldi	r27, 0x03	; 3
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	ad 3b       	cpi	r26, 0xBD	; 189
     11e:	b1 07       	cpc	r27, r17
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 5f 07 	call	0xebe	; 0xebe <main>
     126:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     12e:	1f 92       	push	r1
     130:	0f 92       	push	r0
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	0f 92       	push	r0
     136:	0b b6       	in	r0, 0x3b	; 59
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	2f 92       	push	r2
     13e:	3f 92       	push	r3
     140:	4f 92       	push	r4
     142:	5f 92       	push	r5
     144:	6f 92       	push	r6
     146:	7f 92       	push	r7
     148:	8f 92       	push	r8
     14a:	9f 92       	push	r9
     14c:	af 92       	push	r10
     14e:	bf 92       	push	r11
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	2f 93       	push	r18
     15e:	3f 93       	push	r19
     160:	4f 93       	push	r20
     162:	5f 93       	push	r21
     164:	6f 93       	push	r22
     166:	7f 93       	push	r23
     168:	8f 93       	push	r24
     16a:	9f 93       	push	r25
     16c:	af 93       	push	r26
     16e:	bf 93       	push	r27
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	ef 93       	push	r30
     176:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
  
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     178:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     17c:	50 90 66 04 	lds	r5, 0x0466
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     180:	b0 9b       	sbis	0x16, 0	; 22
     182:	14 c0       	rjmp	.+40     	; 0x1ac <__vector_13+0x7e>
    ++kernel.cycles;
     184:	80 91 a8 04 	lds	r24, 0x04A8
     188:	90 91 a9 04 	lds	r25, 0x04A9
     18c:	a0 91 aa 04 	lds	r26, 0x04AA
     190:	b0 91 ab 04 	lds	r27, 0x04AB
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	a1 1d       	adc	r26, r1
     198:	b1 1d       	adc	r27, r1
     19a:	80 93 a8 04 	sts	0x04A8, r24
     19e:	90 93 a9 04 	sts	0x04A9, r25
     1a2:	a0 93 aa 04 	sts	0x04AA, r26
     1a6:	b0 93 ab 04 	sts	0x04AB, r27
    TIFR1 |= (1<<TOV1) ;
     1aa:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     1ac:	80 91 84 00 	lds	r24, 0x0084
     1b0:	90 91 85 00 	lds	r25, 0x0085
     1b4:	3c 01       	movw	r6, r24
     1b6:	88 24       	eor	r8, r8
     1b8:	99 24       	eor	r9, r9
     1ba:	80 91 a8 04 	lds	r24, 0x04A8
     1be:	90 91 a9 04 	lds	r25, 0x04A9
     1c2:	a0 91 aa 04 	lds	r26, 0x04AA
     1c6:	b0 91 ab 04 	lds	r27, 0x04AB
     1ca:	dc 01       	movw	r26, r24
     1cc:	99 27       	eor	r25, r25
     1ce:	88 27       	eor	r24, r24
     1d0:	68 0e       	add	r6, r24
     1d2:	79 1e       	adc	r7, r25
     1d4:	8a 1e       	adc	r8, r26
     1d6:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     1d8:	40 90 65 04 	lds	r4, 0x0465
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	ff ef       	ldi	r31, 0xFF	; 255
     1e2:	af 2e       	mov	r10, r31
     1e4:	ff ef       	ldi	r31, 0xFF	; 255
     1e6:	bf 2e       	mov	r11, r31
     1e8:	ff ef       	ldi	r31, 0xFF	; 255
     1ea:	cf 2e       	mov	r12, r31
     1ec:	ff e7       	ldi	r31, 0x7F	; 127
     1ee:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     1f0:	eb e0       	ldi	r30, 0x0B	; 11
     1f2:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
  t->state = READYQ;
     1f4:	33 24       	eor	r3, r3
     1f6:	33 94       	inc	r3
      } else if (t->release < nextHit) {
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     1f8:	cb e0       	ldi	r28, 0x0B	; 11
     1fa:	d0 e0       	ldi	r29, 0x00	; 0
     1fc:	43 c0       	rjmp	.+134    	; 0x284 <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     1fe:	62 9d       	mul	r22, r2
     200:	d0 01       	movw	r26, r0
     202:	11 24       	eor	r1, r1
     204:	a9 59       	subi	r26, 0x99	; 153
     206:	bb 4f       	sbci	r27, 0xFB	; 251
    if (t->state == TIMEQ) {
     208:	1a 96       	adiw	r26, 0x0a	; 10
     20a:	8c 91       	ld	r24, X
     20c:	1a 97       	sbiw	r26, 0x0a	; 10
     20e:	82 30       	cpi	r24, 0x02	; 2
     210:	a1 f4       	brne	.+40     	; 0x23a <__vector_13+0x10c>
      if (t->release <= now) {
     212:	12 96       	adiw	r26, 0x02	; 2
     214:	ed 90       	ld	r14, X+
     216:	fd 90       	ld	r15, X+
     218:	0d 91       	ld	r16, X+
     21a:	1c 91       	ld	r17, X
     21c:	15 97       	sbiw	r26, 0x05	; 5
     21e:	6e 14       	cp	r6, r14
     220:	7f 04       	cpc	r7, r15
     222:	80 06       	cpc	r8, r16
     224:	91 06       	cpc	r9, r17
     226:	20 f0       	brcs	.+8      	; 0x230 <__vector_13+0x102>
  t->state = READYQ;
     228:	1a 96       	adiw	r26, 0x0a	; 10
     22a:	3c 92       	st	X, r3
     22c:	1a 97       	sbiw	r26, 0x0a	; 10
     22e:	05 c0       	rjmp	.+10     	; 0x23a <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     230:	ea 14       	cp	r14, r10
     232:	fb 04       	cpc	r15, r11
     234:	0c 05       	cpc	r16, r12
     236:	1d 05       	cpc	r17, r13
     238:	10 f0       	brcs	.+4      	; 0x23e <__vector_13+0x110>
     23a:	86 01       	movw	r16, r12
     23c:	75 01       	movw	r14, r10
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     23e:	1a 96       	adiw	r26, 0x0a	; 10
     240:	8c 91       	ld	r24, X
     242:	1a 97       	sbiw	r26, 0x0a	; 10
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	d9 f4       	brne	.+54     	; 0x27e <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     248:	87 2f       	mov	r24, r23
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	8c 9f       	mul	r24, r28
     24e:	f0 01       	movw	r30, r0
     250:	8d 9f       	mul	r24, r29
     252:	f0 0d       	add	r31, r0
     254:	9c 9f       	mul	r25, r28
     256:	f0 0d       	add	r31, r0
     258:	11 24       	eor	r1, r1
     25a:	eb 59       	subi	r30, 0x9B	; 155
     25c:	fb 4f       	sbci	r31, 0xFB	; 251
     25e:	16 96       	adiw	r26, 0x06	; 6
     260:	2d 91       	ld	r18, X+
     262:	3d 91       	ld	r19, X+
     264:	4d 91       	ld	r20, X+
     266:	5c 91       	ld	r21, X
     268:	19 97       	sbiw	r26, 0x09	; 9
     26a:	80 85       	ldd	r24, Z+8	; 0x08
     26c:	91 85       	ldd	r25, Z+9	; 0x09
     26e:	a2 85       	ldd	r26, Z+10	; 0x0a
     270:	b3 85       	ldd	r27, Z+11	; 0x0b
     272:	28 17       	cp	r18, r24
     274:	39 07       	cpc	r19, r25
     276:	4a 07       	cpc	r20, r26
     278:	5b 07       	cpc	r21, r27
     27a:	08 f4       	brcc	.+2      	; 0x27e <__vector_13+0x150>
     27c:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     27e:	6f 5f       	subi	r22, 0xFF	; 255
     280:	57 01       	movw	r10, r14
     282:	68 01       	movw	r12, r16
     284:	46 16       	cp	r4, r22
     286:	08 f0       	brcs	.+2      	; 0x28a <__vector_13+0x15c>
     288:	ba cf       	rjmp	.-140    	; 0x1fe <__vector_13+0xd0>
    }
  }
  //fprintf(stdout, "Old: %u New: %u\n\r", oldrunning, running);
  //fprintf(stdout, "NumTasks: %u\n\r", kernel.nbrOfTasks);
  //fprintf(stdout, "Current time: %lu\n\r", (unsigned long) trtCurrentTime());
  if (running != oldrunning) { // perform context switch?
     28a:	75 15       	cp	r23, r5
     28c:	b1 f0       	breq	.+44     	; 0x2ba <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     28e:	eb e0       	ldi	r30, 0x0B	; 11
     290:	5e 9e       	mul	r5, r30
     292:	d0 01       	movw	r26, r0
     294:	11 24       	eor	r1, r1
     296:	a9 59       	subi	r26, 0x99	; 153
     298:	bb 4f       	sbci	r27, 0xFB	; 251
    t->spl = SPL;
     29a:	8d b7       	in	r24, 0x3d	; 61
     29c:	8c 93       	st	X, r24
    t->sph = SPH;
     29e:	8e b7       	in	r24, 0x3e	; 62
     2a0:	11 96       	adiw	r26, 0x01	; 1
     2a2:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     2a4:	7e 9f       	mul	r23, r30
     2a6:	f0 01       	movw	r30, r0
     2a8:	11 24       	eor	r1, r1
     2aa:	e9 59       	subi	r30, 0x99	; 153
     2ac:	fb 4f       	sbci	r31, 0xFB	; 251
    SPH = t->sph;
     2ae:	81 81       	ldd	r24, Z+1	; 0x01
     2b0:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     2b2:	80 81       	ld	r24, Z
     2b4:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     2b6:	70 93 66 04 	sts	0x0466, r23

  }

  kernel.nextHit = nextHit;  
     2ba:	a0 92 ac 04 	sts	0x04AC, r10
     2be:	b0 92 ad 04 	sts	0x04AD, r11
     2c2:	c0 92 ae 04 	sts	0x04AE, r12
     2c6:	d0 92 af 04 	sts	0x04AF, r13

  now = (kernel.cycles << 16) + TCNT1;
     2ca:	20 91 84 00 	lds	r18, 0x0084
     2ce:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	80 91 a8 04 	lds	r24, 0x04A8
     2da:	90 91 a9 04 	lds	r25, 0x04A9
     2de:	a0 91 aa 04 	lds	r26, 0x04AA
     2e2:	b0 91 ab 04 	lds	r27, 0x04AB
     2e6:	dc 01       	movw	r26, r24
     2e8:	99 27       	eor	r25, r25
     2ea:	88 27       	eor	r24, r24
     2ec:	28 0f       	add	r18, r24
     2ee:	39 1f       	adc	r19, r25
     2f0:	4a 1f       	adc	r20, r26
     2f2:	5b 1f       	adc	r21, r27
     2f4:	d6 01       	movw	r26, r12
     2f6:	c5 01       	movw	r24, r10
     2f8:	82 1b       	sub	r24, r18
     2fa:	93 0b       	sbc	r25, r19
     2fc:	a4 0b       	sbc	r26, r20
     2fe:	b5 0b       	sbc	r27, r21
     300:	9c 01       	movw	r18, r24
     302:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     304:	84 30       	cpi	r24, 0x04	; 4
     306:	91 05       	cpc	r25, r1
     308:	a1 05       	cpc	r26, r1
     30a:	b1 05       	cpc	r27, r1
     30c:	24 f4       	brge	.+8      	; 0x316 <__vector_13+0x1e8>
     30e:	24 e0       	ldi	r18, 0x04	; 4
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     316:	80 91 84 00 	lds	r24, 0x0084
     31a:	90 91 85 00 	lds	r25, 0x0085
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	82 0f       	add	r24, r18
     324:	93 1f       	adc	r25, r19
     326:	a4 1f       	adc	r26, r20
     328:	b5 1f       	adc	r27, r21
     32a:	80 50       	subi	r24, 0x00	; 0
     32c:	90 40       	sbci	r25, 0x00	; 0
     32e:	a1 40       	sbci	r26, 0x01	; 1
     330:	b0 40       	sbci	r27, 0x00	; 0
     332:	38 f4       	brcc	.+14     	; 0x342 <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     334:	80 91 84 00 	lds	r24, 0x0084
     338:	90 91 85 00 	lds	r25, 0x0085
     33c:	82 0f       	add	r24, r18
     33e:	93 1f       	adc	r25, r19
     340:	0e c0       	rjmp	.+28     	; 0x35e <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     342:	80 91 84 00 	lds	r24, 0x0084
     346:	90 91 85 00 	lds	r25, 0x0085
     34a:	8c 5f       	subi	r24, 0xFC	; 252
     34c:	9f 4f       	sbci	r25, 0xFF	; 255
     34e:	28 f4       	brcc	.+10     	; 0x35a <__vector_13+0x22c>
    OCR1A = 0x0000;
     350:	10 92 89 00 	sts	0x0089, r1
     354:	10 92 88 00 	sts	0x0088, r1
     358:	06 c0       	rjmp	.+12     	; 0x366 <__vector_13+0x238>
  } else {
    OCR1A = 4;
     35a:	84 e0       	ldi	r24, 0x04	; 4
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	90 93 89 00 	sts	0x0089, r25
     362:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	80 93 6f 00 	sts	0x006F, r24
}
     36c:	ff 91       	pop	r31
     36e:	ef 91       	pop	r30
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	bf 91       	pop	r27
     376:	af 91       	pop	r26
     378:	9f 91       	pop	r25
     37a:	8f 91       	pop	r24
     37c:	7f 91       	pop	r23
     37e:	6f 91       	pop	r22
     380:	5f 91       	pop	r21
     382:	4f 91       	pop	r20
     384:	3f 91       	pop	r19
     386:	2f 91       	pop	r18
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	cf 90       	pop	r12
     394:	bf 90       	pop	r11
     396:	af 90       	pop	r10
     398:	9f 90       	pop	r9
     39a:	8f 90       	pop	r8
     39c:	7f 90       	pop	r7
     39e:	6f 90       	pop	r6
     3a0:	5f 90       	pop	r5
     3a2:	4f 90       	pop	r4
     3a4:	3f 90       	pop	r3
     3a6:	2f 90       	pop	r2
     3a8:	0f 90       	pop	r0
     3aa:	0b be       	out	0x3b, r0	; 59
     3ac:	0f 90       	pop	r0
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	0f 90       	pop	r0
     3b2:	1f 90       	pop	r1
     3b4:	18 95       	reti

000003b6 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     3b6:	10 92 85 00 	sts	0x0085, r1
     3ba:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     3be:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     3c2:	25 e0       	ldi	r18, 0x05	; 5
     3c4:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     3c8:	22 e0       	ldi	r18, 0x02	; 2
     3ca:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     3ce:	2f ef       	ldi	r18, 0xFF	; 255
     3d0:	30 e4       	ldi	r19, 0x40	; 64
     3d2:	28 1b       	sub	r18, r24
     3d4:	39 0b       	sbc	r19, r25
     3d6:	30 93 a7 04 	sts	0x04A7, r19
     3da:	20 93 a6 04 	sts	0x04A6, r18
  kernel.nbrOfTasks = 0;
     3de:	10 92 65 04 	sts	0x0465, r1
  kernel.running = 0;
     3e2:	10 92 66 04 	sts	0x0466, r1

  kernel.cycles = 0x0000;
     3e6:	10 92 a8 04 	sts	0x04A8, r1
     3ea:	10 92 a9 04 	sts	0x04A9, r1
     3ee:	10 92 aa 04 	sts	0x04AA, r1
     3f2:	10 92 ab 04 	sts	0x04AB, r1
  kernel.nextHit = 0x7FFFFFFF;
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	9f ef       	ldi	r25, 0xFF	; 255
     3fa:	af ef       	ldi	r26, 0xFF	; 255
     3fc:	bf e7       	ldi	r27, 0x7F	; 127
     3fe:	80 93 ac 04 	sts	0x04AC, r24
     402:	90 93 ad 04 	sts	0x04AD, r25
     406:	a0 93 ae 04 	sts	0x04AE, r26
     40a:	b0 93 af 04 	sts	0x04AF, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     40e:	80 93 6d 04 	sts	0x046D, r24
     412:	90 93 6e 04 	sts	0x046E, r25
     416:	a0 93 6f 04 	sts	0x046F, r26
     41a:	b0 93 70 04 	sts	0x0470, r27
  kernel.tasks[0].release = 0x00000000;
     41e:	10 92 69 04 	sts	0x0469, r1
     422:	10 92 6a 04 	sts	0x046A, r1
     426:	10 92 6b 04 	sts	0x046B, r1
     42a:	10 92 6c 04 	sts	0x046C, r1

  sei(); /* set enabled interrupts */
     42e:	78 94       	sei
}
     430:	08 95       	ret

00000432 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     432:	8f 92       	push	r8
     434:	9f 92       	push	r9
     436:	af 92       	push	r10
     438:	bf 92       	push	r11
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	49 01       	movw	r8, r18
     44c:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     44e:	f8 94       	cli

  ++kernel.nbrOfTasks;
     450:	20 91 65 04 	lds	r18, 0x0465
     454:	2f 5f       	subi	r18, 0xFF	; 255
     456:	20 93 65 04 	sts	0x0465, r18

  sp = kernel.memptr;
     45a:	c0 91 a6 04 	lds	r28, 0x04A6
     45e:	d0 91 a7 04 	lds	r29, 0x04A7
  kernel.memptr -= stacksize;  // decrease free mem ptr
     462:	9e 01       	movw	r18, r28
     464:	26 1b       	sub	r18, r22
     466:	37 0b       	sbc	r19, r23
     468:	30 93 a7 04 	sts	0x04A7, r19
     46c:	20 93 a6 04 	sts	0x04A6, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     470:	88 83       	st	Y, r24
     472:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     474:	92 93       	st	-Z, r25
     476:	31 97       	sbiw	r30, 0x01	; 1
     478:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     47a:	ce 01       	movw	r24, r28
     47c:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     47e:	1c 92       	st	X, r1
     480:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     482:	a8 17       	cp	r26, r24
     484:	b9 07       	cpc	r27, r25
     486:	d9 f7       	brne	.-10     	; 0x47e <trtCreateTask+0x4c>
     488:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     48a:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     48c:	d2 92       	st	-Z, r13
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     492:	9e 01       	movw	r18, r28
     494:	24 52       	subi	r18, 0x24	; 36
     496:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     498:	1c 92       	st	X, r1
     49a:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     49c:	a2 17       	cp	r26, r18
     49e:	b3 07       	cpc	r27, r19
     4a0:	d9 f7       	brne	.-10     	; 0x498 <trtCreateTask+0x66>
     4a2:	9f 01       	movw	r18, r30
     4a4:	26 50       	subi	r18, 0x06	; 6
     4a6:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     4a8:	e0 91 65 04 	lds	r30, 0x0465
     4ac:	8b e0       	ldi	r24, 0x0B	; 11
     4ae:	e8 9f       	mul	r30, r24
     4b0:	f0 01       	movw	r30, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	e9 59       	subi	r30, 0x99	; 153
     4b6:	fb 4f       	sbci	r31, 0xFB	; 251
  ///*
  t->release = release;
     4b8:	82 82       	std	Z+2, r8	; 0x02
     4ba:	93 82       	std	Z+3, r9	; 0x03
     4bc:	a4 82       	std	Z+4, r10	; 0x04
     4be:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     4c0:	e6 82       	std	Z+6, r14	; 0x06
     4c2:	f7 82       	std	Z+7, r15	; 0x07
     4c4:	00 87       	std	Z+8, r16	; 0x08
     4c6:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	82 87       	std	Z+10, r24	; 0x0a
  //*/
  t->spl = lo8(sp);       // store stack pointer
     4cc:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     4ce:	31 83       	std	Z+1, r19	; 0x01
  

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     4d0:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>

}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	08 95       	ret

000004ee <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     4ee:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     4f0:	e5 e6       	ldi	r30, 0x65	; 101
     4f2:	f4 e0       	ldi	r31, 0x04	; 4
     4f4:	e8 0f       	add	r30, r24
     4f6:	f1 1d       	adc	r31, r1
     4f8:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     4fa:	78 94       	sei
}
     4fc:	08 95       	ret

000004fe <trtWait>:

void trtWait(uint8_t semnbr) {
     4fe:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     500:	20 91 66 04 	lds	r18, 0x0466

  cli(); // disable interrupts
     504:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     506:	e8 2f       	mov	r30, r24
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	e3 56       	subi	r30, 0x63	; 99
     50c:	fb 4f       	sbci	r31, 0xFB	; 251
  if ((*s) > 0) {
     50e:	80 81       	ld	r24, Z
     510:	88 23       	and	r24, r24
     512:	19 f0       	breq	.+6      	; 0x51a <trtWait+0x1c>
    (*s)--;
     514:	81 50       	subi	r24, 0x01	; 1
     516:	80 83       	st	Z, r24
     518:	10 c0       	rjmp	.+32     	; 0x53a <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	8b e0       	ldi	r24, 0x0B	; 11
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	28 9f       	mul	r18, r24
     522:	f0 01       	movw	r30, r0
     524:	29 9f       	mul	r18, r25
     526:	f0 0d       	add	r31, r0
     528:	38 9f       	mul	r19, r24
     52a:	f0 0d       	add	r31, r0
     52c:	11 24       	eor	r1, r1
     52e:	e9 59       	subi	r30, 0x99	; 153
     530:	fb 4f       	sbci	r31, 0xFB	; 251
     532:	4e 5f       	subi	r20, 0xFE	; 254
     534:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     536:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
  }

  sei(); // reenable interrupts
     53a:	78 94       	sei
}
     53c:	08 95       	ret

0000053e <trtSignal>:

void trtSignal(uint8_t semnbr) {
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     546:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     548:	00 91 65 04 	lds	r16, 0x0465
     54c:	e1 e0       	ldi	r30, 0x01	; 1
     54e:	4f ef       	ldi	r20, 0xFF	; 255
     550:	5f ef       	ldi	r21, 0xFF	; 255
     552:	6f ef       	ldi	r22, 0xFF	; 255
     554:	7f ef       	ldi	r23, 0xFF	; 255
     556:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     558:	8b e0       	ldi	r24, 0x0B	; 11
     55a:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     55c:	21 2f       	mov	r18, r17
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	2e 5f       	subi	r18, 0xFE	; 254
     562:	3f 4f       	sbci	r19, 0xFF	; 255
     564:	1e c0       	rjmp	.+60     	; 0x5a2 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     566:	ef 9d       	mul	r30, r15
     568:	d0 01       	movw	r26, r0
     56a:	11 24       	eor	r1, r1
     56c:	a9 59       	subi	r26, 0x99	; 153
     56e:	bb 4f       	sbci	r27, 0xFB	; 251
    if (t->state == (semnbr + WAIT_OFFSET)) {
     570:	1a 96       	adiw	r26, 0x0a	; 10
     572:	8c 91       	ld	r24, X
     574:	1a 97       	sbiw	r26, 0x0a	; 10
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	82 17       	cp	r24, r18
     57a:	93 07       	cpc	r25, r19
     57c:	69 f4       	brne	.+26     	; 0x598 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     57e:	16 96       	adiw	r26, 0x06	; 6
     580:	8d 91       	ld	r24, X+
     582:	9d 91       	ld	r25, X+
     584:	0d 90       	ld	r0, X+
     586:	bc 91       	ld	r27, X
     588:	a0 2d       	mov	r26, r0
     58a:	48 17       	cp	r20, r24
     58c:	59 07       	cpc	r21, r25
     58e:	6a 07       	cpc	r22, r26
     590:	7b 07       	cpc	r23, r27
     592:	10 f0       	brcs	.+4      	; 0x598 <trtSignal+0x5a>
     594:	fe 2f       	mov	r31, r30
     596:	02 c0       	rjmp	.+4      	; 0x59c <trtSignal+0x5e>
     598:	db 01       	movw	r26, r22
     59a:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     59c:	ef 5f       	subi	r30, 0xFF	; 255
     59e:	ac 01       	movw	r20, r24
     5a0:	bd 01       	movw	r22, r26
     5a2:	0e 17       	cp	r16, r30
     5a4:	00 f7       	brcc	.-64     	; 0x566 <trtSignal+0x28>
  minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     5a6:	ff 23       	and	r31, r31
     5a8:	41 f4       	brne	.+16     	; 0x5ba <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     5aa:	e1 2f       	mov	r30, r17
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	ec 59       	subi	r30, 0x9C	; 156
     5b0:	fb 4f       	sbci	r31, 0xFB	; 251
     5b2:	81 ad       	ldd	r24, Z+57	; 0x39
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	81 af       	std	Z+57, r24	; 0x39
     5b8:	11 c0       	rjmp	.+34     	; 0x5dc <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     5ba:	2f 2f       	mov	r18, r31
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	8b e0       	ldi	r24, 0x0B	; 11
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	28 9f       	mul	r18, r24
     5c4:	f0 01       	movw	r30, r0
     5c6:	29 9f       	mul	r18, r25
     5c8:	f0 0d       	add	r31, r0
     5ca:	38 9f       	mul	r19, r24
     5cc:	f0 0d       	add	r31, r0
     5ce:	11 24       	eor	r1, r1
     5d0:	eb 59       	subi	r30, 0x9B	; 155
     5d2:	fb 4f       	sbci	r31, 0xFB	; 251
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5d8:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
  }

  sei(); // reenable interrupts
     5dc:	78 94       	sei
}
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	08 95       	ret

000005e6 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     5e6:	20 91 84 00 	lds	r18, 0x0084
     5ea:	30 91 85 00 	lds	r19, 0x0085
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	80 91 a8 04 	lds	r24, 0x04A8
     5f6:	90 91 a9 04 	lds	r25, 0x04A9
     5fa:	a0 91 aa 04 	lds	r26, 0x04AA
     5fe:	b0 91 ab 04 	lds	r27, 0x04AB
     602:	dc 01       	movw	r26, r24
     604:	99 27       	eor	r25, r25
     606:	88 27       	eor	r24, r24
     608:	28 0f       	add	r18, r24
     60a:	39 1f       	adc	r19, r25
     60c:	4a 1f       	adc	r20, r26
     60e:	5b 1f       	adc	r21, r27
}
     610:	b9 01       	movw	r22, r18
     612:	ca 01       	movw	r24, r20
     614:	08 95       	ret

00000616 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     616:	e0 91 66 04 	lds	r30, 0x0466
     61a:	ab e0       	ldi	r26, 0x0B	; 11
     61c:	ea 9f       	mul	r30, r26
     61e:	f0 01       	movw	r30, r0
     620:	11 24       	eor	r1, r1
     622:	e9 59       	subi	r30, 0x99	; 153
     624:	fb 4f       	sbci	r31, 0xFB	; 251

  cli(); // turn off interrupts
     626:	f8 94       	cli

  t->state = TIMEQ;
     628:	a2 e0       	ldi	r26, 0x02	; 2
     62a:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     62c:	62 83       	std	Z+2, r22	; 0x02
     62e:	73 83       	std	Z+3, r23	; 0x03
     630:	84 83       	std	Z+4, r24	; 0x04
     632:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     634:	26 83       	std	Z+6, r18	; 0x06
     636:	37 83       	std	Z+7, r19	; 0x07
     638:	40 87       	std	Z+8, r20	; 0x08
     63a:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     63c:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
}
     640:	08 95       	ret

00000642 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     642:	80 91 66 04 	lds	r24, 0x0466
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	2b e0       	ldi	r18, 0x0B	; 11
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	82 9f       	mul	r24, r18
     64e:	f0 01       	movw	r30, r0
     650:	83 9f       	mul	r24, r19
     652:	f0 0d       	add	r31, r0
     654:	92 9f       	mul	r25, r18
     656:	f0 0d       	add	r31, r0
     658:	11 24       	eor	r1, r1
     65a:	eb 59       	subi	r30, 0x9B	; 155
     65c:	fb 4f       	sbci	r31, 0xFB	; 251
     65e:	df 01       	movw	r26, r30
     660:	14 96       	adiw	r26, 0x04	; 4
     662:	64 81       	ldd	r22, Z+4	; 0x04
     664:	11 96       	adiw	r26, 0x01	; 1
     666:	7c 91       	ld	r23, X
     668:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     66a:	12 96       	adiw	r26, 0x02	; 2
     66c:	8c 91       	ld	r24, X
     66e:	12 97       	sbiw	r26, 0x02	; 2
     670:	13 96       	adiw	r26, 0x03	; 3
     672:	9c 91       	ld	r25, X
     674:	08 95       	ret

00000676 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     676:	80 91 66 04 	lds	r24, 0x0466
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2b e0       	ldi	r18, 0x0B	; 11
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	82 9f       	mul	r24, r18
     682:	f0 01       	movw	r30, r0
     684:	83 9f       	mul	r24, r19
     686:	f0 0d       	add	r31, r0
     688:	92 9f       	mul	r25, r18
     68a:	f0 0d       	add	r31, r0
     68c:	11 24       	eor	r1, r1
     68e:	eb 59       	subi	r30, 0x9B	; 155
     690:	fb 4f       	sbci	r31, 0xFB	; 251
     692:	df 01       	movw	r26, r30
     694:	18 96       	adiw	r26, 0x08	; 8
     696:	60 85       	ldd	r22, Z+8	; 0x08
     698:	11 96       	adiw	r26, 0x01	; 1
     69a:	7c 91       	ld	r23, X
     69c:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     69e:	12 96       	adiw	r26, 0x02	; 2
     6a0:	8c 91       	ld	r24, X
     6a2:	12 97       	sbiw	r26, 0x02	; 2
     6a4:	13 96       	adiw	r26, 0x03	; 3
     6a6:	9c 91       	ld	r25, X
     6a8:	08 95       	ret

000006aa <trtTerminate>:

void trtTerminate(void) {

  cli();
     6aa:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     6ac:	80 91 66 04 	lds	r24, 0x0466
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	2b e0       	ldi	r18, 0x0B	; 11
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	82 9f       	mul	r24, r18
     6b8:	f0 01       	movw	r30, r0
     6ba:	83 9f       	mul	r24, r19
     6bc:	f0 0d       	add	r31, r0
     6be:	92 9f       	mul	r25, r18
     6c0:	f0 0d       	add	r31, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	eb 59       	subi	r30, 0x9B	; 155
     6c6:	fb 4f       	sbci	r31, 0xFB	; 251
     6c8:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     6ca:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
}
     6ce:	08 95       	ret

000006d0 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     6d0:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     6d2:	e8 2f       	mov	r30, r24
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	e3 56       	subi	r30, 0x63	; 99
     6d8:	fb 4f       	sbci	r31, 0xFB	; 251
  temp = *s ;
     6da:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     6dc:	88 23       	and	r24, r24
     6de:	19 f0       	breq	.+6      	; 0x6e6 <trtAccept+0x16>
    (*s)--;
     6e0:	81 50       	subi	r24, 0x01	; 1
     6e2:	80 83       	st	Z, r24
     6e4:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     6e6:	78 94       	sei
  return temp ;
}
     6e8:	08 95       	ret

000006ea <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     6ea:	87 e6       	ldi	r24, 0x67	; 103
     6ec:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     6f0:	e1 ec       	ldi	r30, 0xC1	; 193
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	88 e1       	ldi	r24, 0x18	; 24
     6f6:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     6f8:	10 92 7b 03 	sts	0x037B, r1
     6fc:	10 92 7a 03 	sts	0x037A, r1
  tx_out = 0;
     700:	10 92 7d 03 	sts	0x037D, r1
     704:	10 92 7c 03 	sts	0x037C, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     708:	80 81       	ld	r24, Z
     70a:	80 68       	ori	r24, 0x80	; 128
     70c:	80 83       	st	Z, r24
}
     70e:	08 95       	ret

00000710 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	0b b6       	in	r0, 0x3b	; 59
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	8f 93       	push	r24
     724:	9f 93       	push	r25
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     72a:	20 91 7a 03 	lds	r18, 0x037A
     72e:	30 91 7b 03 	lds	r19, 0x037B
     732:	80 91 7c 03 	lds	r24, 0x037C
     736:	90 91 7d 03 	lds	r25, 0x037D
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	31 f4       	brne	.+12     	; 0x74c <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     740:	80 91 c1 00 	lds	r24, 0x00C1
     744:	8f 7d       	andi	r24, 0xDF	; 223
     746:	80 93 c1 00 	sts	0x00C1, r24
     74a:	1d c0       	rjmp	.+58     	; 0x786 <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     74c:	e0 91 7c 03 	lds	r30, 0x037C
     750:	f0 91 7d 03 	lds	r31, 0x037D
     754:	e2 58       	subi	r30, 0x82	; 130
     756:	fc 4f       	sbci	r31, 0xFC	; 252
     758:	80 81       	ld	r24, Z
     75a:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     75e:	80 91 7c 03 	lds	r24, 0x037C
     762:	90 91 7d 03 	lds	r25, 0x037D
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	90 93 7d 03 	sts	0x037D, r25
     76c:	80 93 7c 03 	sts	0x037C, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     770:	80 91 7c 03 	lds	r24, 0x037C
     774:	90 91 7d 03 	lds	r25, 0x037D
     778:	88 3c       	cpi	r24, 0xC8	; 200
     77a:	91 05       	cpc	r25, r1
     77c:	21 f4       	brne	.+8      	; 0x786 <__vector_21+0x76>
     77e:	10 92 7d 03 	sts	0x037D, r1
     782:	10 92 7c 03 	sts	0x037C, r1
  }
}
     786:	ff 91       	pop	r31
     788:	ef 91       	pop	r30
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	3f 91       	pop	r19
     790:	2f 91       	pop	r18
     792:	0f 90       	pop	r0
     794:	0b be       	out	0x3b, r0	; 59
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	0f 90       	pop	r0
     79c:	1f 90       	pop	r1
     79e:	18 95       	reti

000007a0 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     7a0:	1f 93       	push	r17
     7a2:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     7a4:	8a 30       	cpi	r24, 0x0A	; 10
     7a6:	19 f4       	brne	.+6      	; 0x7ae <uart_putchar+0xe>
     7a8:	8d e0       	ldi	r24, 0x0D	; 13
     7aa:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
  char i = tx_in;
     7ae:	80 91 7a 03 	lds	r24, 0x037A
     7b2:	90 91 7b 03 	lds	r25, 0x037B
  i++;
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     7b8:	88 3c       	cpi	r24, 0xC8	; 200
     7ba:	09 f4       	brne	.+2      	; 0x7be <uart_putchar+0x1e>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     7be:	e0 91 7a 03 	lds	r30, 0x037A
     7c2:	f0 91 7b 03 	lds	r31, 0x037B
     7c6:	e2 58       	subi	r30, 0x82	; 130
     7c8:	fc 4f       	sbci	r31, 0xFC	; 252
     7ca:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     7cc:	28 2f       	mov	r18, r24
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	80 91 7c 03 	lds	r24, 0x037C
     7d4:	90 91 7d 03 	lds	r25, 0x037D
     7d8:	28 17       	cp	r18, r24
     7da:	39 07       	cpc	r19, r25
     7dc:	c9 f3       	breq	.-14     	; 0x7d0 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     7de:	30 93 7b 03 	sts	0x037B, r19
     7e2:	20 93 7a 03 	sts	0x037A, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     7e6:	80 91 c1 00 	lds	r24, 0x00C1
     7ea:	80 62       	ori	r24, 0x20	; 32
     7ec:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	1f 91       	pop	r17
     7f6:	08 95       	ret

000007f8 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	0b b6       	in	r0, 0x3b	; 59
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
	trt_rx_c = UDR0;
     81e:	80 91 c6 00 	lds	r24, 0x00C6
     822:	80 93 b0 04 	sts	0x04B0, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
}
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	bf 91       	pop	r27
     832:	af 91       	pop	r26
     834:	9f 91       	pop	r25
     836:	8f 91       	pop	r24
     838:	7f 91       	pop	r23
     83a:	6f 91       	pop	r22
     83c:	5f 91       	pop	r21
     83e:	4f 91       	pop	r20
     840:	3f 91       	pop	r19
     842:	2f 91       	pop	r18
     844:	0f 90       	pop	r0
     846:	0b be       	out	0x3b, r0	; 59
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     860:	80 91 28 03 	lds	r24, 0x0328
     864:	90 91 29 03 	lds	r25, 0x0329
     868:	89 2b       	or	r24, r25
     86a:	09 f0       	breq	.+2      	; 0x86e <uart_getchar+0x1c>
     86c:	a1 c0       	rjmp	.+322    	; 0x9b0 <uart_getchar+0x15e>
     86e:	0a e2       	ldi	r16, 0x2A	; 42
     870:	13 e0       	ldi	r17, 0x03	; 3
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	if (UCSR0A & _BV(FE0))
     878:	80 91 c0 00 	lds	r24, 0x00C0
     87c:	84 ff       	sbrs	r24, 4
     87e:	03 c0       	rjmp	.+6      	; 0x886 <uart_getchar+0x34>
     880:	2e ef       	ldi	r18, 0xFE	; 254
     882:	3f ef       	ldi	r19, 0xFF	; 255
     884:	a9 c0       	rjmp	.+338    	; 0x9d8 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     886:	80 91 c0 00 	lds	r24, 0x00C0
     88a:	83 fd       	sbrc	r24, 3
     88c:	a3 c0       	rjmp	.+326    	; 0x9d4 <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     88e:	90 91 b0 04 	lds	r25, 0x04B0

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     892:	9d 30       	cpi	r25, 0x0D	; 13
     894:	11 f0       	breq	.+4      	; 0x89a <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     896:	9a 30       	cpi	r25, 0x0A	; 10
     898:	81 f4       	brne	.+32     	; 0x8ba <uart_getchar+0x68>
	  {
	    *cp = c;
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	f8 01       	movw	r30, r16
     89e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     8a0:	b7 01       	movw	r22, r14
     8a2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
	    rxp = b;
     8a6:	8a e2       	ldi	r24, 0x2A	; 42
     8a8:	93 e0       	ldi	r25, 0x03	; 3
     8aa:	90 93 29 03 	sts	0x0329, r25
     8ae:	80 93 28 03 	sts	0x0328, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
     8b8:	7b c0       	rjmp	.+246    	; 0x9b0 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     8ba:	99 30       	cpi	r25, 0x09	; 9
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <uart_getchar+0x6e>
     8be:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     8c0:	89 2f       	mov	r24, r25
     8c2:	80 52       	subi	r24, 0x20	; 32
     8c4:	8f 35       	cpi	r24, 0x5F	; 95
     8c6:	10 f0       	brcs	.+4      	; 0x8cc <uart_getchar+0x7a>
     8c8:	90 3a       	cpi	r25, 0xA0	; 160
     8ca:	70 f0       	brcs	.+28     	; 0x8e8 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     8cc:	f3 e0       	ldi	r31, 0x03	; 3
     8ce:	09 37       	cpi	r16, 0x79	; 121
     8d0:	1f 07       	cpc	r17, r31
     8d2:	11 f4       	brne	.+4      	; 0x8d8 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     8d4:	87 e0       	ldi	r24, 0x07	; 7
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     8d8:	f8 01       	movw	r30, r16
     8da:	91 93       	st	Z+, r25
     8dc:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     8de:	89 2f       	mov	r24, r25
     8e0:	b7 01       	movw	r22, r14
     8e2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     8e6:	c5 cf       	rjmp	.-118    	; 0x872 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     8e8:	92 31       	cpi	r25, 0x12	; 18
     8ea:	39 f1       	breq	.+78     	; 0x93a <uart_getchar+0xe8>
     8ec:	93 31       	cpi	r25, 0x13	; 19
     8ee:	38 f4       	brcc	.+14     	; 0x8fe <uart_getchar+0xac>
     8f0:	93 30       	cpi	r25, 0x03	; 3
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <uart_getchar+0xa4>
     8f4:	6f c0       	rjmp	.+222    	; 0x9d4 <uart_getchar+0x182>
     8f6:	98 30       	cpi	r25, 0x08	; 8
     8f8:	09 f0       	breq	.+2      	; 0x8fc <uart_getchar+0xaa>
     8fa:	bb cf       	rjmp	.-138    	; 0x872 <uart_getchar+0x20>
     8fc:	09 c0       	rjmp	.+18     	; 0x910 <uart_getchar+0xbe>
     8fe:	97 31       	cpi	r25, 0x17	; 23
     900:	09 f4       	brne	.+2      	; 0x904 <uart_getchar+0xb2>
     902:	4b c0       	rjmp	.+150    	; 0x99a <uart_getchar+0x148>
     904:	9f 37       	cpi	r25, 0x7F	; 127
     906:	21 f0       	breq	.+8      	; 0x910 <uart_getchar+0xbe>
     908:	95 31       	cpi	r25, 0x15	; 21
     90a:	09 f0       	breq	.+2      	; 0x90e <uart_getchar+0xbc>
     90c:	b2 cf       	rjmp	.-156    	; 0x872 <uart_getchar+0x20>
     90e:	32 c0       	rjmp	.+100    	; 0x974 <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     910:	f3 e0       	ldi	r31, 0x03	; 3
     912:	0a 32       	cpi	r16, 0x2A	; 42
     914:	1f 07       	cpc	r17, r31
     916:	09 f0       	breq	.+2      	; 0x91a <uart_getchar+0xc8>
     918:	08 f4       	brcc	.+2      	; 0x91c <uart_getchar+0xca>
     91a:	ab cf       	rjmp	.-170    	; 0x872 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     91c:	88 e0       	ldi	r24, 0x08	; 8
     91e:	b7 01       	movw	r22, r14
     920:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	b7 01       	movw	r22, r14
     928:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     92c:	88 e0       	ldi	r24, 0x08	; 8
     92e:	b7 01       	movw	r22, r14
     930:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		cp--;
     934:	01 50       	subi	r16, 0x01	; 1
     936:	10 40       	sbci	r17, 0x00	; 0
     938:	9c cf       	rjmp	.-200    	; 0x872 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     93a:	8d e0       	ldi	r24, 0x0D	; 13
     93c:	b7 01       	movw	r22, r14
     93e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     942:	ca e2       	ldi	r28, 0x2A	; 42
     944:	d3 e0       	ldi	r29, 0x03	; 3
     946:	04 c0       	rjmp	.+8      	; 0x950 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     948:	89 91       	ld	r24, Y+
     94a:	b7 01       	movw	r22, r14
     94c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     950:	c0 17       	cp	r28, r16
     952:	d1 07       	cpc	r29, r17
     954:	c8 f3       	brcs	.-14     	; 0x948 <uart_getchar+0xf6>
     956:	8d cf       	rjmp	.-230    	; 0x872 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     958:	88 e0       	ldi	r24, 0x08	; 8
     95a:	b7 01       	movw	r22, r14
     95c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     960:	80 e2       	ldi	r24, 0x20	; 32
     962:	b7 01       	movw	r22, r14
     964:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	b7 01       	movw	r22, r14
     96c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		cp--;
     970:	01 50       	subi	r16, 0x01	; 1
     972:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	0a 32       	cpi	r16, 0x2A	; 42
     978:	18 07       	cpc	r17, r24
     97a:	09 f0       	breq	.+2      	; 0x97e <uart_getchar+0x12c>
     97c:	68 f7       	brcc	.-38     	; 0x958 <uart_getchar+0x106>
     97e:	79 cf       	rjmp	.-270    	; 0x872 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     980:	88 e0       	ldi	r24, 0x08	; 8
     982:	b7 01       	movw	r22, r14
     984:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     988:	80 e2       	ldi	r24, 0x20	; 32
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     990:	88 e0       	ldi	r24, 0x08	; 8
     992:	b7 01       	movw	r22, r14
     994:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     998:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     99a:	e3 e0       	ldi	r30, 0x03	; 3
     99c:	0a 32       	cpi	r16, 0x2A	; 42
     99e:	1e 07       	cpc	r17, r30
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <uart_getchar+0x152>
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <uart_getchar+0x154>
     9a4:	66 cf       	rjmp	.-308    	; 0x872 <uart_getchar+0x20>
     9a6:	e8 01       	movw	r28, r16
     9a8:	8a 91       	ld	r24, -Y
     9aa:	80 32       	cpi	r24, 0x20	; 32
     9ac:	49 f7       	brne	.-46     	; 0x980 <uart_getchar+0x12e>
     9ae:	61 cf       	rjmp	.-318    	; 0x872 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     9b0:	e0 91 28 03 	lds	r30, 0x0328
     9b4:	f0 91 29 03 	lds	r31, 0x0329
     9b8:	81 91       	ld	r24, Z+
     9ba:	f0 93 29 03 	sts	0x0329, r31
     9be:	e0 93 28 03 	sts	0x0328, r30
  if (c == '\n')
     9c2:	8a 30       	cpi	r24, 0x0A	; 10
     9c4:	21 f4       	brne	.+8      	; 0x9ce <uart_getchar+0x17c>
    rxp = 0;
     9c6:	10 92 29 03 	sts	0x0329, r1
     9ca:	10 92 28 03 	sts	0x0328, r1

  return c;
     9ce:	28 2f       	mov	r18, r24
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <uart_getchar+0x186>
     9d4:	2f ef       	ldi	r18, 0xFF	; 255
     9d6:	3f ef       	ldi	r19, 0xFF	; 255
}
     9d8:	c9 01       	movw	r24, r18
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret

000009e8 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     9e8:	28 2f       	mov	r18, r24
     9ea:	20 7f       	andi	r18, 0xF0	; 240
     9ec:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     9ee:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     9f0:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9f2:	20 e4       	ldi	r18, 0x40	; 64
     9f4:	3f e1       	ldi	r19, 0x1F	; 31
     9f6:	f9 01       	movw	r30, r18
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     9fc:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     9fe:	40 98       	cbi	0x08, 0	; 8
     a00:	f9 01       	movw	r30, r18
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	f1 f7       	brne	.-4      	; 0xa02 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	74 e0       	ldi	r23, 0x04	; 4
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	7a 95       	dec	r23
     a10:	e1 f7       	brne	.-8      	; 0xa0a <LCDsendChar+0x22>
     a12:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     a14:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     a16:	42 9a       	sbi	0x08, 2	; 8
     a18:	c9 01       	movw	r24, r18
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     a1e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     a20:	40 98       	cbi	0x08, 0	; 8
     a22:	c9 01       	movw	r24, r18
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     a28:	08 95       	ret

00000a2a <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     a2a:	28 2f       	mov	r18, r24
     a2c:	20 7f       	andi	r18, 0xF0	; 240
     a2e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     a30:	42 9a       	sbi	0x08, 2	; 8
     a32:	20 e4       	ldi	r18, 0x40	; 64
     a34:	3f e1       	ldi	r19, 0x1F	; 31
     a36:	f9 01       	movw	r30, r18
     a38:	31 97       	sbiw	r30, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     a3c:	42 98       	cbi	0x08, 2	; 8
     a3e:	f9 01       	movw	r30, r18
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	e4 e0       	ldi	r30, 0x04	; 4
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	ea 95       	dec	r30
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <LCDsendCommand+0x1e>
     a50:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     a52:	42 9a       	sbi	0x08, 2	; 8
     a54:	c9 01       	movw	r24, r18
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     a5a:	42 98       	cbi	0x08, 2	; 8
     a5c:	c9 01       	movw	r24, r18
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     a62:	08 95       	ret

00000a64 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     a6a:	08 95       	ret

00000a6c <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     a72:	08 95       	ret

00000a74 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	49 f0       	breq	.+18     	; 0xa94 <LCDstring+0x20>
     a82:	ec 01       	movw	r28, r24
     a84:	10 e0       	ldi	r17, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     a88:	89 91       	ld	r24, Y+
     a8a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     a8e:	1f 5f       	subi	r17, 0xFF	; 255
     a90:	10 17       	cp	r17, r16
     a92:	d0 f3       	brcs	.-12     	; 0xa88 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     a9e:	62 30       	cpi	r22, 0x02	; 2
     aa0:	31 f0       	breq	.+12     	; 0xaae <LCDGotoXY+0x10>
     aa2:	63 30       	cpi	r22, 0x03	; 3
     aa4:	31 f0       	breq	.+12     	; 0xab2 <LCDGotoXY+0x14>
     aa6:	61 30       	cpi	r22, 0x01	; 1
     aa8:	29 f4       	brne	.+10     	; 0xab4 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     aaa:	80 5c       	subi	r24, 0xC0	; 192
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     aae:	8c 5e       	subi	r24, 0xEC	; 236
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     ab2:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     ab4:	80 68       	ori	r24, 0x80	; 128
     ab6:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
	
}
     aba:	08 95       	ret

00000abc <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ec 01       	movw	r28, r24
     ac4:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     ac6:	64 2f       	mov	r22, r20
     ac8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
     acc:	10 e0       	ldi	r17, 0x00	; 0
     ace:	03 c0       	rjmp	.+6      	; 0xad6 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     ad0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     ad4:	1f 5f       	subi	r17, 0xFF	; 255
     ad6:	fe 01       	movw	r30, r28
     ad8:	e1 0f       	add	r30, r17
     ada:	f1 1d       	adc	r31, r1
     adc:	84 91       	lpm	r24, Z+
     ade:	88 23       	and	r24, r24
     ae0:	b9 f7       	brne	.-18     	; 0xad0 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	08 95       	ret

00000aea <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	7c 01       	movw	r14, r24
     af8:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     afa:	11 0f       	add	r17, r17
     afc:	11 0f       	add	r17, r17
     afe:	11 0f       	add	r17, r17
     b00:	10 64       	ori	r17, 0x40	; 64
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     b06:	f7 01       	movw	r30, r14
     b08:	ec 0f       	add	r30, r28
     b0a:	fd 1f       	adc	r31, r29
     b0c:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     b0e:	81 2f       	mov	r24, r17
     b10:	8c 0f       	add	r24, r28
     b12:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		LCDsendChar(pcc);
     b16:	80 2f       	mov	r24, r16
     b18:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     b1c:	21 96       	adiw	r28, 0x01	; 1
     b1e:	c8 30       	cpi	r28, 0x08	; 8
     b20:	d1 05       	cpc	r29, r1
     b22:	89 f7       	brne	.-30     	; 0xb06 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	08 95       	ret

00000b32 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	80 e6       	ldi	r24, 0x60	; 96
     b3a:	9a ee       	ldi	r25, 0xEA	; 234
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     b40:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     b42:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     b44:	87 b1       	in	r24, 0x07	; 7
     b46:	80 6f       	ori	r24, 0xF0	; 240
     b48:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     b4a:	87 b1       	in	r24, 0x07	; 7
     b4c:	87 60       	ori	r24, 0x07	; 7
     b4e:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b50:	80 e3       	ldi	r24, 0x30	; 48
     b52:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b54:	42 9a       	sbi	0x08, 2	; 8
     b56:	20 e4       	ldi	r18, 0x40	; 64
     b58:	3f e1       	ldi	r19, 0x1F	; 31
     b5a:	f9 01       	movw	r30, r18
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b60:	42 98       	cbi	0x08, 2	; 8
     b62:	f9 01       	movw	r30, r18
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b68:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b6a:	42 9a       	sbi	0x08, 2	; 8
     b6c:	c9 01       	movw	r24, r18
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b72:	42 98       	cbi	0x08, 2	; 8
     b74:	c9 01       	movw	r24, r18
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     b7a:	80 e2       	ldi	r24, 0x20	; 32
     b7c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b7e:	42 9a       	sbi	0x08, 2	; 8
     b80:	c9 01       	movw	r24, r18
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b86:	42 98       	cbi	0x08, 2	; 8
     b88:	c9 01       	movw	r24, r18
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     b8e:	88 e2       	ldi	r24, 0x28	; 40
     b90:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     b94:	8c e0       	ldi	r24, 0x0C	; 12
     b96:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
     b9a:	cc e8       	ldi	r28, 0x8C	; 140
     b9c:	d0 e0       	ldi	r29, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     ba0:	16 2f       	mov	r17, r22
     ba2:	1f 5f       	subi	r17, 0xFF	; 255
     ba4:	ce 01       	movw	r24, r28
     ba6:	0e 94 75 05 	call	0xaea	; 0xaea <LCDdefinechar>
     baa:	28 96       	adiw	r28, 0x08	; 8
     bac:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     bae:	18 30       	cpi	r17, 0x08	; 8
     bb0:	b9 f7       	brne	.-18     	; 0xba0 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	08 95       	ret

00000bba <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	08 2f       	mov	r16, r24
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     bc4:	8e e1       	ldi	r24, 0x1E	; 30
     bc6:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     bca:	1f 5f       	subi	r17, 0xFF	; 255
     bcc:	10 17       	cp	r17, r16
     bce:	d0 f3       	brcs	.-12     	; 0xbc4 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	08 2f       	mov	r16, r24
     bdc:	10 e0       	ldi	r17, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     be0:	88 e1       	ldi	r24, 0x18	; 24
     be2:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     be6:	1f 5f       	subi	r17, 0xFF	; 255
     be8:	10 17       	cp	r17, r16
     bea:	d0 f3       	brcs	.-12     	; 0xbe0 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	08 95       	ret

00000bf2 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     bf2:	8e e0       	ldi	r24, 0x0E	; 14
     bf4:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     bf8:	08 95       	ret

00000bfa <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     bfa:	8f e0       	ldi	r24, 0x0F	; 15
     bfc:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c00:	08 95       	ret

00000c02 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     c02:	8c e0       	ldi	r24, 0x0C	; 12
     c04:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c08:	08 95       	ret

00000c0a <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c10:	08 95       	ret

00000c12 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     c12:	8c e0       	ldi	r24, 0x0C	; 12
     c14:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c18:	08 95       	ret

00000c1a <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	08 2f       	mov	r16, r24
     c20:	10 e0       	ldi	r17, 0x00	; 0
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     c24:	80 e1       	ldi	r24, 0x10	; 16
     c26:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c2a:	1f 5f       	subi	r17, 0xFF	; 255
     c2c:	10 17       	cp	r17, r16
     c2e:	d0 f3       	brcs	.-12     	; 0xc24 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	08 2f       	mov	r16, r24
     c3c:	10 e0       	ldi	r17, 0x00	; 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     c40:	84 e1       	ldi	r24, 0x14	; 20
     c42:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c46:	1f 5f       	subi	r17, 0xFF	; 255
     c48:	10 17       	cp	r17, r16
     c4a:	d0 f3       	brcs	.-12     	; 0xc40 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     c62:	96 e0       	ldi	r25, 0x06	; 6
     c64:	89 9f       	mul	r24, r25
     c66:	c0 01       	movw	r24, r0
     c68:	11 24       	eor	r1, r1
     c6a:	24 2f       	mov	r18, r20
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	ac 01       	movw	r20, r24
     c70:	42 9f       	mul	r20, r18
     c72:	c0 01       	movw	r24, r0
     c74:	43 9f       	mul	r20, r19
     c76:	90 0d       	add	r25, r0
     c78:	52 9f       	mul	r21, r18
     c7a:	90 0d       	add	r25, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__divmodhi4>
     c84:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     c86:	cb 01       	movw	r24, r22
     c88:	66 e0       	ldi	r22, 0x06	; 6
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__udivmodhi4>
     c90:	e8 2e       	mov	r14, r24
     c92:	ff 24       	eor	r15, r15
     c94:	00 e0       	ldi	r16, 0x00	; 0
     c96:	10 e0       	ldi	r17, 0x00	; 0
     c98:	12 c0       	rjmp	.+36     	; 0xcbe <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     c9a:	c8 01       	movw	r24, r16
     c9c:	05 96       	adiw	r24, 0x05	; 5
     c9e:	c8 17       	cp	r28, r24
     ca0:	d9 07       	cpc	r29, r25
     ca2:	10 f0       	brcs	.+4      	; 0xca8 <LCDprogressBar+0x56>
     ca4:	85 e0       	ldi	r24, 0x05	; 5
     ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     ca8:	c0 17       	cp	r28, r16
     caa:	d1 07       	cpc	r29, r17
     cac:	10 f0       	brcs	.+4      	; 0xcb2 <LCDprogressBar+0x60>
     cae:	8e 2d       	mov	r24, r14
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <LCDprogressBar+0x62>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     cb4:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     cb8:	f3 94       	inc	r15
     cba:	0a 5f       	subi	r16, 0xFA	; 250
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	fd 14       	cp	r15, r13
     cc0:	60 f3       	brcs	.-40     	; 0xc9a <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	08 95       	ret

00000cd2 <minutes_button_changed>:


#include "analog_input.h"

//BUTTON CHANGE METHODS
char minutes_button_changed(struct ANALOG_INPUT * t){
     cd2:	fc 01       	movw	r30, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	21 81       	ldd	r18, Z+1	; 0x01
     cdc:	82 1b       	sub	r24, r18
     cde:	91 09       	sbc	r25, r1
     ce0:	44 96       	adiw	r24, 0x14	; 20
     ce2:	89 97       	sbiw	r24, 0x29	; 41
     ce4:	08 f0       	brcs	.+2      	; 0xce8 <minutes_button_changed+0x16>
     ce6:	31 e0       	ldi	r19, 0x01	; 1
	int delta = t->current_min_button - t->prev_min_button;
	return delta > 20 || delta < -20;
}
     ce8:	83 2f       	mov	r24, r19
     cea:	08 95       	ret

00000cec <go_button_changed>:

char go_button_changed(struct ANALOG_INPUT * t){
     cec:	fc 01       	movw	r30, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	82 81       	ldd	r24, Z+2	; 0x02
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	23 81       	ldd	r18, Z+3	; 0x03
     cf6:	82 1b       	sub	r24, r18
     cf8:	91 09       	sbc	r25, r1
     cfa:	44 96       	adiw	r24, 0x14	; 20
     cfc:	89 97       	sbiw	r24, 0x29	; 41
     cfe:	08 f0       	brcs	.+2      	; 0xd02 <go_button_changed+0x16>
     d00:	31 e0       	ldi	r19, 0x01	; 1
	int delta = t->current_go_button- t->prev_go_button;
	return delta > 20 || delta < -20;
}
     d02:	83 2f       	mov	r24, r19
     d04:	08 95       	ret

00000d06 <temp_button_changed>:
char temp_button_changed(struct ANALOG_INPUT * t){
     d06:	fc 01       	movw	r30, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	84 81       	ldd	r24, Z+4	; 0x04
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	25 81       	ldd	r18, Z+5	; 0x05
     d10:	82 1b       	sub	r24, r18
     d12:	91 09       	sbc	r25, r1
     d14:	44 96       	adiw	r24, 0x14	; 20
     d16:	89 97       	sbiw	r24, 0x29	; 41
     d18:	08 f0       	brcs	.+2      	; 0xd1c <temp_button_changed+0x16>
     d1a:	31 e0       	ldi	r19, 0x01	; 1
	int delta = t->current_temp_button- t->prev_temp_button;
	return delta > 20 || delta < -20;
}
     d1c:	83 2f       	mov	r24, r19
     d1e:	08 95       	ret

00000d20 <seconds_changed>:
// DIAL CHANGED METHODS
char seconds_changed(struct ANALOG_INPUT * t){
     d20:	fc 01       	movw	r30, r24
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	86 81       	ldd	r24, Z+6	; 0x06
     d26:	97 81       	ldd	r25, Z+7	; 0x07
     d28:	20 85       	ldd	r18, Z+8	; 0x08
     d2a:	31 85       	ldd	r19, Z+9	; 0x09
     d2c:	82 1b       	sub	r24, r18
     d2e:	93 0b       	sbc	r25, r19
     d30:	02 96       	adiw	r24, 0x02	; 2
     d32:	05 97       	sbiw	r24, 0x05	; 5
     d34:	08 f0       	brcs	.+2      	; 0xd38 <seconds_changed+0x18>
     d36:	41 e0       	ldi	r20, 0x01	; 1
	int delta = t->current_seconds - t->prev_seconds;
	return delta > 2 || delta < -2;
}
     d38:	84 2f       	mov	r24, r20
     d3a:	08 95       	ret

00000d3c <minutes_changed>:

char minutes_changed(struct ANALOG_INPUT * t){
     d3c:	fc 01       	movw	r30, r24
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	86 81       	ldd	r24, Z+6	; 0x06
     d42:	97 81       	ldd	r25, Z+7	; 0x07
     d44:	20 85       	ldd	r18, Z+8	; 0x08
     d46:	31 85       	ldd	r19, Z+9	; 0x09
     d48:	82 1b       	sub	r24, r18
     d4a:	93 0b       	sbc	r25, r19
     d4c:	02 96       	adiw	r24, 0x02	; 2
     d4e:	05 97       	sbiw	r24, 0x05	; 5
     d50:	08 f0       	brcs	.+2      	; 0xd54 <minutes_changed+0x18>
     d52:	41 e0       	ldi	r20, 0x01	; 1
	int delta = t->current_seconds - t->prev_seconds;
	return delta > 2 || delta < -2;
}
     d54:	84 2f       	mov	r24, r20
     d56:	08 95       	ret

00000d58 <temperature_changed>:

char temperature_changed(struct ANALOG_INPUT * t){
     d58:	fc 01       	movw	r30, r24
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	86 85       	ldd	r24, Z+14	; 0x0e
     d5e:	97 85       	ldd	r25, Z+15	; 0x0f
     d60:	20 89       	ldd	r18, Z+16	; 0x10
     d62:	31 89       	ldd	r19, Z+17	; 0x11
     d64:	82 1b       	sub	r24, r18
     d66:	93 0b       	sbc	r25, r19
     d68:	02 96       	adiw	r24, 0x02	; 2
     d6a:	05 97       	sbiw	r24, 0x05	; 5
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <temperature_changed+0x18>
     d6e:	41 e0       	ldi	r20, 0x01	; 1
	int delta = t->current_temp - t->prev_temp;
	return delta > 2 || delta < -2;
}
     d70:	84 2f       	mov	r24, r20
     d72:	08 95       	ret

00000d74 <init_lcd>:


//**********************************************************
// LCD setup
void init_lcd(void) {
	LCDinit();				//initialize the display
     d74:	0e 94 99 05 	call	0xb32	; 0xb32 <LCDinit>
	LCDcursorOFF();
     d78:	0e 94 01 06 	call	0xc02	; 0xc02 <LCDcursorOFF>
	LCDclr();				//clear the display
     d7c:	0e 94 32 05 	call	0xa64	; 0xa64 <LCDclr>
	LCDGotoXY(0,0);
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
}
     d88:	08 95       	ret

00000d8a <adc_init>:

//********************************************************** 
// ADC setup
void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
     d8a:	ea e7       	ldi	r30, 0x7A	; 122
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	87 60       	ori	r24, 0x07	; 7
     d92:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
     d94:	ac e7       	ldi	r26, 0x7C	; 124
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	8c 91       	ld	r24, X
     d9a:	80 64       	ori	r24, 0x40	; 64
     d9c:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
     d9e:	80 81       	ld	r24, Z
     da0:	80 68       	ori	r24, 0x80	; 128
     da2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
     da4:	80 81       	ld	r24, Z
     da6:	80 64       	ori	r24, 0x40	; 64
     da8:	80 83       	st	Z, r24
}
     daa:	08 95       	ret

00000dac <read_adc>:
 
uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                  //Clear the older channel that was read
     dac:	90 91 7c 00 	lds	r25, 0x007C
     db0:	90 7f       	andi	r25, 0xF0	; 240
     db2:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= channel;               //Defines the new ADC channel to be read
     db6:	90 91 7c 00 	lds	r25, 0x007C
     dba:	98 2b       	or	r25, r24
     dbc:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA |= (1<<ADSC);            //Starts a new conversion
     dc0:	80 91 7a 00 	lds	r24, 0x007A
     dc4:	80 64       	ori	r24, 0x40	; 64
     dc6:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & (1<<ADSC));     	//Wait until the conversion is done
     dca:	80 91 7a 00 	lds	r24, 0x007A
     dce:	86 fd       	sbrc	r24, 6
     dd0:	fc cf       	rjmp	.-8      	; 0xdca <read_adc+0x1e>
	return ADCW;                    //Returns the ADC value of the chosen channel
     dd2:	20 91 78 00 	lds	r18, 0x0078
     dd6:	30 91 79 00 	lds	r19, 0x0079
}
     dda:	c9 01       	movw	r24, r18
     ddc:	08 95       	ret

00000dde <analog_input_update>:
	t->current_seconds = t->prev_seconds = read_adc(POT_SEC);
	t->current_minutes = t->prev_minutes = read_adc(POT_MIN);
	t->current_temp    = t->prev_temp    = read_adc(POT_TEMP);
}

void analog_input_update(struct ANALOG_INPUT * t){
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	8c 01       	movw	r16, r24
	t->prev_min_button = t->current_min_button;
     de4:	fc 01       	movw	r30, r24
     de6:	80 81       	ld	r24, Z
     de8:	81 83       	std	Z+1, r24	; 0x01
	t->current_min_button = read_adc(BUTT_MIN);
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     df0:	f8 01       	movw	r30, r16
     df2:	80 83       	st	Z, r24

	t->prev_go_button  = t->current_go_button;
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	83 83       	std	Z+3, r24	; 0x03
	t->current_go_button  = read_adc(BUTT_GO);
     df8:	85 e0       	ldi	r24, 0x05	; 5
     dfa:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     dfe:	f8 01       	movw	r30, r16
     e00:	82 83       	std	Z+2, r24	; 0x02

	t->prev_temp_button = t->current_temp_button;
     e02:	84 81       	ldd	r24, Z+4	; 0x04
     e04:	85 83       	std	Z+5, r24	; 0x05
	t->current_temp_button = read_adc(BUTT_TEMP);
     e06:	86 e0       	ldi	r24, 0x06	; 6
     e08:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     e0c:	f8 01       	movw	r30, r16
     e0e:	84 83       	std	Z+4, r24	; 0x04

	t->prev_seconds = t->current_seconds;
     e10:	86 81       	ldd	r24, Z+6	; 0x06
     e12:	97 81       	ldd	r25, Z+7	; 0x07
     e14:	91 87       	std	Z+9, r25	; 0x09
     e16:	80 87       	std	Z+8, r24	; 0x08
	t->current_seconds = read_adc(POT_SEC);
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     e1e:	f8 01       	movw	r30, r16
     e20:	97 83       	std	Z+7, r25	; 0x07
     e22:	86 83       	std	Z+6, r24	; 0x06

	t->prev_minutes = t->current_minutes;
     e24:	82 85       	ldd	r24, Z+10	; 0x0a
     e26:	93 85       	ldd	r25, Z+11	; 0x0b
     e28:	95 87       	std	Z+13, r25	; 0x0d
     e2a:	84 87       	std	Z+12, r24	; 0x0c
	t->current_minutes = read_adc(POT_MIN);
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     e32:	f8 01       	movw	r30, r16
     e34:	93 87       	std	Z+11, r25	; 0x0b
     e36:	82 87       	std	Z+10, r24	; 0x0a

	t->prev_temp = t->current_temp;
     e38:	86 85       	ldd	r24, Z+14	; 0x0e
     e3a:	97 85       	ldd	r25, Z+15	; 0x0f
     e3c:	91 8b       	std	Z+17, r25	; 0x11
     e3e:	80 8b       	std	Z+16, r24	; 0x10
	t->current_temp = read_adc(POT_TEMP);
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     e46:	f8 01       	movw	r30, r16
     e48:	97 87       	std	Z+15, r25	; 0x0f
     e4a:	86 87       	std	Z+14, r24	; 0x0e
}
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	08 95       	ret

00000e52 <analog_input_init>:
	return delta > 2 || delta < -2;
}


// UTILITY FUNCTIONS
void analog_input_init(struct ANALOG_INPUT * t){
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	8c 01       	movw	r16, r24
	t->current_min_button = t->prev_min_button = read_adc(BUTT_MIN);
     e58:	84 e0       	ldi	r24, 0x04	; 4
     e5a:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     e5e:	f8 01       	movw	r30, r16
     e60:	81 83       	std	Z+1, r24	; 0x01
     e62:	80 83       	st	Z, r24
	t->current_go_button  = t->prev_go_button  = read_adc(BUTT_GO);
     e64:	85 e0       	ldi	r24, 0x05	; 5
     e66:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     e6a:	f8 01       	movw	r30, r16
     e6c:	83 83       	std	Z+3, r24	; 0x03
     e6e:	82 83       	std	Z+2, r24	; 0x02
	t->current_temp_button= t->current_temp_button = read_adc(BUTT_TEMP);
     e70:	86 e0       	ldi	r24, 0x06	; 6
     e72:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     e76:	f8 01       	movw	r30, r16
     e78:	84 83       	std	Z+4, r24	; 0x04

	t->current_seconds = t->prev_seconds = read_adc(POT_SEC);
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     e80:	f8 01       	movw	r30, r16
     e82:	80 87       	std	Z+8, r24	; 0x08
     e84:	91 87       	std	Z+9, r25	; 0x09
     e86:	86 83       	std	Z+6, r24	; 0x06
     e88:	97 83       	std	Z+7, r25	; 0x07
	t->current_minutes = t->prev_minutes = read_adc(POT_MIN);
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     e90:	f8 01       	movw	r30, r16
     e92:	84 87       	std	Z+12, r24	; 0x0c
     e94:	95 87       	std	Z+13, r25	; 0x0d
     e96:	82 87       	std	Z+10, r24	; 0x0a
     e98:	93 87       	std	Z+11, r25	; 0x0b
	t->current_temp    = t->prev_temp    = read_adc(POT_TEMP);
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     ea0:	f8 01       	movw	r30, r16
     ea2:	80 8b       	std	Z+16, r24	; 0x10
     ea4:	91 8b       	std	Z+17, r25	; 0x11
     ea6:	86 87       	std	Z+14, r24	; 0x0e
     ea8:	97 87       	std	Z+15, r25	; 0x0f
}
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <readAnalogInputs>:
// --- define task 4 - read analog inputs ----------
void readAnalogInputs(void * args) {

	uint32_t rel, dead;
	while(TRUE){
		analog_input_update(ant);
     eb0:	80 91 46 04 	lds	r24, 0x0446
     eb4:	90 91 47 04 	lds	r25, 0x0447
     eb8:	0e 94 ef 06 	call	0xdde	; 0xdde <analog_input_update>
     ebc:	f9 cf       	rjmp	.-14     	; 0xeb0 <readAnalogInputs>

00000ebe <main>:
	dead = trtCurrentTime() + SECONDS2TICKS(0.5);
	trtSleepUntil(rel, dead);	
}

// --- Main Program ----------------------------------
int main(void) {
     ebe:	cf 92       	push	r12
     ec0:	df 92       	push	r13
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     eca:	0e 94 75 03 	call	0x6ea	; 0x6ea <trt_uart_init>
  stdout = stdin = stderr = &uart0;
     ece:	6b e0       	ldi	r22, 0x0B	; 11
     ed0:	72 e0       	ldi	r23, 0x02	; 2
     ed2:	70 93 bc 04 	sts	0x04BC, r23
     ed6:	60 93 bb 04 	sts	0x04BB, r22
     eda:	70 93 b8 04 	sts	0x04B8, r23
     ede:	60 93 b7 04 	sts	0x04B7, r22
     ee2:	70 93 ba 04 	sts	0x04BA, r23
     ee6:	60 93 b9 04 	sts	0x04B9, r22
  fprintf(stdout,"\n\r Welcome to KitchenBot UI \n\r Please input your instructions below\n\r The options are: time, temp, & egg\n\r\n\r");
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <fputs>
    // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
     ef2:	80 e5       	ldi	r24, 0x50	; 80
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     efa:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     efc:	10 92 9e 04 	sts	0x049E, r1
  
  sei(); // set enabled interrupts;
     f00:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     f02:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     f04:	10 92 9f 04 	sts	0x049F, r1
  
  sei(); // set enabled interrupts;
     f08:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     f0a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 a1 04 	sts	0x04A1, r24
  
  sei(); // set enabled interrupts;
     f12:	78 94       	sei

  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variable

  // --- create tasks  ----------------
  trtCreateTask(serialComm, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[0]));
     f14:	8d e9       	ldi	r24, 0x9D	; 157
     f16:	99 e0       	ldi	r25, 0x09	; 9
     f18:	68 ee       	ldi	r22, 0xE8	; 232
     f1a:	73 e0       	ldi	r23, 0x03	; 3
     f1c:	2a e1       	ldi	r18, 0x1A	; 26
     f1e:	36 e0       	ldi	r19, 0x06	; 6
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	fa e1       	ldi	r31, 0x1A	; 26
     f26:	ef 2e       	mov	r14, r31
     f28:	f6 e0       	ldi	r31, 0x06	; 6
     f2a:	ff 2e       	mov	r15, r31
     f2c:	01 2d       	mov	r16, r1
     f2e:	11 2d       	mov	r17, r1
     f30:	e8 e4       	ldi	r30, 0x48	; 72
     f32:	ce 2e       	mov	r12, r30
     f34:	e4 e0       	ldi	r30, 0x04	; 4
     f36:	de 2e       	mov	r13, r30
     f38:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
  trtCreateTask(lcdComm, 1000, SECONDS2TICKS(0.25), SECONDS2TICKS(0.5), &(args[0]));
     f3c:	8c eb       	ldi	r24, 0xBC	; 188
     f3e:	98 e0       	ldi	r25, 0x08	; 8
     f40:	68 ee       	ldi	r22, 0xE8	; 232
     f42:	73 e0       	ldi	r23, 0x03	; 3
     f44:	22 e4       	ldi	r18, 0x42	; 66
     f46:	3f e0       	ldi	r19, 0x0F	; 15
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	b4 e8       	ldi	r27, 0x84	; 132
     f4e:	eb 2e       	mov	r14, r27
     f50:	be e1       	ldi	r27, 0x1E	; 30
     f52:	fb 2e       	mov	r15, r27
     f54:	01 2d       	mov	r16, r1
     f56:	11 2d       	mov	r17, r1
     f58:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
  trtCreateTask(adjustTemp, 2000, SECONDS2TICKS(2), SECONDS2TICKS(4), &(args[0]));
     f5c:	8f ec       	ldi	r24, 0xCF	; 207
     f5e:	97 e0       	ldi	r25, 0x07	; 7
     f60:	60 ed       	ldi	r22, 0xD0	; 208
     f62:	77 e0       	ldi	r23, 0x07	; 7
     f64:	22 e1       	ldi	r18, 0x12	; 18
     f66:	3a e7       	ldi	r19, 0x7A	; 122
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	a4 e2       	ldi	r26, 0x24	; 36
     f6e:	ea 2e       	mov	r14, r26
     f70:	a4 ef       	ldi	r26, 0xF4	; 244
     f72:	fa 2e       	mov	r15, r26
     f74:	01 2d       	mov	r16, r1
     f76:	11 2d       	mov	r17, r1
     f78:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
  trtCreateTask(readAnalogInputs, 1000, SECONDS2TICKS(0.25), SECONDS2TICKS(0.5), &(args[0]));
     f7c:	88 e5       	ldi	r24, 0x58	; 88
     f7e:	97 e0       	ldi	r25, 0x07	; 7
     f80:	68 ee       	ldi	r22, 0xE8	; 232
     f82:	73 e0       	ldi	r23, 0x03	; 3
     f84:	22 e4       	ldi	r18, 0x42	; 66
     f86:	3f e0       	ldi	r19, 0x0F	; 15
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	f4 e8       	ldi	r31, 0x84	; 132
     f8e:	ef 2e       	mov	r14, r31
     f90:	fe e1       	ldi	r31, 0x1E	; 30
     f92:	ff 2e       	mov	r15, r31
     f94:	01 2d       	mov	r16, r1
     f96:	11 2d       	mov	r17, r1
     f98:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
     f9c:	ff cf       	rjmp	.-2      	; 0xf9c <main+0xde>

00000f9e <adjustTemp>:
	  trtSleepUntil(rel, dead);	
  	}
}

// --- define task 3  ----------------------------------------
void adjustTemp(void* args) {
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
			PORTD |= LED_EN;    	// Turn on LED
			if (dTemp != 0) {
				if (count_en == 0) {
					fprintf(stdout, "Timer enabled.\n\r");
				}
				count_en = 1;			// Enable timer count down
     faa:	c1 e0       	ldi	r28, 0x01	; 1
     fac:	d0 e0       	ldi	r29, 0x00	; 0
void adjustTemp(void* args) {
	uint32_t rel, dead;
	uint16_t adc_in;
	while(TRUE){
		// Read ADC value
		adc_in = read_adc(0);
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	0e 94 d6 06 	call	0xdac	; 0xdac <read_adc>
     fb4:	7c 01       	movw	r14, r24
		//fprintf(stdout, "ADC: %i\n\r", adc_in);

		// Control mechanism
		trtWait(SEM_SHARED);
     fb6:	84 e0       	ldi	r24, 0x04	; 4
     fb8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
		cTemp = (adc_in + 3) / 2.1;
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	e8 0e       	add	r14, r24
     fc2:	f9 1e       	adc	r15, r25
     fc4:	00 e0       	ldi	r16, 0x00	; 0
     fc6:	10 e0       	ldi	r17, 0x00	; 0
     fc8:	c8 01       	movw	r24, r16
     fca:	b7 01       	movw	r22, r14
     fcc:	0e 94 3d 0b 	call	0x167a	; 0x167a <__floatunsisf>
     fd0:	26 e6       	ldi	r18, 0x66	; 102
     fd2:	36 e6       	ldi	r19, 0x66	; 102
     fd4:	46 e0       	ldi	r20, 0x06	; 6
     fd6:	50 e4       	ldi	r21, 0x40	; 64
     fd8:	0e 94 3d 0a 	call	0x147a	; 0x147a <__divsf3>
     fdc:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fixsfsi>
     fe0:	70 93 b2 04 	sts	0x04B2, r23
     fe4:	60 93 b1 04 	sts	0x04B1, r22
		if (cTemp < 0) cTemp = 0; 
     fe8:	80 91 b1 04 	lds	r24, 0x04B1
     fec:	90 91 b2 04 	lds	r25, 0x04B2
     ff0:	97 ff       	sbrs	r25, 7
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <adjustTemp+0x5e>
     ff4:	10 92 b2 04 	sts	0x04B2, r1
     ff8:	10 92 b1 04 	sts	0x04B1, r1
		if (cTemp < (dTemp/* * .95*/)) {	// Factor of .95 to account for carryover effect
     ffc:	20 91 b1 04 	lds	r18, 0x04B1
    1000:	30 91 b2 04 	lds	r19, 0x04B2
    1004:	80 91 50 04 	lds	r24, 0x0450
    1008:	90 91 51 04 	lds	r25, 0x0451
    100c:	28 17       	cp	r18, r24
    100e:	39 07       	cpc	r19, r25
    1010:	1c f4       	brge	.+6      	; 0x1018 <adjustTemp+0x7a>
			PORTD &= ~RELAY_EN;		// Turn on heating element
    1012:	5b 98       	cbi	0x0b, 3	; 11
			PORTD &= ~LED_EN;		// Turn off LED
    1014:	5a 98       	cbi	0x0b, 2	; 11
    1016:	1a c0       	rjmp	.+52     	; 0x104c <adjustTemp+0xae>
		}
		else {
			PORTD |= RELAY_EN;		// Turn off heating element
    1018:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD |= LED_EN;    	// Turn on LED
    101a:	5a 9a       	sbi	0x0b, 2	; 11
			if (dTemp != 0) {
    101c:	80 91 50 04 	lds	r24, 0x0450
    1020:	90 91 51 04 	lds	r25, 0x0451
    1024:	89 2b       	or	r24, r25
    1026:	91 f0       	breq	.+36     	; 0x104c <adjustTemp+0xae>
				if (count_en == 0) {
    1028:	80 91 4e 04 	lds	r24, 0x044E
    102c:	90 91 4f 04 	lds	r25, 0x044F
    1030:	89 2b       	or	r24, r25
    1032:	41 f4       	brne	.+16     	; 0x1044 <adjustTemp+0xa6>
					fprintf(stdout, "Timer enabled.\n\r");
    1034:	60 91 b9 04 	lds	r22, 0x04B9
    1038:	70 91 ba 04 	lds	r23, 0x04BA
    103c:	8d e6       	ldi	r24, 0x6D	; 109
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <fputs>
				}
				count_en = 1;			// Enable timer count down
    1044:	d0 93 4f 04 	sts	0x044F, r29
    1048:	c0 93 4e 04 	sts	0x044E, r28
			}
		}
		trtSignal(SEM_SHARED);
    104c:	84 e0       	ldi	r24, 0x04	; 4
    104e:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    1052:	20 91 a8 04 	lds	r18, 0x04A8
    1056:	30 91 a9 04 	lds	r19, 0x04A9
    105a:	40 91 aa 04 	lds	r20, 0x04AA
    105e:	50 91 ab 04 	lds	r21, 0x04AB
    1062:	a9 01       	movw	r20, r18
    1064:	33 27       	eor	r19, r19
    1066:	22 27       	eor	r18, r18
    1068:	60 91 84 00 	lds	r22, 0x0084
    106c:	70 91 85 00 	lds	r23, 0x0085

		// sleep
	  	rel = trtCurrentTime() + SECONDS2TICKS(2);
	  	dead = trtCurrentTime() + SECONDS2TICKS(4);
	  	trtSleepUntil(rel, dead);	
    1070:	e0 90 84 00 	lds	r14, 0x0084
    1074:	f0 90 85 00 	lds	r15, 0x0085
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	62 0f       	add	r22, r18
    107e:	73 1f       	adc	r23, r19
    1080:	84 1f       	adc	r24, r20
    1082:	95 1f       	adc	r25, r21
    1084:	6e 5e       	subi	r22, 0xEE	; 238
    1086:	75 48       	sbci	r23, 0x85	; 133
    1088:	8f 4f       	sbci	r24, 0xFF	; 255
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	00 e0       	ldi	r16, 0x00	; 0
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	2e 0d       	add	r18, r14
    1092:	3f 1d       	adc	r19, r15
    1094:	40 1f       	adc	r20, r16
    1096:	51 1f       	adc	r21, r17
    1098:	2c 5d       	subi	r18, 0xDC	; 220
    109a:	3b 40       	sbci	r19, 0x0B	; 11
    109c:	4f 4f       	sbci	r20, 0xFF	; 255
    109e:	5f 4f       	sbci	r21, 0xFF	; 255
    10a0:	0e 94 0b 03 	call	0x616	; 0x616 <trtSleepUntil>
    10a4:	84 cf       	rjmp	.-248    	; 0xfae <adjustTemp+0x10>

000010a6 <__vector_16>:

/********************************************************************/
// 							ISRs & Helper Functions
/********************************************************************/
// --- Timer ISR ------------------------
ISR (TIMER0_COMPA_vect) {
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	0b b6       	in	r0, 0x3b	; 59
    10b0:	0f 92       	push	r0
    10b2:	11 24       	eor	r1, r1
    10b4:	2f 93       	push	r18
    10b6:	3f 93       	push	r19
    10b8:	4f 93       	push	r20
    10ba:	5f 93       	push	r21
    10bc:	6f 93       	push	r22
    10be:	7f 93       	push	r23
    10c0:	8f 93       	push	r24
    10c2:	9f 93       	push	r25
    10c4:	af 93       	push	r26
    10c6:	bf 93       	push	r27
    10c8:	ef 93       	push	r30
    10ca:	ff 93       	push	r31
	trtWait(SEM_SHARED);
    10cc:	84 e0       	ldi	r24, 0x04	; 4
    10ce:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	if ((time_rem > 0) && count_en) {
    10d2:	80 91 63 04 	lds	r24, 0x0463
    10d6:	90 91 64 04 	lds	r25, 0x0464
    10da:	18 16       	cp	r1, r24
    10dc:	19 06       	cpc	r1, r25
    10de:	b4 f5       	brge	.+108    	; 0x114c <__vector_16+0xa6>
    10e0:	80 91 4e 04 	lds	r24, 0x044E
    10e4:	90 91 4f 04 	lds	r25, 0x044F
    10e8:	89 2b       	or	r24, r25
    10ea:	81 f1       	breq	.+96     	; 0x114c <__vector_16+0xa6>
		if (msec < 1000) {
    10ec:	80 91 4c 04 	lds	r24, 0x044C
    10f0:	90 91 4d 04 	lds	r25, 0x044D
    10f4:	88 5e       	subi	r24, 0xE8	; 232
    10f6:	93 40       	sbci	r25, 0x03	; 3
    10f8:	54 f4       	brge	.+20     	; 0x110e <__vector_16+0x68>
			msec++;
    10fa:	80 91 4c 04 	lds	r24, 0x044C
    10fe:	90 91 4d 04 	lds	r25, 0x044D
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	90 93 4d 04 	sts	0x044D, r25
    1108:	80 93 4c 04 	sts	0x044C, r24
    110c:	1f c0       	rjmp	.+62     	; 0x114c <__vector_16+0xa6>
		}
		else {
			msec = 0;
    110e:	10 92 4d 04 	sts	0x044D, r1
    1112:	10 92 4c 04 	sts	0x044C, r1
			time_rem--;
    1116:	80 91 63 04 	lds	r24, 0x0463
    111a:	90 91 64 04 	lds	r25, 0x0464
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	90 93 64 04 	sts	0x0464, r25
    1124:	80 93 63 04 	sts	0x0463, r24
			if (time_rem == 0) {
    1128:	80 91 63 04 	lds	r24, 0x0463
    112c:	90 91 64 04 	lds	r25, 0x0464
    1130:	89 2b       	or	r24, r25
    1132:	61 f4       	brne	.+24     	; 0x114c <__vector_16+0xa6>
				count_en = 0;
    1134:	10 92 4f 04 	sts	0x044F, r1
    1138:	10 92 4e 04 	sts	0x044E, r1
				fprintf(stdout, "Timer disabled.\n\r");
    113c:	60 91 b9 04 	lds	r22, 0x04B9
    1140:	70 91 ba 04 	lds	r23, 0x04BA
    1144:	8e e7       	ldi	r24, 0x7E	; 126
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <fputs>
			}
		}
	}
    trtSignal(SEM_SHARED);
    114c:	84 e0       	ldi	r24, 0x04	; 4
    114e:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
}
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0b be       	out	0x3b, r0	; 59
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <lcdComm>:
		trtSignal(SEM_SHARED);
	}
}

// --- define task 2  ----------------------------------------
void lcdComm(void* args) {
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
	uint32_t rel, dead;
	// increment time counter and format string 
	while (TRUE) {
	  // display the current temp
	  trtWait(SEM_SHARED) ;
	  sprintf(lcd_buffer, "%iC      ", cTemp);
    1188:	c2 e5       	ldi	r28, 0x52	; 82
    118a:	d4 e0       	ldi	r29, 0x04	; 4
    118c:	10 e9       	ldi	r17, 0x90	; 144
    118e:	c1 2e       	mov	r12, r17
    1190:	11 e0       	ldi	r17, 0x01	; 1
    1192:	d1 2e       	mov	r13, r17
void lcdComm(void* args) {
	uint32_t rel, dead;
	// increment time counter and format string 
	while (TRUE) {
	  // display the current temp
	  trtWait(SEM_SHARED) ;
    1194:	84 e0       	ldi	r24, 0x04	; 4
    1196:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	  sprintf(lcd_buffer, "%iC      ", cTemp);
    119a:	80 91 b1 04 	lds	r24, 0x04B1
    119e:	90 91 b2 04 	lds	r25, 0x04B2
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <lcdComm+0x2c>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <lcdComm+0x2e>
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <lcdComm+0x30>
    11a8:	ed b7       	in	r30, 0x3d	; 61
    11aa:	fe b7       	in	r31, 0x3e	; 62
    11ac:	31 96       	adiw	r30, 0x01	; 1
    11ae:	ad b7       	in	r26, 0x3d	; 61
    11b0:	be b7       	in	r27, 0x3e	; 62
    11b2:	12 96       	adiw	r26, 0x02	; 2
    11b4:	dc 93       	st	X, r29
    11b6:	ce 93       	st	-X, r28
    11b8:	11 97       	sbiw	r26, 0x01	; 1
    11ba:	d3 82       	std	Z+3, r13	; 0x03
    11bc:	c2 82       	std	Z+2, r12	; 0x02
    11be:	95 83       	std	Z+5, r25	; 0x05
    11c0:	84 83       	std	Z+4, r24	; 0x04
    11c2:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <sprintf>
	  LCDGotoXY(9, 0);
    11c6:	8d b7       	in	r24, 0x3d	; 61
    11c8:	9e b7       	in	r25, 0x3e	; 62
    11ca:	06 96       	adiw	r24, 0x06	; 6
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	9e bf       	out	0x3e, r25	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	8d bf       	out	0x3d, r24	; 61
    11d6:	89 e0       	ldi	r24, 0x09	; 9
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
    11de:	fe 01       	movw	r30, r28
    11e0:	01 90       	ld	r0, Z+
    11e2:	00 20       	and	r0, r0
    11e4:	e9 f7       	brne	.-6      	; 0x11e0 <lcdComm+0x68>
    11e6:	31 97       	sbiw	r30, 0x01	; 1
    11e8:	ec 1b       	sub	r30, r28
    11ea:	fd 0b       	sbc	r31, r29
    11ec:	ce 01       	movw	r24, r28
    11ee:	6e 2f       	mov	r22, r30
    11f0:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCDstring>
	  // display the desired temp 
	  sprintf(lcd_buffer, "%iC      ", dTemp);
    11f4:	80 91 50 04 	lds	r24, 0x0450
    11f8:	90 91 51 04 	lds	r25, 0x0451
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <lcdComm+0x86>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <lcdComm+0x88>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <lcdComm+0x8a>
    1202:	ed b7       	in	r30, 0x3d	; 61
    1204:	fe b7       	in	r31, 0x3e	; 62
    1206:	31 96       	adiw	r30, 0x01	; 1
    1208:	ad b7       	in	r26, 0x3d	; 61
    120a:	be b7       	in	r27, 0x3e	; 62
    120c:	12 96       	adiw	r26, 0x02	; 2
    120e:	dc 93       	st	X, r29
    1210:	ce 93       	st	-X, r28
    1212:	11 97       	sbiw	r26, 0x01	; 1
    1214:	d3 82       	std	Z+3, r13	; 0x03
    1216:	c2 82       	std	Z+2, r12	; 0x02
    1218:	95 83       	std	Z+5, r25	; 0x05
    121a:	84 83       	std	Z+4, r24	; 0x04
    121c:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <sprintf>
	  //sprintf(lcd_buffer, "%is      ", time_rem);
	  LCDGotoXY(9, 1);
    1220:	8d b7       	in	r24, 0x3d	; 61
    1222:	9e b7       	in	r25, 0x3e	; 62
    1224:	06 96       	adiw	r24, 0x06	; 6
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	9e bf       	out	0x3e, r25	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	8d bf       	out	0x3d, r24	; 61
    1230:	89 e0       	ldi	r24, 0x09	; 9
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
    1238:	fe 01       	movw	r30, r28
    123a:	01 90       	ld	r0, Z+
    123c:	00 20       	and	r0, r0
    123e:	e9 f7       	brne	.-6      	; 0x123a <lcdComm+0xc2>
    1240:	31 97       	sbiw	r30, 0x01	; 1
    1242:	ec 1b       	sub	r30, r28
    1244:	fd 0b       	sbc	r31, r29
    1246:	ce 01       	movw	r24, r28
    1248:	6e 2f       	mov	r22, r30
    124a:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCDstring>
	  trtSignal(SEM_SHARED);
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
    1254:	20 91 a8 04 	lds	r18, 0x04A8
    1258:	30 91 a9 04 	lds	r19, 0x04A9
    125c:	40 91 aa 04 	lds	r20, 0x04AA
    1260:	50 91 ab 04 	lds	r21, 0x04AB
    1264:	a9 01       	movw	r20, r18
    1266:	33 27       	eor	r19, r19
    1268:	22 27       	eor	r18, r18
    126a:	60 91 84 00 	lds	r22, 0x0084
    126e:	70 91 85 00 	lds	r23, 0x0085
	  // sleep
	  rel = trtCurrentTime() + SECONDS2TICKS(0.25);
	  dead = trtCurrentTime() + SECONDS2TICKS(0.5);
	  trtSleepUntil(rel, dead);	
    1272:	e0 90 84 00 	lds	r14, 0x0084
    1276:	f0 90 85 00 	lds	r15, 0x0085
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	62 0f       	add	r22, r18
    1280:	73 1f       	adc	r23, r19
    1282:	84 1f       	adc	r24, r20
    1284:	95 1f       	adc	r25, r21
    1286:	6e 5b       	subi	r22, 0xBE	; 190
    1288:	70 4f       	sbci	r23, 0xF0	; 240
    128a:	8f 4f       	sbci	r24, 0xFF	; 255
    128c:	9f 4f       	sbci	r25, 0xFF	; 255
    128e:	00 e0       	ldi	r16, 0x00	; 0
    1290:	10 e0       	ldi	r17, 0x00	; 0
    1292:	2e 0d       	add	r18, r14
    1294:	3f 1d       	adc	r19, r15
    1296:	40 1f       	adc	r20, r16
    1298:	51 1f       	adc	r21, r17
    129a:	2c 57       	subi	r18, 0x7C	; 124
    129c:	31 4e       	sbci	r19, 0xE1	; 225
    129e:	4f 4f       	sbci	r20, 0xFF	; 255
    12a0:	5f 4f       	sbci	r21, 0xFF	; 255
    12a2:	0e 94 0b 03 	call	0x616	; 0x616 <trtSleepUntil>
    12a6:	76 cf       	rjmp	.-276    	; 0x1194 <lcdComm+0x1c>

000012a8 <initialize>:
// http://hekilledmywire.wordpress.com/2011/03/16/using-the-adc-tutorial-part-5/

//********************************************************** 
//Set it all up
void initialize(void) {
	DDRA = 0x00;		// ADC Port
    12a8:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;
    12aa:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xff;    	// LCD connections
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    12b0:	18 b8       	out	0x08, r1	; 8
	DDRD |= 0x0C;		// LED status light && Relay
    12b2:	8a b1       	in	r24, 0x0a	; 10
    12b4:	8c 60       	ori	r24, 0x0C	; 12
    12b6:	8a b9       	out	0x0a, r24	; 10
	PORTC |= 0x08;		// Initialize relay to high
    12b8:	43 9a       	sbi	0x08, 3	; 8

	// ******************** 
	//initialize variables
	trtWait(SEM_SHARED);
    12ba:	84 e0       	ldi	r24, 0x04	; 4
    12bc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	cTemp = 0;
    12c0:	10 92 b2 04 	sts	0x04B2, r1
    12c4:	10 92 b1 04 	sts	0x04B1, r1
	dTemp = 0;
    12c8:	10 92 51 04 	sts	0x0451, r1
    12cc:	10 92 50 04 	sts	0x0450, r1
	time_rem = 0;
    12d0:	10 92 64 04 	sts	0x0464, r1
    12d4:	10 92 63 04 	sts	0x0463, r1
	msec = 0;
    12d8:	10 92 4d 04 	sts	0x044D, r1
    12dc:	10 92 4c 04 	sts	0x044C, r1
	count_en = 0;
    12e0:	10 92 4f 04 	sts	0x044F, r1
    12e4:	10 92 4e 04 	sts	0x044E, r1
	trtSignal(SEM_SHARED);
    12e8:	84 e0       	ldi	r24, 0x04	; 4
    12ea:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>

	// ******************** 
	//init LCD
	init_lcd();
    12ee:	0e 94 ba 06 	call	0xd74	; 0xd74 <init_lcd>
	LCDclr();
    12f2:	0e 94 32 05 	call	0xa64	; 0xa64 <LCDclr>
	// put some stuff on LCD
	CopyStringtoLCD(LCD_line1, 0, 0);//start at char=0 line=0
    12f6:	8c ec       	ldi	r24, 0xCC	; 204
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	0e 94 5e 05 	call	0xabc	; 0xabc <CopyStringtoLCD>
	CopyStringtoLCD(LCD_line2, 0, 1); 
    1302:	86 ed       	ldi	r24, 0xD6	; 214
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	0e 94 5e 05 	call	0xabc	; 0xabc <CopyStringtoLCD>

	// ********************
	//init ADC
	adc_init();
    130e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <adc_init>

	// ******************** 
	//set up timer 0 for 1 mSec timebase 
	TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
    1312:	92 e0       	ldi	r25, 0x02	; 2
    1314:	90 93 6e 00 	sts	0x006E, r25
	OCR0A = 249;  		//set the compare reg to 250 time ticks
    1318:	89 ef       	ldi	r24, 0xF9	; 249
    131a:	87 bd       	out	0x27, r24	; 39
	//set prescalar to divide by 64 
	TCCR0B= 3; 	
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	85 bd       	out	0x25, r24	; 37
	// turn on clear-on-match
	TCCR0A= (1<<WGM01) ;
    1320:	94 bd       	out	0x24, r25	; 36

	//*********************
	//init analog input reading
	ant = (analog_input_t *)malloc(sizeof(struct ANALOG_INPUT));
    1322:	82 e1       	ldi	r24, 0x12	; 18
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <malloc>
    132a:	80 93 46 04 	sts	0x0446, r24
    132e:	90 93 47 04 	sts	0x0447, r25
	analog_input_init(ant);
    1332:	0e 94 29 07 	call	0xe52	; 0xe52 <analog_input_init>
	// ********************
	//crank up the ISRs
	sei();
    1336:	78 94       	sei
}  
    1338:	08 95       	ret

0000133a <serialComm>:

/********************************************************************/
// 							FSM Tasks
/********************************************************************/
// --- define task 1  ----------------------------------------
void serialComm(void* args) {
    133a:	8f 92       	push	r8
    133c:	9f 92       	push	r9
    133e:	af 92       	push	r10
    1340:	bf 92       	push	r11
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	00 d0       	rcall	.+0      	; 0x1354 <serialComm+0x1a>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <serialComm+0x1c>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <serialComm+0x1e>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
	// Declare the command and num variables
	volatile int num ;
	char cmd[4] ;
    // initialize
    initialize();
    135c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <initialize>
	while (TRUE) {
		// commands:
		// 'temp' sets the desired temperature
		// 'time' sets the desired time
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s%u", cmd, &num) ;
    1360:	2a e9       	ldi	r18, 0x9A	; 154
    1362:	82 2e       	mov	r8, r18
    1364:	21 e0       	ldi	r18, 0x01	; 1
    1366:	92 2e       	mov	r9, r18
    1368:	8e 01       	movw	r16, r28
    136a:	0d 5f       	subi	r16, 0xFD	; 253
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	5e 01       	movw	r10, r28
    1370:	08 94       	sec
    1372:	a1 1c       	adc	r10, r1
    1374:	b1 1c       	adc	r11, r1
				msec= 0;
			}
		}
		// 6 Minute Egg Mode
		if (strcmp(cmd, "egg") == 0) {
			cTemp = 100;
    1376:	94 e6       	ldi	r25, 0x64	; 100
    1378:	c9 2e       	mov	r12, r25
    137a:	d1 2c       	mov	r13, r1
			time_rem = 3600;
    137c:	80 e1       	ldi	r24, 0x10	; 16
    137e:	e8 2e       	mov	r14, r24
    1380:	8e e0       	ldi	r24, 0x0E	; 14
    1382:	f8 2e       	mov	r15, r24
    initialize();
	while (TRUE) {
		// commands:
		// 'temp' sets the desired temperature
		// 'time' sets the desired time
		fprintf(stdout, ">") ;
    1384:	60 91 b9 04 	lds	r22, 0x04B9
    1388:	70 91 ba 04 	lds	r23, 0x04BA
    138c:	8e e3       	ldi	r24, 0x3E	; 62
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <fputc>
		fscanf(stdin, "%s%u", cmd, &num) ;
    1394:	8d b7       	in	r24, 0x3d	; 61
    1396:	9e b7       	in	r25, 0x3e	; 62
    1398:	08 97       	sbiw	r24, 0x08	; 8
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	9e bf       	out	0x3e, r25	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	8d bf       	out	0x3d, r24	; 61
    13a4:	ed b7       	in	r30, 0x3d	; 61
    13a6:	fe b7       	in	r31, 0x3e	; 62
    13a8:	31 96       	adiw	r30, 0x01	; 1
    13aa:	80 91 b7 04 	lds	r24, 0x04B7
    13ae:	90 91 b8 04 	lds	r25, 0x04B8
    13b2:	ad b7       	in	r26, 0x3d	; 61
    13b4:	be b7       	in	r27, 0x3e	; 62
    13b6:	12 96       	adiw	r26, 0x02	; 2
    13b8:	9c 93       	st	X, r25
    13ba:	8e 93       	st	-X, r24
    13bc:	11 97       	sbiw	r26, 0x01	; 1
    13be:	93 82       	std	Z+3, r9	; 0x03
    13c0:	82 82       	std	Z+2, r8	; 0x02
    13c2:	15 83       	std	Z+5, r17	; 0x05
    13c4:	04 83       	std	Z+4, r16	; 0x04
    13c6:	b7 82       	std	Z+7, r11	; 0x07
    13c8:	a6 82       	std	Z+6, r10	; 0x06
    13ca:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <fscanf>
		// update shared variables
		trtWait(SEM_SHARED) ;
    13ce:	8d b7       	in	r24, 0x3d	; 61
    13d0:	9e b7       	in	r25, 0x3e	; 62
    13d2:	08 96       	adiw	r24, 0x08	; 8
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	9e bf       	out	0x3e, r25	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	8d bf       	out	0x3d, r24	; 61
    13de:	84 e0       	ldi	r24, 0x04	; 4
    13e0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
		if (strcmp(cmd, "temp") == 0) {
    13e4:	c8 01       	movw	r24, r16
    13e6:	6f e9       	ldi	r22, 0x9F	; 159
    13e8:	71 e0       	ldi	r23, 0x01	; 1
    13ea:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <strcmp>
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	99 f4       	brne	.+38     	; 0x1418 <serialComm+0xde>
			if (num < 0) {
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	9a 81       	ldd	r25, Y+2	; 0x02
    13f6:	97 ff       	sbrs	r25, 7
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <serialComm+0xd2>
				fprintf(stdout, "Please input a positive temperature value.\n\r");
    13fa:	60 91 b9 04 	lds	r22, 0x04B9
    13fe:	70 91 ba 04 	lds	r23, 0x04BA
    1402:	84 ea       	ldi	r24, 0xA4	; 164
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <fputs>
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <serialComm+0xde>
			}
			else {
				dTemp = num;
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	90 93 51 04 	sts	0x0451, r25
    1414:	80 93 50 04 	sts	0x0450, r24
			}
		}
		if (strcmp(cmd, "time") == 0) {
    1418:	c8 01       	movw	r24, r16
    141a:	61 ed       	ldi	r22, 0xD1	; 209
    141c:	71 e0       	ldi	r23, 0x01	; 1
    141e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <strcmp>
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	b9 f4       	brne	.+46     	; 0x1454 <serialComm+0x11a>
			if (num < 0) {
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	97 ff       	sbrs	r25, 7
    142c:	09 c0       	rjmp	.+18     	; 0x1440 <serialComm+0x106>
				fprintf(stdout, "Please input a positive time value in seconds.\n\r");
    142e:	60 91 b9 04 	lds	r22, 0x04B9
    1432:	70 91 ba 04 	lds	r23, 0x04BA
    1436:	86 ed       	ldi	r24, 0xD6	; 214
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <fputs>
    143e:	0a c0       	rjmp	.+20     	; 0x1454 <serialComm+0x11a>
			}
			else {
				time_rem = num;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	90 93 64 04 	sts	0x0464, r25
    1448:	80 93 63 04 	sts	0x0463, r24
				msec= 0;
    144c:	10 92 4d 04 	sts	0x044D, r1
    1450:	10 92 4c 04 	sts	0x044C, r1
			}
		}
		// 6 Minute Egg Mode
		if (strcmp(cmd, "egg") == 0) {
    1454:	c8 01       	movw	r24, r16
    1456:	67 e0       	ldi	r22, 0x07	; 7
    1458:	72 e0       	ldi	r23, 0x02	; 2
    145a:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <strcmp>
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	41 f4       	brne	.+16     	; 0x1472 <serialComm+0x138>
			cTemp = 100;
    1462:	d0 92 b2 04 	sts	0x04B2, r13
    1466:	c0 92 b1 04 	sts	0x04B1, r12
			time_rem = 3600;
    146a:	f0 92 64 04 	sts	0x0464, r15
    146e:	e0 92 63 04 	sts	0x0463, r14
		}
		trtSignal(SEM_SHARED);
    1472:	84 e0       	ldi	r24, 0x04	; 4
    1474:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
    1478:	85 cf       	rjmp	.-246    	; 0x1384 <serialComm+0x4a>

0000147a <__divsf3>:
    147a:	a8 e1       	ldi	r26, 0x18	; 24
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e3 e4       	ldi	r30, 0x43	; 67
    1480:	fa e0       	ldi	r31, 0x0A	; 10
    1482:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__prologue_saves__+0x10>
    1486:	69 83       	std	Y+1, r22	; 0x01
    1488:	7a 83       	std	Y+2, r23	; 0x02
    148a:	8b 83       	std	Y+3, r24	; 0x03
    148c:	9c 83       	std	Y+4, r25	; 0x04
    148e:	2d 83       	std	Y+5, r18	; 0x05
    1490:	3e 83       	std	Y+6, r19	; 0x06
    1492:	4f 83       	std	Y+7, r20	; 0x07
    1494:	58 87       	std	Y+8, r21	; 0x08
    1496:	b9 e0       	ldi	r27, 0x09	; 9
    1498:	eb 2e       	mov	r14, r27
    149a:	f1 2c       	mov	r15, r1
    149c:	ec 0e       	add	r14, r28
    149e:	fd 1e       	adc	r15, r29
    14a0:	ce 01       	movw	r24, r28
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	b7 01       	movw	r22, r14
    14a6:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__unpack_f>
    14aa:	8e 01       	movw	r16, r28
    14ac:	0f 5e       	subi	r16, 0xEF	; 239
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	ce 01       	movw	r24, r28
    14b2:	05 96       	adiw	r24, 0x05	; 5
    14b4:	b8 01       	movw	r22, r16
    14b6:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__unpack_f>
    14ba:	29 85       	ldd	r18, Y+9	; 0x09
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <__divsf3+0x48>
    14c0:	7e c0       	rjmp	.+252    	; 0x15be <__divsf3+0x144>
    14c2:	39 89       	ldd	r19, Y+17	; 0x11
    14c4:	32 30       	cpi	r19, 0x02	; 2
    14c6:	10 f4       	brcc	.+4      	; 0x14cc <__divsf3+0x52>
    14c8:	b8 01       	movw	r22, r16
    14ca:	7c c0       	rjmp	.+248    	; 0x15c4 <__divsf3+0x14a>
    14cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ce:	9a 89       	ldd	r25, Y+18	; 0x12
    14d0:	89 27       	eor	r24, r25
    14d2:	8a 87       	std	Y+10, r24	; 0x0a
    14d4:	24 30       	cpi	r18, 0x04	; 4
    14d6:	11 f0       	breq	.+4      	; 0x14dc <__divsf3+0x62>
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 f4       	brne	.+12     	; 0x14e8 <__divsf3+0x6e>
    14dc:	23 17       	cp	r18, r19
    14de:	09 f0       	breq	.+2      	; 0x14e2 <__divsf3+0x68>
    14e0:	6e c0       	rjmp	.+220    	; 0x15be <__divsf3+0x144>
    14e2:	69 e1       	ldi	r22, 0x19	; 25
    14e4:	72 e0       	ldi	r23, 0x02	; 2
    14e6:	6e c0       	rjmp	.+220    	; 0x15c4 <__divsf3+0x14a>
    14e8:	34 30       	cpi	r19, 0x04	; 4
    14ea:	39 f4       	brne	.+14     	; 0x14fa <__divsf3+0x80>
    14ec:	1d 86       	std	Y+13, r1	; 0x0d
    14ee:	1e 86       	std	Y+14, r1	; 0x0e
    14f0:	1f 86       	std	Y+15, r1	; 0x0f
    14f2:	18 8a       	std	Y+16, r1	; 0x10
    14f4:	1c 86       	std	Y+12, r1	; 0x0c
    14f6:	1b 86       	std	Y+11, r1	; 0x0b
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <__divsf3+0x88>
    14fa:	32 30       	cpi	r19, 0x02	; 2
    14fc:	21 f4       	brne	.+8      	; 0x1506 <__divsf3+0x8c>
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	89 87       	std	Y+9, r24	; 0x09
    1502:	b7 01       	movw	r22, r14
    1504:	5f c0       	rjmp	.+190    	; 0x15c4 <__divsf3+0x14a>
    1506:	2b 85       	ldd	r18, Y+11	; 0x0b
    1508:	3c 85       	ldd	r19, Y+12	; 0x0c
    150a:	8b 89       	ldd	r24, Y+19	; 0x13
    150c:	9c 89       	ldd	r25, Y+20	; 0x14
    150e:	28 1b       	sub	r18, r24
    1510:	39 0b       	sbc	r19, r25
    1512:	3c 87       	std	Y+12, r19	; 0x0c
    1514:	2b 87       	std	Y+11, r18	; 0x0b
    1516:	ed 84       	ldd	r14, Y+13	; 0x0d
    1518:	fe 84       	ldd	r15, Y+14	; 0x0e
    151a:	0f 85       	ldd	r16, Y+15	; 0x0f
    151c:	18 89       	ldd	r17, Y+16	; 0x10
    151e:	ad 88       	ldd	r10, Y+21	; 0x15
    1520:	be 88       	ldd	r11, Y+22	; 0x16
    1522:	cf 88       	ldd	r12, Y+23	; 0x17
    1524:	d8 8c       	ldd	r13, Y+24	; 0x18
    1526:	ea 14       	cp	r14, r10
    1528:	fb 04       	cpc	r15, r11
    152a:	0c 05       	cpc	r16, r12
    152c:	1d 05       	cpc	r17, r13
    152e:	40 f4       	brcc	.+16     	; 0x1540 <__divsf3+0xc6>
    1530:	ee 0c       	add	r14, r14
    1532:	ff 1c       	adc	r15, r15
    1534:	00 1f       	adc	r16, r16
    1536:	11 1f       	adc	r17, r17
    1538:	21 50       	subi	r18, 0x01	; 1
    153a:	30 40       	sbci	r19, 0x00	; 0
    153c:	3c 87       	std	Y+12, r19	; 0x0c
    153e:	2b 87       	std	Y+11, r18	; 0x0b
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a0 e0       	ldi	r26, 0x00	; 0
    154e:	b0 e4       	ldi	r27, 0x40	; 64
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	ea 14       	cp	r14, r10
    1556:	fb 04       	cpc	r15, r11
    1558:	0c 05       	cpc	r16, r12
    155a:	1d 05       	cpc	r17, r13
    155c:	40 f0       	brcs	.+16     	; 0x156e <__divsf3+0xf4>
    155e:	28 2b       	or	r18, r24
    1560:	39 2b       	or	r19, r25
    1562:	4a 2b       	or	r20, r26
    1564:	5b 2b       	or	r21, r27
    1566:	ea 18       	sub	r14, r10
    1568:	fb 08       	sbc	r15, r11
    156a:	0c 09       	sbc	r16, r12
    156c:	1d 09       	sbc	r17, r13
    156e:	b6 95       	lsr	r27
    1570:	a7 95       	ror	r26
    1572:	97 95       	ror	r25
    1574:	87 95       	ror	r24
    1576:	ee 0c       	add	r14, r14
    1578:	ff 1c       	adc	r15, r15
    157a:	00 1f       	adc	r16, r16
    157c:	11 1f       	adc	r17, r17
    157e:	6f 5f       	subi	r22, 0xFF	; 255
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	6f 31       	cpi	r22, 0x1F	; 31
    1584:	71 05       	cpc	r23, r1
    1586:	31 f7       	brne	.-52     	; 0x1554 <__divsf3+0xda>
    1588:	da 01       	movw	r26, r20
    158a:	c9 01       	movw	r24, r18
    158c:	8f 77       	andi	r24, 0x7F	; 127
    158e:	90 70       	andi	r25, 0x00	; 0
    1590:	a0 70       	andi	r26, 0x00	; 0
    1592:	b0 70       	andi	r27, 0x00	; 0
    1594:	80 34       	cpi	r24, 0x40	; 64
    1596:	91 05       	cpc	r25, r1
    1598:	a1 05       	cpc	r26, r1
    159a:	b1 05       	cpc	r27, r1
    159c:	61 f4       	brne	.+24     	; 0x15b6 <__divsf3+0x13c>
    159e:	27 fd       	sbrc	r18, 7
    15a0:	0a c0       	rjmp	.+20     	; 0x15b6 <__divsf3+0x13c>
    15a2:	e1 14       	cp	r14, r1
    15a4:	f1 04       	cpc	r15, r1
    15a6:	01 05       	cpc	r16, r1
    15a8:	11 05       	cpc	r17, r1
    15aa:	29 f0       	breq	.+10     	; 0x15b6 <__divsf3+0x13c>
    15ac:	20 5c       	subi	r18, 0xC0	; 192
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	4f 4f       	sbci	r20, 0xFF	; 255
    15b2:	5f 4f       	sbci	r21, 0xFF	; 255
    15b4:	20 78       	andi	r18, 0x80	; 128
    15b6:	2d 87       	std	Y+13, r18	; 0x0d
    15b8:	3e 87       	std	Y+14, r19	; 0x0e
    15ba:	4f 87       	std	Y+15, r20	; 0x0f
    15bc:	58 8b       	std	Y+16, r21	; 0x10
    15be:	be 01       	movw	r22, r28
    15c0:	67 5f       	subi	r22, 0xF7	; 247
    15c2:	7f 4f       	sbci	r23, 0xFF	; 255
    15c4:	cb 01       	movw	r24, r22
    15c6:	0e 94 05 0c 	call	0x180a	; 0x180a <__pack_f>
    15ca:	68 96       	adiw	r28, 0x18	; 24
    15cc:	ea e0       	ldi	r30, 0x0A	; 10
    15ce:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__epilogue_restores__+0x10>

000015d2 <__fixsfsi>:
    15d2:	ac e0       	ldi	r26, 0x0C	; 12
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ef ee       	ldi	r30, 0xEF	; 239
    15d8:	fa e0       	ldi	r31, 0x0A	; 10
    15da:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__prologue_saves__+0x20>
    15de:	69 83       	std	Y+1, r22	; 0x01
    15e0:	7a 83       	std	Y+2, r23	; 0x02
    15e2:	8b 83       	std	Y+3, r24	; 0x03
    15e4:	9c 83       	std	Y+4, r25	; 0x04
    15e6:	ce 01       	movw	r24, r28
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	be 01       	movw	r22, r28
    15ec:	6b 5f       	subi	r22, 0xFB	; 251
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__unpack_f>
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	82 30       	cpi	r24, 0x02	; 2
    15f8:	61 f1       	breq	.+88     	; 0x1652 <__fixsfsi+0x80>
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	50 f1       	brcs	.+84     	; 0x1652 <__fixsfsi+0x80>
    15fe:	84 30       	cpi	r24, 0x04	; 4
    1600:	21 f4       	brne	.+8      	; 0x160a <__fixsfsi+0x38>
    1602:	8e 81       	ldd	r24, Y+6	; 0x06
    1604:	88 23       	and	r24, r24
    1606:	51 f1       	breq	.+84     	; 0x165c <__fixsfsi+0x8a>
    1608:	2e c0       	rjmp	.+92     	; 0x1666 <__fixsfsi+0x94>
    160a:	2f 81       	ldd	r18, Y+7	; 0x07
    160c:	38 85       	ldd	r19, Y+8	; 0x08
    160e:	37 fd       	sbrc	r19, 7
    1610:	20 c0       	rjmp	.+64     	; 0x1652 <__fixsfsi+0x80>
    1612:	6e 81       	ldd	r22, Y+6	; 0x06
    1614:	2f 31       	cpi	r18, 0x1F	; 31
    1616:	31 05       	cpc	r19, r1
    1618:	1c f0       	brlt	.+6      	; 0x1620 <__fixsfsi+0x4e>
    161a:	66 23       	and	r22, r22
    161c:	f9 f0       	breq	.+62     	; 0x165c <__fixsfsi+0x8a>
    161e:	23 c0       	rjmp	.+70     	; 0x1666 <__fixsfsi+0x94>
    1620:	8e e1       	ldi	r24, 0x1E	; 30
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	82 1b       	sub	r24, r18
    1626:	93 0b       	sbc	r25, r19
    1628:	29 85       	ldd	r18, Y+9	; 0x09
    162a:	3a 85       	ldd	r19, Y+10	; 0x0a
    162c:	4b 85       	ldd	r20, Y+11	; 0x0b
    162e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1630:	04 c0       	rjmp	.+8      	; 0x163a <__fixsfsi+0x68>
    1632:	56 95       	lsr	r21
    1634:	47 95       	ror	r20
    1636:	37 95       	ror	r19
    1638:	27 95       	ror	r18
    163a:	8a 95       	dec	r24
    163c:	d2 f7       	brpl	.-12     	; 0x1632 <__fixsfsi+0x60>
    163e:	66 23       	and	r22, r22
    1640:	b1 f0       	breq	.+44     	; 0x166e <__fixsfsi+0x9c>
    1642:	50 95       	com	r21
    1644:	40 95       	com	r20
    1646:	30 95       	com	r19
    1648:	21 95       	neg	r18
    164a:	3f 4f       	sbci	r19, 0xFF	; 255
    164c:	4f 4f       	sbci	r20, 0xFF	; 255
    164e:	5f 4f       	sbci	r21, 0xFF	; 255
    1650:	0e c0       	rjmp	.+28     	; 0x166e <__fixsfsi+0x9c>
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	09 c0       	rjmp	.+18     	; 0x166e <__fixsfsi+0x9c>
    165c:	2f ef       	ldi	r18, 0xFF	; 255
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	4f ef       	ldi	r20, 0xFF	; 255
    1662:	5f e7       	ldi	r21, 0x7F	; 127
    1664:	04 c0       	rjmp	.+8      	; 0x166e <__fixsfsi+0x9c>
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e8       	ldi	r21, 0x80	; 128
    166e:	b9 01       	movw	r22, r18
    1670:	ca 01       	movw	r24, r20
    1672:	2c 96       	adiw	r28, 0x0c	; 12
    1674:	e2 e0       	ldi	r30, 0x02	; 2
    1676:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <__epilogue_restores__+0x20>

0000167a <__floatunsisf>:
    167a:	a8 e0       	ldi	r26, 0x08	; 8
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e3 e4       	ldi	r30, 0x43	; 67
    1680:	fb e0       	ldi	r31, 0x0B	; 11
    1682:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__prologue_saves__+0x10>
    1686:	7b 01       	movw	r14, r22
    1688:	8c 01       	movw	r16, r24
    168a:	61 15       	cp	r22, r1
    168c:	71 05       	cpc	r23, r1
    168e:	81 05       	cpc	r24, r1
    1690:	91 05       	cpc	r25, r1
    1692:	19 f4       	brne	.+6      	; 0x169a <__floatunsisf+0x20>
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	60 c0       	rjmp	.+192    	; 0x175a <__floatunsisf+0xe0>
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	8e e1       	ldi	r24, 0x1E	; 30
    16a0:	c8 2e       	mov	r12, r24
    16a2:	d1 2c       	mov	r13, r1
    16a4:	dc 82       	std	Y+4, r13	; 0x04
    16a6:	cb 82       	std	Y+3, r12	; 0x03
    16a8:	ed 82       	std	Y+5, r14	; 0x05
    16aa:	fe 82       	std	Y+6, r15	; 0x06
    16ac:	0f 83       	std	Y+7, r16	; 0x07
    16ae:	18 87       	std	Y+8, r17	; 0x08
    16b0:	c8 01       	movw	r24, r16
    16b2:	b7 01       	movw	r22, r14
    16b4:	0e 94 b6 0b 	call	0x176c	; 0x176c <__clzsi2>
    16b8:	fc 01       	movw	r30, r24
    16ba:	31 97       	sbiw	r30, 0x01	; 1
    16bc:	f7 ff       	sbrs	r31, 7
    16be:	3b c0       	rjmp	.+118    	; 0x1736 <__floatunsisf+0xbc>
    16c0:	22 27       	eor	r18, r18
    16c2:	33 27       	eor	r19, r19
    16c4:	2e 1b       	sub	r18, r30
    16c6:	3f 0b       	sbc	r19, r31
    16c8:	57 01       	movw	r10, r14
    16ca:	68 01       	movw	r12, r16
    16cc:	02 2e       	mov	r0, r18
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <__floatunsisf+0x5e>
    16d0:	d6 94       	lsr	r13
    16d2:	c7 94       	ror	r12
    16d4:	b7 94       	ror	r11
    16d6:	a7 94       	ror	r10
    16d8:	0a 94       	dec	r0
    16da:	d2 f7       	brpl	.-12     	; 0x16d0 <__floatunsisf+0x56>
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <__floatunsisf+0x7c>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	aa 1f       	adc	r26, r26
    16f4:	bb 1f       	adc	r27, r27
    16f6:	2a 95       	dec	r18
    16f8:	d2 f7       	brpl	.-12     	; 0x16ee <__floatunsisf+0x74>
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	a1 09       	sbc	r26, r1
    16fe:	b1 09       	sbc	r27, r1
    1700:	8e 21       	and	r24, r14
    1702:	9f 21       	and	r25, r15
    1704:	a0 23       	and	r26, r16
    1706:	b1 23       	and	r27, r17
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	a1 05       	cpc	r26, r1
    170c:	b1 05       	cpc	r27, r1
    170e:	21 f0       	breq	.+8      	; 0x1718 <__floatunsisf+0x9e>
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	4a 29       	or	r20, r10
    171a:	5b 29       	or	r21, r11
    171c:	6c 29       	or	r22, r12
    171e:	7d 29       	or	r23, r13
    1720:	4d 83       	std	Y+5, r20	; 0x05
    1722:	5e 83       	std	Y+6, r21	; 0x06
    1724:	6f 83       	std	Y+7, r22	; 0x07
    1726:	78 87       	std	Y+8, r23	; 0x08
    1728:	8e e1       	ldi	r24, 0x1E	; 30
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	8e 1b       	sub	r24, r30
    172e:	9f 0b       	sbc	r25, r31
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	8b 83       	std	Y+3, r24	; 0x03
    1734:	12 c0       	rjmp	.+36     	; 0x175a <__floatunsisf+0xe0>
    1736:	30 97       	sbiw	r30, 0x00	; 0
    1738:	81 f0       	breq	.+32     	; 0x175a <__floatunsisf+0xe0>
    173a:	0e 2e       	mov	r0, r30
    173c:	04 c0       	rjmp	.+8      	; 0x1746 <__floatunsisf+0xcc>
    173e:	ee 0c       	add	r14, r14
    1740:	ff 1c       	adc	r15, r15
    1742:	00 1f       	adc	r16, r16
    1744:	11 1f       	adc	r17, r17
    1746:	0a 94       	dec	r0
    1748:	d2 f7       	brpl	.-12     	; 0x173e <__floatunsisf+0xc4>
    174a:	ed 82       	std	Y+5, r14	; 0x05
    174c:	fe 82       	std	Y+6, r15	; 0x06
    174e:	0f 83       	std	Y+7, r16	; 0x07
    1750:	18 87       	std	Y+8, r17	; 0x08
    1752:	ce 1a       	sub	r12, r30
    1754:	df 0a       	sbc	r13, r31
    1756:	dc 82       	std	Y+4, r13	; 0x04
    1758:	cb 82       	std	Y+3, r12	; 0x03
    175a:	1a 82       	std	Y+2, r1	; 0x02
    175c:	ce 01       	movw	r24, r28
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	0e 94 05 0c 	call	0x180a	; 0x180a <__pack_f>
    1764:	28 96       	adiw	r28, 0x08	; 8
    1766:	ea e0       	ldi	r30, 0x0A	; 10
    1768:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__epilogue_restores__+0x10>

0000176c <__clzsi2>:
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	7b 01       	movw	r14, r22
    1776:	8c 01       	movw	r16, r24
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	e8 16       	cp	r14, r24
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	f8 06       	cpc	r15, r24
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	08 07       	cpc	r16, r24
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	18 07       	cpc	r17, r24
    1788:	88 f4       	brcc	.+34     	; 0x17ac <__clzsi2+0x40>
    178a:	8f ef       	ldi	r24, 0xFF	; 255
    178c:	e8 16       	cp	r14, r24
    178e:	f1 04       	cpc	r15, r1
    1790:	01 05       	cpc	r16, r1
    1792:	11 05       	cpc	r17, r1
    1794:	31 f0       	breq	.+12     	; 0x17a2 <__clzsi2+0x36>
    1796:	28 f0       	brcs	.+10     	; 0x17a2 <__clzsi2+0x36>
    1798:	88 e0       	ldi	r24, 0x08	; 8
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e0       	ldi	r26, 0x00	; 0
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	17 c0       	rjmp	.+46     	; 0x17d0 <__clzsi2+0x64>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a0 e0       	ldi	r26, 0x00	; 0
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	12 c0       	rjmp	.+36     	; 0x17d0 <__clzsi2+0x64>
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	e8 16       	cp	r14, r24
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	f8 06       	cpc	r15, r24
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	08 07       	cpc	r16, r24
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	18 07       	cpc	r17, r24
    17bc:	28 f0       	brcs	.+10     	; 0x17c8 <__clzsi2+0x5c>
    17be:	88 e1       	ldi	r24, 0x18	; 24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	a0 e0       	ldi	r26, 0x00	; 0
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <__clzsi2+0x64>
    17c8:	80 e1       	ldi	r24, 0x10	; 16
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a0 e0       	ldi	r26, 0x00	; 0
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	20 e2       	ldi	r18, 0x20	; 32
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	28 1b       	sub	r18, r24
    17da:	39 0b       	sbc	r19, r25
    17dc:	4a 0b       	sbc	r20, r26
    17de:	5b 0b       	sbc	r21, r27
    17e0:	04 c0       	rjmp	.+8      	; 0x17ea <__clzsi2+0x7e>
    17e2:	16 95       	lsr	r17
    17e4:	07 95       	ror	r16
    17e6:	f7 94       	ror	r15
    17e8:	e7 94       	ror	r14
    17ea:	8a 95       	dec	r24
    17ec:	d2 f7       	brpl	.-12     	; 0x17e2 <__clzsi2+0x76>
    17ee:	f7 01       	movw	r30, r14
    17f0:	ef 5d       	subi	r30, 0xDF	; 223
    17f2:	fd 4f       	sbci	r31, 0xFD	; 253
    17f4:	80 81       	ld	r24, Z
    17f6:	28 1b       	sub	r18, r24
    17f8:	31 09       	sbc	r19, r1
    17fa:	41 09       	sbc	r20, r1
    17fc:	51 09       	sbc	r21, r1
    17fe:	c9 01       	movw	r24, r18
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	08 95       	ret

0000180a <__pack_f>:
    180a:	df 92       	push	r13
    180c:	ef 92       	push	r14
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	fc 01       	movw	r30, r24
    1816:	e4 80       	ldd	r14, Z+4	; 0x04
    1818:	f5 80       	ldd	r15, Z+5	; 0x05
    181a:	06 81       	ldd	r16, Z+6	; 0x06
    181c:	17 81       	ldd	r17, Z+7	; 0x07
    181e:	d1 80       	ldd	r13, Z+1	; 0x01
    1820:	80 81       	ld	r24, Z
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	48 f4       	brcc	.+18     	; 0x1838 <__pack_f+0x2e>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a0 e1       	ldi	r26, 0x10	; 16
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e8 2a       	or	r14, r24
    1830:	f9 2a       	or	r15, r25
    1832:	0a 2b       	or	r16, r26
    1834:	1b 2b       	or	r17, r27
    1836:	a5 c0       	rjmp	.+330    	; 0x1982 <__pack_f+0x178>
    1838:	84 30       	cpi	r24, 0x04	; 4
    183a:	09 f4       	brne	.+2      	; 0x183e <__pack_f+0x34>
    183c:	9f c0       	rjmp	.+318    	; 0x197c <__pack_f+0x172>
    183e:	82 30       	cpi	r24, 0x02	; 2
    1840:	21 f4       	brne	.+8      	; 0x184a <__pack_f+0x40>
    1842:	ee 24       	eor	r14, r14
    1844:	ff 24       	eor	r15, r15
    1846:	87 01       	movw	r16, r14
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <__pack_f+0x4a>
    184a:	e1 14       	cp	r14, r1
    184c:	f1 04       	cpc	r15, r1
    184e:	01 05       	cpc	r16, r1
    1850:	11 05       	cpc	r17, r1
    1852:	19 f4       	brne	.+6      	; 0x185a <__pack_f+0x50>
    1854:	e0 e0       	ldi	r30, 0x00	; 0
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	96 c0       	rjmp	.+300    	; 0x1986 <__pack_f+0x17c>
    185a:	62 81       	ldd	r22, Z+2	; 0x02
    185c:	73 81       	ldd	r23, Z+3	; 0x03
    185e:	9f ef       	ldi	r25, 0xFF	; 255
    1860:	62 38       	cpi	r22, 0x82	; 130
    1862:	79 07       	cpc	r23, r25
    1864:	0c f0       	brlt	.+2      	; 0x1868 <__pack_f+0x5e>
    1866:	5b c0       	rjmp	.+182    	; 0x191e <__pack_f+0x114>
    1868:	22 e8       	ldi	r18, 0x82	; 130
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	26 1b       	sub	r18, r22
    186e:	37 0b       	sbc	r19, r23
    1870:	2a 31       	cpi	r18, 0x1A	; 26
    1872:	31 05       	cpc	r19, r1
    1874:	2c f0       	brlt	.+10     	; 0x1880 <__pack_f+0x76>
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	2a c0       	rjmp	.+84     	; 0x18d4 <__pack_f+0xca>
    1880:	b8 01       	movw	r22, r16
    1882:	a7 01       	movw	r20, r14
    1884:	02 2e       	mov	r0, r18
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <__pack_f+0x86>
    1888:	76 95       	lsr	r23
    188a:	67 95       	ror	r22
    188c:	57 95       	ror	r21
    188e:	47 95       	ror	r20
    1890:	0a 94       	dec	r0
    1892:	d2 f7       	brpl	.-12     	; 0x1888 <__pack_f+0x7e>
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e0       	ldi	r26, 0x00	; 0
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	04 c0       	rjmp	.+8      	; 0x18a6 <__pack_f+0x9c>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	aa 1f       	adc	r26, r26
    18a4:	bb 1f       	adc	r27, r27
    18a6:	2a 95       	dec	r18
    18a8:	d2 f7       	brpl	.-12     	; 0x189e <__pack_f+0x94>
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	a1 09       	sbc	r26, r1
    18ae:	b1 09       	sbc	r27, r1
    18b0:	8e 21       	and	r24, r14
    18b2:	9f 21       	and	r25, r15
    18b4:	a0 23       	and	r26, r16
    18b6:	b1 23       	and	r27, r17
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	a1 05       	cpc	r26, r1
    18bc:	b1 05       	cpc	r27, r1
    18be:	21 f0       	breq	.+8      	; 0x18c8 <__pack_f+0xbe>
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a0 e0       	ldi	r26, 0x00	; 0
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	9a 01       	movw	r18, r20
    18ca:	ab 01       	movw	r20, r22
    18cc:	28 2b       	or	r18, r24
    18ce:	39 2b       	or	r19, r25
    18d0:	4a 2b       	or	r20, r26
    18d2:	5b 2b       	or	r21, r27
    18d4:	da 01       	movw	r26, r20
    18d6:	c9 01       	movw	r24, r18
    18d8:	8f 77       	andi	r24, 0x7F	; 127
    18da:	90 70       	andi	r25, 0x00	; 0
    18dc:	a0 70       	andi	r26, 0x00	; 0
    18de:	b0 70       	andi	r27, 0x00	; 0
    18e0:	80 34       	cpi	r24, 0x40	; 64
    18e2:	91 05       	cpc	r25, r1
    18e4:	a1 05       	cpc	r26, r1
    18e6:	b1 05       	cpc	r27, r1
    18e8:	39 f4       	brne	.+14     	; 0x18f8 <__pack_f+0xee>
    18ea:	27 ff       	sbrs	r18, 7
    18ec:	09 c0       	rjmp	.+18     	; 0x1900 <__pack_f+0xf6>
    18ee:	20 5c       	subi	r18, 0xC0	; 192
    18f0:	3f 4f       	sbci	r19, 0xFF	; 255
    18f2:	4f 4f       	sbci	r20, 0xFF	; 255
    18f4:	5f 4f       	sbci	r21, 0xFF	; 255
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <__pack_f+0xf6>
    18f8:	21 5c       	subi	r18, 0xC1	; 193
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	4f 4f       	sbci	r20, 0xFF	; 255
    18fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1900:	e0 e0       	ldi	r30, 0x00	; 0
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	20 30       	cpi	r18, 0x00	; 0
    1906:	a0 e0       	ldi	r26, 0x00	; 0
    1908:	3a 07       	cpc	r19, r26
    190a:	a0 e0       	ldi	r26, 0x00	; 0
    190c:	4a 07       	cpc	r20, r26
    190e:	a0 e4       	ldi	r26, 0x40	; 64
    1910:	5a 07       	cpc	r21, r26
    1912:	10 f0       	brcs	.+4      	; 0x1918 <__pack_f+0x10e>
    1914:	e1 e0       	ldi	r30, 0x01	; 1
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	79 01       	movw	r14, r18
    191a:	8a 01       	movw	r16, r20
    191c:	27 c0       	rjmp	.+78     	; 0x196c <__pack_f+0x162>
    191e:	60 38       	cpi	r22, 0x80	; 128
    1920:	71 05       	cpc	r23, r1
    1922:	64 f5       	brge	.+88     	; 0x197c <__pack_f+0x172>
    1924:	fb 01       	movw	r30, r22
    1926:	e1 58       	subi	r30, 0x81	; 129
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	d8 01       	movw	r26, r16
    192c:	c7 01       	movw	r24, r14
    192e:	8f 77       	andi	r24, 0x7F	; 127
    1930:	90 70       	andi	r25, 0x00	; 0
    1932:	a0 70       	andi	r26, 0x00	; 0
    1934:	b0 70       	andi	r27, 0x00	; 0
    1936:	80 34       	cpi	r24, 0x40	; 64
    1938:	91 05       	cpc	r25, r1
    193a:	a1 05       	cpc	r26, r1
    193c:	b1 05       	cpc	r27, r1
    193e:	39 f4       	brne	.+14     	; 0x194e <__pack_f+0x144>
    1940:	e7 fe       	sbrs	r14, 7
    1942:	0d c0       	rjmp	.+26     	; 0x195e <__pack_f+0x154>
    1944:	80 e4       	ldi	r24, 0x40	; 64
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	a0 e0       	ldi	r26, 0x00	; 0
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <__pack_f+0x14c>
    194e:	8f e3       	ldi	r24, 0x3F	; 63
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e0       	ldi	r26, 0x00	; 0
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e8 0e       	add	r14, r24
    1958:	f9 1e       	adc	r15, r25
    195a:	0a 1f       	adc	r16, r26
    195c:	1b 1f       	adc	r17, r27
    195e:	17 ff       	sbrs	r17, 7
    1960:	05 c0       	rjmp	.+10     	; 0x196c <__pack_f+0x162>
    1962:	16 95       	lsr	r17
    1964:	07 95       	ror	r16
    1966:	f7 94       	ror	r15
    1968:	e7 94       	ror	r14
    196a:	31 96       	adiw	r30, 0x01	; 1
    196c:	87 e0       	ldi	r24, 0x07	; 7
    196e:	16 95       	lsr	r17
    1970:	07 95       	ror	r16
    1972:	f7 94       	ror	r15
    1974:	e7 94       	ror	r14
    1976:	8a 95       	dec	r24
    1978:	d1 f7       	brne	.-12     	; 0x196e <__pack_f+0x164>
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <__pack_f+0x17c>
    197c:	ee 24       	eor	r14, r14
    197e:	ff 24       	eor	r15, r15
    1980:	87 01       	movw	r16, r14
    1982:	ef ef       	ldi	r30, 0xFF	; 255
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	6e 2f       	mov	r22, r30
    1988:	67 95       	ror	r22
    198a:	66 27       	eor	r22, r22
    198c:	67 95       	ror	r22
    198e:	90 2f       	mov	r25, r16
    1990:	9f 77       	andi	r25, 0x7F	; 127
    1992:	d7 94       	ror	r13
    1994:	dd 24       	eor	r13, r13
    1996:	d7 94       	ror	r13
    1998:	8e 2f       	mov	r24, r30
    199a:	86 95       	lsr	r24
    199c:	49 2f       	mov	r20, r25
    199e:	46 2b       	or	r20, r22
    19a0:	58 2f       	mov	r21, r24
    19a2:	5d 29       	or	r21, r13
    19a4:	b7 01       	movw	r22, r14
    19a6:	ca 01       	movw	r24, r20
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	df 90       	pop	r13
    19b2:	08 95       	ret

000019b4 <__unpack_f>:
    19b4:	fc 01       	movw	r30, r24
    19b6:	db 01       	movw	r26, r22
    19b8:	40 81       	ld	r20, Z
    19ba:	51 81       	ldd	r21, Z+1	; 0x01
    19bc:	22 81       	ldd	r18, Z+2	; 0x02
    19be:	62 2f       	mov	r22, r18
    19c0:	6f 77       	andi	r22, 0x7F	; 127
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	22 1f       	adc	r18, r18
    19c6:	22 27       	eor	r18, r18
    19c8:	22 1f       	adc	r18, r18
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	89 2f       	mov	r24, r25
    19ce:	88 0f       	add	r24, r24
    19d0:	82 2b       	or	r24, r18
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	99 1f       	adc	r25, r25
    19d8:	99 27       	eor	r25, r25
    19da:	99 1f       	adc	r25, r25
    19dc:	11 96       	adiw	r26, 0x01	; 1
    19de:	9c 93       	st	X, r25
    19e0:	11 97       	sbiw	r26, 0x01	; 1
    19e2:	21 15       	cp	r18, r1
    19e4:	31 05       	cpc	r19, r1
    19e6:	a9 f5       	brne	.+106    	; 0x1a52 <__unpack_f+0x9e>
    19e8:	41 15       	cp	r20, r1
    19ea:	51 05       	cpc	r21, r1
    19ec:	61 05       	cpc	r22, r1
    19ee:	71 05       	cpc	r23, r1
    19f0:	11 f4       	brne	.+4      	; 0x19f6 <__unpack_f+0x42>
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	37 c0       	rjmp	.+110    	; 0x1a64 <__unpack_f+0xb0>
    19f6:	82 e8       	ldi	r24, 0x82	; 130
    19f8:	9f ef       	ldi	r25, 0xFF	; 255
    19fa:	13 96       	adiw	r26, 0x03	; 3
    19fc:	9c 93       	st	X, r25
    19fe:	8e 93       	st	-X, r24
    1a00:	12 97       	sbiw	r26, 0x02	; 2
    1a02:	9a 01       	movw	r18, r20
    1a04:	ab 01       	movw	r20, r22
    1a06:	67 e0       	ldi	r22, 0x07	; 7
    1a08:	22 0f       	add	r18, r18
    1a0a:	33 1f       	adc	r19, r19
    1a0c:	44 1f       	adc	r20, r20
    1a0e:	55 1f       	adc	r21, r21
    1a10:	6a 95       	dec	r22
    1a12:	d1 f7       	brne	.-12     	; 0x1a08 <__unpack_f+0x54>
    1a14:	83 e0       	ldi	r24, 0x03	; 3
    1a16:	8c 93       	st	X, r24
    1a18:	0d c0       	rjmp	.+26     	; 0x1a34 <__unpack_f+0x80>
    1a1a:	22 0f       	add	r18, r18
    1a1c:	33 1f       	adc	r19, r19
    1a1e:	44 1f       	adc	r20, r20
    1a20:	55 1f       	adc	r21, r21
    1a22:	12 96       	adiw	r26, 0x02	; 2
    1a24:	8d 91       	ld	r24, X+
    1a26:	9c 91       	ld	r25, X
    1a28:	13 97       	sbiw	r26, 0x03	; 3
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	13 96       	adiw	r26, 0x03	; 3
    1a2e:	9c 93       	st	X, r25
    1a30:	8e 93       	st	-X, r24
    1a32:	12 97       	sbiw	r26, 0x02	; 2
    1a34:	20 30       	cpi	r18, 0x00	; 0
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	38 07       	cpc	r19, r24
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	48 07       	cpc	r20, r24
    1a3e:	80 e4       	ldi	r24, 0x40	; 64
    1a40:	58 07       	cpc	r21, r24
    1a42:	58 f3       	brcs	.-42     	; 0x1a1a <__unpack_f+0x66>
    1a44:	14 96       	adiw	r26, 0x04	; 4
    1a46:	2d 93       	st	X+, r18
    1a48:	3d 93       	st	X+, r19
    1a4a:	4d 93       	st	X+, r20
    1a4c:	5c 93       	st	X, r21
    1a4e:	17 97       	sbiw	r26, 0x07	; 7
    1a50:	08 95       	ret
    1a52:	2f 3f       	cpi	r18, 0xFF	; 255
    1a54:	31 05       	cpc	r19, r1
    1a56:	79 f4       	brne	.+30     	; 0x1a76 <__unpack_f+0xc2>
    1a58:	41 15       	cp	r20, r1
    1a5a:	51 05       	cpc	r21, r1
    1a5c:	61 05       	cpc	r22, r1
    1a5e:	71 05       	cpc	r23, r1
    1a60:	19 f4       	brne	.+6      	; 0x1a68 <__unpack_f+0xb4>
    1a62:	84 e0       	ldi	r24, 0x04	; 4
    1a64:	8c 93       	st	X, r24
    1a66:	08 95       	ret
    1a68:	64 ff       	sbrs	r22, 4
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <__unpack_f+0xbe>
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	8c 93       	st	X, r24
    1a70:	12 c0       	rjmp	.+36     	; 0x1a96 <__unpack_f+0xe2>
    1a72:	1c 92       	st	X, r1
    1a74:	10 c0       	rjmp	.+32     	; 0x1a96 <__unpack_f+0xe2>
    1a76:	2f 57       	subi	r18, 0x7F	; 127
    1a78:	30 40       	sbci	r19, 0x00	; 0
    1a7a:	13 96       	adiw	r26, 0x03	; 3
    1a7c:	3c 93       	st	X, r19
    1a7e:	2e 93       	st	-X, r18
    1a80:	12 97       	sbiw	r26, 0x02	; 2
    1a82:	83 e0       	ldi	r24, 0x03	; 3
    1a84:	8c 93       	st	X, r24
    1a86:	87 e0       	ldi	r24, 0x07	; 7
    1a88:	44 0f       	add	r20, r20
    1a8a:	55 1f       	adc	r21, r21
    1a8c:	66 1f       	adc	r22, r22
    1a8e:	77 1f       	adc	r23, r23
    1a90:	8a 95       	dec	r24
    1a92:	d1 f7       	brne	.-12     	; 0x1a88 <__unpack_f+0xd4>
    1a94:	70 64       	ori	r23, 0x40	; 64
    1a96:	14 96       	adiw	r26, 0x04	; 4
    1a98:	4d 93       	st	X+, r20
    1a9a:	5d 93       	st	X+, r21
    1a9c:	6d 93       	st	X+, r22
    1a9e:	7c 93       	st	X, r23
    1aa0:	17 97       	sbiw	r26, 0x07	; 7
    1aa2:	08 95       	ret

00001aa4 <__udivmodhi4>:
    1aa4:	aa 1b       	sub	r26, r26
    1aa6:	bb 1b       	sub	r27, r27
    1aa8:	51 e1       	ldi	r21, 0x11	; 17
    1aaa:	07 c0       	rjmp	.+14     	; 0x1aba <__udivmodhi4_ep>

00001aac <__udivmodhi4_loop>:
    1aac:	aa 1f       	adc	r26, r26
    1aae:	bb 1f       	adc	r27, r27
    1ab0:	a6 17       	cp	r26, r22
    1ab2:	b7 07       	cpc	r27, r23
    1ab4:	10 f0       	brcs	.+4      	; 0x1aba <__udivmodhi4_ep>
    1ab6:	a6 1b       	sub	r26, r22
    1ab8:	b7 0b       	sbc	r27, r23

00001aba <__udivmodhi4_ep>:
    1aba:	88 1f       	adc	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	5a 95       	dec	r21
    1ac0:	a9 f7       	brne	.-22     	; 0x1aac <__udivmodhi4_loop>
    1ac2:	80 95       	com	r24
    1ac4:	90 95       	com	r25
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	08 95       	ret

00001acc <__divmodhi4>:
    1acc:	97 fb       	bst	r25, 7
    1ace:	09 2e       	mov	r0, r25
    1ad0:	07 26       	eor	r0, r23
    1ad2:	0a d0       	rcall	.+20     	; 0x1ae8 <__divmodhi4_neg1>
    1ad4:	77 fd       	sbrc	r23, 7
    1ad6:	04 d0       	rcall	.+8      	; 0x1ae0 <__divmodhi4_neg2>
    1ad8:	e5 df       	rcall	.-54     	; 0x1aa4 <__udivmodhi4>
    1ada:	06 d0       	rcall	.+12     	; 0x1ae8 <__divmodhi4_neg1>
    1adc:	00 20       	and	r0, r0
    1ade:	1a f4       	brpl	.+6      	; 0x1ae6 <__divmodhi4_exit>

00001ae0 <__divmodhi4_neg2>:
    1ae0:	70 95       	com	r23
    1ae2:	61 95       	neg	r22
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255

00001ae6 <__divmodhi4_exit>:
    1ae6:	08 95       	ret

00001ae8 <__divmodhi4_neg1>:
    1ae8:	f6 f7       	brtc	.-4      	; 0x1ae6 <__divmodhi4_exit>
    1aea:	90 95       	com	r25
    1aec:	81 95       	neg	r24
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	08 95       	ret

00001af2 <__prologue_saves__>:
    1af2:	2f 92       	push	r2
    1af4:	3f 92       	push	r3
    1af6:	4f 92       	push	r4
    1af8:	5f 92       	push	r5
    1afa:	6f 92       	push	r6
    1afc:	7f 92       	push	r7
    1afe:	8f 92       	push	r8
    1b00:	9f 92       	push	r9
    1b02:	af 92       	push	r10
    1b04:	bf 92       	push	r11
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	ca 1b       	sub	r28, r26
    1b1c:	db 0b       	sbc	r29, r27
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	09 94       	ijmp

00001b2a <__epilogue_restores__>:
    1b2a:	2a 88       	ldd	r2, Y+18	; 0x12
    1b2c:	39 88       	ldd	r3, Y+17	; 0x11
    1b2e:	48 88       	ldd	r4, Y+16	; 0x10
    1b30:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b32:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b34:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b36:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b38:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b3a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b3c:	b9 84       	ldd	r11, Y+9	; 0x09
    1b3e:	c8 84       	ldd	r12, Y+8	; 0x08
    1b40:	df 80       	ldd	r13, Y+7	; 0x07
    1b42:	ee 80       	ldd	r14, Y+6	; 0x06
    1b44:	fd 80       	ldd	r15, Y+5	; 0x05
    1b46:	0c 81       	ldd	r16, Y+4	; 0x04
    1b48:	1b 81       	ldd	r17, Y+3	; 0x03
    1b4a:	aa 81       	ldd	r26, Y+2	; 0x02
    1b4c:	b9 81       	ldd	r27, Y+1	; 0x01
    1b4e:	ce 0f       	add	r28, r30
    1b50:	d1 1d       	adc	r29, r1
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	ed 01       	movw	r28, r26
    1b5e:	08 95       	ret

00001b60 <malloc>:
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	bc 01       	movw	r22, r24
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	91 05       	cpc	r25, r1
    1b6a:	10 f4       	brcc	.+4      	; 0x1b70 <malloc+0x10>
    1b6c:	62 e0       	ldi	r22, 0x02	; 2
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	a0 91 b5 04 	lds	r26, 0x04B5
    1b74:	b0 91 b6 04 	lds	r27, 0x04B6
    1b78:	ed 01       	movw	r28, r26
    1b7a:	e0 e0       	ldi	r30, 0x00	; 0
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	21 c0       	rjmp	.+66     	; 0x1bc6 <malloc+0x66>
    1b84:	88 81       	ld	r24, Y
    1b86:	99 81       	ldd	r25, Y+1	; 0x01
    1b88:	86 17       	cp	r24, r22
    1b8a:	97 07       	cpc	r25, r23
    1b8c:	69 f4       	brne	.+26     	; 0x1ba8 <malloc+0x48>
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	9b 81       	ldd	r25, Y+3	; 0x03
    1b92:	30 97       	sbiw	r30, 0x00	; 0
    1b94:	19 f0       	breq	.+6      	; 0x1b9c <malloc+0x3c>
    1b96:	93 83       	std	Z+3, r25	; 0x03
    1b98:	82 83       	std	Z+2, r24	; 0x02
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <malloc+0x44>
    1b9c:	90 93 b6 04 	sts	0x04B6, r25
    1ba0:	80 93 b5 04 	sts	0x04B5, r24
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	34 c0       	rjmp	.+104    	; 0x1c10 <malloc+0xb0>
    1ba8:	68 17       	cp	r22, r24
    1baa:	79 07       	cpc	r23, r25
    1bac:	38 f4       	brcc	.+14     	; 0x1bbc <malloc+0x5c>
    1bae:	41 15       	cp	r20, r1
    1bb0:	51 05       	cpc	r21, r1
    1bb2:	19 f0       	breq	.+6      	; 0x1bba <malloc+0x5a>
    1bb4:	84 17       	cp	r24, r20
    1bb6:	95 07       	cpc	r25, r21
    1bb8:	08 f4       	brcc	.+2      	; 0x1bbc <malloc+0x5c>
    1bba:	ac 01       	movw	r20, r24
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc2:	9c 01       	movw	r18, r24
    1bc4:	e9 01       	movw	r28, r18
    1bc6:	20 97       	sbiw	r28, 0x00	; 0
    1bc8:	e9 f6       	brne	.-70     	; 0x1b84 <malloc+0x24>
    1bca:	41 15       	cp	r20, r1
    1bcc:	51 05       	cpc	r21, r1
    1bce:	a9 f1       	breq	.+106    	; 0x1c3a <malloc+0xda>
    1bd0:	ca 01       	movw	r24, r20
    1bd2:	86 1b       	sub	r24, r22
    1bd4:	97 0b       	sbc	r25, r23
    1bd6:	04 97       	sbiw	r24, 0x04	; 4
    1bd8:	08 f4       	brcc	.+2      	; 0x1bdc <malloc+0x7c>
    1bda:	ba 01       	movw	r22, r20
    1bdc:	e0 e0       	ldi	r30, 0x00	; 0
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	2a c0       	rjmp	.+84     	; 0x1c36 <malloc+0xd6>
    1be2:	8d 91       	ld	r24, X+
    1be4:	9c 91       	ld	r25, X
    1be6:	11 97       	sbiw	r26, 0x01	; 1
    1be8:	84 17       	cp	r24, r20
    1bea:	95 07       	cpc	r25, r21
    1bec:	f9 f4       	brne	.+62     	; 0x1c2c <malloc+0xcc>
    1bee:	64 17       	cp	r22, r20
    1bf0:	75 07       	cpc	r23, r21
    1bf2:	81 f4       	brne	.+32     	; 0x1c14 <malloc+0xb4>
    1bf4:	12 96       	adiw	r26, 0x02	; 2
    1bf6:	8d 91       	ld	r24, X+
    1bf8:	9c 91       	ld	r25, X
    1bfa:	13 97       	sbiw	r26, 0x03	; 3
    1bfc:	30 97       	sbiw	r30, 0x00	; 0
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <malloc+0xa6>
    1c00:	93 83       	std	Z+3, r25	; 0x03
    1c02:	82 83       	std	Z+2, r24	; 0x02
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <malloc+0xae>
    1c06:	90 93 b6 04 	sts	0x04B6, r25
    1c0a:	80 93 b5 04 	sts	0x04B5, r24
    1c0e:	fd 01       	movw	r30, r26
    1c10:	32 96       	adiw	r30, 0x02	; 2
    1c12:	4f c0       	rjmp	.+158    	; 0x1cb2 <malloc+0x152>
    1c14:	ca 01       	movw	r24, r20
    1c16:	86 1b       	sub	r24, r22
    1c18:	97 0b       	sbc	r25, r23
    1c1a:	fd 01       	movw	r30, r26
    1c1c:	e8 0f       	add	r30, r24
    1c1e:	f9 1f       	adc	r31, r25
    1c20:	61 93       	st	Z+, r22
    1c22:	71 93       	st	Z+, r23
    1c24:	02 97       	sbiw	r24, 0x02	; 2
    1c26:	8d 93       	st	X+, r24
    1c28:	9c 93       	st	X, r25
    1c2a:	43 c0       	rjmp	.+134    	; 0x1cb2 <malloc+0x152>
    1c2c:	fd 01       	movw	r30, r26
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	9c 01       	movw	r18, r24
    1c34:	d9 01       	movw	r26, r18
    1c36:	10 97       	sbiw	r26, 0x00	; 0
    1c38:	a1 f6       	brne	.-88     	; 0x1be2 <malloc+0x82>
    1c3a:	80 91 b3 04 	lds	r24, 0x04B3
    1c3e:	90 91 b4 04 	lds	r25, 0x04B4
    1c42:	89 2b       	or	r24, r25
    1c44:	41 f4       	brne	.+16     	; 0x1c56 <malloc+0xf6>
    1c46:	80 91 23 03 	lds	r24, 0x0323
    1c4a:	90 91 24 03 	lds	r25, 0x0324
    1c4e:	90 93 b4 04 	sts	0x04B4, r25
    1c52:	80 93 b3 04 	sts	0x04B3, r24
    1c56:	40 91 25 03 	lds	r20, 0x0325
    1c5a:	50 91 26 03 	lds	r21, 0x0326
    1c5e:	41 15       	cp	r20, r1
    1c60:	51 05       	cpc	r21, r1
    1c62:	41 f4       	brne	.+16     	; 0x1c74 <malloc+0x114>
    1c64:	4d b7       	in	r20, 0x3d	; 61
    1c66:	5e b7       	in	r21, 0x3e	; 62
    1c68:	80 91 21 03 	lds	r24, 0x0321
    1c6c:	90 91 22 03 	lds	r25, 0x0322
    1c70:	48 1b       	sub	r20, r24
    1c72:	59 0b       	sbc	r21, r25
    1c74:	20 91 b3 04 	lds	r18, 0x04B3
    1c78:	30 91 b4 04 	lds	r19, 0x04B4
    1c7c:	24 17       	cp	r18, r20
    1c7e:	35 07       	cpc	r19, r21
    1c80:	b0 f4       	brcc	.+44     	; 0x1cae <malloc+0x14e>
    1c82:	ca 01       	movw	r24, r20
    1c84:	82 1b       	sub	r24, r18
    1c86:	93 0b       	sbc	r25, r19
    1c88:	86 17       	cp	r24, r22
    1c8a:	97 07       	cpc	r25, r23
    1c8c:	80 f0       	brcs	.+32     	; 0x1cae <malloc+0x14e>
    1c8e:	ab 01       	movw	r20, r22
    1c90:	4e 5f       	subi	r20, 0xFE	; 254
    1c92:	5f 4f       	sbci	r21, 0xFF	; 255
    1c94:	84 17       	cp	r24, r20
    1c96:	95 07       	cpc	r25, r21
    1c98:	50 f0       	brcs	.+20     	; 0x1cae <malloc+0x14e>
    1c9a:	42 0f       	add	r20, r18
    1c9c:	53 1f       	adc	r21, r19
    1c9e:	50 93 b4 04 	sts	0x04B4, r21
    1ca2:	40 93 b3 04 	sts	0x04B3, r20
    1ca6:	f9 01       	movw	r30, r18
    1ca8:	61 93       	st	Z+, r22
    1caa:	71 93       	st	Z+, r23
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <malloc+0x152>
    1cae:	e0 e0       	ldi	r30, 0x00	; 0
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	cf 01       	movw	r24, r30
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <free>:
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <free+0xa>
    1cc2:	50 c0       	rjmp	.+160    	; 0x1d64 <free+0xaa>
    1cc4:	ec 01       	movw	r28, r24
    1cc6:	22 97       	sbiw	r28, 0x02	; 2
    1cc8:	1b 82       	std	Y+3, r1	; 0x03
    1cca:	1a 82       	std	Y+2, r1	; 0x02
    1ccc:	a0 91 b5 04 	lds	r26, 0x04B5
    1cd0:	b0 91 b6 04 	lds	r27, 0x04B6
    1cd4:	10 97       	sbiw	r26, 0x00	; 0
    1cd6:	09 f1       	breq	.+66     	; 0x1d1a <free+0x60>
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	ac 17       	cp	r26, r28
    1cde:	bd 07       	cpc	r27, r29
    1ce0:	08 f1       	brcs	.+66     	; 0x1d24 <free+0x6a>
    1ce2:	bb 83       	std	Y+3, r27	; 0x03
    1ce4:	aa 83       	std	Y+2, r26	; 0x02
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	21 91       	ld	r18, Z+
    1cea:	31 91       	ld	r19, Z+
    1cec:	e2 0f       	add	r30, r18
    1cee:	f3 1f       	adc	r31, r19
    1cf0:	ae 17       	cp	r26, r30
    1cf2:	bf 07       	cpc	r27, r31
    1cf4:	79 f4       	brne	.+30     	; 0x1d14 <free+0x5a>
    1cf6:	8d 91       	ld	r24, X+
    1cf8:	9c 91       	ld	r25, X
    1cfa:	11 97       	sbiw	r26, 0x01	; 1
    1cfc:	28 0f       	add	r18, r24
    1cfe:	39 1f       	adc	r19, r25
    1d00:	2e 5f       	subi	r18, 0xFE	; 254
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	39 83       	std	Y+1, r19	; 0x01
    1d06:	28 83       	st	Y, r18
    1d08:	12 96       	adiw	r26, 0x02	; 2
    1d0a:	8d 91       	ld	r24, X+
    1d0c:	9c 91       	ld	r25, X
    1d0e:	13 97       	sbiw	r26, 0x03	; 3
    1d10:	9b 83       	std	Y+3, r25	; 0x03
    1d12:	8a 83       	std	Y+2, r24	; 0x02
    1d14:	41 15       	cp	r20, r1
    1d16:	51 05       	cpc	r21, r1
    1d18:	71 f4       	brne	.+28     	; 0x1d36 <free+0x7c>
    1d1a:	d0 93 b6 04 	sts	0x04B6, r29
    1d1e:	c0 93 b5 04 	sts	0x04B5, r28
    1d22:	20 c0       	rjmp	.+64     	; 0x1d64 <free+0xaa>
    1d24:	12 96       	adiw	r26, 0x02	; 2
    1d26:	8d 91       	ld	r24, X+
    1d28:	9c 91       	ld	r25, X
    1d2a:	13 97       	sbiw	r26, 0x03	; 3
    1d2c:	ad 01       	movw	r20, r26
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	11 f0       	breq	.+4      	; 0x1d36 <free+0x7c>
    1d32:	dc 01       	movw	r26, r24
    1d34:	d3 cf       	rjmp	.-90     	; 0x1cdc <free+0x22>
    1d36:	fa 01       	movw	r30, r20
    1d38:	d3 83       	std	Z+3, r29	; 0x03
    1d3a:	c2 83       	std	Z+2, r28	; 0x02
    1d3c:	21 91       	ld	r18, Z+
    1d3e:	31 91       	ld	r19, Z+
    1d40:	e2 0f       	add	r30, r18
    1d42:	f3 1f       	adc	r31, r19
    1d44:	ce 17       	cp	r28, r30
    1d46:	df 07       	cpc	r29, r31
    1d48:	69 f4       	brne	.+26     	; 0x1d64 <free+0xaa>
    1d4a:	88 81       	ld	r24, Y
    1d4c:	99 81       	ldd	r25, Y+1	; 0x01
    1d4e:	28 0f       	add	r18, r24
    1d50:	39 1f       	adc	r19, r25
    1d52:	2e 5f       	subi	r18, 0xFE	; 254
    1d54:	3f 4f       	sbci	r19, 0xFF	; 255
    1d56:	fa 01       	movw	r30, r20
    1d58:	31 83       	std	Z+1, r19	; 0x01
    1d5a:	20 83       	st	Z, r18
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d60:	93 83       	std	Z+3, r25	; 0x03
    1d62:	82 83       	std	Z+2, r24	; 0x02
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	08 95       	ret

00001d6a <strcmp>:
    1d6a:	fb 01       	movw	r30, r22
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	8d 91       	ld	r24, X+
    1d70:	01 90       	ld	r0, Z+
    1d72:	80 19       	sub	r24, r0
    1d74:	01 10       	cpse	r0, r1
    1d76:	d9 f3       	breq	.-10     	; 0x1d6e <strcmp+0x4>
    1d78:	99 0b       	sbc	r25, r25
    1d7a:	08 95       	ret

00001d7c <fputc>:
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	8c 01       	movw	r16, r24
    1d86:	eb 01       	movw	r28, r22
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	81 ff       	sbrs	r24, 1
    1d8c:	1b c0       	rjmp	.+54     	; 0x1dc4 <fputc+0x48>
    1d8e:	82 ff       	sbrs	r24, 2
    1d90:	0d c0       	rjmp	.+26     	; 0x1dac <fputc+0x30>
    1d92:	2e 81       	ldd	r18, Y+6	; 0x06
    1d94:	3f 81       	ldd	r19, Y+7	; 0x07
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9a:	28 17       	cp	r18, r24
    1d9c:	39 07       	cpc	r19, r25
    1d9e:	64 f4       	brge	.+24     	; 0x1db8 <fputc+0x3c>
    1da0:	e8 81       	ld	r30, Y
    1da2:	f9 81       	ldd	r31, Y+1	; 0x01
    1da4:	01 93       	st	Z+, r16
    1da6:	f9 83       	std	Y+1, r31	; 0x01
    1da8:	e8 83       	st	Y, r30
    1daa:	06 c0       	rjmp	.+12     	; 0x1db8 <fputc+0x3c>
    1dac:	e8 85       	ldd	r30, Y+8	; 0x08
    1dae:	f9 85       	ldd	r31, Y+9	; 0x09
    1db0:	80 2f       	mov	r24, r16
    1db2:	09 95       	icall
    1db4:	89 2b       	or	r24, r25
    1db6:	31 f4       	brne	.+12     	; 0x1dc4 <fputc+0x48>
    1db8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dba:	9f 81       	ldd	r25, Y+7	; 0x07
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	9f 83       	std	Y+7, r25	; 0x07
    1dc0:	8e 83       	std	Y+6, r24	; 0x06
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <fputc+0x4c>
    1dc4:	0f ef       	ldi	r16, 0xFF	; 255
    1dc6:	1f ef       	ldi	r17, 0xFF	; 255
    1dc8:	c8 01       	movw	r24, r16
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	08 95       	ret

00001dd4 <fputs>:
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	7c 01       	movw	r14, r24
    1de2:	8b 01       	movw	r16, r22
    1de4:	db 01       	movw	r26, r22
    1de6:	13 96       	adiw	r26, 0x03	; 3
    1de8:	8c 91       	ld	r24, X
    1dea:	81 fd       	sbrc	r24, 1
    1dec:	03 c0       	rjmp	.+6      	; 0x1df4 <fputs+0x20>
    1dee:	cf ef       	ldi	r28, 0xFF	; 255
    1df0:	df ef       	ldi	r29, 0xFF	; 255
    1df2:	13 c0       	rjmp	.+38     	; 0x1e1a <fputs+0x46>
    1df4:	c0 e0       	ldi	r28, 0x00	; 0
    1df6:	d0 e0       	ldi	r29, 0x00	; 0
    1df8:	0b c0       	rjmp	.+22     	; 0x1e10 <fputs+0x3c>
    1dfa:	d8 01       	movw	r26, r16
    1dfc:	18 96       	adiw	r26, 0x08	; 8
    1dfe:	ed 91       	ld	r30, X+
    1e00:	fc 91       	ld	r31, X
    1e02:	19 97       	sbiw	r26, 0x09	; 9
    1e04:	b8 01       	movw	r22, r16
    1e06:	09 95       	icall
    1e08:	89 2b       	or	r24, r25
    1e0a:	11 f0       	breq	.+4      	; 0x1e10 <fputs+0x3c>
    1e0c:	cf ef       	ldi	r28, 0xFF	; 255
    1e0e:	df ef       	ldi	r29, 0xFF	; 255
    1e10:	f7 01       	movw	r30, r14
    1e12:	81 91       	ld	r24, Z+
    1e14:	7f 01       	movw	r14, r30
    1e16:	88 23       	and	r24, r24
    1e18:	81 f7       	brne	.-32     	; 0x1dfa <fputs+0x26>
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	ff 90       	pop	r15
    1e26:	ef 90       	pop	r14
    1e28:	08 95       	ret

00001e2a <fscanf>:
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	9e 01       	movw	r18, r28
    1e34:	27 5f       	subi	r18, 0xF7	; 247
    1e36:	3f 4f       	sbci	r19, 0xFF	; 255
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3e:	78 85       	ldd	r23, Y+8	; 0x08
    1e40:	a9 01       	movw	r20, r18
    1e42:	0e 94 0c 13 	call	0x2618	; 0x2618 <vfscanf>
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <sprintf>:
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	2e 97       	sbiw	r28, 0x0e	; 14
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	0d 89       	ldd	r16, Y+21	; 0x15
    1e66:	1e 89       	ldd	r17, Y+22	; 0x16
    1e68:	86 e0       	ldi	r24, 0x06	; 6
    1e6a:	8c 83       	std	Y+4, r24	; 0x04
    1e6c:	1a 83       	std	Y+2, r17	; 0x02
    1e6e:	09 83       	std	Y+1, r16	; 0x01
    1e70:	8f ef       	ldi	r24, 0xFF	; 255
    1e72:	9f e7       	ldi	r25, 0x7F	; 127
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	9e 01       	movw	r18, r28
    1e7a:	27 5e       	subi	r18, 0xE7	; 231
    1e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7e:	ce 01       	movw	r24, r28
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	6f 89       	ldd	r22, Y+23	; 0x17
    1e84:	78 8d       	ldd	r23, Y+24	; 0x18
    1e86:	a9 01       	movw	r20, r18
    1e88:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vfprintf>
    1e8c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e8e:	38 85       	ldd	r19, Y+8	; 0x08
    1e90:	02 0f       	add	r16, r18
    1e92:	13 1f       	adc	r17, r19
    1e94:	f8 01       	movw	r30, r16
    1e96:	10 82       	st	Z, r1
    1e98:	2e 96       	adiw	r28, 0x0e	; 14
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	08 95       	ret

00001eae <vfprintf>:
    1eae:	2f 92       	push	r2
    1eb0:	3f 92       	push	r3
    1eb2:	4f 92       	push	r4
    1eb4:	5f 92       	push	r5
    1eb6:	6f 92       	push	r6
    1eb8:	7f 92       	push	r7
    1eba:	8f 92       	push	r8
    1ebc:	9f 92       	push	r9
    1ebe:	af 92       	push	r10
    1ec0:	bf 92       	push	r11
    1ec2:	cf 92       	push	r12
    1ec4:	df 92       	push	r13
    1ec6:	ef 92       	push	r14
    1ec8:	ff 92       	push	r15
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	2b 97       	sbiw	r28, 0x0b	; 11
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	3c 01       	movw	r6, r24
    1ee4:	2b 01       	movw	r4, r22
    1ee6:	5a 01       	movw	r10, r20
    1ee8:	fc 01       	movw	r30, r24
    1eea:	17 82       	std	Z+7, r1	; 0x07
    1eec:	16 82       	std	Z+6, r1	; 0x06
    1eee:	83 81       	ldd	r24, Z+3	; 0x03
    1ef0:	81 fd       	sbrc	r24, 1
    1ef2:	03 c0       	rjmp	.+6      	; 0x1efa <vfprintf+0x4c>
    1ef4:	6f ef       	ldi	r22, 0xFF	; 255
    1ef6:	7f ef       	ldi	r23, 0xFF	; 255
    1ef8:	c6 c1       	rjmp	.+908    	; 0x2286 <vfprintf+0x3d8>
    1efa:	9a e0       	ldi	r25, 0x0A	; 10
    1efc:	89 2e       	mov	r8, r25
    1efe:	1e 01       	movw	r2, r28
    1f00:	08 94       	sec
    1f02:	21 1c       	adc	r2, r1
    1f04:	31 1c       	adc	r3, r1
    1f06:	f3 01       	movw	r30, r6
    1f08:	23 81       	ldd	r18, Z+3	; 0x03
    1f0a:	f2 01       	movw	r30, r4
    1f0c:	23 fd       	sbrc	r18, 3
    1f0e:	85 91       	lpm	r24, Z+
    1f10:	23 ff       	sbrs	r18, 3
    1f12:	81 91       	ld	r24, Z+
    1f14:	2f 01       	movw	r4, r30
    1f16:	88 23       	and	r24, r24
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <vfprintf+0x6e>
    1f1a:	b2 c1       	rjmp	.+868    	; 0x2280 <vfprintf+0x3d2>
    1f1c:	85 32       	cpi	r24, 0x25	; 37
    1f1e:	39 f4       	brne	.+14     	; 0x1f2e <vfprintf+0x80>
    1f20:	23 fd       	sbrc	r18, 3
    1f22:	85 91       	lpm	r24, Z+
    1f24:	23 ff       	sbrs	r18, 3
    1f26:	81 91       	ld	r24, Z+
    1f28:	2f 01       	movw	r4, r30
    1f2a:	85 32       	cpi	r24, 0x25	; 37
    1f2c:	29 f4       	brne	.+10     	; 0x1f38 <vfprintf+0x8a>
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	b3 01       	movw	r22, r6
    1f32:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <fputc>
    1f36:	e7 cf       	rjmp	.-50     	; 0x1f06 <vfprintf+0x58>
    1f38:	98 2f       	mov	r25, r24
    1f3a:	ff 24       	eor	r15, r15
    1f3c:	ee 24       	eor	r14, r14
    1f3e:	99 24       	eor	r9, r9
    1f40:	ff e1       	ldi	r31, 0x1F	; 31
    1f42:	ff 15       	cp	r31, r15
    1f44:	d0 f0       	brcs	.+52     	; 0x1f7a <vfprintf+0xcc>
    1f46:	9b 32       	cpi	r25, 0x2B	; 43
    1f48:	69 f0       	breq	.+26     	; 0x1f64 <vfprintf+0xb6>
    1f4a:	9c 32       	cpi	r25, 0x2C	; 44
    1f4c:	28 f4       	brcc	.+10     	; 0x1f58 <vfprintf+0xaa>
    1f4e:	90 32       	cpi	r25, 0x20	; 32
    1f50:	59 f0       	breq	.+22     	; 0x1f68 <vfprintf+0xba>
    1f52:	93 32       	cpi	r25, 0x23	; 35
    1f54:	91 f4       	brne	.+36     	; 0x1f7a <vfprintf+0xcc>
    1f56:	0e c0       	rjmp	.+28     	; 0x1f74 <vfprintf+0xc6>
    1f58:	9d 32       	cpi	r25, 0x2D	; 45
    1f5a:	49 f0       	breq	.+18     	; 0x1f6e <vfprintf+0xc0>
    1f5c:	90 33       	cpi	r25, 0x30	; 48
    1f5e:	69 f4       	brne	.+26     	; 0x1f7a <vfprintf+0xcc>
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	24 c0       	rjmp	.+72     	; 0x1fac <vfprintf+0xfe>
    1f64:	52 e0       	ldi	r21, 0x02	; 2
    1f66:	f5 2a       	or	r15, r21
    1f68:	84 e0       	ldi	r24, 0x04	; 4
    1f6a:	f8 2a       	or	r15, r24
    1f6c:	28 c0       	rjmp	.+80     	; 0x1fbe <vfprintf+0x110>
    1f6e:	98 e0       	ldi	r25, 0x08	; 8
    1f70:	f9 2a       	or	r15, r25
    1f72:	25 c0       	rjmp	.+74     	; 0x1fbe <vfprintf+0x110>
    1f74:	e0 e1       	ldi	r30, 0x10	; 16
    1f76:	fe 2a       	or	r15, r30
    1f78:	22 c0       	rjmp	.+68     	; 0x1fbe <vfprintf+0x110>
    1f7a:	f7 fc       	sbrc	r15, 7
    1f7c:	29 c0       	rjmp	.+82     	; 0x1fd0 <vfprintf+0x122>
    1f7e:	89 2f       	mov	r24, r25
    1f80:	80 53       	subi	r24, 0x30	; 48
    1f82:	8a 30       	cpi	r24, 0x0A	; 10
    1f84:	70 f4       	brcc	.+28     	; 0x1fa2 <vfprintf+0xf4>
    1f86:	f6 fe       	sbrs	r15, 6
    1f88:	05 c0       	rjmp	.+10     	; 0x1f94 <vfprintf+0xe6>
    1f8a:	98 9c       	mul	r9, r8
    1f8c:	90 2c       	mov	r9, r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	98 0e       	add	r9, r24
    1f92:	15 c0       	rjmp	.+42     	; 0x1fbe <vfprintf+0x110>
    1f94:	e8 9c       	mul	r14, r8
    1f96:	e0 2c       	mov	r14, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	e8 0e       	add	r14, r24
    1f9c:	f0 e2       	ldi	r31, 0x20	; 32
    1f9e:	ff 2a       	or	r15, r31
    1fa0:	0e c0       	rjmp	.+28     	; 0x1fbe <vfprintf+0x110>
    1fa2:	9e 32       	cpi	r25, 0x2E	; 46
    1fa4:	29 f4       	brne	.+10     	; 0x1fb0 <vfprintf+0x102>
    1fa6:	f6 fc       	sbrc	r15, 6
    1fa8:	6b c1       	rjmp	.+726    	; 0x2280 <vfprintf+0x3d2>
    1faa:	40 e4       	ldi	r20, 0x40	; 64
    1fac:	f4 2a       	or	r15, r20
    1fae:	07 c0       	rjmp	.+14     	; 0x1fbe <vfprintf+0x110>
    1fb0:	9c 36       	cpi	r25, 0x6C	; 108
    1fb2:	19 f4       	brne	.+6      	; 0x1fba <vfprintf+0x10c>
    1fb4:	50 e8       	ldi	r21, 0x80	; 128
    1fb6:	f5 2a       	or	r15, r21
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <vfprintf+0x110>
    1fba:	98 36       	cpi	r25, 0x68	; 104
    1fbc:	49 f4       	brne	.+18     	; 0x1fd0 <vfprintf+0x122>
    1fbe:	f2 01       	movw	r30, r4
    1fc0:	23 fd       	sbrc	r18, 3
    1fc2:	95 91       	lpm	r25, Z+
    1fc4:	23 ff       	sbrs	r18, 3
    1fc6:	91 91       	ld	r25, Z+
    1fc8:	2f 01       	movw	r4, r30
    1fca:	99 23       	and	r25, r25
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <vfprintf+0x122>
    1fce:	b8 cf       	rjmp	.-144    	; 0x1f40 <vfprintf+0x92>
    1fd0:	89 2f       	mov	r24, r25
    1fd2:	85 54       	subi	r24, 0x45	; 69
    1fd4:	83 30       	cpi	r24, 0x03	; 3
    1fd6:	18 f0       	brcs	.+6      	; 0x1fde <vfprintf+0x130>
    1fd8:	80 52       	subi	r24, 0x20	; 32
    1fda:	83 30       	cpi	r24, 0x03	; 3
    1fdc:	38 f4       	brcc	.+14     	; 0x1fec <vfprintf+0x13e>
    1fde:	44 e0       	ldi	r20, 0x04	; 4
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	a4 0e       	add	r10, r20
    1fe4:	b5 1e       	adc	r11, r21
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	59 83       	std	Y+1, r21	; 0x01
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <vfprintf+0x15c>
    1fec:	93 36       	cpi	r25, 0x63	; 99
    1fee:	31 f0       	breq	.+12     	; 0x1ffc <vfprintf+0x14e>
    1ff0:	93 37       	cpi	r25, 0x73	; 115
    1ff2:	79 f0       	breq	.+30     	; 0x2012 <vfprintf+0x164>
    1ff4:	93 35       	cpi	r25, 0x53	; 83
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <vfprintf+0x14c>
    1ff8:	56 c0       	rjmp	.+172    	; 0x20a6 <vfprintf+0x1f8>
    1ffa:	20 c0       	rjmp	.+64     	; 0x203c <vfprintf+0x18e>
    1ffc:	f5 01       	movw	r30, r10
    1ffe:	80 81       	ld	r24, Z
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	42 e0       	ldi	r20, 0x02	; 2
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	a4 0e       	add	r10, r20
    2008:	b5 1e       	adc	r11, r21
    200a:	61 01       	movw	r12, r2
    200c:	01 e0       	ldi	r16, 0x01	; 1
    200e:	10 e0       	ldi	r17, 0x00	; 0
    2010:	12 c0       	rjmp	.+36     	; 0x2036 <vfprintf+0x188>
    2012:	f5 01       	movw	r30, r10
    2014:	c0 80       	ld	r12, Z
    2016:	d1 80       	ldd	r13, Z+1	; 0x01
    2018:	f6 fc       	sbrc	r15, 6
    201a:	03 c0       	rjmp	.+6      	; 0x2022 <vfprintf+0x174>
    201c:	6f ef       	ldi	r22, 0xFF	; 255
    201e:	7f ef       	ldi	r23, 0xFF	; 255
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <vfprintf+0x178>
    2022:	69 2d       	mov	r22, r9
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	42 e0       	ldi	r20, 0x02	; 2
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	a4 0e       	add	r10, r20
    202c:	b5 1e       	adc	r11, r21
    202e:	c6 01       	movw	r24, r12
    2030:	0e 94 4d 14 	call	0x289a	; 0x289a <strnlen>
    2034:	8c 01       	movw	r16, r24
    2036:	5f e7       	ldi	r21, 0x7F	; 127
    2038:	f5 22       	and	r15, r21
    203a:	14 c0       	rjmp	.+40     	; 0x2064 <vfprintf+0x1b6>
    203c:	f5 01       	movw	r30, r10
    203e:	c0 80       	ld	r12, Z
    2040:	d1 80       	ldd	r13, Z+1	; 0x01
    2042:	f6 fc       	sbrc	r15, 6
    2044:	03 c0       	rjmp	.+6      	; 0x204c <vfprintf+0x19e>
    2046:	6f ef       	ldi	r22, 0xFF	; 255
    2048:	7f ef       	ldi	r23, 0xFF	; 255
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <vfprintf+0x1a2>
    204c:	69 2d       	mov	r22, r9
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	42 e0       	ldi	r20, 0x02	; 2
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	a4 0e       	add	r10, r20
    2056:	b5 1e       	adc	r11, r21
    2058:	c6 01       	movw	r24, r12
    205a:	0e 94 42 14 	call	0x2884	; 0x2884 <strnlen_P>
    205e:	8c 01       	movw	r16, r24
    2060:	50 e8       	ldi	r21, 0x80	; 128
    2062:	f5 2a       	or	r15, r21
    2064:	f3 fe       	sbrs	r15, 3
    2066:	07 c0       	rjmp	.+14     	; 0x2076 <vfprintf+0x1c8>
    2068:	1a c0       	rjmp	.+52     	; 0x209e <vfprintf+0x1f0>
    206a:	80 e2       	ldi	r24, 0x20	; 32
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	b3 01       	movw	r22, r6
    2070:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <fputc>
    2074:	ea 94       	dec	r14
    2076:	8e 2d       	mov	r24, r14
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	08 17       	cp	r16, r24
    207c:	19 07       	cpc	r17, r25
    207e:	a8 f3       	brcs	.-22     	; 0x206a <vfprintf+0x1bc>
    2080:	0e c0       	rjmp	.+28     	; 0x209e <vfprintf+0x1f0>
    2082:	f6 01       	movw	r30, r12
    2084:	f7 fc       	sbrc	r15, 7
    2086:	85 91       	lpm	r24, Z+
    2088:	f7 fe       	sbrs	r15, 7
    208a:	81 91       	ld	r24, Z+
    208c:	6f 01       	movw	r12, r30
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	b3 01       	movw	r22, r6
    2092:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <fputc>
    2096:	e1 10       	cpse	r14, r1
    2098:	ea 94       	dec	r14
    209a:	01 50       	subi	r16, 0x01	; 1
    209c:	10 40       	sbci	r17, 0x00	; 0
    209e:	01 15       	cp	r16, r1
    20a0:	11 05       	cpc	r17, r1
    20a2:	79 f7       	brne	.-34     	; 0x2082 <vfprintf+0x1d4>
    20a4:	ea c0       	rjmp	.+468    	; 0x227a <vfprintf+0x3cc>
    20a6:	94 36       	cpi	r25, 0x64	; 100
    20a8:	11 f0       	breq	.+4      	; 0x20ae <vfprintf+0x200>
    20aa:	99 36       	cpi	r25, 0x69	; 105
    20ac:	69 f5       	brne	.+90     	; 0x2108 <vfprintf+0x25a>
    20ae:	f7 fe       	sbrs	r15, 7
    20b0:	08 c0       	rjmp	.+16     	; 0x20c2 <vfprintf+0x214>
    20b2:	f5 01       	movw	r30, r10
    20b4:	20 81       	ld	r18, Z
    20b6:	31 81       	ldd	r19, Z+1	; 0x01
    20b8:	42 81       	ldd	r20, Z+2	; 0x02
    20ba:	53 81       	ldd	r21, Z+3	; 0x03
    20bc:	84 e0       	ldi	r24, 0x04	; 4
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0a c0       	rjmp	.+20     	; 0x20d6 <vfprintf+0x228>
    20c2:	f5 01       	movw	r30, r10
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	9c 01       	movw	r18, r24
    20ca:	44 27       	eor	r20, r20
    20cc:	37 fd       	sbrc	r19, 7
    20ce:	40 95       	com	r20
    20d0:	54 2f       	mov	r21, r20
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a8 0e       	add	r10, r24
    20d8:	b9 1e       	adc	r11, r25
    20da:	9f e6       	ldi	r25, 0x6F	; 111
    20dc:	f9 22       	and	r15, r25
    20de:	57 ff       	sbrs	r21, 7
    20e0:	09 c0       	rjmp	.+18     	; 0x20f4 <vfprintf+0x246>
    20e2:	50 95       	com	r21
    20e4:	40 95       	com	r20
    20e6:	30 95       	com	r19
    20e8:	21 95       	neg	r18
    20ea:	3f 4f       	sbci	r19, 0xFF	; 255
    20ec:	4f 4f       	sbci	r20, 0xFF	; 255
    20ee:	5f 4f       	sbci	r21, 0xFF	; 255
    20f0:	e0 e8       	ldi	r30, 0x80	; 128
    20f2:	fe 2a       	or	r15, r30
    20f4:	ca 01       	movw	r24, r20
    20f6:	b9 01       	movw	r22, r18
    20f8:	a1 01       	movw	r20, r2
    20fa:	2a e0       	ldi	r18, 0x0A	; 10
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	0e 94 b4 14 	call	0x2968	; 0x2968 <__ultoa_invert>
    2102:	d8 2e       	mov	r13, r24
    2104:	d2 18       	sub	r13, r2
    2106:	40 c0       	rjmp	.+128    	; 0x2188 <vfprintf+0x2da>
    2108:	95 37       	cpi	r25, 0x75	; 117
    210a:	29 f4       	brne	.+10     	; 0x2116 <vfprintf+0x268>
    210c:	1f 2d       	mov	r17, r15
    210e:	1f 7e       	andi	r17, 0xEF	; 239
    2110:	2a e0       	ldi	r18, 0x0A	; 10
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	1d c0       	rjmp	.+58     	; 0x2150 <vfprintf+0x2a2>
    2116:	1f 2d       	mov	r17, r15
    2118:	19 7f       	andi	r17, 0xF9	; 249
    211a:	9f 36       	cpi	r25, 0x6F	; 111
    211c:	61 f0       	breq	.+24     	; 0x2136 <vfprintf+0x288>
    211e:	90 37       	cpi	r25, 0x70	; 112
    2120:	20 f4       	brcc	.+8      	; 0x212a <vfprintf+0x27c>
    2122:	98 35       	cpi	r25, 0x58	; 88
    2124:	09 f0       	breq	.+2      	; 0x2128 <vfprintf+0x27a>
    2126:	ac c0       	rjmp	.+344    	; 0x2280 <vfprintf+0x3d2>
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <vfprintf+0x29a>
    212a:	90 37       	cpi	r25, 0x70	; 112
    212c:	39 f0       	breq	.+14     	; 0x213c <vfprintf+0x28e>
    212e:	98 37       	cpi	r25, 0x78	; 120
    2130:	09 f0       	breq	.+2      	; 0x2134 <vfprintf+0x286>
    2132:	a6 c0       	rjmp	.+332    	; 0x2280 <vfprintf+0x3d2>
    2134:	04 c0       	rjmp	.+8      	; 0x213e <vfprintf+0x290>
    2136:	28 e0       	ldi	r18, 0x08	; 8
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	0a c0       	rjmp	.+20     	; 0x2150 <vfprintf+0x2a2>
    213c:	10 61       	ori	r17, 0x10	; 16
    213e:	14 fd       	sbrc	r17, 4
    2140:	14 60       	ori	r17, 0x04	; 4
    2142:	20 e1       	ldi	r18, 0x10	; 16
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	04 c0       	rjmp	.+8      	; 0x2150 <vfprintf+0x2a2>
    2148:	14 fd       	sbrc	r17, 4
    214a:	16 60       	ori	r17, 0x06	; 6
    214c:	20 e1       	ldi	r18, 0x10	; 16
    214e:	32 e0       	ldi	r19, 0x02	; 2
    2150:	17 ff       	sbrs	r17, 7
    2152:	08 c0       	rjmp	.+16     	; 0x2164 <vfprintf+0x2b6>
    2154:	f5 01       	movw	r30, r10
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	93 81       	ldd	r25, Z+3	; 0x03
    215e:	44 e0       	ldi	r20, 0x04	; 4
    2160:	50 e0       	ldi	r21, 0x00	; 0
    2162:	08 c0       	rjmp	.+16     	; 0x2174 <vfprintf+0x2c6>
    2164:	f5 01       	movw	r30, r10
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	bc 01       	movw	r22, r24
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	42 e0       	ldi	r20, 0x02	; 2
    2172:	50 e0       	ldi	r21, 0x00	; 0
    2174:	a4 0e       	add	r10, r20
    2176:	b5 1e       	adc	r11, r21
    2178:	a1 01       	movw	r20, r2
    217a:	0e 94 b4 14 	call	0x2968	; 0x2968 <__ultoa_invert>
    217e:	d8 2e       	mov	r13, r24
    2180:	d2 18       	sub	r13, r2
    2182:	8f e7       	ldi	r24, 0x7F	; 127
    2184:	f8 2e       	mov	r15, r24
    2186:	f1 22       	and	r15, r17
    2188:	f6 fe       	sbrs	r15, 6
    218a:	0b c0       	rjmp	.+22     	; 0x21a2 <vfprintf+0x2f4>
    218c:	5e ef       	ldi	r21, 0xFE	; 254
    218e:	f5 22       	and	r15, r21
    2190:	d9 14       	cp	r13, r9
    2192:	38 f4       	brcc	.+14     	; 0x21a2 <vfprintf+0x2f4>
    2194:	f4 fe       	sbrs	r15, 4
    2196:	07 c0       	rjmp	.+14     	; 0x21a6 <vfprintf+0x2f8>
    2198:	f2 fc       	sbrc	r15, 2
    219a:	05 c0       	rjmp	.+10     	; 0x21a6 <vfprintf+0x2f8>
    219c:	8f ee       	ldi	r24, 0xEF	; 239
    219e:	f8 22       	and	r15, r24
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <vfprintf+0x2f8>
    21a2:	1d 2d       	mov	r17, r13
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <vfprintf+0x2fa>
    21a6:	19 2d       	mov	r17, r9
    21a8:	f4 fe       	sbrs	r15, 4
    21aa:	0d c0       	rjmp	.+26     	; 0x21c6 <vfprintf+0x318>
    21ac:	fe 01       	movw	r30, r28
    21ae:	ed 0d       	add	r30, r13
    21b0:	f1 1d       	adc	r31, r1
    21b2:	80 81       	ld	r24, Z
    21b4:	80 33       	cpi	r24, 0x30	; 48
    21b6:	19 f4       	brne	.+6      	; 0x21be <vfprintf+0x310>
    21b8:	99 ee       	ldi	r25, 0xE9	; 233
    21ba:	f9 22       	and	r15, r25
    21bc:	08 c0       	rjmp	.+16     	; 0x21ce <vfprintf+0x320>
    21be:	1f 5f       	subi	r17, 0xFF	; 255
    21c0:	f2 fe       	sbrs	r15, 2
    21c2:	05 c0       	rjmp	.+10     	; 0x21ce <vfprintf+0x320>
    21c4:	03 c0       	rjmp	.+6      	; 0x21cc <vfprintf+0x31e>
    21c6:	8f 2d       	mov	r24, r15
    21c8:	86 78       	andi	r24, 0x86	; 134
    21ca:	09 f0       	breq	.+2      	; 0x21ce <vfprintf+0x320>
    21cc:	1f 5f       	subi	r17, 0xFF	; 255
    21ce:	0f 2d       	mov	r16, r15
    21d0:	f3 fc       	sbrc	r15, 3
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <vfprintf+0x34e>
    21d4:	f0 fe       	sbrs	r15, 0
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <vfprintf+0x348>
    21d8:	1e 15       	cp	r17, r14
    21da:	10 f0       	brcs	.+4      	; 0x21e0 <vfprintf+0x332>
    21dc:	9d 2c       	mov	r9, r13
    21de:	0b c0       	rjmp	.+22     	; 0x21f6 <vfprintf+0x348>
    21e0:	9d 2c       	mov	r9, r13
    21e2:	9e 0c       	add	r9, r14
    21e4:	91 1a       	sub	r9, r17
    21e6:	1e 2d       	mov	r17, r14
    21e8:	06 c0       	rjmp	.+12     	; 0x21f6 <vfprintf+0x348>
    21ea:	80 e2       	ldi	r24, 0x20	; 32
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	b3 01       	movw	r22, r6
    21f0:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <fputc>
    21f4:	1f 5f       	subi	r17, 0xFF	; 255
    21f6:	1e 15       	cp	r17, r14
    21f8:	c0 f3       	brcs	.-16     	; 0x21ea <vfprintf+0x33c>
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <vfprintf+0x356>
    21fc:	1e 15       	cp	r17, r14
    21fe:	10 f4       	brcc	.+4      	; 0x2204 <vfprintf+0x356>
    2200:	e1 1a       	sub	r14, r17
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <vfprintf+0x358>
    2204:	ee 24       	eor	r14, r14
    2206:	04 ff       	sbrs	r16, 4
    2208:	0f c0       	rjmp	.+30     	; 0x2228 <vfprintf+0x37a>
    220a:	80 e3       	ldi	r24, 0x30	; 48
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	b3 01       	movw	r22, r6
    2210:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <fputc>
    2214:	02 ff       	sbrs	r16, 2
    2216:	1d c0       	rjmp	.+58     	; 0x2252 <vfprintf+0x3a4>
    2218:	01 fd       	sbrc	r16, 1
    221a:	03 c0       	rjmp	.+6      	; 0x2222 <vfprintf+0x374>
    221c:	88 e7       	ldi	r24, 0x78	; 120
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e c0       	rjmp	.+28     	; 0x223e <vfprintf+0x390>
    2222:	88 e5       	ldi	r24, 0x58	; 88
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0b c0       	rjmp	.+22     	; 0x223e <vfprintf+0x390>
    2228:	80 2f       	mov	r24, r16
    222a:	86 78       	andi	r24, 0x86	; 134
    222c:	91 f0       	breq	.+36     	; 0x2252 <vfprintf+0x3a4>
    222e:	01 ff       	sbrs	r16, 1
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <vfprintf+0x388>
    2232:	8b e2       	ldi	r24, 0x2B	; 43
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <vfprintf+0x38a>
    2236:	80 e2       	ldi	r24, 0x20	; 32
    2238:	f7 fc       	sbrc	r15, 7
    223a:	8d e2       	ldi	r24, 0x2D	; 45
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	b3 01       	movw	r22, r6
    2240:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <fputc>
    2244:	06 c0       	rjmp	.+12     	; 0x2252 <vfprintf+0x3a4>
    2246:	80 e3       	ldi	r24, 0x30	; 48
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	b3 01       	movw	r22, r6
    224c:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <fputc>
    2250:	9a 94       	dec	r9
    2252:	d9 14       	cp	r13, r9
    2254:	c0 f3       	brcs	.-16     	; 0x2246 <vfprintf+0x398>
    2256:	da 94       	dec	r13
    2258:	f1 01       	movw	r30, r2
    225a:	ed 0d       	add	r30, r13
    225c:	f1 1d       	adc	r31, r1
    225e:	80 81       	ld	r24, Z
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	b3 01       	movw	r22, r6
    2264:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <fputc>
    2268:	dd 20       	and	r13, r13
    226a:	a9 f7       	brne	.-22     	; 0x2256 <vfprintf+0x3a8>
    226c:	06 c0       	rjmp	.+12     	; 0x227a <vfprintf+0x3cc>
    226e:	80 e2       	ldi	r24, 0x20	; 32
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	b3 01       	movw	r22, r6
    2274:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <fputc>
    2278:	ea 94       	dec	r14
    227a:	ee 20       	and	r14, r14
    227c:	c1 f7       	brne	.-16     	; 0x226e <vfprintf+0x3c0>
    227e:	43 ce       	rjmp	.-890    	; 0x1f06 <vfprintf+0x58>
    2280:	f3 01       	movw	r30, r6
    2282:	66 81       	ldd	r22, Z+6	; 0x06
    2284:	77 81       	ldd	r23, Z+7	; 0x07
    2286:	cb 01       	movw	r24, r22
    2288:	2b 96       	adiw	r28, 0x0b	; 11
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	ff 90       	pop	r15
    229e:	ef 90       	pop	r14
    22a0:	df 90       	pop	r13
    22a2:	cf 90       	pop	r12
    22a4:	bf 90       	pop	r11
    22a6:	af 90       	pop	r10
    22a8:	9f 90       	pop	r9
    22aa:	8f 90       	pop	r8
    22ac:	7f 90       	pop	r7
    22ae:	6f 90       	pop	r6
    22b0:	5f 90       	pop	r5
    22b2:	4f 90       	pop	r4
    22b4:	3f 90       	pop	r3
    22b6:	2f 90       	pop	r2
    22b8:	08 95       	ret

000022ba <putval>:
    22ba:	fc 01       	movw	r30, r24
    22bc:	20 fd       	sbrc	r18, 0
    22be:	08 c0       	rjmp	.+16     	; 0x22d0 <putval+0x16>
    22c0:	23 fd       	sbrc	r18, 3
    22c2:	05 c0       	rjmp	.+10     	; 0x22ce <putval+0x14>
    22c4:	22 ff       	sbrs	r18, 2
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <putval+0x12>
    22c8:	73 83       	std	Z+3, r23	; 0x03
    22ca:	62 83       	std	Z+2, r22	; 0x02
    22cc:	51 83       	std	Z+1, r21	; 0x01
    22ce:	40 83       	st	Z, r20
    22d0:	08 95       	ret

000022d2 <mulacc>:
    22d2:	ef 92       	push	r14
    22d4:	ff 92       	push	r15
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	44 ff       	sbrs	r20, 4
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <mulacc+0x10>
    22de:	33 e0       	ldi	r19, 0x03	; 3
    22e0:	11 c0       	rjmp	.+34     	; 0x2304 <mulacc+0x32>
    22e2:	46 ff       	sbrs	r20, 6
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <mulacc+0x18>
    22e6:	34 e0       	ldi	r19, 0x04	; 4
    22e8:	0d c0       	rjmp	.+26     	; 0x2304 <mulacc+0x32>
    22ea:	db 01       	movw	r26, r22
    22ec:	fc 01       	movw	r30, r24
    22ee:	aa 0f       	add	r26, r26
    22f0:	bb 1f       	adc	r27, r27
    22f2:	ee 1f       	adc	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	10 94       	com	r1
    22f8:	d1 f7       	brne	.-12     	; 0x22ee <mulacc+0x1c>
    22fa:	6a 0f       	add	r22, r26
    22fc:	7b 1f       	adc	r23, r27
    22fe:	8e 1f       	adc	r24, r30
    2300:	9f 1f       	adc	r25, r31
    2302:	31 e0       	ldi	r19, 0x01	; 1
    2304:	66 0f       	add	r22, r22
    2306:	77 1f       	adc	r23, r23
    2308:	88 1f       	adc	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	31 50       	subi	r19, 0x01	; 1
    230e:	d1 f7       	brne	.-12     	; 0x2304 <mulacc+0x32>
    2310:	7b 01       	movw	r14, r22
    2312:	8c 01       	movw	r16, r24
    2314:	e2 0e       	add	r14, r18
    2316:	f1 1c       	adc	r15, r1
    2318:	01 1d       	adc	r16, r1
    231a:	11 1d       	adc	r17, r1
    231c:	a8 01       	movw	r20, r16
    231e:	97 01       	movw	r18, r14
    2320:	b7 01       	movw	r22, r14
    2322:	ca 01       	movw	r24, r20
    2324:	1f 91       	pop	r17
    2326:	0f 91       	pop	r16
    2328:	ff 90       	pop	r15
    232a:	ef 90       	pop	r14
    232c:	08 95       	ret

0000232e <skip_spaces>:
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	8c 01       	movw	r16, r24
    2338:	c8 01       	movw	r24, r16
    233a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <fgetc>
    233e:	ec 01       	movw	r28, r24
    2340:	97 fd       	sbrc	r25, 7
    2342:	08 c0       	rjmp	.+16     	; 0x2354 <skip_spaces+0x26>
    2344:	0e 94 2f 14 	call	0x285e	; 0x285e <isspace>
    2348:	89 2b       	or	r24, r25
    234a:	b1 f7       	brne	.-20     	; 0x2338 <skip_spaces+0xa>
    234c:	ce 01       	movw	r24, r28
    234e:	b8 01       	movw	r22, r16
    2350:	0e 94 9a 14 	call	0x2934	; 0x2934 <ungetc>
    2354:	ce 01       	movw	r24, r28
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	08 95       	ret

00002360 <conv_int>:
    2360:	af 92       	push	r10
    2362:	bf 92       	push	r11
    2364:	cf 92       	push	r12
    2366:	df 92       	push	r13
    2368:	ef 92       	push	r14
    236a:	ff 92       	push	r15
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	ec 01       	movw	r28, r24
    2376:	c6 2e       	mov	r12, r22
    2378:	5a 01       	movw	r10, r20
    237a:	12 2f       	mov	r17, r18
    237c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <fgetc>
    2380:	ac 01       	movw	r20, r24
    2382:	8b 32       	cpi	r24, 0x2B	; 43
    2384:	19 f0       	breq	.+6      	; 0x238c <conv_int+0x2c>
    2386:	8d 32       	cpi	r24, 0x2D	; 45
    2388:	51 f4       	brne	.+20     	; 0x239e <conv_int+0x3e>
    238a:	10 68       	ori	r17, 0x80	; 128
    238c:	ca 94       	dec	r12
    238e:	09 f4       	brne	.+2      	; 0x2392 <conv_int+0x32>
    2390:	6d c0       	rjmp	.+218    	; 0x246c <conv_int+0x10c>
    2392:	ce 01       	movw	r24, r28
    2394:	0e 94 58 14 	call	0x28b0	; 0x28b0 <fgetc>
    2398:	ac 01       	movw	r20, r24
    239a:	97 fd       	sbrc	r25, 7
    239c:	67 c0       	rjmp	.+206    	; 0x246c <conv_int+0x10c>
    239e:	6d ef       	ldi	r22, 0xFD	; 253
    23a0:	d6 2e       	mov	r13, r22
    23a2:	d1 22       	and	r13, r17
    23a4:	8d 2d       	mov	r24, r13
    23a6:	80 73       	andi	r24, 0x30	; 48
    23a8:	01 f5       	brne	.+64     	; 0x23ea <conv_int+0x8a>
    23aa:	40 33       	cpi	r20, 0x30	; 48
    23ac:	f1 f4       	brne	.+60     	; 0x23ea <conv_int+0x8a>
    23ae:	ca 94       	dec	r12
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <conv_int+0x54>
    23b2:	47 c0       	rjmp	.+142    	; 0x2442 <conv_int+0xe2>
    23b4:	ce 01       	movw	r24, r28
    23b6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <fgetc>
    23ba:	ac 01       	movw	r20, r24
    23bc:	97 fd       	sbrc	r25, 7
    23be:	41 c0       	rjmp	.+130    	; 0x2442 <conv_int+0xe2>
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	d8 2a       	or	r13, r24
    23c4:	48 37       	cpi	r20, 0x78	; 120
    23c6:	11 f0       	breq	.+4      	; 0x23cc <conv_int+0x6c>
    23c8:	48 35       	cpi	r20, 0x58	; 88
    23ca:	59 f4       	brne	.+22     	; 0x23e2 <conv_int+0x82>
    23cc:	80 e4       	ldi	r24, 0x40	; 64
    23ce:	d8 2a       	or	r13, r24
    23d0:	ca 94       	dec	r12
    23d2:	b9 f1       	breq	.+110    	; 0x2442 <conv_int+0xe2>
    23d4:	ce 01       	movw	r24, r28
    23d6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <fgetc>
    23da:	ac 01       	movw	r20, r24
    23dc:	99 23       	and	r25, r25
    23de:	2c f4       	brge	.+10     	; 0x23ea <conv_int+0x8a>
    23e0:	30 c0       	rjmp	.+96     	; 0x2442 <conv_int+0xe2>
    23e2:	d6 fc       	sbrc	r13, 6
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <conv_int+0x8a>
    23e6:	80 e1       	ldi	r24, 0x10	; 16
    23e8:	d8 2a       	or	r13, r24
    23ea:	ee 24       	eor	r14, r14
    23ec:	ff 24       	eor	r15, r15
    23ee:	87 01       	movw	r16, r14
    23f0:	24 2f       	mov	r18, r20
    23f2:	20 53       	subi	r18, 0x30	; 48
    23f4:	28 30       	cpi	r18, 0x08	; 8
    23f6:	88 f0       	brcs	.+34     	; 0x241a <conv_int+0xba>
    23f8:	d4 fc       	sbrc	r13, 4
    23fa:	09 c0       	rjmp	.+18     	; 0x240e <conv_int+0xae>
    23fc:	2a 30       	cpi	r18, 0x0A	; 10
    23fe:	68 f0       	brcs	.+26     	; 0x241a <conv_int+0xba>
    2400:	d6 fe       	sbrs	r13, 6
    2402:	05 c0       	rjmp	.+10     	; 0x240e <conv_int+0xae>
    2404:	2f 7d       	andi	r18, 0xDF	; 223
    2406:	82 2f       	mov	r24, r18
    2408:	81 51       	subi	r24, 0x11	; 17
    240a:	86 30       	cpi	r24, 0x06	; 6
    240c:	28 f0       	brcs	.+10     	; 0x2418 <conv_int+0xb8>
    240e:	ca 01       	movw	r24, r20
    2410:	be 01       	movw	r22, r28
    2412:	0e 94 9a 14 	call	0x2934	; 0x2934 <ungetc>
    2416:	12 c0       	rjmp	.+36     	; 0x243c <conv_int+0xdc>
    2418:	27 50       	subi	r18, 0x07	; 7
    241a:	c8 01       	movw	r24, r16
    241c:	b7 01       	movw	r22, r14
    241e:	4d 2d       	mov	r20, r13
    2420:	0e 94 69 11 	call	0x22d2	; 0x22d2 <mulacc>
    2424:	7b 01       	movw	r14, r22
    2426:	8c 01       	movw	r16, r24
    2428:	82 e0       	ldi	r24, 0x02	; 2
    242a:	d8 2a       	or	r13, r24
    242c:	ca 94       	dec	r12
    242e:	61 f0       	breq	.+24     	; 0x2448 <conv_int+0xe8>
    2430:	ce 01       	movw	r24, r28
    2432:	0e 94 58 14 	call	0x28b0	; 0x28b0 <fgetc>
    2436:	ac 01       	movw	r20, r24
    2438:	97 ff       	sbrs	r25, 7
    243a:	da cf       	rjmp	.-76     	; 0x23f0 <conv_int+0x90>
    243c:	d1 fc       	sbrc	r13, 1
    243e:	04 c0       	rjmp	.+8      	; 0x2448 <conv_int+0xe8>
    2440:	15 c0       	rjmp	.+42     	; 0x246c <conv_int+0x10c>
    2442:	ee 24       	eor	r14, r14
    2444:	ff 24       	eor	r15, r15
    2446:	87 01       	movw	r16, r14
    2448:	d7 fe       	sbrs	r13, 7
    244a:	08 c0       	rjmp	.+16     	; 0x245c <conv_int+0xfc>
    244c:	10 95       	com	r17
    244e:	00 95       	com	r16
    2450:	f0 94       	com	r15
    2452:	e0 94       	com	r14
    2454:	e1 1c       	adc	r14, r1
    2456:	f1 1c       	adc	r15, r1
    2458:	01 1d       	adc	r16, r1
    245a:	11 1d       	adc	r17, r1
    245c:	c5 01       	movw	r24, r10
    245e:	b8 01       	movw	r22, r16
    2460:	a7 01       	movw	r20, r14
    2462:	2d 2d       	mov	r18, r13
    2464:	0e 94 5d 11 	call	0x22ba	; 0x22ba <putval>
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	01 c0       	rjmp	.+2      	; 0x246e <conv_int+0x10e>
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	1f 91       	pop	r17
    2474:	0f 91       	pop	r16
    2476:	ff 90       	pop	r15
    2478:	ef 90       	pop	r14
    247a:	df 90       	pop	r13
    247c:	cf 90       	pop	r12
    247e:	bf 90       	pop	r11
    2480:	af 90       	pop	r10
    2482:	08 95       	ret

00002484 <conv_brk>:
    2484:	6f 92       	push	r6
    2486:	7f 92       	push	r7
    2488:	8f 92       	push	r8
    248a:	9f 92       	push	r9
    248c:	af 92       	push	r10
    248e:	bf 92       	push	r11
    2490:	cf 92       	push	r12
    2492:	df 92       	push	r13
    2494:	ef 92       	push	r14
    2496:	ff 92       	push	r15
    2498:	0f 93       	push	r16
    249a:	1f 93       	push	r17
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	a0 97       	sbiw	r28, 0x20	; 32
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	6c 01       	movw	r12, r24
    24b2:	a6 2e       	mov	r10, r22
    24b4:	8a 01       	movw	r16, r20
    24b6:	79 01       	movw	r14, r18
    24b8:	fe 01       	movw	r30, r28
    24ba:	31 96       	adiw	r30, 0x01	; 1
    24bc:	80 e2       	ldi	r24, 0x20	; 32
    24be:	df 01       	movw	r26, r30
    24c0:	1d 92       	st	X+, r1
    24c2:	8a 95       	dec	r24
    24c4:	e9 f7       	brne	.-6      	; 0x24c0 <conv_brk+0x3c>
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	40 e0       	ldi	r20, 0x00	; 0
    24ce:	50 e0       	ldi	r21, 0x00	; 0
    24d0:	4f 01       	movw	r8, r30
    24d2:	a1 e0       	ldi	r26, 0x01	; 1
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	f6 01       	movw	r30, r12
    24d8:	83 81       	ldd	r24, Z+3	; 0x03
    24da:	f7 01       	movw	r30, r14
    24dc:	83 fd       	sbrc	r24, 3
    24de:	25 91       	lpm	r18, Z+
    24e0:	83 ff       	sbrs	r24, 3
    24e2:	21 91       	ld	r18, Z+
    24e4:	7f 01       	movw	r14, r30
    24e6:	22 23       	and	r18, r18
    24e8:	09 f4       	brne	.+2      	; 0x24ec <conv_brk+0x68>
    24ea:	7e c0       	rjmp	.+252    	; 0x25e8 <conv_brk+0x164>
    24ec:	2e 35       	cpi	r18, 0x5E	; 94
    24ee:	19 f4       	brne	.+6      	; 0x24f6 <conv_brk+0x72>
    24f0:	41 15       	cp	r20, r1
    24f2:	51 05       	cpc	r21, r1
    24f4:	69 f1       	breq	.+90     	; 0x2550 <conv_brk+0xcc>
    24f6:	87 2f       	mov	r24, r23
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	84 17       	cp	r24, r20
    24fc:	95 07       	cpc	r25, r21
    24fe:	44 f4       	brge	.+16     	; 0x2510 <conv_brk+0x8c>
    2500:	2d 35       	cpi	r18, 0x5D	; 93
    2502:	51 f1       	breq	.+84     	; 0x2558 <conv_brk+0xd4>
    2504:	2d 32       	cpi	r18, 0x2D	; 45
    2506:	21 f4       	brne	.+8      	; 0x2510 <conv_brk+0x8c>
    2508:	33 23       	and	r19, r19
    250a:	29 f4       	brne	.+10     	; 0x2516 <conv_brk+0x92>
    250c:	31 e0       	ldi	r19, 0x01	; 1
    250e:	21 c0       	rjmp	.+66     	; 0x2552 <conv_brk+0xce>
    2510:	33 23       	and	r19, r19
    2512:	09 f4       	brne	.+2      	; 0x2516 <conv_brk+0x92>
    2514:	62 2f       	mov	r22, r18
    2516:	32 2f       	mov	r19, r18
    2518:	83 2f       	mov	r24, r19
    251a:	86 95       	lsr	r24
    251c:	86 95       	lsr	r24
    251e:	86 95       	lsr	r24
    2520:	f4 01       	movw	r30, r8
    2522:	e8 0f       	add	r30, r24
    2524:	f1 1d       	adc	r31, r1
    2526:	83 2f       	mov	r24, r19
    2528:	87 70       	andi	r24, 0x07	; 7
    252a:	3d 01       	movw	r6, r26
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <conv_brk+0xae>
    252e:	66 0c       	add	r6, r6
    2530:	77 1c       	adc	r7, r7
    2532:	8a 95       	dec	r24
    2534:	e2 f7       	brpl	.-8      	; 0x252e <conv_brk+0xaa>
    2536:	20 81       	ld	r18, Z
    2538:	26 29       	or	r18, r6
    253a:	20 83       	st	Z, r18
    253c:	36 17       	cp	r19, r22
    253e:	11 f4       	brne	.+4      	; 0x2544 <conv_brk+0xc0>
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	07 c0       	rjmp	.+14     	; 0x2552 <conv_brk+0xce>
    2544:	36 17       	cp	r19, r22
    2546:	10 f4       	brcc	.+4      	; 0x254c <conv_brk+0xc8>
    2548:	3f 5f       	subi	r19, 0xFF	; 255
    254a:	e6 cf       	rjmp	.-52     	; 0x2518 <conv_brk+0x94>
    254c:	31 50       	subi	r19, 0x01	; 1
    254e:	e4 cf       	rjmp	.-56     	; 0x2518 <conv_brk+0x94>
    2550:	71 e0       	ldi	r23, 0x01	; 1
    2552:	4f 5f       	subi	r20, 0xFF	; 255
    2554:	5f 4f       	sbci	r21, 0xFF	; 255
    2556:	bf cf       	rjmp	.-130    	; 0x24d6 <conv_brk+0x52>
    2558:	33 23       	and	r19, r19
    255a:	19 f0       	breq	.+6      	; 0x2562 <conv_brk+0xde>
    255c:	8e 81       	ldd	r24, Y+6	; 0x06
    255e:	80 62       	ori	r24, 0x20	; 32
    2560:	8e 83       	std	Y+6, r24	; 0x06
    2562:	77 23       	and	r23, r23
    2564:	59 f0       	breq	.+22     	; 0x257c <conv_brk+0xf8>
    2566:	fe 01       	movw	r30, r28
    2568:	31 96       	adiw	r30, 0x01	; 1
    256a:	9e 01       	movw	r18, r28
    256c:	2f 5d       	subi	r18, 0xDF	; 223
    256e:	3f 4f       	sbci	r19, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	80 95       	com	r24
    2574:	81 93       	st	Z+, r24
    2576:	e2 17       	cp	r30, r18
    2578:	f3 07       	cpc	r31, r19
    257a:	d1 f7       	brne	.-12     	; 0x2570 <conv_brk+0xec>
    257c:	bb 24       	eor	r11, r11
    257e:	b3 94       	inc	r11
    2580:	4e 01       	movw	r8, r28
    2582:	08 94       	sec
    2584:	81 1c       	adc	r8, r1
    2586:	91 1c       	adc	r9, r1
    2588:	c6 01       	movw	r24, r12
    258a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <fgetc>
    258e:	ac 01       	movw	r20, r24
    2590:	97 fd       	sbrc	r25, 7
    2592:	22 c0       	rjmp	.+68     	; 0x25d8 <conv_brk+0x154>
    2594:	86 95       	lsr	r24
    2596:	86 95       	lsr	r24
    2598:	86 95       	lsr	r24
    259a:	f4 01       	movw	r30, r8
    259c:	e8 0f       	add	r30, r24
    259e:	f1 1d       	adc	r31, r1
    25a0:	80 81       	ld	r24, Z
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9a 01       	movw	r18, r20
    25a6:	27 70       	andi	r18, 0x07	; 7
    25a8:	30 70       	andi	r19, 0x00	; 0
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <conv_brk+0x12c>
    25ac:	95 95       	asr	r25
    25ae:	87 95       	ror	r24
    25b0:	2a 95       	dec	r18
    25b2:	e2 f7       	brpl	.-8      	; 0x25ac <conv_brk+0x128>
    25b4:	80 fd       	sbrc	r24, 0
    25b6:	05 c0       	rjmp	.+10     	; 0x25c2 <conv_brk+0x13e>
    25b8:	ca 01       	movw	r24, r20
    25ba:	b6 01       	movw	r22, r12
    25bc:	0e 94 9a 14 	call	0x2934	; 0x2934 <ungetc>
    25c0:	0b c0       	rjmp	.+22     	; 0x25d8 <conv_brk+0x154>
    25c2:	01 15       	cp	r16, r1
    25c4:	11 05       	cpc	r17, r1
    25c6:	19 f0       	breq	.+6      	; 0x25ce <conv_brk+0x14a>
    25c8:	d8 01       	movw	r26, r16
    25ca:	4d 93       	st	X+, r20
    25cc:	8d 01       	movw	r16, r26
    25ce:	aa 94       	dec	r10
    25d0:	bb 24       	eor	r11, r11
    25d2:	aa 20       	and	r10, r10
    25d4:	c9 f6       	brne	.-78     	; 0x2588 <conv_brk+0x104>
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <conv_brk+0x158>
    25d8:	bb 20       	and	r11, r11
    25da:	31 f4       	brne	.+12     	; 0x25e8 <conv_brk+0x164>
    25dc:	01 15       	cp	r16, r1
    25de:	11 05       	cpc	r17, r1
    25e0:	29 f0       	breq	.+10     	; 0x25ec <conv_brk+0x168>
    25e2:	f8 01       	movw	r30, r16
    25e4:	10 82       	st	Z, r1
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <conv_brk+0x168>
    25e8:	ee 24       	eor	r14, r14
    25ea:	ff 24       	eor	r15, r15
    25ec:	c7 01       	movw	r24, r14
    25ee:	a0 96       	adiw	r28, 0x20	; 32
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	df 90       	pop	r13
    2608:	cf 90       	pop	r12
    260a:	bf 90       	pop	r11
    260c:	af 90       	pop	r10
    260e:	9f 90       	pop	r9
    2610:	8f 90       	pop	r8
    2612:	7f 90       	pop	r7
    2614:	6f 90       	pop	r6
    2616:	08 95       	ret

00002618 <vfscanf>:
    2618:	6f 92       	push	r6
    261a:	7f 92       	push	r7
    261c:	8f 92       	push	r8
    261e:	9f 92       	push	r9
    2620:	af 92       	push	r10
    2622:	bf 92       	push	r11
    2624:	cf 92       	push	r12
    2626:	df 92       	push	r13
    2628:	ef 92       	push	r14
    262a:	ff 92       	push	r15
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	5c 01       	movw	r10, r24
    2636:	6b 01       	movw	r12, r22
    2638:	3a 01       	movw	r6, r20
    263a:	fc 01       	movw	r30, r24
    263c:	17 82       	std	Z+7, r1	; 0x07
    263e:	16 82       	std	Z+6, r1	; 0x06
    2640:	88 24       	eor	r8, r8
    2642:	ea c0       	rjmp	.+468    	; 0x2818 <vfscanf+0x200>
    2644:	81 2f       	mov	r24, r17
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	0e 94 2f 14 	call	0x285e	; 0x285e <isspace>
    264c:	89 2b       	or	r24, r25
    264e:	21 f0       	breq	.+8      	; 0x2658 <vfscanf+0x40>
    2650:	c5 01       	movw	r24, r10
    2652:	0e 94 97 11 	call	0x232e	; 0x232e <skip_spaces>
    2656:	e0 c0       	rjmp	.+448    	; 0x2818 <vfscanf+0x200>
    2658:	15 32       	cpi	r17, 0x25	; 37
    265a:	49 f4       	brne	.+18     	; 0x266e <vfscanf+0x56>
    265c:	f6 01       	movw	r30, r12
    265e:	f3 fc       	sbrc	r15, 3
    2660:	65 91       	lpm	r22, Z+
    2662:	f3 fe       	sbrs	r15, 3
    2664:	61 91       	ld	r22, Z+
    2666:	6f 01       	movw	r12, r30
    2668:	65 32       	cpi	r22, 0x25	; 37
    266a:	69 f4       	brne	.+26     	; 0x2686 <vfscanf+0x6e>
    266c:	15 e2       	ldi	r17, 0x25	; 37
    266e:	c5 01       	movw	r24, r10
    2670:	0e 94 58 14 	call	0x28b0	; 0x28b0 <fgetc>
    2674:	97 fd       	sbrc	r25, 7
    2676:	dc c0       	rjmp	.+440    	; 0x2830 <vfscanf+0x218>
    2678:	18 17       	cp	r17, r24
    267a:	09 f4       	brne	.+2      	; 0x267e <vfscanf+0x66>
    267c:	cd c0       	rjmp	.+410    	; 0x2818 <vfscanf+0x200>
    267e:	b5 01       	movw	r22, r10
    2680:	0e 94 9a 14 	call	0x2934	; 0x2934 <ungetc>
    2684:	da c0       	rjmp	.+436    	; 0x283a <vfscanf+0x222>
    2686:	6a 32       	cpi	r22, 0x2A	; 42
    2688:	19 f0       	breq	.+6      	; 0x2690 <vfscanf+0x78>
    268a:	16 2f       	mov	r17, r22
    268c:	00 e0       	ldi	r16, 0x00	; 0
    268e:	06 c0       	rjmp	.+12     	; 0x269c <vfscanf+0x84>
    2690:	f3 fc       	sbrc	r15, 3
    2692:	15 91       	lpm	r17, Z+
    2694:	f3 fe       	sbrs	r15, 3
    2696:	11 91       	ld	r17, Z+
    2698:	6f 01       	movw	r12, r30
    269a:	01 e0       	ldi	r16, 0x01	; 1
    269c:	99 24       	eor	r9, r9
    269e:	0f c0       	rjmp	.+30     	; 0x26be <vfscanf+0xa6>
    26a0:	02 60       	ori	r16, 0x02	; 2
    26a2:	69 2d       	mov	r22, r9
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	40 e2       	ldi	r20, 0x20	; 32
    26ac:	0e 94 69 11 	call	0x22d2	; 0x22d2 <mulacc>
    26b0:	96 2e       	mov	r9, r22
    26b2:	f6 01       	movw	r30, r12
    26b4:	f3 fc       	sbrc	r15, 3
    26b6:	15 91       	lpm	r17, Z+
    26b8:	f3 fe       	sbrs	r15, 3
    26ba:	11 91       	ld	r17, Z+
    26bc:	6f 01       	movw	r12, r30
    26be:	21 2f       	mov	r18, r17
    26c0:	20 53       	subi	r18, 0x30	; 48
    26c2:	2a 30       	cpi	r18, 0x0A	; 10
    26c4:	68 f3       	brcs	.-38     	; 0x26a0 <vfscanf+0x88>
    26c6:	01 fd       	sbrc	r16, 1
    26c8:	03 c0       	rjmp	.+6      	; 0x26d0 <vfscanf+0xb8>
    26ca:	99 24       	eor	r9, r9
    26cc:	9a 94       	dec	r9
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <vfscanf+0xbe>
    26d0:	99 20       	and	r9, r9
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <vfscanf+0xbe>
    26d4:	b2 c0       	rjmp	.+356    	; 0x283a <vfscanf+0x222>
    26d6:	18 36       	cpi	r17, 0x68	; 104
    26d8:	21 f0       	breq	.+8      	; 0x26e2 <vfscanf+0xca>
    26da:	1c 36       	cpi	r17, 0x6C	; 108
    26dc:	99 f4       	brne	.+38     	; 0x2704 <vfscanf+0xec>
    26de:	f6 01       	movw	r30, r12
    26e0:	0b c0       	rjmp	.+22     	; 0x26f8 <vfscanf+0xe0>
    26e2:	f6 01       	movw	r30, r12
    26e4:	f3 fc       	sbrc	r15, 3
    26e6:	65 91       	lpm	r22, Z+
    26e8:	f3 fe       	sbrs	r15, 3
    26ea:	61 91       	ld	r22, Z+
    26ec:	68 36       	cpi	r22, 0x68	; 104
    26ee:	19 f0       	breq	.+6      	; 0x26f6 <vfscanf+0xde>
    26f0:	6f 01       	movw	r12, r30
    26f2:	16 2f       	mov	r17, r22
    26f4:	07 c0       	rjmp	.+14     	; 0x2704 <vfscanf+0xec>
    26f6:	08 60       	ori	r16, 0x08	; 8
    26f8:	04 60       	ori	r16, 0x04	; 4
    26fa:	f3 fc       	sbrc	r15, 3
    26fc:	15 91       	lpm	r17, Z+
    26fe:	f3 fe       	sbrs	r15, 3
    2700:	11 91       	ld	r17, Z+
    2702:	6f 01       	movw	r12, r30
    2704:	11 23       	and	r17, r17
    2706:	09 f4       	brne	.+2      	; 0x270a <vfscanf+0xf2>
    2708:	98 c0       	rjmp	.+304    	; 0x283a <vfscanf+0x222>
    270a:	80 ee       	ldi	r24, 0xE0	; 224
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	61 2f       	mov	r22, r17
    2710:	70 e0       	ldi	r23, 0x00	; 0
    2712:	0e 94 37 14 	call	0x286e	; 0x286e <strchr_P>
    2716:	89 2b       	or	r24, r25
    2718:	09 f4       	brne	.+2      	; 0x271c <vfscanf+0x104>
    271a:	8f c0       	rjmp	.+286    	; 0x283a <vfscanf+0x222>
    271c:	80 2f       	mov	r24, r16
    271e:	00 ff       	sbrs	r16, 0
    2720:	03 c0       	rjmp	.+6      	; 0x2728 <vfscanf+0x110>
    2722:	ee 24       	eor	r14, r14
    2724:	ff 24       	eor	r15, r15
    2726:	07 c0       	rjmp	.+14     	; 0x2736 <vfscanf+0x11e>
    2728:	f3 01       	movw	r30, r6
    272a:	e0 80       	ld	r14, Z
    272c:	f1 80       	ldd	r15, Z+1	; 0x01
    272e:	22 e0       	ldi	r18, 0x02	; 2
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	62 0e       	add	r6, r18
    2734:	73 1e       	adc	r7, r19
    2736:	1e 36       	cpi	r17, 0x6E	; 110
    2738:	51 f4       	brne	.+20     	; 0x274e <vfscanf+0x136>
    273a:	f5 01       	movw	r30, r10
    273c:	46 81       	ldd	r20, Z+6	; 0x06
    273e:	57 81       	ldd	r21, Z+7	; 0x07
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	c7 01       	movw	r24, r14
    2746:	20 2f       	mov	r18, r16
    2748:	0e 94 5d 11 	call	0x22ba	; 0x22ba <putval>
    274c:	65 c0       	rjmp	.+202    	; 0x2818 <vfscanf+0x200>
    274e:	13 36       	cpi	r17, 0x63	; 99
    2750:	91 f4       	brne	.+36     	; 0x2776 <vfscanf+0x15e>
    2752:	81 fd       	sbrc	r24, 1
    2754:	02 c0       	rjmp	.+4      	; 0x275a <vfscanf+0x142>
    2756:	99 24       	eor	r9, r9
    2758:	93 94       	inc	r9
    275a:	c5 01       	movw	r24, r10
    275c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <fgetc>
    2760:	97 fd       	sbrc	r25, 7
    2762:	66 c0       	rjmp	.+204    	; 0x2830 <vfscanf+0x218>
    2764:	e1 14       	cp	r14, r1
    2766:	f1 04       	cpc	r15, r1
    2768:	19 f0       	breq	.+6      	; 0x2770 <vfscanf+0x158>
    276a:	f7 01       	movw	r30, r14
    276c:	81 93       	st	Z+, r24
    276e:	7f 01       	movw	r14, r30
    2770:	9a 94       	dec	r9
    2772:	99 f7       	brne	.-26     	; 0x275a <vfscanf+0x142>
    2774:	4f c0       	rjmp	.+158    	; 0x2814 <vfscanf+0x1fc>
    2776:	1b 35       	cpi	r17, 0x5B	; 91
    2778:	59 f4       	brne	.+22     	; 0x2790 <vfscanf+0x178>
    277a:	c5 01       	movw	r24, r10
    277c:	69 2d       	mov	r22, r9
    277e:	a7 01       	movw	r20, r14
    2780:	96 01       	movw	r18, r12
    2782:	0e 94 42 12 	call	0x2484	; 0x2484 <conv_brk>
    2786:	6c 01       	movw	r12, r24
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	09 f0       	breq	.+2      	; 0x278e <vfscanf+0x176>
    278c:	43 c0       	rjmp	.+134    	; 0x2814 <vfscanf+0x1fc>
    278e:	3d c0       	rjmp	.+122    	; 0x280a <vfscanf+0x1f2>
    2790:	c5 01       	movw	r24, r10
    2792:	0e 94 97 11 	call	0x232e	; 0x232e <skip_spaces>
    2796:	97 fd       	sbrc	r25, 7
    2798:	4b c0       	rjmp	.+150    	; 0x2830 <vfscanf+0x218>
    279a:	1f 36       	cpi	r17, 0x6F	; 111
    279c:	59 f1       	breq	.+86     	; 0x27f4 <vfscanf+0x1dc>
    279e:	10 37       	cpi	r17, 0x70	; 112
    27a0:	28 f4       	brcc	.+10     	; 0x27ac <vfscanf+0x194>
    27a2:	14 36       	cpi	r17, 0x64	; 100
    27a4:	29 f1       	breq	.+74     	; 0x27f0 <vfscanf+0x1d8>
    27a6:	19 36       	cpi	r17, 0x69	; 105
    27a8:	39 f5       	brne	.+78     	; 0x27f8 <vfscanf+0x1e0>
    27aa:	27 c0       	rjmp	.+78     	; 0x27fa <vfscanf+0x1e2>
    27ac:	13 37       	cpi	r17, 0x73	; 115
    27ae:	19 f0       	breq	.+6      	; 0x27b6 <vfscanf+0x19e>
    27b0:	15 37       	cpi	r17, 0x75	; 117
    27b2:	11 f5       	brne	.+68     	; 0x27f8 <vfscanf+0x1e0>
    27b4:	1d c0       	rjmp	.+58     	; 0x27f0 <vfscanf+0x1d8>
    27b6:	c5 01       	movw	r24, r10
    27b8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <fgetc>
    27bc:	ec 01       	movw	r28, r24
    27be:	97 fd       	sbrc	r25, 7
    27c0:	11 c0       	rjmp	.+34     	; 0x27e4 <vfscanf+0x1cc>
    27c2:	0e 94 2f 14 	call	0x285e	; 0x285e <isspace>
    27c6:	89 2b       	or	r24, r25
    27c8:	29 f0       	breq	.+10     	; 0x27d4 <vfscanf+0x1bc>
    27ca:	ce 01       	movw	r24, r28
    27cc:	b5 01       	movw	r22, r10
    27ce:	0e 94 9a 14 	call	0x2934	; 0x2934 <ungetc>
    27d2:	08 c0       	rjmp	.+16     	; 0x27e4 <vfscanf+0x1cc>
    27d4:	e1 14       	cp	r14, r1
    27d6:	f1 04       	cpc	r15, r1
    27d8:	19 f0       	breq	.+6      	; 0x27e0 <vfscanf+0x1c8>
    27da:	f7 01       	movw	r30, r14
    27dc:	c1 93       	st	Z+, r28
    27de:	7f 01       	movw	r14, r30
    27e0:	9a 94       	dec	r9
    27e2:	49 f7       	brne	.-46     	; 0x27b6 <vfscanf+0x19e>
    27e4:	e1 14       	cp	r14, r1
    27e6:	f1 04       	cpc	r15, r1
    27e8:	a9 f0       	breq	.+42     	; 0x2814 <vfscanf+0x1fc>
    27ea:	f7 01       	movw	r30, r14
    27ec:	10 82       	st	Z, r1
    27ee:	12 c0       	rjmp	.+36     	; 0x2814 <vfscanf+0x1fc>
    27f0:	00 62       	ori	r16, 0x20	; 32
    27f2:	03 c0       	rjmp	.+6      	; 0x27fa <vfscanf+0x1e2>
    27f4:	00 61       	ori	r16, 0x10	; 16
    27f6:	01 c0       	rjmp	.+2      	; 0x27fa <vfscanf+0x1e2>
    27f8:	00 64       	ori	r16, 0x40	; 64
    27fa:	c5 01       	movw	r24, r10
    27fc:	69 2d       	mov	r22, r9
    27fe:	a7 01       	movw	r20, r14
    2800:	20 2f       	mov	r18, r16
    2802:	0e 94 b0 11 	call	0x2360	; 0x2360 <conv_int>
    2806:	88 23       	and	r24, r24
    2808:	29 f4       	brne	.+10     	; 0x2814 <vfscanf+0x1fc>
    280a:	f5 01       	movw	r30, r10
    280c:	83 81       	ldd	r24, Z+3	; 0x03
    280e:	80 73       	andi	r24, 0x30	; 48
    2810:	79 f4       	brne	.+30     	; 0x2830 <vfscanf+0x218>
    2812:	13 c0       	rjmp	.+38     	; 0x283a <vfscanf+0x222>
    2814:	00 ff       	sbrs	r16, 0
    2816:	83 94       	inc	r8
    2818:	f5 01       	movw	r30, r10
    281a:	f3 80       	ldd	r15, Z+3	; 0x03
    281c:	f6 01       	movw	r30, r12
    281e:	f3 fc       	sbrc	r15, 3
    2820:	15 91       	lpm	r17, Z+
    2822:	f3 fe       	sbrs	r15, 3
    2824:	11 91       	ld	r17, Z+
    2826:	6f 01       	movw	r12, r30
    2828:	11 23       	and	r17, r17
    282a:	09 f0       	breq	.+2      	; 0x282e <vfscanf+0x216>
    282c:	0b cf       	rjmp	.-490    	; 0x2644 <vfscanf+0x2c>
    282e:	05 c0       	rjmp	.+10     	; 0x283a <vfscanf+0x222>
    2830:	88 20       	and	r8, r8
    2832:	19 f4       	brne	.+6      	; 0x283a <vfscanf+0x222>
    2834:	2f ef       	ldi	r18, 0xFF	; 255
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	02 c0       	rjmp	.+4      	; 0x283e <vfscanf+0x226>
    283a:	28 2d       	mov	r18, r8
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	c9 01       	movw	r24, r18
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	1f 91       	pop	r17
    2846:	0f 91       	pop	r16
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	df 90       	pop	r13
    284e:	cf 90       	pop	r12
    2850:	bf 90       	pop	r11
    2852:	af 90       	pop	r10
    2854:	9f 90       	pop	r9
    2856:	8f 90       	pop	r8
    2858:	7f 90       	pop	r7
    285a:	6f 90       	pop	r6
    285c:	08 95       	ret

0000285e <isspace>:
    285e:	91 11       	cpse	r25, r1
    2860:	e1 c0       	rjmp	.+450    	; 0x2a24 <__ctype_isfalse>
    2862:	80 32       	cpi	r24, 0x20	; 32
    2864:	19 f0       	breq	.+6      	; 0x286c <isspace+0xe>
    2866:	89 50       	subi	r24, 0x09	; 9
    2868:	85 50       	subi	r24, 0x05	; 5
    286a:	d0 f7       	brcc	.-12     	; 0x2860 <isspace+0x2>
    286c:	08 95       	ret

0000286e <strchr_P>:
    286e:	fc 01       	movw	r30, r24
    2870:	05 90       	lpm	r0, Z+
    2872:	06 16       	cp	r0, r22
    2874:	21 f0       	breq	.+8      	; 0x287e <strchr_P+0x10>
    2876:	00 20       	and	r0, r0
    2878:	d9 f7       	brne	.-10     	; 0x2870 <strchr_P+0x2>
    287a:	c0 01       	movw	r24, r0
    287c:	08 95       	ret
    287e:	31 97       	sbiw	r30, 0x01	; 1
    2880:	cf 01       	movw	r24, r30
    2882:	08 95       	ret

00002884 <strnlen_P>:
    2884:	fc 01       	movw	r30, r24
    2886:	05 90       	lpm	r0, Z+
    2888:	61 50       	subi	r22, 0x01	; 1
    288a:	70 40       	sbci	r23, 0x00	; 0
    288c:	01 10       	cpse	r0, r1
    288e:	d8 f7       	brcc	.-10     	; 0x2886 <strnlen_P+0x2>
    2890:	80 95       	com	r24
    2892:	90 95       	com	r25
    2894:	8e 0f       	add	r24, r30
    2896:	9f 1f       	adc	r25, r31
    2898:	08 95       	ret

0000289a <strnlen>:
    289a:	fc 01       	movw	r30, r24
    289c:	61 50       	subi	r22, 0x01	; 1
    289e:	70 40       	sbci	r23, 0x00	; 0
    28a0:	01 90       	ld	r0, Z+
    28a2:	01 10       	cpse	r0, r1
    28a4:	d8 f7       	brcc	.-10     	; 0x289c <strnlen+0x2>
    28a6:	80 95       	com	r24
    28a8:	90 95       	com	r25
    28aa:	8e 0f       	add	r24, r30
    28ac:	9f 1f       	adc	r25, r31
    28ae:	08 95       	ret

000028b0 <fgetc>:
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	ec 01       	movw	r28, r24
    28b6:	4b 81       	ldd	r20, Y+3	; 0x03
    28b8:	40 ff       	sbrs	r20, 0
    28ba:	1a c0       	rjmp	.+52     	; 0x28f0 <fgetc+0x40>
    28bc:	46 ff       	sbrs	r20, 6
    28be:	0a c0       	rjmp	.+20     	; 0x28d4 <fgetc+0x24>
    28c0:	4f 7b       	andi	r20, 0xBF	; 191
    28c2:	4b 83       	std	Y+3, r20	; 0x03
    28c4:	8e 81       	ldd	r24, Y+6	; 0x06
    28c6:	9f 81       	ldd	r25, Y+7	; 0x07
    28c8:	01 96       	adiw	r24, 0x01	; 1
    28ca:	9f 83       	std	Y+7, r25	; 0x07
    28cc:	8e 83       	std	Y+6, r24	; 0x06
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	28 2f       	mov	r18, r24
    28d2:	2b c0       	rjmp	.+86     	; 0x292a <fgetc+0x7a>
    28d4:	42 ff       	sbrs	r20, 2
    28d6:	13 c0       	rjmp	.+38     	; 0x28fe <fgetc+0x4e>
    28d8:	e8 81       	ld	r30, Y
    28da:	f9 81       	ldd	r31, Y+1	; 0x01
    28dc:	80 81       	ld	r24, Z
    28de:	28 2f       	mov	r18, r24
    28e0:	33 27       	eor	r19, r19
    28e2:	27 fd       	sbrc	r18, 7
    28e4:	30 95       	com	r19
    28e6:	21 15       	cp	r18, r1
    28e8:	31 05       	cpc	r19, r1
    28ea:	29 f4       	brne	.+10     	; 0x28f6 <fgetc+0x46>
    28ec:	40 62       	ori	r20, 0x20	; 32
    28ee:	4b 83       	std	Y+3, r20	; 0x03
    28f0:	2f ef       	ldi	r18, 0xFF	; 255
    28f2:	3f ef       	ldi	r19, 0xFF	; 255
    28f4:	1b c0       	rjmp	.+54     	; 0x292c <fgetc+0x7c>
    28f6:	31 96       	adiw	r30, 0x01	; 1
    28f8:	f9 83       	std	Y+1, r31	; 0x01
    28fa:	e8 83       	st	Y, r30
    28fc:	11 c0       	rjmp	.+34     	; 0x2920 <fgetc+0x70>
    28fe:	ea 85       	ldd	r30, Y+10	; 0x0a
    2900:	fb 85       	ldd	r31, Y+11	; 0x0b
    2902:	ce 01       	movw	r24, r28
    2904:	09 95       	icall
    2906:	9c 01       	movw	r18, r24
    2908:	97 ff       	sbrs	r25, 7
    290a:	0a c0       	rjmp	.+20     	; 0x2920 <fgetc+0x70>
    290c:	9b 81       	ldd	r25, Y+3	; 0x03
    290e:	2f 5f       	subi	r18, 0xFF	; 255
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	11 f0       	breq	.+4      	; 0x2918 <fgetc+0x68>
    2914:	80 e2       	ldi	r24, 0x20	; 32
    2916:	01 c0       	rjmp	.+2      	; 0x291a <fgetc+0x6a>
    2918:	80 e1       	ldi	r24, 0x10	; 16
    291a:	89 2b       	or	r24, r25
    291c:	8b 83       	std	Y+3, r24	; 0x03
    291e:	e8 cf       	rjmp	.-48     	; 0x28f0 <fgetc+0x40>
    2920:	8e 81       	ldd	r24, Y+6	; 0x06
    2922:	9f 81       	ldd	r25, Y+7	; 0x07
    2924:	01 96       	adiw	r24, 0x01	; 1
    2926:	9f 83       	std	Y+7, r25	; 0x07
    2928:	8e 83       	std	Y+6, r24	; 0x06
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	c9 01       	movw	r24, r18
    292e:	df 91       	pop	r29
    2930:	cf 91       	pop	r28
    2932:	08 95       	ret

00002934 <ungetc>:
    2934:	9c 01       	movw	r18, r24
    2936:	fb 01       	movw	r30, r22
    2938:	83 81       	ldd	r24, Z+3	; 0x03
    293a:	80 ff       	sbrs	r24, 0
    293c:	11 c0       	rjmp	.+34     	; 0x2960 <ungetc+0x2c>
    293e:	86 fd       	sbrc	r24, 6
    2940:	0f c0       	rjmp	.+30     	; 0x2960 <ungetc+0x2c>
    2942:	9f ef       	ldi	r25, 0xFF	; 255
    2944:	2f 3f       	cpi	r18, 0xFF	; 255
    2946:	39 07       	cpc	r19, r25
    2948:	59 f0       	breq	.+22     	; 0x2960 <ungetc+0x2c>
    294a:	22 83       	std	Z+2, r18	; 0x02
    294c:	80 64       	ori	r24, 0x40	; 64
    294e:	8f 7d       	andi	r24, 0xDF	; 223
    2950:	83 83       	std	Z+3, r24	; 0x03
    2952:	86 81       	ldd	r24, Z+6	; 0x06
    2954:	97 81       	ldd	r25, Z+7	; 0x07
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	97 83       	std	Z+7, r25	; 0x07
    295a:	86 83       	std	Z+6, r24	; 0x06
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <ungetc+0x30>
    2960:	2f ef       	ldi	r18, 0xFF	; 255
    2962:	3f ef       	ldi	r19, 0xFF	; 255
    2964:	c9 01       	movw	r24, r18
    2966:	08 95       	ret

00002968 <__ultoa_invert>:
    2968:	fa 01       	movw	r30, r20
    296a:	aa 27       	eor	r26, r26
    296c:	28 30       	cpi	r18, 0x08	; 8
    296e:	51 f1       	breq	.+84     	; 0x29c4 <__ultoa_invert+0x5c>
    2970:	20 31       	cpi	r18, 0x10	; 16
    2972:	81 f1       	breq	.+96     	; 0x29d4 <__ultoa_invert+0x6c>
    2974:	e8 94       	clt
    2976:	6f 93       	push	r22
    2978:	6e 7f       	andi	r22, 0xFE	; 254
    297a:	6e 5f       	subi	r22, 0xFE	; 254
    297c:	7f 4f       	sbci	r23, 0xFF	; 255
    297e:	8f 4f       	sbci	r24, 0xFF	; 255
    2980:	9f 4f       	sbci	r25, 0xFF	; 255
    2982:	af 4f       	sbci	r26, 0xFF	; 255
    2984:	b1 e0       	ldi	r27, 0x01	; 1
    2986:	3e d0       	rcall	.+124    	; 0x2a04 <__ultoa_invert+0x9c>
    2988:	b4 e0       	ldi	r27, 0x04	; 4
    298a:	3c d0       	rcall	.+120    	; 0x2a04 <__ultoa_invert+0x9c>
    298c:	67 0f       	add	r22, r23
    298e:	78 1f       	adc	r23, r24
    2990:	89 1f       	adc	r24, r25
    2992:	9a 1f       	adc	r25, r26
    2994:	a1 1d       	adc	r26, r1
    2996:	68 0f       	add	r22, r24
    2998:	79 1f       	adc	r23, r25
    299a:	8a 1f       	adc	r24, r26
    299c:	91 1d       	adc	r25, r1
    299e:	a1 1d       	adc	r26, r1
    29a0:	6a 0f       	add	r22, r26
    29a2:	71 1d       	adc	r23, r1
    29a4:	81 1d       	adc	r24, r1
    29a6:	91 1d       	adc	r25, r1
    29a8:	a1 1d       	adc	r26, r1
    29aa:	20 d0       	rcall	.+64     	; 0x29ec <__ultoa_invert+0x84>
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <__ultoa_invert+0x48>
    29ae:	68 94       	set
    29b0:	3f 91       	pop	r19
    29b2:	2a e0       	ldi	r18, 0x0A	; 10
    29b4:	26 9f       	mul	r18, r22
    29b6:	11 24       	eor	r1, r1
    29b8:	30 19       	sub	r19, r0
    29ba:	30 5d       	subi	r19, 0xD0	; 208
    29bc:	31 93       	st	Z+, r19
    29be:	de f6       	brtc	.-74     	; 0x2976 <__ultoa_invert+0xe>
    29c0:	cf 01       	movw	r24, r30
    29c2:	08 95       	ret
    29c4:	46 2f       	mov	r20, r22
    29c6:	47 70       	andi	r20, 0x07	; 7
    29c8:	40 5d       	subi	r20, 0xD0	; 208
    29ca:	41 93       	st	Z+, r20
    29cc:	b3 e0       	ldi	r27, 0x03	; 3
    29ce:	0f d0       	rcall	.+30     	; 0x29ee <__ultoa_invert+0x86>
    29d0:	c9 f7       	brne	.-14     	; 0x29c4 <__ultoa_invert+0x5c>
    29d2:	f6 cf       	rjmp	.-20     	; 0x29c0 <__ultoa_invert+0x58>
    29d4:	46 2f       	mov	r20, r22
    29d6:	4f 70       	andi	r20, 0x0F	; 15
    29d8:	40 5d       	subi	r20, 0xD0	; 208
    29da:	4a 33       	cpi	r20, 0x3A	; 58
    29dc:	18 f0       	brcs	.+6      	; 0x29e4 <__ultoa_invert+0x7c>
    29de:	49 5d       	subi	r20, 0xD9	; 217
    29e0:	31 fd       	sbrc	r19, 1
    29e2:	40 52       	subi	r20, 0x20	; 32
    29e4:	41 93       	st	Z+, r20
    29e6:	02 d0       	rcall	.+4      	; 0x29ec <__ultoa_invert+0x84>
    29e8:	a9 f7       	brne	.-22     	; 0x29d4 <__ultoa_invert+0x6c>
    29ea:	ea cf       	rjmp	.-44     	; 0x29c0 <__ultoa_invert+0x58>
    29ec:	b4 e0       	ldi	r27, 0x04	; 4
    29ee:	a6 95       	lsr	r26
    29f0:	97 95       	ror	r25
    29f2:	87 95       	ror	r24
    29f4:	77 95       	ror	r23
    29f6:	67 95       	ror	r22
    29f8:	ba 95       	dec	r27
    29fa:	c9 f7       	brne	.-14     	; 0x29ee <__ultoa_invert+0x86>
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	61 05       	cpc	r22, r1
    2a00:	71 05       	cpc	r23, r1
    2a02:	08 95       	ret
    2a04:	9b 01       	movw	r18, r22
    2a06:	ac 01       	movw	r20, r24
    2a08:	0a 2e       	mov	r0, r26
    2a0a:	06 94       	lsr	r0
    2a0c:	57 95       	ror	r21
    2a0e:	47 95       	ror	r20
    2a10:	37 95       	ror	r19
    2a12:	27 95       	ror	r18
    2a14:	ba 95       	dec	r27
    2a16:	c9 f7       	brne	.-14     	; 0x2a0a <__ultoa_invert+0xa2>
    2a18:	62 0f       	add	r22, r18
    2a1a:	73 1f       	adc	r23, r19
    2a1c:	84 1f       	adc	r24, r20
    2a1e:	95 1f       	adc	r25, r21
    2a20:	a0 1d       	adc	r26, r0
    2a22:	08 95       	ret

00002a24 <__ctype_isfalse>:
    2a24:	99 27       	eor	r25, r25
    2a26:	88 27       	eor	r24, r24

00002a28 <__ctype_istrue>:
    2a28:	08 95       	ret

00002a2a <_exit>:
    2a2a:	f8 94       	cli

00002a2c <__stop_program>:
    2a2c:	ff cf       	rjmp	.-2      	; 0x2a2c <__stop_program>
