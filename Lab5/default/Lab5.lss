
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000232  00800100  000026fc  00002790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018f  00800332  00800332  000029c2  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  000029c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000049a  00000000  00000000  00002aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022e5  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d46  00000000  00000000  00005221  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001891  00000000  00000000  00005f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  000077f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006cb  00000000  00000000  00007ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001015  00000000  00000000  00008273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_13>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__vector_16>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__vector_20>
      54:	0c 94 88 03 	jmp	0x710	; 0x710 <__vector_21>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_line1>:
      cc:	43 75 72 72 65 6e 74 3a 00 00                       Current:..

000000d6 <LCD_line2>:
      d6:	44 65 73 69 72 65 64 3a 00 00                       Desired:..

000000e0 <__c.1988>:
      e0:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d0 e4       	ldi	r29, 0x40	; 64
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	13 e0       	ldi	r17, 0x03	; 3
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	ec ef       	ldi	r30, 0xFC	; 252
     100:	f6 e2       	ldi	r31, 0x26	; 38
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a2 33       	cpi	r26, 0x32	; 50
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	14 e0       	ldi	r17, 0x04	; 4
     114:	a2 e3       	ldi	r26, 0x32	; 50
     116:	b3 e0       	ldi	r27, 0x03	; 3
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a1 3c       	cpi	r26, 0xC1	; 193
     11e:	b1 07       	cpc	r27, r17
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 dd 06 	call	0xdba	; 0xdba <main>
     126:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     12e:	1f 92       	push	r1
     130:	0f 92       	push	r0
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	0f 92       	push	r0
     136:	0b b6       	in	r0, 0x3b	; 59
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	2f 92       	push	r2
     13e:	3f 92       	push	r3
     140:	4f 92       	push	r4
     142:	5f 92       	push	r5
     144:	6f 92       	push	r6
     146:	7f 92       	push	r7
     148:	8f 92       	push	r8
     14a:	9f 92       	push	r9
     14c:	af 92       	push	r10
     14e:	bf 92       	push	r11
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	2f 93       	push	r18
     15e:	3f 93       	push	r19
     160:	4f 93       	push	r20
     162:	5f 93       	push	r21
     164:	6f 93       	push	r22
     166:	7f 93       	push	r23
     168:	8f 93       	push	r24
     16a:	9f 93       	push	r25
     16c:	af 93       	push	r26
     16e:	bf 93       	push	r27
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	ef 93       	push	r30
     176:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
  
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     178:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     17c:	50 90 6e 04 	lds	r5, 0x046E
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     180:	b0 9b       	sbis	0x16, 0	; 22
     182:	14 c0       	rjmp	.+40     	; 0x1ac <__vector_13+0x7e>
    ++kernel.cycles;
     184:	80 91 b0 04 	lds	r24, 0x04B0
     188:	90 91 b1 04 	lds	r25, 0x04B1
     18c:	a0 91 b2 04 	lds	r26, 0x04B2
     190:	b0 91 b3 04 	lds	r27, 0x04B3
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	a1 1d       	adc	r26, r1
     198:	b1 1d       	adc	r27, r1
     19a:	80 93 b0 04 	sts	0x04B0, r24
     19e:	90 93 b1 04 	sts	0x04B1, r25
     1a2:	a0 93 b2 04 	sts	0x04B2, r26
     1a6:	b0 93 b3 04 	sts	0x04B3, r27
    TIFR1 |= (1<<TOV1) ;
     1aa:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     1ac:	80 91 84 00 	lds	r24, 0x0084
     1b0:	90 91 85 00 	lds	r25, 0x0085
     1b4:	3c 01       	movw	r6, r24
     1b6:	88 24       	eor	r8, r8
     1b8:	99 24       	eor	r9, r9
     1ba:	80 91 b0 04 	lds	r24, 0x04B0
     1be:	90 91 b1 04 	lds	r25, 0x04B1
     1c2:	a0 91 b2 04 	lds	r26, 0x04B2
     1c6:	b0 91 b3 04 	lds	r27, 0x04B3
     1ca:	dc 01       	movw	r26, r24
     1cc:	99 27       	eor	r25, r25
     1ce:	88 27       	eor	r24, r24
     1d0:	68 0e       	add	r6, r24
     1d2:	79 1e       	adc	r7, r25
     1d4:	8a 1e       	adc	r8, r26
     1d6:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     1d8:	40 90 6d 04 	lds	r4, 0x046D
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	ff ef       	ldi	r31, 0xFF	; 255
     1e2:	af 2e       	mov	r10, r31
     1e4:	ff ef       	ldi	r31, 0xFF	; 255
     1e6:	bf 2e       	mov	r11, r31
     1e8:	ff ef       	ldi	r31, 0xFF	; 255
     1ea:	cf 2e       	mov	r12, r31
     1ec:	ff e7       	ldi	r31, 0x7F	; 127
     1ee:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     1f0:	eb e0       	ldi	r30, 0x0B	; 11
     1f2:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
  t->state = READYQ;
     1f4:	33 24       	eor	r3, r3
     1f6:	33 94       	inc	r3
      } else if (t->release < nextHit) {
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     1f8:	cb e0       	ldi	r28, 0x0B	; 11
     1fa:	d0 e0       	ldi	r29, 0x00	; 0
     1fc:	43 c0       	rjmp	.+134    	; 0x284 <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     1fe:	62 9d       	mul	r22, r2
     200:	d0 01       	movw	r26, r0
     202:	11 24       	eor	r1, r1
     204:	a1 59       	subi	r26, 0x91	; 145
     206:	bb 4f       	sbci	r27, 0xFB	; 251
    if (t->state == TIMEQ) {
     208:	1a 96       	adiw	r26, 0x0a	; 10
     20a:	8c 91       	ld	r24, X
     20c:	1a 97       	sbiw	r26, 0x0a	; 10
     20e:	82 30       	cpi	r24, 0x02	; 2
     210:	a1 f4       	brne	.+40     	; 0x23a <__vector_13+0x10c>
      if (t->release <= now) {
     212:	12 96       	adiw	r26, 0x02	; 2
     214:	ed 90       	ld	r14, X+
     216:	fd 90       	ld	r15, X+
     218:	0d 91       	ld	r16, X+
     21a:	1c 91       	ld	r17, X
     21c:	15 97       	sbiw	r26, 0x05	; 5
     21e:	6e 14       	cp	r6, r14
     220:	7f 04       	cpc	r7, r15
     222:	80 06       	cpc	r8, r16
     224:	91 06       	cpc	r9, r17
     226:	20 f0       	brcs	.+8      	; 0x230 <__vector_13+0x102>
  t->state = READYQ;
     228:	1a 96       	adiw	r26, 0x0a	; 10
     22a:	3c 92       	st	X, r3
     22c:	1a 97       	sbiw	r26, 0x0a	; 10
     22e:	05 c0       	rjmp	.+10     	; 0x23a <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     230:	ea 14       	cp	r14, r10
     232:	fb 04       	cpc	r15, r11
     234:	0c 05       	cpc	r16, r12
     236:	1d 05       	cpc	r17, r13
     238:	10 f0       	brcs	.+4      	; 0x23e <__vector_13+0x110>
     23a:	86 01       	movw	r16, r12
     23c:	75 01       	movw	r14, r10
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     23e:	1a 96       	adiw	r26, 0x0a	; 10
     240:	8c 91       	ld	r24, X
     242:	1a 97       	sbiw	r26, 0x0a	; 10
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	d9 f4       	brne	.+54     	; 0x27e <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     248:	87 2f       	mov	r24, r23
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	8c 9f       	mul	r24, r28
     24e:	f0 01       	movw	r30, r0
     250:	8d 9f       	mul	r24, r29
     252:	f0 0d       	add	r31, r0
     254:	9c 9f       	mul	r25, r28
     256:	f0 0d       	add	r31, r0
     258:	11 24       	eor	r1, r1
     25a:	e3 59       	subi	r30, 0x93	; 147
     25c:	fb 4f       	sbci	r31, 0xFB	; 251
     25e:	16 96       	adiw	r26, 0x06	; 6
     260:	2d 91       	ld	r18, X+
     262:	3d 91       	ld	r19, X+
     264:	4d 91       	ld	r20, X+
     266:	5c 91       	ld	r21, X
     268:	19 97       	sbiw	r26, 0x09	; 9
     26a:	80 85       	ldd	r24, Z+8	; 0x08
     26c:	91 85       	ldd	r25, Z+9	; 0x09
     26e:	a2 85       	ldd	r26, Z+10	; 0x0a
     270:	b3 85       	ldd	r27, Z+11	; 0x0b
     272:	28 17       	cp	r18, r24
     274:	39 07       	cpc	r19, r25
     276:	4a 07       	cpc	r20, r26
     278:	5b 07       	cpc	r21, r27
     27a:	08 f4       	brcc	.+2      	; 0x27e <__vector_13+0x150>
     27c:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     27e:	6f 5f       	subi	r22, 0xFF	; 255
     280:	57 01       	movw	r10, r14
     282:	68 01       	movw	r12, r16
     284:	46 16       	cp	r4, r22
     286:	08 f0       	brcs	.+2      	; 0x28a <__vector_13+0x15c>
     288:	ba cf       	rjmp	.-140    	; 0x1fe <__vector_13+0xd0>
    }
  }
  //fprintf(stdout, "Old: %u New: %u\n\r", oldrunning, running);
  //fprintf(stdout, "NumTasks: %u\n\r", kernel.nbrOfTasks);
  //fprintf(stdout, "Current time: %lu\n\r", (unsigned long) trtCurrentTime());
  if (running != oldrunning) { // perform context switch?
     28a:	75 15       	cp	r23, r5
     28c:	b1 f0       	breq	.+44     	; 0x2ba <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     28e:	eb e0       	ldi	r30, 0x0B	; 11
     290:	5e 9e       	mul	r5, r30
     292:	d0 01       	movw	r26, r0
     294:	11 24       	eor	r1, r1
     296:	a1 59       	subi	r26, 0x91	; 145
     298:	bb 4f       	sbci	r27, 0xFB	; 251
    t->spl = SPL;
     29a:	8d b7       	in	r24, 0x3d	; 61
     29c:	8c 93       	st	X, r24
    t->sph = SPH;
     29e:	8e b7       	in	r24, 0x3e	; 62
     2a0:	11 96       	adiw	r26, 0x01	; 1
     2a2:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     2a4:	7e 9f       	mul	r23, r30
     2a6:	f0 01       	movw	r30, r0
     2a8:	11 24       	eor	r1, r1
     2aa:	e1 59       	subi	r30, 0x91	; 145
     2ac:	fb 4f       	sbci	r31, 0xFB	; 251
    SPH = t->sph;
     2ae:	81 81       	ldd	r24, Z+1	; 0x01
     2b0:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     2b2:	80 81       	ld	r24, Z
     2b4:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     2b6:	70 93 6e 04 	sts	0x046E, r23

  }

  kernel.nextHit = nextHit;  
     2ba:	a0 92 b4 04 	sts	0x04B4, r10
     2be:	b0 92 b5 04 	sts	0x04B5, r11
     2c2:	c0 92 b6 04 	sts	0x04B6, r12
     2c6:	d0 92 b7 04 	sts	0x04B7, r13

  now = (kernel.cycles << 16) + TCNT1;
     2ca:	20 91 84 00 	lds	r18, 0x0084
     2ce:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	80 91 b0 04 	lds	r24, 0x04B0
     2da:	90 91 b1 04 	lds	r25, 0x04B1
     2de:	a0 91 b2 04 	lds	r26, 0x04B2
     2e2:	b0 91 b3 04 	lds	r27, 0x04B3
     2e6:	dc 01       	movw	r26, r24
     2e8:	99 27       	eor	r25, r25
     2ea:	88 27       	eor	r24, r24
     2ec:	28 0f       	add	r18, r24
     2ee:	39 1f       	adc	r19, r25
     2f0:	4a 1f       	adc	r20, r26
     2f2:	5b 1f       	adc	r21, r27
     2f4:	d6 01       	movw	r26, r12
     2f6:	c5 01       	movw	r24, r10
     2f8:	82 1b       	sub	r24, r18
     2fa:	93 0b       	sbc	r25, r19
     2fc:	a4 0b       	sbc	r26, r20
     2fe:	b5 0b       	sbc	r27, r21
     300:	9c 01       	movw	r18, r24
     302:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     304:	84 30       	cpi	r24, 0x04	; 4
     306:	91 05       	cpc	r25, r1
     308:	a1 05       	cpc	r26, r1
     30a:	b1 05       	cpc	r27, r1
     30c:	24 f4       	brge	.+8      	; 0x316 <__vector_13+0x1e8>
     30e:	24 e0       	ldi	r18, 0x04	; 4
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     316:	80 91 84 00 	lds	r24, 0x0084
     31a:	90 91 85 00 	lds	r25, 0x0085
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	82 0f       	add	r24, r18
     324:	93 1f       	adc	r25, r19
     326:	a4 1f       	adc	r26, r20
     328:	b5 1f       	adc	r27, r21
     32a:	80 50       	subi	r24, 0x00	; 0
     32c:	90 40       	sbci	r25, 0x00	; 0
     32e:	a1 40       	sbci	r26, 0x01	; 1
     330:	b0 40       	sbci	r27, 0x00	; 0
     332:	38 f4       	brcc	.+14     	; 0x342 <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     334:	80 91 84 00 	lds	r24, 0x0084
     338:	90 91 85 00 	lds	r25, 0x0085
     33c:	82 0f       	add	r24, r18
     33e:	93 1f       	adc	r25, r19
     340:	0e c0       	rjmp	.+28     	; 0x35e <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     342:	80 91 84 00 	lds	r24, 0x0084
     346:	90 91 85 00 	lds	r25, 0x0085
     34a:	8c 5f       	subi	r24, 0xFC	; 252
     34c:	9f 4f       	sbci	r25, 0xFF	; 255
     34e:	28 f4       	brcc	.+10     	; 0x35a <__vector_13+0x22c>
    OCR1A = 0x0000;
     350:	10 92 89 00 	sts	0x0089, r1
     354:	10 92 88 00 	sts	0x0088, r1
     358:	06 c0       	rjmp	.+12     	; 0x366 <__vector_13+0x238>
  } else {
    OCR1A = 4;
     35a:	84 e0       	ldi	r24, 0x04	; 4
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	90 93 89 00 	sts	0x0089, r25
     362:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	80 93 6f 00 	sts	0x006F, r24
}
     36c:	ff 91       	pop	r31
     36e:	ef 91       	pop	r30
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	bf 91       	pop	r27
     376:	af 91       	pop	r26
     378:	9f 91       	pop	r25
     37a:	8f 91       	pop	r24
     37c:	7f 91       	pop	r23
     37e:	6f 91       	pop	r22
     380:	5f 91       	pop	r21
     382:	4f 91       	pop	r20
     384:	3f 91       	pop	r19
     386:	2f 91       	pop	r18
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	cf 90       	pop	r12
     394:	bf 90       	pop	r11
     396:	af 90       	pop	r10
     398:	9f 90       	pop	r9
     39a:	8f 90       	pop	r8
     39c:	7f 90       	pop	r7
     39e:	6f 90       	pop	r6
     3a0:	5f 90       	pop	r5
     3a2:	4f 90       	pop	r4
     3a4:	3f 90       	pop	r3
     3a6:	2f 90       	pop	r2
     3a8:	0f 90       	pop	r0
     3aa:	0b be       	out	0x3b, r0	; 59
     3ac:	0f 90       	pop	r0
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	0f 90       	pop	r0
     3b2:	1f 90       	pop	r1
     3b4:	18 95       	reti

000003b6 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     3b6:	10 92 85 00 	sts	0x0085, r1
     3ba:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     3be:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     3c2:	25 e0       	ldi	r18, 0x05	; 5
     3c4:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     3c8:	22 e0       	ldi	r18, 0x02	; 2
     3ca:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     3ce:	2f ef       	ldi	r18, 0xFF	; 255
     3d0:	30 e4       	ldi	r19, 0x40	; 64
     3d2:	28 1b       	sub	r18, r24
     3d4:	39 0b       	sbc	r19, r25
     3d6:	30 93 af 04 	sts	0x04AF, r19
     3da:	20 93 ae 04 	sts	0x04AE, r18
  kernel.nbrOfTasks = 0;
     3de:	10 92 6d 04 	sts	0x046D, r1
  kernel.running = 0;
     3e2:	10 92 6e 04 	sts	0x046E, r1

  kernel.cycles = 0x0000;
     3e6:	10 92 b0 04 	sts	0x04B0, r1
     3ea:	10 92 b1 04 	sts	0x04B1, r1
     3ee:	10 92 b2 04 	sts	0x04B2, r1
     3f2:	10 92 b3 04 	sts	0x04B3, r1
  kernel.nextHit = 0x7FFFFFFF;
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	9f ef       	ldi	r25, 0xFF	; 255
     3fa:	af ef       	ldi	r26, 0xFF	; 255
     3fc:	bf e7       	ldi	r27, 0x7F	; 127
     3fe:	80 93 b4 04 	sts	0x04B4, r24
     402:	90 93 b5 04 	sts	0x04B5, r25
     406:	a0 93 b6 04 	sts	0x04B6, r26
     40a:	b0 93 b7 04 	sts	0x04B7, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     40e:	80 93 75 04 	sts	0x0475, r24
     412:	90 93 76 04 	sts	0x0476, r25
     416:	a0 93 77 04 	sts	0x0477, r26
     41a:	b0 93 78 04 	sts	0x0478, r27
  kernel.tasks[0].release = 0x00000000;
     41e:	10 92 71 04 	sts	0x0471, r1
     422:	10 92 72 04 	sts	0x0472, r1
     426:	10 92 73 04 	sts	0x0473, r1
     42a:	10 92 74 04 	sts	0x0474, r1

  sei(); /* set enabled interrupts */
     42e:	78 94       	sei
}
     430:	08 95       	ret

00000432 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     432:	8f 92       	push	r8
     434:	9f 92       	push	r9
     436:	af 92       	push	r10
     438:	bf 92       	push	r11
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	49 01       	movw	r8, r18
     44c:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     44e:	f8 94       	cli

  ++kernel.nbrOfTasks;
     450:	20 91 6d 04 	lds	r18, 0x046D
     454:	2f 5f       	subi	r18, 0xFF	; 255
     456:	20 93 6d 04 	sts	0x046D, r18

  sp = kernel.memptr;
     45a:	c0 91 ae 04 	lds	r28, 0x04AE
     45e:	d0 91 af 04 	lds	r29, 0x04AF
  kernel.memptr -= stacksize;  // decrease free mem ptr
     462:	9e 01       	movw	r18, r28
     464:	26 1b       	sub	r18, r22
     466:	37 0b       	sbc	r19, r23
     468:	30 93 af 04 	sts	0x04AF, r19
     46c:	20 93 ae 04 	sts	0x04AE, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     470:	88 83       	st	Y, r24
     472:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     474:	92 93       	st	-Z, r25
     476:	31 97       	sbiw	r30, 0x01	; 1
     478:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     47a:	ce 01       	movw	r24, r28
     47c:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     47e:	1c 92       	st	X, r1
     480:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     482:	a8 17       	cp	r26, r24
     484:	b9 07       	cpc	r27, r25
     486:	d9 f7       	brne	.-10     	; 0x47e <trtCreateTask+0x4c>
     488:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     48a:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     48c:	d2 92       	st	-Z, r13
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     492:	9e 01       	movw	r18, r28
     494:	24 52       	subi	r18, 0x24	; 36
     496:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     498:	1c 92       	st	X, r1
     49a:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     49c:	a2 17       	cp	r26, r18
     49e:	b3 07       	cpc	r27, r19
     4a0:	d9 f7       	brne	.-10     	; 0x498 <trtCreateTask+0x66>
     4a2:	9f 01       	movw	r18, r30
     4a4:	26 50       	subi	r18, 0x06	; 6
     4a6:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     4a8:	e0 91 6d 04 	lds	r30, 0x046D
     4ac:	8b e0       	ldi	r24, 0x0B	; 11
     4ae:	e8 9f       	mul	r30, r24
     4b0:	f0 01       	movw	r30, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	e1 59       	subi	r30, 0x91	; 145
     4b6:	fb 4f       	sbci	r31, 0xFB	; 251
  ///*
  t->release = release;
     4b8:	82 82       	std	Z+2, r8	; 0x02
     4ba:	93 82       	std	Z+3, r9	; 0x03
     4bc:	a4 82       	std	Z+4, r10	; 0x04
     4be:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     4c0:	e6 82       	std	Z+6, r14	; 0x06
     4c2:	f7 82       	std	Z+7, r15	; 0x07
     4c4:	00 87       	std	Z+8, r16	; 0x08
     4c6:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	82 87       	std	Z+10, r24	; 0x0a
  //*/
  t->spl = lo8(sp);       // store stack pointer
     4cc:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     4ce:	31 83       	std	Z+1, r19	; 0x01
  

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     4d0:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>

}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	08 95       	ret

000004ee <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     4ee:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     4f0:	ed e6       	ldi	r30, 0x6D	; 109
     4f2:	f4 e0       	ldi	r31, 0x04	; 4
     4f4:	e8 0f       	add	r30, r24
     4f6:	f1 1d       	adc	r31, r1
     4f8:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     4fa:	78 94       	sei
}
     4fc:	08 95       	ret

000004fe <trtWait>:

void trtWait(uint8_t semnbr) {
     4fe:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     500:	20 91 6e 04 	lds	r18, 0x046E

  cli(); // disable interrupts
     504:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     506:	e8 2f       	mov	r30, r24
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	eb 55       	subi	r30, 0x5B	; 91
     50c:	fb 4f       	sbci	r31, 0xFB	; 251
  if ((*s) > 0) {
     50e:	80 81       	ld	r24, Z
     510:	88 23       	and	r24, r24
     512:	19 f0       	breq	.+6      	; 0x51a <trtWait+0x1c>
    (*s)--;
     514:	81 50       	subi	r24, 0x01	; 1
     516:	80 83       	st	Z, r24
     518:	10 c0       	rjmp	.+32     	; 0x53a <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	8b e0       	ldi	r24, 0x0B	; 11
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	28 9f       	mul	r18, r24
     522:	f0 01       	movw	r30, r0
     524:	29 9f       	mul	r18, r25
     526:	f0 0d       	add	r31, r0
     528:	38 9f       	mul	r19, r24
     52a:	f0 0d       	add	r31, r0
     52c:	11 24       	eor	r1, r1
     52e:	e1 59       	subi	r30, 0x91	; 145
     530:	fb 4f       	sbci	r31, 0xFB	; 251
     532:	4e 5f       	subi	r20, 0xFE	; 254
     534:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     536:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
  }

  sei(); // reenable interrupts
     53a:	78 94       	sei
}
     53c:	08 95       	ret

0000053e <trtSignal>:

void trtSignal(uint8_t semnbr) {
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     546:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     548:	00 91 6d 04 	lds	r16, 0x046D
     54c:	e1 e0       	ldi	r30, 0x01	; 1
     54e:	4f ef       	ldi	r20, 0xFF	; 255
     550:	5f ef       	ldi	r21, 0xFF	; 255
     552:	6f ef       	ldi	r22, 0xFF	; 255
     554:	7f ef       	ldi	r23, 0xFF	; 255
     556:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     558:	8b e0       	ldi	r24, 0x0B	; 11
     55a:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     55c:	21 2f       	mov	r18, r17
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	2e 5f       	subi	r18, 0xFE	; 254
     562:	3f 4f       	sbci	r19, 0xFF	; 255
     564:	1e c0       	rjmp	.+60     	; 0x5a2 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     566:	ef 9d       	mul	r30, r15
     568:	d0 01       	movw	r26, r0
     56a:	11 24       	eor	r1, r1
     56c:	a1 59       	subi	r26, 0x91	; 145
     56e:	bb 4f       	sbci	r27, 0xFB	; 251
    if (t->state == (semnbr + WAIT_OFFSET)) {
     570:	1a 96       	adiw	r26, 0x0a	; 10
     572:	8c 91       	ld	r24, X
     574:	1a 97       	sbiw	r26, 0x0a	; 10
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	82 17       	cp	r24, r18
     57a:	93 07       	cpc	r25, r19
     57c:	69 f4       	brne	.+26     	; 0x598 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     57e:	16 96       	adiw	r26, 0x06	; 6
     580:	8d 91       	ld	r24, X+
     582:	9d 91       	ld	r25, X+
     584:	0d 90       	ld	r0, X+
     586:	bc 91       	ld	r27, X
     588:	a0 2d       	mov	r26, r0
     58a:	48 17       	cp	r20, r24
     58c:	59 07       	cpc	r21, r25
     58e:	6a 07       	cpc	r22, r26
     590:	7b 07       	cpc	r23, r27
     592:	10 f0       	brcs	.+4      	; 0x598 <trtSignal+0x5a>
     594:	fe 2f       	mov	r31, r30
     596:	02 c0       	rjmp	.+4      	; 0x59c <trtSignal+0x5e>
     598:	db 01       	movw	r26, r22
     59a:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     59c:	ef 5f       	subi	r30, 0xFF	; 255
     59e:	ac 01       	movw	r20, r24
     5a0:	bd 01       	movw	r22, r26
     5a2:	0e 17       	cp	r16, r30
     5a4:	00 f7       	brcc	.-64     	; 0x566 <trtSignal+0x28>
  minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     5a6:	ff 23       	and	r31, r31
     5a8:	41 f4       	brne	.+16     	; 0x5ba <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     5aa:	e1 2f       	mov	r30, r17
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	e4 59       	subi	r30, 0x94	; 148
     5b0:	fb 4f       	sbci	r31, 0xFB	; 251
     5b2:	81 ad       	ldd	r24, Z+57	; 0x39
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	81 af       	std	Z+57, r24	; 0x39
     5b8:	11 c0       	rjmp	.+34     	; 0x5dc <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     5ba:	2f 2f       	mov	r18, r31
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	8b e0       	ldi	r24, 0x0B	; 11
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	28 9f       	mul	r18, r24
     5c4:	f0 01       	movw	r30, r0
     5c6:	29 9f       	mul	r18, r25
     5c8:	f0 0d       	add	r31, r0
     5ca:	38 9f       	mul	r19, r24
     5cc:	f0 0d       	add	r31, r0
     5ce:	11 24       	eor	r1, r1
     5d0:	e3 59       	subi	r30, 0x93	; 147
     5d2:	fb 4f       	sbci	r31, 0xFB	; 251
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5d8:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
  }

  sei(); // reenable interrupts
     5dc:	78 94       	sei
}
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	08 95       	ret

000005e6 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     5e6:	20 91 84 00 	lds	r18, 0x0084
     5ea:	30 91 85 00 	lds	r19, 0x0085
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	80 91 b0 04 	lds	r24, 0x04B0
     5f6:	90 91 b1 04 	lds	r25, 0x04B1
     5fa:	a0 91 b2 04 	lds	r26, 0x04B2
     5fe:	b0 91 b3 04 	lds	r27, 0x04B3
     602:	dc 01       	movw	r26, r24
     604:	99 27       	eor	r25, r25
     606:	88 27       	eor	r24, r24
     608:	28 0f       	add	r18, r24
     60a:	39 1f       	adc	r19, r25
     60c:	4a 1f       	adc	r20, r26
     60e:	5b 1f       	adc	r21, r27
}
     610:	b9 01       	movw	r22, r18
     612:	ca 01       	movw	r24, r20
     614:	08 95       	ret

00000616 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     616:	e0 91 6e 04 	lds	r30, 0x046E
     61a:	ab e0       	ldi	r26, 0x0B	; 11
     61c:	ea 9f       	mul	r30, r26
     61e:	f0 01       	movw	r30, r0
     620:	11 24       	eor	r1, r1
     622:	e1 59       	subi	r30, 0x91	; 145
     624:	fb 4f       	sbci	r31, 0xFB	; 251

  cli(); // turn off interrupts
     626:	f8 94       	cli

  t->state = TIMEQ;
     628:	a2 e0       	ldi	r26, 0x02	; 2
     62a:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     62c:	62 83       	std	Z+2, r22	; 0x02
     62e:	73 83       	std	Z+3, r23	; 0x03
     630:	84 83       	std	Z+4, r24	; 0x04
     632:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     634:	26 83       	std	Z+6, r18	; 0x06
     636:	37 83       	std	Z+7, r19	; 0x07
     638:	40 87       	std	Z+8, r20	; 0x08
     63a:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     63c:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
}
     640:	08 95       	ret

00000642 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     642:	80 91 6e 04 	lds	r24, 0x046E
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	2b e0       	ldi	r18, 0x0B	; 11
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	82 9f       	mul	r24, r18
     64e:	f0 01       	movw	r30, r0
     650:	83 9f       	mul	r24, r19
     652:	f0 0d       	add	r31, r0
     654:	92 9f       	mul	r25, r18
     656:	f0 0d       	add	r31, r0
     658:	11 24       	eor	r1, r1
     65a:	e3 59       	subi	r30, 0x93	; 147
     65c:	fb 4f       	sbci	r31, 0xFB	; 251
     65e:	df 01       	movw	r26, r30
     660:	14 96       	adiw	r26, 0x04	; 4
     662:	64 81       	ldd	r22, Z+4	; 0x04
     664:	11 96       	adiw	r26, 0x01	; 1
     666:	7c 91       	ld	r23, X
     668:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     66a:	12 96       	adiw	r26, 0x02	; 2
     66c:	8c 91       	ld	r24, X
     66e:	12 97       	sbiw	r26, 0x02	; 2
     670:	13 96       	adiw	r26, 0x03	; 3
     672:	9c 91       	ld	r25, X
     674:	08 95       	ret

00000676 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     676:	80 91 6e 04 	lds	r24, 0x046E
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2b e0       	ldi	r18, 0x0B	; 11
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	82 9f       	mul	r24, r18
     682:	f0 01       	movw	r30, r0
     684:	83 9f       	mul	r24, r19
     686:	f0 0d       	add	r31, r0
     688:	92 9f       	mul	r25, r18
     68a:	f0 0d       	add	r31, r0
     68c:	11 24       	eor	r1, r1
     68e:	e3 59       	subi	r30, 0x93	; 147
     690:	fb 4f       	sbci	r31, 0xFB	; 251
     692:	df 01       	movw	r26, r30
     694:	18 96       	adiw	r26, 0x08	; 8
     696:	60 85       	ldd	r22, Z+8	; 0x08
     698:	11 96       	adiw	r26, 0x01	; 1
     69a:	7c 91       	ld	r23, X
     69c:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     69e:	12 96       	adiw	r26, 0x02	; 2
     6a0:	8c 91       	ld	r24, X
     6a2:	12 97       	sbiw	r26, 0x02	; 2
     6a4:	13 96       	adiw	r26, 0x03	; 3
     6a6:	9c 91       	ld	r25, X
     6a8:	08 95       	ret

000006aa <trtTerminate>:

void trtTerminate(void) {

  cli();
     6aa:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     6ac:	80 91 6e 04 	lds	r24, 0x046E
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	2b e0       	ldi	r18, 0x0B	; 11
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	82 9f       	mul	r24, r18
     6b8:	f0 01       	movw	r30, r0
     6ba:	83 9f       	mul	r24, r19
     6bc:	f0 0d       	add	r31, r0
     6be:	92 9f       	mul	r25, r18
     6c0:	f0 0d       	add	r31, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	e3 59       	subi	r30, 0x93	; 147
     6c6:	fb 4f       	sbci	r31, 0xFB	; 251
     6c8:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     6ca:	0e 94 97 00 	call	0x12e	; 0x12e <__vector_13>
}
     6ce:	08 95       	ret

000006d0 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     6d0:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     6d2:	e8 2f       	mov	r30, r24
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	eb 55       	subi	r30, 0x5B	; 91
     6d8:	fb 4f       	sbci	r31, 0xFB	; 251
  temp = *s ;
     6da:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     6dc:	88 23       	and	r24, r24
     6de:	19 f0       	breq	.+6      	; 0x6e6 <trtAccept+0x16>
    (*s)--;
     6e0:	81 50       	subi	r24, 0x01	; 1
     6e2:	80 83       	st	Z, r24
     6e4:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     6e6:	78 94       	sei
  return temp ;
}
     6e8:	08 95       	ret

000006ea <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     6ea:	87 e6       	ldi	r24, 0x67	; 103
     6ec:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     6f0:	e1 ec       	ldi	r30, 0xC1	; 193
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	88 e1       	ldi	r24, 0x18	; 24
     6f6:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     6f8:	10 92 85 03 	sts	0x0385, r1
     6fc:	10 92 84 03 	sts	0x0384, r1
  tx_out = 0;
     700:	10 92 87 03 	sts	0x0387, r1
     704:	10 92 86 03 	sts	0x0386, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     708:	80 81       	ld	r24, Z
     70a:	80 68       	ori	r24, 0x80	; 128
     70c:	80 83       	st	Z, r24
}
     70e:	08 95       	ret

00000710 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	0b b6       	in	r0, 0x3b	; 59
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	8f 93       	push	r24
     724:	9f 93       	push	r25
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     72a:	20 91 84 03 	lds	r18, 0x0384
     72e:	30 91 85 03 	lds	r19, 0x0385
     732:	80 91 86 03 	lds	r24, 0x0386
     736:	90 91 87 03 	lds	r25, 0x0387
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	31 f4       	brne	.+12     	; 0x74c <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     740:	80 91 c1 00 	lds	r24, 0x00C1
     744:	8f 7d       	andi	r24, 0xDF	; 223
     746:	80 93 c1 00 	sts	0x00C1, r24
     74a:	1d c0       	rjmp	.+58     	; 0x786 <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     74c:	e0 91 86 03 	lds	r30, 0x0386
     750:	f0 91 87 03 	lds	r31, 0x0387
     754:	e8 57       	subi	r30, 0x78	; 120
     756:	fc 4f       	sbci	r31, 0xFC	; 252
     758:	80 81       	ld	r24, Z
     75a:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     75e:	80 91 86 03 	lds	r24, 0x0386
     762:	90 91 87 03 	lds	r25, 0x0387
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	90 93 87 03 	sts	0x0387, r25
     76c:	80 93 86 03 	sts	0x0386, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     770:	80 91 86 03 	lds	r24, 0x0386
     774:	90 91 87 03 	lds	r25, 0x0387
     778:	88 3c       	cpi	r24, 0xC8	; 200
     77a:	91 05       	cpc	r25, r1
     77c:	21 f4       	brne	.+8      	; 0x786 <__vector_21+0x76>
     77e:	10 92 87 03 	sts	0x0387, r1
     782:	10 92 86 03 	sts	0x0386, r1
  }
}
     786:	ff 91       	pop	r31
     788:	ef 91       	pop	r30
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	3f 91       	pop	r19
     790:	2f 91       	pop	r18
     792:	0f 90       	pop	r0
     794:	0b be       	out	0x3b, r0	; 59
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	0f 90       	pop	r0
     79c:	1f 90       	pop	r1
     79e:	18 95       	reti

000007a0 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     7a0:	1f 93       	push	r17
     7a2:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     7a4:	8a 30       	cpi	r24, 0x0A	; 10
     7a6:	19 f4       	brne	.+6      	; 0x7ae <uart_putchar+0xe>
     7a8:	8d e0       	ldi	r24, 0x0D	; 13
     7aa:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
  char i = tx_in;
     7ae:	80 91 84 03 	lds	r24, 0x0384
     7b2:	90 91 85 03 	lds	r25, 0x0385
  i++;
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     7b8:	88 3c       	cpi	r24, 0xC8	; 200
     7ba:	09 f4       	brne	.+2      	; 0x7be <uart_putchar+0x1e>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     7be:	e0 91 84 03 	lds	r30, 0x0384
     7c2:	f0 91 85 03 	lds	r31, 0x0385
     7c6:	e8 57       	subi	r30, 0x78	; 120
     7c8:	fc 4f       	sbci	r31, 0xFC	; 252
     7ca:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     7cc:	28 2f       	mov	r18, r24
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	80 91 86 03 	lds	r24, 0x0386
     7d4:	90 91 87 03 	lds	r25, 0x0387
     7d8:	28 17       	cp	r18, r24
     7da:	39 07       	cpc	r19, r25
     7dc:	c9 f3       	breq	.-14     	; 0x7d0 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     7de:	30 93 85 03 	sts	0x0385, r19
     7e2:	20 93 84 03 	sts	0x0384, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     7e6:	80 91 c1 00 	lds	r24, 0x00C1
     7ea:	80 62       	ori	r24, 0x20	; 32
     7ec:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	1f 91       	pop	r17
     7f6:	08 95       	ret

000007f8 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	0b b6       	in	r0, 0x3b	; 59
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
	trt_rx_c = UDR0;
     81e:	80 91 c6 00 	lds	r24, 0x00C6
     822:	80 93 b8 04 	sts	0x04B8, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
}
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	bf 91       	pop	r27
     832:	af 91       	pop	r26
     834:	9f 91       	pop	r25
     836:	8f 91       	pop	r24
     838:	7f 91       	pop	r23
     83a:	6f 91       	pop	r22
     83c:	5f 91       	pop	r21
     83e:	4f 91       	pop	r20
     840:	3f 91       	pop	r19
     842:	2f 91       	pop	r18
     844:	0f 90       	pop	r0
     846:	0b be       	out	0x3b, r0	; 59
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     860:	80 91 32 03 	lds	r24, 0x0332
     864:	90 91 33 03 	lds	r25, 0x0333
     868:	89 2b       	or	r24, r25
     86a:	09 f0       	breq	.+2      	; 0x86e <uart_getchar+0x1c>
     86c:	a1 c0       	rjmp	.+322    	; 0x9b0 <uart_getchar+0x15e>
     86e:	04 e3       	ldi	r16, 0x34	; 52
     870:	13 e0       	ldi	r17, 0x03	; 3
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	if (UCSR0A & _BV(FE0))
     878:	80 91 c0 00 	lds	r24, 0x00C0
     87c:	84 ff       	sbrs	r24, 4
     87e:	03 c0       	rjmp	.+6      	; 0x886 <uart_getchar+0x34>
     880:	2e ef       	ldi	r18, 0xFE	; 254
     882:	3f ef       	ldi	r19, 0xFF	; 255
     884:	a9 c0       	rjmp	.+338    	; 0x9d8 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     886:	80 91 c0 00 	lds	r24, 0x00C0
     88a:	83 fd       	sbrc	r24, 3
     88c:	a3 c0       	rjmp	.+326    	; 0x9d4 <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     88e:	90 91 b8 04 	lds	r25, 0x04B8

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     892:	9d 30       	cpi	r25, 0x0D	; 13
     894:	11 f0       	breq	.+4      	; 0x89a <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     896:	9a 30       	cpi	r25, 0x0A	; 10
     898:	81 f4       	brne	.+32     	; 0x8ba <uart_getchar+0x68>
	  {
	    *cp = c;
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	f8 01       	movw	r30, r16
     89e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     8a0:	b7 01       	movw	r22, r14
     8a2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
	    rxp = b;
     8a6:	84 e3       	ldi	r24, 0x34	; 52
     8a8:	93 e0       	ldi	r25, 0x03	; 3
     8aa:	90 93 33 03 	sts	0x0333, r25
     8ae:	80 93 32 03 	sts	0x0332, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
     8b8:	7b c0       	rjmp	.+246    	; 0x9b0 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     8ba:	99 30       	cpi	r25, 0x09	; 9
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <uart_getchar+0x6e>
     8be:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     8c0:	89 2f       	mov	r24, r25
     8c2:	80 52       	subi	r24, 0x20	; 32
     8c4:	8f 35       	cpi	r24, 0x5F	; 95
     8c6:	10 f0       	brcs	.+4      	; 0x8cc <uart_getchar+0x7a>
     8c8:	90 3a       	cpi	r25, 0xA0	; 160
     8ca:	70 f0       	brcs	.+28     	; 0x8e8 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     8cc:	f3 e0       	ldi	r31, 0x03	; 3
     8ce:	03 38       	cpi	r16, 0x83	; 131
     8d0:	1f 07       	cpc	r17, r31
     8d2:	11 f4       	brne	.+4      	; 0x8d8 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     8d4:	87 e0       	ldi	r24, 0x07	; 7
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     8d8:	f8 01       	movw	r30, r16
     8da:	91 93       	st	Z+, r25
     8dc:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     8de:	89 2f       	mov	r24, r25
     8e0:	b7 01       	movw	r22, r14
     8e2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     8e6:	c5 cf       	rjmp	.-118    	; 0x872 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     8e8:	92 31       	cpi	r25, 0x12	; 18
     8ea:	39 f1       	breq	.+78     	; 0x93a <uart_getchar+0xe8>
     8ec:	93 31       	cpi	r25, 0x13	; 19
     8ee:	38 f4       	brcc	.+14     	; 0x8fe <uart_getchar+0xac>
     8f0:	93 30       	cpi	r25, 0x03	; 3
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <uart_getchar+0xa4>
     8f4:	6f c0       	rjmp	.+222    	; 0x9d4 <uart_getchar+0x182>
     8f6:	98 30       	cpi	r25, 0x08	; 8
     8f8:	09 f0       	breq	.+2      	; 0x8fc <uart_getchar+0xaa>
     8fa:	bb cf       	rjmp	.-138    	; 0x872 <uart_getchar+0x20>
     8fc:	09 c0       	rjmp	.+18     	; 0x910 <uart_getchar+0xbe>
     8fe:	97 31       	cpi	r25, 0x17	; 23
     900:	09 f4       	brne	.+2      	; 0x904 <uart_getchar+0xb2>
     902:	4b c0       	rjmp	.+150    	; 0x99a <uart_getchar+0x148>
     904:	9f 37       	cpi	r25, 0x7F	; 127
     906:	21 f0       	breq	.+8      	; 0x910 <uart_getchar+0xbe>
     908:	95 31       	cpi	r25, 0x15	; 21
     90a:	09 f0       	breq	.+2      	; 0x90e <uart_getchar+0xbc>
     90c:	b2 cf       	rjmp	.-156    	; 0x872 <uart_getchar+0x20>
     90e:	32 c0       	rjmp	.+100    	; 0x974 <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     910:	f3 e0       	ldi	r31, 0x03	; 3
     912:	04 33       	cpi	r16, 0x34	; 52
     914:	1f 07       	cpc	r17, r31
     916:	09 f0       	breq	.+2      	; 0x91a <uart_getchar+0xc8>
     918:	08 f4       	brcc	.+2      	; 0x91c <uart_getchar+0xca>
     91a:	ab cf       	rjmp	.-170    	; 0x872 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     91c:	88 e0       	ldi	r24, 0x08	; 8
     91e:	b7 01       	movw	r22, r14
     920:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	b7 01       	movw	r22, r14
     928:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     92c:	88 e0       	ldi	r24, 0x08	; 8
     92e:	b7 01       	movw	r22, r14
     930:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		cp--;
     934:	01 50       	subi	r16, 0x01	; 1
     936:	10 40       	sbci	r17, 0x00	; 0
     938:	9c cf       	rjmp	.-200    	; 0x872 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     93a:	8d e0       	ldi	r24, 0x0D	; 13
     93c:	b7 01       	movw	r22, r14
     93e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     942:	c4 e3       	ldi	r28, 0x34	; 52
     944:	d3 e0       	ldi	r29, 0x03	; 3
     946:	04 c0       	rjmp	.+8      	; 0x950 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     948:	89 91       	ld	r24, Y+
     94a:	b7 01       	movw	r22, r14
     94c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     950:	c0 17       	cp	r28, r16
     952:	d1 07       	cpc	r29, r17
     954:	c8 f3       	brcs	.-14     	; 0x948 <uart_getchar+0xf6>
     956:	8d cf       	rjmp	.-230    	; 0x872 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     958:	88 e0       	ldi	r24, 0x08	; 8
     95a:	b7 01       	movw	r22, r14
     95c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     960:	80 e2       	ldi	r24, 0x20	; 32
     962:	b7 01       	movw	r22, r14
     964:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	b7 01       	movw	r22, r14
     96c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		cp--;
     970:	01 50       	subi	r16, 0x01	; 1
     972:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	04 33       	cpi	r16, 0x34	; 52
     978:	18 07       	cpc	r17, r24
     97a:	09 f0       	breq	.+2      	; 0x97e <uart_getchar+0x12c>
     97c:	68 f7       	brcc	.-38     	; 0x958 <uart_getchar+0x106>
     97e:	79 cf       	rjmp	.-270    	; 0x872 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     980:	88 e0       	ldi	r24, 0x08	; 8
     982:	b7 01       	movw	r22, r14
     984:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar(' ', stream);
     988:	80 e2       	ldi	r24, 0x20	; 32
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
		uart_putchar('\b', stream);
     990:	88 e0       	ldi	r24, 0x08	; 8
     992:	b7 01       	movw	r22, r14
     994:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <uart_putchar>
     998:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     99a:	e3 e0       	ldi	r30, 0x03	; 3
     99c:	04 33       	cpi	r16, 0x34	; 52
     99e:	1e 07       	cpc	r17, r30
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <uart_getchar+0x152>
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <uart_getchar+0x154>
     9a4:	66 cf       	rjmp	.-308    	; 0x872 <uart_getchar+0x20>
     9a6:	e8 01       	movw	r28, r16
     9a8:	8a 91       	ld	r24, -Y
     9aa:	80 32       	cpi	r24, 0x20	; 32
     9ac:	49 f7       	brne	.-46     	; 0x980 <uart_getchar+0x12e>
     9ae:	61 cf       	rjmp	.-318    	; 0x872 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     9b0:	e0 91 32 03 	lds	r30, 0x0332
     9b4:	f0 91 33 03 	lds	r31, 0x0333
     9b8:	81 91       	ld	r24, Z+
     9ba:	f0 93 33 03 	sts	0x0333, r31
     9be:	e0 93 32 03 	sts	0x0332, r30
  if (c == '\n')
     9c2:	8a 30       	cpi	r24, 0x0A	; 10
     9c4:	21 f4       	brne	.+8      	; 0x9ce <uart_getchar+0x17c>
    rxp = 0;
     9c6:	10 92 33 03 	sts	0x0333, r1
     9ca:	10 92 32 03 	sts	0x0332, r1

  return c;
     9ce:	28 2f       	mov	r18, r24
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <uart_getchar+0x186>
     9d4:	2f ef       	ldi	r18, 0xFF	; 255
     9d6:	3f ef       	ldi	r19, 0xFF	; 255
}
     9d8:	c9 01       	movw	r24, r18
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret

000009e8 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     9e8:	28 2f       	mov	r18, r24
     9ea:	20 7f       	andi	r18, 0xF0	; 240
     9ec:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     9ee:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     9f0:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9f2:	20 e4       	ldi	r18, 0x40	; 64
     9f4:	3f e1       	ldi	r19, 0x1F	; 31
     9f6:	f9 01       	movw	r30, r18
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     9fc:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     9fe:	40 98       	cbi	0x08, 0	; 8
     a00:	f9 01       	movw	r30, r18
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	f1 f7       	brne	.-4      	; 0xa02 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	74 e0       	ldi	r23, 0x04	; 4
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	7a 95       	dec	r23
     a10:	e1 f7       	brne	.-8      	; 0xa0a <LCDsendChar+0x22>
     a12:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     a14:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     a16:	42 9a       	sbi	0x08, 2	; 8
     a18:	c9 01       	movw	r24, r18
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     a1e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     a20:	40 98       	cbi	0x08, 0	; 8
     a22:	c9 01       	movw	r24, r18
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     a28:	08 95       	ret

00000a2a <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     a2a:	28 2f       	mov	r18, r24
     a2c:	20 7f       	andi	r18, 0xF0	; 240
     a2e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     a30:	42 9a       	sbi	0x08, 2	; 8
     a32:	20 e4       	ldi	r18, 0x40	; 64
     a34:	3f e1       	ldi	r19, 0x1F	; 31
     a36:	f9 01       	movw	r30, r18
     a38:	31 97       	sbiw	r30, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     a3c:	42 98       	cbi	0x08, 2	; 8
     a3e:	f9 01       	movw	r30, r18
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	e4 e0       	ldi	r30, 0x04	; 4
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	ea 95       	dec	r30
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <LCDsendCommand+0x1e>
     a50:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     a52:	42 9a       	sbi	0x08, 2	; 8
     a54:	c9 01       	movw	r24, r18
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     a5a:	42 98       	cbi	0x08, 2	; 8
     a5c:	c9 01       	movw	r24, r18
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     a62:	08 95       	ret

00000a64 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     a6a:	08 95       	ret

00000a6c <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     a72:	08 95       	ret

00000a74 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	49 f0       	breq	.+18     	; 0xa94 <LCDstring+0x20>
     a82:	ec 01       	movw	r28, r24
     a84:	10 e0       	ldi	r17, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     a88:	89 91       	ld	r24, Y+
     a8a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     a8e:	1f 5f       	subi	r17, 0xFF	; 255
     a90:	10 17       	cp	r17, r16
     a92:	d0 f3       	brcs	.-12     	; 0xa88 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     a9e:	62 30       	cpi	r22, 0x02	; 2
     aa0:	31 f0       	breq	.+12     	; 0xaae <LCDGotoXY+0x10>
     aa2:	63 30       	cpi	r22, 0x03	; 3
     aa4:	31 f0       	breq	.+12     	; 0xab2 <LCDGotoXY+0x14>
     aa6:	61 30       	cpi	r22, 0x01	; 1
     aa8:	29 f4       	brne	.+10     	; 0xab4 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     aaa:	80 5c       	subi	r24, 0xC0	; 192
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     aae:	8c 5e       	subi	r24, 0xEC	; 236
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     ab2:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     ab4:	80 68       	ori	r24, 0x80	; 128
     ab6:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
	
}
     aba:	08 95       	ret

00000abc <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ec 01       	movw	r28, r24
     ac4:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     ac6:	64 2f       	mov	r22, r20
     ac8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
     acc:	10 e0       	ldi	r17, 0x00	; 0
     ace:	03 c0       	rjmp	.+6      	; 0xad6 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     ad0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     ad4:	1f 5f       	subi	r17, 0xFF	; 255
     ad6:	fe 01       	movw	r30, r28
     ad8:	e1 0f       	add	r30, r17
     ada:	f1 1d       	adc	r31, r1
     adc:	84 91       	lpm	r24, Z+
     ade:	88 23       	and	r24, r24
     ae0:	b9 f7       	brne	.-18     	; 0xad0 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	08 95       	ret

00000aea <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	7c 01       	movw	r14, r24
     af8:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     afa:	11 0f       	add	r17, r17
     afc:	11 0f       	add	r17, r17
     afe:	11 0f       	add	r17, r17
     b00:	10 64       	ori	r17, 0x40	; 64
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     b06:	f7 01       	movw	r30, r14
     b08:	ec 0f       	add	r30, r28
     b0a:	fd 1f       	adc	r31, r29
     b0c:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     b0e:	81 2f       	mov	r24, r17
     b10:	8c 0f       	add	r24, r28
     b12:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		LCDsendChar(pcc);
     b16:	80 2f       	mov	r24, r16
     b18:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     b1c:	21 96       	adiw	r28, 0x01	; 1
     b1e:	c8 30       	cpi	r28, 0x08	; 8
     b20:	d1 05       	cpc	r29, r1
     b22:	89 f7       	brne	.-30     	; 0xb06 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	08 95       	ret

00000b32 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	80 e6       	ldi	r24, 0x60	; 96
     b3a:	9a ee       	ldi	r25, 0xEA	; 234
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     b40:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     b42:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     b44:	87 b1       	in	r24, 0x07	; 7
     b46:	80 6f       	ori	r24, 0xF0	; 240
     b48:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     b4a:	87 b1       	in	r24, 0x07	; 7
     b4c:	87 60       	ori	r24, 0x07	; 7
     b4e:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b50:	80 e3       	ldi	r24, 0x30	; 48
     b52:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b54:	42 9a       	sbi	0x08, 2	; 8
     b56:	20 e4       	ldi	r18, 0x40	; 64
     b58:	3f e1       	ldi	r19, 0x1F	; 31
     b5a:	f9 01       	movw	r30, r18
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b60:	42 98       	cbi	0x08, 2	; 8
     b62:	f9 01       	movw	r30, r18
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b68:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b6a:	42 9a       	sbi	0x08, 2	; 8
     b6c:	c9 01       	movw	r24, r18
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b72:	42 98       	cbi	0x08, 2	; 8
     b74:	c9 01       	movw	r24, r18
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     b7a:	80 e2       	ldi	r24, 0x20	; 32
     b7c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b7e:	42 9a       	sbi	0x08, 2	; 8
     b80:	c9 01       	movw	r24, r18
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     b86:	42 98       	cbi	0x08, 2	; 8
     b88:	c9 01       	movw	r24, r18
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     b8e:	88 e2       	ldi	r24, 0x28	; 40
     b90:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     b94:	8c e0       	ldi	r24, 0x0C	; 12
     b96:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
     b9a:	cc e8       	ldi	r28, 0x8C	; 140
     b9c:	d0 e0       	ldi	r29, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     ba0:	16 2f       	mov	r17, r22
     ba2:	1f 5f       	subi	r17, 0xFF	; 255
     ba4:	ce 01       	movw	r24, r28
     ba6:	0e 94 75 05 	call	0xaea	; 0xaea <LCDdefinechar>
     baa:	28 96       	adiw	r28, 0x08	; 8
     bac:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     bae:	18 30       	cpi	r17, 0x08	; 8
     bb0:	b9 f7       	brne	.-18     	; 0xba0 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	08 95       	ret

00000bba <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	08 2f       	mov	r16, r24
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     bc4:	8e e1       	ldi	r24, 0x1E	; 30
     bc6:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     bca:	1f 5f       	subi	r17, 0xFF	; 255
     bcc:	10 17       	cp	r17, r16
     bce:	d0 f3       	brcs	.-12     	; 0xbc4 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	08 2f       	mov	r16, r24
     bdc:	10 e0       	ldi	r17, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     be0:	88 e1       	ldi	r24, 0x18	; 24
     be2:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     be6:	1f 5f       	subi	r17, 0xFF	; 255
     be8:	10 17       	cp	r17, r16
     bea:	d0 f3       	brcs	.-12     	; 0xbe0 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	08 95       	ret

00000bf2 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     bf2:	8e e0       	ldi	r24, 0x0E	; 14
     bf4:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     bf8:	08 95       	ret

00000bfa <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     bfa:	8f e0       	ldi	r24, 0x0F	; 15
     bfc:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c00:	08 95       	ret

00000c02 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     c02:	8c e0       	ldi	r24, 0x0C	; 12
     c04:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c08:	08 95       	ret

00000c0a <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c10:	08 95       	ret

00000c12 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     c12:	8c e0       	ldi	r24, 0x0C	; 12
     c14:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
}
     c18:	08 95       	ret

00000c1a <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	08 2f       	mov	r16, r24
     c20:	10 e0       	ldi	r17, 0x00	; 0
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     c24:	80 e1       	ldi	r24, 0x10	; 16
     c26:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c2a:	1f 5f       	subi	r17, 0xFF	; 255
     c2c:	10 17       	cp	r17, r16
     c2e:	d0 f3       	brcs	.-12     	; 0xc24 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	08 2f       	mov	r16, r24
     c3c:	10 e0       	ldi	r17, 0x00	; 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     c40:	84 e1       	ldi	r24, 0x14	; 20
     c42:	0e 94 15 05 	call	0xa2a	; 0xa2a <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c46:	1f 5f       	subi	r17, 0xFF	; 255
     c48:	10 17       	cp	r17, r16
     c4a:	d0 f3       	brcs	.-12     	; 0xc40 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     c62:	96 e0       	ldi	r25, 0x06	; 6
     c64:	89 9f       	mul	r24, r25
     c66:	c0 01       	movw	r24, r0
     c68:	11 24       	eor	r1, r1
     c6a:	24 2f       	mov	r18, r20
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	ac 01       	movw	r20, r24
     c70:	42 9f       	mul	r20, r18
     c72:	c0 01       	movw	r24, r0
     c74:	43 9f       	mul	r20, r19
     c76:	90 0d       	add	r25, r0
     c78:	52 9f       	mul	r21, r18
     c7a:	90 0d       	add	r25, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__divmodhi4>
     c84:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     c86:	cb 01       	movw	r24, r22
     c88:	66 e0       	ldi	r22, 0x06	; 6
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 ad 0c 	call	0x195a	; 0x195a <__udivmodhi4>
     c90:	e8 2e       	mov	r14, r24
     c92:	ff 24       	eor	r15, r15
     c94:	00 e0       	ldi	r16, 0x00	; 0
     c96:	10 e0       	ldi	r17, 0x00	; 0
     c98:	12 c0       	rjmp	.+36     	; 0xcbe <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     c9a:	c8 01       	movw	r24, r16
     c9c:	05 96       	adiw	r24, 0x05	; 5
     c9e:	c8 17       	cp	r28, r24
     ca0:	d9 07       	cpc	r29, r25
     ca2:	10 f0       	brcs	.+4      	; 0xca8 <LCDprogressBar+0x56>
     ca4:	85 e0       	ldi	r24, 0x05	; 5
     ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     ca8:	c0 17       	cp	r28, r16
     caa:	d1 07       	cpc	r29, r17
     cac:	10 f0       	brcs	.+4      	; 0xcb2 <LCDprogressBar+0x60>
     cae:	8e 2d       	mov	r24, r14
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <LCDprogressBar+0x62>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     cb4:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     cb8:	f3 94       	inc	r15
     cba:	0a 5f       	subi	r16, 0xFA	; 250
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	fd 14       	cp	r15, r13
     cc0:	60 f3       	brcs	.-40     	; 0xc9a <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	08 95       	ret

00000cd2 <init_lcd>:


//**********************************************************
// LCD setup
void init_lcd(void) {
	LCDinit();				//initialize the display
     cd2:	0e 94 99 05 	call	0xb32	; 0xb32 <LCDinit>
	LCDcursorOFF();
     cd6:	0e 94 01 06 	call	0xc02	; 0xc02 <LCDcursorOFF>
	LCDclr();				//clear the display
     cda:	0e 94 32 05 	call	0xa64	; 0xa64 <LCDclr>
	LCDGotoXY(0,0);
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
}
     ce6:	08 95       	ret

00000ce8 <adc_init>:

//********************************************************** 
// ADC setup
void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
     ce8:	ea e7       	ldi	r30, 0x7A	; 122
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	87 60       	ori	r24, 0x07	; 7
     cf0:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
     cf2:	ac e7       	ldi	r26, 0x7C	; 124
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	8c 91       	ld	r24, X
     cf8:	80 64       	ori	r24, 0x40	; 64
     cfa:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
     cfc:	80 81       	ld	r24, Z
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
     d02:	80 81       	ld	r24, Z
     d04:	80 64       	ori	r24, 0x40	; 64
     d06:	80 83       	st	Z, r24
}
     d08:	08 95       	ret

00000d0a <read_adc>:
 
uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                  //Clear the older channel that was read
     d0a:	90 91 7c 00 	lds	r25, 0x007C
     d0e:	90 7f       	andi	r25, 0xF0	; 240
     d10:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= channel;               //Defines the new ADC channel to be read
     d14:	90 91 7c 00 	lds	r25, 0x007C
     d18:	98 2b       	or	r25, r24
     d1a:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA |= (1<<ADSC);            //Starts a new conversion
     d1e:	80 91 7a 00 	lds	r24, 0x007A
     d22:	80 64       	ori	r24, 0x40	; 64
     d24:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & (1<<ADSC));     	//Wait until the conversion is done
     d28:	80 91 7a 00 	lds	r24, 0x007A
     d2c:	86 fd       	sbrc	r24, 6
     d2e:	fc cf       	rjmp	.-8      	; 0xd28 <read_adc+0x1e>
	return ADCW;                    //Returns the ADC value of the chosen channel
     d30:	20 91 78 00 	lds	r18, 0x0078
     d34:	30 91 79 00 	lds	r19, 0x0079
}
     d38:	c9 01       	movw	r24, r18
     d3a:	08 95       	ret

00000d3c <initialize>:
// http://hekilledmywire.wordpress.com/2011/03/16/using-the-adc-tutorial-part-5/

//********************************************************** 
//Set it all up
void initialize(void) {
	DDRA = 0x00;		// ADC Port
     d3c:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;
     d3e:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xff;    	// LCD connections
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     d44:	18 b8       	out	0x08, r1	; 8
	DDRD |= 0x0C;		// LED status light && Relay
     d46:	8a b1       	in	r24, 0x0a	; 10
     d48:	8c 60       	ori	r24, 0x0C	; 12
     d4a:	8a b9       	out	0x0a, r24	; 10
	PORTC |= 0x08;		// Initialize relay to high
     d4c:	43 9a       	sbi	0x08, 3	; 8

	// ******************** 
	//initialize variables
	trtWait(SEM_SHARED);
     d4e:	84 e0       	ldi	r24, 0x04	; 4
     d50:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	cTemp = 0;
     d54:	10 92 ba 04 	sts	0x04BA, r1
     d58:	10 92 b9 04 	sts	0x04B9, r1
	dTemp = 0;
     d5c:	10 92 59 04 	sts	0x0459, r1
     d60:	10 92 58 04 	sts	0x0458, r1
	time_rem = 0;
     d64:	10 92 6c 04 	sts	0x046C, r1
     d68:	10 92 6b 04 	sts	0x046B, r1
	msec = 0;
     d6c:	10 92 55 04 	sts	0x0455, r1
     d70:	10 92 54 04 	sts	0x0454, r1
	count_en = 0;
     d74:	10 92 57 04 	sts	0x0457, r1
     d78:	10 92 56 04 	sts	0x0456, r1
	trtSignal(SEM_SHARED);
     d7c:	84 e0       	ldi	r24, 0x04	; 4
     d7e:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>

	// ******************** 
	//init LCD
	init_lcd();
     d82:	0e 94 69 06 	call	0xcd2	; 0xcd2 <init_lcd>
	LCDclr();
     d86:	0e 94 32 05 	call	0xa64	; 0xa64 <LCDclr>
	// put some stuff on LCD
	CopyStringtoLCD(LCD_line1, 0, 0);//start at char=0 line=0
     d8a:	8c ec       	ldi	r24, 0xCC	; 204
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	0e 94 5e 05 	call	0xabc	; 0xabc <CopyStringtoLCD>
	CopyStringtoLCD(LCD_line2, 0, 1); 
     d96:	86 ed       	ldi	r24, 0xD6	; 214
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	0e 94 5e 05 	call	0xabc	; 0xabc <CopyStringtoLCD>

	// ********************
	//init ADC
	adc_init();
     da2:	0e 94 74 06 	call	0xce8	; 0xce8 <adc_init>

	// ******************** 
	//set up timer 0 for 1 mSec timebase 
	TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	90 93 6e 00 	sts	0x006E, r25
	OCR0A = 249;  		//set the compare reg to 250 time ticks
     dac:	89 ef       	ldi	r24, 0xF9	; 249
     dae:	87 bd       	out	0x27, r24	; 39
	//set prescalar to divide by 64 
	TCCR0B= 3; 	
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	85 bd       	out	0x25, r24	; 37
	// turn on clear-on-match
	TCCR0A= (1<<WGM01) ;
     db4:	94 bd       	out	0x24, r25	; 36

	// ********************
	//crank up the ISRs
	sei();
     db6:	78 94       	sei
}  
     db8:	08 95       	ret

00000dba <main>:
	dead = trtCurrentTime() + SECONDS2TICKS(0.5);
	trtSleepUntil(rel, dead);	
}

// --- Main Program ----------------------------------
int main(void) {
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     dc6:	0e 94 75 03 	call	0x6ea	; 0x6ea <trt_uart_init>
  stdout = stdin = stderr = &uart0;
     dca:	6c e1       	ldi	r22, 0x1C	; 28
     dcc:	72 e0       	ldi	r23, 0x02	; 2
     dce:	70 93 c0 04 	sts	0x04C0, r23
     dd2:	60 93 bf 04 	sts	0x04BF, r22
     dd6:	70 93 bc 04 	sts	0x04BC, r23
     dda:	60 93 bb 04 	sts	0x04BB, r22
     dde:	70 93 be 04 	sts	0x04BE, r23
     de2:	60 93 bd 04 	sts	0x04BD, r22
  fprintf(stdout,"\n\r Welcome to KitchenBot UI \n\r Please input your instructions below\n\r The options are: time, temp, & egg\n\r\n\r");
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputs>
    // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
     dee:	80 e5       	ldi	r24, 0x50	; 80
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     df6:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     df8:	10 92 a6 04 	sts	0x04A6, r1
  
  sei(); // set enabled interrupts;
     dfc:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     dfe:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     e00:	10 92 a7 04 	sts	0x04A7, r1
  
  sei(); // set enabled interrupts;
     e04:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     e06:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	80 93 a9 04 	sts	0x04A9, r24
  
  sei(); // set enabled interrupts;
     e0e:	78 94       	sei

  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variable

  // --- create tasks  ----------------
  trtCreateTask(serialComm, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[0]));
     e10:	88 ef       	ldi	r24, 0xF8	; 248
     e12:	98 e0       	ldi	r25, 0x08	; 8
     e14:	68 ee       	ldi	r22, 0xE8	; 232
     e16:	73 e0       	ldi	r23, 0x03	; 3
     e18:	2a e1       	ldi	r18, 0x1A	; 26
     e1a:	36 e0       	ldi	r19, 0x06	; 6
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	fa e1       	ldi	r31, 0x1A	; 26
     e22:	ef 2e       	mov	r14, r31
     e24:	f6 e0       	ldi	r31, 0x06	; 6
     e26:	ff 2e       	mov	r15, r31
     e28:	01 2d       	mov	r16, r1
     e2a:	11 2d       	mov	r17, r1
     e2c:	e0 e5       	ldi	r30, 0x50	; 80
     e2e:	ce 2e       	mov	r12, r30
     e30:	e4 e0       	ldi	r30, 0x04	; 4
     e32:	de 2e       	mov	r13, r30
     e34:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
  trtCreateTask(lcdComm, 1000, SECONDS2TICKS(0.25), SECONDS2TICKS(0.5), &(args[0]));
     e38:	80 e6       	ldi	r24, 0x60	; 96
     e3a:	98 e0       	ldi	r25, 0x08	; 8
     e3c:	68 ee       	ldi	r22, 0xE8	; 232
     e3e:	73 e0       	ldi	r23, 0x03	; 3
     e40:	22 e4       	ldi	r18, 0x42	; 66
     e42:	3f e0       	ldi	r19, 0x0F	; 15
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	b4 e8       	ldi	r27, 0x84	; 132
     e4a:	eb 2e       	mov	r14, r27
     e4c:	be e1       	ldi	r27, 0x1E	; 30
     e4e:	fb 2e       	mov	r15, r27
     e50:	01 2d       	mov	r16, r1
     e52:	11 2d       	mov	r17, r1
     e54:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
  trtCreateTask(adjustTemp, 2000, SECONDS2TICKS(2), SECONDS2TICKS(4), &(args[0]));
     e58:	8d e4       	ldi	r24, 0x4D	; 77
     e5a:	97 e0       	ldi	r25, 0x07	; 7
     e5c:	60 ed       	ldi	r22, 0xD0	; 208
     e5e:	77 e0       	ldi	r23, 0x07	; 7
     e60:	22 e1       	ldi	r18, 0x12	; 18
     e62:	3a e7       	ldi	r19, 0x7A	; 122
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	a4 e2       	ldi	r26, 0x24	; 36
     e6a:	ea 2e       	mov	r14, r26
     e6c:	a4 ef       	ldi	r26, 0xF4	; 244
     e6e:	fa 2e       	mov	r15, r26
     e70:	01 2d       	mov	r16, r1
     e72:	11 2d       	mov	r17, r1
     e74:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
  trtCreateTask(readAnalogInputs, 1000, SECONDS2TICKS(0.25), SECONDS2TICKS(0.5), &(args[0]));
     e78:	8a e3       	ldi	r24, 0x3A	; 58
     e7a:	98 e0       	ldi	r25, 0x08	; 8
     e7c:	68 ee       	ldi	r22, 0xE8	; 232
     e7e:	73 e0       	ldi	r23, 0x03	; 3
     e80:	22 e4       	ldi	r18, 0x42	; 66
     e82:	3f e0       	ldi	r19, 0x0F	; 15
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	f4 e8       	ldi	r31, 0x84	; 132
     e8a:	ef 2e       	mov	r14, r31
     e8c:	fe e1       	ldi	r31, 0x1E	; 30
     e8e:	ff 2e       	mov	r15, r31
     e90:	01 2d       	mov	r16, r1
     e92:	11 2d       	mov	r17, r1
     e94:	0e 94 19 02 	call	0x432	; 0x432 <trtCreateTask>
     e98:	ff cf       	rjmp	.-2      	; 0xe98 <main+0xde>

00000e9a <adjustTemp>:
	  trtSleepUntil(rel, dead);	
  	}
}

// --- define task 3  ----------------------------------------
void adjustTemp(void* args) {
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
			PORTD |= LED_EN;    	// Turn on LED
			if (dTemp != 0) {
				if (count_en == 0) {
					fprintf(stdout, "Timer enabled.\n\r");
				}
				count_en = 1;			// Enable timer count down
     ea6:	c1 e0       	ldi	r28, 0x01	; 1
     ea8:	d0 e0       	ldi	r29, 0x00	; 0
void adjustTemp(void* args) {
	uint32_t rel, dead;
	uint16_t adc_in;
	while(TRUE){
		// Read ADC value
		adc_in = read_adc(0);
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	0e 94 85 06 	call	0xd0a	; 0xd0a <read_adc>
     eb0:	7c 01       	movw	r14, r24
		//fprintf(stdout, "ADC: %i\n\r", adc_in);

		// Control mechanism
		trtWait(SEM_SHARED);
     eb2:	84 e0       	ldi	r24, 0x04	; 4
     eb4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
		cTemp = (adc_in + 3) / 2.1;
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	e8 0e       	add	r14, r24
     ebe:	f9 1e       	adc	r15, r25
     ec0:	00 e0       	ldi	r16, 0x00	; 0
     ec2:	10 e0       	ldi	r17, 0x00	; 0
     ec4:	c8 01       	movw	r24, r16
     ec6:	b7 01       	movw	r22, r14
     ec8:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatunsisf>
     ecc:	26 e6       	ldi	r18, 0x66	; 102
     ece:	36 e6       	ldi	r19, 0x66	; 102
     ed0:	46 e0       	ldi	r20, 0x06	; 6
     ed2:	50 e4       	ldi	r21, 0x40	; 64
     ed4:	0e 94 98 09 	call	0x1330	; 0x1330 <__divsf3>
     ed8:	0e 94 44 0a 	call	0x1488	; 0x1488 <__fixsfsi>
     edc:	70 93 ba 04 	sts	0x04BA, r23
     ee0:	60 93 b9 04 	sts	0x04B9, r22
		if (cTemp < 0) cTemp = 0; 
     ee4:	80 91 b9 04 	lds	r24, 0x04B9
     ee8:	90 91 ba 04 	lds	r25, 0x04BA
     eec:	97 ff       	sbrs	r25, 7
     eee:	04 c0       	rjmp	.+8      	; 0xef8 <adjustTemp+0x5e>
     ef0:	10 92 ba 04 	sts	0x04BA, r1
     ef4:	10 92 b9 04 	sts	0x04B9, r1
		if (cTemp < (dTemp/* * .95*/)) {	// Factor of .95 to account for carryover effect
     ef8:	20 91 b9 04 	lds	r18, 0x04B9
     efc:	30 91 ba 04 	lds	r19, 0x04BA
     f00:	80 91 58 04 	lds	r24, 0x0458
     f04:	90 91 59 04 	lds	r25, 0x0459
     f08:	28 17       	cp	r18, r24
     f0a:	39 07       	cpc	r19, r25
     f0c:	1c f4       	brge	.+6      	; 0xf14 <adjustTemp+0x7a>
			PORTD &= ~RELAY_EN;		// Turn on heating element
     f0e:	5b 98       	cbi	0x0b, 3	; 11
			PORTD &= ~LED_EN;		// Turn off LED
     f10:	5a 98       	cbi	0x0b, 2	; 11
     f12:	1a c0       	rjmp	.+52     	; 0xf48 <adjustTemp+0xae>
		}
		else {
			PORTD |= RELAY_EN;		// Turn off heating element
     f14:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD |= LED_EN;    	// Turn on LED
     f16:	5a 9a       	sbi	0x0b, 2	; 11
			if (dTemp != 0) {
     f18:	80 91 58 04 	lds	r24, 0x0458
     f1c:	90 91 59 04 	lds	r25, 0x0459
     f20:	89 2b       	or	r24, r25
     f22:	91 f0       	breq	.+36     	; 0xf48 <adjustTemp+0xae>
				if (count_en == 0) {
     f24:	80 91 56 04 	lds	r24, 0x0456
     f28:	90 91 57 04 	lds	r25, 0x0457
     f2c:	89 2b       	or	r24, r25
     f2e:	41 f4       	brne	.+16     	; 0xf40 <adjustTemp+0xa6>
					fprintf(stdout, "Timer enabled.\n\r");
     f30:	60 91 bd 04 	lds	r22, 0x04BD
     f34:	70 91 be 04 	lds	r23, 0x04BE
     f38:	8d e6       	ldi	r24, 0x6D	; 109
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputs>
				}
				count_en = 1;			// Enable timer count down
     f40:	d0 93 57 04 	sts	0x0457, r29
     f44:	c0 93 56 04 	sts	0x0456, r28
			}
		}
		trtSignal(SEM_SHARED);
     f48:	84 e0       	ldi	r24, 0x04	; 4
     f4a:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     f4e:	20 91 b0 04 	lds	r18, 0x04B0
     f52:	30 91 b1 04 	lds	r19, 0x04B1
     f56:	40 91 b2 04 	lds	r20, 0x04B2
     f5a:	50 91 b3 04 	lds	r21, 0x04B3
     f5e:	a9 01       	movw	r20, r18
     f60:	33 27       	eor	r19, r19
     f62:	22 27       	eor	r18, r18
     f64:	60 91 84 00 	lds	r22, 0x0084
     f68:	70 91 85 00 	lds	r23, 0x0085

		// sleep
	  	rel = trtCurrentTime() + SECONDS2TICKS(2);
	  	dead = trtCurrentTime() + SECONDS2TICKS(4);
	  	trtSleepUntil(rel, dead);	
     f6c:	e0 90 84 00 	lds	r14, 0x0084
     f70:	f0 90 85 00 	lds	r15, 0x0085
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	62 0f       	add	r22, r18
     f7a:	73 1f       	adc	r23, r19
     f7c:	84 1f       	adc	r24, r20
     f7e:	95 1f       	adc	r25, r21
     f80:	6e 5e       	subi	r22, 0xEE	; 238
     f82:	75 48       	sbci	r23, 0x85	; 133
     f84:	8f 4f       	sbci	r24, 0xFF	; 255
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	00 e0       	ldi	r16, 0x00	; 0
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	2e 0d       	add	r18, r14
     f8e:	3f 1d       	adc	r19, r15
     f90:	40 1f       	adc	r20, r16
     f92:	51 1f       	adc	r21, r17
     f94:	2c 5d       	subi	r18, 0xDC	; 220
     f96:	3b 40       	sbci	r19, 0x0B	; 11
     f98:	4f 4f       	sbci	r20, 0xFF	; 255
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
     f9c:	0e 94 0b 03 	call	0x616	; 0x616 <trtSleepUntil>
     fa0:	84 cf       	rjmp	.-248    	; 0xeaa <adjustTemp+0x10>

00000fa2 <__vector_16>:

/********************************************************************/
// 							ISRs & Helper Functions
/********************************************************************/
// --- Timer ISR ------------------------
ISR (TIMER0_COMPA_vect) {
     fa2:	1f 92       	push	r1
     fa4:	0f 92       	push	r0
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	0f 92       	push	r0
     faa:	0b b6       	in	r0, 0x3b	; 59
     fac:	0f 92       	push	r0
     fae:	11 24       	eor	r1, r1
     fb0:	2f 93       	push	r18
     fb2:	3f 93       	push	r19
     fb4:	4f 93       	push	r20
     fb6:	5f 93       	push	r21
     fb8:	6f 93       	push	r22
     fba:	7f 93       	push	r23
     fbc:	8f 93       	push	r24
     fbe:	9f 93       	push	r25
     fc0:	af 93       	push	r26
     fc2:	bf 93       	push	r27
     fc4:	ef 93       	push	r30
     fc6:	ff 93       	push	r31
	trtWait(SEM_SHARED);
     fc8:	84 e0       	ldi	r24, 0x04	; 4
     fca:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	if ((time_rem > 0) && count_en) {
     fce:	80 91 6b 04 	lds	r24, 0x046B
     fd2:	90 91 6c 04 	lds	r25, 0x046C
     fd6:	18 16       	cp	r1, r24
     fd8:	19 06       	cpc	r1, r25
     fda:	b4 f5       	brge	.+108    	; 0x1048 <__vector_16+0xa6>
     fdc:	80 91 56 04 	lds	r24, 0x0456
     fe0:	90 91 57 04 	lds	r25, 0x0457
     fe4:	89 2b       	or	r24, r25
     fe6:	81 f1       	breq	.+96     	; 0x1048 <__vector_16+0xa6>
		if (msec < 1000) {
     fe8:	80 91 54 04 	lds	r24, 0x0454
     fec:	90 91 55 04 	lds	r25, 0x0455
     ff0:	88 5e       	subi	r24, 0xE8	; 232
     ff2:	93 40       	sbci	r25, 0x03	; 3
     ff4:	54 f4       	brge	.+20     	; 0x100a <__vector_16+0x68>
			msec++;
     ff6:	80 91 54 04 	lds	r24, 0x0454
     ffa:	90 91 55 04 	lds	r25, 0x0455
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	90 93 55 04 	sts	0x0455, r25
    1004:	80 93 54 04 	sts	0x0454, r24
    1008:	1f c0       	rjmp	.+62     	; 0x1048 <__vector_16+0xa6>
		}
		else {
			msec = 0;
    100a:	10 92 55 04 	sts	0x0455, r1
    100e:	10 92 54 04 	sts	0x0454, r1
			time_rem--;
    1012:	80 91 6b 04 	lds	r24, 0x046B
    1016:	90 91 6c 04 	lds	r25, 0x046C
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	90 93 6c 04 	sts	0x046C, r25
    1020:	80 93 6b 04 	sts	0x046B, r24
			if (time_rem == 0) {
    1024:	80 91 6b 04 	lds	r24, 0x046B
    1028:	90 91 6c 04 	lds	r25, 0x046C
    102c:	89 2b       	or	r24, r25
    102e:	61 f4       	brne	.+24     	; 0x1048 <__vector_16+0xa6>
				count_en = 0;
    1030:	10 92 57 04 	sts	0x0457, r1
    1034:	10 92 56 04 	sts	0x0456, r1
				fprintf(stdout, "Timer disabled.\n\r");
    1038:	60 91 bd 04 	lds	r22, 0x04BD
    103c:	70 91 be 04 	lds	r23, 0x04BE
    1040:	8e e7       	ldi	r24, 0x7E	; 126
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputs>
			}
		}
	}
    trtSignal(SEM_SHARED);
    1048:	84 e0       	ldi	r24, 0x04	; 4
    104a:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
}
    104e:	ff 91       	pop	r31
    1050:	ef 91       	pop	r30
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	0f 90       	pop	r0
    1068:	0b be       	out	0x3b, r0	; 59
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	0f 90       	pop	r0
    1070:	1f 90       	pop	r1
    1072:	18 95       	reti

00001074 <readAnalogInputs>:
	  	trtSleepUntil(rel, dead);	
	}
}

// --- define task 4 - read analog inputs ----------
void readAnalogInputs(void * args) {
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
	int pot;
	uint32_t rel, dead;
	while(TRUE){
		pot = read_adc(1);
		fprintf(stdout, "Pot value: %u \n\r", pot);
    1078:	c0 e9       	ldi	r28, 0x90	; 144
    107a:	d1 e0       	ldi	r29, 0x01	; 1
// --- define task 4 - read analog inputs ----------
void readAnalogInputs(void * args) {
	int pot;
	uint32_t rel, dead;
	while(TRUE){
		pot = read_adc(1);
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	0e 94 85 06 	call	0xd0a	; 0xd0a <read_adc>
		fprintf(stdout, "Pot value: %u \n\r", pot);
    1082:	00 d0       	rcall	.+0      	; 0x1084 <readAnalogInputs+0x10>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <readAnalogInputs+0x12>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <readAnalogInputs+0x14>
    1088:	ed b7       	in	r30, 0x3d	; 61
    108a:	fe b7       	in	r31, 0x3e	; 62
    108c:	31 96       	adiw	r30, 0x01	; 1
    108e:	20 91 bd 04 	lds	r18, 0x04BD
    1092:	30 91 be 04 	lds	r19, 0x04BE
    1096:	ad b7       	in	r26, 0x3d	; 61
    1098:	be b7       	in	r27, 0x3e	; 62
    109a:	12 96       	adiw	r26, 0x02	; 2
    109c:	3c 93       	st	X, r19
    109e:	2e 93       	st	-X, r18
    10a0:	11 97       	sbiw	r26, 0x01	; 1
    10a2:	d3 83       	std	Z+3, r29	; 0x03
    10a4:	c2 83       	std	Z+2, r28	; 0x02
    10a6:	95 83       	std	Z+5, r25	; 0x05
    10a8:	84 83       	std	Z+4, r24	; 0x04
    10aa:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fprintf>
    10ae:	8d b7       	in	r24, 0x3d	; 61
    10b0:	9e b7       	in	r25, 0x3e	; 62
    10b2:	06 96       	adiw	r24, 0x06	; 6
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	9e bf       	out	0x3e, r25	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	8d bf       	out	0x3d, r24	; 61
    10be:	de cf       	rjmp	.-68     	; 0x107c <readAnalogInputs+0x8>

000010c0 <lcdComm>:
		trtSignal(SEM_SHARED);
	}
}

// --- define task 2  ----------------------------------------
void lcdComm(void* args) {
    10c0:	cf 92       	push	r12
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
	uint32_t rel, dead;
	// increment time counter and format string 
	while (TRUE) {
	  // display the current temp
	  trtWait(SEM_SHARED) ;
	  sprintf(lcd_buffer, "%iC      ", cTemp);
    10d0:	ca e5       	ldi	r28, 0x5A	; 90
    10d2:	d4 e0       	ldi	r29, 0x04	; 4
    10d4:	11 ea       	ldi	r17, 0xA1	; 161
    10d6:	c1 2e       	mov	r12, r17
    10d8:	11 e0       	ldi	r17, 0x01	; 1
    10da:	d1 2e       	mov	r13, r17
void lcdComm(void* args) {
	uint32_t rel, dead;
	// increment time counter and format string 
	while (TRUE) {
	  // display the current temp
	  trtWait(SEM_SHARED) ;
    10dc:	84 e0       	ldi	r24, 0x04	; 4
    10de:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
	  sprintf(lcd_buffer, "%iC      ", cTemp);
    10e2:	80 91 b9 04 	lds	r24, 0x04B9
    10e6:	90 91 ba 04 	lds	r25, 0x04BA
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <lcdComm+0x2c>
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <lcdComm+0x2e>
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <lcdComm+0x30>
    10f0:	ed b7       	in	r30, 0x3d	; 61
    10f2:	fe b7       	in	r31, 0x3e	; 62
    10f4:	31 96       	adiw	r30, 0x01	; 1
    10f6:	ad b7       	in	r26, 0x3d	; 61
    10f8:	be b7       	in	r27, 0x3e	; 62
    10fa:	12 96       	adiw	r26, 0x02	; 2
    10fc:	dc 93       	st	X, r29
    10fe:	ce 93       	st	-X, r28
    1100:	11 97       	sbiw	r26, 0x01	; 1
    1102:	d3 82       	std	Z+3, r13	; 0x03
    1104:	c2 82       	std	Z+2, r12	; 0x02
    1106:	95 83       	std	Z+5, r25	; 0x05
    1108:	84 83       	std	Z+4, r24	; 0x04
    110a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <sprintf>
	  LCDGotoXY(9, 0);
    110e:	8d b7       	in	r24, 0x3d	; 61
    1110:	9e b7       	in	r25, 0x3e	; 62
    1112:	06 96       	adiw	r24, 0x06	; 6
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	9e bf       	out	0x3e, r25	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	8d bf       	out	0x3d, r24	; 61
    111e:	89 e0       	ldi	r24, 0x09	; 9
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
    1126:	fe 01       	movw	r30, r28
    1128:	01 90       	ld	r0, Z+
    112a:	00 20       	and	r0, r0
    112c:	e9 f7       	brne	.-6      	; 0x1128 <lcdComm+0x68>
    112e:	31 97       	sbiw	r30, 0x01	; 1
    1130:	ec 1b       	sub	r30, r28
    1132:	fd 0b       	sbc	r31, r29
    1134:	ce 01       	movw	r24, r28
    1136:	6e 2f       	mov	r22, r30
    1138:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCDstring>
	  // display the desired temp 
	  sprintf(lcd_buffer, "%iC      ", dTemp);
    113c:	80 91 58 04 	lds	r24, 0x0458
    1140:	90 91 59 04 	lds	r25, 0x0459
    1144:	00 d0       	rcall	.+0      	; 0x1146 <lcdComm+0x86>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <lcdComm+0x88>
    1148:	00 d0       	rcall	.+0      	; 0x114a <lcdComm+0x8a>
    114a:	ed b7       	in	r30, 0x3d	; 61
    114c:	fe b7       	in	r31, 0x3e	; 62
    114e:	31 96       	adiw	r30, 0x01	; 1
    1150:	ad b7       	in	r26, 0x3d	; 61
    1152:	be b7       	in	r27, 0x3e	; 62
    1154:	12 96       	adiw	r26, 0x02	; 2
    1156:	dc 93       	st	X, r29
    1158:	ce 93       	st	-X, r28
    115a:	11 97       	sbiw	r26, 0x01	; 1
    115c:	d3 82       	std	Z+3, r13	; 0x03
    115e:	c2 82       	std	Z+2, r12	; 0x02
    1160:	95 83       	std	Z+5, r25	; 0x05
    1162:	84 83       	std	Z+4, r24	; 0x04
    1164:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <sprintf>
	  //sprintf(lcd_buffer, "%is      ", time_rem);
	  LCDGotoXY(9, 1);
    1168:	8d b7       	in	r24, 0x3d	; 61
    116a:	9e b7       	in	r25, 0x3e	; 62
    116c:	06 96       	adiw	r24, 0x06	; 6
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	9e bf       	out	0x3e, r25	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	8d bf       	out	0x3d, r24	; 61
    1178:	89 e0       	ldi	r24, 0x09	; 9
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDGotoXY>
	  LCDstring(lcd_buffer, strlen(lcd_buffer));
    1180:	fe 01       	movw	r30, r28
    1182:	01 90       	ld	r0, Z+
    1184:	00 20       	and	r0, r0
    1186:	e9 f7       	brne	.-6      	; 0x1182 <lcdComm+0xc2>
    1188:	31 97       	sbiw	r30, 0x01	; 1
    118a:	ec 1b       	sub	r30, r28
    118c:	fd 0b       	sbc	r31, r29
    118e:	ce 01       	movw	r24, r28
    1190:	6e 2f       	mov	r22, r30
    1192:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCDstring>
	  trtSignal(SEM_SHARED);
    1196:	84 e0       	ldi	r24, 0x04	; 4
    1198:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
    119c:	20 91 b0 04 	lds	r18, 0x04B0
    11a0:	30 91 b1 04 	lds	r19, 0x04B1
    11a4:	40 91 b2 04 	lds	r20, 0x04B2
    11a8:	50 91 b3 04 	lds	r21, 0x04B3
    11ac:	a9 01       	movw	r20, r18
    11ae:	33 27       	eor	r19, r19
    11b0:	22 27       	eor	r18, r18
    11b2:	60 91 84 00 	lds	r22, 0x0084
    11b6:	70 91 85 00 	lds	r23, 0x0085
	  // sleep
	  rel = trtCurrentTime() + SECONDS2TICKS(0.25);
	  dead = trtCurrentTime() + SECONDS2TICKS(0.5);
	  trtSleepUntil(rel, dead);	
    11ba:	e0 90 84 00 	lds	r14, 0x0084
    11be:	f0 90 85 00 	lds	r15, 0x0085
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	62 0f       	add	r22, r18
    11c8:	73 1f       	adc	r23, r19
    11ca:	84 1f       	adc	r24, r20
    11cc:	95 1f       	adc	r25, r21
    11ce:	6e 5b       	subi	r22, 0xBE	; 190
    11d0:	70 4f       	sbci	r23, 0xF0	; 240
    11d2:	8f 4f       	sbci	r24, 0xFF	; 255
    11d4:	9f 4f       	sbci	r25, 0xFF	; 255
    11d6:	00 e0       	ldi	r16, 0x00	; 0
    11d8:	10 e0       	ldi	r17, 0x00	; 0
    11da:	2e 0d       	add	r18, r14
    11dc:	3f 1d       	adc	r19, r15
    11de:	40 1f       	adc	r20, r16
    11e0:	51 1f       	adc	r21, r17
    11e2:	2c 57       	subi	r18, 0x7C	; 124
    11e4:	31 4e       	sbci	r19, 0xE1	; 225
    11e6:	4f 4f       	sbci	r20, 0xFF	; 255
    11e8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ea:	0e 94 0b 03 	call	0x616	; 0x616 <trtSleepUntil>
    11ee:	76 cf       	rjmp	.-276    	; 0x10dc <lcdComm+0x1c>

000011f0 <serialComm>:

/********************************************************************/
// 							FSM Tasks
/********************************************************************/
// --- define task 1  ----------------------------------------
void serialComm(void* args) {
    11f0:	8f 92       	push	r8
    11f2:	9f 92       	push	r9
    11f4:	af 92       	push	r10
    11f6:	bf 92       	push	r11
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <serialComm+0x1a>
    120a:	00 d0       	rcall	.+0      	; 0x120c <serialComm+0x1c>
    120c:	00 d0       	rcall	.+0      	; 0x120e <serialComm+0x1e>
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	// Declare the command and num variables
	volatile int num ;
	char cmd[4] ;
    // initialize
    initialize();
    1212:	0e 94 9e 06 	call	0xd3c	; 0xd3c <initialize>
	while (TRUE) {
		// commands:
		// 'temp' sets the desired temperature
		// 'time' sets the desired time
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s%u", cmd, &num) ;
    1216:	2b ea       	ldi	r18, 0xAB	; 171
    1218:	82 2e       	mov	r8, r18
    121a:	21 e0       	ldi	r18, 0x01	; 1
    121c:	92 2e       	mov	r9, r18
    121e:	8e 01       	movw	r16, r28
    1220:	0d 5f       	subi	r16, 0xFD	; 253
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	5e 01       	movw	r10, r28
    1226:	08 94       	sec
    1228:	a1 1c       	adc	r10, r1
    122a:	b1 1c       	adc	r11, r1
				msec= 0;
			}
		}
		// 6 Minute Egg Mode
		if (strcmp(cmd, "egg") == 0) {
			cTemp = 100;
    122c:	94 e6       	ldi	r25, 0x64	; 100
    122e:	c9 2e       	mov	r12, r25
    1230:	d1 2c       	mov	r13, r1
			time_rem = 3600;
    1232:	80 e1       	ldi	r24, 0x10	; 16
    1234:	e8 2e       	mov	r14, r24
    1236:	8e e0       	ldi	r24, 0x0E	; 14
    1238:	f8 2e       	mov	r15, r24
    initialize();
	while (TRUE) {
		// commands:
		// 'temp' sets the desired temperature
		// 'time' sets the desired time
		fprintf(stdout, ">") ;
    123a:	60 91 bd 04 	lds	r22, 0x04BD
    123e:	70 91 be 04 	lds	r23, 0x04BE
    1242:	8e e3       	ldi	r24, 0x3E	; 62
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <fputc>
		fscanf(stdin, "%s%u", cmd, &num) ;
    124a:	8d b7       	in	r24, 0x3d	; 61
    124c:	9e b7       	in	r25, 0x3e	; 62
    124e:	08 97       	sbiw	r24, 0x08	; 8
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	9e bf       	out	0x3e, r25	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	8d bf       	out	0x3d, r24	; 61
    125a:	ed b7       	in	r30, 0x3d	; 61
    125c:	fe b7       	in	r31, 0x3e	; 62
    125e:	31 96       	adiw	r30, 0x01	; 1
    1260:	80 91 bb 04 	lds	r24, 0x04BB
    1264:	90 91 bc 04 	lds	r25, 0x04BC
    1268:	ad b7       	in	r26, 0x3d	; 61
    126a:	be b7       	in	r27, 0x3e	; 62
    126c:	12 96       	adiw	r26, 0x02	; 2
    126e:	9c 93       	st	X, r25
    1270:	8e 93       	st	-X, r24
    1272:	11 97       	sbiw	r26, 0x01	; 1
    1274:	93 82       	std	Z+3, r9	; 0x03
    1276:	82 82       	std	Z+2, r8	; 0x02
    1278:	15 83       	std	Z+5, r17	; 0x05
    127a:	04 83       	std	Z+4, r16	; 0x04
    127c:	b7 82       	std	Z+7, r11	; 0x07
    127e:	a6 82       	std	Z+6, r10	; 0x06
    1280:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <fscanf>
		// update shared variables
		trtWait(SEM_SHARED) ;
    1284:	8d b7       	in	r24, 0x3d	; 61
    1286:	9e b7       	in	r25, 0x3e	; 62
    1288:	08 96       	adiw	r24, 0x08	; 8
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	9e bf       	out	0x3e, r25	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	8d bf       	out	0x3d, r24	; 61
    1294:	84 e0       	ldi	r24, 0x04	; 4
    1296:	0e 94 7f 02 	call	0x4fe	; 0x4fe <trtWait>
		if (strcmp(cmd, "temp") == 0) {
    129a:	c8 01       	movw	r24, r16
    129c:	60 eb       	ldi	r22, 0xB0	; 176
    129e:	71 e0       	ldi	r23, 0x01	; 1
    12a0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <strcmp>
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	99 f4       	brne	.+38     	; 0x12ce <serialComm+0xde>
			if (num < 0) {
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	97 ff       	sbrs	r25, 7
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <serialComm+0xd2>
				fprintf(stdout, "Please input a positive temperature value.\n\r");
    12b0:	60 91 bd 04 	lds	r22, 0x04BD
    12b4:	70 91 be 04 	lds	r23, 0x04BE
    12b8:	85 eb       	ldi	r24, 0xB5	; 181
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputs>
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <serialComm+0xde>
			}
			else {
				dTemp = num;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	9a 81       	ldd	r25, Y+2	; 0x02
    12c6:	90 93 59 04 	sts	0x0459, r25
    12ca:	80 93 58 04 	sts	0x0458, r24
			}
		}
		if (strcmp(cmd, "time") == 0) {
    12ce:	c8 01       	movw	r24, r16
    12d0:	62 ee       	ldi	r22, 0xE2	; 226
    12d2:	71 e0       	ldi	r23, 0x01	; 1
    12d4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <strcmp>
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	b9 f4       	brne	.+46     	; 0x130a <serialComm+0x11a>
			if (num < 0) {
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	97 ff       	sbrs	r25, 7
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <serialComm+0x106>
				fprintf(stdout, "Please input a positive time value in seconds.\n\r");
    12e4:	60 91 bd 04 	lds	r22, 0x04BD
    12e8:	70 91 be 04 	lds	r23, 0x04BE
    12ec:	87 ee       	ldi	r24, 0xE7	; 231
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputs>
    12f4:	0a c0       	rjmp	.+20     	; 0x130a <serialComm+0x11a>
			}
			else {
				time_rem = num;
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	90 93 6c 04 	sts	0x046C, r25
    12fe:	80 93 6b 04 	sts	0x046B, r24
				msec= 0;
    1302:	10 92 55 04 	sts	0x0455, r1
    1306:	10 92 54 04 	sts	0x0454, r1
			}
		}
		// 6 Minute Egg Mode
		if (strcmp(cmd, "egg") == 0) {
    130a:	c8 01       	movw	r24, r16
    130c:	68 e1       	ldi	r22, 0x18	; 24
    130e:	72 e0       	ldi	r23, 0x02	; 2
    1310:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <strcmp>
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	41 f4       	brne	.+16     	; 0x1328 <serialComm+0x138>
			cTemp = 100;
    1318:	d0 92 ba 04 	sts	0x04BA, r13
    131c:	c0 92 b9 04 	sts	0x04B9, r12
			time_rem = 3600;
    1320:	f0 92 6c 04 	sts	0x046C, r15
    1324:	e0 92 6b 04 	sts	0x046B, r14
		}
		trtSignal(SEM_SHARED);
    1328:	84 e0       	ldi	r24, 0x04	; 4
    132a:	0e 94 9f 02 	call	0x53e	; 0x53e <trtSignal>
    132e:	85 cf       	rjmp	.-246    	; 0x123a <serialComm+0x4a>

00001330 <__divsf3>:
    1330:	a8 e1       	ldi	r26, 0x18	; 24
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ee e9       	ldi	r30, 0x9E	; 158
    1336:	f9 e0       	ldi	r31, 0x09	; 9
    1338:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <__prologue_saves__+0x10>
    133c:	69 83       	std	Y+1, r22	; 0x01
    133e:	7a 83       	std	Y+2, r23	; 0x02
    1340:	8b 83       	std	Y+3, r24	; 0x03
    1342:	9c 83       	std	Y+4, r25	; 0x04
    1344:	2d 83       	std	Y+5, r18	; 0x05
    1346:	3e 83       	std	Y+6, r19	; 0x06
    1348:	4f 83       	std	Y+7, r20	; 0x07
    134a:	58 87       	std	Y+8, r21	; 0x08
    134c:	b9 e0       	ldi	r27, 0x09	; 9
    134e:	eb 2e       	mov	r14, r27
    1350:	f1 2c       	mov	r15, r1
    1352:	ec 0e       	add	r14, r28
    1354:	fd 1e       	adc	r15, r29
    1356:	ce 01       	movw	r24, r28
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	b7 01       	movw	r22, r14
    135c:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    1360:	8e 01       	movw	r16, r28
    1362:	0f 5e       	subi	r16, 0xEF	; 239
    1364:	1f 4f       	sbci	r17, 0xFF	; 255
    1366:	ce 01       	movw	r24, r28
    1368:	05 96       	adiw	r24, 0x05	; 5
    136a:	b8 01       	movw	r22, r16
    136c:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    1370:	29 85       	ldd	r18, Y+9	; 0x09
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	08 f4       	brcc	.+2      	; 0x1378 <__divsf3+0x48>
    1376:	7e c0       	rjmp	.+252    	; 0x1474 <__divsf3+0x144>
    1378:	39 89       	ldd	r19, Y+17	; 0x11
    137a:	32 30       	cpi	r19, 0x02	; 2
    137c:	10 f4       	brcc	.+4      	; 0x1382 <__divsf3+0x52>
    137e:	b8 01       	movw	r22, r16
    1380:	7c c0       	rjmp	.+248    	; 0x147a <__divsf3+0x14a>
    1382:	8a 85       	ldd	r24, Y+10	; 0x0a
    1384:	9a 89       	ldd	r25, Y+18	; 0x12
    1386:	89 27       	eor	r24, r25
    1388:	8a 87       	std	Y+10, r24	; 0x0a
    138a:	24 30       	cpi	r18, 0x04	; 4
    138c:	11 f0       	breq	.+4      	; 0x1392 <__divsf3+0x62>
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 f4       	brne	.+12     	; 0x139e <__divsf3+0x6e>
    1392:	23 17       	cp	r18, r19
    1394:	09 f0       	breq	.+2      	; 0x1398 <__divsf3+0x68>
    1396:	6e c0       	rjmp	.+220    	; 0x1474 <__divsf3+0x144>
    1398:	6a e2       	ldi	r22, 0x2A	; 42
    139a:	72 e0       	ldi	r23, 0x02	; 2
    139c:	6e c0       	rjmp	.+220    	; 0x147a <__divsf3+0x14a>
    139e:	34 30       	cpi	r19, 0x04	; 4
    13a0:	39 f4       	brne	.+14     	; 0x13b0 <__divsf3+0x80>
    13a2:	1d 86       	std	Y+13, r1	; 0x0d
    13a4:	1e 86       	std	Y+14, r1	; 0x0e
    13a6:	1f 86       	std	Y+15, r1	; 0x0f
    13a8:	18 8a       	std	Y+16, r1	; 0x10
    13aa:	1c 86       	std	Y+12, r1	; 0x0c
    13ac:	1b 86       	std	Y+11, r1	; 0x0b
    13ae:	04 c0       	rjmp	.+8      	; 0x13b8 <__divsf3+0x88>
    13b0:	32 30       	cpi	r19, 0x02	; 2
    13b2:	21 f4       	brne	.+8      	; 0x13bc <__divsf3+0x8c>
    13b4:	84 e0       	ldi	r24, 0x04	; 4
    13b6:	89 87       	std	Y+9, r24	; 0x09
    13b8:	b7 01       	movw	r22, r14
    13ba:	5f c0       	rjmp	.+190    	; 0x147a <__divsf3+0x14a>
    13bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    13be:	3c 85       	ldd	r19, Y+12	; 0x0c
    13c0:	8b 89       	ldd	r24, Y+19	; 0x13
    13c2:	9c 89       	ldd	r25, Y+20	; 0x14
    13c4:	28 1b       	sub	r18, r24
    13c6:	39 0b       	sbc	r19, r25
    13c8:	3c 87       	std	Y+12, r19	; 0x0c
    13ca:	2b 87       	std	Y+11, r18	; 0x0b
    13cc:	ed 84       	ldd	r14, Y+13	; 0x0d
    13ce:	fe 84       	ldd	r15, Y+14	; 0x0e
    13d0:	0f 85       	ldd	r16, Y+15	; 0x0f
    13d2:	18 89       	ldd	r17, Y+16	; 0x10
    13d4:	ad 88       	ldd	r10, Y+21	; 0x15
    13d6:	be 88       	ldd	r11, Y+22	; 0x16
    13d8:	cf 88       	ldd	r12, Y+23	; 0x17
    13da:	d8 8c       	ldd	r13, Y+24	; 0x18
    13dc:	ea 14       	cp	r14, r10
    13de:	fb 04       	cpc	r15, r11
    13e0:	0c 05       	cpc	r16, r12
    13e2:	1d 05       	cpc	r17, r13
    13e4:	40 f4       	brcc	.+16     	; 0x13f6 <__divsf3+0xc6>
    13e6:	ee 0c       	add	r14, r14
    13e8:	ff 1c       	adc	r15, r15
    13ea:	00 1f       	adc	r16, r16
    13ec:	11 1f       	adc	r17, r17
    13ee:	21 50       	subi	r18, 0x01	; 1
    13f0:	30 40       	sbci	r19, 0x00	; 0
    13f2:	3c 87       	std	Y+12, r19	; 0x0c
    13f4:	2b 87       	std	Y+11, r18	; 0x0b
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e4       	ldi	r27, 0x40	; 64
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	ea 14       	cp	r14, r10
    140c:	fb 04       	cpc	r15, r11
    140e:	0c 05       	cpc	r16, r12
    1410:	1d 05       	cpc	r17, r13
    1412:	40 f0       	brcs	.+16     	; 0x1424 <__divsf3+0xf4>
    1414:	28 2b       	or	r18, r24
    1416:	39 2b       	or	r19, r25
    1418:	4a 2b       	or	r20, r26
    141a:	5b 2b       	or	r21, r27
    141c:	ea 18       	sub	r14, r10
    141e:	fb 08       	sbc	r15, r11
    1420:	0c 09       	sbc	r16, r12
    1422:	1d 09       	sbc	r17, r13
    1424:	b6 95       	lsr	r27
    1426:	a7 95       	ror	r26
    1428:	97 95       	ror	r25
    142a:	87 95       	ror	r24
    142c:	ee 0c       	add	r14, r14
    142e:	ff 1c       	adc	r15, r15
    1430:	00 1f       	adc	r16, r16
    1432:	11 1f       	adc	r17, r17
    1434:	6f 5f       	subi	r22, 0xFF	; 255
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	6f 31       	cpi	r22, 0x1F	; 31
    143a:	71 05       	cpc	r23, r1
    143c:	31 f7       	brne	.-52     	; 0x140a <__divsf3+0xda>
    143e:	da 01       	movw	r26, r20
    1440:	c9 01       	movw	r24, r18
    1442:	8f 77       	andi	r24, 0x7F	; 127
    1444:	90 70       	andi	r25, 0x00	; 0
    1446:	a0 70       	andi	r26, 0x00	; 0
    1448:	b0 70       	andi	r27, 0x00	; 0
    144a:	80 34       	cpi	r24, 0x40	; 64
    144c:	91 05       	cpc	r25, r1
    144e:	a1 05       	cpc	r26, r1
    1450:	b1 05       	cpc	r27, r1
    1452:	61 f4       	brne	.+24     	; 0x146c <__divsf3+0x13c>
    1454:	27 fd       	sbrc	r18, 7
    1456:	0a c0       	rjmp	.+20     	; 0x146c <__divsf3+0x13c>
    1458:	e1 14       	cp	r14, r1
    145a:	f1 04       	cpc	r15, r1
    145c:	01 05       	cpc	r16, r1
    145e:	11 05       	cpc	r17, r1
    1460:	29 f0       	breq	.+10     	; 0x146c <__divsf3+0x13c>
    1462:	20 5c       	subi	r18, 0xC0	; 192
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	4f 4f       	sbci	r20, 0xFF	; 255
    1468:	5f 4f       	sbci	r21, 0xFF	; 255
    146a:	20 78       	andi	r18, 0x80	; 128
    146c:	2d 87       	std	Y+13, r18	; 0x0d
    146e:	3e 87       	std	Y+14, r19	; 0x0e
    1470:	4f 87       	std	Y+15, r20	; 0x0f
    1472:	58 8b       	std	Y+16, r21	; 0x10
    1474:	be 01       	movw	r22, r28
    1476:	67 5f       	subi	r22, 0xF7	; 247
    1478:	7f 4f       	sbci	r23, 0xFF	; 255
    147a:	cb 01       	movw	r24, r22
    147c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__pack_f>
    1480:	68 96       	adiw	r28, 0x18	; 24
    1482:	ea e0       	ldi	r30, 0x0A	; 10
    1484:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__epilogue_restores__+0x10>

00001488 <__fixsfsi>:
    1488:	ac e0       	ldi	r26, 0x0C	; 12
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ea e4       	ldi	r30, 0x4A	; 74
    148e:	fa e0       	ldi	r31, 0x0A	; 10
    1490:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__prologue_saves__+0x20>
    1494:	69 83       	std	Y+1, r22	; 0x01
    1496:	7a 83       	std	Y+2, r23	; 0x02
    1498:	8b 83       	std	Y+3, r24	; 0x03
    149a:	9c 83       	std	Y+4, r25	; 0x04
    149c:	ce 01       	movw	r24, r28
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	be 01       	movw	r22, r28
    14a2:	6b 5f       	subi	r22, 0xFB	; 251
    14a4:	7f 4f       	sbci	r23, 0xFF	; 255
    14a6:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	61 f1       	breq	.+88     	; 0x1508 <__fixsfsi+0x80>
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	50 f1       	brcs	.+84     	; 0x1508 <__fixsfsi+0x80>
    14b4:	84 30       	cpi	r24, 0x04	; 4
    14b6:	21 f4       	brne	.+8      	; 0x14c0 <__fixsfsi+0x38>
    14b8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ba:	88 23       	and	r24, r24
    14bc:	51 f1       	breq	.+84     	; 0x1512 <__fixsfsi+0x8a>
    14be:	2e c0       	rjmp	.+92     	; 0x151c <__fixsfsi+0x94>
    14c0:	2f 81       	ldd	r18, Y+7	; 0x07
    14c2:	38 85       	ldd	r19, Y+8	; 0x08
    14c4:	37 fd       	sbrc	r19, 7
    14c6:	20 c0       	rjmp	.+64     	; 0x1508 <__fixsfsi+0x80>
    14c8:	6e 81       	ldd	r22, Y+6	; 0x06
    14ca:	2f 31       	cpi	r18, 0x1F	; 31
    14cc:	31 05       	cpc	r19, r1
    14ce:	1c f0       	brlt	.+6      	; 0x14d6 <__fixsfsi+0x4e>
    14d0:	66 23       	and	r22, r22
    14d2:	f9 f0       	breq	.+62     	; 0x1512 <__fixsfsi+0x8a>
    14d4:	23 c0       	rjmp	.+70     	; 0x151c <__fixsfsi+0x94>
    14d6:	8e e1       	ldi	r24, 0x1E	; 30
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	82 1b       	sub	r24, r18
    14dc:	93 0b       	sbc	r25, r19
    14de:	29 85       	ldd	r18, Y+9	; 0x09
    14e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    14e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    14e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <__fixsfsi+0x68>
    14e8:	56 95       	lsr	r21
    14ea:	47 95       	ror	r20
    14ec:	37 95       	ror	r19
    14ee:	27 95       	ror	r18
    14f0:	8a 95       	dec	r24
    14f2:	d2 f7       	brpl	.-12     	; 0x14e8 <__fixsfsi+0x60>
    14f4:	66 23       	and	r22, r22
    14f6:	b1 f0       	breq	.+44     	; 0x1524 <__fixsfsi+0x9c>
    14f8:	50 95       	com	r21
    14fa:	40 95       	com	r20
    14fc:	30 95       	com	r19
    14fe:	21 95       	neg	r18
    1500:	3f 4f       	sbci	r19, 0xFF	; 255
    1502:	4f 4f       	sbci	r20, 0xFF	; 255
    1504:	5f 4f       	sbci	r21, 0xFF	; 255
    1506:	0e c0       	rjmp	.+28     	; 0x1524 <__fixsfsi+0x9c>
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	09 c0       	rjmp	.+18     	; 0x1524 <__fixsfsi+0x9c>
    1512:	2f ef       	ldi	r18, 0xFF	; 255
    1514:	3f ef       	ldi	r19, 0xFF	; 255
    1516:	4f ef       	ldi	r20, 0xFF	; 255
    1518:	5f e7       	ldi	r21, 0x7F	; 127
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <__fixsfsi+0x9c>
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e8       	ldi	r21, 0x80	; 128
    1524:	b9 01       	movw	r22, r18
    1526:	ca 01       	movw	r24, r20
    1528:	2c 96       	adiw	r28, 0x0c	; 12
    152a:	e2 e0       	ldi	r30, 0x02	; 2
    152c:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__epilogue_restores__+0x20>

00001530 <__floatunsisf>:
    1530:	a8 e0       	ldi	r26, 0x08	; 8
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ee e9       	ldi	r30, 0x9E	; 158
    1536:	fa e0       	ldi	r31, 0x0A	; 10
    1538:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <__prologue_saves__+0x10>
    153c:	7b 01       	movw	r14, r22
    153e:	8c 01       	movw	r16, r24
    1540:	61 15       	cp	r22, r1
    1542:	71 05       	cpc	r23, r1
    1544:	81 05       	cpc	r24, r1
    1546:	91 05       	cpc	r25, r1
    1548:	19 f4       	brne	.+6      	; 0x1550 <__floatunsisf+0x20>
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	60 c0       	rjmp	.+192    	; 0x1610 <__floatunsisf+0xe0>
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	8e e1       	ldi	r24, 0x1E	; 30
    1556:	c8 2e       	mov	r12, r24
    1558:	d1 2c       	mov	r13, r1
    155a:	dc 82       	std	Y+4, r13	; 0x04
    155c:	cb 82       	std	Y+3, r12	; 0x03
    155e:	ed 82       	std	Y+5, r14	; 0x05
    1560:	fe 82       	std	Y+6, r15	; 0x06
    1562:	0f 83       	std	Y+7, r16	; 0x07
    1564:	18 87       	std	Y+8, r17	; 0x08
    1566:	c8 01       	movw	r24, r16
    1568:	b7 01       	movw	r22, r14
    156a:	0e 94 11 0b 	call	0x1622	; 0x1622 <__clzsi2>
    156e:	fc 01       	movw	r30, r24
    1570:	31 97       	sbiw	r30, 0x01	; 1
    1572:	f7 ff       	sbrs	r31, 7
    1574:	3b c0       	rjmp	.+118    	; 0x15ec <__floatunsisf+0xbc>
    1576:	22 27       	eor	r18, r18
    1578:	33 27       	eor	r19, r19
    157a:	2e 1b       	sub	r18, r30
    157c:	3f 0b       	sbc	r19, r31
    157e:	57 01       	movw	r10, r14
    1580:	68 01       	movw	r12, r16
    1582:	02 2e       	mov	r0, r18
    1584:	04 c0       	rjmp	.+8      	; 0x158e <__floatunsisf+0x5e>
    1586:	d6 94       	lsr	r13
    1588:	c7 94       	ror	r12
    158a:	b7 94       	ror	r11
    158c:	a7 94       	ror	r10
    158e:	0a 94       	dec	r0
    1590:	d2 f7       	brpl	.-12     	; 0x1586 <__floatunsisf+0x56>
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a0 e0       	ldi	r26, 0x00	; 0
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	04 c0       	rjmp	.+8      	; 0x15ac <__floatunsisf+0x7c>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	aa 1f       	adc	r26, r26
    15aa:	bb 1f       	adc	r27, r27
    15ac:	2a 95       	dec	r18
    15ae:	d2 f7       	brpl	.-12     	; 0x15a4 <__floatunsisf+0x74>
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	a1 09       	sbc	r26, r1
    15b4:	b1 09       	sbc	r27, r1
    15b6:	8e 21       	and	r24, r14
    15b8:	9f 21       	and	r25, r15
    15ba:	a0 23       	and	r26, r16
    15bc:	b1 23       	and	r27, r17
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	a1 05       	cpc	r26, r1
    15c2:	b1 05       	cpc	r27, r1
    15c4:	21 f0       	breq	.+8      	; 0x15ce <__floatunsisf+0x9e>
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	4a 29       	or	r20, r10
    15d0:	5b 29       	or	r21, r11
    15d2:	6c 29       	or	r22, r12
    15d4:	7d 29       	or	r23, r13
    15d6:	4d 83       	std	Y+5, r20	; 0x05
    15d8:	5e 83       	std	Y+6, r21	; 0x06
    15da:	6f 83       	std	Y+7, r22	; 0x07
    15dc:	78 87       	std	Y+8, r23	; 0x08
    15de:	8e e1       	ldi	r24, 0x1E	; 30
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	8e 1b       	sub	r24, r30
    15e4:	9f 0b       	sbc	r25, r31
    15e6:	9c 83       	std	Y+4, r25	; 0x04
    15e8:	8b 83       	std	Y+3, r24	; 0x03
    15ea:	12 c0       	rjmp	.+36     	; 0x1610 <__floatunsisf+0xe0>
    15ec:	30 97       	sbiw	r30, 0x00	; 0
    15ee:	81 f0       	breq	.+32     	; 0x1610 <__floatunsisf+0xe0>
    15f0:	0e 2e       	mov	r0, r30
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <__floatunsisf+0xcc>
    15f4:	ee 0c       	add	r14, r14
    15f6:	ff 1c       	adc	r15, r15
    15f8:	00 1f       	adc	r16, r16
    15fa:	11 1f       	adc	r17, r17
    15fc:	0a 94       	dec	r0
    15fe:	d2 f7       	brpl	.-12     	; 0x15f4 <__floatunsisf+0xc4>
    1600:	ed 82       	std	Y+5, r14	; 0x05
    1602:	fe 82       	std	Y+6, r15	; 0x06
    1604:	0f 83       	std	Y+7, r16	; 0x07
    1606:	18 87       	std	Y+8, r17	; 0x08
    1608:	ce 1a       	sub	r12, r30
    160a:	df 0a       	sbc	r13, r31
    160c:	dc 82       	std	Y+4, r13	; 0x04
    160e:	cb 82       	std	Y+3, r12	; 0x03
    1610:	1a 82       	std	Y+2, r1	; 0x02
    1612:	ce 01       	movw	r24, r28
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__pack_f>
    161a:	28 96       	adiw	r28, 0x08	; 8
    161c:	ea e0       	ldi	r30, 0x0A	; 10
    161e:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__epilogue_restores__+0x10>

00001622 <__clzsi2>:
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	7b 01       	movw	r14, r22
    162c:	8c 01       	movw	r16, r24
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	e8 16       	cp	r14, r24
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	f8 06       	cpc	r15, r24
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	08 07       	cpc	r16, r24
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	18 07       	cpc	r17, r24
    163e:	88 f4       	brcc	.+34     	; 0x1662 <__clzsi2+0x40>
    1640:	8f ef       	ldi	r24, 0xFF	; 255
    1642:	e8 16       	cp	r14, r24
    1644:	f1 04       	cpc	r15, r1
    1646:	01 05       	cpc	r16, r1
    1648:	11 05       	cpc	r17, r1
    164a:	31 f0       	breq	.+12     	; 0x1658 <__clzsi2+0x36>
    164c:	28 f0       	brcs	.+10     	; 0x1658 <__clzsi2+0x36>
    164e:	88 e0       	ldi	r24, 0x08	; 8
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a0 e0       	ldi	r26, 0x00	; 0
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	17 c0       	rjmp	.+46     	; 0x1686 <__clzsi2+0x64>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a0 e0       	ldi	r26, 0x00	; 0
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	12 c0       	rjmp	.+36     	; 0x1686 <__clzsi2+0x64>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	e8 16       	cp	r14, r24
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	f8 06       	cpc	r15, r24
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	08 07       	cpc	r16, r24
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	18 07       	cpc	r17, r24
    1672:	28 f0       	brcs	.+10     	; 0x167e <__clzsi2+0x5c>
    1674:	88 e1       	ldi	r24, 0x18	; 24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a0 e0       	ldi	r26, 0x00	; 0
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	04 c0       	rjmp	.+8      	; 0x1686 <__clzsi2+0x64>
    167e:	80 e1       	ldi	r24, 0x10	; 16
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	a0 e0       	ldi	r26, 0x00	; 0
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	20 e2       	ldi	r18, 0x20	; 32
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	28 1b       	sub	r18, r24
    1690:	39 0b       	sbc	r19, r25
    1692:	4a 0b       	sbc	r20, r26
    1694:	5b 0b       	sbc	r21, r27
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <__clzsi2+0x7e>
    1698:	16 95       	lsr	r17
    169a:	07 95       	ror	r16
    169c:	f7 94       	ror	r15
    169e:	e7 94       	ror	r14
    16a0:	8a 95       	dec	r24
    16a2:	d2 f7       	brpl	.-12     	; 0x1698 <__clzsi2+0x76>
    16a4:	f7 01       	movw	r30, r14
    16a6:	ee 5c       	subi	r30, 0xCE	; 206
    16a8:	fd 4f       	sbci	r31, 0xFD	; 253
    16aa:	80 81       	ld	r24, Z
    16ac:	28 1b       	sub	r18, r24
    16ae:	31 09       	sbc	r19, r1
    16b0:	41 09       	sbc	r20, r1
    16b2:	51 09       	sbc	r21, r1
    16b4:	c9 01       	movw	r24, r18
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	08 95       	ret

000016c0 <__pack_f>:
    16c0:	df 92       	push	r13
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	fc 01       	movw	r30, r24
    16cc:	e4 80       	ldd	r14, Z+4	; 0x04
    16ce:	f5 80       	ldd	r15, Z+5	; 0x05
    16d0:	06 81       	ldd	r16, Z+6	; 0x06
    16d2:	17 81       	ldd	r17, Z+7	; 0x07
    16d4:	d1 80       	ldd	r13, Z+1	; 0x01
    16d6:	80 81       	ld	r24, Z
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	48 f4       	brcc	.+18     	; 0x16ee <__pack_f+0x2e>
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a0 e1       	ldi	r26, 0x10	; 16
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e8 2a       	or	r14, r24
    16e6:	f9 2a       	or	r15, r25
    16e8:	0a 2b       	or	r16, r26
    16ea:	1b 2b       	or	r17, r27
    16ec:	a5 c0       	rjmp	.+330    	; 0x1838 <__pack_f+0x178>
    16ee:	84 30       	cpi	r24, 0x04	; 4
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <__pack_f+0x34>
    16f2:	9f c0       	rjmp	.+318    	; 0x1832 <__pack_f+0x172>
    16f4:	82 30       	cpi	r24, 0x02	; 2
    16f6:	21 f4       	brne	.+8      	; 0x1700 <__pack_f+0x40>
    16f8:	ee 24       	eor	r14, r14
    16fa:	ff 24       	eor	r15, r15
    16fc:	87 01       	movw	r16, r14
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <__pack_f+0x4a>
    1700:	e1 14       	cp	r14, r1
    1702:	f1 04       	cpc	r15, r1
    1704:	01 05       	cpc	r16, r1
    1706:	11 05       	cpc	r17, r1
    1708:	19 f4       	brne	.+6      	; 0x1710 <__pack_f+0x50>
    170a:	e0 e0       	ldi	r30, 0x00	; 0
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	96 c0       	rjmp	.+300    	; 0x183c <__pack_f+0x17c>
    1710:	62 81       	ldd	r22, Z+2	; 0x02
    1712:	73 81       	ldd	r23, Z+3	; 0x03
    1714:	9f ef       	ldi	r25, 0xFF	; 255
    1716:	62 38       	cpi	r22, 0x82	; 130
    1718:	79 07       	cpc	r23, r25
    171a:	0c f0       	brlt	.+2      	; 0x171e <__pack_f+0x5e>
    171c:	5b c0       	rjmp	.+182    	; 0x17d4 <__pack_f+0x114>
    171e:	22 e8       	ldi	r18, 0x82	; 130
    1720:	3f ef       	ldi	r19, 0xFF	; 255
    1722:	26 1b       	sub	r18, r22
    1724:	37 0b       	sbc	r19, r23
    1726:	2a 31       	cpi	r18, 0x1A	; 26
    1728:	31 05       	cpc	r19, r1
    172a:	2c f0       	brlt	.+10     	; 0x1736 <__pack_f+0x76>
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	2a c0       	rjmp	.+84     	; 0x178a <__pack_f+0xca>
    1736:	b8 01       	movw	r22, r16
    1738:	a7 01       	movw	r20, r14
    173a:	02 2e       	mov	r0, r18
    173c:	04 c0       	rjmp	.+8      	; 0x1746 <__pack_f+0x86>
    173e:	76 95       	lsr	r23
    1740:	67 95       	ror	r22
    1742:	57 95       	ror	r21
    1744:	47 95       	ror	r20
    1746:	0a 94       	dec	r0
    1748:	d2 f7       	brpl	.-12     	; 0x173e <__pack_f+0x7e>
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	04 c0       	rjmp	.+8      	; 0x175c <__pack_f+0x9c>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	aa 1f       	adc	r26, r26
    175a:	bb 1f       	adc	r27, r27
    175c:	2a 95       	dec	r18
    175e:	d2 f7       	brpl	.-12     	; 0x1754 <__pack_f+0x94>
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	a1 09       	sbc	r26, r1
    1764:	b1 09       	sbc	r27, r1
    1766:	8e 21       	and	r24, r14
    1768:	9f 21       	and	r25, r15
    176a:	a0 23       	and	r26, r16
    176c:	b1 23       	and	r27, r17
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	a1 05       	cpc	r26, r1
    1772:	b1 05       	cpc	r27, r1
    1774:	21 f0       	breq	.+8      	; 0x177e <__pack_f+0xbe>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a0 e0       	ldi	r26, 0x00	; 0
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	9a 01       	movw	r18, r20
    1780:	ab 01       	movw	r20, r22
    1782:	28 2b       	or	r18, r24
    1784:	39 2b       	or	r19, r25
    1786:	4a 2b       	or	r20, r26
    1788:	5b 2b       	or	r21, r27
    178a:	da 01       	movw	r26, r20
    178c:	c9 01       	movw	r24, r18
    178e:	8f 77       	andi	r24, 0x7F	; 127
    1790:	90 70       	andi	r25, 0x00	; 0
    1792:	a0 70       	andi	r26, 0x00	; 0
    1794:	b0 70       	andi	r27, 0x00	; 0
    1796:	80 34       	cpi	r24, 0x40	; 64
    1798:	91 05       	cpc	r25, r1
    179a:	a1 05       	cpc	r26, r1
    179c:	b1 05       	cpc	r27, r1
    179e:	39 f4       	brne	.+14     	; 0x17ae <__pack_f+0xee>
    17a0:	27 ff       	sbrs	r18, 7
    17a2:	09 c0       	rjmp	.+18     	; 0x17b6 <__pack_f+0xf6>
    17a4:	20 5c       	subi	r18, 0xC0	; 192
    17a6:	3f 4f       	sbci	r19, 0xFF	; 255
    17a8:	4f 4f       	sbci	r20, 0xFF	; 255
    17aa:	5f 4f       	sbci	r21, 0xFF	; 255
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <__pack_f+0xf6>
    17ae:	21 5c       	subi	r18, 0xC1	; 193
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	4f 4f       	sbci	r20, 0xFF	; 255
    17b4:	5f 4f       	sbci	r21, 0xFF	; 255
    17b6:	e0 e0       	ldi	r30, 0x00	; 0
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	20 30       	cpi	r18, 0x00	; 0
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	3a 07       	cpc	r19, r26
    17c0:	a0 e0       	ldi	r26, 0x00	; 0
    17c2:	4a 07       	cpc	r20, r26
    17c4:	a0 e4       	ldi	r26, 0x40	; 64
    17c6:	5a 07       	cpc	r21, r26
    17c8:	10 f0       	brcs	.+4      	; 0x17ce <__pack_f+0x10e>
    17ca:	e1 e0       	ldi	r30, 0x01	; 1
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	79 01       	movw	r14, r18
    17d0:	8a 01       	movw	r16, r20
    17d2:	27 c0       	rjmp	.+78     	; 0x1822 <__pack_f+0x162>
    17d4:	60 38       	cpi	r22, 0x80	; 128
    17d6:	71 05       	cpc	r23, r1
    17d8:	64 f5       	brge	.+88     	; 0x1832 <__pack_f+0x172>
    17da:	fb 01       	movw	r30, r22
    17dc:	e1 58       	subi	r30, 0x81	; 129
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	d8 01       	movw	r26, r16
    17e2:	c7 01       	movw	r24, r14
    17e4:	8f 77       	andi	r24, 0x7F	; 127
    17e6:	90 70       	andi	r25, 0x00	; 0
    17e8:	a0 70       	andi	r26, 0x00	; 0
    17ea:	b0 70       	andi	r27, 0x00	; 0
    17ec:	80 34       	cpi	r24, 0x40	; 64
    17ee:	91 05       	cpc	r25, r1
    17f0:	a1 05       	cpc	r26, r1
    17f2:	b1 05       	cpc	r27, r1
    17f4:	39 f4       	brne	.+14     	; 0x1804 <__pack_f+0x144>
    17f6:	e7 fe       	sbrs	r14, 7
    17f8:	0d c0       	rjmp	.+26     	; 0x1814 <__pack_f+0x154>
    17fa:	80 e4       	ldi	r24, 0x40	; 64
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a0 e0       	ldi	r26, 0x00	; 0
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	04 c0       	rjmp	.+8      	; 0x180c <__pack_f+0x14c>
    1804:	8f e3       	ldi	r24, 0x3F	; 63
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 e0       	ldi	r26, 0x00	; 0
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e8 0e       	add	r14, r24
    180e:	f9 1e       	adc	r15, r25
    1810:	0a 1f       	adc	r16, r26
    1812:	1b 1f       	adc	r17, r27
    1814:	17 ff       	sbrs	r17, 7
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <__pack_f+0x162>
    1818:	16 95       	lsr	r17
    181a:	07 95       	ror	r16
    181c:	f7 94       	ror	r15
    181e:	e7 94       	ror	r14
    1820:	31 96       	adiw	r30, 0x01	; 1
    1822:	87 e0       	ldi	r24, 0x07	; 7
    1824:	16 95       	lsr	r17
    1826:	07 95       	ror	r16
    1828:	f7 94       	ror	r15
    182a:	e7 94       	ror	r14
    182c:	8a 95       	dec	r24
    182e:	d1 f7       	brne	.-12     	; 0x1824 <__pack_f+0x164>
    1830:	05 c0       	rjmp	.+10     	; 0x183c <__pack_f+0x17c>
    1832:	ee 24       	eor	r14, r14
    1834:	ff 24       	eor	r15, r15
    1836:	87 01       	movw	r16, r14
    1838:	ef ef       	ldi	r30, 0xFF	; 255
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	6e 2f       	mov	r22, r30
    183e:	67 95       	ror	r22
    1840:	66 27       	eor	r22, r22
    1842:	67 95       	ror	r22
    1844:	90 2f       	mov	r25, r16
    1846:	9f 77       	andi	r25, 0x7F	; 127
    1848:	d7 94       	ror	r13
    184a:	dd 24       	eor	r13, r13
    184c:	d7 94       	ror	r13
    184e:	8e 2f       	mov	r24, r30
    1850:	86 95       	lsr	r24
    1852:	49 2f       	mov	r20, r25
    1854:	46 2b       	or	r20, r22
    1856:	58 2f       	mov	r21, r24
    1858:	5d 29       	or	r21, r13
    185a:	b7 01       	movw	r22, r14
    185c:	ca 01       	movw	r24, r20
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	ff 90       	pop	r15
    1864:	ef 90       	pop	r14
    1866:	df 90       	pop	r13
    1868:	08 95       	ret

0000186a <__unpack_f>:
    186a:	fc 01       	movw	r30, r24
    186c:	db 01       	movw	r26, r22
    186e:	40 81       	ld	r20, Z
    1870:	51 81       	ldd	r21, Z+1	; 0x01
    1872:	22 81       	ldd	r18, Z+2	; 0x02
    1874:	62 2f       	mov	r22, r18
    1876:	6f 77       	andi	r22, 0x7F	; 127
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	22 1f       	adc	r18, r18
    187c:	22 27       	eor	r18, r18
    187e:	22 1f       	adc	r18, r18
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	89 2f       	mov	r24, r25
    1884:	88 0f       	add	r24, r24
    1886:	82 2b       	or	r24, r18
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	99 1f       	adc	r25, r25
    188e:	99 27       	eor	r25, r25
    1890:	99 1f       	adc	r25, r25
    1892:	11 96       	adiw	r26, 0x01	; 1
    1894:	9c 93       	st	X, r25
    1896:	11 97       	sbiw	r26, 0x01	; 1
    1898:	21 15       	cp	r18, r1
    189a:	31 05       	cpc	r19, r1
    189c:	a9 f5       	brne	.+106    	; 0x1908 <__unpack_f+0x9e>
    189e:	41 15       	cp	r20, r1
    18a0:	51 05       	cpc	r21, r1
    18a2:	61 05       	cpc	r22, r1
    18a4:	71 05       	cpc	r23, r1
    18a6:	11 f4       	brne	.+4      	; 0x18ac <__unpack_f+0x42>
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	37 c0       	rjmp	.+110    	; 0x191a <__unpack_f+0xb0>
    18ac:	82 e8       	ldi	r24, 0x82	; 130
    18ae:	9f ef       	ldi	r25, 0xFF	; 255
    18b0:	13 96       	adiw	r26, 0x03	; 3
    18b2:	9c 93       	st	X, r25
    18b4:	8e 93       	st	-X, r24
    18b6:	12 97       	sbiw	r26, 0x02	; 2
    18b8:	9a 01       	movw	r18, r20
    18ba:	ab 01       	movw	r20, r22
    18bc:	67 e0       	ldi	r22, 0x07	; 7
    18be:	22 0f       	add	r18, r18
    18c0:	33 1f       	adc	r19, r19
    18c2:	44 1f       	adc	r20, r20
    18c4:	55 1f       	adc	r21, r21
    18c6:	6a 95       	dec	r22
    18c8:	d1 f7       	brne	.-12     	; 0x18be <__unpack_f+0x54>
    18ca:	83 e0       	ldi	r24, 0x03	; 3
    18cc:	8c 93       	st	X, r24
    18ce:	0d c0       	rjmp	.+26     	; 0x18ea <__unpack_f+0x80>
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	44 1f       	adc	r20, r20
    18d6:	55 1f       	adc	r21, r21
    18d8:	12 96       	adiw	r26, 0x02	; 2
    18da:	8d 91       	ld	r24, X+
    18dc:	9c 91       	ld	r25, X
    18de:	13 97       	sbiw	r26, 0x03	; 3
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	13 96       	adiw	r26, 0x03	; 3
    18e4:	9c 93       	st	X, r25
    18e6:	8e 93       	st	-X, r24
    18e8:	12 97       	sbiw	r26, 0x02	; 2
    18ea:	20 30       	cpi	r18, 0x00	; 0
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	38 07       	cpc	r19, r24
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	48 07       	cpc	r20, r24
    18f4:	80 e4       	ldi	r24, 0x40	; 64
    18f6:	58 07       	cpc	r21, r24
    18f8:	58 f3       	brcs	.-42     	; 0x18d0 <__unpack_f+0x66>
    18fa:	14 96       	adiw	r26, 0x04	; 4
    18fc:	2d 93       	st	X+, r18
    18fe:	3d 93       	st	X+, r19
    1900:	4d 93       	st	X+, r20
    1902:	5c 93       	st	X, r21
    1904:	17 97       	sbiw	r26, 0x07	; 7
    1906:	08 95       	ret
    1908:	2f 3f       	cpi	r18, 0xFF	; 255
    190a:	31 05       	cpc	r19, r1
    190c:	79 f4       	brne	.+30     	; 0x192c <__unpack_f+0xc2>
    190e:	41 15       	cp	r20, r1
    1910:	51 05       	cpc	r21, r1
    1912:	61 05       	cpc	r22, r1
    1914:	71 05       	cpc	r23, r1
    1916:	19 f4       	brne	.+6      	; 0x191e <__unpack_f+0xb4>
    1918:	84 e0       	ldi	r24, 0x04	; 4
    191a:	8c 93       	st	X, r24
    191c:	08 95       	ret
    191e:	64 ff       	sbrs	r22, 4
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <__unpack_f+0xbe>
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	8c 93       	st	X, r24
    1926:	12 c0       	rjmp	.+36     	; 0x194c <__unpack_f+0xe2>
    1928:	1c 92       	st	X, r1
    192a:	10 c0       	rjmp	.+32     	; 0x194c <__unpack_f+0xe2>
    192c:	2f 57       	subi	r18, 0x7F	; 127
    192e:	30 40       	sbci	r19, 0x00	; 0
    1930:	13 96       	adiw	r26, 0x03	; 3
    1932:	3c 93       	st	X, r19
    1934:	2e 93       	st	-X, r18
    1936:	12 97       	sbiw	r26, 0x02	; 2
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	8c 93       	st	X, r24
    193c:	87 e0       	ldi	r24, 0x07	; 7
    193e:	44 0f       	add	r20, r20
    1940:	55 1f       	adc	r21, r21
    1942:	66 1f       	adc	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	8a 95       	dec	r24
    1948:	d1 f7       	brne	.-12     	; 0x193e <__unpack_f+0xd4>
    194a:	70 64       	ori	r23, 0x40	; 64
    194c:	14 96       	adiw	r26, 0x04	; 4
    194e:	4d 93       	st	X+, r20
    1950:	5d 93       	st	X+, r21
    1952:	6d 93       	st	X+, r22
    1954:	7c 93       	st	X, r23
    1956:	17 97       	sbiw	r26, 0x07	; 7
    1958:	08 95       	ret

0000195a <__udivmodhi4>:
    195a:	aa 1b       	sub	r26, r26
    195c:	bb 1b       	sub	r27, r27
    195e:	51 e1       	ldi	r21, 0x11	; 17
    1960:	07 c0       	rjmp	.+14     	; 0x1970 <__udivmodhi4_ep>

00001962 <__udivmodhi4_loop>:
    1962:	aa 1f       	adc	r26, r26
    1964:	bb 1f       	adc	r27, r27
    1966:	a6 17       	cp	r26, r22
    1968:	b7 07       	cpc	r27, r23
    196a:	10 f0       	brcs	.+4      	; 0x1970 <__udivmodhi4_ep>
    196c:	a6 1b       	sub	r26, r22
    196e:	b7 0b       	sbc	r27, r23

00001970 <__udivmodhi4_ep>:
    1970:	88 1f       	adc	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	5a 95       	dec	r21
    1976:	a9 f7       	brne	.-22     	; 0x1962 <__udivmodhi4_loop>
    1978:	80 95       	com	r24
    197a:	90 95       	com	r25
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	08 95       	ret

00001982 <__divmodhi4>:
    1982:	97 fb       	bst	r25, 7
    1984:	09 2e       	mov	r0, r25
    1986:	07 26       	eor	r0, r23
    1988:	0a d0       	rcall	.+20     	; 0x199e <__divmodhi4_neg1>
    198a:	77 fd       	sbrc	r23, 7
    198c:	04 d0       	rcall	.+8      	; 0x1996 <__divmodhi4_neg2>
    198e:	e5 df       	rcall	.-54     	; 0x195a <__udivmodhi4>
    1990:	06 d0       	rcall	.+12     	; 0x199e <__divmodhi4_neg1>
    1992:	00 20       	and	r0, r0
    1994:	1a f4       	brpl	.+6      	; 0x199c <__divmodhi4_exit>

00001996 <__divmodhi4_neg2>:
    1996:	70 95       	com	r23
    1998:	61 95       	neg	r22
    199a:	7f 4f       	sbci	r23, 0xFF	; 255

0000199c <__divmodhi4_exit>:
    199c:	08 95       	ret

0000199e <__divmodhi4_neg1>:
    199e:	f6 f7       	brtc	.-4      	; 0x199c <__divmodhi4_exit>
    19a0:	90 95       	com	r25
    19a2:	81 95       	neg	r24
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	08 95       	ret

000019a8 <__prologue_saves__>:
    19a8:	2f 92       	push	r2
    19aa:	3f 92       	push	r3
    19ac:	4f 92       	push	r4
    19ae:	5f 92       	push	r5
    19b0:	6f 92       	push	r6
    19b2:	7f 92       	push	r7
    19b4:	8f 92       	push	r8
    19b6:	9f 92       	push	r9
    19b8:	af 92       	push	r10
    19ba:	bf 92       	push	r11
    19bc:	cf 92       	push	r12
    19be:	df 92       	push	r13
    19c0:	ef 92       	push	r14
    19c2:	ff 92       	push	r15
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	ca 1b       	sub	r28, r26
    19d2:	db 0b       	sbc	r29, r27
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	09 94       	ijmp

000019e0 <__epilogue_restores__>:
    19e0:	2a 88       	ldd	r2, Y+18	; 0x12
    19e2:	39 88       	ldd	r3, Y+17	; 0x11
    19e4:	48 88       	ldd	r4, Y+16	; 0x10
    19e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    19e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    19ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    19ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    19ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    19f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    19f2:	b9 84       	ldd	r11, Y+9	; 0x09
    19f4:	c8 84       	ldd	r12, Y+8	; 0x08
    19f6:	df 80       	ldd	r13, Y+7	; 0x07
    19f8:	ee 80       	ldd	r14, Y+6	; 0x06
    19fa:	fd 80       	ldd	r15, Y+5	; 0x05
    19fc:	0c 81       	ldd	r16, Y+4	; 0x04
    19fe:	1b 81       	ldd	r17, Y+3	; 0x03
    1a00:	aa 81       	ldd	r26, Y+2	; 0x02
    1a02:	b9 81       	ldd	r27, Y+1	; 0x01
    1a04:	ce 0f       	add	r28, r30
    1a06:	d1 1d       	adc	r29, r1
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	ed 01       	movw	r28, r26
    1a14:	08 95       	ret

00001a16 <strcmp>:
    1a16:	fb 01       	movw	r30, r22
    1a18:	dc 01       	movw	r26, r24
    1a1a:	8d 91       	ld	r24, X+
    1a1c:	01 90       	ld	r0, Z+
    1a1e:	80 19       	sub	r24, r0
    1a20:	01 10       	cpse	r0, r1
    1a22:	d9 f3       	breq	.-10     	; 0x1a1a <strcmp+0x4>
    1a24:	99 0b       	sbc	r25, r25
    1a26:	08 95       	ret

00001a28 <fprintf>:
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	9e 01       	movw	r18, r28
    1a32:	27 5f       	subi	r18, 0xF7	; 247
    1a34:	3f 4f       	sbci	r19, 0xFF	; 255
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3c:	78 85       	ldd	r23, Y+8	; 0x08
    1a3e:	a9 01       	movw	r20, r18
    1a40:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <vfprintf>
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <fputc>:
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	8c 01       	movw	r16, r24
    1a54:	eb 01       	movw	r28, r22
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	81 ff       	sbrs	r24, 1
    1a5a:	1b c0       	rjmp	.+54     	; 0x1a92 <fputc+0x48>
    1a5c:	82 ff       	sbrs	r24, 2
    1a5e:	0d c0       	rjmp	.+26     	; 0x1a7a <fputc+0x30>
    1a60:	2e 81       	ldd	r18, Y+6	; 0x06
    1a62:	3f 81       	ldd	r19, Y+7	; 0x07
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	9d 81       	ldd	r25, Y+5	; 0x05
    1a68:	28 17       	cp	r18, r24
    1a6a:	39 07       	cpc	r19, r25
    1a6c:	64 f4       	brge	.+24     	; 0x1a86 <fputc+0x3c>
    1a6e:	e8 81       	ld	r30, Y
    1a70:	f9 81       	ldd	r31, Y+1	; 0x01
    1a72:	01 93       	st	Z+, r16
    1a74:	f9 83       	std	Y+1, r31	; 0x01
    1a76:	e8 83       	st	Y, r30
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <fputc+0x3c>
    1a7a:	e8 85       	ldd	r30, Y+8	; 0x08
    1a7c:	f9 85       	ldd	r31, Y+9	; 0x09
    1a7e:	80 2f       	mov	r24, r16
    1a80:	09 95       	icall
    1a82:	89 2b       	or	r24, r25
    1a84:	31 f4       	brne	.+12     	; 0x1a92 <fputc+0x48>
    1a86:	8e 81       	ldd	r24, Y+6	; 0x06
    1a88:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	9f 83       	std	Y+7, r25	; 0x07
    1a8e:	8e 83       	std	Y+6, r24	; 0x06
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <fputc+0x4c>
    1a92:	0f ef       	ldi	r16, 0xFF	; 255
    1a94:	1f ef       	ldi	r17, 0xFF	; 255
    1a96:	c8 01       	movw	r24, r16
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	08 95       	ret

00001aa2 <fputs>:
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	7c 01       	movw	r14, r24
    1ab0:	8b 01       	movw	r16, r22
    1ab2:	db 01       	movw	r26, r22
    1ab4:	13 96       	adiw	r26, 0x03	; 3
    1ab6:	8c 91       	ld	r24, X
    1ab8:	81 fd       	sbrc	r24, 1
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <fputs+0x20>
    1abc:	cf ef       	ldi	r28, 0xFF	; 255
    1abe:	df ef       	ldi	r29, 0xFF	; 255
    1ac0:	13 c0       	rjmp	.+38     	; 0x1ae8 <fputs+0x46>
    1ac2:	c0 e0       	ldi	r28, 0x00	; 0
    1ac4:	d0 e0       	ldi	r29, 0x00	; 0
    1ac6:	0b c0       	rjmp	.+22     	; 0x1ade <fputs+0x3c>
    1ac8:	d8 01       	movw	r26, r16
    1aca:	18 96       	adiw	r26, 0x08	; 8
    1acc:	ed 91       	ld	r30, X+
    1ace:	fc 91       	ld	r31, X
    1ad0:	19 97       	sbiw	r26, 0x09	; 9
    1ad2:	b8 01       	movw	r22, r16
    1ad4:	09 95       	icall
    1ad6:	89 2b       	or	r24, r25
    1ad8:	11 f0       	breq	.+4      	; 0x1ade <fputs+0x3c>
    1ada:	cf ef       	ldi	r28, 0xFF	; 255
    1adc:	df ef       	ldi	r29, 0xFF	; 255
    1ade:	f7 01       	movw	r30, r14
    1ae0:	81 91       	ld	r24, Z+
    1ae2:	7f 01       	movw	r14, r30
    1ae4:	88 23       	and	r24, r24
    1ae6:	81 f7       	brne	.-32     	; 0x1ac8 <fputs+0x26>
    1ae8:	ce 01       	movw	r24, r28
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	ff 90       	pop	r15
    1af4:	ef 90       	pop	r14
    1af6:	08 95       	ret

00001af8 <fscanf>:
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	9e 01       	movw	r18, r28
    1b02:	27 5f       	subi	r18, 0xF7	; 247
    1b04:	3f 4f       	sbci	r19, 0xFF	; 255
    1b06:	8d 81       	ldd	r24, Y+5	; 0x05
    1b08:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0c:	78 85       	ldd	r23, Y+8	; 0x08
    1b0e:	a9 01       	movw	r20, r18
    1b10:	0e 94 73 11 	call	0x22e6	; 0x22e6 <vfscanf>
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <sprintf>:
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	2e 97       	sbiw	r28, 0x0e	; 14
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	0d 89       	ldd	r16, Y+21	; 0x15
    1b34:	1e 89       	ldd	r17, Y+22	; 0x16
    1b36:	86 e0       	ldi	r24, 0x06	; 6
    1b38:	8c 83       	std	Y+4, r24	; 0x04
    1b3a:	1a 83       	std	Y+2, r17	; 0x02
    1b3c:	09 83       	std	Y+1, r16	; 0x01
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	9f e7       	ldi	r25, 0x7F	; 127
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	9e 01       	movw	r18, r28
    1b48:	27 5e       	subi	r18, 0xE7	; 231
    1b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	6f 89       	ldd	r22, Y+23	; 0x17
    1b52:	78 8d       	ldd	r23, Y+24	; 0x18
    1b54:	a9 01       	movw	r20, r18
    1b56:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <vfprintf>
    1b5a:	2f 81       	ldd	r18, Y+7	; 0x07
    1b5c:	38 85       	ldd	r19, Y+8	; 0x08
    1b5e:	02 0f       	add	r16, r18
    1b60:	13 1f       	adc	r17, r19
    1b62:	f8 01       	movw	r30, r16
    1b64:	10 82       	st	Z, r1
    1b66:	2e 96       	adiw	r28, 0x0e	; 14
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	08 95       	ret

00001b7c <vfprintf>:
    1b7c:	2f 92       	push	r2
    1b7e:	3f 92       	push	r3
    1b80:	4f 92       	push	r4
    1b82:	5f 92       	push	r5
    1b84:	6f 92       	push	r6
    1b86:	7f 92       	push	r7
    1b88:	8f 92       	push	r8
    1b8a:	9f 92       	push	r9
    1b8c:	af 92       	push	r10
    1b8e:	bf 92       	push	r11
    1b90:	cf 92       	push	r12
    1b92:	df 92       	push	r13
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	2b 97       	sbiw	r28, 0x0b	; 11
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	3c 01       	movw	r6, r24
    1bb2:	2b 01       	movw	r4, r22
    1bb4:	5a 01       	movw	r10, r20
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	17 82       	std	Z+7, r1	; 0x07
    1bba:	16 82       	std	Z+6, r1	; 0x06
    1bbc:	83 81       	ldd	r24, Z+3	; 0x03
    1bbe:	81 fd       	sbrc	r24, 1
    1bc0:	03 c0       	rjmp	.+6      	; 0x1bc8 <vfprintf+0x4c>
    1bc2:	6f ef       	ldi	r22, 0xFF	; 255
    1bc4:	7f ef       	ldi	r23, 0xFF	; 255
    1bc6:	c6 c1       	rjmp	.+908    	; 0x1f54 <vfprintf+0x3d8>
    1bc8:	9a e0       	ldi	r25, 0x0A	; 10
    1bca:	89 2e       	mov	r8, r25
    1bcc:	1e 01       	movw	r2, r28
    1bce:	08 94       	sec
    1bd0:	21 1c       	adc	r2, r1
    1bd2:	31 1c       	adc	r3, r1
    1bd4:	f3 01       	movw	r30, r6
    1bd6:	23 81       	ldd	r18, Z+3	; 0x03
    1bd8:	f2 01       	movw	r30, r4
    1bda:	23 fd       	sbrc	r18, 3
    1bdc:	85 91       	lpm	r24, Z+
    1bde:	23 ff       	sbrs	r18, 3
    1be0:	81 91       	ld	r24, Z+
    1be2:	2f 01       	movw	r4, r30
    1be4:	88 23       	and	r24, r24
    1be6:	09 f4       	brne	.+2      	; 0x1bea <vfprintf+0x6e>
    1be8:	b2 c1       	rjmp	.+868    	; 0x1f4e <vfprintf+0x3d2>
    1bea:	85 32       	cpi	r24, 0x25	; 37
    1bec:	39 f4       	brne	.+14     	; 0x1bfc <vfprintf+0x80>
    1bee:	23 fd       	sbrc	r18, 3
    1bf0:	85 91       	lpm	r24, Z+
    1bf2:	23 ff       	sbrs	r18, 3
    1bf4:	81 91       	ld	r24, Z+
    1bf6:	2f 01       	movw	r4, r30
    1bf8:	85 32       	cpi	r24, 0x25	; 37
    1bfa:	29 f4       	brne	.+10     	; 0x1c06 <vfprintf+0x8a>
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	b3 01       	movw	r22, r6
    1c00:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <fputc>
    1c04:	e7 cf       	rjmp	.-50     	; 0x1bd4 <vfprintf+0x58>
    1c06:	98 2f       	mov	r25, r24
    1c08:	ff 24       	eor	r15, r15
    1c0a:	ee 24       	eor	r14, r14
    1c0c:	99 24       	eor	r9, r9
    1c0e:	ff e1       	ldi	r31, 0x1F	; 31
    1c10:	ff 15       	cp	r31, r15
    1c12:	d0 f0       	brcs	.+52     	; 0x1c48 <vfprintf+0xcc>
    1c14:	9b 32       	cpi	r25, 0x2B	; 43
    1c16:	69 f0       	breq	.+26     	; 0x1c32 <vfprintf+0xb6>
    1c18:	9c 32       	cpi	r25, 0x2C	; 44
    1c1a:	28 f4       	brcc	.+10     	; 0x1c26 <vfprintf+0xaa>
    1c1c:	90 32       	cpi	r25, 0x20	; 32
    1c1e:	59 f0       	breq	.+22     	; 0x1c36 <vfprintf+0xba>
    1c20:	93 32       	cpi	r25, 0x23	; 35
    1c22:	91 f4       	brne	.+36     	; 0x1c48 <vfprintf+0xcc>
    1c24:	0e c0       	rjmp	.+28     	; 0x1c42 <vfprintf+0xc6>
    1c26:	9d 32       	cpi	r25, 0x2D	; 45
    1c28:	49 f0       	breq	.+18     	; 0x1c3c <vfprintf+0xc0>
    1c2a:	90 33       	cpi	r25, 0x30	; 48
    1c2c:	69 f4       	brne	.+26     	; 0x1c48 <vfprintf+0xcc>
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	24 c0       	rjmp	.+72     	; 0x1c7a <vfprintf+0xfe>
    1c32:	52 e0       	ldi	r21, 0x02	; 2
    1c34:	f5 2a       	or	r15, r21
    1c36:	84 e0       	ldi	r24, 0x04	; 4
    1c38:	f8 2a       	or	r15, r24
    1c3a:	28 c0       	rjmp	.+80     	; 0x1c8c <vfprintf+0x110>
    1c3c:	98 e0       	ldi	r25, 0x08	; 8
    1c3e:	f9 2a       	or	r15, r25
    1c40:	25 c0       	rjmp	.+74     	; 0x1c8c <vfprintf+0x110>
    1c42:	e0 e1       	ldi	r30, 0x10	; 16
    1c44:	fe 2a       	or	r15, r30
    1c46:	22 c0       	rjmp	.+68     	; 0x1c8c <vfprintf+0x110>
    1c48:	f7 fc       	sbrc	r15, 7
    1c4a:	29 c0       	rjmp	.+82     	; 0x1c9e <vfprintf+0x122>
    1c4c:	89 2f       	mov	r24, r25
    1c4e:	80 53       	subi	r24, 0x30	; 48
    1c50:	8a 30       	cpi	r24, 0x0A	; 10
    1c52:	70 f4       	brcc	.+28     	; 0x1c70 <vfprintf+0xf4>
    1c54:	f6 fe       	sbrs	r15, 6
    1c56:	05 c0       	rjmp	.+10     	; 0x1c62 <vfprintf+0xe6>
    1c58:	98 9c       	mul	r9, r8
    1c5a:	90 2c       	mov	r9, r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	98 0e       	add	r9, r24
    1c60:	15 c0       	rjmp	.+42     	; 0x1c8c <vfprintf+0x110>
    1c62:	e8 9c       	mul	r14, r8
    1c64:	e0 2c       	mov	r14, r0
    1c66:	11 24       	eor	r1, r1
    1c68:	e8 0e       	add	r14, r24
    1c6a:	f0 e2       	ldi	r31, 0x20	; 32
    1c6c:	ff 2a       	or	r15, r31
    1c6e:	0e c0       	rjmp	.+28     	; 0x1c8c <vfprintf+0x110>
    1c70:	9e 32       	cpi	r25, 0x2E	; 46
    1c72:	29 f4       	brne	.+10     	; 0x1c7e <vfprintf+0x102>
    1c74:	f6 fc       	sbrc	r15, 6
    1c76:	6b c1       	rjmp	.+726    	; 0x1f4e <vfprintf+0x3d2>
    1c78:	40 e4       	ldi	r20, 0x40	; 64
    1c7a:	f4 2a       	or	r15, r20
    1c7c:	07 c0       	rjmp	.+14     	; 0x1c8c <vfprintf+0x110>
    1c7e:	9c 36       	cpi	r25, 0x6C	; 108
    1c80:	19 f4       	brne	.+6      	; 0x1c88 <vfprintf+0x10c>
    1c82:	50 e8       	ldi	r21, 0x80	; 128
    1c84:	f5 2a       	or	r15, r21
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <vfprintf+0x110>
    1c88:	98 36       	cpi	r25, 0x68	; 104
    1c8a:	49 f4       	brne	.+18     	; 0x1c9e <vfprintf+0x122>
    1c8c:	f2 01       	movw	r30, r4
    1c8e:	23 fd       	sbrc	r18, 3
    1c90:	95 91       	lpm	r25, Z+
    1c92:	23 ff       	sbrs	r18, 3
    1c94:	91 91       	ld	r25, Z+
    1c96:	2f 01       	movw	r4, r30
    1c98:	99 23       	and	r25, r25
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <vfprintf+0x122>
    1c9c:	b8 cf       	rjmp	.-144    	; 0x1c0e <vfprintf+0x92>
    1c9e:	89 2f       	mov	r24, r25
    1ca0:	85 54       	subi	r24, 0x45	; 69
    1ca2:	83 30       	cpi	r24, 0x03	; 3
    1ca4:	18 f0       	brcs	.+6      	; 0x1cac <vfprintf+0x130>
    1ca6:	80 52       	subi	r24, 0x20	; 32
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	38 f4       	brcc	.+14     	; 0x1cba <vfprintf+0x13e>
    1cac:	44 e0       	ldi	r20, 0x04	; 4
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	a4 0e       	add	r10, r20
    1cb2:	b5 1e       	adc	r11, r21
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	59 83       	std	Y+1, r21	; 0x01
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <vfprintf+0x15c>
    1cba:	93 36       	cpi	r25, 0x63	; 99
    1cbc:	31 f0       	breq	.+12     	; 0x1cca <vfprintf+0x14e>
    1cbe:	93 37       	cpi	r25, 0x73	; 115
    1cc0:	79 f0       	breq	.+30     	; 0x1ce0 <vfprintf+0x164>
    1cc2:	93 35       	cpi	r25, 0x53	; 83
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <vfprintf+0x14c>
    1cc6:	56 c0       	rjmp	.+172    	; 0x1d74 <vfprintf+0x1f8>
    1cc8:	20 c0       	rjmp	.+64     	; 0x1d0a <vfprintf+0x18e>
    1cca:	f5 01       	movw	r30, r10
    1ccc:	80 81       	ld	r24, Z
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	42 e0       	ldi	r20, 0x02	; 2
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	a4 0e       	add	r10, r20
    1cd6:	b5 1e       	adc	r11, r21
    1cd8:	61 01       	movw	r12, r2
    1cda:	01 e0       	ldi	r16, 0x01	; 1
    1cdc:	10 e0       	ldi	r17, 0x00	; 0
    1cde:	12 c0       	rjmp	.+36     	; 0x1d04 <vfprintf+0x188>
    1ce0:	f5 01       	movw	r30, r10
    1ce2:	c0 80       	ld	r12, Z
    1ce4:	d1 80       	ldd	r13, Z+1	; 0x01
    1ce6:	f6 fc       	sbrc	r15, 6
    1ce8:	03 c0       	rjmp	.+6      	; 0x1cf0 <vfprintf+0x174>
    1cea:	6f ef       	ldi	r22, 0xFF	; 255
    1cec:	7f ef       	ldi	r23, 0xFF	; 255
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <vfprintf+0x178>
    1cf0:	69 2d       	mov	r22, r9
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	42 e0       	ldi	r20, 0x02	; 2
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	a4 0e       	add	r10, r20
    1cfa:	b5 1e       	adc	r11, r21
    1cfc:	c6 01       	movw	r24, r12
    1cfe:	0e 94 b4 12 	call	0x2568	; 0x2568 <strnlen>
    1d02:	8c 01       	movw	r16, r24
    1d04:	5f e7       	ldi	r21, 0x7F	; 127
    1d06:	f5 22       	and	r15, r21
    1d08:	14 c0       	rjmp	.+40     	; 0x1d32 <vfprintf+0x1b6>
    1d0a:	f5 01       	movw	r30, r10
    1d0c:	c0 80       	ld	r12, Z
    1d0e:	d1 80       	ldd	r13, Z+1	; 0x01
    1d10:	f6 fc       	sbrc	r15, 6
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <vfprintf+0x19e>
    1d14:	6f ef       	ldi	r22, 0xFF	; 255
    1d16:	7f ef       	ldi	r23, 0xFF	; 255
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <vfprintf+0x1a2>
    1d1a:	69 2d       	mov	r22, r9
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	42 e0       	ldi	r20, 0x02	; 2
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	a4 0e       	add	r10, r20
    1d24:	b5 1e       	adc	r11, r21
    1d26:	c6 01       	movw	r24, r12
    1d28:	0e 94 a9 12 	call	0x2552	; 0x2552 <strnlen_P>
    1d2c:	8c 01       	movw	r16, r24
    1d2e:	50 e8       	ldi	r21, 0x80	; 128
    1d30:	f5 2a       	or	r15, r21
    1d32:	f3 fe       	sbrs	r15, 3
    1d34:	07 c0       	rjmp	.+14     	; 0x1d44 <vfprintf+0x1c8>
    1d36:	1a c0       	rjmp	.+52     	; 0x1d6c <vfprintf+0x1f0>
    1d38:	80 e2       	ldi	r24, 0x20	; 32
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	b3 01       	movw	r22, r6
    1d3e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <fputc>
    1d42:	ea 94       	dec	r14
    1d44:	8e 2d       	mov	r24, r14
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	08 17       	cp	r16, r24
    1d4a:	19 07       	cpc	r17, r25
    1d4c:	a8 f3       	brcs	.-22     	; 0x1d38 <vfprintf+0x1bc>
    1d4e:	0e c0       	rjmp	.+28     	; 0x1d6c <vfprintf+0x1f0>
    1d50:	f6 01       	movw	r30, r12
    1d52:	f7 fc       	sbrc	r15, 7
    1d54:	85 91       	lpm	r24, Z+
    1d56:	f7 fe       	sbrs	r15, 7
    1d58:	81 91       	ld	r24, Z+
    1d5a:	6f 01       	movw	r12, r30
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	b3 01       	movw	r22, r6
    1d60:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <fputc>
    1d64:	e1 10       	cpse	r14, r1
    1d66:	ea 94       	dec	r14
    1d68:	01 50       	subi	r16, 0x01	; 1
    1d6a:	10 40       	sbci	r17, 0x00	; 0
    1d6c:	01 15       	cp	r16, r1
    1d6e:	11 05       	cpc	r17, r1
    1d70:	79 f7       	brne	.-34     	; 0x1d50 <vfprintf+0x1d4>
    1d72:	ea c0       	rjmp	.+468    	; 0x1f48 <vfprintf+0x3cc>
    1d74:	94 36       	cpi	r25, 0x64	; 100
    1d76:	11 f0       	breq	.+4      	; 0x1d7c <vfprintf+0x200>
    1d78:	99 36       	cpi	r25, 0x69	; 105
    1d7a:	69 f5       	brne	.+90     	; 0x1dd6 <vfprintf+0x25a>
    1d7c:	f7 fe       	sbrs	r15, 7
    1d7e:	08 c0       	rjmp	.+16     	; 0x1d90 <vfprintf+0x214>
    1d80:	f5 01       	movw	r30, r10
    1d82:	20 81       	ld	r18, Z
    1d84:	31 81       	ldd	r19, Z+1	; 0x01
    1d86:	42 81       	ldd	r20, Z+2	; 0x02
    1d88:	53 81       	ldd	r21, Z+3	; 0x03
    1d8a:	84 e0       	ldi	r24, 0x04	; 4
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0a c0       	rjmp	.+20     	; 0x1da4 <vfprintf+0x228>
    1d90:	f5 01       	movw	r30, r10
    1d92:	80 81       	ld	r24, Z
    1d94:	91 81       	ldd	r25, Z+1	; 0x01
    1d96:	9c 01       	movw	r18, r24
    1d98:	44 27       	eor	r20, r20
    1d9a:	37 fd       	sbrc	r19, 7
    1d9c:	40 95       	com	r20
    1d9e:	54 2f       	mov	r21, r20
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a8 0e       	add	r10, r24
    1da6:	b9 1e       	adc	r11, r25
    1da8:	9f e6       	ldi	r25, 0x6F	; 111
    1daa:	f9 22       	and	r15, r25
    1dac:	57 ff       	sbrs	r21, 7
    1dae:	09 c0       	rjmp	.+18     	; 0x1dc2 <vfprintf+0x246>
    1db0:	50 95       	com	r21
    1db2:	40 95       	com	r20
    1db4:	30 95       	com	r19
    1db6:	21 95       	neg	r18
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dba:	4f 4f       	sbci	r20, 0xFF	; 255
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	e0 e8       	ldi	r30, 0x80	; 128
    1dc0:	fe 2a       	or	r15, r30
    1dc2:	ca 01       	movw	r24, r20
    1dc4:	b9 01       	movw	r22, r18
    1dc6:	a1 01       	movw	r20, r2
    1dc8:	2a e0       	ldi	r18, 0x0A	; 10
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	0e 94 1b 13 	call	0x2636	; 0x2636 <__ultoa_invert>
    1dd0:	d8 2e       	mov	r13, r24
    1dd2:	d2 18       	sub	r13, r2
    1dd4:	40 c0       	rjmp	.+128    	; 0x1e56 <vfprintf+0x2da>
    1dd6:	95 37       	cpi	r25, 0x75	; 117
    1dd8:	29 f4       	brne	.+10     	; 0x1de4 <vfprintf+0x268>
    1dda:	1f 2d       	mov	r17, r15
    1ddc:	1f 7e       	andi	r17, 0xEF	; 239
    1dde:	2a e0       	ldi	r18, 0x0A	; 10
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	1d c0       	rjmp	.+58     	; 0x1e1e <vfprintf+0x2a2>
    1de4:	1f 2d       	mov	r17, r15
    1de6:	19 7f       	andi	r17, 0xF9	; 249
    1de8:	9f 36       	cpi	r25, 0x6F	; 111
    1dea:	61 f0       	breq	.+24     	; 0x1e04 <vfprintf+0x288>
    1dec:	90 37       	cpi	r25, 0x70	; 112
    1dee:	20 f4       	brcc	.+8      	; 0x1df8 <vfprintf+0x27c>
    1df0:	98 35       	cpi	r25, 0x58	; 88
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <vfprintf+0x27a>
    1df4:	ac c0       	rjmp	.+344    	; 0x1f4e <vfprintf+0x3d2>
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <vfprintf+0x29a>
    1df8:	90 37       	cpi	r25, 0x70	; 112
    1dfa:	39 f0       	breq	.+14     	; 0x1e0a <vfprintf+0x28e>
    1dfc:	98 37       	cpi	r25, 0x78	; 120
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <vfprintf+0x286>
    1e00:	a6 c0       	rjmp	.+332    	; 0x1f4e <vfprintf+0x3d2>
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <vfprintf+0x290>
    1e04:	28 e0       	ldi	r18, 0x08	; 8
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	0a c0       	rjmp	.+20     	; 0x1e1e <vfprintf+0x2a2>
    1e0a:	10 61       	ori	r17, 0x10	; 16
    1e0c:	14 fd       	sbrc	r17, 4
    1e0e:	14 60       	ori	r17, 0x04	; 4
    1e10:	20 e1       	ldi	r18, 0x10	; 16
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	04 c0       	rjmp	.+8      	; 0x1e1e <vfprintf+0x2a2>
    1e16:	14 fd       	sbrc	r17, 4
    1e18:	16 60       	ori	r17, 0x06	; 6
    1e1a:	20 e1       	ldi	r18, 0x10	; 16
    1e1c:	32 e0       	ldi	r19, 0x02	; 2
    1e1e:	17 ff       	sbrs	r17, 7
    1e20:	08 c0       	rjmp	.+16     	; 0x1e32 <vfprintf+0x2b6>
    1e22:	f5 01       	movw	r30, r10
    1e24:	60 81       	ld	r22, Z
    1e26:	71 81       	ldd	r23, Z+1	; 0x01
    1e28:	82 81       	ldd	r24, Z+2	; 0x02
    1e2a:	93 81       	ldd	r25, Z+3	; 0x03
    1e2c:	44 e0       	ldi	r20, 0x04	; 4
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	08 c0       	rjmp	.+16     	; 0x1e42 <vfprintf+0x2c6>
    1e32:	f5 01       	movw	r30, r10
    1e34:	80 81       	ld	r24, Z
    1e36:	91 81       	ldd	r25, Z+1	; 0x01
    1e38:	bc 01       	movw	r22, r24
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	42 e0       	ldi	r20, 0x02	; 2
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	a4 0e       	add	r10, r20
    1e44:	b5 1e       	adc	r11, r21
    1e46:	a1 01       	movw	r20, r2
    1e48:	0e 94 1b 13 	call	0x2636	; 0x2636 <__ultoa_invert>
    1e4c:	d8 2e       	mov	r13, r24
    1e4e:	d2 18       	sub	r13, r2
    1e50:	8f e7       	ldi	r24, 0x7F	; 127
    1e52:	f8 2e       	mov	r15, r24
    1e54:	f1 22       	and	r15, r17
    1e56:	f6 fe       	sbrs	r15, 6
    1e58:	0b c0       	rjmp	.+22     	; 0x1e70 <vfprintf+0x2f4>
    1e5a:	5e ef       	ldi	r21, 0xFE	; 254
    1e5c:	f5 22       	and	r15, r21
    1e5e:	d9 14       	cp	r13, r9
    1e60:	38 f4       	brcc	.+14     	; 0x1e70 <vfprintf+0x2f4>
    1e62:	f4 fe       	sbrs	r15, 4
    1e64:	07 c0       	rjmp	.+14     	; 0x1e74 <vfprintf+0x2f8>
    1e66:	f2 fc       	sbrc	r15, 2
    1e68:	05 c0       	rjmp	.+10     	; 0x1e74 <vfprintf+0x2f8>
    1e6a:	8f ee       	ldi	r24, 0xEF	; 239
    1e6c:	f8 22       	and	r15, r24
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <vfprintf+0x2f8>
    1e70:	1d 2d       	mov	r17, r13
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <vfprintf+0x2fa>
    1e74:	19 2d       	mov	r17, r9
    1e76:	f4 fe       	sbrs	r15, 4
    1e78:	0d c0       	rjmp	.+26     	; 0x1e94 <vfprintf+0x318>
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ed 0d       	add	r30, r13
    1e7e:	f1 1d       	adc	r31, r1
    1e80:	80 81       	ld	r24, Z
    1e82:	80 33       	cpi	r24, 0x30	; 48
    1e84:	19 f4       	brne	.+6      	; 0x1e8c <vfprintf+0x310>
    1e86:	99 ee       	ldi	r25, 0xE9	; 233
    1e88:	f9 22       	and	r15, r25
    1e8a:	08 c0       	rjmp	.+16     	; 0x1e9c <vfprintf+0x320>
    1e8c:	1f 5f       	subi	r17, 0xFF	; 255
    1e8e:	f2 fe       	sbrs	r15, 2
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <vfprintf+0x320>
    1e92:	03 c0       	rjmp	.+6      	; 0x1e9a <vfprintf+0x31e>
    1e94:	8f 2d       	mov	r24, r15
    1e96:	86 78       	andi	r24, 0x86	; 134
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <vfprintf+0x320>
    1e9a:	1f 5f       	subi	r17, 0xFF	; 255
    1e9c:	0f 2d       	mov	r16, r15
    1e9e:	f3 fc       	sbrc	r15, 3
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <vfprintf+0x34e>
    1ea2:	f0 fe       	sbrs	r15, 0
    1ea4:	0f c0       	rjmp	.+30     	; 0x1ec4 <vfprintf+0x348>
    1ea6:	1e 15       	cp	r17, r14
    1ea8:	10 f0       	brcs	.+4      	; 0x1eae <vfprintf+0x332>
    1eaa:	9d 2c       	mov	r9, r13
    1eac:	0b c0       	rjmp	.+22     	; 0x1ec4 <vfprintf+0x348>
    1eae:	9d 2c       	mov	r9, r13
    1eb0:	9e 0c       	add	r9, r14
    1eb2:	91 1a       	sub	r9, r17
    1eb4:	1e 2d       	mov	r17, r14
    1eb6:	06 c0       	rjmp	.+12     	; 0x1ec4 <vfprintf+0x348>
    1eb8:	80 e2       	ldi	r24, 0x20	; 32
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	b3 01       	movw	r22, r6
    1ebe:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <fputc>
    1ec2:	1f 5f       	subi	r17, 0xFF	; 255
    1ec4:	1e 15       	cp	r17, r14
    1ec6:	c0 f3       	brcs	.-16     	; 0x1eb8 <vfprintf+0x33c>
    1ec8:	04 c0       	rjmp	.+8      	; 0x1ed2 <vfprintf+0x356>
    1eca:	1e 15       	cp	r17, r14
    1ecc:	10 f4       	brcc	.+4      	; 0x1ed2 <vfprintf+0x356>
    1ece:	e1 1a       	sub	r14, r17
    1ed0:	01 c0       	rjmp	.+2      	; 0x1ed4 <vfprintf+0x358>
    1ed2:	ee 24       	eor	r14, r14
    1ed4:	04 ff       	sbrs	r16, 4
    1ed6:	0f c0       	rjmp	.+30     	; 0x1ef6 <vfprintf+0x37a>
    1ed8:	80 e3       	ldi	r24, 0x30	; 48
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	b3 01       	movw	r22, r6
    1ede:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <fputc>
    1ee2:	02 ff       	sbrs	r16, 2
    1ee4:	1d c0       	rjmp	.+58     	; 0x1f20 <vfprintf+0x3a4>
    1ee6:	01 fd       	sbrc	r16, 1
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <vfprintf+0x374>
    1eea:	88 e7       	ldi	r24, 0x78	; 120
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e c0       	rjmp	.+28     	; 0x1f0c <vfprintf+0x390>
    1ef0:	88 e5       	ldi	r24, 0x58	; 88
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	0b c0       	rjmp	.+22     	; 0x1f0c <vfprintf+0x390>
    1ef6:	80 2f       	mov	r24, r16
    1ef8:	86 78       	andi	r24, 0x86	; 134
    1efa:	91 f0       	breq	.+36     	; 0x1f20 <vfprintf+0x3a4>
    1efc:	01 ff       	sbrs	r16, 1
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <vfprintf+0x388>
    1f00:	8b e2       	ldi	r24, 0x2B	; 43
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <vfprintf+0x38a>
    1f04:	80 e2       	ldi	r24, 0x20	; 32
    1f06:	f7 fc       	sbrc	r15, 7
    1f08:	8d e2       	ldi	r24, 0x2D	; 45
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	b3 01       	movw	r22, r6
    1f0e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <fputc>
    1f12:	06 c0       	rjmp	.+12     	; 0x1f20 <vfprintf+0x3a4>
    1f14:	80 e3       	ldi	r24, 0x30	; 48
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	b3 01       	movw	r22, r6
    1f1a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <fputc>
    1f1e:	9a 94       	dec	r9
    1f20:	d9 14       	cp	r13, r9
    1f22:	c0 f3       	brcs	.-16     	; 0x1f14 <vfprintf+0x398>
    1f24:	da 94       	dec	r13
    1f26:	f1 01       	movw	r30, r2
    1f28:	ed 0d       	add	r30, r13
    1f2a:	f1 1d       	adc	r31, r1
    1f2c:	80 81       	ld	r24, Z
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	b3 01       	movw	r22, r6
    1f32:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <fputc>
    1f36:	dd 20       	and	r13, r13
    1f38:	a9 f7       	brne	.-22     	; 0x1f24 <vfprintf+0x3a8>
    1f3a:	06 c0       	rjmp	.+12     	; 0x1f48 <vfprintf+0x3cc>
    1f3c:	80 e2       	ldi	r24, 0x20	; 32
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	b3 01       	movw	r22, r6
    1f42:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <fputc>
    1f46:	ea 94       	dec	r14
    1f48:	ee 20       	and	r14, r14
    1f4a:	c1 f7       	brne	.-16     	; 0x1f3c <vfprintf+0x3c0>
    1f4c:	43 ce       	rjmp	.-890    	; 0x1bd4 <vfprintf+0x58>
    1f4e:	f3 01       	movw	r30, r6
    1f50:	66 81       	ldd	r22, Z+6	; 0x06
    1f52:	77 81       	ldd	r23, Z+7	; 0x07
    1f54:	cb 01       	movw	r24, r22
    1f56:	2b 96       	adiw	r28, 0x0b	; 11
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	ff 90       	pop	r15
    1f6c:	ef 90       	pop	r14
    1f6e:	df 90       	pop	r13
    1f70:	cf 90       	pop	r12
    1f72:	bf 90       	pop	r11
    1f74:	af 90       	pop	r10
    1f76:	9f 90       	pop	r9
    1f78:	8f 90       	pop	r8
    1f7a:	7f 90       	pop	r7
    1f7c:	6f 90       	pop	r6
    1f7e:	5f 90       	pop	r5
    1f80:	4f 90       	pop	r4
    1f82:	3f 90       	pop	r3
    1f84:	2f 90       	pop	r2
    1f86:	08 95       	ret

00001f88 <putval>:
    1f88:	fc 01       	movw	r30, r24
    1f8a:	20 fd       	sbrc	r18, 0
    1f8c:	08 c0       	rjmp	.+16     	; 0x1f9e <putval+0x16>
    1f8e:	23 fd       	sbrc	r18, 3
    1f90:	05 c0       	rjmp	.+10     	; 0x1f9c <putval+0x14>
    1f92:	22 ff       	sbrs	r18, 2
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <putval+0x12>
    1f96:	73 83       	std	Z+3, r23	; 0x03
    1f98:	62 83       	std	Z+2, r22	; 0x02
    1f9a:	51 83       	std	Z+1, r21	; 0x01
    1f9c:	40 83       	st	Z, r20
    1f9e:	08 95       	ret

00001fa0 <mulacc>:
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	44 ff       	sbrs	r20, 4
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <mulacc+0x10>
    1fac:	33 e0       	ldi	r19, 0x03	; 3
    1fae:	11 c0       	rjmp	.+34     	; 0x1fd2 <mulacc+0x32>
    1fb0:	46 ff       	sbrs	r20, 6
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <mulacc+0x18>
    1fb4:	34 e0       	ldi	r19, 0x04	; 4
    1fb6:	0d c0       	rjmp	.+26     	; 0x1fd2 <mulacc+0x32>
    1fb8:	db 01       	movw	r26, r22
    1fba:	fc 01       	movw	r30, r24
    1fbc:	aa 0f       	add	r26, r26
    1fbe:	bb 1f       	adc	r27, r27
    1fc0:	ee 1f       	adc	r30, r30
    1fc2:	ff 1f       	adc	r31, r31
    1fc4:	10 94       	com	r1
    1fc6:	d1 f7       	brne	.-12     	; 0x1fbc <mulacc+0x1c>
    1fc8:	6a 0f       	add	r22, r26
    1fca:	7b 1f       	adc	r23, r27
    1fcc:	8e 1f       	adc	r24, r30
    1fce:	9f 1f       	adc	r25, r31
    1fd0:	31 e0       	ldi	r19, 0x01	; 1
    1fd2:	66 0f       	add	r22, r22
    1fd4:	77 1f       	adc	r23, r23
    1fd6:	88 1f       	adc	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	31 50       	subi	r19, 0x01	; 1
    1fdc:	d1 f7       	brne	.-12     	; 0x1fd2 <mulacc+0x32>
    1fde:	7b 01       	movw	r14, r22
    1fe0:	8c 01       	movw	r16, r24
    1fe2:	e2 0e       	add	r14, r18
    1fe4:	f1 1c       	adc	r15, r1
    1fe6:	01 1d       	adc	r16, r1
    1fe8:	11 1d       	adc	r17, r1
    1fea:	a8 01       	movw	r20, r16
    1fec:	97 01       	movw	r18, r14
    1fee:	b7 01       	movw	r22, r14
    1ff0:	ca 01       	movw	r24, r20
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	ff 90       	pop	r15
    1ff8:	ef 90       	pop	r14
    1ffa:	08 95       	ret

00001ffc <skip_spaces>:
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	8c 01       	movw	r16, r24
    2006:	c8 01       	movw	r24, r16
    2008:	0e 94 bf 12 	call	0x257e	; 0x257e <fgetc>
    200c:	ec 01       	movw	r28, r24
    200e:	97 fd       	sbrc	r25, 7
    2010:	08 c0       	rjmp	.+16     	; 0x2022 <skip_spaces+0x26>
    2012:	0e 94 96 12 	call	0x252c	; 0x252c <isspace>
    2016:	89 2b       	or	r24, r25
    2018:	b1 f7       	brne	.-20     	; 0x2006 <skip_spaces+0xa>
    201a:	ce 01       	movw	r24, r28
    201c:	b8 01       	movw	r22, r16
    201e:	0e 94 01 13 	call	0x2602	; 0x2602 <ungetc>
    2022:	ce 01       	movw	r24, r28
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	08 95       	ret

0000202e <conv_int>:
    202e:	af 92       	push	r10
    2030:	bf 92       	push	r11
    2032:	cf 92       	push	r12
    2034:	df 92       	push	r13
    2036:	ef 92       	push	r14
    2038:	ff 92       	push	r15
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	ec 01       	movw	r28, r24
    2044:	c6 2e       	mov	r12, r22
    2046:	5a 01       	movw	r10, r20
    2048:	12 2f       	mov	r17, r18
    204a:	0e 94 bf 12 	call	0x257e	; 0x257e <fgetc>
    204e:	ac 01       	movw	r20, r24
    2050:	8b 32       	cpi	r24, 0x2B	; 43
    2052:	19 f0       	breq	.+6      	; 0x205a <conv_int+0x2c>
    2054:	8d 32       	cpi	r24, 0x2D	; 45
    2056:	51 f4       	brne	.+20     	; 0x206c <conv_int+0x3e>
    2058:	10 68       	ori	r17, 0x80	; 128
    205a:	ca 94       	dec	r12
    205c:	09 f4       	brne	.+2      	; 0x2060 <conv_int+0x32>
    205e:	6d c0       	rjmp	.+218    	; 0x213a <conv_int+0x10c>
    2060:	ce 01       	movw	r24, r28
    2062:	0e 94 bf 12 	call	0x257e	; 0x257e <fgetc>
    2066:	ac 01       	movw	r20, r24
    2068:	97 fd       	sbrc	r25, 7
    206a:	67 c0       	rjmp	.+206    	; 0x213a <conv_int+0x10c>
    206c:	6d ef       	ldi	r22, 0xFD	; 253
    206e:	d6 2e       	mov	r13, r22
    2070:	d1 22       	and	r13, r17
    2072:	8d 2d       	mov	r24, r13
    2074:	80 73       	andi	r24, 0x30	; 48
    2076:	01 f5       	brne	.+64     	; 0x20b8 <conv_int+0x8a>
    2078:	40 33       	cpi	r20, 0x30	; 48
    207a:	f1 f4       	brne	.+60     	; 0x20b8 <conv_int+0x8a>
    207c:	ca 94       	dec	r12
    207e:	09 f4       	brne	.+2      	; 0x2082 <conv_int+0x54>
    2080:	47 c0       	rjmp	.+142    	; 0x2110 <conv_int+0xe2>
    2082:	ce 01       	movw	r24, r28
    2084:	0e 94 bf 12 	call	0x257e	; 0x257e <fgetc>
    2088:	ac 01       	movw	r20, r24
    208a:	97 fd       	sbrc	r25, 7
    208c:	41 c0       	rjmp	.+130    	; 0x2110 <conv_int+0xe2>
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	d8 2a       	or	r13, r24
    2092:	48 37       	cpi	r20, 0x78	; 120
    2094:	11 f0       	breq	.+4      	; 0x209a <conv_int+0x6c>
    2096:	48 35       	cpi	r20, 0x58	; 88
    2098:	59 f4       	brne	.+22     	; 0x20b0 <conv_int+0x82>
    209a:	80 e4       	ldi	r24, 0x40	; 64
    209c:	d8 2a       	or	r13, r24
    209e:	ca 94       	dec	r12
    20a0:	b9 f1       	breq	.+110    	; 0x2110 <conv_int+0xe2>
    20a2:	ce 01       	movw	r24, r28
    20a4:	0e 94 bf 12 	call	0x257e	; 0x257e <fgetc>
    20a8:	ac 01       	movw	r20, r24
    20aa:	99 23       	and	r25, r25
    20ac:	2c f4       	brge	.+10     	; 0x20b8 <conv_int+0x8a>
    20ae:	30 c0       	rjmp	.+96     	; 0x2110 <conv_int+0xe2>
    20b0:	d6 fc       	sbrc	r13, 6
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <conv_int+0x8a>
    20b4:	80 e1       	ldi	r24, 0x10	; 16
    20b6:	d8 2a       	or	r13, r24
    20b8:	ee 24       	eor	r14, r14
    20ba:	ff 24       	eor	r15, r15
    20bc:	87 01       	movw	r16, r14
    20be:	24 2f       	mov	r18, r20
    20c0:	20 53       	subi	r18, 0x30	; 48
    20c2:	28 30       	cpi	r18, 0x08	; 8
    20c4:	88 f0       	brcs	.+34     	; 0x20e8 <conv_int+0xba>
    20c6:	d4 fc       	sbrc	r13, 4
    20c8:	09 c0       	rjmp	.+18     	; 0x20dc <conv_int+0xae>
    20ca:	2a 30       	cpi	r18, 0x0A	; 10
    20cc:	68 f0       	brcs	.+26     	; 0x20e8 <conv_int+0xba>
    20ce:	d6 fe       	sbrs	r13, 6
    20d0:	05 c0       	rjmp	.+10     	; 0x20dc <conv_int+0xae>
    20d2:	2f 7d       	andi	r18, 0xDF	; 223
    20d4:	82 2f       	mov	r24, r18
    20d6:	81 51       	subi	r24, 0x11	; 17
    20d8:	86 30       	cpi	r24, 0x06	; 6
    20da:	28 f0       	brcs	.+10     	; 0x20e6 <conv_int+0xb8>
    20dc:	ca 01       	movw	r24, r20
    20de:	be 01       	movw	r22, r28
    20e0:	0e 94 01 13 	call	0x2602	; 0x2602 <ungetc>
    20e4:	12 c0       	rjmp	.+36     	; 0x210a <conv_int+0xdc>
    20e6:	27 50       	subi	r18, 0x07	; 7
    20e8:	c8 01       	movw	r24, r16
    20ea:	b7 01       	movw	r22, r14
    20ec:	4d 2d       	mov	r20, r13
    20ee:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <mulacc>
    20f2:	7b 01       	movw	r14, r22
    20f4:	8c 01       	movw	r16, r24
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	d8 2a       	or	r13, r24
    20fa:	ca 94       	dec	r12
    20fc:	61 f0       	breq	.+24     	; 0x2116 <conv_int+0xe8>
    20fe:	ce 01       	movw	r24, r28
    2100:	0e 94 bf 12 	call	0x257e	; 0x257e <fgetc>
    2104:	ac 01       	movw	r20, r24
    2106:	97 ff       	sbrs	r25, 7
    2108:	da cf       	rjmp	.-76     	; 0x20be <conv_int+0x90>
    210a:	d1 fc       	sbrc	r13, 1
    210c:	04 c0       	rjmp	.+8      	; 0x2116 <conv_int+0xe8>
    210e:	15 c0       	rjmp	.+42     	; 0x213a <conv_int+0x10c>
    2110:	ee 24       	eor	r14, r14
    2112:	ff 24       	eor	r15, r15
    2114:	87 01       	movw	r16, r14
    2116:	d7 fe       	sbrs	r13, 7
    2118:	08 c0       	rjmp	.+16     	; 0x212a <conv_int+0xfc>
    211a:	10 95       	com	r17
    211c:	00 95       	com	r16
    211e:	f0 94       	com	r15
    2120:	e0 94       	com	r14
    2122:	e1 1c       	adc	r14, r1
    2124:	f1 1c       	adc	r15, r1
    2126:	01 1d       	adc	r16, r1
    2128:	11 1d       	adc	r17, r1
    212a:	c5 01       	movw	r24, r10
    212c:	b8 01       	movw	r22, r16
    212e:	a7 01       	movw	r20, r14
    2130:	2d 2d       	mov	r18, r13
    2132:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <putval>
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	01 c0       	rjmp	.+2      	; 0x213c <conv_int+0x10e>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	ff 90       	pop	r15
    2146:	ef 90       	pop	r14
    2148:	df 90       	pop	r13
    214a:	cf 90       	pop	r12
    214c:	bf 90       	pop	r11
    214e:	af 90       	pop	r10
    2150:	08 95       	ret

00002152 <conv_brk>:
    2152:	6f 92       	push	r6
    2154:	7f 92       	push	r7
    2156:	8f 92       	push	r8
    2158:	9f 92       	push	r9
    215a:	af 92       	push	r10
    215c:	bf 92       	push	r11
    215e:	cf 92       	push	r12
    2160:	df 92       	push	r13
    2162:	ef 92       	push	r14
    2164:	ff 92       	push	r15
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	a0 97       	sbiw	r28, 0x20	; 32
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	6c 01       	movw	r12, r24
    2180:	a6 2e       	mov	r10, r22
    2182:	8a 01       	movw	r16, r20
    2184:	79 01       	movw	r14, r18
    2186:	fe 01       	movw	r30, r28
    2188:	31 96       	adiw	r30, 0x01	; 1
    218a:	80 e2       	ldi	r24, 0x20	; 32
    218c:	df 01       	movw	r26, r30
    218e:	1d 92       	st	X+, r1
    2190:	8a 95       	dec	r24
    2192:	e9 f7       	brne	.-6      	; 0x218e <conv_brk+0x3c>
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	4f 01       	movw	r8, r30
    21a0:	a1 e0       	ldi	r26, 0x01	; 1
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	f6 01       	movw	r30, r12
    21a6:	83 81       	ldd	r24, Z+3	; 0x03
    21a8:	f7 01       	movw	r30, r14
    21aa:	83 fd       	sbrc	r24, 3
    21ac:	25 91       	lpm	r18, Z+
    21ae:	83 ff       	sbrs	r24, 3
    21b0:	21 91       	ld	r18, Z+
    21b2:	7f 01       	movw	r14, r30
    21b4:	22 23       	and	r18, r18
    21b6:	09 f4       	brne	.+2      	; 0x21ba <conv_brk+0x68>
    21b8:	7e c0       	rjmp	.+252    	; 0x22b6 <conv_brk+0x164>
    21ba:	2e 35       	cpi	r18, 0x5E	; 94
    21bc:	19 f4       	brne	.+6      	; 0x21c4 <conv_brk+0x72>
    21be:	41 15       	cp	r20, r1
    21c0:	51 05       	cpc	r21, r1
    21c2:	69 f1       	breq	.+90     	; 0x221e <conv_brk+0xcc>
    21c4:	87 2f       	mov	r24, r23
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	84 17       	cp	r24, r20
    21ca:	95 07       	cpc	r25, r21
    21cc:	44 f4       	brge	.+16     	; 0x21de <conv_brk+0x8c>
    21ce:	2d 35       	cpi	r18, 0x5D	; 93
    21d0:	51 f1       	breq	.+84     	; 0x2226 <conv_brk+0xd4>
    21d2:	2d 32       	cpi	r18, 0x2D	; 45
    21d4:	21 f4       	brne	.+8      	; 0x21de <conv_brk+0x8c>
    21d6:	33 23       	and	r19, r19
    21d8:	29 f4       	brne	.+10     	; 0x21e4 <conv_brk+0x92>
    21da:	31 e0       	ldi	r19, 0x01	; 1
    21dc:	21 c0       	rjmp	.+66     	; 0x2220 <conv_brk+0xce>
    21de:	33 23       	and	r19, r19
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <conv_brk+0x92>
    21e2:	62 2f       	mov	r22, r18
    21e4:	32 2f       	mov	r19, r18
    21e6:	83 2f       	mov	r24, r19
    21e8:	86 95       	lsr	r24
    21ea:	86 95       	lsr	r24
    21ec:	86 95       	lsr	r24
    21ee:	f4 01       	movw	r30, r8
    21f0:	e8 0f       	add	r30, r24
    21f2:	f1 1d       	adc	r31, r1
    21f4:	83 2f       	mov	r24, r19
    21f6:	87 70       	andi	r24, 0x07	; 7
    21f8:	3d 01       	movw	r6, r26
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <conv_brk+0xae>
    21fc:	66 0c       	add	r6, r6
    21fe:	77 1c       	adc	r7, r7
    2200:	8a 95       	dec	r24
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <conv_brk+0xaa>
    2204:	20 81       	ld	r18, Z
    2206:	26 29       	or	r18, r6
    2208:	20 83       	st	Z, r18
    220a:	36 17       	cp	r19, r22
    220c:	11 f4       	brne	.+4      	; 0x2212 <conv_brk+0xc0>
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	07 c0       	rjmp	.+14     	; 0x2220 <conv_brk+0xce>
    2212:	36 17       	cp	r19, r22
    2214:	10 f4       	brcc	.+4      	; 0x221a <conv_brk+0xc8>
    2216:	3f 5f       	subi	r19, 0xFF	; 255
    2218:	e6 cf       	rjmp	.-52     	; 0x21e6 <conv_brk+0x94>
    221a:	31 50       	subi	r19, 0x01	; 1
    221c:	e4 cf       	rjmp	.-56     	; 0x21e6 <conv_brk+0x94>
    221e:	71 e0       	ldi	r23, 0x01	; 1
    2220:	4f 5f       	subi	r20, 0xFF	; 255
    2222:	5f 4f       	sbci	r21, 0xFF	; 255
    2224:	bf cf       	rjmp	.-130    	; 0x21a4 <conv_brk+0x52>
    2226:	33 23       	and	r19, r19
    2228:	19 f0       	breq	.+6      	; 0x2230 <conv_brk+0xde>
    222a:	8e 81       	ldd	r24, Y+6	; 0x06
    222c:	80 62       	ori	r24, 0x20	; 32
    222e:	8e 83       	std	Y+6, r24	; 0x06
    2230:	77 23       	and	r23, r23
    2232:	59 f0       	breq	.+22     	; 0x224a <conv_brk+0xf8>
    2234:	fe 01       	movw	r30, r28
    2236:	31 96       	adiw	r30, 0x01	; 1
    2238:	9e 01       	movw	r18, r28
    223a:	2f 5d       	subi	r18, 0xDF	; 223
    223c:	3f 4f       	sbci	r19, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	80 95       	com	r24
    2242:	81 93       	st	Z+, r24
    2244:	e2 17       	cp	r30, r18
    2246:	f3 07       	cpc	r31, r19
    2248:	d1 f7       	brne	.-12     	; 0x223e <conv_brk+0xec>
    224a:	bb 24       	eor	r11, r11
    224c:	b3 94       	inc	r11
    224e:	4e 01       	movw	r8, r28
    2250:	08 94       	sec
    2252:	81 1c       	adc	r8, r1
    2254:	91 1c       	adc	r9, r1
    2256:	c6 01       	movw	r24, r12
    2258:	0e 94 bf 12 	call	0x257e	; 0x257e <fgetc>
    225c:	ac 01       	movw	r20, r24
    225e:	97 fd       	sbrc	r25, 7
    2260:	22 c0       	rjmp	.+68     	; 0x22a6 <conv_brk+0x154>
    2262:	86 95       	lsr	r24
    2264:	86 95       	lsr	r24
    2266:	86 95       	lsr	r24
    2268:	f4 01       	movw	r30, r8
    226a:	e8 0f       	add	r30, r24
    226c:	f1 1d       	adc	r31, r1
    226e:	80 81       	ld	r24, Z
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9a 01       	movw	r18, r20
    2274:	27 70       	andi	r18, 0x07	; 7
    2276:	30 70       	andi	r19, 0x00	; 0
    2278:	02 c0       	rjmp	.+4      	; 0x227e <conv_brk+0x12c>
    227a:	95 95       	asr	r25
    227c:	87 95       	ror	r24
    227e:	2a 95       	dec	r18
    2280:	e2 f7       	brpl	.-8      	; 0x227a <conv_brk+0x128>
    2282:	80 fd       	sbrc	r24, 0
    2284:	05 c0       	rjmp	.+10     	; 0x2290 <conv_brk+0x13e>
    2286:	ca 01       	movw	r24, r20
    2288:	b6 01       	movw	r22, r12
    228a:	0e 94 01 13 	call	0x2602	; 0x2602 <ungetc>
    228e:	0b c0       	rjmp	.+22     	; 0x22a6 <conv_brk+0x154>
    2290:	01 15       	cp	r16, r1
    2292:	11 05       	cpc	r17, r1
    2294:	19 f0       	breq	.+6      	; 0x229c <conv_brk+0x14a>
    2296:	d8 01       	movw	r26, r16
    2298:	4d 93       	st	X+, r20
    229a:	8d 01       	movw	r16, r26
    229c:	aa 94       	dec	r10
    229e:	bb 24       	eor	r11, r11
    22a0:	aa 20       	and	r10, r10
    22a2:	c9 f6       	brne	.-78     	; 0x2256 <conv_brk+0x104>
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <conv_brk+0x158>
    22a6:	bb 20       	and	r11, r11
    22a8:	31 f4       	brne	.+12     	; 0x22b6 <conv_brk+0x164>
    22aa:	01 15       	cp	r16, r1
    22ac:	11 05       	cpc	r17, r1
    22ae:	29 f0       	breq	.+10     	; 0x22ba <conv_brk+0x168>
    22b0:	f8 01       	movw	r30, r16
    22b2:	10 82       	st	Z, r1
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <conv_brk+0x168>
    22b6:	ee 24       	eor	r14, r14
    22b8:	ff 24       	eor	r15, r15
    22ba:	c7 01       	movw	r24, r14
    22bc:	a0 96       	adiw	r28, 0x20	; 32
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	df 90       	pop	r13
    22d6:	cf 90       	pop	r12
    22d8:	bf 90       	pop	r11
    22da:	af 90       	pop	r10
    22dc:	9f 90       	pop	r9
    22de:	8f 90       	pop	r8
    22e0:	7f 90       	pop	r7
    22e2:	6f 90       	pop	r6
    22e4:	08 95       	ret

000022e6 <vfscanf>:
    22e6:	6f 92       	push	r6
    22e8:	7f 92       	push	r7
    22ea:	8f 92       	push	r8
    22ec:	9f 92       	push	r9
    22ee:	af 92       	push	r10
    22f0:	bf 92       	push	r11
    22f2:	cf 92       	push	r12
    22f4:	df 92       	push	r13
    22f6:	ef 92       	push	r14
    22f8:	ff 92       	push	r15
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	5c 01       	movw	r10, r24
    2304:	6b 01       	movw	r12, r22
    2306:	3a 01       	movw	r6, r20
    2308:	fc 01       	movw	r30, r24
    230a:	17 82       	std	Z+7, r1	; 0x07
    230c:	16 82       	std	Z+6, r1	; 0x06
    230e:	88 24       	eor	r8, r8
    2310:	ea c0       	rjmp	.+468    	; 0x24e6 <vfscanf+0x200>
    2312:	81 2f       	mov	r24, r17
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	0e 94 96 12 	call	0x252c	; 0x252c <isspace>
    231a:	89 2b       	or	r24, r25
    231c:	21 f0       	breq	.+8      	; 0x2326 <vfscanf+0x40>
    231e:	c5 01       	movw	r24, r10
    2320:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <skip_spaces>
    2324:	e0 c0       	rjmp	.+448    	; 0x24e6 <vfscanf+0x200>
    2326:	15 32       	cpi	r17, 0x25	; 37
    2328:	49 f4       	brne	.+18     	; 0x233c <vfscanf+0x56>
    232a:	f6 01       	movw	r30, r12
    232c:	f3 fc       	sbrc	r15, 3
    232e:	65 91       	lpm	r22, Z+
    2330:	f3 fe       	sbrs	r15, 3
    2332:	61 91       	ld	r22, Z+
    2334:	6f 01       	movw	r12, r30
    2336:	65 32       	cpi	r22, 0x25	; 37
    2338:	69 f4       	brne	.+26     	; 0x2354 <vfscanf+0x6e>
    233a:	15 e2       	ldi	r17, 0x25	; 37
    233c:	c5 01       	movw	r24, r10
    233e:	0e 94 bf 12 	call	0x257e	; 0x257e <fgetc>
    2342:	97 fd       	sbrc	r25, 7
    2344:	dc c0       	rjmp	.+440    	; 0x24fe <vfscanf+0x218>
    2346:	18 17       	cp	r17, r24
    2348:	09 f4       	brne	.+2      	; 0x234c <vfscanf+0x66>
    234a:	cd c0       	rjmp	.+410    	; 0x24e6 <vfscanf+0x200>
    234c:	b5 01       	movw	r22, r10
    234e:	0e 94 01 13 	call	0x2602	; 0x2602 <ungetc>
    2352:	da c0       	rjmp	.+436    	; 0x2508 <vfscanf+0x222>
    2354:	6a 32       	cpi	r22, 0x2A	; 42
    2356:	19 f0       	breq	.+6      	; 0x235e <vfscanf+0x78>
    2358:	16 2f       	mov	r17, r22
    235a:	00 e0       	ldi	r16, 0x00	; 0
    235c:	06 c0       	rjmp	.+12     	; 0x236a <vfscanf+0x84>
    235e:	f3 fc       	sbrc	r15, 3
    2360:	15 91       	lpm	r17, Z+
    2362:	f3 fe       	sbrs	r15, 3
    2364:	11 91       	ld	r17, Z+
    2366:	6f 01       	movw	r12, r30
    2368:	01 e0       	ldi	r16, 0x01	; 1
    236a:	99 24       	eor	r9, r9
    236c:	0f c0       	rjmp	.+30     	; 0x238c <vfscanf+0xa6>
    236e:	02 60       	ori	r16, 0x02	; 2
    2370:	69 2d       	mov	r22, r9
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	40 e2       	ldi	r20, 0x20	; 32
    237a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <mulacc>
    237e:	96 2e       	mov	r9, r22
    2380:	f6 01       	movw	r30, r12
    2382:	f3 fc       	sbrc	r15, 3
    2384:	15 91       	lpm	r17, Z+
    2386:	f3 fe       	sbrs	r15, 3
    2388:	11 91       	ld	r17, Z+
    238a:	6f 01       	movw	r12, r30
    238c:	21 2f       	mov	r18, r17
    238e:	20 53       	subi	r18, 0x30	; 48
    2390:	2a 30       	cpi	r18, 0x0A	; 10
    2392:	68 f3       	brcs	.-38     	; 0x236e <vfscanf+0x88>
    2394:	01 fd       	sbrc	r16, 1
    2396:	03 c0       	rjmp	.+6      	; 0x239e <vfscanf+0xb8>
    2398:	99 24       	eor	r9, r9
    239a:	9a 94       	dec	r9
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <vfscanf+0xbe>
    239e:	99 20       	and	r9, r9
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <vfscanf+0xbe>
    23a2:	b2 c0       	rjmp	.+356    	; 0x2508 <vfscanf+0x222>
    23a4:	18 36       	cpi	r17, 0x68	; 104
    23a6:	21 f0       	breq	.+8      	; 0x23b0 <vfscanf+0xca>
    23a8:	1c 36       	cpi	r17, 0x6C	; 108
    23aa:	99 f4       	brne	.+38     	; 0x23d2 <vfscanf+0xec>
    23ac:	f6 01       	movw	r30, r12
    23ae:	0b c0       	rjmp	.+22     	; 0x23c6 <vfscanf+0xe0>
    23b0:	f6 01       	movw	r30, r12
    23b2:	f3 fc       	sbrc	r15, 3
    23b4:	65 91       	lpm	r22, Z+
    23b6:	f3 fe       	sbrs	r15, 3
    23b8:	61 91       	ld	r22, Z+
    23ba:	68 36       	cpi	r22, 0x68	; 104
    23bc:	19 f0       	breq	.+6      	; 0x23c4 <vfscanf+0xde>
    23be:	6f 01       	movw	r12, r30
    23c0:	16 2f       	mov	r17, r22
    23c2:	07 c0       	rjmp	.+14     	; 0x23d2 <vfscanf+0xec>
    23c4:	08 60       	ori	r16, 0x08	; 8
    23c6:	04 60       	ori	r16, 0x04	; 4
    23c8:	f3 fc       	sbrc	r15, 3
    23ca:	15 91       	lpm	r17, Z+
    23cc:	f3 fe       	sbrs	r15, 3
    23ce:	11 91       	ld	r17, Z+
    23d0:	6f 01       	movw	r12, r30
    23d2:	11 23       	and	r17, r17
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <vfscanf+0xf2>
    23d6:	98 c0       	rjmp	.+304    	; 0x2508 <vfscanf+0x222>
    23d8:	80 ee       	ldi	r24, 0xE0	; 224
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	61 2f       	mov	r22, r17
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	0e 94 9e 12 	call	0x253c	; 0x253c <strchr_P>
    23e4:	89 2b       	or	r24, r25
    23e6:	09 f4       	brne	.+2      	; 0x23ea <vfscanf+0x104>
    23e8:	8f c0       	rjmp	.+286    	; 0x2508 <vfscanf+0x222>
    23ea:	80 2f       	mov	r24, r16
    23ec:	00 ff       	sbrs	r16, 0
    23ee:	03 c0       	rjmp	.+6      	; 0x23f6 <vfscanf+0x110>
    23f0:	ee 24       	eor	r14, r14
    23f2:	ff 24       	eor	r15, r15
    23f4:	07 c0       	rjmp	.+14     	; 0x2404 <vfscanf+0x11e>
    23f6:	f3 01       	movw	r30, r6
    23f8:	e0 80       	ld	r14, Z
    23fa:	f1 80       	ldd	r15, Z+1	; 0x01
    23fc:	22 e0       	ldi	r18, 0x02	; 2
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	62 0e       	add	r6, r18
    2402:	73 1e       	adc	r7, r19
    2404:	1e 36       	cpi	r17, 0x6E	; 110
    2406:	51 f4       	brne	.+20     	; 0x241c <vfscanf+0x136>
    2408:	f5 01       	movw	r30, r10
    240a:	46 81       	ldd	r20, Z+6	; 0x06
    240c:	57 81       	ldd	r21, Z+7	; 0x07
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	70 e0       	ldi	r23, 0x00	; 0
    2412:	c7 01       	movw	r24, r14
    2414:	20 2f       	mov	r18, r16
    2416:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <putval>
    241a:	65 c0       	rjmp	.+202    	; 0x24e6 <vfscanf+0x200>
    241c:	13 36       	cpi	r17, 0x63	; 99
    241e:	91 f4       	brne	.+36     	; 0x2444 <vfscanf+0x15e>
    2420:	81 fd       	sbrc	r24, 1
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <vfscanf+0x142>
    2424:	99 24       	eor	r9, r9
    2426:	93 94       	inc	r9
    2428:	c5 01       	movw	r24, r10
    242a:	0e 94 bf 12 	call	0x257e	; 0x257e <fgetc>
    242e:	97 fd       	sbrc	r25, 7
    2430:	66 c0       	rjmp	.+204    	; 0x24fe <vfscanf+0x218>
    2432:	e1 14       	cp	r14, r1
    2434:	f1 04       	cpc	r15, r1
    2436:	19 f0       	breq	.+6      	; 0x243e <vfscanf+0x158>
    2438:	f7 01       	movw	r30, r14
    243a:	81 93       	st	Z+, r24
    243c:	7f 01       	movw	r14, r30
    243e:	9a 94       	dec	r9
    2440:	99 f7       	brne	.-26     	; 0x2428 <vfscanf+0x142>
    2442:	4f c0       	rjmp	.+158    	; 0x24e2 <vfscanf+0x1fc>
    2444:	1b 35       	cpi	r17, 0x5B	; 91
    2446:	59 f4       	brne	.+22     	; 0x245e <vfscanf+0x178>
    2448:	c5 01       	movw	r24, r10
    244a:	69 2d       	mov	r22, r9
    244c:	a7 01       	movw	r20, r14
    244e:	96 01       	movw	r18, r12
    2450:	0e 94 a9 10 	call	0x2152	; 0x2152 <conv_brk>
    2454:	6c 01       	movw	r12, r24
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	09 f0       	breq	.+2      	; 0x245c <vfscanf+0x176>
    245a:	43 c0       	rjmp	.+134    	; 0x24e2 <vfscanf+0x1fc>
    245c:	3d c0       	rjmp	.+122    	; 0x24d8 <vfscanf+0x1f2>
    245e:	c5 01       	movw	r24, r10
    2460:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <skip_spaces>
    2464:	97 fd       	sbrc	r25, 7
    2466:	4b c0       	rjmp	.+150    	; 0x24fe <vfscanf+0x218>
    2468:	1f 36       	cpi	r17, 0x6F	; 111
    246a:	59 f1       	breq	.+86     	; 0x24c2 <vfscanf+0x1dc>
    246c:	10 37       	cpi	r17, 0x70	; 112
    246e:	28 f4       	brcc	.+10     	; 0x247a <vfscanf+0x194>
    2470:	14 36       	cpi	r17, 0x64	; 100
    2472:	29 f1       	breq	.+74     	; 0x24be <vfscanf+0x1d8>
    2474:	19 36       	cpi	r17, 0x69	; 105
    2476:	39 f5       	brne	.+78     	; 0x24c6 <vfscanf+0x1e0>
    2478:	27 c0       	rjmp	.+78     	; 0x24c8 <vfscanf+0x1e2>
    247a:	13 37       	cpi	r17, 0x73	; 115
    247c:	19 f0       	breq	.+6      	; 0x2484 <vfscanf+0x19e>
    247e:	15 37       	cpi	r17, 0x75	; 117
    2480:	11 f5       	brne	.+68     	; 0x24c6 <vfscanf+0x1e0>
    2482:	1d c0       	rjmp	.+58     	; 0x24be <vfscanf+0x1d8>
    2484:	c5 01       	movw	r24, r10
    2486:	0e 94 bf 12 	call	0x257e	; 0x257e <fgetc>
    248a:	ec 01       	movw	r28, r24
    248c:	97 fd       	sbrc	r25, 7
    248e:	11 c0       	rjmp	.+34     	; 0x24b2 <vfscanf+0x1cc>
    2490:	0e 94 96 12 	call	0x252c	; 0x252c <isspace>
    2494:	89 2b       	or	r24, r25
    2496:	29 f0       	breq	.+10     	; 0x24a2 <vfscanf+0x1bc>
    2498:	ce 01       	movw	r24, r28
    249a:	b5 01       	movw	r22, r10
    249c:	0e 94 01 13 	call	0x2602	; 0x2602 <ungetc>
    24a0:	08 c0       	rjmp	.+16     	; 0x24b2 <vfscanf+0x1cc>
    24a2:	e1 14       	cp	r14, r1
    24a4:	f1 04       	cpc	r15, r1
    24a6:	19 f0       	breq	.+6      	; 0x24ae <vfscanf+0x1c8>
    24a8:	f7 01       	movw	r30, r14
    24aa:	c1 93       	st	Z+, r28
    24ac:	7f 01       	movw	r14, r30
    24ae:	9a 94       	dec	r9
    24b0:	49 f7       	brne	.-46     	; 0x2484 <vfscanf+0x19e>
    24b2:	e1 14       	cp	r14, r1
    24b4:	f1 04       	cpc	r15, r1
    24b6:	a9 f0       	breq	.+42     	; 0x24e2 <vfscanf+0x1fc>
    24b8:	f7 01       	movw	r30, r14
    24ba:	10 82       	st	Z, r1
    24bc:	12 c0       	rjmp	.+36     	; 0x24e2 <vfscanf+0x1fc>
    24be:	00 62       	ori	r16, 0x20	; 32
    24c0:	03 c0       	rjmp	.+6      	; 0x24c8 <vfscanf+0x1e2>
    24c2:	00 61       	ori	r16, 0x10	; 16
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <vfscanf+0x1e2>
    24c6:	00 64       	ori	r16, 0x40	; 64
    24c8:	c5 01       	movw	r24, r10
    24ca:	69 2d       	mov	r22, r9
    24cc:	a7 01       	movw	r20, r14
    24ce:	20 2f       	mov	r18, r16
    24d0:	0e 94 17 10 	call	0x202e	; 0x202e <conv_int>
    24d4:	88 23       	and	r24, r24
    24d6:	29 f4       	brne	.+10     	; 0x24e2 <vfscanf+0x1fc>
    24d8:	f5 01       	movw	r30, r10
    24da:	83 81       	ldd	r24, Z+3	; 0x03
    24dc:	80 73       	andi	r24, 0x30	; 48
    24de:	79 f4       	brne	.+30     	; 0x24fe <vfscanf+0x218>
    24e0:	13 c0       	rjmp	.+38     	; 0x2508 <vfscanf+0x222>
    24e2:	00 ff       	sbrs	r16, 0
    24e4:	83 94       	inc	r8
    24e6:	f5 01       	movw	r30, r10
    24e8:	f3 80       	ldd	r15, Z+3	; 0x03
    24ea:	f6 01       	movw	r30, r12
    24ec:	f3 fc       	sbrc	r15, 3
    24ee:	15 91       	lpm	r17, Z+
    24f0:	f3 fe       	sbrs	r15, 3
    24f2:	11 91       	ld	r17, Z+
    24f4:	6f 01       	movw	r12, r30
    24f6:	11 23       	and	r17, r17
    24f8:	09 f0       	breq	.+2      	; 0x24fc <vfscanf+0x216>
    24fa:	0b cf       	rjmp	.-490    	; 0x2312 <vfscanf+0x2c>
    24fc:	05 c0       	rjmp	.+10     	; 0x2508 <vfscanf+0x222>
    24fe:	88 20       	and	r8, r8
    2500:	19 f4       	brne	.+6      	; 0x2508 <vfscanf+0x222>
    2502:	2f ef       	ldi	r18, 0xFF	; 255
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	02 c0       	rjmp	.+4      	; 0x250c <vfscanf+0x226>
    2508:	28 2d       	mov	r18, r8
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	c9 01       	movw	r24, r18
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	ff 90       	pop	r15
    2518:	ef 90       	pop	r14
    251a:	df 90       	pop	r13
    251c:	cf 90       	pop	r12
    251e:	bf 90       	pop	r11
    2520:	af 90       	pop	r10
    2522:	9f 90       	pop	r9
    2524:	8f 90       	pop	r8
    2526:	7f 90       	pop	r7
    2528:	6f 90       	pop	r6
    252a:	08 95       	ret

0000252c <isspace>:
    252c:	91 11       	cpse	r25, r1
    252e:	e1 c0       	rjmp	.+450    	; 0x26f2 <__ctype_isfalse>
    2530:	80 32       	cpi	r24, 0x20	; 32
    2532:	19 f0       	breq	.+6      	; 0x253a <isspace+0xe>
    2534:	89 50       	subi	r24, 0x09	; 9
    2536:	85 50       	subi	r24, 0x05	; 5
    2538:	d0 f7       	brcc	.-12     	; 0x252e <isspace+0x2>
    253a:	08 95       	ret

0000253c <strchr_P>:
    253c:	fc 01       	movw	r30, r24
    253e:	05 90       	lpm	r0, Z+
    2540:	06 16       	cp	r0, r22
    2542:	21 f0       	breq	.+8      	; 0x254c <strchr_P+0x10>
    2544:	00 20       	and	r0, r0
    2546:	d9 f7       	brne	.-10     	; 0x253e <strchr_P+0x2>
    2548:	c0 01       	movw	r24, r0
    254a:	08 95       	ret
    254c:	31 97       	sbiw	r30, 0x01	; 1
    254e:	cf 01       	movw	r24, r30
    2550:	08 95       	ret

00002552 <strnlen_P>:
    2552:	fc 01       	movw	r30, r24
    2554:	05 90       	lpm	r0, Z+
    2556:	61 50       	subi	r22, 0x01	; 1
    2558:	70 40       	sbci	r23, 0x00	; 0
    255a:	01 10       	cpse	r0, r1
    255c:	d8 f7       	brcc	.-10     	; 0x2554 <strnlen_P+0x2>
    255e:	80 95       	com	r24
    2560:	90 95       	com	r25
    2562:	8e 0f       	add	r24, r30
    2564:	9f 1f       	adc	r25, r31
    2566:	08 95       	ret

00002568 <strnlen>:
    2568:	fc 01       	movw	r30, r24
    256a:	61 50       	subi	r22, 0x01	; 1
    256c:	70 40       	sbci	r23, 0x00	; 0
    256e:	01 90       	ld	r0, Z+
    2570:	01 10       	cpse	r0, r1
    2572:	d8 f7       	brcc	.-10     	; 0x256a <strnlen+0x2>
    2574:	80 95       	com	r24
    2576:	90 95       	com	r25
    2578:	8e 0f       	add	r24, r30
    257a:	9f 1f       	adc	r25, r31
    257c:	08 95       	ret

0000257e <fgetc>:
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	ec 01       	movw	r28, r24
    2584:	4b 81       	ldd	r20, Y+3	; 0x03
    2586:	40 ff       	sbrs	r20, 0
    2588:	1a c0       	rjmp	.+52     	; 0x25be <fgetc+0x40>
    258a:	46 ff       	sbrs	r20, 6
    258c:	0a c0       	rjmp	.+20     	; 0x25a2 <fgetc+0x24>
    258e:	4f 7b       	andi	r20, 0xBF	; 191
    2590:	4b 83       	std	Y+3, r20	; 0x03
    2592:	8e 81       	ldd	r24, Y+6	; 0x06
    2594:	9f 81       	ldd	r25, Y+7	; 0x07
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	9f 83       	std	Y+7, r25	; 0x07
    259a:	8e 83       	std	Y+6, r24	; 0x06
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	28 2f       	mov	r18, r24
    25a0:	2b c0       	rjmp	.+86     	; 0x25f8 <fgetc+0x7a>
    25a2:	42 ff       	sbrs	r20, 2
    25a4:	13 c0       	rjmp	.+38     	; 0x25cc <fgetc+0x4e>
    25a6:	e8 81       	ld	r30, Y
    25a8:	f9 81       	ldd	r31, Y+1	; 0x01
    25aa:	80 81       	ld	r24, Z
    25ac:	28 2f       	mov	r18, r24
    25ae:	33 27       	eor	r19, r19
    25b0:	27 fd       	sbrc	r18, 7
    25b2:	30 95       	com	r19
    25b4:	21 15       	cp	r18, r1
    25b6:	31 05       	cpc	r19, r1
    25b8:	29 f4       	brne	.+10     	; 0x25c4 <fgetc+0x46>
    25ba:	40 62       	ori	r20, 0x20	; 32
    25bc:	4b 83       	std	Y+3, r20	; 0x03
    25be:	2f ef       	ldi	r18, 0xFF	; 255
    25c0:	3f ef       	ldi	r19, 0xFF	; 255
    25c2:	1b c0       	rjmp	.+54     	; 0x25fa <fgetc+0x7c>
    25c4:	31 96       	adiw	r30, 0x01	; 1
    25c6:	f9 83       	std	Y+1, r31	; 0x01
    25c8:	e8 83       	st	Y, r30
    25ca:	11 c0       	rjmp	.+34     	; 0x25ee <fgetc+0x70>
    25cc:	ea 85       	ldd	r30, Y+10	; 0x0a
    25ce:	fb 85       	ldd	r31, Y+11	; 0x0b
    25d0:	ce 01       	movw	r24, r28
    25d2:	09 95       	icall
    25d4:	9c 01       	movw	r18, r24
    25d6:	97 ff       	sbrs	r25, 7
    25d8:	0a c0       	rjmp	.+20     	; 0x25ee <fgetc+0x70>
    25da:	9b 81       	ldd	r25, Y+3	; 0x03
    25dc:	2f 5f       	subi	r18, 0xFF	; 255
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	11 f0       	breq	.+4      	; 0x25e6 <fgetc+0x68>
    25e2:	80 e2       	ldi	r24, 0x20	; 32
    25e4:	01 c0       	rjmp	.+2      	; 0x25e8 <fgetc+0x6a>
    25e6:	80 e1       	ldi	r24, 0x10	; 16
    25e8:	89 2b       	or	r24, r25
    25ea:	8b 83       	std	Y+3, r24	; 0x03
    25ec:	e8 cf       	rjmp	.-48     	; 0x25be <fgetc+0x40>
    25ee:	8e 81       	ldd	r24, Y+6	; 0x06
    25f0:	9f 81       	ldd	r25, Y+7	; 0x07
    25f2:	01 96       	adiw	r24, 0x01	; 1
    25f4:	9f 83       	std	Y+7, r25	; 0x07
    25f6:	8e 83       	std	Y+6, r24	; 0x06
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	c9 01       	movw	r24, r18
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	08 95       	ret

00002602 <ungetc>:
    2602:	9c 01       	movw	r18, r24
    2604:	fb 01       	movw	r30, r22
    2606:	83 81       	ldd	r24, Z+3	; 0x03
    2608:	80 ff       	sbrs	r24, 0
    260a:	11 c0       	rjmp	.+34     	; 0x262e <ungetc+0x2c>
    260c:	86 fd       	sbrc	r24, 6
    260e:	0f c0       	rjmp	.+30     	; 0x262e <ungetc+0x2c>
    2610:	9f ef       	ldi	r25, 0xFF	; 255
    2612:	2f 3f       	cpi	r18, 0xFF	; 255
    2614:	39 07       	cpc	r19, r25
    2616:	59 f0       	breq	.+22     	; 0x262e <ungetc+0x2c>
    2618:	22 83       	std	Z+2, r18	; 0x02
    261a:	80 64       	ori	r24, 0x40	; 64
    261c:	8f 7d       	andi	r24, 0xDF	; 223
    261e:	83 83       	std	Z+3, r24	; 0x03
    2620:	86 81       	ldd	r24, Z+6	; 0x06
    2622:	97 81       	ldd	r25, Z+7	; 0x07
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	97 83       	std	Z+7, r25	; 0x07
    2628:	86 83       	std	Z+6, r24	; 0x06
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <ungetc+0x30>
    262e:	2f ef       	ldi	r18, 0xFF	; 255
    2630:	3f ef       	ldi	r19, 0xFF	; 255
    2632:	c9 01       	movw	r24, r18
    2634:	08 95       	ret

00002636 <__ultoa_invert>:
    2636:	fa 01       	movw	r30, r20
    2638:	aa 27       	eor	r26, r26
    263a:	28 30       	cpi	r18, 0x08	; 8
    263c:	51 f1       	breq	.+84     	; 0x2692 <__ultoa_invert+0x5c>
    263e:	20 31       	cpi	r18, 0x10	; 16
    2640:	81 f1       	breq	.+96     	; 0x26a2 <__ultoa_invert+0x6c>
    2642:	e8 94       	clt
    2644:	6f 93       	push	r22
    2646:	6e 7f       	andi	r22, 0xFE	; 254
    2648:	6e 5f       	subi	r22, 0xFE	; 254
    264a:	7f 4f       	sbci	r23, 0xFF	; 255
    264c:	8f 4f       	sbci	r24, 0xFF	; 255
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	af 4f       	sbci	r26, 0xFF	; 255
    2652:	b1 e0       	ldi	r27, 0x01	; 1
    2654:	3e d0       	rcall	.+124    	; 0x26d2 <__ultoa_invert+0x9c>
    2656:	b4 e0       	ldi	r27, 0x04	; 4
    2658:	3c d0       	rcall	.+120    	; 0x26d2 <__ultoa_invert+0x9c>
    265a:	67 0f       	add	r22, r23
    265c:	78 1f       	adc	r23, r24
    265e:	89 1f       	adc	r24, r25
    2660:	9a 1f       	adc	r25, r26
    2662:	a1 1d       	adc	r26, r1
    2664:	68 0f       	add	r22, r24
    2666:	79 1f       	adc	r23, r25
    2668:	8a 1f       	adc	r24, r26
    266a:	91 1d       	adc	r25, r1
    266c:	a1 1d       	adc	r26, r1
    266e:	6a 0f       	add	r22, r26
    2670:	71 1d       	adc	r23, r1
    2672:	81 1d       	adc	r24, r1
    2674:	91 1d       	adc	r25, r1
    2676:	a1 1d       	adc	r26, r1
    2678:	20 d0       	rcall	.+64     	; 0x26ba <__ultoa_invert+0x84>
    267a:	09 f4       	brne	.+2      	; 0x267e <__ultoa_invert+0x48>
    267c:	68 94       	set
    267e:	3f 91       	pop	r19
    2680:	2a e0       	ldi	r18, 0x0A	; 10
    2682:	26 9f       	mul	r18, r22
    2684:	11 24       	eor	r1, r1
    2686:	30 19       	sub	r19, r0
    2688:	30 5d       	subi	r19, 0xD0	; 208
    268a:	31 93       	st	Z+, r19
    268c:	de f6       	brtc	.-74     	; 0x2644 <__ultoa_invert+0xe>
    268e:	cf 01       	movw	r24, r30
    2690:	08 95       	ret
    2692:	46 2f       	mov	r20, r22
    2694:	47 70       	andi	r20, 0x07	; 7
    2696:	40 5d       	subi	r20, 0xD0	; 208
    2698:	41 93       	st	Z+, r20
    269a:	b3 e0       	ldi	r27, 0x03	; 3
    269c:	0f d0       	rcall	.+30     	; 0x26bc <__ultoa_invert+0x86>
    269e:	c9 f7       	brne	.-14     	; 0x2692 <__ultoa_invert+0x5c>
    26a0:	f6 cf       	rjmp	.-20     	; 0x268e <__ultoa_invert+0x58>
    26a2:	46 2f       	mov	r20, r22
    26a4:	4f 70       	andi	r20, 0x0F	; 15
    26a6:	40 5d       	subi	r20, 0xD0	; 208
    26a8:	4a 33       	cpi	r20, 0x3A	; 58
    26aa:	18 f0       	brcs	.+6      	; 0x26b2 <__ultoa_invert+0x7c>
    26ac:	49 5d       	subi	r20, 0xD9	; 217
    26ae:	31 fd       	sbrc	r19, 1
    26b0:	40 52       	subi	r20, 0x20	; 32
    26b2:	41 93       	st	Z+, r20
    26b4:	02 d0       	rcall	.+4      	; 0x26ba <__ultoa_invert+0x84>
    26b6:	a9 f7       	brne	.-22     	; 0x26a2 <__ultoa_invert+0x6c>
    26b8:	ea cf       	rjmp	.-44     	; 0x268e <__ultoa_invert+0x58>
    26ba:	b4 e0       	ldi	r27, 0x04	; 4
    26bc:	a6 95       	lsr	r26
    26be:	97 95       	ror	r25
    26c0:	87 95       	ror	r24
    26c2:	77 95       	ror	r23
    26c4:	67 95       	ror	r22
    26c6:	ba 95       	dec	r27
    26c8:	c9 f7       	brne	.-14     	; 0x26bc <__ultoa_invert+0x86>
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	61 05       	cpc	r22, r1
    26ce:	71 05       	cpc	r23, r1
    26d0:	08 95       	ret
    26d2:	9b 01       	movw	r18, r22
    26d4:	ac 01       	movw	r20, r24
    26d6:	0a 2e       	mov	r0, r26
    26d8:	06 94       	lsr	r0
    26da:	57 95       	ror	r21
    26dc:	47 95       	ror	r20
    26de:	37 95       	ror	r19
    26e0:	27 95       	ror	r18
    26e2:	ba 95       	dec	r27
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <__ultoa_invert+0xa2>
    26e6:	62 0f       	add	r22, r18
    26e8:	73 1f       	adc	r23, r19
    26ea:	84 1f       	adc	r24, r20
    26ec:	95 1f       	adc	r25, r21
    26ee:	a0 1d       	adc	r26, r0
    26f0:	08 95       	ret

000026f2 <__ctype_isfalse>:
    26f2:	99 27       	eor	r25, r25
    26f4:	88 27       	eor	r24, r24

000026f6 <__ctype_istrue>:
    26f6:	08 95       	ret

000026f8 <_exit>:
    26f8:	f8 94       	cli

000026fa <__stop_program>:
    26fa:	ff cf       	rjmp	.-2      	; 0x26fa <__stop_program>
