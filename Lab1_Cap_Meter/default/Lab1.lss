
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000019dc  00001a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007f  0080013e  0080013e  00001aae  2**0
                  ALLOC
  3 .stab         00002c10  00000000  00000000  00001ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000941  00000000  00000000  000046c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005001  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002297  00000000  00000000  00005130  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c2c  00000000  00000000  000073c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ed7  00000000  00000000  00007ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000518  00000000  00000000  00008ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006b7  00000000  00000000  000093e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017f3  00000000  00000000  00009a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  0000b28e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_12>
      34:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_13>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_16>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_number>:
      cc:	43 61 70 61 63 69 74 61 6e 63 65 3d 00 00           Capacitance=..

000000da <LCD_initialize>:
      da:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000eb <__c.2006>:
      eb:	6e 61 6e 00                                         nan.

000000ef <__c.2004>:
      ef:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ff:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10f:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1af:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1bf:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1cf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1df:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e4       	ldi	r29, 0x40	; 64
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	ec ed       	ldi	r30, 0xDC	; 220
     202:	f9 e1       	ldi	r31, 0x19	; 25
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	ae 33       	cpi	r26, 0x3E	; 62
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	ae e3       	ldi	r26, 0x3E	; 62
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	ad 3b       	cpi	r26, 0xBD	; 189
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 2e 05 	call	0xa5c	; 0xa5c <main>
     228:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     230:	98 2f       	mov	r25, r24
     232:	90 7f       	andi	r25, 0xF0	; 240
     234:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_RS;
     236:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     238:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23a:	ef e3       	ldi	r30, 0x3F	; 63
     23c:	ff e1       	ldi	r31, 0x1F	; 31
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <LCDsendChar+0xe>
     242:	00 c0       	rjmp	.+0      	; 0x244 <LCDsendChar+0x14>
     244:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     246:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     248:	40 98       	cbi	0x08, 0	; 8
     24a:	ef e3       	ldi	r30, 0x3F	; 63
     24c:	ff e1       	ldi	r31, 0x1F	; 31
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <LCDsendChar+0x1e>
     252:	00 c0       	rjmp	.+0      	; 0x254 <LCDsendChar+0x24>
     254:	00 00       	nop
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     256:	f0 e1       	ldi	r31, 0x10	; 16
     258:	8f 9f       	mul	r24, r31
     25a:	c0 01       	movw	r24, r0
     25c:	11 24       	eor	r1, r1
     25e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     260:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     262:	42 9a       	sbi	0x08, 2	; 8
     264:	8f e3       	ldi	r24, 0x3F	; 63
     266:	9f e1       	ldi	r25, 0x1F	; 31
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <LCDsendChar+0x38>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <LCDsendChar+0x3e>
     26e:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     270:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     272:	40 98       	cbi	0x08, 0	; 8
     274:	ef e3       	ldi	r30, 0x3F	; 63
     276:	ff e1       	ldi	r31, 0x1F	; 31
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <LCDsendChar+0x48>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <LCDsendChar+0x4e>
     27e:	00 00       	nop
     280:	08 95       	ret

00000282 <LCDsendCommand>:
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     282:	98 2f       	mov	r25, r24
     284:	90 7f       	andi	r25, 0xF0	; 240
     286:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_E;		
     288:	42 9a       	sbi	0x08, 2	; 8
     28a:	ef e3       	ldi	r30, 0x3F	; 63
     28c:	ff e1       	ldi	r31, 0x1F	; 31
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <LCDsendCommand+0xc>
     292:	00 c0       	rjmp	.+0      	; 0x294 <LCDsendCommand+0x12>
     294:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     296:	42 98       	cbi	0x08, 2	; 8
     298:	ef e3       	ldi	r30, 0x3F	; 63
     29a:	ff e1       	ldi	r31, 0x1F	; 31
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <LCDsendCommand+0x1a>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCDsendCommand+0x20>
     2a2:	00 00       	nop
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     2a4:	f0 e1       	ldi	r31, 0x10	; 16
     2a6:	8f 9f       	mul	r24, r31
     2a8:	c0 01       	movw	r24, r0
     2aa:	11 24       	eor	r1, r1
     2ac:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     2ae:	42 9a       	sbi	0x08, 2	; 8
     2b0:	8f e3       	ldi	r24, 0x3F	; 63
     2b2:	9f e1       	ldi	r25, 0x1F	; 31
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCDsendCommand+0x32>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCDsendCommand+0x38>
     2ba:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     2bc:	42 98       	cbi	0x08, 2	; 8
     2be:	ef e3       	ldi	r30, 0x3F	; 63
     2c0:	ff e1       	ldi	r31, 0x1F	; 31
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCDsendCommand+0x40>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCDsendCommand+0x46>
     2c8:	00 00       	nop
     2ca:	08 95       	ret

000002cc <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000002d2 <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000002d8 <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	1f 92       	push	r1
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	71 f0       	breq	.+28     	; 0x308 <LCDstring+0x30>
     2ec:	18 2f       	mov	r17, r24
     2ee:	7c 01       	movw	r14, r24
     2f0:	07 c0       	rjmp	.+14     	; 0x300 <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     2f2:	f7 01       	movw	r30, r14
     2f4:	81 91       	ld	r24, Z+
     2f6:	7f 01       	movw	r14, r30
     2f8:	69 83       	std	Y+1, r22	; 0x01
     2fa:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
     2fe:	69 81       	ldd	r22, Y+1	; 0x01

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     300:	8e 2d       	mov	r24, r14
     302:	81 1b       	sub	r24, r17
     304:	86 17       	cp	r24, r22
     306:	a8 f3       	brcs	.-22     	; 0x2f2 <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     308:	0f 90       	pop	r0
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	08 95       	ret

00000316 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     316:	62 30       	cpi	r22, 0x02	; 2
     318:	31 f0       	breq	.+12     	; 0x326 <LCDGotoXY+0x10>
     31a:	63 30       	cpi	r22, 0x03	; 3
     31c:	31 f0       	breq	.+12     	; 0x32a <LCDGotoXY+0x14>
     31e:	61 30       	cpi	r22, 0x01	; 1
     320:	29 f4       	brne	.+10     	; 0x32c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     322:	80 5c       	subi	r24, 0xC0	; 192
     324:	03 c0       	rjmp	.+6      	; 0x32c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     326:	8c 5e       	subi	r24, 0xEC	; 236
     328:	01 c0       	rjmp	.+2      	; 0x32c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     32a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     32c:	80 68       	ori	r24, 0x80	; 128
     32e:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

00000332 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	ec 01       	movw	r28, r24
     33a:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     33c:	64 2f       	mov	r22, r20
     33e:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	03 c0       	rjmp	.+6      	; 0x34c <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     346:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     34a:	1f 5f       	subi	r17, 0xFF	; 255
     34c:	fe 01       	movw	r30, r28
     34e:	e1 0f       	add	r30, r17
     350:	f1 1d       	adc	r31, r1
     352:	84 91       	lpm	r24, Z
     354:	81 11       	cpse	r24, r1
     356:	f7 cf       	rjmp	.-18     	; 0x346 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	08 95       	ret

00000360 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     36e:	88 e0       	ldi	r24, 0x08	; 8
     370:	68 9f       	mul	r22, r24
     372:	b0 01       	movw	r22, r0
     374:	11 24       	eor	r1, r1
     376:	80 e4       	ldi	r24, 0x40	; 64
     378:	e8 2e       	mov	r14, r24
     37a:	e6 2a       	or	r14, r22
	for (i=0; i<8; i++){
     37c:	c0 e0       	ldi	r28, 0x00	; 0
     37e:	d0 e0       	ldi	r29, 0x00	; 0
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     380:	f8 01       	movw	r30, r16
     382:	ec 0f       	add	r30, r28
     384:	fd 1f       	adc	r31, r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     386:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
     388:	8c 2f       	mov	r24, r28
     38a:	8e 0d       	add	r24, r14
     38c:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendChar(pcc);
     390:	8f 2d       	mov	r24, r15
     392:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     396:	21 96       	adiw	r28, 0x01	; 1
     398:	c8 30       	cpi	r28, 0x08	; 8
     39a:	d1 05       	cpc	r29, r1
     39c:	89 f7       	brne	.-30     	; 0x380 <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	08 95       	ret

000003ac <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	8f e5       	ldi	r24, 0x5F	; 95
     3b4:	9a ee       	ldi	r25, 0xEA	; 234
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <LCDinit+0xa>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCDinit+0x10>
     3bc:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     3be:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     3c0:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     3c2:	87 b1       	in	r24, 0x07	; 7
     3c4:	80 6f       	ori	r24, 0xF0	; 240
     3c6:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     3c8:	87 b1       	in	r24, 0x07	; 7
     3ca:	87 60       	ori	r24, 0x07	; 7
     3cc:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     3ce:	80 e3       	ldi	r24, 0x30	; 48
     3d0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     3d2:	42 9a       	sbi	0x08, 2	; 8
     3d4:	ef e3       	ldi	r30, 0x3F	; 63
     3d6:	ff e1       	ldi	r31, 0x1F	; 31
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCDinit+0x2c>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <LCDinit+0x32>
     3de:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     3e0:	42 98       	cbi	0x08, 2	; 8
     3e2:	ef e3       	ldi	r30, 0x3F	; 63
     3e4:	ff e1       	ldi	r31, 0x1F	; 31
     3e6:	31 97       	sbiw	r30, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCDinit+0x3a>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCDinit+0x40>
     3ec:	00 00       	nop
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     3ee:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     3f0:	42 9a       	sbi	0x08, 2	; 8
     3f2:	8f e3       	ldi	r24, 0x3F	; 63
     3f4:	9f e1       	ldi	r25, 0x1F	; 31
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCDinit+0x4a>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCDinit+0x50>
     3fc:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     3fe:	42 98       	cbi	0x08, 2	; 8
     400:	ef e3       	ldi	r30, 0x3F	; 63
     402:	ff e1       	ldi	r31, 0x1F	; 31
     404:	31 97       	sbiw	r30, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <LCDinit+0x58>
     408:	00 c0       	rjmp	.+0      	; 0x40a <LCDinit+0x5e>
     40a:	00 00       	nop
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     40c:	80 e2       	ldi	r24, 0x20	; 32
     40e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     410:	42 9a       	sbi	0x08, 2	; 8
     412:	8f e3       	ldi	r24, 0x3F	; 63
     414:	9f e1       	ldi	r25, 0x1F	; 31
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <LCDinit+0x6a>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <LCDinit+0x70>
     41c:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     41e:	42 98       	cbi	0x08, 2	; 8
     420:	ef e3       	ldi	r30, 0x3F	; 63
     422:	ff e1       	ldi	r31, 0x1F	; 31
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <LCDinit+0x78>
     428:	00 c0       	rjmp	.+0      	; 0x42a <LCDinit+0x7e>
     42a:	00 00       	nop
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     42c:	88 e2       	ldi	r24, 0x28	; 40
     42e:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     432:	8c e0       	ldi	r24, 0x0C	; 12
     434:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
     438:	cc e8       	ldi	r28, 0x8C	; 140
     43a:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     43c:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     43e:	16 2f       	mov	r17, r22
     440:	1f 5f       	subi	r17, 0xFF	; 255
     442:	ce 01       	movw	r24, r28
     444:	0e 94 b0 01 	call	0x360	; 0x360 <LCDdefinechar>
     448:	28 96       	adiw	r28, 0x08	; 8
     44a:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     44c:	18 30       	cpi	r17, 0x08	; 8
     44e:	b9 f7       	brne	.-18     	; 0x43e <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	08 95       	ret

00000458 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     45e:	c0 e0       	ldi	r28, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
     462:	8e e1       	ldi	r24, 0x1E	; 30
     464:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     468:	cf 5f       	subi	r28, 0xFF	; 255
     46a:	cd 13       	cpse	r28, r29
     46c:	fa cf       	rjmp	.-12     	; 0x462 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     47a:	c0 e0       	ldi	r28, 0x00	; 0
     47c:	04 c0       	rjmp	.+8      	; 0x486 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
     47e:	88 e1       	ldi	r24, 0x18	; 24
     480:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     484:	cf 5f       	subi	r28, 0xFF	; 255
     486:	cd 13       	cpse	r28, r29
     488:	fa cf       	rjmp	.-12     	; 0x47e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     490:	8e e0       	ldi	r24, 0x0E	; 14
     492:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

00000496 <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     496:	8f e0       	ldi	r24, 0x0F	; 15
     498:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

0000049c <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     49c:	8c e0       	ldi	r24, 0x0C	; 12
     49e:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004a2 <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     4a2:	88 e0       	ldi	r24, 0x08	; 8
     4a4:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004a8 <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     4a8:	8c e0       	ldi	r24, 0x0C	; 12
     4aa:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004ae <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     4b4:	c0 e0       	ldi	r28, 0x00	; 0
     4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
     4b8:	80 e1       	ldi	r24, 0x10	; 16
     4ba:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     4be:	cf 5f       	subi	r28, 0xFF	; 255
     4c0:	cd 13       	cpse	r28, r29
     4c2:	fa cf       	rjmp	.-12     	; 0x4b8 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     4d0:	c0 e0       	ldi	r28, 0x00	; 0
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
     4d4:	84 e1       	ldi	r24, 0x14	; 20
     4d6:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     4da:	cf 5f       	subi	r28, 0xFF	; 255
     4dc:	cd 13       	cpse	r28, r29
     4de:	fa cf       	rjmp	.-12     	; 0x4d4 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	1f 92       	push	r1
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     4fc:	56 e0       	ldi	r21, 0x06	; 6
     4fe:	45 9f       	mul	r20, r21
     500:	90 01       	movw	r18, r0
     502:	11 24       	eor	r1, r1
     504:	e8 2f       	mov	r30, r24
     506:	e2 9f       	mul	r30, r18
     508:	c0 01       	movw	r24, r0
     50a:	e3 9f       	mul	r30, r19
     50c:	90 0d       	add	r25, r0
     50e:	11 24       	eor	r1, r1
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__divmodhi4>
     516:	8b 01       	movw	r16, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     518:	cb 01       	movw	r24, r22
     51a:	66 e0       	ldi	r22, 0x06	; 6
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__udivmodhi4>
     522:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     524:	c1 2c       	mov	r12, r1
     526:	d1 2c       	mov	r13, r1
     528:	f1 2c       	mov	r15, r1
     52a:	16 c0       	rjmp	.+44     	; 0x558 <LCDprogressBar+0x72>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     52c:	96 01       	movw	r18, r12
     52e:	2b 5f       	subi	r18, 0xFB	; 251
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	02 17       	cp	r16, r18
     534:	13 07       	cpc	r17, r19
     536:	28 f4       	brcc	.+10     	; 0x542 <LCDprogressBar+0x5c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     538:	0c 15       	cp	r16, r12
     53a:	1d 05       	cpc	r17, r13
     53c:	20 f0       	brcs	.+8      	; 0x546 <LCDprogressBar+0x60>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     53e:	8e 2d       	mov	r24, r14
     540:	03 c0       	rjmp	.+6      	; 0x548 <LCDprogressBar+0x62>
			}
		}
		else
		{
			// this is a full block
			c = 5;
     542:	85 e0       	ldi	r24, 0x05	; 5
     544:	01 c0       	rjmp	.+2      	; 0x548 <LCDprogressBar+0x62>
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
     546:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     548:	49 83       	std	Y+1, r20	; 0x01
     54a:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     54e:	f3 94       	inc	r15
     550:	f6 e0       	ldi	r31, 0x06	; 6
     552:	cf 0e       	add	r12, r31
     554:	d1 1c       	adc	r13, r1
     556:	49 81       	ldd	r20, Y+1	; 0x01
     558:	f4 12       	cpse	r15, r20
     55a:	e8 cf       	rjmp	.-48     	; 0x52c <LCDprogressBar+0x46>
		
		// write character to display
		LCDsendChar(c);
	}

}
     55c:	0f 90       	pop	r0
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret

00000570 <init_cap_measurement_analog_timer>:

//configures Analog Comparator and Timer1
//set it to full speed 
//clear TCNT1
void init_cap_measurement_analog_timer(){
	TCCR1B = 0;
     570:	e1 e8       	ldi	r30, 0x81	; 129
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	10 82       	st	Z, r1
	//full speed [ 16 MHz], capture on positive edge
	TCCR1B |= INPUT_CAPTURE_EDGE_SELECT + T0B_CS00;
     576:	80 81       	ld	r24, Z
     578:	81 64       	ori	r24, 0x41	; 65
     57a:	80 83       	st	Z, r24
	//turn on timer 1 interrupt-on-capture
	TIMSK1 = 0;
     57c:	ef e6       	ldi	r30, 0x6F	; 111
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	10 82       	st	Z, r1
	TIMSK1 |= INTERRUPT_ON_CAPTURE ;
     582:	80 81       	ld	r24, Z
     584:	80 62       	ori	r24, 0x20	; 32
     586:	80 83       	st	Z, r24

	//set analog comp to connect to timer capture input
	//with positive input reference voltage
	ACSR = 0;
     588:	10 be       	out	0x30, r1	; 48
	ACSR |= ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     58a:	80 b7       	in	r24, 0x30	; 48
     58c:	84 60       	ori	r24, 0x04	; 4
     58e:	80 bf       	out	0x30, r24	; 48
	ACSR &= ~ANALOG_COMPARATOR_BANDGAP_SELECT;
     590:	80 b7       	in	r24, 0x30	; 48
     592:	8f 7b       	andi	r24, 0xBF	; 191
     594:	80 bf       	out	0x30, r24	; 48
	//set all ports to input
	DDRB = 0;
     596:	14 b8       	out	0x04, r1	; 4
	DDRB &= ~(COMPARATOR_INPUT + COMPARATOR_REFERENCE);
     598:	84 b1       	in	r24, 0x04	; 4
     59a:	83 7f       	andi	r24, 0xF3	; 243
     59c:	84 b9       	out	0x04, r24	; 4
     59e:	08 95       	ret

000005a0 <init_cap_discharge_wait_timer>:

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     5a0:	22 e0       	ldi	r18, 0x02	; 2
     5a2:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     5a6:	8a e5       	ldi	r24, 0x5A	; 90
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	90 93 89 00 	sts	0x0089, r25
     5ae:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     5b2:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     5b6:	e0 e8       	ldi	r30, 0x80	; 128
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	10 82       	st	Z, r1
	TCCR1A |= CLEAR_ON_MATCH;
     5bc:	80 81       	ld	r24, Z
     5be:	82 60       	ori	r24, 0x02	; 2
     5c0:	80 83       	st	Z, r24
     5c2:	08 95       	ret

000005c4 <init_cap_measurements>:
	Convert PortB2 to an input and start a timer. The capacitor will start to charge toward Vcc.
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
	DDRB = 0;
     5c4:	14 b8       	out	0x04, r1	; 4
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     5c6:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     5c8:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     5ca:	2a 98       	cbi	0x05, 2	; 5
	//use Timer1.A to perform this delay and signal when we can continue measurements
	init_cap_discharge_wait_timer();
     5cc:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <init_cap_discharge_wait_timer>

000005d0 <__vector_16>:
}

//1 ms timebase register
//Blinks LED 1/second
//refreshes LCD 1/200 ms
ISR (TIMER0_COMPA_vect){
     5d0:	1f 92       	push	r1
     5d2:	0f 92       	push	r0
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	0f 92       	push	r0
     5d8:	11 24       	eor	r1, r1
     5da:	8f 93       	push	r24
     5dc:	9f 93       	push	r25
	if( led_time_count > 0)
     5de:	80 91 b1 01 	lds	r24, 0x01B1
     5e2:	90 91 b2 01 	lds	r25, 0x01B2
     5e6:	89 2b       	or	r24, r25
     5e8:	49 f0       	breq	.+18     	; 0x5fc <__vector_16+0x2c>
		--led_time_count;
     5ea:	80 91 b1 01 	lds	r24, 0x01B1
     5ee:	90 91 b2 01 	lds	r25, 0x01B2
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	90 93 b2 01 	sts	0x01B2, r25
     5f8:	80 93 b1 01 	sts	0x01B1, r24
	if( lcd_time_count > 0)
     5fc:	80 91 90 01 	lds	r24, 0x0190
     600:	90 91 91 01 	lds	r25, 0x0191
     604:	89 2b       	or	r24, r25
     606:	49 f0       	breq	.+18     	; 0x61a <__vector_16+0x4a>
		--lcd_time_count;
     608:	80 91 90 01 	lds	r24, 0x0190
     60c:	90 91 91 01 	lds	r25, 0x0191
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	90 93 91 01 	sts	0x0191, r25
     616:	80 93 90 01 	sts	0x0190, r24

}
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <__vector_13>:
//Once this triggers even once, we know that we have waited long enough for a cap discharge
ISR (TIMER1_COMPA_vect){
     628:	1f 92       	push	r1
     62a:	0f 92       	push	r0
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	0f 92       	push	r0
     630:	11 24       	eor	r1, r1
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
	cap_discharged = TRUE;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	90 93 a9 01 	sts	0x01A9, r25
     63e:	80 93 a8 01 	sts	0x01A8, r24
}
     642:	9f 91       	pop	r25
     644:	8f 91       	pop	r24
     646:	0f 90       	pop	r0
     648:	0f be       	out	0x3f, r0	; 63
     64a:	0f 90       	pop	r0
     64c:	1f 90       	pop	r1
     64e:	18 95       	reti

00000650 <__vector_12>:
			  t
	C = ------------
		R2 * ln(0.5)

*/
ISR (TIMER1_CAPT_vect){
     650:	1f 92       	push	r1
     652:	0f 92       	push	r0
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	0f 92       	push	r0
     658:	11 24       	eor	r1, r1
     65a:	0b b6       	in	r0, 0x3b	; 59
     65c:	0f 92       	push	r0
     65e:	2f 93       	push	r18
     660:	3f 93       	push	r19
     662:	4f 93       	push	r20
     664:	5f 93       	push	r21
     666:	6f 93       	push	r22
     668:	7f 93       	push	r23
     66a:	8f 93       	push	r24
     66c:	9f 93       	push	r25
     66e:	af 93       	push	r26
     670:	bf 93       	push	r27
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ef 93       	push	r30
     678:	ff 93       	push	r31
	// read timer1 input capture register
    charge_cycles = ICR1;
     67a:	c6 e8       	ldi	r28, 0x86	; 134
     67c:	d0 e0       	ldi	r29, 0x00	; 0
     67e:	68 81       	ld	r22, Y
     680:	79 81       	ldd	r23, Y+1	; 0x01
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatunsisf>
     68a:	60 93 a4 01 	sts	0x01A4, r22
     68e:	70 93 a5 01 	sts	0x01A5, r23
     692:	80 93 a6 01 	sts	0x01A6, r24
     696:	90 93 a7 01 	sts	0x01A7, r25
	ICR1 = 0;
     69a:	19 82       	std	Y+1, r1	; 0x01
     69c:	18 82       	st	Y, r1
    // set the charged flag to true
    cap_charged = TRUE;
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	90 93 b6 01 	sts	0x01B6, r25
     6a6:	80 93 b5 01 	sts	0x01B5, r24
}
     6aa:	ff 91       	pop	r31
     6ac:	ef 91       	pop	r30
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	bf 91       	pop	r27
     6b4:	af 91       	pop	r26
     6b6:	9f 91       	pop	r25
     6b8:	8f 91       	pop	r24
     6ba:	7f 91       	pop	r23
     6bc:	6f 91       	pop	r22
     6be:	5f 91       	pop	r21
     6c0:	4f 91       	pop	r20
     6c2:	3f 91       	pop	r19
     6c4:	2f 91       	pop	r18
     6c6:	0f 90       	pop	r0
     6c8:	0b be       	out	0x3b, r0	; 59
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <toggle_led>:

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     6d4:	8b b1       	in	r24, 0x0b	; 11
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	89 27       	eor	r24, r25
     6da:	8b b9       	out	0x0b, r24	; 11
     6dc:	08 95       	ret

000006de <init_timer0A>:
//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 249;
     6e4:	89 ef       	ldi	r24, 0xF9	; 249
     6e6:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     6e8:	83 e0       	ldi	r24, 0x03	; 3
     6ea:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     6ec:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     6ee:	84 b5       	in	r24, 0x24	; 36
     6f0:	82 60       	ori	r24, 0x02	; 2
     6f2:	84 bd       	out	0x24, r24	; 36
     6f4:	08 95       	ret

000006f6 <init_lcd>:
}

// LCD setup
void init_lcd(void){
	LCDinit();	//initialize the display
     6f6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCDinit>
	LCDcursorOFF();
     6fa:	0e 94 4e 02 	call	0x49c	; 0x49c <LCDcursorOFF>
	LCDclr();				//clear the display
     6fe:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDclr>
	LCDGotoXY(0,0);
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
	CopyStringtoLCD(LCD_number, 0, 0);
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	8c ec       	ldi	r24, 0xCC	; 204
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0c 94 99 01 	jmp	0x332	; 0x332 <CopyStringtoLCD>

00000716 <refresh_lcd>:

// writes contents of lcd_buffer to LCD every 200 mSec
// 
void refresh_lcd(void){
  // increment time counter and format string 
  if (charge_cycles - 125 > 100) {
     716:	60 91 a4 01 	lds	r22, 0x01A4
     71a:	70 91 a5 01 	lds	r23, 0x01A5
     71e:	80 91 a6 01 	lds	r24, 0x01A6
     722:	90 91 a7 01 	lds	r25, 0x01A7
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	4a ef       	ldi	r20, 0xFA	; 250
     72c:	52 e4       	ldi	r21, 0x42	; 66
     72e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__subsf3>
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	48 ec       	ldi	r20, 0xC8	; 200
     738:	52 e4       	ldi	r21, 0x42	; 66
     73a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__gesf2>
     73e:	18 16       	cp	r1, r24
     740:	fc f4       	brge	.+62     	; 0x780 <refresh_lcd+0x6a>
  //sprintf(lcd_buffer,"%-.4f",capacitance);
  sprintf(lcd_buffer,"%-.4f", charge_cycles);	 
     742:	80 91 a4 01 	lds	r24, 0x01A4
     746:	90 91 a5 01 	lds	r25, 0x01A5
     74a:	a0 91 a6 01 	lds	r26, 0x01A6
     74e:	b0 91 a7 01 	lds	r27, 0x01A7
     752:	bf 93       	push	r27
     754:	af 93       	push	r26
     756:	9f 93       	push	r25
     758:	8f 93       	push	r24
     75a:	82 e1       	ldi	r24, 0x12	; 18
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	82 e9       	ldi	r24, 0x92	; 146
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	9f 93       	push	r25
     768:	8f 93       	push	r24
     76a:	0e 94 5f 0c 	call	0x18be	; 0x18be <sprintf>
     76e:	8d b7       	in	r24, 0x3d	; 61
     770:	9e b7       	in	r25, 0x3e	; 62
     772:	08 96       	adiw	r24, 0x08	; 8
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	9e bf       	out	0x3e, r25	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	8d bf       	out	0x3d, r24	; 61
     77e:	06 c0       	rjmp	.+12     	; 0x78c <refresh_lcd+0x76>
  }
  else {
  	sprintf(lcd_buffer,"N/A     ");
     780:	68 e1       	ldi	r22, 0x18	; 24
     782:	71 e0       	ldi	r23, 0x01	; 1
     784:	82 e9       	ldi	r24, 0x92	; 146
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <strcpy>
  }               
  LCDGotoXY(0, 1);
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  	// display the capacitance 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     794:	e2 e9       	ldi	r30, 0x92	; 146
     796:	f1 e0       	ldi	r31, 0x01	; 1
     798:	df 01       	movw	r26, r30
     79a:	0d 90       	ld	r0, X+
     79c:	00 20       	and	r0, r0
     79e:	e9 f7       	brne	.-6      	; 0x79a <refresh_lcd+0x84>
     7a0:	bd 01       	movw	r22, r26
     7a2:	61 50       	subi	r22, 0x01	; 1
     7a4:	71 09       	sbc	r23, r1
     7a6:	6e 1b       	sub	r22, r30
     7a8:	7f 0b       	sbc	r23, r31
     7aa:	cf 01       	movw	r24, r30
     7ac:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCDstring>
  // now move a char left and right
  LCDGotoXY(anipos,1);	   //second line
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	80 91 a3 01 	lds	r24, 0x01A3
     7b6:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  LCDsendChar(' '); 
     7ba:	80 e2       	ldi	r24, 0x20	; 32
     7bc:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
      	
  if (anipos>=15) dir=-1;   // check boundaries
     7c0:	90 91 a3 01 	lds	r25, 0x01A3
     7c4:	9f 30       	cpi	r25, 0x0F	; 15
     7c6:	10 f0       	brcs	.+4      	; 0x7cc <refresh_lcd+0xb6>
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <refresh_lcd+0xbc>
  if (anipos<=8 ) dir=1;
     7cc:	99 30       	cpi	r25, 0x09	; 9
     7ce:	18 f4       	brcc	.+6      	; 0x7d6 <refresh_lcd+0xc0>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 ae 01 	sts	0x01AE, r24
  anipos=anipos+dir;
     7d6:	80 91 ae 01 	lds	r24, 0x01AE
     7da:	89 0f       	add	r24, r25
     7dc:	80 93 a3 01 	sts	0x01A3, r24
  LCDGotoXY(anipos,1);	   //second line
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  LCDsendChar('o');
     7e6:	8f e6       	ldi	r24, 0x6F	; 111
     7e8:	0c 94 18 01 	jmp	0x230	; 0x230 <LCDsendChar>

000007ec <initialize>:
}

void initialize(void){
	anipos = 8;
     7ec:	88 e0       	ldi	r24, 0x08	; 8
     7ee:	80 93 a3 01 	sts	0x01A3, r24
	led_time_count = 0;
     7f2:	10 92 b2 01 	sts	0x01B2, r1
     7f6:	10 92 b1 01 	sts	0x01B1, r1
	init_timer0A();
     7fa:	0e 94 6f 03 	call	0x6de	; 0x6de <init_timer0A>

	DDRB = 0;
     7fe:	14 b8       	out	0x04, r1	; 4
	DDRD = 0;
     800:	1a b8       	out	0x0a, r1	; 10

	//Enable LED Port
	DDRD = ONBOARD_LED; //turn the LED to an output
     802:	84 e0       	ldi	r24, 0x04	; 4
     804:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; //turn off LED 
     806:	8f ef       	ldi	r24, 0xFF	; 255
     808:	8b b9       	out	0x0b, r24	; 11

	capacitance = 0;
     80a:	10 92 aa 01 	sts	0x01AA, r1
     80e:	10 92 ab 01 	sts	0x01AB, r1
     812:	10 92 ac 01 	sts	0x01AC, r1
     816:	10 92 ad 01 	sts	0x01AD, r1
	charge_cycles = 0;
     81a:	10 92 a4 01 	sts	0x01A4, r1
     81e:	10 92 a5 01 	sts	0x01A5, r1
     822:	10 92 a6 01 	sts	0x01A6, r1
     826:	10 92 a7 01 	sts	0x01A7, r1
	cap_discharged = FALSE;
     82a:	10 92 a9 01 	sts	0x01A9, r1
     82e:	10 92 a8 01 	sts	0x01A8, r1
	begin_cap_measurement = FALSE;
     832:	10 92 b4 01 	sts	0x01B4, r1
     836:	10 92 b3 01 	sts	0x01B3, r1
	cap_charged = FALSE;
     83a:	10 92 b6 01 	sts	0x01B6, r1
     83e:	10 92 b5 01 	sts	0x01B5, r1

	init_lcd();
     842:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <init_lcd>
	LCDclr();
     846:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDclr>

	uart_init();
     84a:	0e 94 3c 04 	call	0x878	; 0x878 <uart_init>
	stdout = stdin = stderr = &uart_str;
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	90 93 bc 01 	sts	0x01BC, r25
     856:	80 93 bb 01 	sts	0x01BB, r24
     85a:	90 93 b8 01 	sts	0x01B8, r25
     85e:	80 93 b7 01 	sts	0x01B7, r24
     862:	90 93 ba 01 	sts	0x01BA, r25
     866:	80 93 b9 01 	sts	0x01B9, r24
	fprintf(stdout,"Starting timers...\n\r");
     86a:	bc 01       	movw	r22, r24
     86c:	81 e2       	ldi	r24, 0x21	; 33
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputs>


	sei();
     874:	78 94       	sei
     876:	08 95       	ret

00000878 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     878:	87 e6       	ldi	r24, 0x67	; 103
     87a:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     87e:	88 e1       	ldi	r24, 0x18	; 24
     880:	80 93 c1 00 	sts	0x00C1, r24
     884:	08 95       	ret

00000886 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     886:	cf 93       	push	r28
     888:	c8 2f       	mov	r28, r24

  if (c == '\a')
     88a:	87 30       	cpi	r24, 0x07	; 7
     88c:	49 f4       	brne	.+18     	; 0x8a0 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     88e:	60 91 bb 01 	lds	r22, 0x01BB
     892:	70 91 bc 01 	lds	r23, 0x01BC
     896:	86 e3       	ldi	r24, 0x36	; 54
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputs>
     89e:	0b c0       	rjmp	.+22     	; 0x8b6 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     8a0:	8a 30       	cpi	r24, 0x0A	; 10
     8a2:	19 f4       	brne	.+6      	; 0x8aa <uart_putchar+0x24>
    uart_putchar('\r', stream);
     8a4:	8d e0       	ldi	r24, 0x0D	; 13
     8a6:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     8aa:	80 91 c0 00 	lds	r24, 0x00C0
     8ae:	85 ff       	sbrs	r24, 5
     8b0:	fc cf       	rjmp	.-8      	; 0x8aa <uart_putchar+0x24>
  UDR0 = c;
     8b2:	c0 93 c6 00 	sts	0x00C6, r28

  return 0;
}
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	8c 01       	movw	r16, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     8cc:	80 91 3e 01 	lds	r24, 0x013E
     8d0:	90 91 3f 01 	lds	r25, 0x013F
     8d4:	89 2b       	or	r24, r25
     8d6:	09 f0       	breq	.+2      	; 0x8da <uart_getchar+0x1c>
     8d8:	a1 c0       	rjmp	.+322    	; 0xa1c <uart_getchar+0x15e>
     8da:	c0 e4       	ldi	r28, 0x40	; 64
     8dc:	d1 e0       	ldi	r29, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     8de:	80 91 c0 00 	lds	r24, 0x00C0
     8e2:	87 ff       	sbrs	r24, 7
     8e4:	fc cf       	rjmp	.-8      	; 0x8de <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     8e6:	80 91 c0 00 	lds	r24, 0x00C0
     8ea:	84 fd       	sbrc	r24, 4
     8ec:	aa c0       	rjmp	.+340    	; 0xa42 <uart_getchar+0x184>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     8ee:	80 91 c0 00 	lds	r24, 0x00C0
     8f2:	83 fd       	sbrc	r24, 3
     8f4:	a9 c0       	rjmp	.+338    	; 0xa48 <uart_getchar+0x18a>
	  return _FDEV_ERR;
	c = UDR0;
     8f6:	80 91 c6 00 	lds	r24, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     8fa:	8d 30       	cpi	r24, 0x0D	; 13
     8fc:	61 f4       	brne	.+24     	; 0x916 <uart_getchar+0x58>
	  c = '\n';
	if (c == '\n')
	  {
	    *cp = c;
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
     902:	b8 01       	movw	r22, r16
     904:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
	    rxp = b;
     908:	80 e4       	ldi	r24, 0x40	; 64
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	90 93 3f 01 	sts	0x013F, r25
     910:	80 93 3e 01 	sts	0x013E, r24
	    break;
     914:	83 c0       	rjmp	.+262    	; 0xa1c <uart_getchar+0x15e>
	  return _FDEV_ERR;
	c = UDR0;
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
	  c = '\n';
	if (c == '\n')
     916:	8a 30       	cpi	r24, 0x0A	; 10
     918:	91 f3       	breq	.-28     	; 0x8fe <uart_getchar+0x40>
	    *cp = c;
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
     91a:	89 30       	cpi	r24, 0x09	; 9
     91c:	09 f4       	brne	.+2      	; 0x920 <uart_getchar+0x62>
	  c = ' ';
     91e:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     920:	98 2f       	mov	r25, r24
     922:	90 52       	subi	r25, 0x20	; 32
     924:	9f 35       	cpi	r25, 0x5F	; 95
     926:	10 f0       	brcs	.+4      	; 0x92c <uart_getchar+0x6e>
     928:	80 3a       	cpi	r24, 0xA0	; 160
     92a:	90 f0       	brcs	.+36     	; 0x950 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	cf 38       	cpi	r28, 0x8F	; 143
     930:	d9 07       	cpc	r29, r25
     932:	49 f4       	brne	.+18     	; 0x946 <uart_getchar+0x88>
uart_putchar(char c, FILE *stream)
{

  if (c == '\a')
    {
      fputs("*ring*\n", stderr);
     934:	60 91 bb 01 	lds	r22, 0x01BB
     938:	70 91 bc 01 	lds	r23, 0x01BC
     93c:	86 e3       	ldi	r24, 0x36	; 54
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputs>
     944:	cc cf       	rjmp	.-104    	; 0x8de <uart_getchar+0x20>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
     946:	89 93       	st	Y+, r24
		uart_putchar(c, stream);
     948:	b8 01       	movw	r22, r16
     94a:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
     94e:	c7 cf       	rjmp	.-114    	; 0x8de <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     950:	82 31       	cpi	r24, 0x12	; 18
     952:	29 f1       	breq	.+74     	; 0x99e <uart_getchar+0xe0>
     954:	38 f4       	brcc	.+14     	; 0x964 <uart_getchar+0xa6>
     956:	83 30       	cpi	r24, 0x03	; 3
     958:	09 f4       	brne	.+2      	; 0x95c <uart_getchar+0x9e>
     95a:	76 c0       	rjmp	.+236    	; 0xa48 <uart_getchar+0x18a>
     95c:	88 30       	cpi	r24, 0x08	; 8
     95e:	09 f0       	breq	.+2      	; 0x962 <uart_getchar+0xa4>
     960:	be cf       	rjmp	.-132    	; 0x8de <uart_getchar+0x20>
     962:	09 c0       	rjmp	.+18     	; 0x976 <uart_getchar+0xb8>
     964:	87 31       	cpi	r24, 0x17	; 23
     966:	09 f4       	brne	.+2      	; 0x96a <uart_getchar+0xac>
     968:	4d c0       	rjmp	.+154    	; 0xa04 <uart_getchar+0x146>
     96a:	8f 37       	cpi	r24, 0x7F	; 127
     96c:	21 f0       	breq	.+8      	; 0x976 <uart_getchar+0xb8>
     96e:	85 31       	cpi	r24, 0x15	; 21
     970:	09 f0       	breq	.+2      	; 0x974 <uart_getchar+0xb6>
     972:	b5 cf       	rjmp	.-150    	; 0x8de <uart_getchar+0x20>
     974:	34 c0       	rjmp	.+104    	; 0x9de <uart_getchar+0x120>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     976:	e1 e0       	ldi	r30, 0x01	; 1
     978:	c0 34       	cpi	r28, 0x40	; 64
     97a:	de 07       	cpc	r29, r30
     97c:	09 f0       	breq	.+2      	; 0x980 <uart_getchar+0xc2>
     97e:	08 f4       	brcc	.+2      	; 0x982 <uart_getchar+0xc4>
     980:	ae cf       	rjmp	.-164    	; 0x8de <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     982:	b8 01       	movw	r22, r16
     984:	88 e0       	ldi	r24, 0x08	; 8
     986:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
		uart_putchar(' ', stream);
     98a:	b8 01       	movw	r22, r16
     98c:	80 e2       	ldi	r24, 0x20	; 32
     98e:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
		uart_putchar('\b', stream);
     992:	b8 01       	movw	r22, r16
     994:	88 e0       	ldi	r24, 0x08	; 8
     996:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
		cp--;
     99a:	21 97       	sbiw	r28, 0x01	; 1
     99c:	a0 cf       	rjmp	.-192    	; 0x8de <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     99e:	b8 01       	movw	r22, r16
     9a0:	8d e0       	ldi	r24, 0x0D	; 13
     9a2:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     9a6:	80 e4       	ldi	r24, 0x40	; 64
     9a8:	e8 2e       	mov	r14, r24
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	f8 2e       	mov	r15, r24
     9ae:	06 c0       	rjmp	.+12     	; 0x9bc <uart_getchar+0xfe>
	      uart_putchar(*cp2, stream);
     9b0:	b8 01       	movw	r22, r16
     9b2:	f7 01       	movw	r30, r14
     9b4:	81 91       	ld	r24, Z+
     9b6:	7f 01       	movw	r14, r30
     9b8:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     9bc:	ec 16       	cp	r14, r28
     9be:	fd 06       	cpc	r15, r29
     9c0:	b8 f3       	brcs	.-18     	; 0x9b0 <uart_getchar+0xf2>
     9c2:	8d cf       	rjmp	.-230    	; 0x8de <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     9c4:	b8 01       	movw	r22, r16
     9c6:	88 e0       	ldi	r24, 0x08	; 8
     9c8:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
		uart_putchar(' ', stream);
     9cc:	b8 01       	movw	r22, r16
     9ce:	80 e2       	ldi	r24, 0x20	; 32
     9d0:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
		uart_putchar('\b', stream);
     9d4:	b8 01       	movw	r22, r16
     9d6:	88 e0       	ldi	r24, 0x08	; 8
     9d8:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
		cp--;
     9dc:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     9de:	f1 e0       	ldi	r31, 0x01	; 1
     9e0:	c0 34       	cpi	r28, 0x40	; 64
     9e2:	df 07       	cpc	r29, r31
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <uart_getchar+0x12a>
     9e6:	70 f7       	brcc	.-36     	; 0x9c4 <uart_getchar+0x106>
     9e8:	7a cf       	rjmp	.-268    	; 0x8de <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     9ea:	b8 01       	movw	r22, r16
     9ec:	88 e0       	ldi	r24, 0x08	; 8
     9ee:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
		uart_putchar(' ', stream);
     9f2:	b8 01       	movw	r22, r16
     9f4:	80 e2       	ldi	r24, 0x20	; 32
     9f6:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
		uart_putchar('\b', stream);
     9fa:	b8 01       	movw	r22, r16
     9fc:	88 e0       	ldi	r24, 0x08	; 8
     9fe:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
		cp--;
     a02:	e7 01       	movw	r28, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	c0 34       	cpi	r28, 0x40	; 64
     a08:	d8 07       	cpc	r29, r24
     a0a:	09 f0       	breq	.+2      	; 0xa0e <uart_getchar+0x150>
     a0c:	08 f4       	brcc	.+2      	; 0xa10 <uart_getchar+0x152>
     a0e:	67 cf       	rjmp	.-306    	; 0x8de <uart_getchar+0x20>
     a10:	fe 01       	movw	r30, r28
     a12:	82 91       	ld	r24, -Z
     a14:	7f 01       	movw	r14, r30
     a16:	80 32       	cpi	r24, 0x20	; 32
     a18:	41 f7       	brne	.-48     	; 0x9ea <uart_getchar+0x12c>
     a1a:	61 cf       	rjmp	.-318    	; 0x8de <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     a1c:	e0 91 3e 01 	lds	r30, 0x013E
     a20:	f0 91 3f 01 	lds	r31, 0x013F
     a24:	20 81       	ld	r18, Z
  if (c == '\n')
     a26:	2a 30       	cpi	r18, 0x0A	; 10
     a28:	31 f0       	breq	.+12     	; 0xa36 <uart_getchar+0x178>
	      }
	    break;
	  }
      }

  c = *rxp++;
     a2a:	31 96       	adiw	r30, 0x01	; 1
     a2c:	f0 93 3f 01 	sts	0x013F, r31
     a30:	e0 93 3e 01 	sts	0x013E, r30
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <uart_getchar+0x180>
  if (c == '\n')
    rxp = 0;
     a36:	10 92 3f 01 	sts	0x013F, r1
     a3a:	10 92 3e 01 	sts	0x013E, r1

  return c;
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <uart_getchar+0x18e>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     a42:	2e ef       	ldi	r18, 0xFE	; 254
     a44:	3f ef       	ldi	r19, 0xFF	; 255
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <uart_getchar+0x18e>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     a48:	2f ef       	ldi	r18, 0xFF	; 255
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     a4c:	c9 01       	movw	r24, r18
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	08 95       	ret

00000a5c <main>:
}

int main(void){
	initialize();
     a5c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <initialize>
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	8c ec       	ldi	r24, 0xCC	; 204
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 99 01 	call	0x332	; 0x332 <CopyStringtoLCD>
	
	while(1){
		if( led_time_count == 0){
			led_time_count = LED_BLINK_PERIOD / 2;
     a6c:	c4 ef       	ldi	r28, 0xF4	; 244
     a6e:	d1 e0       	ldi	r29, 0x01	; 1
			toggle_led();
		}
		if( lcd_time_count == 0){
			lcd_time_count = LCD_REFRESH_RATE;
     a70:	08 ec       	ldi	r16, 0xC8	; 200
     a72:	10 e0       	ldi	r17, 0x00	; 0
			cli();
			//begin cap measurements
			//switch Timer1A mode
			//DDRB &= ~COMPARATOR_INPUT;
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     a74:	ee 24       	eor	r14, r14
     a76:	e3 94       	inc	r14
     a78:	f1 2c       	mov	r15, r1
int main(void){
	initialize();
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
	
	while(1){
		if( led_time_count == 0){
     a7a:	80 91 b1 01 	lds	r24, 0x01B1
     a7e:	90 91 b2 01 	lds	r25, 0x01B2
     a82:	89 2b       	or	r24, r25
     a84:	31 f4       	brne	.+12     	; 0xa92 <main+0x36>
			led_time_count = LED_BLINK_PERIOD / 2;
     a86:	d0 93 b2 01 	sts	0x01B2, r29
     a8a:	c0 93 b1 01 	sts	0x01B1, r28
			toggle_led();
     a8e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <toggle_led>
		}
		if( lcd_time_count == 0){
     a92:	80 91 90 01 	lds	r24, 0x0190
     a96:	90 91 91 01 	lds	r25, 0x0191
     a9a:	89 2b       	or	r24, r25
     a9c:	31 f4       	brne	.+12     	; 0xaaa <main+0x4e>
			lcd_time_count = LCD_REFRESH_RATE;
     a9e:	10 93 91 01 	sts	0x0191, r17
     aa2:	00 93 90 01 	sts	0x0190, r16
			refresh_lcd();
     aa6:	0e 94 8b 03 	call	0x716	; 0x716 <refresh_lcd>
		}
		if (!cap_discharged && !begin_cap_measurement && !cap_charged) {
     aaa:	80 91 a8 01 	lds	r24, 0x01A8
     aae:	90 91 a9 01 	lds	r25, 0x01A9
     ab2:	89 2b       	or	r24, r25
     ab4:	81 f4       	brne	.+32     	; 0xad6 <main+0x7a>
     ab6:	80 91 b3 01 	lds	r24, 0x01B3
     aba:	90 91 b4 01 	lds	r25, 0x01B4
     abe:	89 2b       	or	r24, r25
     ac0:	51 f4       	brne	.+20     	; 0xad6 <main+0x7a>
     ac2:	80 91 b5 01 	lds	r24, 0x01B5
     ac6:	90 91 b6 01 	lds	r25, 0x01B6
     aca:	89 2b       	or	r24, r25
     acc:	21 f4       	brne	.+8      	; 0xad6 <main+0x7a>
			cli();
     ace:	f8 94       	cli
			init_cap_measurements();
     ad0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <init_cap_measurements>
			sei();
     ad4:	78 94       	sei
		}
		if(cap_discharged && !begin_cap_measurement){
     ad6:	80 91 a8 01 	lds	r24, 0x01A8
     ada:	90 91 a9 01 	lds	r25, 0x01A9
     ade:	89 2b       	or	r24, r25
     ae0:	71 f0       	breq	.+28     	; 0xafe <main+0xa2>
     ae2:	80 91 b3 01 	lds	r24, 0x01B3
     ae6:	90 91 b4 01 	lds	r25, 0x01B4
     aea:	89 2b       	or	r24, r25
     aec:	41 f4       	brne	.+16     	; 0xafe <main+0xa2>
			cli();
     aee:	f8 94       	cli
			//begin cap measurements
			//switch Timer1A mode
			//DDRB &= ~COMPARATOR_INPUT;
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     af0:	f0 92 b4 01 	sts	0x01B4, r15
     af4:	e0 92 b3 01 	sts	0x01B3, r14
			//initalize timer for cap measurement
			init_cap_measurement_analog_timer();
     af8:	0e 94 b8 02 	call	0x570	; 0x570 <init_cap_measurement_analog_timer>
			sei();
     afc:	78 94       	sei
		}
		if(begin_cap_measurement && cap_charged){
     afe:	80 91 b3 01 	lds	r24, 0x01B3
     b02:	90 91 b4 01 	lds	r25, 0x01B4
     b06:	89 2b       	or	r24, r25
     b08:	09 f4       	brne	.+2      	; 0xb0c <main+0xb0>
     b0a:	b7 cf       	rjmp	.-146    	; 0xa7a <main+0x1e>
     b0c:	80 91 b5 01 	lds	r24, 0x01B5
     b10:	90 91 b6 01 	lds	r25, 0x01B6
     b14:	89 2b       	or	r24, r25
     b16:	09 f4       	brne	.+2      	; 0xb1a <main+0xbe>
     b18:	b0 cf       	rjmp	.-160    	; 0xa7a <main+0x1e>
			cli();
     b1a:	f8 94       	cli
			// Revert the flags
			cap_discharged = FALSE;
     b1c:	10 92 a9 01 	sts	0x01A9, r1
     b20:	10 92 a8 01 	sts	0x01A8, r1
			begin_cap_measurement = FALSE;
     b24:	10 92 b4 01 	sts	0x01B4, r1
     b28:	10 92 b3 01 	sts	0x01B3, r1
			cap_charged = FALSE;
     b2c:	10 92 b6 01 	sts	0x01B6, r1
     b30:	10 92 b5 01 	sts	0x01B5, r1
			
			// Turn off analog capture register
			ACSR &= ~ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     b34:	80 b7       	in	r24, 0x30	; 48
     b36:	8b 7f       	andi	r24, 0xFB	; 251
     b38:	80 bf       	out	0x30, r24	; 48
			TCCR1B &= ~INPUT_CAPTURE_EDGE_SELECT;
     b3a:	80 91 81 00 	lds	r24, 0x0081
     b3e:	8f 7b       	andi	r24, 0xBF	; 191
     b40:	80 93 81 00 	sts	0x0081, r24
			// Calculate the capacitance with the time elapsed. 
			// V(t) = Vo(1 - exp(-t/(R2*C))) becomes
			// C = -t / (R2 * ln(.5)) to find out when V(t) = .5 * Vo (R3 = R4)
			// (Due to ln(.5) being negative, the negative on the t is canceled out)
			// constant = time_per_cycle / (R2 * ln(.5)
			capacitance = (charge_cycles - 124) * constant;
     b44:	60 91 a4 01 	lds	r22, 0x01A4
     b48:	70 91 a5 01 	lds	r23, 0x01A5
     b4c:	80 91 a6 01 	lds	r24, 0x01A6
     b50:	90 91 a7 01 	lds	r25, 0x01A7
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	48 ef       	ldi	r20, 0xF8	; 248
     b5a:	52 e4       	ldi	r21, 0x42	; 66
     b5c:	0e 94 c2 05 	call	0xb84	; 0xb84 <__subsf3>
     b60:	23 e6       	ldi	r18, 0x63	; 99
     b62:	3b eb       	ldi	r19, 0xBB	; 187
     b64:	43 e1       	ldi	r20, 0x13	; 19
     b66:	5c e3       	ldi	r21, 0x3C	; 60
     b68:	0e 94 b9 06 	call	0xd72	; 0xd72 <__mulsf3>
     b6c:	ab 01       	movw	r20, r22
     b6e:	bc 01       	movw	r22, r24
     b70:	40 93 aa 01 	sts	0x01AA, r20
     b74:	50 93 ab 01 	sts	0x01AB, r21
     b78:	60 93 ac 01 	sts	0x01AC, r22
     b7c:	70 93 ad 01 	sts	0x01AD, r23
			sei();
     b80:	78 94       	sei
     b82:	7b cf       	rjmp	.-266    	; 0xa7a <main+0x1e>

00000b84 <__subsf3>:
     b84:	50 58       	subi	r21, 0x80	; 128

00000b86 <__addsf3>:
     b86:	bb 27       	eor	r27, r27
     b88:	aa 27       	eor	r26, r26
     b8a:	0e d0       	rcall	.+28     	; 0xba8 <__addsf3x>
     b8c:	b4 c0       	rjmp	.+360    	; 0xcf6 <__fp_round>
     b8e:	a5 d0       	rcall	.+330    	; 0xcda <__fp_pscA>
     b90:	30 f0       	brcs	.+12     	; 0xb9e <__addsf3+0x18>
     b92:	aa d0       	rcall	.+340    	; 0xce8 <__fp_pscB>
     b94:	20 f0       	brcs	.+8      	; 0xb9e <__addsf3+0x18>
     b96:	31 f4       	brne	.+12     	; 0xba4 <__addsf3+0x1e>
     b98:	9f 3f       	cpi	r25, 0xFF	; 255
     b9a:	11 f4       	brne	.+4      	; 0xba0 <__addsf3+0x1a>
     b9c:	1e f4       	brtc	.+6      	; 0xba4 <__addsf3+0x1e>
     b9e:	9a c0       	rjmp	.+308    	; 0xcd4 <__fp_nan>
     ba0:	0e f4       	brtc	.+2      	; 0xba4 <__addsf3+0x1e>
     ba2:	e0 95       	com	r30
     ba4:	e7 fb       	bst	r30, 7
     ba6:	90 c0       	rjmp	.+288    	; 0xcc8 <__fp_inf>

00000ba8 <__addsf3x>:
     ba8:	e9 2f       	mov	r30, r25
     baa:	b6 d0       	rcall	.+364    	; 0xd18 <__fp_split3>
     bac:	80 f3       	brcs	.-32     	; 0xb8e <__addsf3+0x8>
     bae:	ba 17       	cp	r27, r26
     bb0:	62 07       	cpc	r22, r18
     bb2:	73 07       	cpc	r23, r19
     bb4:	84 07       	cpc	r24, r20
     bb6:	95 07       	cpc	r25, r21
     bb8:	18 f0       	brcs	.+6      	; 0xbc0 <__addsf3x+0x18>
     bba:	71 f4       	brne	.+28     	; 0xbd8 <__addsf3x+0x30>
     bbc:	9e f5       	brtc	.+102    	; 0xc24 <__addsf3x+0x7c>
     bbe:	ce c0       	rjmp	.+412    	; 0xd5c <__fp_zero>
     bc0:	0e f4       	brtc	.+2      	; 0xbc4 <__addsf3x+0x1c>
     bc2:	e0 95       	com	r30
     bc4:	0b 2e       	mov	r0, r27
     bc6:	ba 2f       	mov	r27, r26
     bc8:	a0 2d       	mov	r26, r0
     bca:	0b 01       	movw	r0, r22
     bcc:	b9 01       	movw	r22, r18
     bce:	90 01       	movw	r18, r0
     bd0:	0c 01       	movw	r0, r24
     bd2:	ca 01       	movw	r24, r20
     bd4:	a0 01       	movw	r20, r0
     bd6:	11 24       	eor	r1, r1
     bd8:	ff 27       	eor	r31, r31
     bda:	59 1b       	sub	r21, r25
     bdc:	99 f0       	breq	.+38     	; 0xc04 <__addsf3x+0x5c>
     bde:	59 3f       	cpi	r21, 0xF9	; 249
     be0:	50 f4       	brcc	.+20     	; 0xbf6 <__addsf3x+0x4e>
     be2:	50 3e       	cpi	r21, 0xE0	; 224
     be4:	68 f1       	brcs	.+90     	; 0xc40 <__addsf3x+0x98>
     be6:	1a 16       	cp	r1, r26
     be8:	f0 40       	sbci	r31, 0x00	; 0
     bea:	a2 2f       	mov	r26, r18
     bec:	23 2f       	mov	r18, r19
     bee:	34 2f       	mov	r19, r20
     bf0:	44 27       	eor	r20, r20
     bf2:	58 5f       	subi	r21, 0xF8	; 248
     bf4:	f3 cf       	rjmp	.-26     	; 0xbdc <__addsf3x+0x34>
     bf6:	46 95       	lsr	r20
     bf8:	37 95       	ror	r19
     bfa:	27 95       	ror	r18
     bfc:	a7 95       	ror	r26
     bfe:	f0 40       	sbci	r31, 0x00	; 0
     c00:	53 95       	inc	r21
     c02:	c9 f7       	brne	.-14     	; 0xbf6 <__addsf3x+0x4e>
     c04:	7e f4       	brtc	.+30     	; 0xc24 <__addsf3x+0x7c>
     c06:	1f 16       	cp	r1, r31
     c08:	ba 0b       	sbc	r27, r26
     c0a:	62 0b       	sbc	r22, r18
     c0c:	73 0b       	sbc	r23, r19
     c0e:	84 0b       	sbc	r24, r20
     c10:	ba f0       	brmi	.+46     	; 0xc40 <__addsf3x+0x98>
     c12:	91 50       	subi	r25, 0x01	; 1
     c14:	a1 f0       	breq	.+40     	; 0xc3e <__addsf3x+0x96>
     c16:	ff 0f       	add	r31, r31
     c18:	bb 1f       	adc	r27, r27
     c1a:	66 1f       	adc	r22, r22
     c1c:	77 1f       	adc	r23, r23
     c1e:	88 1f       	adc	r24, r24
     c20:	c2 f7       	brpl	.-16     	; 0xc12 <__addsf3x+0x6a>
     c22:	0e c0       	rjmp	.+28     	; 0xc40 <__addsf3x+0x98>
     c24:	ba 0f       	add	r27, r26
     c26:	62 1f       	adc	r22, r18
     c28:	73 1f       	adc	r23, r19
     c2a:	84 1f       	adc	r24, r20
     c2c:	48 f4       	brcc	.+18     	; 0xc40 <__addsf3x+0x98>
     c2e:	87 95       	ror	r24
     c30:	77 95       	ror	r23
     c32:	67 95       	ror	r22
     c34:	b7 95       	ror	r27
     c36:	f7 95       	ror	r31
     c38:	9e 3f       	cpi	r25, 0xFE	; 254
     c3a:	08 f0       	brcs	.+2      	; 0xc3e <__addsf3x+0x96>
     c3c:	b3 cf       	rjmp	.-154    	; 0xba4 <__addsf3+0x1e>
     c3e:	93 95       	inc	r25
     c40:	88 0f       	add	r24, r24
     c42:	08 f0       	brcs	.+2      	; 0xc46 <__addsf3x+0x9e>
     c44:	99 27       	eor	r25, r25
     c46:	ee 0f       	add	r30, r30
     c48:	97 95       	ror	r25
     c4a:	87 95       	ror	r24
     c4c:	08 95       	ret

00000c4e <__floatunsisf>:
     c4e:	e8 94       	clt
     c50:	09 c0       	rjmp	.+18     	; 0xc64 <__floatsisf+0x12>

00000c52 <__floatsisf>:
     c52:	97 fb       	bst	r25, 7
     c54:	3e f4       	brtc	.+14     	; 0xc64 <__floatsisf+0x12>
     c56:	90 95       	com	r25
     c58:	80 95       	com	r24
     c5a:	70 95       	com	r23
     c5c:	61 95       	neg	r22
     c5e:	7f 4f       	sbci	r23, 0xFF	; 255
     c60:	8f 4f       	sbci	r24, 0xFF	; 255
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	99 23       	and	r25, r25
     c66:	a9 f0       	breq	.+42     	; 0xc92 <__floatsisf+0x40>
     c68:	f9 2f       	mov	r31, r25
     c6a:	96 e9       	ldi	r25, 0x96	; 150
     c6c:	bb 27       	eor	r27, r27
     c6e:	93 95       	inc	r25
     c70:	f6 95       	lsr	r31
     c72:	87 95       	ror	r24
     c74:	77 95       	ror	r23
     c76:	67 95       	ror	r22
     c78:	b7 95       	ror	r27
     c7a:	f1 11       	cpse	r31, r1
     c7c:	f8 cf       	rjmp	.-16     	; 0xc6e <__floatsisf+0x1c>
     c7e:	fa f4       	brpl	.+62     	; 0xcbe <__floatsisf+0x6c>
     c80:	bb 0f       	add	r27, r27
     c82:	11 f4       	brne	.+4      	; 0xc88 <__floatsisf+0x36>
     c84:	60 ff       	sbrs	r22, 0
     c86:	1b c0       	rjmp	.+54     	; 0xcbe <__floatsisf+0x6c>
     c88:	6f 5f       	subi	r22, 0xFF	; 255
     c8a:	7f 4f       	sbci	r23, 0xFF	; 255
     c8c:	8f 4f       	sbci	r24, 0xFF	; 255
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	16 c0       	rjmp	.+44     	; 0xcbe <__floatsisf+0x6c>
     c92:	88 23       	and	r24, r24
     c94:	11 f0       	breq	.+4      	; 0xc9a <__floatsisf+0x48>
     c96:	96 e9       	ldi	r25, 0x96	; 150
     c98:	11 c0       	rjmp	.+34     	; 0xcbc <__floatsisf+0x6a>
     c9a:	77 23       	and	r23, r23
     c9c:	21 f0       	breq	.+8      	; 0xca6 <__floatsisf+0x54>
     c9e:	9e e8       	ldi	r25, 0x8E	; 142
     ca0:	87 2f       	mov	r24, r23
     ca2:	76 2f       	mov	r23, r22
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <__floatsisf+0x5e>
     ca6:	66 23       	and	r22, r22
     ca8:	71 f0       	breq	.+28     	; 0xcc6 <__floatsisf+0x74>
     caa:	96 e8       	ldi	r25, 0x86	; 134
     cac:	86 2f       	mov	r24, r22
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	2a f0       	brmi	.+10     	; 0xcbe <__floatsisf+0x6c>
     cb4:	9a 95       	dec	r25
     cb6:	66 0f       	add	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	88 1f       	adc	r24, r24
     cbc:	da f7       	brpl	.-10     	; 0xcb4 <__floatsisf+0x62>
     cbe:	88 0f       	add	r24, r24
     cc0:	96 95       	lsr	r25
     cc2:	87 95       	ror	r24
     cc4:	97 f9       	bld	r25, 7
     cc6:	08 95       	ret

00000cc8 <__fp_inf>:
     cc8:	97 f9       	bld	r25, 7
     cca:	9f 67       	ori	r25, 0x7F	; 127
     ccc:	80 e8       	ldi	r24, 0x80	; 128
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	08 95       	ret

00000cd4 <__fp_nan>:
     cd4:	9f ef       	ldi	r25, 0xFF	; 255
     cd6:	80 ec       	ldi	r24, 0xC0	; 192
     cd8:	08 95       	ret

00000cda <__fp_pscA>:
     cda:	00 24       	eor	r0, r0
     cdc:	0a 94       	dec	r0
     cde:	16 16       	cp	r1, r22
     ce0:	17 06       	cpc	r1, r23
     ce2:	18 06       	cpc	r1, r24
     ce4:	09 06       	cpc	r0, r25
     ce6:	08 95       	ret

00000ce8 <__fp_pscB>:
     ce8:	00 24       	eor	r0, r0
     cea:	0a 94       	dec	r0
     cec:	12 16       	cp	r1, r18
     cee:	13 06       	cpc	r1, r19
     cf0:	14 06       	cpc	r1, r20
     cf2:	05 06       	cpc	r0, r21
     cf4:	08 95       	ret

00000cf6 <__fp_round>:
     cf6:	09 2e       	mov	r0, r25
     cf8:	03 94       	inc	r0
     cfa:	00 0c       	add	r0, r0
     cfc:	11 f4       	brne	.+4      	; 0xd02 <__fp_round+0xc>
     cfe:	88 23       	and	r24, r24
     d00:	52 f0       	brmi	.+20     	; 0xd16 <__fp_round+0x20>
     d02:	bb 0f       	add	r27, r27
     d04:	40 f4       	brcc	.+16     	; 0xd16 <__fp_round+0x20>
     d06:	bf 2b       	or	r27, r31
     d08:	11 f4       	brne	.+4      	; 0xd0e <__fp_round+0x18>
     d0a:	60 ff       	sbrs	r22, 0
     d0c:	04 c0       	rjmp	.+8      	; 0xd16 <__fp_round+0x20>
     d0e:	6f 5f       	subi	r22, 0xFF	; 255
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	8f 4f       	sbci	r24, 0xFF	; 255
     d14:	9f 4f       	sbci	r25, 0xFF	; 255
     d16:	08 95       	ret

00000d18 <__fp_split3>:
     d18:	57 fd       	sbrc	r21, 7
     d1a:	90 58       	subi	r25, 0x80	; 128
     d1c:	44 0f       	add	r20, r20
     d1e:	55 1f       	adc	r21, r21
     d20:	59 f0       	breq	.+22     	; 0xd38 <__fp_splitA+0x10>
     d22:	5f 3f       	cpi	r21, 0xFF	; 255
     d24:	71 f0       	breq	.+28     	; 0xd42 <__fp_splitA+0x1a>
     d26:	47 95       	ror	r20

00000d28 <__fp_splitA>:
     d28:	88 0f       	add	r24, r24
     d2a:	97 fb       	bst	r25, 7
     d2c:	99 1f       	adc	r25, r25
     d2e:	61 f0       	breq	.+24     	; 0xd48 <__fp_splitA+0x20>
     d30:	9f 3f       	cpi	r25, 0xFF	; 255
     d32:	79 f0       	breq	.+30     	; 0xd52 <__fp_splitA+0x2a>
     d34:	87 95       	ror	r24
     d36:	08 95       	ret
     d38:	12 16       	cp	r1, r18
     d3a:	13 06       	cpc	r1, r19
     d3c:	14 06       	cpc	r1, r20
     d3e:	55 1f       	adc	r21, r21
     d40:	f2 cf       	rjmp	.-28     	; 0xd26 <__fp_split3+0xe>
     d42:	46 95       	lsr	r20
     d44:	f1 df       	rcall	.-30     	; 0xd28 <__fp_splitA>
     d46:	08 c0       	rjmp	.+16     	; 0xd58 <__fp_splitA+0x30>
     d48:	16 16       	cp	r1, r22
     d4a:	17 06       	cpc	r1, r23
     d4c:	18 06       	cpc	r1, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	f1 cf       	rjmp	.-30     	; 0xd34 <__fp_splitA+0xc>
     d52:	86 95       	lsr	r24
     d54:	71 05       	cpc	r23, r1
     d56:	61 05       	cpc	r22, r1
     d58:	08 94       	sec
     d5a:	08 95       	ret

00000d5c <__fp_zero>:
     d5c:	e8 94       	clt

00000d5e <__fp_szero>:
     d5e:	bb 27       	eor	r27, r27
     d60:	66 27       	eor	r22, r22
     d62:	77 27       	eor	r23, r23
     d64:	cb 01       	movw	r24, r22
     d66:	97 f9       	bld	r25, 7
     d68:	08 95       	ret

00000d6a <__gesf2>:
     d6a:	66 d0       	rcall	.+204    	; 0xe38 <__fp_cmp>
     d6c:	08 f4       	brcc	.+2      	; 0xd70 <__gesf2+0x6>
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	08 95       	ret

00000d72 <__mulsf3>:
     d72:	0b d0       	rcall	.+22     	; 0xd8a <__mulsf3x>
     d74:	c0 cf       	rjmp	.-128    	; 0xcf6 <__fp_round>
     d76:	b1 df       	rcall	.-158    	; 0xcda <__fp_pscA>
     d78:	28 f0       	brcs	.+10     	; 0xd84 <__mulsf3+0x12>
     d7a:	b6 df       	rcall	.-148    	; 0xce8 <__fp_pscB>
     d7c:	18 f0       	brcs	.+6      	; 0xd84 <__mulsf3+0x12>
     d7e:	95 23       	and	r25, r21
     d80:	09 f0       	breq	.+2      	; 0xd84 <__mulsf3+0x12>
     d82:	a2 cf       	rjmp	.-188    	; 0xcc8 <__fp_inf>
     d84:	a7 cf       	rjmp	.-178    	; 0xcd4 <__fp_nan>
     d86:	11 24       	eor	r1, r1
     d88:	ea cf       	rjmp	.-44     	; 0xd5e <__fp_szero>

00000d8a <__mulsf3x>:
     d8a:	c6 df       	rcall	.-116    	; 0xd18 <__fp_split3>
     d8c:	a0 f3       	brcs	.-24     	; 0xd76 <__mulsf3+0x4>

00000d8e <__mulsf3_pse>:
     d8e:	95 9f       	mul	r25, r21
     d90:	d1 f3       	breq	.-12     	; 0xd86 <__mulsf3+0x14>
     d92:	95 0f       	add	r25, r21
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	55 1f       	adc	r21, r21
     d98:	62 9f       	mul	r22, r18
     d9a:	f0 01       	movw	r30, r0
     d9c:	72 9f       	mul	r23, r18
     d9e:	bb 27       	eor	r27, r27
     da0:	f0 0d       	add	r31, r0
     da2:	b1 1d       	adc	r27, r1
     da4:	63 9f       	mul	r22, r19
     da6:	aa 27       	eor	r26, r26
     da8:	f0 0d       	add	r31, r0
     daa:	b1 1d       	adc	r27, r1
     dac:	aa 1f       	adc	r26, r26
     dae:	64 9f       	mul	r22, r20
     db0:	66 27       	eor	r22, r22
     db2:	b0 0d       	add	r27, r0
     db4:	a1 1d       	adc	r26, r1
     db6:	66 1f       	adc	r22, r22
     db8:	82 9f       	mul	r24, r18
     dba:	22 27       	eor	r18, r18
     dbc:	b0 0d       	add	r27, r0
     dbe:	a1 1d       	adc	r26, r1
     dc0:	62 1f       	adc	r22, r18
     dc2:	73 9f       	mul	r23, r19
     dc4:	b0 0d       	add	r27, r0
     dc6:	a1 1d       	adc	r26, r1
     dc8:	62 1f       	adc	r22, r18
     dca:	83 9f       	mul	r24, r19
     dcc:	a0 0d       	add	r26, r0
     dce:	61 1d       	adc	r22, r1
     dd0:	22 1f       	adc	r18, r18
     dd2:	74 9f       	mul	r23, r20
     dd4:	33 27       	eor	r19, r19
     dd6:	a0 0d       	add	r26, r0
     dd8:	61 1d       	adc	r22, r1
     dda:	23 1f       	adc	r18, r19
     ddc:	84 9f       	mul	r24, r20
     dde:	60 0d       	add	r22, r0
     de0:	21 1d       	adc	r18, r1
     de2:	82 2f       	mov	r24, r18
     de4:	76 2f       	mov	r23, r22
     de6:	6a 2f       	mov	r22, r26
     de8:	11 24       	eor	r1, r1
     dea:	9f 57       	subi	r25, 0x7F	; 127
     dec:	50 40       	sbci	r21, 0x00	; 0
     dee:	8a f0       	brmi	.+34     	; 0xe12 <__mulsf3_pse+0x84>
     df0:	e1 f0       	breq	.+56     	; 0xe2a <__mulsf3_pse+0x9c>
     df2:	88 23       	and	r24, r24
     df4:	4a f0       	brmi	.+18     	; 0xe08 <__mulsf3_pse+0x7a>
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	bb 1f       	adc	r27, r27
     dfc:	66 1f       	adc	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	91 50       	subi	r25, 0x01	; 1
     e04:	50 40       	sbci	r21, 0x00	; 0
     e06:	a9 f7       	brne	.-22     	; 0xdf2 <__mulsf3_pse+0x64>
     e08:	9e 3f       	cpi	r25, 0xFE	; 254
     e0a:	51 05       	cpc	r21, r1
     e0c:	70 f0       	brcs	.+28     	; 0xe2a <__mulsf3_pse+0x9c>
     e0e:	5c cf       	rjmp	.-328    	; 0xcc8 <__fp_inf>
     e10:	a6 cf       	rjmp	.-180    	; 0xd5e <__fp_szero>
     e12:	5f 3f       	cpi	r21, 0xFF	; 255
     e14:	ec f3       	brlt	.-6      	; 0xe10 <__mulsf3_pse+0x82>
     e16:	98 3e       	cpi	r25, 0xE8	; 232
     e18:	dc f3       	brlt	.-10     	; 0xe10 <__mulsf3_pse+0x82>
     e1a:	86 95       	lsr	r24
     e1c:	77 95       	ror	r23
     e1e:	67 95       	ror	r22
     e20:	b7 95       	ror	r27
     e22:	f7 95       	ror	r31
     e24:	e7 95       	ror	r30
     e26:	9f 5f       	subi	r25, 0xFF	; 255
     e28:	c1 f7       	brne	.-16     	; 0xe1a <__mulsf3_pse+0x8c>
     e2a:	fe 2b       	or	r31, r30
     e2c:	88 0f       	add	r24, r24
     e2e:	91 1d       	adc	r25, r1
     e30:	96 95       	lsr	r25
     e32:	87 95       	ror	r24
     e34:	97 f9       	bld	r25, 7
     e36:	08 95       	ret

00000e38 <__fp_cmp>:
     e38:	99 0f       	add	r25, r25
     e3a:	00 08       	sbc	r0, r0
     e3c:	55 0f       	add	r21, r21
     e3e:	aa 0b       	sbc	r26, r26
     e40:	e0 e8       	ldi	r30, 0x80	; 128
     e42:	fe ef       	ldi	r31, 0xFE	; 254
     e44:	16 16       	cp	r1, r22
     e46:	17 06       	cpc	r1, r23
     e48:	e8 07       	cpc	r30, r24
     e4a:	f9 07       	cpc	r31, r25
     e4c:	c0 f0       	brcs	.+48     	; 0xe7e <__fp_cmp+0x46>
     e4e:	12 16       	cp	r1, r18
     e50:	13 06       	cpc	r1, r19
     e52:	e4 07       	cpc	r30, r20
     e54:	f5 07       	cpc	r31, r21
     e56:	98 f0       	brcs	.+38     	; 0xe7e <__fp_cmp+0x46>
     e58:	62 1b       	sub	r22, r18
     e5a:	73 0b       	sbc	r23, r19
     e5c:	84 0b       	sbc	r24, r20
     e5e:	95 0b       	sbc	r25, r21
     e60:	39 f4       	brne	.+14     	; 0xe70 <__fp_cmp+0x38>
     e62:	0a 26       	eor	r0, r26
     e64:	61 f0       	breq	.+24     	; 0xe7e <__fp_cmp+0x46>
     e66:	23 2b       	or	r18, r19
     e68:	24 2b       	or	r18, r20
     e6a:	25 2b       	or	r18, r21
     e6c:	21 f4       	brne	.+8      	; 0xe76 <__fp_cmp+0x3e>
     e6e:	08 95       	ret
     e70:	0a 26       	eor	r0, r26
     e72:	09 f4       	brne	.+2      	; 0xe76 <__fp_cmp+0x3e>
     e74:	a1 40       	sbci	r26, 0x01	; 1
     e76:	a6 95       	lsr	r26
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	81 1d       	adc	r24, r1
     e7c:	81 1d       	adc	r24, r1
     e7e:	08 95       	ret

00000e80 <vfprintf>:
     e80:	2f 92       	push	r2
     e82:	3f 92       	push	r3
     e84:	4f 92       	push	r4
     e86:	5f 92       	push	r5
     e88:	6f 92       	push	r6
     e8a:	7f 92       	push	r7
     e8c:	8f 92       	push	r8
     e8e:	9f 92       	push	r9
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	62 97       	sbiw	r28, 0x12	; 18
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	7c 01       	movw	r14, r24
     eb6:	1b 01       	movw	r2, r22
     eb8:	6a 01       	movw	r12, r20
     eba:	fc 01       	movw	r30, r24
     ebc:	17 82       	std	Z+7, r1	; 0x07
     ebe:	16 82       	std	Z+6, r1	; 0x06
     ec0:	83 81       	ldd	r24, Z+3	; 0x03
     ec2:	81 fd       	sbrc	r24, 1
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <vfprintf+0x4c>
     ec6:	6b c3       	rjmp	.+1750   	; 0x159e <vfprintf+0x71e>
     ec8:	65 01       	movw	r12, r10
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <vfprintf+0x56>
     ecc:	88 24       	eor	r8, r8
     ece:	83 94       	inc	r8
     ed0:	91 2c       	mov	r9, r1
     ed2:	8c 0e       	add	r8, r28
     ed4:	9d 1e       	adc	r9, r29
     ed6:	f7 01       	movw	r30, r14
     ed8:	93 81       	ldd	r25, Z+3	; 0x03
     eda:	f1 01       	movw	r30, r2
     edc:	93 fd       	sbrc	r25, 3
     ede:	85 91       	lpm	r24, Z+
     ee0:	93 ff       	sbrs	r25, 3
     ee2:	81 91       	ld	r24, Z+
     ee4:	1f 01       	movw	r2, r30
     ee6:	88 23       	and	r24, r24
     ee8:	09 f4       	brne	.+2      	; 0xeec <vfprintf+0x6c>
     eea:	55 c3       	rjmp	.+1706   	; 0x1596 <vfprintf+0x716>
     eec:	85 32       	cpi	r24, 0x25	; 37
     eee:	39 f4       	brne	.+14     	; 0xefe <vfprintf+0x7e>
     ef0:	93 fd       	sbrc	r25, 3
     ef2:	85 91       	lpm	r24, Z+
     ef4:	93 ff       	sbrs	r25, 3
     ef6:	81 91       	ld	r24, Z+
     ef8:	1f 01       	movw	r2, r30
     efa:	85 32       	cpi	r24, 0x25	; 37
     efc:	31 f4       	brne	.+12     	; 0xf0a <vfprintf+0x8a>
     efe:	b7 01       	movw	r22, r14
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
     f06:	56 01       	movw	r10, r12
     f08:	df cf       	rjmp	.-66     	; 0xec8 <vfprintf+0x48>
     f0a:	71 2c       	mov	r7, r1
     f0c:	61 2c       	mov	r6, r1
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	20 32       	cpi	r18, 0x20	; 32
     f12:	a8 f4       	brcc	.+42     	; 0xf3e <vfprintf+0xbe>
     f14:	8b 32       	cpi	r24, 0x2B	; 43
     f16:	61 f0       	breq	.+24     	; 0xf30 <vfprintf+0xb0>
     f18:	28 f4       	brcc	.+10     	; 0xf24 <vfprintf+0xa4>
     f1a:	80 32       	cpi	r24, 0x20	; 32
     f1c:	51 f0       	breq	.+20     	; 0xf32 <vfprintf+0xb2>
     f1e:	83 32       	cpi	r24, 0x23	; 35
     f20:	71 f4       	brne	.+28     	; 0xf3e <vfprintf+0xbe>
     f22:	0b c0       	rjmp	.+22     	; 0xf3a <vfprintf+0xba>
     f24:	8d 32       	cpi	r24, 0x2D	; 45
     f26:	39 f0       	breq	.+14     	; 0xf36 <vfprintf+0xb6>
     f28:	80 33       	cpi	r24, 0x30	; 48
     f2a:	49 f4       	brne	.+18     	; 0xf3e <vfprintf+0xbe>
     f2c:	21 60       	ori	r18, 0x01	; 1
     f2e:	28 c0       	rjmp	.+80     	; 0xf80 <vfprintf+0x100>
     f30:	22 60       	ori	r18, 0x02	; 2
     f32:	24 60       	ori	r18, 0x04	; 4
     f34:	25 c0       	rjmp	.+74     	; 0xf80 <vfprintf+0x100>
     f36:	28 60       	ori	r18, 0x08	; 8
     f38:	23 c0       	rjmp	.+70     	; 0xf80 <vfprintf+0x100>
     f3a:	20 61       	ori	r18, 0x10	; 16
     f3c:	21 c0       	rjmp	.+66     	; 0xf80 <vfprintf+0x100>
     f3e:	27 fd       	sbrc	r18, 7
     f40:	27 c0       	rjmp	.+78     	; 0xf90 <vfprintf+0x110>
     f42:	38 2f       	mov	r19, r24
     f44:	30 53       	subi	r19, 0x30	; 48
     f46:	3a 30       	cpi	r19, 0x0A	; 10
     f48:	78 f4       	brcc	.+30     	; 0xf68 <vfprintf+0xe8>
     f4a:	26 ff       	sbrs	r18, 6
     f4c:	06 c0       	rjmp	.+12     	; 0xf5a <vfprintf+0xda>
     f4e:	fa e0       	ldi	r31, 0x0A	; 10
     f50:	7f 9e       	mul	r7, r31
     f52:	30 0d       	add	r19, r0
     f54:	11 24       	eor	r1, r1
     f56:	73 2e       	mov	r7, r19
     f58:	13 c0       	rjmp	.+38     	; 0xf80 <vfprintf+0x100>
     f5a:	4a e0       	ldi	r20, 0x0A	; 10
     f5c:	64 9e       	mul	r6, r20
     f5e:	30 0d       	add	r19, r0
     f60:	11 24       	eor	r1, r1
     f62:	63 2e       	mov	r6, r19
     f64:	20 62       	ori	r18, 0x20	; 32
     f66:	0c c0       	rjmp	.+24     	; 0xf80 <vfprintf+0x100>
     f68:	8e 32       	cpi	r24, 0x2E	; 46
     f6a:	21 f4       	brne	.+8      	; 0xf74 <vfprintf+0xf4>
     f6c:	26 fd       	sbrc	r18, 6
     f6e:	13 c3       	rjmp	.+1574   	; 0x1596 <vfprintf+0x716>
     f70:	20 64       	ori	r18, 0x40	; 64
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <vfprintf+0x100>
     f74:	8c 36       	cpi	r24, 0x6C	; 108
     f76:	11 f4       	brne	.+4      	; 0xf7c <vfprintf+0xfc>
     f78:	20 68       	ori	r18, 0x80	; 128
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <vfprintf+0x100>
     f7c:	88 36       	cpi	r24, 0x68	; 104
     f7e:	41 f4       	brne	.+16     	; 0xf90 <vfprintf+0x110>
     f80:	f1 01       	movw	r30, r2
     f82:	93 fd       	sbrc	r25, 3
     f84:	85 91       	lpm	r24, Z+
     f86:	93 ff       	sbrs	r25, 3
     f88:	81 91       	ld	r24, Z+
     f8a:	1f 01       	movw	r2, r30
     f8c:	81 11       	cpse	r24, r1
     f8e:	c0 cf       	rjmp	.-128    	; 0xf10 <vfprintf+0x90>
     f90:	98 2f       	mov	r25, r24
     f92:	95 54       	subi	r25, 0x45	; 69
     f94:	93 30       	cpi	r25, 0x03	; 3
     f96:	18 f4       	brcc	.+6      	; 0xf9e <vfprintf+0x11e>
     f98:	20 61       	ori	r18, 0x10	; 16
     f9a:	80 5e       	subi	r24, 0xE0	; 224
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <vfprintf+0x12a>
     f9e:	98 2f       	mov	r25, r24
     fa0:	95 56       	subi	r25, 0x65	; 101
     fa2:	93 30       	cpi	r25, 0x03	; 3
     fa4:	08 f0       	brcs	.+2      	; 0xfa8 <vfprintf+0x128>
     fa6:	a4 c1       	rjmp	.+840    	; 0x12f0 <vfprintf+0x470>
     fa8:	2f 7e       	andi	r18, 0xEF	; 239
     faa:	26 fd       	sbrc	r18, 6
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <vfprintf+0x132>
     fae:	16 e0       	ldi	r17, 0x06	; 6
     fb0:	71 2e       	mov	r7, r17
     fb2:	bf e3       	ldi	r27, 0x3F	; 63
     fb4:	5b 2e       	mov	r5, r27
     fb6:	52 22       	and	r5, r18
     fb8:	85 36       	cpi	r24, 0x65	; 101
     fba:	19 f4       	brne	.+6      	; 0xfc2 <vfprintf+0x142>
     fbc:	f0 e4       	ldi	r31, 0x40	; 64
     fbe:	5f 2a       	or	r5, r31
     fc0:	07 c0       	rjmp	.+14     	; 0xfd0 <vfprintf+0x150>
     fc2:	86 36       	cpi	r24, 0x66	; 102
     fc4:	19 f4       	brne	.+6      	; 0xfcc <vfprintf+0x14c>
     fc6:	40 e8       	ldi	r20, 0x80	; 128
     fc8:	54 2a       	or	r5, r20
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <vfprintf+0x150>
     fcc:	71 10       	cpse	r7, r1
     fce:	7a 94       	dec	r7
     fd0:	57 fe       	sbrs	r5, 7
     fd2:	07 c0       	rjmp	.+14     	; 0xfe2 <vfprintf+0x162>
     fd4:	5b e3       	ldi	r21, 0x3B	; 59
     fd6:	57 15       	cp	r21, r7
     fd8:	48 f0       	brcs	.+18     	; 0xfec <vfprintf+0x16c>
     fda:	47 2c       	mov	r4, r7
     fdc:	43 94       	inc	r4
     fde:	27 e0       	ldi	r18, 0x07	; 7
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <vfprintf+0x17c>
     fe2:	87 e0       	ldi	r24, 0x07	; 7
     fe4:	87 15       	cp	r24, r7
     fe6:	30 f0       	brcs	.+12     	; 0xff4 <vfprintf+0x174>
     fe8:	27 2d       	mov	r18, r7
     fea:	07 c0       	rjmp	.+14     	; 0xffa <vfprintf+0x17a>
     fec:	27 e0       	ldi	r18, 0x07	; 7
     fee:	ac e3       	ldi	r26, 0x3C	; 60
     ff0:	4a 2e       	mov	r4, r26
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <vfprintf+0x17c>
     ff4:	27 e0       	ldi	r18, 0x07	; 7
     ff6:	f7 e0       	ldi	r31, 0x07	; 7
     ff8:	7f 2e       	mov	r7, r31
     ffa:	41 2c       	mov	r4, r1
     ffc:	56 01       	movw	r10, r12
     ffe:	94 e0       	ldi	r25, 0x04	; 4
    1000:	a9 0e       	add	r10, r25
    1002:	b1 1c       	adc	r11, r1
    1004:	f6 01       	movw	r30, r12
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	04 2d       	mov	r16, r4
    1010:	a4 01       	movw	r20, r8
    1012:	0e 94 13 0b 	call	0x1626	; 0x1626 <__ftoa_engine>
    1016:	8c 01       	movw	r16, r24
    1018:	49 81       	ldd	r20, Y+1	; 0x01
    101a:	4c 87       	std	Y+12, r20	; 0x0c
    101c:	40 ff       	sbrs	r20, 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <vfprintf+0x1a4>
    1020:	43 ff       	sbrs	r20, 3
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <vfprintf+0x1b2>
    1024:	51 fc       	sbrc	r5, 1
    1026:	08 c0       	rjmp	.+16     	; 0x1038 <vfprintf+0x1b8>
    1028:	52 fe       	sbrs	r5, 2
    102a:	09 c0       	rjmp	.+18     	; 0x103e <vfprintf+0x1be>
    102c:	e0 e2       	ldi	r30, 0x20	; 32
    102e:	de 2e       	mov	r13, r30
    1030:	07 c0       	rjmp	.+14     	; 0x1040 <vfprintf+0x1c0>
    1032:	7d e2       	ldi	r23, 0x2D	; 45
    1034:	d7 2e       	mov	r13, r23
    1036:	04 c0       	rjmp	.+8      	; 0x1040 <vfprintf+0x1c0>
    1038:	6b e2       	ldi	r22, 0x2B	; 43
    103a:	d6 2e       	mov	r13, r22
    103c:	01 c0       	rjmp	.+2      	; 0x1040 <vfprintf+0x1c0>
    103e:	d1 2c       	mov	r13, r1
    1040:	8c 85       	ldd	r24, Y+12	; 0x0c
    1042:	8c 70       	andi	r24, 0x0C	; 12
    1044:	a1 f1       	breq	.+104    	; 0x10ae <vfprintf+0x22e>
    1046:	dd 20       	and	r13, r13
    1048:	11 f0       	breq	.+4      	; 0x104e <vfprintf+0x1ce>
    104a:	84 e0       	ldi	r24, 0x04	; 4
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <vfprintf+0x1d0>
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	86 15       	cp	r24, r6
    1052:	10 f0       	brcs	.+4      	; 0x1058 <vfprintf+0x1d8>
    1054:	61 2c       	mov	r6, r1
    1056:	0b c0       	rjmp	.+22     	; 0x106e <vfprintf+0x1ee>
    1058:	68 1a       	sub	r6, r24
    105a:	53 fc       	sbrc	r5, 3
    105c:	08 c0       	rjmp	.+16     	; 0x106e <vfprintf+0x1ee>
    105e:	b7 01       	movw	r22, r14
    1060:	80 e2       	ldi	r24, 0x20	; 32
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    1068:	6a 94       	dec	r6
    106a:	c9 f7       	brne	.-14     	; 0x105e <vfprintf+0x1de>
    106c:	f3 cf       	rjmp	.-26     	; 0x1054 <vfprintf+0x1d4>
    106e:	dd 20       	and	r13, r13
    1070:	29 f0       	breq	.+10     	; 0x107c <vfprintf+0x1fc>
    1072:	b7 01       	movw	r22, r14
    1074:	8d 2d       	mov	r24, r13
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    107c:	5c 85       	ldd	r21, Y+12	; 0x0c
    107e:	53 fd       	sbrc	r21, 3
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <vfprintf+0x208>
    1082:	0f ee       	ldi	r16, 0xEF	; 239
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	0c c0       	rjmp	.+24     	; 0x10a0 <vfprintf+0x220>
    1088:	0b ee       	ldi	r16, 0xEB	; 235
    108a:	10 e0       	ldi	r17, 0x00	; 0
    108c:	09 c0       	rjmp	.+18     	; 0x10a0 <vfprintf+0x220>
    108e:	51 10       	cpse	r5, r1
    1090:	80 52       	subi	r24, 0x20	; 32
    1092:	b7 01       	movw	r22, r14
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    109a:	0f 5f       	subi	r16, 0xFF	; 255
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0x224>
    10a0:	80 e1       	ldi	r24, 0x10	; 16
    10a2:	58 22       	and	r5, r24
    10a4:	f8 01       	movw	r30, r16
    10a6:	84 91       	lpm	r24, Z
    10a8:	81 11       	cpse	r24, r1
    10aa:	f1 cf       	rjmp	.-30     	; 0x108e <vfprintf+0x20e>
    10ac:	71 c2       	rjmp	.+1250   	; 0x1590 <vfprintf+0x710>
    10ae:	57 fe       	sbrs	r5, 7
    10b0:	0e c0       	rjmp	.+28     	; 0x10ce <vfprintf+0x24e>
    10b2:	40 0e       	add	r4, r16
    10b4:	4c 85       	ldd	r20, Y+12	; 0x0c
    10b6:	44 ff       	sbrs	r20, 4
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <vfprintf+0x242>
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	81 33       	cpi	r24, 0x31	; 49
    10be:	09 f4       	brne	.+2      	; 0x10c2 <vfprintf+0x242>
    10c0:	4a 94       	dec	r4
    10c2:	14 14       	cp	r1, r4
    10c4:	4c f5       	brge	.+82     	; 0x1118 <vfprintf+0x298>
    10c6:	58 e0       	ldi	r21, 0x08	; 8
    10c8:	54 15       	cp	r21, r4
    10ca:	48 f1       	brcs	.+82     	; 0x111e <vfprintf+0x29e>
    10cc:	2c c0       	rjmp	.+88     	; 0x1126 <vfprintf+0x2a6>
    10ce:	56 fc       	sbrc	r5, 6
    10d0:	2a c0       	rjmp	.+84     	; 0x1126 <vfprintf+0x2a6>
    10d2:	87 2d       	mov	r24, r7
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	80 17       	cp	r24, r16
    10d8:	91 07       	cpc	r25, r17
    10da:	44 f0       	brlt	.+16     	; 0x10ec <vfprintf+0x26c>
    10dc:	0c 3f       	cpi	r16, 0xFC	; 252
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	18 07       	cpc	r17, r24
    10e2:	24 f0       	brlt	.+8      	; 0x10ec <vfprintf+0x26c>
    10e4:	90 e8       	ldi	r25, 0x80	; 128
    10e6:	59 2a       	or	r5, r25
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <vfprintf+0x26c>
    10ea:	7a 94       	dec	r7
    10ec:	77 20       	and	r7, r7
    10ee:	49 f0       	breq	.+18     	; 0x1102 <vfprintf+0x282>
    10f0:	e2 e0       	ldi	r30, 0x02	; 2
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	ec 0f       	add	r30, r28
    10f6:	fd 1f       	adc	r31, r29
    10f8:	e7 0d       	add	r30, r7
    10fa:	f1 1d       	adc	r31, r1
    10fc:	80 81       	ld	r24, Z
    10fe:	80 33       	cpi	r24, 0x30	; 48
    1100:	a1 f3       	breq	.-24     	; 0x10ea <vfprintf+0x26a>
    1102:	57 fe       	sbrs	r5, 7
    1104:	10 c0       	rjmp	.+32     	; 0x1126 <vfprintf+0x2a6>
    1106:	47 2c       	mov	r4, r7
    1108:	43 94       	inc	r4
    110a:	87 2d       	mov	r24, r7
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	08 17       	cp	r16, r24
    1110:	19 07       	cpc	r17, r25
    1112:	44 f4       	brge	.+16     	; 0x1124 <vfprintf+0x2a4>
    1114:	70 1a       	sub	r7, r16
    1116:	07 c0       	rjmp	.+14     	; 0x1126 <vfprintf+0x2a6>
    1118:	44 24       	eor	r4, r4
    111a:	43 94       	inc	r4
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <vfprintf+0x2a6>
    111e:	58 e0       	ldi	r21, 0x08	; 8
    1120:	45 2e       	mov	r4, r21
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <vfprintf+0x2a6>
    1124:	71 2c       	mov	r7, r1
    1126:	57 fe       	sbrs	r5, 7
    1128:	07 c0       	rjmp	.+14     	; 0x1138 <vfprintf+0x2b8>
    112a:	10 16       	cp	r1, r16
    112c:	11 06       	cpc	r1, r17
    112e:	3c f4       	brge	.+14     	; 0x113e <vfprintf+0x2be>
    1130:	98 01       	movw	r18, r16
    1132:	2f 5f       	subi	r18, 0xFF	; 255
    1134:	3f 4f       	sbci	r19, 0xFF	; 255
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <vfprintf+0x2c2>
    1138:	25 e0       	ldi	r18, 0x05	; 5
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <vfprintf+0x2c2>
    113e:	21 e0       	ldi	r18, 0x01	; 1
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	dd 20       	and	r13, r13
    1144:	11 f0       	breq	.+4      	; 0x114a <vfprintf+0x2ca>
    1146:	2f 5f       	subi	r18, 0xFF	; 255
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	77 20       	and	r7, r7
    114c:	31 f0       	breq	.+12     	; 0x115a <vfprintf+0x2da>
    114e:	47 2d       	mov	r20, r7
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	4f 5f       	subi	r20, 0xFF	; 255
    1154:	5f 4f       	sbci	r21, 0xFF	; 255
    1156:	24 0f       	add	r18, r20
    1158:	35 1f       	adc	r19, r21
    115a:	46 2d       	mov	r20, r6
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	24 17       	cp	r18, r20
    1160:	35 07       	cpc	r19, r21
    1162:	14 f4       	brge	.+4      	; 0x1168 <vfprintf+0x2e8>
    1164:	62 1a       	sub	r6, r18
    1166:	01 c0       	rjmp	.+2      	; 0x116a <vfprintf+0x2ea>
    1168:	61 2c       	mov	r6, r1
    116a:	85 2d       	mov	r24, r5
    116c:	89 70       	andi	r24, 0x09	; 9
    116e:	49 f4       	brne	.+18     	; 0x1182 <vfprintf+0x302>
    1170:	06 c0       	rjmp	.+12     	; 0x117e <vfprintf+0x2fe>
    1172:	b7 01       	movw	r22, r14
    1174:	80 e2       	ldi	r24, 0x20	; 32
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    117c:	6a 94       	dec	r6
    117e:	61 10       	cpse	r6, r1
    1180:	f8 cf       	rjmp	.-16     	; 0x1172 <vfprintf+0x2f2>
    1182:	dd 20       	and	r13, r13
    1184:	29 f0       	breq	.+10     	; 0x1190 <vfprintf+0x310>
    1186:	b7 01       	movw	r22, r14
    1188:	8d 2d       	mov	r24, r13
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    1190:	53 fc       	sbrc	r5, 3
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <vfprintf+0x326>
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <vfprintf+0x322>
    1196:	b7 01       	movw	r22, r14
    1198:	80 e3       	ldi	r24, 0x30	; 48
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    11a0:	6a 94       	dec	r6
    11a2:	61 10       	cpse	r6, r1
    11a4:	f8 cf       	rjmp	.-16     	; 0x1196 <vfprintf+0x316>
    11a6:	57 fe       	sbrs	r5, 7
    11a8:	56 c0       	rjmp	.+172    	; 0x1256 <vfprintf+0x3d6>
    11aa:	68 01       	movw	r12, r16
    11ac:	17 ff       	sbrs	r17, 7
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <vfprintf+0x334>
    11b0:	c1 2c       	mov	r12, r1
    11b2:	d1 2c       	mov	r13, r1
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	a8 01       	movw	r20, r16
    11ba:	44 19       	sub	r20, r4
    11bc:	51 09       	sbc	r21, r1
    11be:	5e 87       	std	Y+14, r21	; 0x0e
    11c0:	4d 87       	std	Y+13, r20	; 0x0d
    11c2:	28 01       	movw	r4, r16
    11c4:	4c 18       	sub	r4, r12
    11c6:	5d 08       	sbc	r5, r13
    11c8:	48 0c       	add	r4, r8
    11ca:	59 1c       	adc	r5, r9
    11cc:	87 2d       	mov	r24, r7
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	44 27       	eor	r20, r20
    11d2:	55 27       	eor	r21, r21
    11d4:	48 1b       	sub	r20, r24
    11d6:	59 0b       	sbc	r21, r25
    11d8:	58 8b       	std	Y+16, r21	; 0x10
    11da:	4f 87       	std	Y+15, r20	; 0x0f
    11dc:	5f ef       	ldi	r21, 0xFF	; 255
    11de:	c5 16       	cp	r12, r21
    11e0:	d5 06       	cpc	r13, r21
    11e2:	49 f4       	brne	.+18     	; 0x11f6 <vfprintf+0x376>
    11e4:	b7 01       	movw	r22, r14
    11e6:	8e e2       	ldi	r24, 0x2E	; 46
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	2a 8b       	std	Y+18, r18	; 0x12
    11ec:	39 8b       	std	Y+17, r19	; 0x11
    11ee:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    11f2:	39 89       	ldd	r19, Y+17	; 0x11
    11f4:	2a 89       	ldd	r18, Y+18	; 0x12
    11f6:	0c 15       	cp	r16, r12
    11f8:	1d 05       	cpc	r17, r13
    11fa:	54 f0       	brlt	.+20     	; 0x1210 <vfprintf+0x390>
    11fc:	4d 85       	ldd	r20, Y+13	; 0x0d
    11fe:	5e 85       	ldd	r21, Y+14	; 0x0e
    1200:	4c 15       	cp	r20, r12
    1202:	5d 05       	cpc	r21, r13
    1204:	2c f4       	brge	.+10     	; 0x1210 <vfprintf+0x390>
    1206:	f2 01       	movw	r30, r4
    1208:	e2 0f       	add	r30, r18
    120a:	f3 1f       	adc	r31, r19
    120c:	81 81       	ldd	r24, Z+1	; 0x01
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <vfprintf+0x392>
    1210:	80 e3       	ldi	r24, 0x30	; 48
    1212:	51 e0       	ldi	r21, 0x01	; 1
    1214:	c5 1a       	sub	r12, r21
    1216:	d1 08       	sbc	r13, r1
    1218:	2f 5f       	subi	r18, 0xFF	; 255
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	4f 85       	ldd	r20, Y+15	; 0x0f
    121e:	58 89       	ldd	r21, Y+16	; 0x10
    1220:	c4 16       	cp	r12, r20
    1222:	d5 06       	cpc	r13, r21
    1224:	4c f0       	brlt	.+18     	; 0x1238 <vfprintf+0x3b8>
    1226:	b7 01       	movw	r22, r14
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	2a 8b       	std	Y+18, r18	; 0x12
    122c:	39 8b       	std	Y+17, r19	; 0x11
    122e:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    1232:	2a 89       	ldd	r18, Y+18	; 0x12
    1234:	39 89       	ldd	r19, Y+17	; 0x11
    1236:	d2 cf       	rjmp	.-92     	; 0x11dc <vfprintf+0x35c>
    1238:	c0 16       	cp	r12, r16
    123a:	d1 06       	cpc	r13, r17
    123c:	49 f4       	brne	.+18     	; 0x1250 <vfprintf+0x3d0>
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	96 33       	cpi	r25, 0x36	; 54
    1242:	28 f4       	brcc	.+10     	; 0x124e <vfprintf+0x3ce>
    1244:	95 33       	cpi	r25, 0x35	; 53
    1246:	21 f4       	brne	.+8      	; 0x1250 <vfprintf+0x3d0>
    1248:	5c 85       	ldd	r21, Y+12	; 0x0c
    124a:	54 fd       	sbrc	r21, 4
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <vfprintf+0x3d0>
    124e:	81 e3       	ldi	r24, 0x31	; 49
    1250:	b7 01       	movw	r22, r14
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	4a c0       	rjmp	.+148    	; 0x12ea <vfprintf+0x46a>
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 33       	cpi	r24, 0x31	; 49
    125a:	19 f0       	breq	.+6      	; 0x1262 <vfprintf+0x3e2>
    125c:	4c 85       	ldd	r20, Y+12	; 0x0c
    125e:	4f 7e       	andi	r20, 0xEF	; 239
    1260:	4c 87       	std	Y+12, r20	; 0x0c
    1262:	b7 01       	movw	r22, r14
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    126a:	71 10       	cpse	r7, r1
    126c:	05 c0       	rjmp	.+10     	; 0x1278 <vfprintf+0x3f8>
    126e:	54 fe       	sbrs	r5, 4
    1270:	16 c0       	rjmp	.+44     	; 0x129e <vfprintf+0x41e>
    1272:	85 e4       	ldi	r24, 0x45	; 69
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	15 c0       	rjmp	.+42     	; 0x12a2 <vfprintf+0x422>
    1278:	b7 01       	movw	r22, r14
    127a:	8e e2       	ldi	r24, 0x2E	; 46
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    1282:	42 e0       	ldi	r20, 0x02	; 2
    1284:	d4 2e       	mov	r13, r20
    1286:	f4 01       	movw	r30, r8
    1288:	ed 0d       	add	r30, r13
    128a:	f1 1d       	adc	r31, r1
    128c:	d3 94       	inc	r13
    128e:	b7 01       	movw	r22, r14
    1290:	80 81       	ld	r24, Z
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    1298:	7a 94       	dec	r7
    129a:	a9 f7       	brne	.-22     	; 0x1286 <vfprintf+0x406>
    129c:	e8 cf       	rjmp	.-48     	; 0x126e <vfprintf+0x3ee>
    129e:	85 e6       	ldi	r24, 0x65	; 101
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	b7 01       	movw	r22, r14
    12a4:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    12a8:	17 fd       	sbrc	r17, 7
    12aa:	06 c0       	rjmp	.+12     	; 0x12b8 <vfprintf+0x438>
    12ac:	01 15       	cp	r16, r1
    12ae:	11 05       	cpc	r17, r1
    12b0:	41 f4       	brne	.+16     	; 0x12c2 <vfprintf+0x442>
    12b2:	5c 85       	ldd	r21, Y+12	; 0x0c
    12b4:	54 ff       	sbrs	r21, 4
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <vfprintf+0x442>
    12b8:	11 95       	neg	r17
    12ba:	01 95       	neg	r16
    12bc:	11 09       	sbc	r17, r1
    12be:	8d e2       	ldi	r24, 0x2D	; 45
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <vfprintf+0x444>
    12c2:	8b e2       	ldi	r24, 0x2B	; 43
    12c4:	b7 01       	movw	r22, r14
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    12cc:	80 e3       	ldi	r24, 0x30	; 48
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <vfprintf+0x456>
    12d0:	8f 5f       	subi	r24, 0xFF	; 255
    12d2:	0a 50       	subi	r16, 0x0A	; 10
    12d4:	11 09       	sbc	r17, r1
    12d6:	0a 30       	cpi	r16, 0x0A	; 10
    12d8:	11 05       	cpc	r17, r1
    12da:	d4 f7       	brge	.-12     	; 0x12d0 <vfprintf+0x450>
    12dc:	b7 01       	movw	r22, r14
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    12e4:	b7 01       	movw	r22, r14
    12e6:	c8 01       	movw	r24, r16
    12e8:	c0 96       	adiw	r24, 0x30	; 48
    12ea:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    12ee:	50 c1       	rjmp	.+672    	; 0x1590 <vfprintf+0x710>
    12f0:	83 36       	cpi	r24, 0x63	; 99
    12f2:	31 f0       	breq	.+12     	; 0x1300 <vfprintf+0x480>
    12f4:	83 37       	cpi	r24, 0x73	; 115
    12f6:	81 f0       	breq	.+32     	; 0x1318 <vfprintf+0x498>
    12f8:	83 35       	cpi	r24, 0x53	; 83
    12fa:	09 f0       	breq	.+2      	; 0x12fe <vfprintf+0x47e>
    12fc:	5e c0       	rjmp	.+188    	; 0x13ba <vfprintf+0x53a>
    12fe:	24 c0       	rjmp	.+72     	; 0x1348 <vfprintf+0x4c8>
    1300:	56 01       	movw	r10, r12
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	a8 0e       	add	r10, r24
    1306:	b1 1c       	adc	r11, r1
    1308:	f6 01       	movw	r30, r12
    130a:	80 81       	ld	r24, Z
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	cc 24       	eor	r12, r12
    1310:	c3 94       	inc	r12
    1312:	d1 2c       	mov	r13, r1
    1314:	84 01       	movw	r16, r8
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <vfprintf+0x4c0>
    1318:	56 01       	movw	r10, r12
    131a:	f2 e0       	ldi	r31, 0x02	; 2
    131c:	af 0e       	add	r10, r31
    131e:	b1 1c       	adc	r11, r1
    1320:	f6 01       	movw	r30, r12
    1322:	00 81       	ld	r16, Z
    1324:	11 81       	ldd	r17, Z+1	; 0x01
    1326:	26 ff       	sbrs	r18, 6
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <vfprintf+0x4b0>
    132a:	67 2d       	mov	r22, r7
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <vfprintf+0x4b4>
    1330:	6f ef       	ldi	r22, 0xFF	; 255
    1332:	7f ef       	ldi	r23, 0xFF	; 255
    1334:	c8 01       	movw	r24, r16
    1336:	2a 8b       	std	Y+18, r18	; 0x12
    1338:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <strnlen>
    133c:	6c 01       	movw	r12, r24
    133e:	2a 89       	ldd	r18, Y+18	; 0x12
    1340:	9f e7       	ldi	r25, 0x7F	; 127
    1342:	59 2e       	mov	r5, r25
    1344:	52 22       	and	r5, r18
    1346:	17 c0       	rjmp	.+46     	; 0x1376 <vfprintf+0x4f6>
    1348:	56 01       	movw	r10, r12
    134a:	f2 e0       	ldi	r31, 0x02	; 2
    134c:	af 0e       	add	r10, r31
    134e:	b1 1c       	adc	r11, r1
    1350:	f6 01       	movw	r30, r12
    1352:	00 81       	ld	r16, Z
    1354:	11 81       	ldd	r17, Z+1	; 0x01
    1356:	26 ff       	sbrs	r18, 6
    1358:	03 c0       	rjmp	.+6      	; 0x1360 <vfprintf+0x4e0>
    135a:	67 2d       	mov	r22, r7
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <vfprintf+0x4e4>
    1360:	6f ef       	ldi	r22, 0xFF	; 255
    1362:	7f ef       	ldi	r23, 0xFF	; 255
    1364:	c8 01       	movw	r24, r16
    1366:	2a 8b       	std	Y+18, r18	; 0x12
    1368:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <strnlen_P>
    136c:	6c 01       	movw	r12, r24
    136e:	2a 89       	ldd	r18, Y+18	; 0x12
    1370:	80 e8       	ldi	r24, 0x80	; 128
    1372:	58 2e       	mov	r5, r24
    1374:	52 2a       	or	r5, r18
    1376:	53 fc       	sbrc	r5, 3
    1378:	1c c0       	rjmp	.+56     	; 0x13b2 <vfprintf+0x532>
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <vfprintf+0x508>
    137c:	b7 01       	movw	r22, r14
    137e:	80 e2       	ldi	r24, 0x20	; 32
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    1386:	6a 94       	dec	r6
    1388:	86 2d       	mov	r24, r6
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	c8 16       	cp	r12, r24
    138e:	d9 06       	cpc	r13, r25
    1390:	a8 f3       	brcs	.-22     	; 0x137c <vfprintf+0x4fc>
    1392:	0f c0       	rjmp	.+30     	; 0x13b2 <vfprintf+0x532>
    1394:	f8 01       	movw	r30, r16
    1396:	57 fc       	sbrc	r5, 7
    1398:	85 91       	lpm	r24, Z+
    139a:	57 fe       	sbrs	r5, 7
    139c:	81 91       	ld	r24, Z+
    139e:	8f 01       	movw	r16, r30
    13a0:	b7 01       	movw	r22, r14
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    13a8:	61 10       	cpse	r6, r1
    13aa:	6a 94       	dec	r6
    13ac:	f1 e0       	ldi	r31, 0x01	; 1
    13ae:	cf 1a       	sub	r12, r31
    13b0:	d1 08       	sbc	r13, r1
    13b2:	c1 14       	cp	r12, r1
    13b4:	d1 04       	cpc	r13, r1
    13b6:	71 f7       	brne	.-36     	; 0x1394 <vfprintf+0x514>
    13b8:	eb c0       	rjmp	.+470    	; 0x1590 <vfprintf+0x710>
    13ba:	84 36       	cpi	r24, 0x64	; 100
    13bc:	11 f0       	breq	.+4      	; 0x13c2 <vfprintf+0x542>
    13be:	89 36       	cpi	r24, 0x69	; 105
    13c0:	51 f5       	brne	.+84     	; 0x1416 <vfprintf+0x596>
    13c2:	56 01       	movw	r10, r12
    13c4:	27 ff       	sbrs	r18, 7
    13c6:	09 c0       	rjmp	.+18     	; 0x13da <vfprintf+0x55a>
    13c8:	44 e0       	ldi	r20, 0x04	; 4
    13ca:	a4 0e       	add	r10, r20
    13cc:	b1 1c       	adc	r11, r1
    13ce:	f6 01       	movw	r30, r12
    13d0:	60 81       	ld	r22, Z
    13d2:	71 81       	ldd	r23, Z+1	; 0x01
    13d4:	82 81       	ldd	r24, Z+2	; 0x02
    13d6:	93 81       	ldd	r25, Z+3	; 0x03
    13d8:	0a c0       	rjmp	.+20     	; 0x13ee <vfprintf+0x56e>
    13da:	f2 e0       	ldi	r31, 0x02	; 2
    13dc:	af 0e       	add	r10, r31
    13de:	b1 1c       	adc	r11, r1
    13e0:	f6 01       	movw	r30, r12
    13e2:	60 81       	ld	r22, Z
    13e4:	71 81       	ldd	r23, Z+1	; 0x01
    13e6:	88 27       	eor	r24, r24
    13e8:	77 fd       	sbrc	r23, 7
    13ea:	80 95       	com	r24
    13ec:	98 2f       	mov	r25, r24
    13ee:	12 2f       	mov	r17, r18
    13f0:	1f 76       	andi	r17, 0x6F	; 111
    13f2:	97 ff       	sbrs	r25, 7
    13f4:	08 c0       	rjmp	.+16     	; 0x1406 <vfprintf+0x586>
    13f6:	90 95       	com	r25
    13f8:	80 95       	com	r24
    13fa:	70 95       	com	r23
    13fc:	61 95       	neg	r22
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	8f 4f       	sbci	r24, 0xFF	; 255
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	10 68       	ori	r17, 0x80	; 128
    1406:	2a e0       	ldi	r18, 0x0A	; 10
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	a4 01       	movw	r20, r8
    140c:	0e 94 8e 0c 	call	0x191c	; 0x191c <__ultoa_invert>
    1410:	d8 2e       	mov	r13, r24
    1412:	d8 18       	sub	r13, r8
    1414:	40 c0       	rjmp	.+128    	; 0x1496 <vfprintf+0x616>
    1416:	12 2f       	mov	r17, r18
    1418:	85 37       	cpi	r24, 0x75	; 117
    141a:	21 f4       	brne	.+8      	; 0x1424 <vfprintf+0x5a4>
    141c:	1f 7e       	andi	r17, 0xEF	; 239
    141e:	2a e0       	ldi	r18, 0x0A	; 10
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	1f c0       	rjmp	.+62     	; 0x1462 <vfprintf+0x5e2>
    1424:	19 7f       	andi	r17, 0xF9	; 249
    1426:	8f 36       	cpi	r24, 0x6F	; 111
    1428:	a1 f0       	breq	.+40     	; 0x1452 <vfprintf+0x5d2>
    142a:	20 f4       	brcc	.+8      	; 0x1434 <vfprintf+0x5b4>
    142c:	88 35       	cpi	r24, 0x58	; 88
    142e:	09 f0       	breq	.+2      	; 0x1432 <vfprintf+0x5b2>
    1430:	b2 c0       	rjmp	.+356    	; 0x1596 <vfprintf+0x716>
    1432:	0b c0       	rjmp	.+22     	; 0x144a <vfprintf+0x5ca>
    1434:	80 37       	cpi	r24, 0x70	; 112
    1436:	21 f0       	breq	.+8      	; 0x1440 <vfprintf+0x5c0>
    1438:	88 37       	cpi	r24, 0x78	; 120
    143a:	09 f0       	breq	.+2      	; 0x143e <vfprintf+0x5be>
    143c:	ac c0       	rjmp	.+344    	; 0x1596 <vfprintf+0x716>
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <vfprintf+0x5c2>
    1440:	10 61       	ori	r17, 0x10	; 16
    1442:	14 ff       	sbrs	r17, 4
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <vfprintf+0x5d8>
    1446:	14 60       	ori	r17, 0x04	; 4
    1448:	07 c0       	rjmp	.+14     	; 0x1458 <vfprintf+0x5d8>
    144a:	24 ff       	sbrs	r18, 4
    144c:	08 c0       	rjmp	.+16     	; 0x145e <vfprintf+0x5de>
    144e:	16 60       	ori	r17, 0x06	; 6
    1450:	06 c0       	rjmp	.+12     	; 0x145e <vfprintf+0x5de>
    1452:	28 e0       	ldi	r18, 0x08	; 8
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <vfprintf+0x5e2>
    1458:	20 e1       	ldi	r18, 0x10	; 16
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <vfprintf+0x5e2>
    145e:	20 e1       	ldi	r18, 0x10	; 16
    1460:	32 e0       	ldi	r19, 0x02	; 2
    1462:	56 01       	movw	r10, r12
    1464:	17 ff       	sbrs	r17, 7
    1466:	09 c0       	rjmp	.+18     	; 0x147a <vfprintf+0x5fa>
    1468:	f4 e0       	ldi	r31, 0x04	; 4
    146a:	af 0e       	add	r10, r31
    146c:	b1 1c       	adc	r11, r1
    146e:	f6 01       	movw	r30, r12
    1470:	60 81       	ld	r22, Z
    1472:	71 81       	ldd	r23, Z+1	; 0x01
    1474:	82 81       	ldd	r24, Z+2	; 0x02
    1476:	93 81       	ldd	r25, Z+3	; 0x03
    1478:	08 c0       	rjmp	.+16     	; 0x148a <vfprintf+0x60a>
    147a:	f2 e0       	ldi	r31, 0x02	; 2
    147c:	af 0e       	add	r10, r31
    147e:	b1 1c       	adc	r11, r1
    1480:	f6 01       	movw	r30, r12
    1482:	60 81       	ld	r22, Z
    1484:	71 81       	ldd	r23, Z+1	; 0x01
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a4 01       	movw	r20, r8
    148c:	0e 94 8e 0c 	call	0x191c	; 0x191c <__ultoa_invert>
    1490:	d8 2e       	mov	r13, r24
    1492:	d8 18       	sub	r13, r8
    1494:	1f 77       	andi	r17, 0x7F	; 127
    1496:	16 ff       	sbrs	r17, 6
    1498:	0b c0       	rjmp	.+22     	; 0x14b0 <vfprintf+0x630>
    149a:	21 2f       	mov	r18, r17
    149c:	2e 7f       	andi	r18, 0xFE	; 254
    149e:	d7 14       	cp	r13, r7
    14a0:	50 f4       	brcc	.+20     	; 0x14b6 <vfprintf+0x636>
    14a2:	14 ff       	sbrs	r17, 4
    14a4:	0a c0       	rjmp	.+20     	; 0x14ba <vfprintf+0x63a>
    14a6:	12 fd       	sbrc	r17, 2
    14a8:	08 c0       	rjmp	.+16     	; 0x14ba <vfprintf+0x63a>
    14aa:	21 2f       	mov	r18, r17
    14ac:	2e 7e       	andi	r18, 0xEE	; 238
    14ae:	05 c0       	rjmp	.+10     	; 0x14ba <vfprintf+0x63a>
    14b0:	0d 2d       	mov	r16, r13
    14b2:	21 2f       	mov	r18, r17
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <vfprintf+0x63c>
    14b6:	0d 2d       	mov	r16, r13
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <vfprintf+0x63c>
    14ba:	07 2d       	mov	r16, r7
    14bc:	24 ff       	sbrs	r18, 4
    14be:	0c c0       	rjmp	.+24     	; 0x14d8 <vfprintf+0x658>
    14c0:	fe 01       	movw	r30, r28
    14c2:	ed 0d       	add	r30, r13
    14c4:	f1 1d       	adc	r31, r1
    14c6:	80 81       	ld	r24, Z
    14c8:	80 33       	cpi	r24, 0x30	; 48
    14ca:	11 f4       	brne	.+4      	; 0x14d0 <vfprintf+0x650>
    14cc:	29 7e       	andi	r18, 0xE9	; 233
    14ce:	08 c0       	rjmp	.+16     	; 0x14e0 <vfprintf+0x660>
    14d0:	22 ff       	sbrs	r18, 2
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <vfprintf+0x65e>
    14d4:	0e 5f       	subi	r16, 0xFE	; 254
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <vfprintf+0x660>
    14d8:	82 2f       	mov	r24, r18
    14da:	86 78       	andi	r24, 0x86	; 134
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <vfprintf+0x660>
    14de:	0f 5f       	subi	r16, 0xFF	; 255
    14e0:	23 fd       	sbrc	r18, 3
    14e2:	14 c0       	rjmp	.+40     	; 0x150c <vfprintf+0x68c>
    14e4:	20 ff       	sbrs	r18, 0
    14e6:	0f c0       	rjmp	.+30     	; 0x1506 <vfprintf+0x686>
    14e8:	7d 2c       	mov	r7, r13
    14ea:	06 15       	cp	r16, r6
    14ec:	60 f4       	brcc	.+24     	; 0x1506 <vfprintf+0x686>
    14ee:	76 0c       	add	r7, r6
    14f0:	70 1a       	sub	r7, r16
    14f2:	06 2d       	mov	r16, r6
    14f4:	08 c0       	rjmp	.+16     	; 0x1506 <vfprintf+0x686>
    14f6:	b7 01       	movw	r22, r14
    14f8:	80 e2       	ldi	r24, 0x20	; 32
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	2a 8b       	std	Y+18, r18	; 0x12
    14fe:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    1502:	0f 5f       	subi	r16, 0xFF	; 255
    1504:	2a 89       	ldd	r18, Y+18	; 0x12
    1506:	06 15       	cp	r16, r6
    1508:	b0 f3       	brcs	.-20     	; 0x14f6 <vfprintf+0x676>
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <vfprintf+0x694>
    150c:	06 15       	cp	r16, r6
    150e:	10 f4       	brcc	.+4      	; 0x1514 <vfprintf+0x694>
    1510:	60 1a       	sub	r6, r16
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <vfprintf+0x696>
    1514:	61 2c       	mov	r6, r1
    1516:	24 ff       	sbrs	r18, 4
    1518:	12 c0       	rjmp	.+36     	; 0x153e <vfprintf+0x6be>
    151a:	b7 01       	movw	r22, r14
    151c:	80 e3       	ldi	r24, 0x30	; 48
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	2a 8b       	std	Y+18, r18	; 0x12
    1522:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    1526:	2a 89       	ldd	r18, Y+18	; 0x12
    1528:	22 ff       	sbrs	r18, 2
    152a:	1e c0       	rjmp	.+60     	; 0x1568 <vfprintf+0x6e8>
    152c:	21 ff       	sbrs	r18, 1
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <vfprintf+0x6b6>
    1530:	88 e5       	ldi	r24, 0x58	; 88
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 c0       	rjmp	.+4      	; 0x153a <vfprintf+0x6ba>
    1536:	88 e7       	ldi	r24, 0x78	; 120
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	b7 01       	movw	r22, r14
    153c:	0c c0       	rjmp	.+24     	; 0x1556 <vfprintf+0x6d6>
    153e:	82 2f       	mov	r24, r18
    1540:	86 78       	andi	r24, 0x86	; 134
    1542:	91 f0       	breq	.+36     	; 0x1568 <vfprintf+0x6e8>
    1544:	21 fd       	sbrc	r18, 1
    1546:	02 c0       	rjmp	.+4      	; 0x154c <vfprintf+0x6cc>
    1548:	80 e2       	ldi	r24, 0x20	; 32
    154a:	01 c0       	rjmp	.+2      	; 0x154e <vfprintf+0x6ce>
    154c:	8b e2       	ldi	r24, 0x2B	; 43
    154e:	27 fd       	sbrc	r18, 7
    1550:	8d e2       	ldi	r24, 0x2D	; 45
    1552:	b7 01       	movw	r22, r14
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <vfprintf+0x6e8>
    155c:	b7 01       	movw	r22, r14
    155e:	80 e3       	ldi	r24, 0x30	; 48
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    1566:	7a 94       	dec	r7
    1568:	d7 14       	cp	r13, r7
    156a:	c0 f3       	brcs	.-16     	; 0x155c <vfprintf+0x6dc>
    156c:	da 94       	dec	r13
    156e:	f4 01       	movw	r30, r8
    1570:	ed 0d       	add	r30, r13
    1572:	f1 1d       	adc	r31, r1
    1574:	b7 01       	movw	r22, r14
    1576:	80 81       	ld	r24, Z
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    157e:	d1 10       	cpse	r13, r1
    1580:	f5 cf       	rjmp	.-22     	; 0x156c <vfprintf+0x6ec>
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <vfprintf+0x710>
    1584:	b7 01       	movw	r22, r14
    1586:	80 e2       	ldi	r24, 0x20	; 32
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 08 0c 	call	0x1810	; 0x1810 <fputc>
    158e:	6a 94       	dec	r6
    1590:	61 10       	cpse	r6, r1
    1592:	f8 cf       	rjmp	.-16     	; 0x1584 <vfprintf+0x704>
    1594:	99 cc       	rjmp	.-1742   	; 0xec8 <vfprintf+0x48>
    1596:	f7 01       	movw	r30, r14
    1598:	26 81       	ldd	r18, Z+6	; 0x06
    159a:	37 81       	ldd	r19, Z+7	; 0x07
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <vfprintf+0x722>
    159e:	2f ef       	ldi	r18, 0xFF	; 255
    15a0:	3f ef       	ldi	r19, 0xFF	; 255
    15a2:	c9 01       	movw	r24, r18
    15a4:	62 96       	adiw	r28, 0x12	; 18
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	cf 90       	pop	r12
    15c0:	bf 90       	pop	r11
    15c2:	af 90       	pop	r10
    15c4:	9f 90       	pop	r9
    15c6:	8f 90       	pop	r8
    15c8:	7f 90       	pop	r7
    15ca:	6f 90       	pop	r6
    15cc:	5f 90       	pop	r5
    15ce:	4f 90       	pop	r4
    15d0:	3f 90       	pop	r3
    15d2:	2f 90       	pop	r2
    15d4:	08 95       	ret

000015d6 <__udivmodhi4>:
    15d6:	aa 1b       	sub	r26, r26
    15d8:	bb 1b       	sub	r27, r27
    15da:	51 e1       	ldi	r21, 0x11	; 17
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <__udivmodhi4_ep>

000015de <__udivmodhi4_loop>:
    15de:	aa 1f       	adc	r26, r26
    15e0:	bb 1f       	adc	r27, r27
    15e2:	a6 17       	cp	r26, r22
    15e4:	b7 07       	cpc	r27, r23
    15e6:	10 f0       	brcs	.+4      	; 0x15ec <__udivmodhi4_ep>
    15e8:	a6 1b       	sub	r26, r22
    15ea:	b7 0b       	sbc	r27, r23

000015ec <__udivmodhi4_ep>:
    15ec:	88 1f       	adc	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	5a 95       	dec	r21
    15f2:	a9 f7       	brne	.-22     	; 0x15de <__udivmodhi4_loop>
    15f4:	80 95       	com	r24
    15f6:	90 95       	com	r25
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	08 95       	ret

000015fe <__divmodhi4>:
    15fe:	97 fb       	bst	r25, 7
    1600:	07 2e       	mov	r0, r23
    1602:	16 f4       	brtc	.+4      	; 0x1608 <__divmodhi4+0xa>
    1604:	00 94       	com	r0
    1606:	07 d0       	rcall	.+14     	; 0x1616 <__divmodhi4_neg1>
    1608:	77 fd       	sbrc	r23, 7
    160a:	09 d0       	rcall	.+18     	; 0x161e <__divmodhi4_neg2>
    160c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__udivmodhi4>
    1610:	07 fc       	sbrc	r0, 7
    1612:	05 d0       	rcall	.+10     	; 0x161e <__divmodhi4_neg2>
    1614:	3e f4       	brtc	.+14     	; 0x1624 <__divmodhi4_exit>

00001616 <__divmodhi4_neg1>:
    1616:	90 95       	com	r25
    1618:	81 95       	neg	r24
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	08 95       	ret

0000161e <__divmodhi4_neg2>:
    161e:	70 95       	com	r23
    1620:	61 95       	neg	r22
    1622:	7f 4f       	sbci	r23, 0xFF	; 255

00001624 <__divmodhi4_exit>:
    1624:	08 95       	ret

00001626 <__ftoa_engine>:
    1626:	28 30       	cpi	r18, 0x08	; 8
    1628:	08 f0       	brcs	.+2      	; 0x162c <__ftoa_engine+0x6>
    162a:	27 e0       	ldi	r18, 0x07	; 7
    162c:	33 27       	eor	r19, r19
    162e:	da 01       	movw	r26, r20
    1630:	99 0f       	add	r25, r25
    1632:	31 1d       	adc	r19, r1
    1634:	87 fd       	sbrc	r24, 7
    1636:	91 60       	ori	r25, 0x01	; 1
    1638:	00 96       	adiw	r24, 0x00	; 0
    163a:	61 05       	cpc	r22, r1
    163c:	71 05       	cpc	r23, r1
    163e:	39 f4       	brne	.+14     	; 0x164e <__ftoa_engine+0x28>
    1640:	32 60       	ori	r19, 0x02	; 2
    1642:	2e 5f       	subi	r18, 0xFE	; 254
    1644:	3d 93       	st	X+, r19
    1646:	30 e3       	ldi	r19, 0x30	; 48
    1648:	2a 95       	dec	r18
    164a:	e1 f7       	brne	.-8      	; 0x1644 <__ftoa_engine+0x1e>
    164c:	08 95       	ret
    164e:	9f 3f       	cpi	r25, 0xFF	; 255
    1650:	30 f0       	brcs	.+12     	; 0x165e <__ftoa_engine+0x38>
    1652:	80 38       	cpi	r24, 0x80	; 128
    1654:	71 05       	cpc	r23, r1
    1656:	61 05       	cpc	r22, r1
    1658:	09 f0       	breq	.+2      	; 0x165c <__ftoa_engine+0x36>
    165a:	3c 5f       	subi	r19, 0xFC	; 252
    165c:	3c 5f       	subi	r19, 0xFC	; 252
    165e:	3d 93       	st	X+, r19
    1660:	91 30       	cpi	r25, 0x01	; 1
    1662:	08 f0       	brcs	.+2      	; 0x1666 <__ftoa_engine+0x40>
    1664:	80 68       	ori	r24, 0x80	; 128
    1666:	91 1d       	adc	r25, r1
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	1f 93       	push	r17
    166e:	0f 93       	push	r16
    1670:	ff 92       	push	r15
    1672:	ef 92       	push	r14
    1674:	19 2f       	mov	r17, r25
    1676:	98 7f       	andi	r25, 0xF8	; 248
    1678:	96 95       	lsr	r25
    167a:	e9 2f       	mov	r30, r25
    167c:	96 95       	lsr	r25
    167e:	96 95       	lsr	r25
    1680:	e9 0f       	add	r30, r25
    1682:	ff 27       	eor	r31, r31
    1684:	e3 5b       	subi	r30, 0xB3	; 179
    1686:	fe 4f       	sbci	r31, 0xFE	; 254
    1688:	99 27       	eor	r25, r25
    168a:	33 27       	eor	r19, r19
    168c:	ee 24       	eor	r14, r14
    168e:	ff 24       	eor	r15, r15
    1690:	a7 01       	movw	r20, r14
    1692:	e7 01       	movw	r28, r14
    1694:	05 90       	lpm	r0, Z+
    1696:	08 94       	sec
    1698:	07 94       	ror	r0
    169a:	28 f4       	brcc	.+10     	; 0x16a6 <__ftoa_engine+0x80>
    169c:	36 0f       	add	r19, r22
    169e:	e7 1e       	adc	r14, r23
    16a0:	f8 1e       	adc	r15, r24
    16a2:	49 1f       	adc	r20, r25
    16a4:	51 1d       	adc	r21, r1
    16a6:	66 0f       	add	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	88 1f       	adc	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	06 94       	lsr	r0
    16b0:	a1 f7       	brne	.-24     	; 0x169a <__ftoa_engine+0x74>
    16b2:	05 90       	lpm	r0, Z+
    16b4:	07 94       	ror	r0
    16b6:	28 f4       	brcc	.+10     	; 0x16c2 <__ftoa_engine+0x9c>
    16b8:	e7 0e       	add	r14, r23
    16ba:	f8 1e       	adc	r15, r24
    16bc:	49 1f       	adc	r20, r25
    16be:	56 1f       	adc	r21, r22
    16c0:	c1 1d       	adc	r28, r1
    16c2:	77 0f       	add	r23, r23
    16c4:	88 1f       	adc	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	66 1f       	adc	r22, r22
    16ca:	06 94       	lsr	r0
    16cc:	a1 f7       	brne	.-24     	; 0x16b6 <__ftoa_engine+0x90>
    16ce:	05 90       	lpm	r0, Z+
    16d0:	07 94       	ror	r0
    16d2:	28 f4       	brcc	.+10     	; 0x16de <__ftoa_engine+0xb8>
    16d4:	f8 0e       	add	r15, r24
    16d6:	49 1f       	adc	r20, r25
    16d8:	56 1f       	adc	r21, r22
    16da:	c7 1f       	adc	r28, r23
    16dc:	d1 1d       	adc	r29, r1
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	66 1f       	adc	r22, r22
    16e4:	77 1f       	adc	r23, r23
    16e6:	06 94       	lsr	r0
    16e8:	a1 f7       	brne	.-24     	; 0x16d2 <__ftoa_engine+0xac>
    16ea:	05 90       	lpm	r0, Z+
    16ec:	07 94       	ror	r0
    16ee:	20 f4       	brcc	.+8      	; 0x16f8 <__ftoa_engine+0xd2>
    16f0:	49 0f       	add	r20, r25
    16f2:	56 1f       	adc	r21, r22
    16f4:	c7 1f       	adc	r28, r23
    16f6:	d8 1f       	adc	r29, r24
    16f8:	99 0f       	add	r25, r25
    16fa:	66 1f       	adc	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	88 1f       	adc	r24, r24
    1700:	06 94       	lsr	r0
    1702:	a9 f7       	brne	.-22     	; 0x16ee <__ftoa_engine+0xc8>
    1704:	84 91       	lpm	r24, Z
    1706:	10 95       	com	r17
    1708:	17 70       	andi	r17, 0x07	; 7
    170a:	41 f0       	breq	.+16     	; 0x171c <__ftoa_engine+0xf6>
    170c:	d6 95       	lsr	r29
    170e:	c7 95       	ror	r28
    1710:	57 95       	ror	r21
    1712:	47 95       	ror	r20
    1714:	f7 94       	ror	r15
    1716:	e7 94       	ror	r14
    1718:	1a 95       	dec	r17
    171a:	c1 f7       	brne	.-16     	; 0x170c <__ftoa_engine+0xe6>
    171c:	e3 ef       	ldi	r30, 0xF3	; 243
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	68 94       	set
    1722:	15 90       	lpm	r1, Z+
    1724:	15 91       	lpm	r17, Z+
    1726:	35 91       	lpm	r19, Z+
    1728:	65 91       	lpm	r22, Z+
    172a:	95 91       	lpm	r25, Z+
    172c:	05 90       	lpm	r0, Z+
    172e:	7f e2       	ldi	r23, 0x2F	; 47
    1730:	73 95       	inc	r23
    1732:	e1 18       	sub	r14, r1
    1734:	f1 0a       	sbc	r15, r17
    1736:	43 0b       	sbc	r20, r19
    1738:	56 0b       	sbc	r21, r22
    173a:	c9 0b       	sbc	r28, r25
    173c:	d0 09       	sbc	r29, r0
    173e:	c0 f7       	brcc	.-16     	; 0x1730 <__ftoa_engine+0x10a>
    1740:	e1 0c       	add	r14, r1
    1742:	f1 1e       	adc	r15, r17
    1744:	43 1f       	adc	r20, r19
    1746:	56 1f       	adc	r21, r22
    1748:	c9 1f       	adc	r28, r25
    174a:	d0 1d       	adc	r29, r0
    174c:	7e f4       	brtc	.+30     	; 0x176c <__ftoa_engine+0x146>
    174e:	70 33       	cpi	r23, 0x30	; 48
    1750:	11 f4       	brne	.+4      	; 0x1756 <__ftoa_engine+0x130>
    1752:	8a 95       	dec	r24
    1754:	e6 cf       	rjmp	.-52     	; 0x1722 <__ftoa_engine+0xfc>
    1756:	e8 94       	clt
    1758:	01 50       	subi	r16, 0x01	; 1
    175a:	30 f0       	brcs	.+12     	; 0x1768 <__ftoa_engine+0x142>
    175c:	08 0f       	add	r16, r24
    175e:	0a f4       	brpl	.+2      	; 0x1762 <__ftoa_engine+0x13c>
    1760:	00 27       	eor	r16, r16
    1762:	02 17       	cp	r16, r18
    1764:	08 f4       	brcc	.+2      	; 0x1768 <__ftoa_engine+0x142>
    1766:	20 2f       	mov	r18, r16
    1768:	23 95       	inc	r18
    176a:	02 2f       	mov	r16, r18
    176c:	7a 33       	cpi	r23, 0x3A	; 58
    176e:	28 f0       	brcs	.+10     	; 0x177a <__ftoa_engine+0x154>
    1770:	79 e3       	ldi	r23, 0x39	; 57
    1772:	7d 93       	st	X+, r23
    1774:	2a 95       	dec	r18
    1776:	e9 f7       	brne	.-6      	; 0x1772 <__ftoa_engine+0x14c>
    1778:	10 c0       	rjmp	.+32     	; 0x179a <__ftoa_engine+0x174>
    177a:	7d 93       	st	X+, r23
    177c:	2a 95       	dec	r18
    177e:	89 f6       	brne	.-94     	; 0x1722 <__ftoa_engine+0xfc>
    1780:	06 94       	lsr	r0
    1782:	97 95       	ror	r25
    1784:	67 95       	ror	r22
    1786:	37 95       	ror	r19
    1788:	17 95       	ror	r17
    178a:	17 94       	ror	r1
    178c:	e1 18       	sub	r14, r1
    178e:	f1 0a       	sbc	r15, r17
    1790:	43 0b       	sbc	r20, r19
    1792:	56 0b       	sbc	r21, r22
    1794:	c9 0b       	sbc	r28, r25
    1796:	d0 09       	sbc	r29, r0
    1798:	98 f0       	brcs	.+38     	; 0x17c0 <__ftoa_engine+0x19a>
    179a:	23 95       	inc	r18
    179c:	7e 91       	ld	r23, -X
    179e:	73 95       	inc	r23
    17a0:	7a 33       	cpi	r23, 0x3A	; 58
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <__ftoa_engine+0x180>
    17a4:	70 e3       	ldi	r23, 0x30	; 48
    17a6:	7c 93       	st	X, r23
    17a8:	20 13       	cpse	r18, r16
    17aa:	b8 f7       	brcc	.-18     	; 0x179a <__ftoa_engine+0x174>
    17ac:	7e 91       	ld	r23, -X
    17ae:	70 61       	ori	r23, 0x10	; 16
    17b0:	7d 93       	st	X+, r23
    17b2:	30 f0       	brcs	.+12     	; 0x17c0 <__ftoa_engine+0x19a>
    17b4:	83 95       	inc	r24
    17b6:	71 e3       	ldi	r23, 0x31	; 49
    17b8:	7d 93       	st	X+, r23
    17ba:	70 e3       	ldi	r23, 0x30	; 48
    17bc:	2a 95       	dec	r18
    17be:	e1 f7       	brne	.-8      	; 0x17b8 <__ftoa_engine+0x192>
    17c0:	11 24       	eor	r1, r1
    17c2:	ef 90       	pop	r14
    17c4:	ff 90       	pop	r15
    17c6:	0f 91       	pop	r16
    17c8:	1f 91       	pop	r17
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	99 27       	eor	r25, r25
    17d0:	87 fd       	sbrc	r24, 7
    17d2:	90 95       	com	r25
    17d4:	08 95       	ret

000017d6 <strnlen_P>:
    17d6:	fc 01       	movw	r30, r24
    17d8:	05 90       	lpm	r0, Z+
    17da:	61 50       	subi	r22, 0x01	; 1
    17dc:	70 40       	sbci	r23, 0x00	; 0
    17de:	01 10       	cpse	r0, r1
    17e0:	d8 f7       	brcc	.-10     	; 0x17d8 <strnlen_P+0x2>
    17e2:	80 95       	com	r24
    17e4:	90 95       	com	r25
    17e6:	8e 0f       	add	r24, r30
    17e8:	9f 1f       	adc	r25, r31
    17ea:	08 95       	ret

000017ec <strcpy>:
    17ec:	fb 01       	movw	r30, r22
    17ee:	dc 01       	movw	r26, r24
    17f0:	01 90       	ld	r0, Z+
    17f2:	0d 92       	st	X+, r0
    17f4:	00 20       	and	r0, r0
    17f6:	e1 f7       	brne	.-8      	; 0x17f0 <strcpy+0x4>
    17f8:	08 95       	ret

000017fa <strnlen>:
    17fa:	fc 01       	movw	r30, r24
    17fc:	61 50       	subi	r22, 0x01	; 1
    17fe:	70 40       	sbci	r23, 0x00	; 0
    1800:	01 90       	ld	r0, Z+
    1802:	01 10       	cpse	r0, r1
    1804:	d8 f7       	brcc	.-10     	; 0x17fc <strnlen+0x2>
    1806:	80 95       	com	r24
    1808:	90 95       	com	r25
    180a:	8e 0f       	add	r24, r30
    180c:	9f 1f       	adc	r25, r31
    180e:	08 95       	ret

00001810 <fputc>:
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	8c 01       	movw	r16, r24
    181a:	eb 01       	movw	r28, r22
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	81 fd       	sbrc	r24, 1
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <fputc+0x18>
    1822:	0f ef       	ldi	r16, 0xFF	; 255
    1824:	1f ef       	ldi	r17, 0xFF	; 255
    1826:	1a c0       	rjmp	.+52     	; 0x185c <fputc+0x4c>
    1828:	82 ff       	sbrs	r24, 2
    182a:	0d c0       	rjmp	.+26     	; 0x1846 <fputc+0x36>
    182c:	2e 81       	ldd	r18, Y+6	; 0x06
    182e:	3f 81       	ldd	r19, Y+7	; 0x07
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	28 17       	cp	r18, r24
    1836:	39 07       	cpc	r19, r25
    1838:	64 f4       	brge	.+24     	; 0x1852 <fputc+0x42>
    183a:	e8 81       	ld	r30, Y
    183c:	f9 81       	ldd	r31, Y+1	; 0x01
    183e:	01 93       	st	Z+, r16
    1840:	f9 83       	std	Y+1, r31	; 0x01
    1842:	e8 83       	st	Y, r30
    1844:	06 c0       	rjmp	.+12     	; 0x1852 <fputc+0x42>
    1846:	e8 85       	ldd	r30, Y+8	; 0x08
    1848:	f9 85       	ldd	r31, Y+9	; 0x09
    184a:	80 2f       	mov	r24, r16
    184c:	09 95       	icall
    184e:	89 2b       	or	r24, r25
    1850:	41 f7       	brne	.-48     	; 0x1822 <fputc+0x12>
    1852:	8e 81       	ldd	r24, Y+6	; 0x06
    1854:	9f 81       	ldd	r25, Y+7	; 0x07
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	9f 83       	std	Y+7, r25	; 0x07
    185a:	8e 83       	std	Y+6, r24	; 0x06
    185c:	c8 01       	movw	r24, r16
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	08 95       	ret

00001868 <fputs>:
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	0f 93       	push	r16
    186e:	1f 93       	push	r17
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	7c 01       	movw	r14, r24
    1876:	8b 01       	movw	r16, r22
    1878:	db 01       	movw	r26, r22
    187a:	13 96       	adiw	r26, 0x03	; 3
    187c:	8c 91       	ld	r24, X
    187e:	81 ff       	sbrs	r24, 1
    1880:	14 c0       	rjmp	.+40     	; 0x18aa <fputs+0x42>
    1882:	c0 e0       	ldi	r28, 0x00	; 0
    1884:	d0 e0       	ldi	r29, 0x00	; 0
    1886:	0b c0       	rjmp	.+22     	; 0x189e <fputs+0x36>
    1888:	d8 01       	movw	r26, r16
    188a:	18 96       	adiw	r26, 0x08	; 8
    188c:	ed 91       	ld	r30, X+
    188e:	fc 91       	ld	r31, X
    1890:	19 97       	sbiw	r26, 0x09	; 9
    1892:	b8 01       	movw	r22, r16
    1894:	09 95       	icall
    1896:	89 2b       	or	r24, r25
    1898:	11 f0       	breq	.+4      	; 0x189e <fputs+0x36>
    189a:	cf ef       	ldi	r28, 0xFF	; 255
    189c:	df ef       	ldi	r29, 0xFF	; 255
    189e:	f7 01       	movw	r30, r14
    18a0:	81 91       	ld	r24, Z+
    18a2:	7f 01       	movw	r14, r30
    18a4:	81 11       	cpse	r24, r1
    18a6:	f0 cf       	rjmp	.-32     	; 0x1888 <fputs+0x20>
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <fputs+0x46>
    18aa:	cf ef       	ldi	r28, 0xFF	; 255
    18ac:	df ef       	ldi	r29, 0xFF	; 255
    18ae:	ce 01       	movw	r24, r28
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	08 95       	ret

000018be <sprintf>:
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	2e 97       	sbiw	r28, 0x0e	; 14
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	0d 89       	ldd	r16, Y+21	; 0x15
    18d8:	1e 89       	ldd	r17, Y+22	; 0x16
    18da:	86 e0       	ldi	r24, 0x06	; 6
    18dc:	8c 83       	std	Y+4, r24	; 0x04
    18de:	1a 83       	std	Y+2, r17	; 0x02
    18e0:	09 83       	std	Y+1, r16	; 0x01
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	9f e7       	ldi	r25, 0x7F	; 127
    18e6:	9e 83       	std	Y+6, r25	; 0x06
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	ce 01       	movw	r24, r28
    18ec:	49 96       	adiw	r24, 0x19	; 25
    18ee:	ac 01       	movw	r20, r24
    18f0:	6f 89       	ldd	r22, Y+23	; 0x17
    18f2:	78 8d       	ldd	r23, Y+24	; 0x18
    18f4:	ce 01       	movw	r24, r28
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	0e 94 40 07 	call	0xe80	; 0xe80 <vfprintf>
    18fc:	ef 81       	ldd	r30, Y+7	; 0x07
    18fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1900:	e0 0f       	add	r30, r16
    1902:	f1 1f       	adc	r31, r17
    1904:	10 82       	st	Z, r1
    1906:	2e 96       	adiw	r28, 0x0e	; 14
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	08 95       	ret

0000191c <__ultoa_invert>:
    191c:	fa 01       	movw	r30, r20
    191e:	aa 27       	eor	r26, r26
    1920:	28 30       	cpi	r18, 0x08	; 8
    1922:	51 f1       	breq	.+84     	; 0x1978 <__ultoa_invert+0x5c>
    1924:	20 31       	cpi	r18, 0x10	; 16
    1926:	81 f1       	breq	.+96     	; 0x1988 <__ultoa_invert+0x6c>
    1928:	e8 94       	clt
    192a:	6f 93       	push	r22
    192c:	6e 7f       	andi	r22, 0xFE	; 254
    192e:	6e 5f       	subi	r22, 0xFE	; 254
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	8f 4f       	sbci	r24, 0xFF	; 255
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	af 4f       	sbci	r26, 0xFF	; 255
    1938:	b1 e0       	ldi	r27, 0x01	; 1
    193a:	3e d0       	rcall	.+124    	; 0x19b8 <__ultoa_invert+0x9c>
    193c:	b4 e0       	ldi	r27, 0x04	; 4
    193e:	3c d0       	rcall	.+120    	; 0x19b8 <__ultoa_invert+0x9c>
    1940:	67 0f       	add	r22, r23
    1942:	78 1f       	adc	r23, r24
    1944:	89 1f       	adc	r24, r25
    1946:	9a 1f       	adc	r25, r26
    1948:	a1 1d       	adc	r26, r1
    194a:	68 0f       	add	r22, r24
    194c:	79 1f       	adc	r23, r25
    194e:	8a 1f       	adc	r24, r26
    1950:	91 1d       	adc	r25, r1
    1952:	a1 1d       	adc	r26, r1
    1954:	6a 0f       	add	r22, r26
    1956:	71 1d       	adc	r23, r1
    1958:	81 1d       	adc	r24, r1
    195a:	91 1d       	adc	r25, r1
    195c:	a1 1d       	adc	r26, r1
    195e:	20 d0       	rcall	.+64     	; 0x19a0 <__ultoa_invert+0x84>
    1960:	09 f4       	brne	.+2      	; 0x1964 <__ultoa_invert+0x48>
    1962:	68 94       	set
    1964:	3f 91       	pop	r19
    1966:	2a e0       	ldi	r18, 0x0A	; 10
    1968:	26 9f       	mul	r18, r22
    196a:	11 24       	eor	r1, r1
    196c:	30 19       	sub	r19, r0
    196e:	30 5d       	subi	r19, 0xD0	; 208
    1970:	31 93       	st	Z+, r19
    1972:	de f6       	brtc	.-74     	; 0x192a <__ultoa_invert+0xe>
    1974:	cf 01       	movw	r24, r30
    1976:	08 95       	ret
    1978:	46 2f       	mov	r20, r22
    197a:	47 70       	andi	r20, 0x07	; 7
    197c:	40 5d       	subi	r20, 0xD0	; 208
    197e:	41 93       	st	Z+, r20
    1980:	b3 e0       	ldi	r27, 0x03	; 3
    1982:	0f d0       	rcall	.+30     	; 0x19a2 <__ultoa_invert+0x86>
    1984:	c9 f7       	brne	.-14     	; 0x1978 <__ultoa_invert+0x5c>
    1986:	f6 cf       	rjmp	.-20     	; 0x1974 <__ultoa_invert+0x58>
    1988:	46 2f       	mov	r20, r22
    198a:	4f 70       	andi	r20, 0x0F	; 15
    198c:	40 5d       	subi	r20, 0xD0	; 208
    198e:	4a 33       	cpi	r20, 0x3A	; 58
    1990:	18 f0       	brcs	.+6      	; 0x1998 <__ultoa_invert+0x7c>
    1992:	49 5d       	subi	r20, 0xD9	; 217
    1994:	31 fd       	sbrc	r19, 1
    1996:	40 52       	subi	r20, 0x20	; 32
    1998:	41 93       	st	Z+, r20
    199a:	02 d0       	rcall	.+4      	; 0x19a0 <__ultoa_invert+0x84>
    199c:	a9 f7       	brne	.-22     	; 0x1988 <__ultoa_invert+0x6c>
    199e:	ea cf       	rjmp	.-44     	; 0x1974 <__ultoa_invert+0x58>
    19a0:	b4 e0       	ldi	r27, 0x04	; 4
    19a2:	a6 95       	lsr	r26
    19a4:	97 95       	ror	r25
    19a6:	87 95       	ror	r24
    19a8:	77 95       	ror	r23
    19aa:	67 95       	ror	r22
    19ac:	ba 95       	dec	r27
    19ae:	c9 f7       	brne	.-14     	; 0x19a2 <__ultoa_invert+0x86>
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	61 05       	cpc	r22, r1
    19b4:	71 05       	cpc	r23, r1
    19b6:	08 95       	ret
    19b8:	9b 01       	movw	r18, r22
    19ba:	ac 01       	movw	r20, r24
    19bc:	0a 2e       	mov	r0, r26
    19be:	06 94       	lsr	r0
    19c0:	57 95       	ror	r21
    19c2:	47 95       	ror	r20
    19c4:	37 95       	ror	r19
    19c6:	27 95       	ror	r18
    19c8:	ba 95       	dec	r27
    19ca:	c9 f7       	brne	.-14     	; 0x19be <__ultoa_invert+0xa2>
    19cc:	62 0f       	add	r22, r18
    19ce:	73 1f       	adc	r23, r19
    19d0:	84 1f       	adc	r24, r20
    19d2:	95 1f       	adc	r25, r21
    19d4:	a0 1d       	adc	r26, r0
    19d6:	08 95       	ret

000019d8 <_exit>:
    19d8:	f8 94       	cli

000019da <__stop_program>:
    19da:	ff cf       	rjmp	.-2      	; 0x19da <__stop_program>
