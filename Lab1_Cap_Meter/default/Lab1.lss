
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00001366  000013fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001366  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080010a  0080010a  00001404  2**0
                  ALLOC
  3 .stab         000016bc  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000277  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002d37  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00002d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ab5  00000000  00000000  00002e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007fd  00000000  00000000  000048c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b90  00000000  00000000  000050c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000444  00000000  00000000  00005c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005b3  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000142e  00000000  00000000  00006647  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00007a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_12>
      34:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_13>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_16>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

0000008c <LCD_number>:
      8c:	43 61 70 61 63 69 74 61 6e 63 65 3d 00 00           Capacitance=..

0000009a <LCD_initialize>:
      9a:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000ab <LcdCustomChar>:
      ab:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      bb:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      cb:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      db:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000eb <__c.2006>:
      eb:	6e 61 6e 00                                         nan.

000000ef <__c.2004>:
      ef:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ff:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10f:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1af:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1bf:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1cf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1df:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e4       	ldi	r29, 0x40	; 64
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	e6 e6       	ldi	r30, 0x66	; 102
     202:	f3 e1       	ldi	r31, 0x13	; 19
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	aa 30       	cpi	r26, 0x0A	; 10
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	aa e0       	ldi	r26, 0x0A	; 10
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a3 33       	cpi	r26, 0x33	; 51
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <main>
     228:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <init_cap_measurement_analog_timer>:
//configures Analog Comparator and Timer1
//set it to full speed 
//clear TCNT1
void init_cap_measurement_analog_timer(){
	//turn off interrupts
	cli();
     230:	f8 94       	cli
	TCCR1B = 0;
     232:	e1 e8       	ldi	r30, 0x81	; 129
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	10 82       	st	Z, r1
	//full speed [ 16 MHz], capture on positive edge
	TCCR1B |= INPUT_CAPTURE_EDGE_SELECT + T0B_CS00;
     238:	80 81       	ld	r24, Z
     23a:	81 64       	ori	r24, 0x41	; 65
     23c:	80 83       	st	Z, r24
	//turn on timer 1 interrupt-on-capture
	TIMSK1 = 0;
     23e:	ef e6       	ldi	r30, 0x6F	; 111
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	10 82       	st	Z, r1
	TIMSK1 |= INTERRUPT_ON_CAPTURE;
     244:	80 81       	ld	r24, Z
     246:	80 62       	ori	r24, 0x20	; 32
     248:	80 83       	st	Z, r24

	//set analog comp to connect to timer capture input
	//with positive input reference voltage
	ACSR = 0;
     24a:	10 be       	out	0x30, r1	; 48
	ACSR |= ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     24c:	80 b7       	in	r24, 0x30	; 48
     24e:	84 60       	ori	r24, 0x04	; 4
     250:	80 bf       	out	0x30, r24	; 48
	ACSR &= ~ANALOG_COMPARATOR_BANDGAP_SELECT;
     252:	80 b7       	in	r24, 0x30	; 48
     254:	8f 7b       	andi	r24, 0xBF	; 191
     256:	80 bf       	out	0x30, r24	; 48
	//set all ports to input
	DDRB = 0;
     258:	14 b8       	out	0x04, r1	; 4
	DDRB &= ~(COMPARATOR_INPUT + COMPARATOR_REFERENCE);
     25a:	84 b1       	in	r24, 0x04	; 4
     25c:	83 7f       	andi	r24, 0xF3	; 243
     25e:	84 b9       	out	0x04, r24	; 4
	//turn on interrupts
	sei();
     260:	78 94       	sei
     262:	08 95       	ret

00000264 <init_cap_discharge_wait_timer>:

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     264:	22 e0       	ldi	r18, 0x02	; 2
     266:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     26a:	8a e5       	ldi	r24, 0x5A	; 90
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 89 00 	sts	0x0089, r25
     272:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     276:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     27a:	e0 e8       	ldi	r30, 0x80	; 128
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	10 82       	st	Z, r1
	TCCR1A |= CLEAR_ON_MATCH;
     280:	80 81       	ld	r24, Z
     282:	82 60       	ori	r24, 0x02	; 2
     284:	80 83       	st	Z, r24
     286:	08 95       	ret

00000288 <init_cap_measurements>:
	Convert PortB2 to an input and start a timer. The capacitor will start to charge toward Vcc.
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
	DDRB = 0;
     288:	14 b8       	out	0x04, r1	; 4
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     28a:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     28c:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     28e:	2a 98       	cbi	0x05, 2	; 5
	//use Timer1.A to perform this delay and signal when we can continue measurements
	init_cap_discharge_wait_timer();
     290:	0c 94 32 01 	jmp	0x264	; 0x264 <init_cap_discharge_wait_timer>

00000294 <__vector_16>:
}

//1 ms timebase register
//Blinks LED 1/second
//refreshes LCD 1/200 ms
ISR (TIMER0_COMPA_vect){
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
	if( led_time_count > 0)
     2a2:	80 91 31 01 	lds	r24, 0x0131
     2a6:	90 91 32 01 	lds	r25, 0x0132
     2aa:	89 2b       	or	r24, r25
     2ac:	49 f0       	breq	.+18     	; 0x2c0 <__vector_16+0x2c>
		--led_time_count;
     2ae:	80 91 31 01 	lds	r24, 0x0131
     2b2:	90 91 32 01 	lds	r25, 0x0132
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	90 93 32 01 	sts	0x0132, r25
     2bc:	80 93 31 01 	sts	0x0131, r24
	if( lcd_time_count > 0)
     2c0:	80 91 10 01 	lds	r24, 0x0110
     2c4:	90 91 11 01 	lds	r25, 0x0111
     2c8:	89 2b       	or	r24, r25
     2ca:	49 f0       	breq	.+18     	; 0x2de <__vector_16+0x4a>
		--lcd_time_count;
     2cc:	80 91 10 01 	lds	r24, 0x0110
     2d0:	90 91 11 01 	lds	r25, 0x0111
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	90 93 11 01 	sts	0x0111, r25
     2da:	80 93 10 01 	sts	0x0110, r24

}
     2de:	9f 91       	pop	r25
     2e0:	8f 91       	pop	r24
     2e2:	0f 90       	pop	r0
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	0f 90       	pop	r0
     2e8:	1f 90       	pop	r1
     2ea:	18 95       	reti

000002ec <__vector_13>:
//Once this triggers even once, we know that we have waited long enough for a cap discharge
ISR (TIMER1_COMPA_vect){
     2ec:	1f 92       	push	r1
     2ee:	0f 92       	push	r0
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	0f 92       	push	r0
     2f4:	11 24       	eor	r1, r1
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
	cap_discharged = TRUE;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 0d 01 	sts	0x010D, r25
     302:	80 93 0c 01 	sts	0x010C, r24
}
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	0f 90       	pop	r0
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	0f 90       	pop	r0
     310:	1f 90       	pop	r1
     312:	18 95       	reti

00000314 <__vector_12>:
			  t
	C = ------------
		R2 * ln(0.5)

*/
ISR (TIMER1_CAPT_vect){
     314:	1f 92       	push	r1
     316:	0f 92       	push	r0
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	0f 92       	push	r0
     31c:	11 24       	eor	r1, r1
     31e:	8f 93       	push	r24
     320:	9f 93       	push	r25
     322:	af 93       	push	r26
     324:	bf 93       	push	r27
	capacitance = 5.3;
     326:	8a e9       	ldi	r24, 0x9A	; 154
     328:	99 e9       	ldi	r25, 0x99	; 153
     32a:	a9 ea       	ldi	r26, 0xA9	; 169
     32c:	b0 e4       	ldi	r27, 0x40	; 64
     32e:	80 93 2a 01 	sts	0x012A, r24
     332:	90 93 2b 01 	sts	0x012B, r25
     336:	a0 93 2c 01 	sts	0x012C, r26
     33a:	b0 93 2d 01 	sts	0x012D, r27
	// read timer1 input capture register
    charge_cycles = ICR1;
     33e:	80 91 86 00 	lds	r24, 0x0086
     342:	90 91 87 00 	lds	r25, 0x0087
     346:	90 93 29 01 	sts	0x0129, r25
     34a:	80 93 28 01 	sts	0x0128, r24
    // set the charged flag to true
    cap_charged = TRUE;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	90 93 0b 01 	sts	0x010B, r25
     356:	80 93 0a 01 	sts	0x010A, r24
}
     35a:	bf 91       	pop	r27
     35c:	af 91       	pop	r26
     35e:	9f 91       	pop	r25
     360:	8f 91       	pop	r24
     362:	0f 90       	pop	r0
     364:	0f be       	out	0x3f, r0	; 63
     366:	0f 90       	pop	r0
     368:	1f 90       	pop	r1
     36a:	18 95       	reti

0000036c <toggle_led>:

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     36c:	8b b1       	in	r24, 0x0b	; 11
     36e:	94 e0       	ldi	r25, 0x04	; 4
     370:	89 27       	eor	r24, r25
     372:	8b b9       	out	0x0b, r24	; 11
     374:	08 95       	ret

00000376 <init_timer0A>:
//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 249;
     37c:	89 ef       	ldi	r24, 0xF9	; 249
     37e:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     380:	83 e0       	ldi	r24, 0x03	; 3
     382:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     384:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     386:	84 b5       	in	r24, 0x24	; 36
     388:	82 60       	ori	r24, 0x02	; 2
     38a:	84 bd       	out	0x24, r24	; 36
     38c:	08 95       	ret

0000038e <init_lcd>:
}

// LCD setup
void init_lcd(void){
	LCDinit();	//initialize the display
     38e:	0e 94 0f 03 	call	0x61e	; 0x61e <LCDinit>
	LCDcursorOFF();
     392:	0e 94 87 03 	call	0x70e	; 0x70e <LCDcursorOFF>
	LCDclr();				//clear the display
     396:	0e 94 9f 02 	call	0x53e	; 0x53e <LCDclr>
	LCDGotoXY(0,0);
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	0e 94 c4 02 	call	0x588	; 0x588 <LCDGotoXY>
	CopyStringtoLCD(LCD_number, 0, 0);
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	8c e8       	ldi	r24, 0x8C	; 140
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <CopyStringtoLCD>

000003ae <refresh_lcd>:
}


// writes contents of lcd_buffer to LCD every 200 mSec
// 
void refresh_lcd(void){
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
  // increment time counter and format string 
  //if (capacitance >= .1 && capacitance <= 100) {
  sprintf(lcd_buffer,"%-.5f",capacitance);	 
     3b2:	80 91 2a 01 	lds	r24, 0x012A
     3b6:	90 91 2b 01 	lds	r25, 0x012B
     3ba:	a0 91 2c 01 	lds	r26, 0x012C
     3be:	b0 91 2d 01 	lds	r27, 0x012D
     3c2:	bf 93       	push	r27
     3c4:	af 93       	push	r26
     3c6:	9f 93       	push	r25
     3c8:	8f 93       	push	r24
     3ca:	84 e0       	ldi	r24, 0x04	; 4
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	9f 93       	push	r25
     3d0:	8f 93       	push	r24
     3d2:	c2 e1       	ldi	r28, 0x12	; 18
     3d4:	d1 e0       	ldi	r29, 0x01	; 1
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	0e 94 24 09 	call	0x1248	; 0x1248 <sprintf>
  //}
  //else {
  //	sprintf(lcd_buffer,"N/A");
  //}               
  LCDGotoXY(0, 1);
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	0e 94 c4 02 	call	0x588	; 0x588 <LCDGotoXY>
  	// display the capacitance 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     3e6:	fe 01       	movw	r30, r28
     3e8:	01 90       	ld	r0, Z+
     3ea:	00 20       	and	r0, r0
     3ec:	e9 f7       	brne	.-6      	; 0x3e8 <refresh_lcd+0x3a>
     3ee:	bf 01       	movw	r22, r30
     3f0:	61 50       	subi	r22, 0x01	; 1
     3f2:	71 09       	sbc	r23, r1
     3f4:	6c 1b       	sub	r22, r28
     3f6:	7d 0b       	sbc	r23, r29
     3f8:	ce 01       	movw	r24, r28
     3fa:	0e 94 a5 02 	call	0x54a	; 0x54a <LCDstring>
  else {
  	sprintf(lcd_buffer, "N/A");
  } 
  */         
  // now move a char left and right
  LCDGotoXY(anipos,1);	   //second line
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	80 91 23 01 	lds	r24, 0x0123
     404:	0e 94 c4 02 	call	0x588	; 0x588 <LCDGotoXY>
  LCDsendChar(' '); 
     408:	80 e2       	ldi	r24, 0x20	; 32
     40a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCDsendChar>
      	
  if (anipos>=15) dir=-1;   // check boundaries
     40e:	90 91 23 01 	lds	r25, 0x0123
     412:	2d b7       	in	r18, 0x3d	; 61
     414:	3e b7       	in	r19, 0x3e	; 62
     416:	28 5f       	subi	r18, 0xF8	; 248
     418:	3f 4f       	sbci	r19, 0xFF	; 255
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	3e bf       	out	0x3e, r19	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	2d bf       	out	0x3d, r18	; 61
     424:	9f 30       	cpi	r25, 0x0F	; 15
     426:	10 f0       	brcs	.+4      	; 0x42c <refresh_lcd+0x7e>
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	03 c0       	rjmp	.+6      	; 0x432 <refresh_lcd+0x84>
  if (anipos<=8 ) dir=1;
     42c:	99 30       	cpi	r25, 0x09	; 9
     42e:	18 f4       	brcc	.+6      	; 0x436 <refresh_lcd+0x88>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	80 93 2e 01 	sts	0x012E, r24
  anipos=anipos+dir;
     436:	80 91 2e 01 	lds	r24, 0x012E
     43a:	89 0f       	add	r24, r25
     43c:	80 93 23 01 	sts	0x0123, r24
  LCDGotoXY(anipos,1);	   //second line
     440:	61 e0       	ldi	r22, 0x01	; 1
     442:	0e 94 c4 02 	call	0x588	; 0x588 <LCDGotoXY>
  LCDsendChar('o');
     446:	8f e6       	ldi	r24, 0x6F	; 111
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
      	
  if (anipos>=15) dir=-1;   // check boundaries
  if (anipos<=8 ) dir=1;
  anipos=anipos+dir;
  LCDGotoXY(anipos,1);	   //second line
  LCDsendChar('o');
     44c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <LCDsendChar>

00000450 <initialize>:
}

void initialize(void){
	anipos = 8;
     450:	88 e0       	ldi	r24, 0x08	; 8
     452:	80 93 23 01 	sts	0x0123, r24
	led_time_count = 0;
     456:	10 92 32 01 	sts	0x0132, r1
     45a:	10 92 31 01 	sts	0x0131, r1
	init_timer0A();
     45e:	0e 94 bb 01 	call	0x376	; 0x376 <init_timer0A>

	DDRB = 0;
     462:	14 b8       	out	0x04, r1	; 4
	DDRD = 0;
     464:	1a b8       	out	0x0a, r1	; 10

	//Enable LED Port
	DDRD = ONBOARD_LED; //turn the LED to an output
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; //turn off LED 
     46a:	8f ef       	ldi	r24, 0xFF	; 255
     46c:	8b b9       	out	0x0b, r24	; 11

	capacitance = 0;
     46e:	10 92 2a 01 	sts	0x012A, r1
     472:	10 92 2b 01 	sts	0x012B, r1
     476:	10 92 2c 01 	sts	0x012C, r1
     47a:	10 92 2d 01 	sts	0x012D, r1
	cap_discharged = FALSE;
     47e:	10 92 0d 01 	sts	0x010D, r1
     482:	10 92 0c 01 	sts	0x010C, r1
	begin_cap_measurement = FALSE;
     486:	10 92 0f 01 	sts	0x010F, r1
     48a:	10 92 0e 01 	sts	0x010E, r1
	cap_charged = FALSE;
     48e:	10 92 0b 01 	sts	0x010B, r1
     492:	10 92 0a 01 	sts	0x010A, r1

	init_lcd();
     496:	0e 94 c7 01 	call	0x38e	; 0x38e <init_lcd>
	LCDclr();
     49a:	0e 94 9f 02 	call	0x53e	; 0x53e <LCDclr>


	sei();
     49e:	78 94       	sei
     4a0:	08 95       	ret

000004a2 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     4a2:	98 2f       	mov	r25, r24
     4a4:	90 7f       	andi	r25, 0xF0	; 240
     4a6:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_RS;
     4a8:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     4aa:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ac:	ef e3       	ldi	r30, 0x3F	; 63
     4ae:	ff e1       	ldi	r31, 0x1F	; 31
     4b0:	31 97       	sbiw	r30, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <LCDsendChar+0xe>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <LCDsendChar+0x14>
     4b6:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     4b8:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     4ba:	40 98       	cbi	0x08, 0	; 8
     4bc:	ef e3       	ldi	r30, 0x3F	; 63
     4be:	ff e1       	ldi	r31, 0x1F	; 31
     4c0:	31 97       	sbiw	r30, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <LCDsendChar+0x1e>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <LCDsendChar+0x24>
     4c6:	00 00       	nop
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     4c8:	f0 e1       	ldi	r31, 0x10	; 16
     4ca:	8f 9f       	mul	r24, r31
     4cc:	c0 01       	movw	r24, r0
     4ce:	11 24       	eor	r1, r1
     4d0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     4d2:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     4d4:	42 9a       	sbi	0x08, 2	; 8
     4d6:	8f e3       	ldi	r24, 0x3F	; 63
     4d8:	9f e1       	ldi	r25, 0x1F	; 31
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <LCDsendChar+0x38>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <LCDsendChar+0x3e>
     4e0:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     4e2:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     4e4:	40 98       	cbi	0x08, 0	; 8
     4e6:	ef e3       	ldi	r30, 0x3F	; 63
     4e8:	ff e1       	ldi	r31, 0x1F	; 31
     4ea:	31 97       	sbiw	r30, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCDsendChar+0x48>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCDsendChar+0x4e>
     4f0:	00 00       	nop
     4f2:	08 95       	ret

000004f4 <LCDsendCommand>:
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     4f4:	98 2f       	mov	r25, r24
     4f6:	90 7f       	andi	r25, 0xF0	; 240
     4f8:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_E;		
     4fa:	42 9a       	sbi	0x08, 2	; 8
     4fc:	ef e3       	ldi	r30, 0x3F	; 63
     4fe:	ff e1       	ldi	r31, 0x1F	; 31
     500:	31 97       	sbiw	r30, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <LCDsendCommand+0xc>
     504:	00 c0       	rjmp	.+0      	; 0x506 <LCDsendCommand+0x12>
     506:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     508:	42 98       	cbi	0x08, 2	; 8
     50a:	ef e3       	ldi	r30, 0x3F	; 63
     50c:	ff e1       	ldi	r31, 0x1F	; 31
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <LCDsendCommand+0x1a>
     512:	00 c0       	rjmp	.+0      	; 0x514 <LCDsendCommand+0x20>
     514:	00 00       	nop
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     516:	f0 e1       	ldi	r31, 0x10	; 16
     518:	8f 9f       	mul	r24, r31
     51a:	c0 01       	movw	r24, r0
     51c:	11 24       	eor	r1, r1
     51e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     520:	42 9a       	sbi	0x08, 2	; 8
     522:	8f e3       	ldi	r24, 0x3F	; 63
     524:	9f e1       	ldi	r25, 0x1F	; 31
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <LCDsendCommand+0x32>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <LCDsendCommand+0x38>
     52c:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     52e:	42 98       	cbi	0x08, 2	; 8
     530:	ef e3       	ldi	r30, 0x3F	; 63
     532:	ff e1       	ldi	r31, 0x1F	; 31
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <LCDsendCommand+0x40>
     538:	00 c0       	rjmp	.+0      	; 0x53a <LCDsendCommand+0x46>
     53a:	00 00       	nop
     53c:	08 95       	ret

0000053e <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <LCDsendCommand>

00000544 <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <LCDsendCommand>

0000054a <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	1f 92       	push	r1
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     55a:	00 97       	sbiw	r24, 0x00	; 0
     55c:	71 f0       	breq	.+28     	; 0x57a <LCDstring+0x30>
     55e:	18 2f       	mov	r17, r24
     560:	7c 01       	movw	r14, r24
     562:	07 c0       	rjmp	.+14     	; 0x572 <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     564:	f7 01       	movw	r30, r14
     566:	81 91       	ld	r24, Z+
     568:	7f 01       	movw	r14, r30
     56a:	69 83       	std	Y+1, r22	; 0x01
     56c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCDsendChar>
     570:	69 81       	ldd	r22, Y+1	; 0x01

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     572:	8e 2d       	mov	r24, r14
     574:	81 1b       	sub	r24, r17
     576:	86 17       	cp	r24, r22
     578:	a8 f3       	brcs	.-22     	; 0x564 <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     57a:	0f 90       	pop	r0
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	08 95       	ret

00000588 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     588:	62 30       	cpi	r22, 0x02	; 2
     58a:	31 f0       	breq	.+12     	; 0x598 <LCDGotoXY+0x10>
     58c:	63 30       	cpi	r22, 0x03	; 3
     58e:	31 f0       	breq	.+12     	; 0x59c <LCDGotoXY+0x14>
     590:	61 30       	cpi	r22, 0x01	; 1
     592:	29 f4       	brne	.+10     	; 0x59e <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     594:	80 5c       	subi	r24, 0xC0	; 192
     596:	03 c0       	rjmp	.+6      	; 0x59e <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     598:	8c 5e       	subi	r24, 0xEC	; 236
     59a:	01 c0       	rjmp	.+2      	; 0x59e <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     59c:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     59e:	80 68       	ori	r24, 0x80	; 128
     5a0:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <LCDsendCommand>

000005a4 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	ec 01       	movw	r28, r24
     5ac:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     5ae:	64 2f       	mov	r22, r20
     5b0:	0e 94 c4 02 	call	0x588	; 0x588 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5b4:	10 e0       	ldi	r17, 0x00	; 0
     5b6:	03 c0       	rjmp	.+6      	; 0x5be <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     5b8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5bc:	1f 5f       	subi	r17, 0xFF	; 255
     5be:	fe 01       	movw	r30, r28
     5c0:	e1 0f       	add	r30, r17
     5c2:	f1 1d       	adc	r31, r1
     5c4:	84 91       	lpm	r24, Z
     5c6:	81 11       	cpse	r24, r1
     5c8:	f7 cf       	rjmp	.-18     	; 0x5b8 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	08 95       	ret

000005d2 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     5e0:	88 e0       	ldi	r24, 0x08	; 8
     5e2:	68 9f       	mul	r22, r24
     5e4:	b0 01       	movw	r22, r0
     5e6:	11 24       	eor	r1, r1
     5e8:	80 e4       	ldi	r24, 0x40	; 64
     5ea:	e8 2e       	mov	r14, r24
     5ec:	e6 2a       	or	r14, r22
	for (i=0; i<8; i++){
     5ee:	c0 e0       	ldi	r28, 0x00	; 0
     5f0:	d0 e0       	ldi	r29, 0x00	; 0
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     5f2:	f8 01       	movw	r30, r16
     5f4:	ec 0f       	add	r30, r28
     5f6:	fd 1f       	adc	r31, r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     5f8:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
     5fa:	8c 2f       	mov	r24, r28
     5fc:	8e 0d       	add	r24, r14
     5fe:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCDsendCommand>
		LCDsendChar(pcc);
     602:	8f 2d       	mov	r24, r15
     604:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     608:	21 96       	adiw	r28, 0x01	; 1
     60a:	c8 30       	cpi	r28, 0x08	; 8
     60c:	d1 05       	cpc	r29, r1
     60e:	89 f7       	brne	.-30     	; 0x5f2 <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	08 95       	ret

0000061e <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	8f e5       	ldi	r24, 0x5F	; 95
     626:	9a ee       	ldi	r25, 0xEA	; 234
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <LCDinit+0xa>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <LCDinit+0x10>
     62e:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     630:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     632:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     634:	87 b1       	in	r24, 0x07	; 7
     636:	80 6f       	ori	r24, 0xF0	; 240
     638:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     63a:	87 b1       	in	r24, 0x07	; 7
     63c:	87 60       	ori	r24, 0x07	; 7
     63e:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     640:	80 e3       	ldi	r24, 0x30	; 48
     642:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     644:	42 9a       	sbi	0x08, 2	; 8
     646:	ef e3       	ldi	r30, 0x3F	; 63
     648:	ff e1       	ldi	r31, 0x1F	; 31
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <LCDinit+0x2c>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <LCDinit+0x32>
     650:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     652:	42 98       	cbi	0x08, 2	; 8
     654:	ef e3       	ldi	r30, 0x3F	; 63
     656:	ff e1       	ldi	r31, 0x1F	; 31
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <LCDinit+0x3a>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <LCDinit+0x40>
     65e:	00 00       	nop
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     660:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     662:	42 9a       	sbi	0x08, 2	; 8
     664:	8f e3       	ldi	r24, 0x3F	; 63
     666:	9f e1       	ldi	r25, 0x1F	; 31
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <LCDinit+0x4a>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <LCDinit+0x50>
     66e:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     670:	42 98       	cbi	0x08, 2	; 8
     672:	ef e3       	ldi	r30, 0x3F	; 63
     674:	ff e1       	ldi	r31, 0x1F	; 31
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <LCDinit+0x58>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <LCDinit+0x5e>
     67c:	00 00       	nop
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     67e:	80 e2       	ldi	r24, 0x20	; 32
     680:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     682:	42 9a       	sbi	0x08, 2	; 8
     684:	8f e3       	ldi	r24, 0x3F	; 63
     686:	9f e1       	ldi	r25, 0x1F	; 31
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <LCDinit+0x6a>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <LCDinit+0x70>
     68e:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     690:	42 98       	cbi	0x08, 2	; 8
     692:	ef e3       	ldi	r30, 0x3F	; 63
     694:	ff e1       	ldi	r31, 0x1F	; 31
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	f1 f7       	brne	.-4      	; 0x696 <LCDinit+0x78>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <LCDinit+0x7e>
     69c:	00 00       	nop
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     69e:	88 e2       	ldi	r24, 0x28	; 40
     6a0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     6a4:	8c e0       	ldi	r24, 0x0C	; 12
     6a6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCDsendCommand>
     6aa:	cb ea       	ldi	r28, 0xAB	; 171
     6ac:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     6ae:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     6b0:	16 2f       	mov	r17, r22
     6b2:	1f 5f       	subi	r17, 0xFF	; 255
     6b4:	ce 01       	movw	r24, r28
     6b6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCDdefinechar>
     6ba:	28 96       	adiw	r28, 0x08	; 8
     6bc:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     6be:	18 30       	cpi	r17, 0x08	; 8
     6c0:	b9 f7       	brne	.-18     	; 0x6b0 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	08 95       	ret

000006ca <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     6d0:	c0 e0       	ldi	r28, 0x00	; 0
     6d2:	04 c0       	rjmp	.+8      	; 0x6dc <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
     6d4:	8e e1       	ldi	r24, 0x1E	; 30
     6d6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     6da:	cf 5f       	subi	r28, 0xFF	; 255
     6dc:	cd 13       	cpse	r28, r29
     6de:	fa cf       	rjmp	.-12     	; 0x6d4 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     6ec:	c0 e0       	ldi	r28, 0x00	; 0
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
     6f0:	88 e1       	ldi	r24, 0x18	; 24
     6f2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     6f6:	cf 5f       	subi	r28, 0xFF	; 255
     6f8:	cd 13       	cpse	r28, r29
     6fa:	fa cf       	rjmp	.-12     	; 0x6f0 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     702:	8e e0       	ldi	r24, 0x0E	; 14
     704:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <LCDsendCommand>

00000708 <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     708:	8f e0       	ldi	r24, 0x0F	; 15
     70a:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <LCDsendCommand>

0000070e <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     70e:	8c e0       	ldi	r24, 0x0C	; 12
     710:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <LCDsendCommand>

00000714 <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     714:	88 e0       	ldi	r24, 0x08	; 8
     716:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <LCDsendCommand>

0000071a <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     71a:	8c e0       	ldi	r24, 0x0C	; 12
     71c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <LCDsendCommand>

00000720 <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     726:	c0 e0       	ldi	r28, 0x00	; 0
     728:	04 c0       	rjmp	.+8      	; 0x732 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
     72a:	80 e1       	ldi	r24, 0x10	; 16
     72c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     730:	cf 5f       	subi	r28, 0xFF	; 255
     732:	cd 13       	cpse	r28, r29
     734:	fa cf       	rjmp	.-12     	; 0x72a <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     742:	c0 e0       	ldi	r28, 0x00	; 0
     744:	04 c0       	rjmp	.+8      	; 0x74e <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
     746:	84 e1       	ldi	r24, 0x14	; 20
     748:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     74c:	cf 5f       	subi	r28, 0xFF	; 255
     74e:	cd 13       	cpse	r28, r29
     750:	fa cf       	rjmp	.-12     	; 0x746 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     758:	cf 92       	push	r12
     75a:	df 92       	push	r13
     75c:	ef 92       	push	r14
     75e:	ff 92       	push	r15
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	1f 92       	push	r1
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     76e:	56 e0       	ldi	r21, 0x06	; 6
     770:	45 9f       	mul	r20, r21
     772:	90 01       	movw	r18, r0
     774:	11 24       	eor	r1, r1
     776:	e8 2f       	mov	r30, r24
     778:	e2 9f       	mul	r30, r18
     77a:	c0 01       	movw	r24, r0
     77c:	e3 9f       	mul	r30, r19
     77e:	90 0d       	add	r25, r0
     780:	11 24       	eor	r1, r1
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	0e 94 f6 07 	call	0xfec	; 0xfec <__divmodhi4>
     788:	8b 01       	movw	r16, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     78a:	cb 01       	movw	r24, r22
     78c:	66 e0       	ldi	r22, 0x06	; 6
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__udivmodhi4>
     794:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     796:	c1 2c       	mov	r12, r1
     798:	d1 2c       	mov	r13, r1
     79a:	f1 2c       	mov	r15, r1
     79c:	16 c0       	rjmp	.+44     	; 0x7ca <LCDprogressBar+0x72>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     79e:	96 01       	movw	r18, r12
     7a0:	2b 5f       	subi	r18, 0xFB	; 251
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	02 17       	cp	r16, r18
     7a6:	13 07       	cpc	r17, r19
     7a8:	28 f4       	brcc	.+10     	; 0x7b4 <LCDprogressBar+0x5c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     7aa:	0c 15       	cp	r16, r12
     7ac:	1d 05       	cpc	r17, r13
     7ae:	20 f0       	brcs	.+8      	; 0x7b8 <LCDprogressBar+0x60>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     7b0:	8e 2d       	mov	r24, r14
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <LCDprogressBar+0x62>
			}
		}
		else
		{
			// this is a full block
			c = 5;
     7b4:	85 e0       	ldi	r24, 0x05	; 5
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <LCDprogressBar+0x62>
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     7ba:	49 83       	std	Y+1, r20	; 0x01
     7bc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     7c0:	f3 94       	inc	r15
     7c2:	f6 e0       	ldi	r31, 0x06	; 6
     7c4:	cf 0e       	add	r12, r31
     7c6:	d1 1c       	adc	r13, r1
     7c8:	49 81       	ldd	r20, Y+1	; 0x01
     7ca:	f4 12       	cpse	r15, r20
     7cc:	e8 cf       	rjmp	.-48     	; 0x79e <LCDprogressBar+0x46>
		
		// write character to display
		LCDsendChar(c);
	}

}
     7ce:	0f 90       	pop	r0
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	df 90       	pop	r13
     7de:	cf 90       	pop	r12
     7e0:	08 95       	ret

000007e2 <main>:
}

int main(void){
	initialize();
     7e2:	0e 94 28 02 	call	0x450	; 0x450 <initialize>
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	8c e8       	ldi	r24, 0x8C	; 140
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <CopyStringtoLCD>
	
	while(1){
		if( led_time_count == 0){
			led_time_count = LED_BLINK_PERIOD / 2;
     7f2:	c4 ef       	ldi	r28, 0xF4	; 244
     7f4:	d1 e0       	ldi	r29, 0x01	; 1
			toggle_led();
		}
		if( lcd_time_count == 0){
			lcd_time_count = LCD_REFRESH_RATE;
     7f6:	08 ec       	ldi	r16, 0xC8	; 200
     7f8:	10 e0       	ldi	r17, 0x00	; 0
		if(cap_discharged && !begin_cap_measurement){
			//begin cap measurements
			//switch Timer1A mode
			//DDRB &= ~COMPARATOR_INPUT;
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     7fa:	ee 24       	eor	r14, r14
     7fc:	e3 94       	inc	r14
     7fe:	f1 2c       	mov	r15, r1
int main(void){
	initialize();
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
	
	while(1){
		if( led_time_count == 0){
     800:	80 91 31 01 	lds	r24, 0x0131
     804:	90 91 32 01 	lds	r25, 0x0132
     808:	89 2b       	or	r24, r25
     80a:	31 f4       	brne	.+12     	; 0x818 <main+0x36>
			led_time_count = LED_BLINK_PERIOD / 2;
     80c:	d0 93 32 01 	sts	0x0132, r29
     810:	c0 93 31 01 	sts	0x0131, r28
			toggle_led();
     814:	0e 94 b6 01 	call	0x36c	; 0x36c <toggle_led>
		}
		if( lcd_time_count == 0){
     818:	80 91 10 01 	lds	r24, 0x0110
     81c:	90 91 11 01 	lds	r25, 0x0111
     820:	89 2b       	or	r24, r25
     822:	31 f4       	brne	.+12     	; 0x830 <main+0x4e>
			lcd_time_count = LCD_REFRESH_RATE;
     824:	10 93 11 01 	sts	0x0111, r17
     828:	00 93 10 01 	sts	0x0110, r16
			refresh_lcd();
     82c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <refresh_lcd>
		}
		init_cap_measurements();
     830:	0e 94 44 01 	call	0x288	; 0x288 <init_cap_measurements>
		if(cap_discharged && !begin_cap_measurement){
     834:	80 91 0c 01 	lds	r24, 0x010C
     838:	90 91 0d 01 	lds	r25, 0x010D
     83c:	89 2b       	or	r24, r25
     83e:	61 f0       	breq	.+24     	; 0x858 <main+0x76>
     840:	80 91 0e 01 	lds	r24, 0x010E
     844:	90 91 0f 01 	lds	r25, 0x010F
     848:	89 2b       	or	r24, r25
     84a:	31 f4       	brne	.+12     	; 0x858 <main+0x76>
			//begin cap measurements
			//switch Timer1A mode
			//DDRB &= ~COMPARATOR_INPUT;
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     84c:	f0 92 0f 01 	sts	0x010F, r15
     850:	e0 92 0e 01 	sts	0x010E, r14
			//initalize timer for cap measurement
			init_cap_measurement_analog_timer();
     854:	0e 94 18 01 	call	0x230	; 0x230 <init_cap_measurement_analog_timer>
		}
		if(begin_cap_measurement && cap_charged){
     858:	80 91 0e 01 	lds	r24, 0x010E
     85c:	90 91 0f 01 	lds	r25, 0x010F
     860:	89 2b       	or	r24, r25
     862:	71 f2       	breq	.-100    	; 0x800 <main+0x1e>
     864:	80 91 0a 01 	lds	r24, 0x010A
     868:	90 91 0b 01 	lds	r25, 0x010B
     86c:	c9 cf       	rjmp	.-110    	; 0x800 <main+0x1e>

0000086e <vfprintf>:
     86e:	2f 92       	push	r2
     870:	3f 92       	push	r3
     872:	4f 92       	push	r4
     874:	5f 92       	push	r5
     876:	6f 92       	push	r6
     878:	7f 92       	push	r7
     87a:	8f 92       	push	r8
     87c:	9f 92       	push	r9
     87e:	af 92       	push	r10
     880:	bf 92       	push	r11
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	62 97       	sbiw	r28, 0x12	; 18
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	7c 01       	movw	r14, r24
     8a4:	1b 01       	movw	r2, r22
     8a6:	6a 01       	movw	r12, r20
     8a8:	fc 01       	movw	r30, r24
     8aa:	17 82       	std	Z+7, r1	; 0x07
     8ac:	16 82       	std	Z+6, r1	; 0x06
     8ae:	83 81       	ldd	r24, Z+3	; 0x03
     8b0:	81 fd       	sbrc	r24, 1
     8b2:	03 c0       	rjmp	.+6      	; 0x8ba <vfprintf+0x4c>
     8b4:	6b c3       	rjmp	.+1750   	; 0xf8c <vfprintf+0x71e>
     8b6:	65 01       	movw	r12, r10
     8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <vfprintf+0x56>
     8ba:	88 24       	eor	r8, r8
     8bc:	83 94       	inc	r8
     8be:	91 2c       	mov	r9, r1
     8c0:	8c 0e       	add	r8, r28
     8c2:	9d 1e       	adc	r9, r29
     8c4:	f7 01       	movw	r30, r14
     8c6:	93 81       	ldd	r25, Z+3	; 0x03
     8c8:	f1 01       	movw	r30, r2
     8ca:	93 fd       	sbrc	r25, 3
     8cc:	85 91       	lpm	r24, Z+
     8ce:	93 ff       	sbrs	r25, 3
     8d0:	81 91       	ld	r24, Z+
     8d2:	1f 01       	movw	r2, r30
     8d4:	88 23       	and	r24, r24
     8d6:	09 f4       	brne	.+2      	; 0x8da <vfprintf+0x6c>
     8d8:	55 c3       	rjmp	.+1706   	; 0xf84 <vfprintf+0x716>
     8da:	85 32       	cpi	r24, 0x25	; 37
     8dc:	39 f4       	brne	.+14     	; 0x8ec <vfprintf+0x7e>
     8de:	93 fd       	sbrc	r25, 3
     8e0:	85 91       	lpm	r24, Z+
     8e2:	93 ff       	sbrs	r25, 3
     8e4:	81 91       	ld	r24, Z+
     8e6:	1f 01       	movw	r2, r30
     8e8:	85 32       	cpi	r24, 0x25	; 37
     8ea:	31 f4       	brne	.+12     	; 0x8f8 <vfprintf+0x8a>
     8ec:	b7 01       	movw	r22, r14
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     8f4:	56 01       	movw	r10, r12
     8f6:	df cf       	rjmp	.-66     	; 0x8b6 <vfprintf+0x48>
     8f8:	71 2c       	mov	r7, r1
     8fa:	61 2c       	mov	r6, r1
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	20 32       	cpi	r18, 0x20	; 32
     900:	a8 f4       	brcc	.+42     	; 0x92c <vfprintf+0xbe>
     902:	8b 32       	cpi	r24, 0x2B	; 43
     904:	61 f0       	breq	.+24     	; 0x91e <vfprintf+0xb0>
     906:	28 f4       	brcc	.+10     	; 0x912 <vfprintf+0xa4>
     908:	80 32       	cpi	r24, 0x20	; 32
     90a:	51 f0       	breq	.+20     	; 0x920 <vfprintf+0xb2>
     90c:	83 32       	cpi	r24, 0x23	; 35
     90e:	71 f4       	brne	.+28     	; 0x92c <vfprintf+0xbe>
     910:	0b c0       	rjmp	.+22     	; 0x928 <vfprintf+0xba>
     912:	8d 32       	cpi	r24, 0x2D	; 45
     914:	39 f0       	breq	.+14     	; 0x924 <vfprintf+0xb6>
     916:	80 33       	cpi	r24, 0x30	; 48
     918:	49 f4       	brne	.+18     	; 0x92c <vfprintf+0xbe>
     91a:	21 60       	ori	r18, 0x01	; 1
     91c:	28 c0       	rjmp	.+80     	; 0x96e <vfprintf+0x100>
     91e:	22 60       	ori	r18, 0x02	; 2
     920:	24 60       	ori	r18, 0x04	; 4
     922:	25 c0       	rjmp	.+74     	; 0x96e <vfprintf+0x100>
     924:	28 60       	ori	r18, 0x08	; 8
     926:	23 c0       	rjmp	.+70     	; 0x96e <vfprintf+0x100>
     928:	20 61       	ori	r18, 0x10	; 16
     92a:	21 c0       	rjmp	.+66     	; 0x96e <vfprintf+0x100>
     92c:	27 fd       	sbrc	r18, 7
     92e:	27 c0       	rjmp	.+78     	; 0x97e <vfprintf+0x110>
     930:	38 2f       	mov	r19, r24
     932:	30 53       	subi	r19, 0x30	; 48
     934:	3a 30       	cpi	r19, 0x0A	; 10
     936:	78 f4       	brcc	.+30     	; 0x956 <vfprintf+0xe8>
     938:	26 ff       	sbrs	r18, 6
     93a:	06 c0       	rjmp	.+12     	; 0x948 <vfprintf+0xda>
     93c:	fa e0       	ldi	r31, 0x0A	; 10
     93e:	7f 9e       	mul	r7, r31
     940:	30 0d       	add	r19, r0
     942:	11 24       	eor	r1, r1
     944:	73 2e       	mov	r7, r19
     946:	13 c0       	rjmp	.+38     	; 0x96e <vfprintf+0x100>
     948:	4a e0       	ldi	r20, 0x0A	; 10
     94a:	64 9e       	mul	r6, r20
     94c:	30 0d       	add	r19, r0
     94e:	11 24       	eor	r1, r1
     950:	63 2e       	mov	r6, r19
     952:	20 62       	ori	r18, 0x20	; 32
     954:	0c c0       	rjmp	.+24     	; 0x96e <vfprintf+0x100>
     956:	8e 32       	cpi	r24, 0x2E	; 46
     958:	21 f4       	brne	.+8      	; 0x962 <vfprintf+0xf4>
     95a:	26 fd       	sbrc	r18, 6
     95c:	13 c3       	rjmp	.+1574   	; 0xf84 <vfprintf+0x716>
     95e:	20 64       	ori	r18, 0x40	; 64
     960:	06 c0       	rjmp	.+12     	; 0x96e <vfprintf+0x100>
     962:	8c 36       	cpi	r24, 0x6C	; 108
     964:	11 f4       	brne	.+4      	; 0x96a <vfprintf+0xfc>
     966:	20 68       	ori	r18, 0x80	; 128
     968:	02 c0       	rjmp	.+4      	; 0x96e <vfprintf+0x100>
     96a:	88 36       	cpi	r24, 0x68	; 104
     96c:	41 f4       	brne	.+16     	; 0x97e <vfprintf+0x110>
     96e:	f1 01       	movw	r30, r2
     970:	93 fd       	sbrc	r25, 3
     972:	85 91       	lpm	r24, Z+
     974:	93 ff       	sbrs	r25, 3
     976:	81 91       	ld	r24, Z+
     978:	1f 01       	movw	r2, r30
     97a:	81 11       	cpse	r24, r1
     97c:	c0 cf       	rjmp	.-128    	; 0x8fe <vfprintf+0x90>
     97e:	98 2f       	mov	r25, r24
     980:	95 54       	subi	r25, 0x45	; 69
     982:	93 30       	cpi	r25, 0x03	; 3
     984:	18 f4       	brcc	.+6      	; 0x98c <vfprintf+0x11e>
     986:	20 61       	ori	r18, 0x10	; 16
     988:	80 5e       	subi	r24, 0xE0	; 224
     98a:	06 c0       	rjmp	.+12     	; 0x998 <vfprintf+0x12a>
     98c:	98 2f       	mov	r25, r24
     98e:	95 56       	subi	r25, 0x65	; 101
     990:	93 30       	cpi	r25, 0x03	; 3
     992:	08 f0       	brcs	.+2      	; 0x996 <vfprintf+0x128>
     994:	a4 c1       	rjmp	.+840    	; 0xcde <vfprintf+0x470>
     996:	2f 7e       	andi	r18, 0xEF	; 239
     998:	26 fd       	sbrc	r18, 6
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <vfprintf+0x132>
     99c:	16 e0       	ldi	r17, 0x06	; 6
     99e:	71 2e       	mov	r7, r17
     9a0:	bf e3       	ldi	r27, 0x3F	; 63
     9a2:	5b 2e       	mov	r5, r27
     9a4:	52 22       	and	r5, r18
     9a6:	85 36       	cpi	r24, 0x65	; 101
     9a8:	19 f4       	brne	.+6      	; 0x9b0 <vfprintf+0x142>
     9aa:	f0 e4       	ldi	r31, 0x40	; 64
     9ac:	5f 2a       	or	r5, r31
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <vfprintf+0x150>
     9b0:	86 36       	cpi	r24, 0x66	; 102
     9b2:	19 f4       	brne	.+6      	; 0x9ba <vfprintf+0x14c>
     9b4:	40 e8       	ldi	r20, 0x80	; 128
     9b6:	54 2a       	or	r5, r20
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <vfprintf+0x150>
     9ba:	71 10       	cpse	r7, r1
     9bc:	7a 94       	dec	r7
     9be:	57 fe       	sbrs	r5, 7
     9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <vfprintf+0x162>
     9c2:	5b e3       	ldi	r21, 0x3B	; 59
     9c4:	57 15       	cp	r21, r7
     9c6:	48 f0       	brcs	.+18     	; 0x9da <vfprintf+0x16c>
     9c8:	47 2c       	mov	r4, r7
     9ca:	43 94       	inc	r4
     9cc:	27 e0       	ldi	r18, 0x07	; 7
     9ce:	0d c0       	rjmp	.+26     	; 0x9ea <vfprintf+0x17c>
     9d0:	87 e0       	ldi	r24, 0x07	; 7
     9d2:	87 15       	cp	r24, r7
     9d4:	30 f0       	brcs	.+12     	; 0x9e2 <vfprintf+0x174>
     9d6:	27 2d       	mov	r18, r7
     9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <vfprintf+0x17a>
     9da:	27 e0       	ldi	r18, 0x07	; 7
     9dc:	ac e3       	ldi	r26, 0x3C	; 60
     9de:	4a 2e       	mov	r4, r26
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <vfprintf+0x17c>
     9e2:	27 e0       	ldi	r18, 0x07	; 7
     9e4:	f7 e0       	ldi	r31, 0x07	; 7
     9e6:	7f 2e       	mov	r7, r31
     9e8:	41 2c       	mov	r4, r1
     9ea:	56 01       	movw	r10, r12
     9ec:	94 e0       	ldi	r25, 0x04	; 4
     9ee:	a9 0e       	add	r10, r25
     9f0:	b1 1c       	adc	r11, r1
     9f2:	f6 01       	movw	r30, r12
     9f4:	60 81       	ld	r22, Z
     9f6:	71 81       	ldd	r23, Z+1	; 0x01
     9f8:	82 81       	ldd	r24, Z+2	; 0x02
     9fa:	93 81       	ldd	r25, Z+3	; 0x03
     9fc:	04 2d       	mov	r16, r4
     9fe:	a4 01       	movw	r20, r8
     a00:	0e 94 0a 08 	call	0x1014	; 0x1014 <__ftoa_engine>
     a04:	8c 01       	movw	r16, r24
     a06:	49 81       	ldd	r20, Y+1	; 0x01
     a08:	4c 87       	std	Y+12, r20	; 0x0c
     a0a:	40 ff       	sbrs	r20, 0
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <vfprintf+0x1a4>
     a0e:	43 ff       	sbrs	r20, 3
     a10:	07 c0       	rjmp	.+14     	; 0xa20 <vfprintf+0x1b2>
     a12:	51 fc       	sbrc	r5, 1
     a14:	08 c0       	rjmp	.+16     	; 0xa26 <vfprintf+0x1b8>
     a16:	52 fe       	sbrs	r5, 2
     a18:	09 c0       	rjmp	.+18     	; 0xa2c <vfprintf+0x1be>
     a1a:	e0 e2       	ldi	r30, 0x20	; 32
     a1c:	de 2e       	mov	r13, r30
     a1e:	07 c0       	rjmp	.+14     	; 0xa2e <vfprintf+0x1c0>
     a20:	7d e2       	ldi	r23, 0x2D	; 45
     a22:	d7 2e       	mov	r13, r23
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <vfprintf+0x1c0>
     a26:	6b e2       	ldi	r22, 0x2B	; 43
     a28:	d6 2e       	mov	r13, r22
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <vfprintf+0x1c0>
     a2c:	d1 2c       	mov	r13, r1
     a2e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a30:	8c 70       	andi	r24, 0x0C	; 12
     a32:	a1 f1       	breq	.+104    	; 0xa9c <vfprintf+0x22e>
     a34:	dd 20       	and	r13, r13
     a36:	11 f0       	breq	.+4      	; 0xa3c <vfprintf+0x1ce>
     a38:	84 e0       	ldi	r24, 0x04	; 4
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <vfprintf+0x1d0>
     a3c:	83 e0       	ldi	r24, 0x03	; 3
     a3e:	86 15       	cp	r24, r6
     a40:	10 f0       	brcs	.+4      	; 0xa46 <vfprintf+0x1d8>
     a42:	61 2c       	mov	r6, r1
     a44:	0b c0       	rjmp	.+22     	; 0xa5c <vfprintf+0x1ee>
     a46:	68 1a       	sub	r6, r24
     a48:	53 fc       	sbrc	r5, 3
     a4a:	08 c0       	rjmp	.+16     	; 0xa5c <vfprintf+0x1ee>
     a4c:	b7 01       	movw	r22, r14
     a4e:	80 e2       	ldi	r24, 0x20	; 32
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     a56:	6a 94       	dec	r6
     a58:	c9 f7       	brne	.-14     	; 0xa4c <vfprintf+0x1de>
     a5a:	f3 cf       	rjmp	.-26     	; 0xa42 <vfprintf+0x1d4>
     a5c:	dd 20       	and	r13, r13
     a5e:	29 f0       	breq	.+10     	; 0xa6a <vfprintf+0x1fc>
     a60:	b7 01       	movw	r22, r14
     a62:	8d 2d       	mov	r24, r13
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     a6a:	5c 85       	ldd	r21, Y+12	; 0x0c
     a6c:	53 fd       	sbrc	r21, 3
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <vfprintf+0x208>
     a70:	0f ee       	ldi	r16, 0xEF	; 239
     a72:	10 e0       	ldi	r17, 0x00	; 0
     a74:	0c c0       	rjmp	.+24     	; 0xa8e <vfprintf+0x220>
     a76:	0b ee       	ldi	r16, 0xEB	; 235
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	09 c0       	rjmp	.+18     	; 0xa8e <vfprintf+0x220>
     a7c:	51 10       	cpse	r5, r1
     a7e:	80 52       	subi	r24, 0x20	; 32
     a80:	b7 01       	movw	r22, r14
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     a88:	0f 5f       	subi	r16, 0xFF	; 255
     a8a:	1f 4f       	sbci	r17, 0xFF	; 255
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <vfprintf+0x224>
     a8e:	80 e1       	ldi	r24, 0x10	; 16
     a90:	58 22       	and	r5, r24
     a92:	f8 01       	movw	r30, r16
     a94:	84 91       	lpm	r24, Z
     a96:	81 11       	cpse	r24, r1
     a98:	f1 cf       	rjmp	.-30     	; 0xa7c <vfprintf+0x20e>
     a9a:	71 c2       	rjmp	.+1250   	; 0xf7e <vfprintf+0x710>
     a9c:	57 fe       	sbrs	r5, 7
     a9e:	0e c0       	rjmp	.+28     	; 0xabc <vfprintf+0x24e>
     aa0:	40 0e       	add	r4, r16
     aa2:	4c 85       	ldd	r20, Y+12	; 0x0c
     aa4:	44 ff       	sbrs	r20, 4
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <vfprintf+0x242>
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	81 33       	cpi	r24, 0x31	; 49
     aac:	09 f4       	brne	.+2      	; 0xab0 <vfprintf+0x242>
     aae:	4a 94       	dec	r4
     ab0:	14 14       	cp	r1, r4
     ab2:	4c f5       	brge	.+82     	; 0xb06 <vfprintf+0x298>
     ab4:	58 e0       	ldi	r21, 0x08	; 8
     ab6:	54 15       	cp	r21, r4
     ab8:	48 f1       	brcs	.+82     	; 0xb0c <vfprintf+0x29e>
     aba:	2c c0       	rjmp	.+88     	; 0xb14 <vfprintf+0x2a6>
     abc:	56 fc       	sbrc	r5, 6
     abe:	2a c0       	rjmp	.+84     	; 0xb14 <vfprintf+0x2a6>
     ac0:	87 2d       	mov	r24, r7
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	80 17       	cp	r24, r16
     ac6:	91 07       	cpc	r25, r17
     ac8:	44 f0       	brlt	.+16     	; 0xada <vfprintf+0x26c>
     aca:	0c 3f       	cpi	r16, 0xFC	; 252
     acc:	8f ef       	ldi	r24, 0xFF	; 255
     ace:	18 07       	cpc	r17, r24
     ad0:	24 f0       	brlt	.+8      	; 0xada <vfprintf+0x26c>
     ad2:	90 e8       	ldi	r25, 0x80	; 128
     ad4:	59 2a       	or	r5, r25
     ad6:	01 c0       	rjmp	.+2      	; 0xada <vfprintf+0x26c>
     ad8:	7a 94       	dec	r7
     ada:	77 20       	and	r7, r7
     adc:	49 f0       	breq	.+18     	; 0xaf0 <vfprintf+0x282>
     ade:	e2 e0       	ldi	r30, 0x02	; 2
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	ec 0f       	add	r30, r28
     ae4:	fd 1f       	adc	r31, r29
     ae6:	e7 0d       	add	r30, r7
     ae8:	f1 1d       	adc	r31, r1
     aea:	80 81       	ld	r24, Z
     aec:	80 33       	cpi	r24, 0x30	; 48
     aee:	a1 f3       	breq	.-24     	; 0xad8 <vfprintf+0x26a>
     af0:	57 fe       	sbrs	r5, 7
     af2:	10 c0       	rjmp	.+32     	; 0xb14 <vfprintf+0x2a6>
     af4:	47 2c       	mov	r4, r7
     af6:	43 94       	inc	r4
     af8:	87 2d       	mov	r24, r7
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	08 17       	cp	r16, r24
     afe:	19 07       	cpc	r17, r25
     b00:	44 f4       	brge	.+16     	; 0xb12 <vfprintf+0x2a4>
     b02:	70 1a       	sub	r7, r16
     b04:	07 c0       	rjmp	.+14     	; 0xb14 <vfprintf+0x2a6>
     b06:	44 24       	eor	r4, r4
     b08:	43 94       	inc	r4
     b0a:	04 c0       	rjmp	.+8      	; 0xb14 <vfprintf+0x2a6>
     b0c:	58 e0       	ldi	r21, 0x08	; 8
     b0e:	45 2e       	mov	r4, r21
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <vfprintf+0x2a6>
     b12:	71 2c       	mov	r7, r1
     b14:	57 fe       	sbrs	r5, 7
     b16:	07 c0       	rjmp	.+14     	; 0xb26 <vfprintf+0x2b8>
     b18:	10 16       	cp	r1, r16
     b1a:	11 06       	cpc	r1, r17
     b1c:	3c f4       	brge	.+14     	; 0xb2c <vfprintf+0x2be>
     b1e:	98 01       	movw	r18, r16
     b20:	2f 5f       	subi	r18, 0xFF	; 255
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <vfprintf+0x2c2>
     b26:	25 e0       	ldi	r18, 0x05	; 5
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <vfprintf+0x2c2>
     b2c:	21 e0       	ldi	r18, 0x01	; 1
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	dd 20       	and	r13, r13
     b32:	11 f0       	breq	.+4      	; 0xb38 <vfprintf+0x2ca>
     b34:	2f 5f       	subi	r18, 0xFF	; 255
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	77 20       	and	r7, r7
     b3a:	31 f0       	breq	.+12     	; 0xb48 <vfprintf+0x2da>
     b3c:	47 2d       	mov	r20, r7
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	4f 5f       	subi	r20, 0xFF	; 255
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
     b44:	24 0f       	add	r18, r20
     b46:	35 1f       	adc	r19, r21
     b48:	46 2d       	mov	r20, r6
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	24 17       	cp	r18, r20
     b4e:	35 07       	cpc	r19, r21
     b50:	14 f4       	brge	.+4      	; 0xb56 <vfprintf+0x2e8>
     b52:	62 1a       	sub	r6, r18
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <vfprintf+0x2ea>
     b56:	61 2c       	mov	r6, r1
     b58:	85 2d       	mov	r24, r5
     b5a:	89 70       	andi	r24, 0x09	; 9
     b5c:	49 f4       	brne	.+18     	; 0xb70 <vfprintf+0x302>
     b5e:	06 c0       	rjmp	.+12     	; 0xb6c <vfprintf+0x2fe>
     b60:	b7 01       	movw	r22, r14
     b62:	80 e2       	ldi	r24, 0x20	; 32
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     b6a:	6a 94       	dec	r6
     b6c:	61 10       	cpse	r6, r1
     b6e:	f8 cf       	rjmp	.-16     	; 0xb60 <vfprintf+0x2f2>
     b70:	dd 20       	and	r13, r13
     b72:	29 f0       	breq	.+10     	; 0xb7e <vfprintf+0x310>
     b74:	b7 01       	movw	r22, r14
     b76:	8d 2d       	mov	r24, r13
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     b7e:	53 fc       	sbrc	r5, 3
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <vfprintf+0x326>
     b82:	06 c0       	rjmp	.+12     	; 0xb90 <vfprintf+0x322>
     b84:	b7 01       	movw	r22, r14
     b86:	80 e3       	ldi	r24, 0x30	; 48
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     b8e:	6a 94       	dec	r6
     b90:	61 10       	cpse	r6, r1
     b92:	f8 cf       	rjmp	.-16     	; 0xb84 <vfprintf+0x316>
     b94:	57 fe       	sbrs	r5, 7
     b96:	56 c0       	rjmp	.+172    	; 0xc44 <vfprintf+0x3d6>
     b98:	68 01       	movw	r12, r16
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <vfprintf+0x334>
     b9e:	c1 2c       	mov	r12, r1
     ba0:	d1 2c       	mov	r13, r1
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	a8 01       	movw	r20, r16
     ba8:	44 19       	sub	r20, r4
     baa:	51 09       	sbc	r21, r1
     bac:	5e 87       	std	Y+14, r21	; 0x0e
     bae:	4d 87       	std	Y+13, r20	; 0x0d
     bb0:	28 01       	movw	r4, r16
     bb2:	4c 18       	sub	r4, r12
     bb4:	5d 08       	sbc	r5, r13
     bb6:	48 0c       	add	r4, r8
     bb8:	59 1c       	adc	r5, r9
     bba:	87 2d       	mov	r24, r7
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	44 27       	eor	r20, r20
     bc0:	55 27       	eor	r21, r21
     bc2:	48 1b       	sub	r20, r24
     bc4:	59 0b       	sbc	r21, r25
     bc6:	58 8b       	std	Y+16, r21	; 0x10
     bc8:	4f 87       	std	Y+15, r20	; 0x0f
     bca:	5f ef       	ldi	r21, 0xFF	; 255
     bcc:	c5 16       	cp	r12, r21
     bce:	d5 06       	cpc	r13, r21
     bd0:	49 f4       	brne	.+18     	; 0xbe4 <vfprintf+0x376>
     bd2:	b7 01       	movw	r22, r14
     bd4:	8e e2       	ldi	r24, 0x2E	; 46
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	2a 8b       	std	Y+18, r18	; 0x12
     bda:	39 8b       	std	Y+17, r19	; 0x11
     bdc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     be0:	39 89       	ldd	r19, Y+17	; 0x11
     be2:	2a 89       	ldd	r18, Y+18	; 0x12
     be4:	0c 15       	cp	r16, r12
     be6:	1d 05       	cpc	r17, r13
     be8:	54 f0       	brlt	.+20     	; 0xbfe <vfprintf+0x390>
     bea:	4d 85       	ldd	r20, Y+13	; 0x0d
     bec:	5e 85       	ldd	r21, Y+14	; 0x0e
     bee:	4c 15       	cp	r20, r12
     bf0:	5d 05       	cpc	r21, r13
     bf2:	2c f4       	brge	.+10     	; 0xbfe <vfprintf+0x390>
     bf4:	f2 01       	movw	r30, r4
     bf6:	e2 0f       	add	r30, r18
     bf8:	f3 1f       	adc	r31, r19
     bfa:	81 81       	ldd	r24, Z+1	; 0x01
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <vfprintf+0x392>
     bfe:	80 e3       	ldi	r24, 0x30	; 48
     c00:	51 e0       	ldi	r21, 0x01	; 1
     c02:	c5 1a       	sub	r12, r21
     c04:	d1 08       	sbc	r13, r1
     c06:	2f 5f       	subi	r18, 0xFF	; 255
     c08:	3f 4f       	sbci	r19, 0xFF	; 255
     c0a:	4f 85       	ldd	r20, Y+15	; 0x0f
     c0c:	58 89       	ldd	r21, Y+16	; 0x10
     c0e:	c4 16       	cp	r12, r20
     c10:	d5 06       	cpc	r13, r21
     c12:	4c f0       	brlt	.+18     	; 0xc26 <vfprintf+0x3b8>
     c14:	b7 01       	movw	r22, r14
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	2a 8b       	std	Y+18, r18	; 0x12
     c1a:	39 8b       	std	Y+17, r19	; 0x11
     c1c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     c20:	2a 89       	ldd	r18, Y+18	; 0x12
     c22:	39 89       	ldd	r19, Y+17	; 0x11
     c24:	d2 cf       	rjmp	.-92     	; 0xbca <vfprintf+0x35c>
     c26:	c0 16       	cp	r12, r16
     c28:	d1 06       	cpc	r13, r17
     c2a:	49 f4       	brne	.+18     	; 0xc3e <vfprintf+0x3d0>
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	96 33       	cpi	r25, 0x36	; 54
     c30:	28 f4       	brcc	.+10     	; 0xc3c <vfprintf+0x3ce>
     c32:	95 33       	cpi	r25, 0x35	; 53
     c34:	21 f4       	brne	.+8      	; 0xc3e <vfprintf+0x3d0>
     c36:	5c 85       	ldd	r21, Y+12	; 0x0c
     c38:	54 fd       	sbrc	r21, 4
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <vfprintf+0x3d0>
     c3c:	81 e3       	ldi	r24, 0x31	; 49
     c3e:	b7 01       	movw	r22, r14
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	4a c0       	rjmp	.+148    	; 0xcd8 <vfprintf+0x46a>
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	81 33       	cpi	r24, 0x31	; 49
     c48:	19 f0       	breq	.+6      	; 0xc50 <vfprintf+0x3e2>
     c4a:	4c 85       	ldd	r20, Y+12	; 0x0c
     c4c:	4f 7e       	andi	r20, 0xEF	; 239
     c4e:	4c 87       	std	Y+12, r20	; 0x0c
     c50:	b7 01       	movw	r22, r14
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     c58:	71 10       	cpse	r7, r1
     c5a:	05 c0       	rjmp	.+10     	; 0xc66 <vfprintf+0x3f8>
     c5c:	54 fe       	sbrs	r5, 4
     c5e:	16 c0       	rjmp	.+44     	; 0xc8c <vfprintf+0x41e>
     c60:	85 e4       	ldi	r24, 0x45	; 69
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	15 c0       	rjmp	.+42     	; 0xc90 <vfprintf+0x422>
     c66:	b7 01       	movw	r22, r14
     c68:	8e e2       	ldi	r24, 0x2E	; 46
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     c70:	42 e0       	ldi	r20, 0x02	; 2
     c72:	d4 2e       	mov	r13, r20
     c74:	f4 01       	movw	r30, r8
     c76:	ed 0d       	add	r30, r13
     c78:	f1 1d       	adc	r31, r1
     c7a:	d3 94       	inc	r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	80 81       	ld	r24, Z
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     c86:	7a 94       	dec	r7
     c88:	a9 f7       	brne	.-22     	; 0xc74 <vfprintf+0x406>
     c8a:	e8 cf       	rjmp	.-48     	; 0xc5c <vfprintf+0x3ee>
     c8c:	85 e6       	ldi	r24, 0x65	; 101
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	b7 01       	movw	r22, r14
     c92:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     c96:	17 fd       	sbrc	r17, 7
     c98:	06 c0       	rjmp	.+12     	; 0xca6 <vfprintf+0x438>
     c9a:	01 15       	cp	r16, r1
     c9c:	11 05       	cpc	r17, r1
     c9e:	41 f4       	brne	.+16     	; 0xcb0 <vfprintf+0x442>
     ca0:	5c 85       	ldd	r21, Y+12	; 0x0c
     ca2:	54 ff       	sbrs	r21, 4
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <vfprintf+0x442>
     ca6:	11 95       	neg	r17
     ca8:	01 95       	neg	r16
     caa:	11 09       	sbc	r17, r1
     cac:	8d e2       	ldi	r24, 0x2D	; 45
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <vfprintf+0x444>
     cb0:	8b e2       	ldi	r24, 0x2B	; 43
     cb2:	b7 01       	movw	r22, r14
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     cba:	80 e3       	ldi	r24, 0x30	; 48
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <vfprintf+0x456>
     cbe:	8f 5f       	subi	r24, 0xFF	; 255
     cc0:	0a 50       	subi	r16, 0x0A	; 10
     cc2:	11 09       	sbc	r17, r1
     cc4:	0a 30       	cpi	r16, 0x0A	; 10
     cc6:	11 05       	cpc	r17, r1
     cc8:	d4 f7       	brge	.-12     	; 0xcbe <vfprintf+0x450>
     cca:	b7 01       	movw	r22, r14
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     cd2:	b7 01       	movw	r22, r14
     cd4:	c8 01       	movw	r24, r16
     cd6:	c0 96       	adiw	r24, 0x30	; 48
     cd8:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     cdc:	50 c1       	rjmp	.+672    	; 0xf7e <vfprintf+0x710>
     cde:	83 36       	cpi	r24, 0x63	; 99
     ce0:	31 f0       	breq	.+12     	; 0xcee <vfprintf+0x480>
     ce2:	83 37       	cpi	r24, 0x73	; 115
     ce4:	81 f0       	breq	.+32     	; 0xd06 <vfprintf+0x498>
     ce6:	83 35       	cpi	r24, 0x53	; 83
     ce8:	09 f0       	breq	.+2      	; 0xcec <vfprintf+0x47e>
     cea:	5e c0       	rjmp	.+188    	; 0xda8 <vfprintf+0x53a>
     cec:	24 c0       	rjmp	.+72     	; 0xd36 <vfprintf+0x4c8>
     cee:	56 01       	movw	r10, r12
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	a8 0e       	add	r10, r24
     cf4:	b1 1c       	adc	r11, r1
     cf6:	f6 01       	movw	r30, r12
     cf8:	80 81       	ld	r24, Z
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	cc 24       	eor	r12, r12
     cfe:	c3 94       	inc	r12
     d00:	d1 2c       	mov	r13, r1
     d02:	84 01       	movw	r16, r8
     d04:	14 c0       	rjmp	.+40     	; 0xd2e <vfprintf+0x4c0>
     d06:	56 01       	movw	r10, r12
     d08:	f2 e0       	ldi	r31, 0x02	; 2
     d0a:	af 0e       	add	r10, r31
     d0c:	b1 1c       	adc	r11, r1
     d0e:	f6 01       	movw	r30, r12
     d10:	00 81       	ld	r16, Z
     d12:	11 81       	ldd	r17, Z+1	; 0x01
     d14:	26 ff       	sbrs	r18, 6
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <vfprintf+0x4b0>
     d18:	67 2d       	mov	r22, r7
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <vfprintf+0x4b4>
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	c8 01       	movw	r24, r16
     d24:	2a 8b       	std	Y+18, r18	; 0x12
     d26:	0e 94 ed 08 	call	0x11da	; 0x11da <strnlen>
     d2a:	6c 01       	movw	r12, r24
     d2c:	2a 89       	ldd	r18, Y+18	; 0x12
     d2e:	9f e7       	ldi	r25, 0x7F	; 127
     d30:	59 2e       	mov	r5, r25
     d32:	52 22       	and	r5, r18
     d34:	17 c0       	rjmp	.+46     	; 0xd64 <vfprintf+0x4f6>
     d36:	56 01       	movw	r10, r12
     d38:	f2 e0       	ldi	r31, 0x02	; 2
     d3a:	af 0e       	add	r10, r31
     d3c:	b1 1c       	adc	r11, r1
     d3e:	f6 01       	movw	r30, r12
     d40:	00 81       	ld	r16, Z
     d42:	11 81       	ldd	r17, Z+1	; 0x01
     d44:	26 ff       	sbrs	r18, 6
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <vfprintf+0x4e0>
     d48:	67 2d       	mov	r22, r7
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <vfprintf+0x4e4>
     d4e:	6f ef       	ldi	r22, 0xFF	; 255
     d50:	7f ef       	ldi	r23, 0xFF	; 255
     d52:	c8 01       	movw	r24, r16
     d54:	2a 8b       	std	Y+18, r18	; 0x12
     d56:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <strnlen_P>
     d5a:	6c 01       	movw	r12, r24
     d5c:	2a 89       	ldd	r18, Y+18	; 0x12
     d5e:	80 e8       	ldi	r24, 0x80	; 128
     d60:	58 2e       	mov	r5, r24
     d62:	52 2a       	or	r5, r18
     d64:	53 fc       	sbrc	r5, 3
     d66:	1c c0       	rjmp	.+56     	; 0xda0 <vfprintf+0x532>
     d68:	06 c0       	rjmp	.+12     	; 0xd76 <vfprintf+0x508>
     d6a:	b7 01       	movw	r22, r14
     d6c:	80 e2       	ldi	r24, 0x20	; 32
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     d74:	6a 94       	dec	r6
     d76:	86 2d       	mov	r24, r6
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	c8 16       	cp	r12, r24
     d7c:	d9 06       	cpc	r13, r25
     d7e:	a8 f3       	brcs	.-22     	; 0xd6a <vfprintf+0x4fc>
     d80:	0f c0       	rjmp	.+30     	; 0xda0 <vfprintf+0x532>
     d82:	f8 01       	movw	r30, r16
     d84:	57 fc       	sbrc	r5, 7
     d86:	85 91       	lpm	r24, Z+
     d88:	57 fe       	sbrs	r5, 7
     d8a:	81 91       	ld	r24, Z+
     d8c:	8f 01       	movw	r16, r30
     d8e:	b7 01       	movw	r22, r14
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     d96:	61 10       	cpse	r6, r1
     d98:	6a 94       	dec	r6
     d9a:	f1 e0       	ldi	r31, 0x01	; 1
     d9c:	cf 1a       	sub	r12, r31
     d9e:	d1 08       	sbc	r13, r1
     da0:	c1 14       	cp	r12, r1
     da2:	d1 04       	cpc	r13, r1
     da4:	71 f7       	brne	.-36     	; 0xd82 <vfprintf+0x514>
     da6:	eb c0       	rjmp	.+470    	; 0xf7e <vfprintf+0x710>
     da8:	84 36       	cpi	r24, 0x64	; 100
     daa:	11 f0       	breq	.+4      	; 0xdb0 <vfprintf+0x542>
     dac:	89 36       	cpi	r24, 0x69	; 105
     dae:	51 f5       	brne	.+84     	; 0xe04 <vfprintf+0x596>
     db0:	56 01       	movw	r10, r12
     db2:	27 ff       	sbrs	r18, 7
     db4:	09 c0       	rjmp	.+18     	; 0xdc8 <vfprintf+0x55a>
     db6:	44 e0       	ldi	r20, 0x04	; 4
     db8:	a4 0e       	add	r10, r20
     dba:	b1 1c       	adc	r11, r1
     dbc:	f6 01       	movw	r30, r12
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	0a c0       	rjmp	.+20     	; 0xddc <vfprintf+0x56e>
     dc8:	f2 e0       	ldi	r31, 0x02	; 2
     dca:	af 0e       	add	r10, r31
     dcc:	b1 1c       	adc	r11, r1
     dce:	f6 01       	movw	r30, r12
     dd0:	60 81       	ld	r22, Z
     dd2:	71 81       	ldd	r23, Z+1	; 0x01
     dd4:	88 27       	eor	r24, r24
     dd6:	77 fd       	sbrc	r23, 7
     dd8:	80 95       	com	r24
     dda:	98 2f       	mov	r25, r24
     ddc:	12 2f       	mov	r17, r18
     dde:	1f 76       	andi	r17, 0x6F	; 111
     de0:	97 ff       	sbrs	r25, 7
     de2:	08 c0       	rjmp	.+16     	; 0xdf4 <vfprintf+0x586>
     de4:	90 95       	com	r25
     de6:	80 95       	com	r24
     de8:	70 95       	com	r23
     dea:	61 95       	neg	r22
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	8f 4f       	sbci	r24, 0xFF	; 255
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	10 68       	ori	r17, 0x80	; 128
     df4:	2a e0       	ldi	r18, 0x0A	; 10
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	a4 01       	movw	r20, r8
     dfa:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__ultoa_invert>
     dfe:	d8 2e       	mov	r13, r24
     e00:	d8 18       	sub	r13, r8
     e02:	40 c0       	rjmp	.+128    	; 0xe84 <vfprintf+0x616>
     e04:	12 2f       	mov	r17, r18
     e06:	85 37       	cpi	r24, 0x75	; 117
     e08:	21 f4       	brne	.+8      	; 0xe12 <vfprintf+0x5a4>
     e0a:	1f 7e       	andi	r17, 0xEF	; 239
     e0c:	2a e0       	ldi	r18, 0x0A	; 10
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	1f c0       	rjmp	.+62     	; 0xe50 <vfprintf+0x5e2>
     e12:	19 7f       	andi	r17, 0xF9	; 249
     e14:	8f 36       	cpi	r24, 0x6F	; 111
     e16:	a1 f0       	breq	.+40     	; 0xe40 <vfprintf+0x5d2>
     e18:	20 f4       	brcc	.+8      	; 0xe22 <vfprintf+0x5b4>
     e1a:	88 35       	cpi	r24, 0x58	; 88
     e1c:	09 f0       	breq	.+2      	; 0xe20 <vfprintf+0x5b2>
     e1e:	b2 c0       	rjmp	.+356    	; 0xf84 <vfprintf+0x716>
     e20:	0b c0       	rjmp	.+22     	; 0xe38 <vfprintf+0x5ca>
     e22:	80 37       	cpi	r24, 0x70	; 112
     e24:	21 f0       	breq	.+8      	; 0xe2e <vfprintf+0x5c0>
     e26:	88 37       	cpi	r24, 0x78	; 120
     e28:	09 f0       	breq	.+2      	; 0xe2c <vfprintf+0x5be>
     e2a:	ac c0       	rjmp	.+344    	; 0xf84 <vfprintf+0x716>
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <vfprintf+0x5c2>
     e2e:	10 61       	ori	r17, 0x10	; 16
     e30:	14 ff       	sbrs	r17, 4
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <vfprintf+0x5d8>
     e34:	14 60       	ori	r17, 0x04	; 4
     e36:	07 c0       	rjmp	.+14     	; 0xe46 <vfprintf+0x5d8>
     e38:	24 ff       	sbrs	r18, 4
     e3a:	08 c0       	rjmp	.+16     	; 0xe4c <vfprintf+0x5de>
     e3c:	16 60       	ori	r17, 0x06	; 6
     e3e:	06 c0       	rjmp	.+12     	; 0xe4c <vfprintf+0x5de>
     e40:	28 e0       	ldi	r18, 0x08	; 8
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <vfprintf+0x5e2>
     e46:	20 e1       	ldi	r18, 0x10	; 16
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x5e2>
     e4c:	20 e1       	ldi	r18, 0x10	; 16
     e4e:	32 e0       	ldi	r19, 0x02	; 2
     e50:	56 01       	movw	r10, r12
     e52:	17 ff       	sbrs	r17, 7
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <vfprintf+0x5fa>
     e56:	f4 e0       	ldi	r31, 0x04	; 4
     e58:	af 0e       	add	r10, r31
     e5a:	b1 1c       	adc	r11, r1
     e5c:	f6 01       	movw	r30, r12
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	08 c0       	rjmp	.+16     	; 0xe78 <vfprintf+0x60a>
     e68:	f2 e0       	ldi	r31, 0x02	; 2
     e6a:	af 0e       	add	r10, r31
     e6c:	b1 1c       	adc	r11, r1
     e6e:	f6 01       	movw	r30, r12
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	a4 01       	movw	r20, r8
     e7a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__ultoa_invert>
     e7e:	d8 2e       	mov	r13, r24
     e80:	d8 18       	sub	r13, r8
     e82:	1f 77       	andi	r17, 0x7F	; 127
     e84:	16 ff       	sbrs	r17, 6
     e86:	0b c0       	rjmp	.+22     	; 0xe9e <vfprintf+0x630>
     e88:	21 2f       	mov	r18, r17
     e8a:	2e 7f       	andi	r18, 0xFE	; 254
     e8c:	d7 14       	cp	r13, r7
     e8e:	50 f4       	brcc	.+20     	; 0xea4 <vfprintf+0x636>
     e90:	14 ff       	sbrs	r17, 4
     e92:	0a c0       	rjmp	.+20     	; 0xea8 <vfprintf+0x63a>
     e94:	12 fd       	sbrc	r17, 2
     e96:	08 c0       	rjmp	.+16     	; 0xea8 <vfprintf+0x63a>
     e98:	21 2f       	mov	r18, r17
     e9a:	2e 7e       	andi	r18, 0xEE	; 238
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <vfprintf+0x63a>
     e9e:	0d 2d       	mov	r16, r13
     ea0:	21 2f       	mov	r18, r17
     ea2:	03 c0       	rjmp	.+6      	; 0xeaa <vfprintf+0x63c>
     ea4:	0d 2d       	mov	r16, r13
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <vfprintf+0x63c>
     ea8:	07 2d       	mov	r16, r7
     eaa:	24 ff       	sbrs	r18, 4
     eac:	0c c0       	rjmp	.+24     	; 0xec6 <vfprintf+0x658>
     eae:	fe 01       	movw	r30, r28
     eb0:	ed 0d       	add	r30, r13
     eb2:	f1 1d       	adc	r31, r1
     eb4:	80 81       	ld	r24, Z
     eb6:	80 33       	cpi	r24, 0x30	; 48
     eb8:	11 f4       	brne	.+4      	; 0xebe <vfprintf+0x650>
     eba:	29 7e       	andi	r18, 0xE9	; 233
     ebc:	08 c0       	rjmp	.+16     	; 0xece <vfprintf+0x660>
     ebe:	22 ff       	sbrs	r18, 2
     ec0:	05 c0       	rjmp	.+10     	; 0xecc <vfprintf+0x65e>
     ec2:	0e 5f       	subi	r16, 0xFE	; 254
     ec4:	04 c0       	rjmp	.+8      	; 0xece <vfprintf+0x660>
     ec6:	82 2f       	mov	r24, r18
     ec8:	86 78       	andi	r24, 0x86	; 134
     eca:	09 f0       	breq	.+2      	; 0xece <vfprintf+0x660>
     ecc:	0f 5f       	subi	r16, 0xFF	; 255
     ece:	23 fd       	sbrc	r18, 3
     ed0:	14 c0       	rjmp	.+40     	; 0xefa <vfprintf+0x68c>
     ed2:	20 ff       	sbrs	r18, 0
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <vfprintf+0x686>
     ed6:	7d 2c       	mov	r7, r13
     ed8:	06 15       	cp	r16, r6
     eda:	60 f4       	brcc	.+24     	; 0xef4 <vfprintf+0x686>
     edc:	76 0c       	add	r7, r6
     ede:	70 1a       	sub	r7, r16
     ee0:	06 2d       	mov	r16, r6
     ee2:	08 c0       	rjmp	.+16     	; 0xef4 <vfprintf+0x686>
     ee4:	b7 01       	movw	r22, r14
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	2a 8b       	std	Y+18, r18	; 0x12
     eec:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     ef0:	0f 5f       	subi	r16, 0xFF	; 255
     ef2:	2a 89       	ldd	r18, Y+18	; 0x12
     ef4:	06 15       	cp	r16, r6
     ef6:	b0 f3       	brcs	.-20     	; 0xee4 <vfprintf+0x676>
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <vfprintf+0x694>
     efa:	06 15       	cp	r16, r6
     efc:	10 f4       	brcc	.+4      	; 0xf02 <vfprintf+0x694>
     efe:	60 1a       	sub	r6, r16
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <vfprintf+0x696>
     f02:	61 2c       	mov	r6, r1
     f04:	24 ff       	sbrs	r18, 4
     f06:	12 c0       	rjmp	.+36     	; 0xf2c <vfprintf+0x6be>
     f08:	b7 01       	movw	r22, r14
     f0a:	80 e3       	ldi	r24, 0x30	; 48
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	2a 8b       	std	Y+18, r18	; 0x12
     f10:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     f14:	2a 89       	ldd	r18, Y+18	; 0x12
     f16:	22 ff       	sbrs	r18, 2
     f18:	1e c0       	rjmp	.+60     	; 0xf56 <vfprintf+0x6e8>
     f1a:	21 ff       	sbrs	r18, 1
     f1c:	03 c0       	rjmp	.+6      	; 0xf24 <vfprintf+0x6b6>
     f1e:	88 e5       	ldi	r24, 0x58	; 88
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x6ba>
     f24:	88 e7       	ldi	r24, 0x78	; 120
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	b7 01       	movw	r22, r14
     f2a:	0c c0       	rjmp	.+24     	; 0xf44 <vfprintf+0x6d6>
     f2c:	82 2f       	mov	r24, r18
     f2e:	86 78       	andi	r24, 0x86	; 134
     f30:	91 f0       	breq	.+36     	; 0xf56 <vfprintf+0x6e8>
     f32:	21 fd       	sbrc	r18, 1
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x6cc>
     f36:	80 e2       	ldi	r24, 0x20	; 32
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <vfprintf+0x6ce>
     f3a:	8b e2       	ldi	r24, 0x2B	; 43
     f3c:	27 fd       	sbrc	r18, 7
     f3e:	8d e2       	ldi	r24, 0x2D	; 45
     f40:	b7 01       	movw	r22, r14
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <vfprintf+0x6e8>
     f4a:	b7 01       	movw	r22, r14
     f4c:	80 e3       	ldi	r24, 0x30	; 48
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     f54:	7a 94       	dec	r7
     f56:	d7 14       	cp	r13, r7
     f58:	c0 f3       	brcs	.-16     	; 0xf4a <vfprintf+0x6dc>
     f5a:	da 94       	dec	r13
     f5c:	f4 01       	movw	r30, r8
     f5e:	ed 0d       	add	r30, r13
     f60:	f1 1d       	adc	r31, r1
     f62:	b7 01       	movw	r22, r14
     f64:	80 81       	ld	r24, Z
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     f6c:	d1 10       	cpse	r13, r1
     f6e:	f5 cf       	rjmp	.-22     	; 0xf5a <vfprintf+0x6ec>
     f70:	06 c0       	rjmp	.+12     	; 0xf7e <vfprintf+0x710>
     f72:	b7 01       	movw	r22, r14
     f74:	80 e2       	ldi	r24, 0x20	; 32
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fputc>
     f7c:	6a 94       	dec	r6
     f7e:	61 10       	cpse	r6, r1
     f80:	f8 cf       	rjmp	.-16     	; 0xf72 <vfprintf+0x704>
     f82:	99 cc       	rjmp	.-1742   	; 0x8b6 <vfprintf+0x48>
     f84:	f7 01       	movw	r30, r14
     f86:	26 81       	ldd	r18, Z+6	; 0x06
     f88:	37 81       	ldd	r19, Z+7	; 0x07
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <vfprintf+0x722>
     f8c:	2f ef       	ldi	r18, 0xFF	; 255
     f8e:	3f ef       	ldi	r19, 0xFF	; 255
     f90:	c9 01       	movw	r24, r18
     f92:	62 96       	adiw	r28, 0x12	; 18
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	df 90       	pop	r13
     fac:	cf 90       	pop	r12
     fae:	bf 90       	pop	r11
     fb0:	af 90       	pop	r10
     fb2:	9f 90       	pop	r9
     fb4:	8f 90       	pop	r8
     fb6:	7f 90       	pop	r7
     fb8:	6f 90       	pop	r6
     fba:	5f 90       	pop	r5
     fbc:	4f 90       	pop	r4
     fbe:	3f 90       	pop	r3
     fc0:	2f 90       	pop	r2
     fc2:	08 95       	ret

00000fc4 <__udivmodhi4>:
     fc4:	aa 1b       	sub	r26, r26
     fc6:	bb 1b       	sub	r27, r27
     fc8:	51 e1       	ldi	r21, 0x11	; 17
     fca:	07 c0       	rjmp	.+14     	; 0xfda <__udivmodhi4_ep>

00000fcc <__udivmodhi4_loop>:
     fcc:	aa 1f       	adc	r26, r26
     fce:	bb 1f       	adc	r27, r27
     fd0:	a6 17       	cp	r26, r22
     fd2:	b7 07       	cpc	r27, r23
     fd4:	10 f0       	brcs	.+4      	; 0xfda <__udivmodhi4_ep>
     fd6:	a6 1b       	sub	r26, r22
     fd8:	b7 0b       	sbc	r27, r23

00000fda <__udivmodhi4_ep>:
     fda:	88 1f       	adc	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	5a 95       	dec	r21
     fe0:	a9 f7       	brne	.-22     	; 0xfcc <__udivmodhi4_loop>
     fe2:	80 95       	com	r24
     fe4:	90 95       	com	r25
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	08 95       	ret

00000fec <__divmodhi4>:
     fec:	97 fb       	bst	r25, 7
     fee:	07 2e       	mov	r0, r23
     ff0:	16 f4       	brtc	.+4      	; 0xff6 <__divmodhi4+0xa>
     ff2:	00 94       	com	r0
     ff4:	07 d0       	rcall	.+14     	; 0x1004 <__divmodhi4_neg1>
     ff6:	77 fd       	sbrc	r23, 7
     ff8:	09 d0       	rcall	.+18     	; 0x100c <__divmodhi4_neg2>
     ffa:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__udivmodhi4>
     ffe:	07 fc       	sbrc	r0, 7
    1000:	05 d0       	rcall	.+10     	; 0x100c <__divmodhi4_neg2>
    1002:	3e f4       	brtc	.+14     	; 0x1012 <__divmodhi4_exit>

00001004 <__divmodhi4_neg1>:
    1004:	90 95       	com	r25
    1006:	81 95       	neg	r24
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	08 95       	ret

0000100c <__divmodhi4_neg2>:
    100c:	70 95       	com	r23
    100e:	61 95       	neg	r22
    1010:	7f 4f       	sbci	r23, 0xFF	; 255

00001012 <__divmodhi4_exit>:
    1012:	08 95       	ret

00001014 <__ftoa_engine>:
    1014:	28 30       	cpi	r18, 0x08	; 8
    1016:	08 f0       	brcs	.+2      	; 0x101a <__ftoa_engine+0x6>
    1018:	27 e0       	ldi	r18, 0x07	; 7
    101a:	33 27       	eor	r19, r19
    101c:	da 01       	movw	r26, r20
    101e:	99 0f       	add	r25, r25
    1020:	31 1d       	adc	r19, r1
    1022:	87 fd       	sbrc	r24, 7
    1024:	91 60       	ori	r25, 0x01	; 1
    1026:	00 96       	adiw	r24, 0x00	; 0
    1028:	61 05       	cpc	r22, r1
    102a:	71 05       	cpc	r23, r1
    102c:	39 f4       	brne	.+14     	; 0x103c <__ftoa_engine+0x28>
    102e:	32 60       	ori	r19, 0x02	; 2
    1030:	2e 5f       	subi	r18, 0xFE	; 254
    1032:	3d 93       	st	X+, r19
    1034:	30 e3       	ldi	r19, 0x30	; 48
    1036:	2a 95       	dec	r18
    1038:	e1 f7       	brne	.-8      	; 0x1032 <__ftoa_engine+0x1e>
    103a:	08 95       	ret
    103c:	9f 3f       	cpi	r25, 0xFF	; 255
    103e:	30 f0       	brcs	.+12     	; 0x104c <__ftoa_engine+0x38>
    1040:	80 38       	cpi	r24, 0x80	; 128
    1042:	71 05       	cpc	r23, r1
    1044:	61 05       	cpc	r22, r1
    1046:	09 f0       	breq	.+2      	; 0x104a <__ftoa_engine+0x36>
    1048:	3c 5f       	subi	r19, 0xFC	; 252
    104a:	3c 5f       	subi	r19, 0xFC	; 252
    104c:	3d 93       	st	X+, r19
    104e:	91 30       	cpi	r25, 0x01	; 1
    1050:	08 f0       	brcs	.+2      	; 0x1054 <__ftoa_engine+0x40>
    1052:	80 68       	ori	r24, 0x80	; 128
    1054:	91 1d       	adc	r25, r1
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	1f 93       	push	r17
    105c:	0f 93       	push	r16
    105e:	ff 92       	push	r15
    1060:	ef 92       	push	r14
    1062:	19 2f       	mov	r17, r25
    1064:	98 7f       	andi	r25, 0xF8	; 248
    1066:	96 95       	lsr	r25
    1068:	e9 2f       	mov	r30, r25
    106a:	96 95       	lsr	r25
    106c:	96 95       	lsr	r25
    106e:	e9 0f       	add	r30, r25
    1070:	ff 27       	eor	r31, r31
    1072:	e3 5b       	subi	r30, 0xB3	; 179
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	99 27       	eor	r25, r25
    1078:	33 27       	eor	r19, r19
    107a:	ee 24       	eor	r14, r14
    107c:	ff 24       	eor	r15, r15
    107e:	a7 01       	movw	r20, r14
    1080:	e7 01       	movw	r28, r14
    1082:	05 90       	lpm	r0, Z+
    1084:	08 94       	sec
    1086:	07 94       	ror	r0
    1088:	28 f4       	brcc	.+10     	; 0x1094 <__ftoa_engine+0x80>
    108a:	36 0f       	add	r19, r22
    108c:	e7 1e       	adc	r14, r23
    108e:	f8 1e       	adc	r15, r24
    1090:	49 1f       	adc	r20, r25
    1092:	51 1d       	adc	r21, r1
    1094:	66 0f       	add	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	06 94       	lsr	r0
    109e:	a1 f7       	brne	.-24     	; 0x1088 <__ftoa_engine+0x74>
    10a0:	05 90       	lpm	r0, Z+
    10a2:	07 94       	ror	r0
    10a4:	28 f4       	brcc	.+10     	; 0x10b0 <__ftoa_engine+0x9c>
    10a6:	e7 0e       	add	r14, r23
    10a8:	f8 1e       	adc	r15, r24
    10aa:	49 1f       	adc	r20, r25
    10ac:	56 1f       	adc	r21, r22
    10ae:	c1 1d       	adc	r28, r1
    10b0:	77 0f       	add	r23, r23
    10b2:	88 1f       	adc	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	66 1f       	adc	r22, r22
    10b8:	06 94       	lsr	r0
    10ba:	a1 f7       	brne	.-24     	; 0x10a4 <__ftoa_engine+0x90>
    10bc:	05 90       	lpm	r0, Z+
    10be:	07 94       	ror	r0
    10c0:	28 f4       	brcc	.+10     	; 0x10cc <__ftoa_engine+0xb8>
    10c2:	f8 0e       	add	r15, r24
    10c4:	49 1f       	adc	r20, r25
    10c6:	56 1f       	adc	r21, r22
    10c8:	c7 1f       	adc	r28, r23
    10ca:	d1 1d       	adc	r29, r1
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	66 1f       	adc	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	06 94       	lsr	r0
    10d6:	a1 f7       	brne	.-24     	; 0x10c0 <__ftoa_engine+0xac>
    10d8:	05 90       	lpm	r0, Z+
    10da:	07 94       	ror	r0
    10dc:	20 f4       	brcc	.+8      	; 0x10e6 <__ftoa_engine+0xd2>
    10de:	49 0f       	add	r20, r25
    10e0:	56 1f       	adc	r21, r22
    10e2:	c7 1f       	adc	r28, r23
    10e4:	d8 1f       	adc	r29, r24
    10e6:	99 0f       	add	r25, r25
    10e8:	66 1f       	adc	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	06 94       	lsr	r0
    10f0:	a9 f7       	brne	.-22     	; 0x10dc <__ftoa_engine+0xc8>
    10f2:	84 91       	lpm	r24, Z
    10f4:	10 95       	com	r17
    10f6:	17 70       	andi	r17, 0x07	; 7
    10f8:	41 f0       	breq	.+16     	; 0x110a <__ftoa_engine+0xf6>
    10fa:	d6 95       	lsr	r29
    10fc:	c7 95       	ror	r28
    10fe:	57 95       	ror	r21
    1100:	47 95       	ror	r20
    1102:	f7 94       	ror	r15
    1104:	e7 94       	ror	r14
    1106:	1a 95       	dec	r17
    1108:	c1 f7       	brne	.-16     	; 0x10fa <__ftoa_engine+0xe6>
    110a:	e3 ef       	ldi	r30, 0xF3	; 243
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	68 94       	set
    1110:	15 90       	lpm	r1, Z+
    1112:	15 91       	lpm	r17, Z+
    1114:	35 91       	lpm	r19, Z+
    1116:	65 91       	lpm	r22, Z+
    1118:	95 91       	lpm	r25, Z+
    111a:	05 90       	lpm	r0, Z+
    111c:	7f e2       	ldi	r23, 0x2F	; 47
    111e:	73 95       	inc	r23
    1120:	e1 18       	sub	r14, r1
    1122:	f1 0a       	sbc	r15, r17
    1124:	43 0b       	sbc	r20, r19
    1126:	56 0b       	sbc	r21, r22
    1128:	c9 0b       	sbc	r28, r25
    112a:	d0 09       	sbc	r29, r0
    112c:	c0 f7       	brcc	.-16     	; 0x111e <__ftoa_engine+0x10a>
    112e:	e1 0c       	add	r14, r1
    1130:	f1 1e       	adc	r15, r17
    1132:	43 1f       	adc	r20, r19
    1134:	56 1f       	adc	r21, r22
    1136:	c9 1f       	adc	r28, r25
    1138:	d0 1d       	adc	r29, r0
    113a:	7e f4       	brtc	.+30     	; 0x115a <__ftoa_engine+0x146>
    113c:	70 33       	cpi	r23, 0x30	; 48
    113e:	11 f4       	brne	.+4      	; 0x1144 <__ftoa_engine+0x130>
    1140:	8a 95       	dec	r24
    1142:	e6 cf       	rjmp	.-52     	; 0x1110 <__ftoa_engine+0xfc>
    1144:	e8 94       	clt
    1146:	01 50       	subi	r16, 0x01	; 1
    1148:	30 f0       	brcs	.+12     	; 0x1156 <__ftoa_engine+0x142>
    114a:	08 0f       	add	r16, r24
    114c:	0a f4       	brpl	.+2      	; 0x1150 <__ftoa_engine+0x13c>
    114e:	00 27       	eor	r16, r16
    1150:	02 17       	cp	r16, r18
    1152:	08 f4       	brcc	.+2      	; 0x1156 <__ftoa_engine+0x142>
    1154:	20 2f       	mov	r18, r16
    1156:	23 95       	inc	r18
    1158:	02 2f       	mov	r16, r18
    115a:	7a 33       	cpi	r23, 0x3A	; 58
    115c:	28 f0       	brcs	.+10     	; 0x1168 <__ftoa_engine+0x154>
    115e:	79 e3       	ldi	r23, 0x39	; 57
    1160:	7d 93       	st	X+, r23
    1162:	2a 95       	dec	r18
    1164:	e9 f7       	brne	.-6      	; 0x1160 <__ftoa_engine+0x14c>
    1166:	10 c0       	rjmp	.+32     	; 0x1188 <__ftoa_engine+0x174>
    1168:	7d 93       	st	X+, r23
    116a:	2a 95       	dec	r18
    116c:	89 f6       	brne	.-94     	; 0x1110 <__ftoa_engine+0xfc>
    116e:	06 94       	lsr	r0
    1170:	97 95       	ror	r25
    1172:	67 95       	ror	r22
    1174:	37 95       	ror	r19
    1176:	17 95       	ror	r17
    1178:	17 94       	ror	r1
    117a:	e1 18       	sub	r14, r1
    117c:	f1 0a       	sbc	r15, r17
    117e:	43 0b       	sbc	r20, r19
    1180:	56 0b       	sbc	r21, r22
    1182:	c9 0b       	sbc	r28, r25
    1184:	d0 09       	sbc	r29, r0
    1186:	98 f0       	brcs	.+38     	; 0x11ae <__ftoa_engine+0x19a>
    1188:	23 95       	inc	r18
    118a:	7e 91       	ld	r23, -X
    118c:	73 95       	inc	r23
    118e:	7a 33       	cpi	r23, 0x3A	; 58
    1190:	08 f0       	brcs	.+2      	; 0x1194 <__ftoa_engine+0x180>
    1192:	70 e3       	ldi	r23, 0x30	; 48
    1194:	7c 93       	st	X, r23
    1196:	20 13       	cpse	r18, r16
    1198:	b8 f7       	brcc	.-18     	; 0x1188 <__ftoa_engine+0x174>
    119a:	7e 91       	ld	r23, -X
    119c:	70 61       	ori	r23, 0x10	; 16
    119e:	7d 93       	st	X+, r23
    11a0:	30 f0       	brcs	.+12     	; 0x11ae <__ftoa_engine+0x19a>
    11a2:	83 95       	inc	r24
    11a4:	71 e3       	ldi	r23, 0x31	; 49
    11a6:	7d 93       	st	X+, r23
    11a8:	70 e3       	ldi	r23, 0x30	; 48
    11aa:	2a 95       	dec	r18
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <__ftoa_engine+0x192>
    11ae:	11 24       	eor	r1, r1
    11b0:	ef 90       	pop	r14
    11b2:	ff 90       	pop	r15
    11b4:	0f 91       	pop	r16
    11b6:	1f 91       	pop	r17
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	99 27       	eor	r25, r25
    11be:	87 fd       	sbrc	r24, 7
    11c0:	90 95       	com	r25
    11c2:	08 95       	ret

000011c4 <strnlen_P>:
    11c4:	fc 01       	movw	r30, r24
    11c6:	05 90       	lpm	r0, Z+
    11c8:	61 50       	subi	r22, 0x01	; 1
    11ca:	70 40       	sbci	r23, 0x00	; 0
    11cc:	01 10       	cpse	r0, r1
    11ce:	d8 f7       	brcc	.-10     	; 0x11c6 <strnlen_P+0x2>
    11d0:	80 95       	com	r24
    11d2:	90 95       	com	r25
    11d4:	8e 0f       	add	r24, r30
    11d6:	9f 1f       	adc	r25, r31
    11d8:	08 95       	ret

000011da <strnlen>:
    11da:	fc 01       	movw	r30, r24
    11dc:	61 50       	subi	r22, 0x01	; 1
    11de:	70 40       	sbci	r23, 0x00	; 0
    11e0:	01 90       	ld	r0, Z+
    11e2:	01 10       	cpse	r0, r1
    11e4:	d8 f7       	brcc	.-10     	; 0x11dc <strnlen+0x2>
    11e6:	80 95       	com	r24
    11e8:	90 95       	com	r25
    11ea:	8e 0f       	add	r24, r30
    11ec:	9f 1f       	adc	r25, r31
    11ee:	08 95       	ret

000011f0 <fputc>:
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	8c 01       	movw	r16, r24
    11fa:	eb 01       	movw	r28, r22
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	81 fd       	sbrc	r24, 1
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <fputc+0x18>
    1202:	0f ef       	ldi	r16, 0xFF	; 255
    1204:	1f ef       	ldi	r17, 0xFF	; 255
    1206:	1a c0       	rjmp	.+52     	; 0x123c <fputc+0x4c>
    1208:	82 ff       	sbrs	r24, 2
    120a:	0d c0       	rjmp	.+26     	; 0x1226 <fputc+0x36>
    120c:	2e 81       	ldd	r18, Y+6	; 0x06
    120e:	3f 81       	ldd	r19, Y+7	; 0x07
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	28 17       	cp	r18, r24
    1216:	39 07       	cpc	r19, r25
    1218:	64 f4       	brge	.+24     	; 0x1232 <fputc+0x42>
    121a:	e8 81       	ld	r30, Y
    121c:	f9 81       	ldd	r31, Y+1	; 0x01
    121e:	01 93       	st	Z+, r16
    1220:	f9 83       	std	Y+1, r31	; 0x01
    1222:	e8 83       	st	Y, r30
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <fputc+0x42>
    1226:	e8 85       	ldd	r30, Y+8	; 0x08
    1228:	f9 85       	ldd	r31, Y+9	; 0x09
    122a:	80 2f       	mov	r24, r16
    122c:	09 95       	icall
    122e:	89 2b       	or	r24, r25
    1230:	41 f7       	brne	.-48     	; 0x1202 <fputc+0x12>
    1232:	8e 81       	ldd	r24, Y+6	; 0x06
    1234:	9f 81       	ldd	r25, Y+7	; 0x07
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	9f 83       	std	Y+7, r25	; 0x07
    123a:	8e 83       	std	Y+6, r24	; 0x06
    123c:	c8 01       	movw	r24, r16
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	08 95       	ret

00001248 <sprintf>:
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	2e 97       	sbiw	r28, 0x0e	; 14
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	0d 89       	ldd	r16, Y+21	; 0x15
    1262:	1e 89       	ldd	r17, Y+22	; 0x16
    1264:	86 e0       	ldi	r24, 0x06	; 6
    1266:	8c 83       	std	Y+4, r24	; 0x04
    1268:	1a 83       	std	Y+2, r17	; 0x02
    126a:	09 83       	std	Y+1, r16	; 0x01
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	9f e7       	ldi	r25, 0x7F	; 127
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8d 83       	std	Y+5, r24	; 0x05
    1274:	ce 01       	movw	r24, r28
    1276:	49 96       	adiw	r24, 0x19	; 25
    1278:	ac 01       	movw	r20, r24
    127a:	6f 89       	ldd	r22, Y+23	; 0x17
    127c:	78 8d       	ldd	r23, Y+24	; 0x18
    127e:	ce 01       	movw	r24, r28
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	0e 94 37 04 	call	0x86e	; 0x86e <vfprintf>
    1286:	ef 81       	ldd	r30, Y+7	; 0x07
    1288:	f8 85       	ldd	r31, Y+8	; 0x08
    128a:	e0 0f       	add	r30, r16
    128c:	f1 1f       	adc	r31, r17
    128e:	10 82       	st	Z, r1
    1290:	2e 96       	adiw	r28, 0x0e	; 14
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	08 95       	ret

000012a6 <__ultoa_invert>:
    12a6:	fa 01       	movw	r30, r20
    12a8:	aa 27       	eor	r26, r26
    12aa:	28 30       	cpi	r18, 0x08	; 8
    12ac:	51 f1       	breq	.+84     	; 0x1302 <__ultoa_invert+0x5c>
    12ae:	20 31       	cpi	r18, 0x10	; 16
    12b0:	81 f1       	breq	.+96     	; 0x1312 <__ultoa_invert+0x6c>
    12b2:	e8 94       	clt
    12b4:	6f 93       	push	r22
    12b6:	6e 7f       	andi	r22, 0xFE	; 254
    12b8:	6e 5f       	subi	r22, 0xFE	; 254
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	8f 4f       	sbci	r24, 0xFF	; 255
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	af 4f       	sbci	r26, 0xFF	; 255
    12c2:	b1 e0       	ldi	r27, 0x01	; 1
    12c4:	3e d0       	rcall	.+124    	; 0x1342 <__ultoa_invert+0x9c>
    12c6:	b4 e0       	ldi	r27, 0x04	; 4
    12c8:	3c d0       	rcall	.+120    	; 0x1342 <__ultoa_invert+0x9c>
    12ca:	67 0f       	add	r22, r23
    12cc:	78 1f       	adc	r23, r24
    12ce:	89 1f       	adc	r24, r25
    12d0:	9a 1f       	adc	r25, r26
    12d2:	a1 1d       	adc	r26, r1
    12d4:	68 0f       	add	r22, r24
    12d6:	79 1f       	adc	r23, r25
    12d8:	8a 1f       	adc	r24, r26
    12da:	91 1d       	adc	r25, r1
    12dc:	a1 1d       	adc	r26, r1
    12de:	6a 0f       	add	r22, r26
    12e0:	71 1d       	adc	r23, r1
    12e2:	81 1d       	adc	r24, r1
    12e4:	91 1d       	adc	r25, r1
    12e6:	a1 1d       	adc	r26, r1
    12e8:	20 d0       	rcall	.+64     	; 0x132a <__ultoa_invert+0x84>
    12ea:	09 f4       	brne	.+2      	; 0x12ee <__ultoa_invert+0x48>
    12ec:	68 94       	set
    12ee:	3f 91       	pop	r19
    12f0:	2a e0       	ldi	r18, 0x0A	; 10
    12f2:	26 9f       	mul	r18, r22
    12f4:	11 24       	eor	r1, r1
    12f6:	30 19       	sub	r19, r0
    12f8:	30 5d       	subi	r19, 0xD0	; 208
    12fa:	31 93       	st	Z+, r19
    12fc:	de f6       	brtc	.-74     	; 0x12b4 <__ultoa_invert+0xe>
    12fe:	cf 01       	movw	r24, r30
    1300:	08 95       	ret
    1302:	46 2f       	mov	r20, r22
    1304:	47 70       	andi	r20, 0x07	; 7
    1306:	40 5d       	subi	r20, 0xD0	; 208
    1308:	41 93       	st	Z+, r20
    130a:	b3 e0       	ldi	r27, 0x03	; 3
    130c:	0f d0       	rcall	.+30     	; 0x132c <__ultoa_invert+0x86>
    130e:	c9 f7       	brne	.-14     	; 0x1302 <__ultoa_invert+0x5c>
    1310:	f6 cf       	rjmp	.-20     	; 0x12fe <__ultoa_invert+0x58>
    1312:	46 2f       	mov	r20, r22
    1314:	4f 70       	andi	r20, 0x0F	; 15
    1316:	40 5d       	subi	r20, 0xD0	; 208
    1318:	4a 33       	cpi	r20, 0x3A	; 58
    131a:	18 f0       	brcs	.+6      	; 0x1322 <__ultoa_invert+0x7c>
    131c:	49 5d       	subi	r20, 0xD9	; 217
    131e:	31 fd       	sbrc	r19, 1
    1320:	40 52       	subi	r20, 0x20	; 32
    1322:	41 93       	st	Z+, r20
    1324:	02 d0       	rcall	.+4      	; 0x132a <__ultoa_invert+0x84>
    1326:	a9 f7       	brne	.-22     	; 0x1312 <__ultoa_invert+0x6c>
    1328:	ea cf       	rjmp	.-44     	; 0x12fe <__ultoa_invert+0x58>
    132a:	b4 e0       	ldi	r27, 0x04	; 4
    132c:	a6 95       	lsr	r26
    132e:	97 95       	ror	r25
    1330:	87 95       	ror	r24
    1332:	77 95       	ror	r23
    1334:	67 95       	ror	r22
    1336:	ba 95       	dec	r27
    1338:	c9 f7       	brne	.-14     	; 0x132c <__ultoa_invert+0x86>
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	61 05       	cpc	r22, r1
    133e:	71 05       	cpc	r23, r1
    1340:	08 95       	ret
    1342:	9b 01       	movw	r18, r22
    1344:	ac 01       	movw	r20, r24
    1346:	0a 2e       	mov	r0, r26
    1348:	06 94       	lsr	r0
    134a:	57 95       	ror	r21
    134c:	47 95       	ror	r20
    134e:	37 95       	ror	r19
    1350:	27 95       	ror	r18
    1352:	ba 95       	dec	r27
    1354:	c9 f7       	brne	.-14     	; 0x1348 <__ultoa_invert+0xa2>
    1356:	62 0f       	add	r22, r18
    1358:	73 1f       	adc	r23, r19
    135a:	84 1f       	adc	r24, r20
    135c:	95 1f       	adc	r25, r21
    135e:	a0 1d       	adc	r26, r0
    1360:	08 95       	ret

00001362 <_exit>:
    1362:	f8 94       	cli

00001364 <__stop_program>:
    1364:	ff cf       	rjmp	.-2      	; 0x1364 <__stop_program>
