
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00001478  0000150c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080010a  0080010a  00001516  2**0
                  ALLOC
  3 .stab         000019d4  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002ed  00000000  00000000  00002eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000031d9  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ab5  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007fd  00000000  00000000  00004d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ba0  00000000  00000000  00005562  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000444  00000000  00000000  00006104  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005b3  00000000  00000000  00006548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000142e  00000000  00000000  00006afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00007f29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_12>
      34:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_13>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_16>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_number>:
      cc:	43 61 70 61 63 69 74 61 6e 63 65 3d 00 00           Capacitance=..

000000da <LCD_initialize>:
      da:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000eb <__c.2006>:
      eb:	6e 61 6e 00                                         nan.

000000ef <__c.2004>:
      ef:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ff:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10f:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1af:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1bf:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1cf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1df:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e4       	ldi	r29, 0x40	; 64
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	e8 e7       	ldi	r30, 0x78	; 120
     202:	f4 e1       	ldi	r31, 0x14	; 20
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	aa 30       	cpi	r26, 0x0A	; 10
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	aa e0       	ldi	r26, 0x0A	; 10
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a3 33       	cpi	r26, 0x33	; 51
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 09 04 	call	0x812	; 0x812 <main>
     228:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     230:	98 2f       	mov	r25, r24
     232:	90 7f       	andi	r25, 0xF0	; 240
     234:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_RS;
     236:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     238:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23a:	ef e3       	ldi	r30, 0x3F	; 63
     23c:	ff e1       	ldi	r31, 0x1F	; 31
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <LCDsendChar+0xe>
     242:	00 c0       	rjmp	.+0      	; 0x244 <LCDsendChar+0x14>
     244:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     246:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     248:	40 98       	cbi	0x08, 0	; 8
     24a:	ef e3       	ldi	r30, 0x3F	; 63
     24c:	ff e1       	ldi	r31, 0x1F	; 31
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <LCDsendChar+0x1e>
     252:	00 c0       	rjmp	.+0      	; 0x254 <LCDsendChar+0x24>
     254:	00 00       	nop
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     256:	f0 e1       	ldi	r31, 0x10	; 16
     258:	8f 9f       	mul	r24, r31
     25a:	c0 01       	movw	r24, r0
     25c:	11 24       	eor	r1, r1
     25e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     260:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     262:	42 9a       	sbi	0x08, 2	; 8
     264:	8f e3       	ldi	r24, 0x3F	; 63
     266:	9f e1       	ldi	r25, 0x1F	; 31
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <LCDsendChar+0x38>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <LCDsendChar+0x3e>
     26e:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     270:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     272:	40 98       	cbi	0x08, 0	; 8
     274:	ef e3       	ldi	r30, 0x3F	; 63
     276:	ff e1       	ldi	r31, 0x1F	; 31
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <LCDsendChar+0x48>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <LCDsendChar+0x4e>
     27e:	00 00       	nop
     280:	08 95       	ret

00000282 <LCDsendCommand>:
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     282:	98 2f       	mov	r25, r24
     284:	90 7f       	andi	r25, 0xF0	; 240
     286:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_E;		
     288:	42 9a       	sbi	0x08, 2	; 8
     28a:	ef e3       	ldi	r30, 0x3F	; 63
     28c:	ff e1       	ldi	r31, 0x1F	; 31
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <LCDsendCommand+0xc>
     292:	00 c0       	rjmp	.+0      	; 0x294 <LCDsendCommand+0x12>
     294:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     296:	42 98       	cbi	0x08, 2	; 8
     298:	ef e3       	ldi	r30, 0x3F	; 63
     29a:	ff e1       	ldi	r31, 0x1F	; 31
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <LCDsendCommand+0x1a>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCDsendCommand+0x20>
     2a2:	00 00       	nop
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     2a4:	f0 e1       	ldi	r31, 0x10	; 16
     2a6:	8f 9f       	mul	r24, r31
     2a8:	c0 01       	movw	r24, r0
     2aa:	11 24       	eor	r1, r1
     2ac:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     2ae:	42 9a       	sbi	0x08, 2	; 8
     2b0:	8f e3       	ldi	r24, 0x3F	; 63
     2b2:	9f e1       	ldi	r25, 0x1F	; 31
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCDsendCommand+0x32>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCDsendCommand+0x38>
     2ba:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     2bc:	42 98       	cbi	0x08, 2	; 8
     2be:	ef e3       	ldi	r30, 0x3F	; 63
     2c0:	ff e1       	ldi	r31, 0x1F	; 31
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCDsendCommand+0x40>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCDsendCommand+0x46>
     2c8:	00 00       	nop
     2ca:	08 95       	ret

000002cc <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000002d2 <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000002d8 <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	1f 92       	push	r1
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	71 f0       	breq	.+28     	; 0x308 <LCDstring+0x30>
     2ec:	18 2f       	mov	r17, r24
     2ee:	7c 01       	movw	r14, r24
     2f0:	07 c0       	rjmp	.+14     	; 0x300 <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     2f2:	f7 01       	movw	r30, r14
     2f4:	81 91       	ld	r24, Z+
     2f6:	7f 01       	movw	r14, r30
     2f8:	69 83       	std	Y+1, r22	; 0x01
     2fa:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
     2fe:	69 81       	ldd	r22, Y+1	; 0x01

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     300:	8e 2d       	mov	r24, r14
     302:	81 1b       	sub	r24, r17
     304:	86 17       	cp	r24, r22
     306:	a8 f3       	brcs	.-22     	; 0x2f2 <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     308:	0f 90       	pop	r0
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	08 95       	ret

00000316 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     316:	62 30       	cpi	r22, 0x02	; 2
     318:	31 f0       	breq	.+12     	; 0x326 <LCDGotoXY+0x10>
     31a:	63 30       	cpi	r22, 0x03	; 3
     31c:	31 f0       	breq	.+12     	; 0x32a <LCDGotoXY+0x14>
     31e:	61 30       	cpi	r22, 0x01	; 1
     320:	29 f4       	brne	.+10     	; 0x32c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     322:	80 5c       	subi	r24, 0xC0	; 192
     324:	03 c0       	rjmp	.+6      	; 0x32c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     326:	8c 5e       	subi	r24, 0xEC	; 236
     328:	01 c0       	rjmp	.+2      	; 0x32c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     32a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     32c:	80 68       	ori	r24, 0x80	; 128
     32e:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

00000332 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	ec 01       	movw	r28, r24
     33a:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     33c:	64 2f       	mov	r22, r20
     33e:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	03 c0       	rjmp	.+6      	; 0x34c <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     346:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     34a:	1f 5f       	subi	r17, 0xFF	; 255
     34c:	fe 01       	movw	r30, r28
     34e:	e1 0f       	add	r30, r17
     350:	f1 1d       	adc	r31, r1
     352:	84 91       	lpm	r24, Z
     354:	81 11       	cpse	r24, r1
     356:	f7 cf       	rjmp	.-18     	; 0x346 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	08 95       	ret

00000360 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     36e:	88 e0       	ldi	r24, 0x08	; 8
     370:	68 9f       	mul	r22, r24
     372:	b0 01       	movw	r22, r0
     374:	11 24       	eor	r1, r1
     376:	80 e4       	ldi	r24, 0x40	; 64
     378:	e8 2e       	mov	r14, r24
     37a:	e6 2a       	or	r14, r22
	for (i=0; i<8; i++){
     37c:	c0 e0       	ldi	r28, 0x00	; 0
     37e:	d0 e0       	ldi	r29, 0x00	; 0
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     380:	f8 01       	movw	r30, r16
     382:	ec 0f       	add	r30, r28
     384:	fd 1f       	adc	r31, r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     386:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
     388:	8c 2f       	mov	r24, r28
     38a:	8e 0d       	add	r24, r14
     38c:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendChar(pcc);
     390:	8f 2d       	mov	r24, r15
     392:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     396:	21 96       	adiw	r28, 0x01	; 1
     398:	c8 30       	cpi	r28, 0x08	; 8
     39a:	d1 05       	cpc	r29, r1
     39c:	89 f7       	brne	.-30     	; 0x380 <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	08 95       	ret

000003ac <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	8f e5       	ldi	r24, 0x5F	; 95
     3b4:	9a ee       	ldi	r25, 0xEA	; 234
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <LCDinit+0xa>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCDinit+0x10>
     3bc:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     3be:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     3c0:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     3c2:	87 b1       	in	r24, 0x07	; 7
     3c4:	80 6f       	ori	r24, 0xF0	; 240
     3c6:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     3c8:	87 b1       	in	r24, 0x07	; 7
     3ca:	87 60       	ori	r24, 0x07	; 7
     3cc:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     3ce:	80 e3       	ldi	r24, 0x30	; 48
     3d0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     3d2:	42 9a       	sbi	0x08, 2	; 8
     3d4:	ef e3       	ldi	r30, 0x3F	; 63
     3d6:	ff e1       	ldi	r31, 0x1F	; 31
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCDinit+0x2c>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <LCDinit+0x32>
     3de:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     3e0:	42 98       	cbi	0x08, 2	; 8
     3e2:	ef e3       	ldi	r30, 0x3F	; 63
     3e4:	ff e1       	ldi	r31, 0x1F	; 31
     3e6:	31 97       	sbiw	r30, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCDinit+0x3a>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCDinit+0x40>
     3ec:	00 00       	nop
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     3ee:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     3f0:	42 9a       	sbi	0x08, 2	; 8
     3f2:	8f e3       	ldi	r24, 0x3F	; 63
     3f4:	9f e1       	ldi	r25, 0x1F	; 31
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCDinit+0x4a>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCDinit+0x50>
     3fc:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     3fe:	42 98       	cbi	0x08, 2	; 8
     400:	ef e3       	ldi	r30, 0x3F	; 63
     402:	ff e1       	ldi	r31, 0x1F	; 31
     404:	31 97       	sbiw	r30, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <LCDinit+0x58>
     408:	00 c0       	rjmp	.+0      	; 0x40a <LCDinit+0x5e>
     40a:	00 00       	nop
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     40c:	80 e2       	ldi	r24, 0x20	; 32
     40e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     410:	42 9a       	sbi	0x08, 2	; 8
     412:	8f e3       	ldi	r24, 0x3F	; 63
     414:	9f e1       	ldi	r25, 0x1F	; 31
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <LCDinit+0x6a>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <LCDinit+0x70>
     41c:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     41e:	42 98       	cbi	0x08, 2	; 8
     420:	ef e3       	ldi	r30, 0x3F	; 63
     422:	ff e1       	ldi	r31, 0x1F	; 31
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <LCDinit+0x78>
     428:	00 c0       	rjmp	.+0      	; 0x42a <LCDinit+0x7e>
     42a:	00 00       	nop
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     42c:	88 e2       	ldi	r24, 0x28	; 40
     42e:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     432:	8c e0       	ldi	r24, 0x0C	; 12
     434:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
     438:	cc e8       	ldi	r28, 0x8C	; 140
     43a:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     43c:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     43e:	16 2f       	mov	r17, r22
     440:	1f 5f       	subi	r17, 0xFF	; 255
     442:	ce 01       	movw	r24, r28
     444:	0e 94 b0 01 	call	0x360	; 0x360 <LCDdefinechar>
     448:	28 96       	adiw	r28, 0x08	; 8
     44a:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     44c:	18 30       	cpi	r17, 0x08	; 8
     44e:	b9 f7       	brne	.-18     	; 0x43e <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	08 95       	ret

00000458 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     45e:	c0 e0       	ldi	r28, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
     462:	8e e1       	ldi	r24, 0x1E	; 30
     464:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     468:	cf 5f       	subi	r28, 0xFF	; 255
     46a:	cd 13       	cpse	r28, r29
     46c:	fa cf       	rjmp	.-12     	; 0x462 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     47a:	c0 e0       	ldi	r28, 0x00	; 0
     47c:	04 c0       	rjmp	.+8      	; 0x486 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
     47e:	88 e1       	ldi	r24, 0x18	; 24
     480:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     484:	cf 5f       	subi	r28, 0xFF	; 255
     486:	cd 13       	cpse	r28, r29
     488:	fa cf       	rjmp	.-12     	; 0x47e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     490:	8e e0       	ldi	r24, 0x0E	; 14
     492:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

00000496 <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     496:	8f e0       	ldi	r24, 0x0F	; 15
     498:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

0000049c <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     49c:	8c e0       	ldi	r24, 0x0C	; 12
     49e:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004a2 <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     4a2:	88 e0       	ldi	r24, 0x08	; 8
     4a4:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004a8 <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     4a8:	8c e0       	ldi	r24, 0x0C	; 12
     4aa:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004ae <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     4b4:	c0 e0       	ldi	r28, 0x00	; 0
     4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
     4b8:	80 e1       	ldi	r24, 0x10	; 16
     4ba:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     4be:	cf 5f       	subi	r28, 0xFF	; 255
     4c0:	cd 13       	cpse	r28, r29
     4c2:	fa cf       	rjmp	.-12     	; 0x4b8 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     4d0:	c0 e0       	ldi	r28, 0x00	; 0
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
     4d4:	84 e1       	ldi	r24, 0x14	; 20
     4d6:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     4da:	cf 5f       	subi	r28, 0xFF	; 255
     4dc:	cd 13       	cpse	r28, r29
     4de:	fa cf       	rjmp	.-12     	; 0x4d4 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	1f 92       	push	r1
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     4fc:	56 e0       	ldi	r21, 0x06	; 6
     4fe:	45 9f       	mul	r20, r21
     500:	90 01       	movw	r18, r0
     502:	11 24       	eor	r1, r1
     504:	e8 2f       	mov	r30, r24
     506:	e2 9f       	mul	r30, r18
     508:	c0 01       	movw	r24, r0
     50a:	e3 9f       	mul	r30, r19
     50c:	90 0d       	add	r25, r0
     50e:	11 24       	eor	r1, r1
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__divmodhi4>
     516:	8b 01       	movw	r16, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     518:	cb 01       	movw	r24, r22
     51a:	66 e0       	ldi	r22, 0x06	; 6
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__udivmodhi4>
     522:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     524:	c1 2c       	mov	r12, r1
     526:	d1 2c       	mov	r13, r1
     528:	f1 2c       	mov	r15, r1
     52a:	16 c0       	rjmp	.+44     	; 0x558 <LCDprogressBar+0x72>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     52c:	96 01       	movw	r18, r12
     52e:	2b 5f       	subi	r18, 0xFB	; 251
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	02 17       	cp	r16, r18
     534:	13 07       	cpc	r17, r19
     536:	28 f4       	brcc	.+10     	; 0x542 <LCDprogressBar+0x5c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     538:	0c 15       	cp	r16, r12
     53a:	1d 05       	cpc	r17, r13
     53c:	20 f0       	brcs	.+8      	; 0x546 <LCDprogressBar+0x60>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     53e:	8e 2d       	mov	r24, r14
     540:	03 c0       	rjmp	.+6      	; 0x548 <LCDprogressBar+0x62>
			}
		}
		else
		{
			// this is a full block
			c = 5;
     542:	85 e0       	ldi	r24, 0x05	; 5
     544:	01 c0       	rjmp	.+2      	; 0x548 <LCDprogressBar+0x62>
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
     546:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     548:	49 83       	std	Y+1, r20	; 0x01
     54a:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     54e:	f3 94       	inc	r15
     550:	f6 e0       	ldi	r31, 0x06	; 6
     552:	cf 0e       	add	r12, r31
     554:	d1 1c       	adc	r13, r1
     556:	49 81       	ldd	r20, Y+1	; 0x01
     558:	f4 12       	cpse	r15, r20
     55a:	e8 cf       	rjmp	.-48     	; 0x52c <LCDprogressBar+0x46>
		
		// write character to display
		LCDsendChar(c);
	}

}
     55c:	0f 90       	pop	r0
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret

00000570 <init_cap_measurement_analog_timer>:

//configures Analog Comparator and Timer1
//set it to full speed 
//clear TCNT1
void init_cap_measurement_analog_timer(){
	TCCR1B = 0;
     570:	e1 e8       	ldi	r30, 0x81	; 129
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	10 82       	st	Z, r1
	//full speed [ 16 MHz], capture on positive edge
	TCCR1B |= INPUT_CAPTURE_EDGE_SELECT + T0B_CS00;
     576:	80 81       	ld	r24, Z
     578:	81 64       	ori	r24, 0x41	; 65
     57a:	80 83       	st	Z, r24
	//turn on timer 1 interrupt-on-capture
	TIMSK1 = 0;
     57c:	ef e6       	ldi	r30, 0x6F	; 111
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	10 82       	st	Z, r1
	TIMSK1 |= INTERRUPT_ON_CAPTURE;
     582:	80 81       	ld	r24, Z
     584:	80 62       	ori	r24, 0x20	; 32
     586:	80 83       	st	Z, r24

	//set analog comp to connect to timer capture input
	//with positive input reference voltage
	ACSR = 0;
     588:	10 be       	out	0x30, r1	; 48
	ACSR |= ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     58a:	80 b7       	in	r24, 0x30	; 48
     58c:	84 60       	ori	r24, 0x04	; 4
     58e:	80 bf       	out	0x30, r24	; 48
	ACSR &= ~ANALOG_COMPARATOR_BANDGAP_SELECT;
     590:	80 b7       	in	r24, 0x30	; 48
     592:	8f 7b       	andi	r24, 0xBF	; 191
     594:	80 bf       	out	0x30, r24	; 48
	//set all ports to input
	DDRB = 0;
     596:	14 b8       	out	0x04, r1	; 4
	DDRB &= ~(COMPARATOR_INPUT + COMPARATOR_REFERENCE);
     598:	84 b1       	in	r24, 0x04	; 4
     59a:	83 7f       	andi	r24, 0xF3	; 243
     59c:	84 b9       	out	0x04, r24	; 4
     59e:	08 95       	ret

000005a0 <init_cap_discharge_wait_timer>:

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     5a0:	22 e0       	ldi	r18, 0x02	; 2
     5a2:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     5a6:	8a e5       	ldi	r24, 0x5A	; 90
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	90 93 89 00 	sts	0x0089, r25
     5ae:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     5b2:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     5b6:	e0 e8       	ldi	r30, 0x80	; 128
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	10 82       	st	Z, r1
	TCCR1A |= CLEAR_ON_MATCH;
     5bc:	80 81       	ld	r24, Z
     5be:	82 60       	ori	r24, 0x02	; 2
     5c0:	80 83       	st	Z, r24
     5c2:	08 95       	ret

000005c4 <init_cap_measurements>:
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
	//Reset all measurements
	capacitance = 0;
     5c4:	10 92 26 01 	sts	0x0126, r1
     5c8:	10 92 27 01 	sts	0x0127, r1
     5cc:	10 92 28 01 	sts	0x0128, r1
     5d0:	10 92 29 01 	sts	0x0129, r1
	charge_cycles = 0;
     5d4:	10 92 23 01 	sts	0x0123, r1
     5d8:	10 92 22 01 	sts	0x0122, r1
	charge_time = 0;
     5dc:	10 92 1e 01 	sts	0x011E, r1
     5e0:	10 92 1f 01 	sts	0x011F, r1
     5e4:	10 92 20 01 	sts	0x0120, r1
     5e8:	10 92 21 01 	sts	0x0121, r1

	DDRB = 0;
     5ec:	14 b8       	out	0x04, r1	; 4
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     5ee:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     5f0:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     5f2:	2a 98       	cbi	0x05, 2	; 5
	//use Timer1.A to perform this delay and signal when we can continue measurements
	init_cap_discharge_wait_timer();
     5f4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <init_cap_discharge_wait_timer>

000005f8 <__vector_16>:
}

//1 ms timebase register
//Blinks LED 1/second
//refreshes LCD 1/200 ms
ISR (TIMER0_COMPA_vect){
     5f8:	1f 92       	push	r1
     5fa:	0f 92       	push	r0
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	0f 92       	push	r0
     600:	11 24       	eor	r1, r1
     602:	8f 93       	push	r24
     604:	9f 93       	push	r25
	if( led_time_count > 0)
     606:	80 91 2d 01 	lds	r24, 0x012D
     60a:	90 91 2e 01 	lds	r25, 0x012E
     60e:	89 2b       	or	r24, r25
     610:	49 f0       	breq	.+18     	; 0x624 <__vector_16+0x2c>
		--led_time_count;
     612:	80 91 2d 01 	lds	r24, 0x012D
     616:	90 91 2e 01 	lds	r25, 0x012E
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	90 93 2e 01 	sts	0x012E, r25
     620:	80 93 2d 01 	sts	0x012D, r24
	if( lcd_time_count > 0)
     624:	80 91 0a 01 	lds	r24, 0x010A
     628:	90 91 0b 01 	lds	r25, 0x010B
     62c:	89 2b       	or	r24, r25
     62e:	49 f0       	breq	.+18     	; 0x642 <__vector_16+0x4a>
		--lcd_time_count;
     630:	80 91 0a 01 	lds	r24, 0x010A
     634:	90 91 0b 01 	lds	r25, 0x010B
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	90 93 0b 01 	sts	0x010B, r25
     63e:	80 93 0a 01 	sts	0x010A, r24

}
     642:	9f 91       	pop	r25
     644:	8f 91       	pop	r24
     646:	0f 90       	pop	r0
     648:	0f be       	out	0x3f, r0	; 63
     64a:	0f 90       	pop	r0
     64c:	1f 90       	pop	r1
     64e:	18 95       	reti

00000650 <__vector_13>:
//Once this triggers even once, we know that we have waited long enough for a cap discharge
ISR (TIMER1_COMPA_vect){
     650:	1f 92       	push	r1
     652:	0f 92       	push	r0
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	0f 92       	push	r0
     658:	11 24       	eor	r1, r1
     65a:	8f 93       	push	r24
     65c:	9f 93       	push	r25
	cap_discharged = TRUE;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	90 93 25 01 	sts	0x0125, r25
     666:	80 93 24 01 	sts	0x0124, r24
}
     66a:	9f 91       	pop	r25
     66c:	8f 91       	pop	r24
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_12>:
			  t
	C = ------------
		R2 * ln(0.5)

*/
ISR (TIMER1_CAPT_vect){
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	0b b6       	in	r0, 0x3b	; 59
     684:	0f 92       	push	r0
     686:	8f 93       	push	r24
     688:	9f 93       	push	r25
     68a:	ef 93       	push	r30
     68c:	ff 93       	push	r31
	// read timer1 input capture register
    charge_cycles = ICR1;
     68e:	e6 e8       	ldi	r30, 0x86	; 134
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	90 93 23 01 	sts	0x0123, r25
     69a:	80 93 22 01 	sts	0x0122, r24
	ICR1 = 0;
     69e:	11 82       	std	Z+1, r1	; 0x01
     6a0:	10 82       	st	Z, r1
    // set the charged flag to true
    cap_charged = TRUE;
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	90 93 32 01 	sts	0x0132, r25
     6aa:	80 93 31 01 	sts	0x0131, r24
}
     6ae:	ff 91       	pop	r31
     6b0:	ef 91       	pop	r30
     6b2:	9f 91       	pop	r25
     6b4:	8f 91       	pop	r24
     6b6:	0f 90       	pop	r0
     6b8:	0b be       	out	0x3b, r0	; 59
     6ba:	0f 90       	pop	r0
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	0f 90       	pop	r0
     6c0:	1f 90       	pop	r1
     6c2:	18 95       	reti

000006c4 <toggle_led>:

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     6c4:	8b b1       	in	r24, 0x0b	; 11
     6c6:	94 e0       	ldi	r25, 0x04	; 4
     6c8:	89 27       	eor	r24, r25
     6ca:	8b b9       	out	0x0b, r24	; 11
     6cc:	08 95       	ret

000006ce <init_timer0A>:
//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 249;
     6d4:	89 ef       	ldi	r24, 0xF9	; 249
     6d6:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     6dc:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     6de:	84 b5       	in	r24, 0x24	; 36
     6e0:	82 60       	ori	r24, 0x02	; 2
     6e2:	84 bd       	out	0x24, r24	; 36
     6e4:	08 95       	ret

000006e6 <init_lcd>:
}

// LCD setup
void init_lcd(void){
	LCDinit();	//initialize the display
     6e6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCDinit>
	LCDcursorOFF();
     6ea:	0e 94 4e 02 	call	0x49c	; 0x49c <LCDcursorOFF>
	LCDclr();				//clear the display
     6ee:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDclr>
	LCDGotoXY(0,0);
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
	CopyStringtoLCD(LCD_number, 0, 0);
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	8c ec       	ldi	r24, 0xCC	; 204
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0c 94 99 01 	jmp	0x332	; 0x332 <CopyStringtoLCD>

00000706 <refresh_lcd>:
}


// writes contents of lcd_buffer to LCD every 200 mSec
// 
void refresh_lcd(void){
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
  // increment time counter and format string 
  //if (capacitance >= .1 && capacitance <= 100) {
  //if (charge_cycles > 200) {
  sprintf(lcd_buffer,"%-.5f",capacitance);
     70a:	80 91 26 01 	lds	r24, 0x0126
     70e:	90 91 27 01 	lds	r25, 0x0127
     712:	a0 91 28 01 	lds	r26, 0x0128
     716:	b0 91 29 01 	lds	r27, 0x0129
     71a:	bf 93       	push	r27
     71c:	af 93       	push	r26
     71e:	9f 93       	push	r25
     720:	8f 93       	push	r24
     722:	84 e0       	ldi	r24, 0x04	; 4
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	cc e0       	ldi	r28, 0x0C	; 12
     72c:	d1 e0       	ldi	r29, 0x01	; 1
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	0e 94 ad 09 	call	0x135a	; 0x135a <sprintf>
	//sprintf(lcd_buffer,"%-i", charge_cycles);	 
  //}
  //else {
  //	sprintf(lcd_buffer,"N/A");
  //}               
  LCDGotoXY(0, 1);
     736:	61 e0       	ldi	r22, 0x01	; 1
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  	// display the capacitance 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     73e:	fe 01       	movw	r30, r28
     740:	01 90       	ld	r0, Z+
     742:	00 20       	and	r0, r0
     744:	e9 f7       	brne	.-6      	; 0x740 <refresh_lcd+0x3a>
     746:	bf 01       	movw	r22, r30
     748:	61 50       	subi	r22, 0x01	; 1
     74a:	71 09       	sbc	r23, r1
     74c:	6c 1b       	sub	r22, r28
     74e:	7d 0b       	sbc	r23, r29
     750:	ce 01       	movw	r24, r28
     752:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCDstring>
  // now move a char left and right
  LCDGotoXY(anipos,1);	   //second line
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	80 91 1d 01 	lds	r24, 0x011D
     75c:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  LCDsendChar(' '); 
     760:	80 e2       	ldi	r24, 0x20	; 32
     762:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
      	
  if (anipos>=15) dir=-1;   // check boundaries
     766:	90 91 1d 01 	lds	r25, 0x011D
     76a:	2d b7       	in	r18, 0x3d	; 61
     76c:	3e b7       	in	r19, 0x3e	; 62
     76e:	28 5f       	subi	r18, 0xF8	; 248
     770:	3f 4f       	sbci	r19, 0xFF	; 255
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	3e bf       	out	0x3e, r19	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	2d bf       	out	0x3d, r18	; 61
     77c:	9f 30       	cpi	r25, 0x0F	; 15
     77e:	10 f0       	brcs	.+4      	; 0x784 <refresh_lcd+0x7e>
     780:	8f ef       	ldi	r24, 0xFF	; 255
     782:	03 c0       	rjmp	.+6      	; 0x78a <refresh_lcd+0x84>
  if (anipos<=8 ) dir=1;
     784:	99 30       	cpi	r25, 0x09	; 9
     786:	18 f4       	brcc	.+6      	; 0x78e <refresh_lcd+0x88>
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 2a 01 	sts	0x012A, r24
  anipos=anipos+dir;
     78e:	80 91 2a 01 	lds	r24, 0x012A
     792:	89 0f       	add	r24, r25
     794:	80 93 1d 01 	sts	0x011D, r24
  LCDGotoXY(anipos,1);	   //second line
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  LCDsendChar('o');
     79e:	8f e6       	ldi	r24, 0x6F	; 111
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
      	
  if (anipos>=15) dir=-1;   // check boundaries
  if (anipos<=8 ) dir=1;
  anipos=anipos+dir;
  LCDGotoXY(anipos,1);	   //second line
  LCDsendChar('o');
     7a4:	0c 94 18 01 	jmp	0x230	; 0x230 <LCDsendChar>

000007a8 <initialize>:
}

void initialize(void){
	anipos = 8;
     7a8:	88 e0       	ldi	r24, 0x08	; 8
     7aa:	80 93 1d 01 	sts	0x011D, r24
	led_time_count = 0;
     7ae:	10 92 2e 01 	sts	0x012E, r1
     7b2:	10 92 2d 01 	sts	0x012D, r1
	init_timer0A();
     7b6:	0e 94 67 03 	call	0x6ce	; 0x6ce <init_timer0A>

	DDRB = 0;
     7ba:	14 b8       	out	0x04, r1	; 4
	DDRD = 0;
     7bc:	1a b8       	out	0x0a, r1	; 10

	//Enable LED Port
	DDRD = ONBOARD_LED; //turn the LED to an output
     7be:	84 e0       	ldi	r24, 0x04	; 4
     7c0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; //turn off LED 
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	8b b9       	out	0x0b, r24	; 11

	capacitance = 0;
     7c6:	10 92 26 01 	sts	0x0126, r1
     7ca:	10 92 27 01 	sts	0x0127, r1
     7ce:	10 92 28 01 	sts	0x0128, r1
     7d2:	10 92 29 01 	sts	0x0129, r1
	charge_cycles = 0;
     7d6:	10 92 23 01 	sts	0x0123, r1
     7da:	10 92 22 01 	sts	0x0122, r1
	charge_time = 0;
     7de:	10 92 1e 01 	sts	0x011E, r1
     7e2:	10 92 1f 01 	sts	0x011F, r1
     7e6:	10 92 20 01 	sts	0x0120, r1
     7ea:	10 92 21 01 	sts	0x0121, r1
	cap_discharged = FALSE;
     7ee:	10 92 25 01 	sts	0x0125, r1
     7f2:	10 92 24 01 	sts	0x0124, r1
	begin_cap_measurement = FALSE;
     7f6:	10 92 30 01 	sts	0x0130, r1
     7fa:	10 92 2f 01 	sts	0x012F, r1
	cap_charged = FALSE;
     7fe:	10 92 32 01 	sts	0x0132, r1
     802:	10 92 31 01 	sts	0x0131, r1

	init_lcd();
     806:	0e 94 73 03 	call	0x6e6	; 0x6e6 <init_lcd>
	LCDclr();
     80a:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDclr>


	sei();
     80e:	78 94       	sei
     810:	08 95       	ret

00000812 <main>:
}

int main(void){
	initialize();
     812:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <initialize>
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	8c ec       	ldi	r24, 0xCC	; 204
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 99 01 	call	0x332	; 0x332 <CopyStringtoLCD>
	
	while(1){
		if( led_time_count == 0){
			led_time_count = LED_BLINK_PERIOD / 2;
     822:	c4 ef       	ldi	r28, 0xF4	; 244
     824:	d1 e0       	ldi	r29, 0x01	; 1
			toggle_led();
		}
		if( lcd_time_count == 0){
			lcd_time_count = LCD_REFRESH_RATE;
     826:	08 ec       	ldi	r16, 0xC8	; 200
     828:	10 e0       	ldi	r17, 0x00	; 0
		if(cap_discharged && !begin_cap_measurement){
			//begin cap measurements
			//switch Timer1A mode
			//DDRB &= ~COMPARATOR_INPUT;
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     82a:	ee 24       	eor	r14, r14
     82c:	e3 94       	inc	r14
     82e:	f1 2c       	mov	r15, r1
int main(void){
	initialize();
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
	
	while(1){
		if( led_time_count == 0){
     830:	80 91 2d 01 	lds	r24, 0x012D
     834:	90 91 2e 01 	lds	r25, 0x012E
     838:	89 2b       	or	r24, r25
     83a:	31 f4       	brne	.+12     	; 0x848 <main+0x36>
			led_time_count = LED_BLINK_PERIOD / 2;
     83c:	d0 93 2e 01 	sts	0x012E, r29
     840:	c0 93 2d 01 	sts	0x012D, r28
			toggle_led();
     844:	0e 94 62 03 	call	0x6c4	; 0x6c4 <toggle_led>
		}
		if( lcd_time_count == 0){
     848:	80 91 0a 01 	lds	r24, 0x010A
     84c:	90 91 0b 01 	lds	r25, 0x010B
     850:	89 2b       	or	r24, r25
     852:	31 f4       	brne	.+12     	; 0x860 <main+0x4e>
			lcd_time_count = LCD_REFRESH_RATE;
     854:	10 93 0b 01 	sts	0x010B, r17
     858:	00 93 0a 01 	sts	0x010A, r16
			refresh_lcd();
     85c:	0e 94 83 03 	call	0x706	; 0x706 <refresh_lcd>
		}
		if (!cap_discharged && !begin_cap_measurement && !cap_charged) {
     860:	80 91 24 01 	lds	r24, 0x0124
     864:	90 91 25 01 	lds	r25, 0x0125
     868:	89 2b       	or	r24, r25
     86a:	71 f4       	brne	.+28     	; 0x888 <main+0x76>
     86c:	80 91 2f 01 	lds	r24, 0x012F
     870:	90 91 30 01 	lds	r25, 0x0130
     874:	89 2b       	or	r24, r25
     876:	41 f4       	brne	.+16     	; 0x888 <main+0x76>
     878:	80 91 31 01 	lds	r24, 0x0131
     87c:	90 91 32 01 	lds	r25, 0x0132
     880:	89 2b       	or	r24, r25
     882:	11 f4       	brne	.+4      	; 0x888 <main+0x76>
			init_cap_measurements();
     884:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <init_cap_measurements>
		}
		if(cap_discharged && !begin_cap_measurement){
     888:	80 91 24 01 	lds	r24, 0x0124
     88c:	90 91 25 01 	lds	r25, 0x0125
     890:	89 2b       	or	r24, r25
     892:	61 f0       	breq	.+24     	; 0x8ac <main+0x9a>
     894:	80 91 2f 01 	lds	r24, 0x012F
     898:	90 91 30 01 	lds	r25, 0x0130
     89c:	89 2b       	or	r24, r25
     89e:	31 f4       	brne	.+12     	; 0x8ac <main+0x9a>
			//begin cap measurements
			//switch Timer1A mode
			//DDRB &= ~COMPARATOR_INPUT;
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     8a0:	f0 92 30 01 	sts	0x0130, r15
     8a4:	e0 92 2f 01 	sts	0x012F, r14
			//initalize timer for cap measurement
			init_cap_measurement_analog_timer();
     8a8:	0e 94 b8 02 	call	0x570	; 0x570 <init_cap_measurement_analog_timer>
		}
		if(begin_cap_measurement && cap_charged){
     8ac:	80 91 2f 01 	lds	r24, 0x012F
     8b0:	90 91 30 01 	lds	r25, 0x0130
     8b4:	89 2b       	or	r24, r25
     8b6:	09 f4       	brne	.+2      	; 0x8ba <main+0xa8>
     8b8:	bb cf       	rjmp	.-138    	; 0x830 <main+0x1e>
     8ba:	80 91 31 01 	lds	r24, 0x0131
     8be:	90 91 32 01 	lds	r25, 0x0132
     8c2:	89 2b       	or	r24, r25
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <main+0xb6>
     8c6:	b4 cf       	rjmp	.-152    	; 0x830 <main+0x1e>
			// Revert the flags
			cap_discharged = FALSE;
     8c8:	10 92 25 01 	sts	0x0125, r1
     8cc:	10 92 24 01 	sts	0x0124, r1
			begin_cap_measurement = FALSE;
     8d0:	10 92 30 01 	sts	0x0130, r1
     8d4:	10 92 2f 01 	sts	0x012F, r1
			cap_charged = FALSE;
     8d8:	10 92 32 01 	sts	0x0132, r1
     8dc:	10 92 31 01 	sts	0x0131, r1
			//capacitance = charge_time / (RESISTOR * ln_half);
			
			//capacitance = charge_cycles / (RESISTOR * ln_half);
			//capacitance = capacitance / T1_CLK_PERIOD;

			capacitance = charge_cycles;
     8e0:	60 91 22 01 	lds	r22, 0x0122
     8e4:	70 91 23 01 	lds	r23, 0x0123
     8e8:	88 27       	eor	r24, r24
     8ea:	77 fd       	sbrc	r23, 7
     8ec:	80 95       	com	r24
     8ee:	98 2f       	mov	r25, r24
     8f0:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
     8f4:	60 93 26 01 	sts	0x0126, r22
     8f8:	70 93 27 01 	sts	0x0127, r23
     8fc:	80 93 28 01 	sts	0x0128, r24
     900:	90 93 29 01 	sts	0x0129, r25
     904:	95 cf       	rjmp	.-214    	; 0x830 <main+0x1e>

00000906 <__floatunsisf>:
     906:	e8 94       	clt
     908:	09 c0       	rjmp	.+18     	; 0x91c <__floatsisf+0x12>

0000090a <__floatsisf>:
     90a:	97 fb       	bst	r25, 7
     90c:	3e f4       	brtc	.+14     	; 0x91c <__floatsisf+0x12>
     90e:	90 95       	com	r25
     910:	80 95       	com	r24
     912:	70 95       	com	r23
     914:	61 95       	neg	r22
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	8f 4f       	sbci	r24, 0xFF	; 255
     91a:	9f 4f       	sbci	r25, 0xFF	; 255
     91c:	99 23       	and	r25, r25
     91e:	a9 f0       	breq	.+42     	; 0x94a <__floatsisf+0x40>
     920:	f9 2f       	mov	r31, r25
     922:	96 e9       	ldi	r25, 0x96	; 150
     924:	bb 27       	eor	r27, r27
     926:	93 95       	inc	r25
     928:	f6 95       	lsr	r31
     92a:	87 95       	ror	r24
     92c:	77 95       	ror	r23
     92e:	67 95       	ror	r22
     930:	b7 95       	ror	r27
     932:	f1 11       	cpse	r31, r1
     934:	f8 cf       	rjmp	.-16     	; 0x926 <__floatsisf+0x1c>
     936:	fa f4       	brpl	.+62     	; 0x976 <__floatsisf+0x6c>
     938:	bb 0f       	add	r27, r27
     93a:	11 f4       	brne	.+4      	; 0x940 <__floatsisf+0x36>
     93c:	60 ff       	sbrs	r22, 0
     93e:	1b c0       	rjmp	.+54     	; 0x976 <__floatsisf+0x6c>
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	8f 4f       	sbci	r24, 0xFF	; 255
     946:	9f 4f       	sbci	r25, 0xFF	; 255
     948:	16 c0       	rjmp	.+44     	; 0x976 <__floatsisf+0x6c>
     94a:	88 23       	and	r24, r24
     94c:	11 f0       	breq	.+4      	; 0x952 <__floatsisf+0x48>
     94e:	96 e9       	ldi	r25, 0x96	; 150
     950:	11 c0       	rjmp	.+34     	; 0x974 <__floatsisf+0x6a>
     952:	77 23       	and	r23, r23
     954:	21 f0       	breq	.+8      	; 0x95e <__floatsisf+0x54>
     956:	9e e8       	ldi	r25, 0x8E	; 142
     958:	87 2f       	mov	r24, r23
     95a:	76 2f       	mov	r23, r22
     95c:	05 c0       	rjmp	.+10     	; 0x968 <__floatsisf+0x5e>
     95e:	66 23       	and	r22, r22
     960:	71 f0       	breq	.+28     	; 0x97e <__floatsisf+0x74>
     962:	96 e8       	ldi	r25, 0x86	; 134
     964:	86 2f       	mov	r24, r22
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	2a f0       	brmi	.+10     	; 0x976 <__floatsisf+0x6c>
     96c:	9a 95       	dec	r25
     96e:	66 0f       	add	r22, r22
     970:	77 1f       	adc	r23, r23
     972:	88 1f       	adc	r24, r24
     974:	da f7       	brpl	.-10     	; 0x96c <__floatsisf+0x62>
     976:	88 0f       	add	r24, r24
     978:	96 95       	lsr	r25
     97a:	87 95       	ror	r24
     97c:	97 f9       	bld	r25, 7
     97e:	08 95       	ret

00000980 <vfprintf>:
     980:	2f 92       	push	r2
     982:	3f 92       	push	r3
     984:	4f 92       	push	r4
     986:	5f 92       	push	r5
     988:	6f 92       	push	r6
     98a:	7f 92       	push	r7
     98c:	8f 92       	push	r8
     98e:	9f 92       	push	r9
     990:	af 92       	push	r10
     992:	bf 92       	push	r11
     994:	cf 92       	push	r12
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	62 97       	sbiw	r28, 0x12	; 18
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	7c 01       	movw	r14, r24
     9b6:	1b 01       	movw	r2, r22
     9b8:	6a 01       	movw	r12, r20
     9ba:	fc 01       	movw	r30, r24
     9bc:	17 82       	std	Z+7, r1	; 0x07
     9be:	16 82       	std	Z+6, r1	; 0x06
     9c0:	83 81       	ldd	r24, Z+3	; 0x03
     9c2:	81 fd       	sbrc	r24, 1
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <vfprintf+0x4c>
     9c6:	6b c3       	rjmp	.+1750   	; 0x109e <vfprintf+0x71e>
     9c8:	65 01       	movw	r12, r10
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <vfprintf+0x56>
     9cc:	88 24       	eor	r8, r8
     9ce:	83 94       	inc	r8
     9d0:	91 2c       	mov	r9, r1
     9d2:	8c 0e       	add	r8, r28
     9d4:	9d 1e       	adc	r9, r29
     9d6:	f7 01       	movw	r30, r14
     9d8:	93 81       	ldd	r25, Z+3	; 0x03
     9da:	f1 01       	movw	r30, r2
     9dc:	93 fd       	sbrc	r25, 3
     9de:	85 91       	lpm	r24, Z+
     9e0:	93 ff       	sbrs	r25, 3
     9e2:	81 91       	ld	r24, Z+
     9e4:	1f 01       	movw	r2, r30
     9e6:	88 23       	and	r24, r24
     9e8:	09 f4       	brne	.+2      	; 0x9ec <vfprintf+0x6c>
     9ea:	55 c3       	rjmp	.+1706   	; 0x1096 <vfprintf+0x716>
     9ec:	85 32       	cpi	r24, 0x25	; 37
     9ee:	39 f4       	brne	.+14     	; 0x9fe <vfprintf+0x7e>
     9f0:	93 fd       	sbrc	r25, 3
     9f2:	85 91       	lpm	r24, Z+
     9f4:	93 ff       	sbrs	r25, 3
     9f6:	81 91       	ld	r24, Z+
     9f8:	1f 01       	movw	r2, r30
     9fa:	85 32       	cpi	r24, 0x25	; 37
     9fc:	31 f4       	brne	.+12     	; 0xa0a <vfprintf+0x8a>
     9fe:	b7 01       	movw	r22, r14
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     a06:	56 01       	movw	r10, r12
     a08:	df cf       	rjmp	.-66     	; 0x9c8 <vfprintf+0x48>
     a0a:	71 2c       	mov	r7, r1
     a0c:	61 2c       	mov	r6, r1
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	20 32       	cpi	r18, 0x20	; 32
     a12:	a8 f4       	brcc	.+42     	; 0xa3e <vfprintf+0xbe>
     a14:	8b 32       	cpi	r24, 0x2B	; 43
     a16:	61 f0       	breq	.+24     	; 0xa30 <vfprintf+0xb0>
     a18:	28 f4       	brcc	.+10     	; 0xa24 <vfprintf+0xa4>
     a1a:	80 32       	cpi	r24, 0x20	; 32
     a1c:	51 f0       	breq	.+20     	; 0xa32 <vfprintf+0xb2>
     a1e:	83 32       	cpi	r24, 0x23	; 35
     a20:	71 f4       	brne	.+28     	; 0xa3e <vfprintf+0xbe>
     a22:	0b c0       	rjmp	.+22     	; 0xa3a <vfprintf+0xba>
     a24:	8d 32       	cpi	r24, 0x2D	; 45
     a26:	39 f0       	breq	.+14     	; 0xa36 <vfprintf+0xb6>
     a28:	80 33       	cpi	r24, 0x30	; 48
     a2a:	49 f4       	brne	.+18     	; 0xa3e <vfprintf+0xbe>
     a2c:	21 60       	ori	r18, 0x01	; 1
     a2e:	28 c0       	rjmp	.+80     	; 0xa80 <vfprintf+0x100>
     a30:	22 60       	ori	r18, 0x02	; 2
     a32:	24 60       	ori	r18, 0x04	; 4
     a34:	25 c0       	rjmp	.+74     	; 0xa80 <vfprintf+0x100>
     a36:	28 60       	ori	r18, 0x08	; 8
     a38:	23 c0       	rjmp	.+70     	; 0xa80 <vfprintf+0x100>
     a3a:	20 61       	ori	r18, 0x10	; 16
     a3c:	21 c0       	rjmp	.+66     	; 0xa80 <vfprintf+0x100>
     a3e:	27 fd       	sbrc	r18, 7
     a40:	27 c0       	rjmp	.+78     	; 0xa90 <vfprintf+0x110>
     a42:	38 2f       	mov	r19, r24
     a44:	30 53       	subi	r19, 0x30	; 48
     a46:	3a 30       	cpi	r19, 0x0A	; 10
     a48:	78 f4       	brcc	.+30     	; 0xa68 <vfprintf+0xe8>
     a4a:	26 ff       	sbrs	r18, 6
     a4c:	06 c0       	rjmp	.+12     	; 0xa5a <vfprintf+0xda>
     a4e:	fa e0       	ldi	r31, 0x0A	; 10
     a50:	7f 9e       	mul	r7, r31
     a52:	30 0d       	add	r19, r0
     a54:	11 24       	eor	r1, r1
     a56:	73 2e       	mov	r7, r19
     a58:	13 c0       	rjmp	.+38     	; 0xa80 <vfprintf+0x100>
     a5a:	4a e0       	ldi	r20, 0x0A	; 10
     a5c:	64 9e       	mul	r6, r20
     a5e:	30 0d       	add	r19, r0
     a60:	11 24       	eor	r1, r1
     a62:	63 2e       	mov	r6, r19
     a64:	20 62       	ori	r18, 0x20	; 32
     a66:	0c c0       	rjmp	.+24     	; 0xa80 <vfprintf+0x100>
     a68:	8e 32       	cpi	r24, 0x2E	; 46
     a6a:	21 f4       	brne	.+8      	; 0xa74 <vfprintf+0xf4>
     a6c:	26 fd       	sbrc	r18, 6
     a6e:	13 c3       	rjmp	.+1574   	; 0x1096 <vfprintf+0x716>
     a70:	20 64       	ori	r18, 0x40	; 64
     a72:	06 c0       	rjmp	.+12     	; 0xa80 <vfprintf+0x100>
     a74:	8c 36       	cpi	r24, 0x6C	; 108
     a76:	11 f4       	brne	.+4      	; 0xa7c <vfprintf+0xfc>
     a78:	20 68       	ori	r18, 0x80	; 128
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <vfprintf+0x100>
     a7c:	88 36       	cpi	r24, 0x68	; 104
     a7e:	41 f4       	brne	.+16     	; 0xa90 <vfprintf+0x110>
     a80:	f1 01       	movw	r30, r2
     a82:	93 fd       	sbrc	r25, 3
     a84:	85 91       	lpm	r24, Z+
     a86:	93 ff       	sbrs	r25, 3
     a88:	81 91       	ld	r24, Z+
     a8a:	1f 01       	movw	r2, r30
     a8c:	81 11       	cpse	r24, r1
     a8e:	c0 cf       	rjmp	.-128    	; 0xa10 <vfprintf+0x90>
     a90:	98 2f       	mov	r25, r24
     a92:	95 54       	subi	r25, 0x45	; 69
     a94:	93 30       	cpi	r25, 0x03	; 3
     a96:	18 f4       	brcc	.+6      	; 0xa9e <vfprintf+0x11e>
     a98:	20 61       	ori	r18, 0x10	; 16
     a9a:	80 5e       	subi	r24, 0xE0	; 224
     a9c:	06 c0       	rjmp	.+12     	; 0xaaa <vfprintf+0x12a>
     a9e:	98 2f       	mov	r25, r24
     aa0:	95 56       	subi	r25, 0x65	; 101
     aa2:	93 30       	cpi	r25, 0x03	; 3
     aa4:	08 f0       	brcs	.+2      	; 0xaa8 <vfprintf+0x128>
     aa6:	a4 c1       	rjmp	.+840    	; 0xdf0 <vfprintf+0x470>
     aa8:	2f 7e       	andi	r18, 0xEF	; 239
     aaa:	26 fd       	sbrc	r18, 6
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <vfprintf+0x132>
     aae:	16 e0       	ldi	r17, 0x06	; 6
     ab0:	71 2e       	mov	r7, r17
     ab2:	bf e3       	ldi	r27, 0x3F	; 63
     ab4:	5b 2e       	mov	r5, r27
     ab6:	52 22       	and	r5, r18
     ab8:	85 36       	cpi	r24, 0x65	; 101
     aba:	19 f4       	brne	.+6      	; 0xac2 <vfprintf+0x142>
     abc:	f0 e4       	ldi	r31, 0x40	; 64
     abe:	5f 2a       	or	r5, r31
     ac0:	07 c0       	rjmp	.+14     	; 0xad0 <vfprintf+0x150>
     ac2:	86 36       	cpi	r24, 0x66	; 102
     ac4:	19 f4       	brne	.+6      	; 0xacc <vfprintf+0x14c>
     ac6:	40 e8       	ldi	r20, 0x80	; 128
     ac8:	54 2a       	or	r5, r20
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <vfprintf+0x150>
     acc:	71 10       	cpse	r7, r1
     ace:	7a 94       	dec	r7
     ad0:	57 fe       	sbrs	r5, 7
     ad2:	07 c0       	rjmp	.+14     	; 0xae2 <vfprintf+0x162>
     ad4:	5b e3       	ldi	r21, 0x3B	; 59
     ad6:	57 15       	cp	r21, r7
     ad8:	48 f0       	brcs	.+18     	; 0xaec <vfprintf+0x16c>
     ada:	47 2c       	mov	r4, r7
     adc:	43 94       	inc	r4
     ade:	27 e0       	ldi	r18, 0x07	; 7
     ae0:	0d c0       	rjmp	.+26     	; 0xafc <vfprintf+0x17c>
     ae2:	87 e0       	ldi	r24, 0x07	; 7
     ae4:	87 15       	cp	r24, r7
     ae6:	30 f0       	brcs	.+12     	; 0xaf4 <vfprintf+0x174>
     ae8:	27 2d       	mov	r18, r7
     aea:	07 c0       	rjmp	.+14     	; 0xafa <vfprintf+0x17a>
     aec:	27 e0       	ldi	r18, 0x07	; 7
     aee:	ac e3       	ldi	r26, 0x3C	; 60
     af0:	4a 2e       	mov	r4, r26
     af2:	04 c0       	rjmp	.+8      	; 0xafc <vfprintf+0x17c>
     af4:	27 e0       	ldi	r18, 0x07	; 7
     af6:	f7 e0       	ldi	r31, 0x07	; 7
     af8:	7f 2e       	mov	r7, r31
     afa:	41 2c       	mov	r4, r1
     afc:	56 01       	movw	r10, r12
     afe:	94 e0       	ldi	r25, 0x04	; 4
     b00:	a9 0e       	add	r10, r25
     b02:	b1 1c       	adc	r11, r1
     b04:	f6 01       	movw	r30, r12
     b06:	60 81       	ld	r22, Z
     b08:	71 81       	ldd	r23, Z+1	; 0x01
     b0a:	82 81       	ldd	r24, Z+2	; 0x02
     b0c:	93 81       	ldd	r25, Z+3	; 0x03
     b0e:	04 2d       	mov	r16, r4
     b10:	a4 01       	movw	r20, r8
     b12:	0e 94 93 08 	call	0x1126	; 0x1126 <__ftoa_engine>
     b16:	8c 01       	movw	r16, r24
     b18:	49 81       	ldd	r20, Y+1	; 0x01
     b1a:	4c 87       	std	Y+12, r20	; 0x0c
     b1c:	40 ff       	sbrs	r20, 0
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <vfprintf+0x1a4>
     b20:	43 ff       	sbrs	r20, 3
     b22:	07 c0       	rjmp	.+14     	; 0xb32 <vfprintf+0x1b2>
     b24:	51 fc       	sbrc	r5, 1
     b26:	08 c0       	rjmp	.+16     	; 0xb38 <vfprintf+0x1b8>
     b28:	52 fe       	sbrs	r5, 2
     b2a:	09 c0       	rjmp	.+18     	; 0xb3e <vfprintf+0x1be>
     b2c:	e0 e2       	ldi	r30, 0x20	; 32
     b2e:	de 2e       	mov	r13, r30
     b30:	07 c0       	rjmp	.+14     	; 0xb40 <vfprintf+0x1c0>
     b32:	7d e2       	ldi	r23, 0x2D	; 45
     b34:	d7 2e       	mov	r13, r23
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <vfprintf+0x1c0>
     b38:	6b e2       	ldi	r22, 0x2B	; 43
     b3a:	d6 2e       	mov	r13, r22
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <vfprintf+0x1c0>
     b3e:	d1 2c       	mov	r13, r1
     b40:	8c 85       	ldd	r24, Y+12	; 0x0c
     b42:	8c 70       	andi	r24, 0x0C	; 12
     b44:	a1 f1       	breq	.+104    	; 0xbae <vfprintf+0x22e>
     b46:	dd 20       	and	r13, r13
     b48:	11 f0       	breq	.+4      	; 0xb4e <vfprintf+0x1ce>
     b4a:	84 e0       	ldi	r24, 0x04	; 4
     b4c:	01 c0       	rjmp	.+2      	; 0xb50 <vfprintf+0x1d0>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	86 15       	cp	r24, r6
     b52:	10 f0       	brcs	.+4      	; 0xb58 <vfprintf+0x1d8>
     b54:	61 2c       	mov	r6, r1
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <vfprintf+0x1ee>
     b58:	68 1a       	sub	r6, r24
     b5a:	53 fc       	sbrc	r5, 3
     b5c:	08 c0       	rjmp	.+16     	; 0xb6e <vfprintf+0x1ee>
     b5e:	b7 01       	movw	r22, r14
     b60:	80 e2       	ldi	r24, 0x20	; 32
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     b68:	6a 94       	dec	r6
     b6a:	c9 f7       	brne	.-14     	; 0xb5e <vfprintf+0x1de>
     b6c:	f3 cf       	rjmp	.-26     	; 0xb54 <vfprintf+0x1d4>
     b6e:	dd 20       	and	r13, r13
     b70:	29 f0       	breq	.+10     	; 0xb7c <vfprintf+0x1fc>
     b72:	b7 01       	movw	r22, r14
     b74:	8d 2d       	mov	r24, r13
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     b7c:	5c 85       	ldd	r21, Y+12	; 0x0c
     b7e:	53 fd       	sbrc	r21, 3
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <vfprintf+0x208>
     b82:	0f ee       	ldi	r16, 0xEF	; 239
     b84:	10 e0       	ldi	r17, 0x00	; 0
     b86:	0c c0       	rjmp	.+24     	; 0xba0 <vfprintf+0x220>
     b88:	0b ee       	ldi	r16, 0xEB	; 235
     b8a:	10 e0       	ldi	r17, 0x00	; 0
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <vfprintf+0x220>
     b8e:	51 10       	cpse	r5, r1
     b90:	80 52       	subi	r24, 0x20	; 32
     b92:	b7 01       	movw	r22, r14
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     b9a:	0f 5f       	subi	r16, 0xFF	; 255
     b9c:	1f 4f       	sbci	r17, 0xFF	; 255
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <vfprintf+0x224>
     ba0:	80 e1       	ldi	r24, 0x10	; 16
     ba2:	58 22       	and	r5, r24
     ba4:	f8 01       	movw	r30, r16
     ba6:	84 91       	lpm	r24, Z
     ba8:	81 11       	cpse	r24, r1
     baa:	f1 cf       	rjmp	.-30     	; 0xb8e <vfprintf+0x20e>
     bac:	71 c2       	rjmp	.+1250   	; 0x1090 <vfprintf+0x710>
     bae:	57 fe       	sbrs	r5, 7
     bb0:	0e c0       	rjmp	.+28     	; 0xbce <vfprintf+0x24e>
     bb2:	40 0e       	add	r4, r16
     bb4:	4c 85       	ldd	r20, Y+12	; 0x0c
     bb6:	44 ff       	sbrs	r20, 4
     bb8:	04 c0       	rjmp	.+8      	; 0xbc2 <vfprintf+0x242>
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	81 33       	cpi	r24, 0x31	; 49
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <vfprintf+0x242>
     bc0:	4a 94       	dec	r4
     bc2:	14 14       	cp	r1, r4
     bc4:	4c f5       	brge	.+82     	; 0xc18 <vfprintf+0x298>
     bc6:	58 e0       	ldi	r21, 0x08	; 8
     bc8:	54 15       	cp	r21, r4
     bca:	48 f1       	brcs	.+82     	; 0xc1e <vfprintf+0x29e>
     bcc:	2c c0       	rjmp	.+88     	; 0xc26 <vfprintf+0x2a6>
     bce:	56 fc       	sbrc	r5, 6
     bd0:	2a c0       	rjmp	.+84     	; 0xc26 <vfprintf+0x2a6>
     bd2:	87 2d       	mov	r24, r7
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	80 17       	cp	r24, r16
     bd8:	91 07       	cpc	r25, r17
     bda:	44 f0       	brlt	.+16     	; 0xbec <vfprintf+0x26c>
     bdc:	0c 3f       	cpi	r16, 0xFC	; 252
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	18 07       	cpc	r17, r24
     be2:	24 f0       	brlt	.+8      	; 0xbec <vfprintf+0x26c>
     be4:	90 e8       	ldi	r25, 0x80	; 128
     be6:	59 2a       	or	r5, r25
     be8:	01 c0       	rjmp	.+2      	; 0xbec <vfprintf+0x26c>
     bea:	7a 94       	dec	r7
     bec:	77 20       	and	r7, r7
     bee:	49 f0       	breq	.+18     	; 0xc02 <vfprintf+0x282>
     bf0:	e2 e0       	ldi	r30, 0x02	; 2
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	ec 0f       	add	r30, r28
     bf6:	fd 1f       	adc	r31, r29
     bf8:	e7 0d       	add	r30, r7
     bfa:	f1 1d       	adc	r31, r1
     bfc:	80 81       	ld	r24, Z
     bfe:	80 33       	cpi	r24, 0x30	; 48
     c00:	a1 f3       	breq	.-24     	; 0xbea <vfprintf+0x26a>
     c02:	57 fe       	sbrs	r5, 7
     c04:	10 c0       	rjmp	.+32     	; 0xc26 <vfprintf+0x2a6>
     c06:	47 2c       	mov	r4, r7
     c08:	43 94       	inc	r4
     c0a:	87 2d       	mov	r24, r7
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	08 17       	cp	r16, r24
     c10:	19 07       	cpc	r17, r25
     c12:	44 f4       	brge	.+16     	; 0xc24 <vfprintf+0x2a4>
     c14:	70 1a       	sub	r7, r16
     c16:	07 c0       	rjmp	.+14     	; 0xc26 <vfprintf+0x2a6>
     c18:	44 24       	eor	r4, r4
     c1a:	43 94       	inc	r4
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <vfprintf+0x2a6>
     c1e:	58 e0       	ldi	r21, 0x08	; 8
     c20:	45 2e       	mov	r4, r21
     c22:	01 c0       	rjmp	.+2      	; 0xc26 <vfprintf+0x2a6>
     c24:	71 2c       	mov	r7, r1
     c26:	57 fe       	sbrs	r5, 7
     c28:	07 c0       	rjmp	.+14     	; 0xc38 <vfprintf+0x2b8>
     c2a:	10 16       	cp	r1, r16
     c2c:	11 06       	cpc	r1, r17
     c2e:	3c f4       	brge	.+14     	; 0xc3e <vfprintf+0x2be>
     c30:	98 01       	movw	r18, r16
     c32:	2f 5f       	subi	r18, 0xFF	; 255
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	05 c0       	rjmp	.+10     	; 0xc42 <vfprintf+0x2c2>
     c38:	25 e0       	ldi	r18, 0x05	; 5
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <vfprintf+0x2c2>
     c3e:	21 e0       	ldi	r18, 0x01	; 1
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	dd 20       	and	r13, r13
     c44:	11 f0       	breq	.+4      	; 0xc4a <vfprintf+0x2ca>
     c46:	2f 5f       	subi	r18, 0xFF	; 255
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	77 20       	and	r7, r7
     c4c:	31 f0       	breq	.+12     	; 0xc5a <vfprintf+0x2da>
     c4e:	47 2d       	mov	r20, r7
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	4f 5f       	subi	r20, 0xFF	; 255
     c54:	5f 4f       	sbci	r21, 0xFF	; 255
     c56:	24 0f       	add	r18, r20
     c58:	35 1f       	adc	r19, r21
     c5a:	46 2d       	mov	r20, r6
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	24 17       	cp	r18, r20
     c60:	35 07       	cpc	r19, r21
     c62:	14 f4       	brge	.+4      	; 0xc68 <vfprintf+0x2e8>
     c64:	62 1a       	sub	r6, r18
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <vfprintf+0x2ea>
     c68:	61 2c       	mov	r6, r1
     c6a:	85 2d       	mov	r24, r5
     c6c:	89 70       	andi	r24, 0x09	; 9
     c6e:	49 f4       	brne	.+18     	; 0xc82 <vfprintf+0x302>
     c70:	06 c0       	rjmp	.+12     	; 0xc7e <vfprintf+0x2fe>
     c72:	b7 01       	movw	r22, r14
     c74:	80 e2       	ldi	r24, 0x20	; 32
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     c7c:	6a 94       	dec	r6
     c7e:	61 10       	cpse	r6, r1
     c80:	f8 cf       	rjmp	.-16     	; 0xc72 <vfprintf+0x2f2>
     c82:	dd 20       	and	r13, r13
     c84:	29 f0       	breq	.+10     	; 0xc90 <vfprintf+0x310>
     c86:	b7 01       	movw	r22, r14
     c88:	8d 2d       	mov	r24, r13
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     c90:	53 fc       	sbrc	r5, 3
     c92:	09 c0       	rjmp	.+18     	; 0xca6 <vfprintf+0x326>
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <vfprintf+0x322>
     c96:	b7 01       	movw	r22, r14
     c98:	80 e3       	ldi	r24, 0x30	; 48
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     ca0:	6a 94       	dec	r6
     ca2:	61 10       	cpse	r6, r1
     ca4:	f8 cf       	rjmp	.-16     	; 0xc96 <vfprintf+0x316>
     ca6:	57 fe       	sbrs	r5, 7
     ca8:	56 c0       	rjmp	.+172    	; 0xd56 <vfprintf+0x3d6>
     caa:	68 01       	movw	r12, r16
     cac:	17 ff       	sbrs	r17, 7
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <vfprintf+0x334>
     cb0:	c1 2c       	mov	r12, r1
     cb2:	d1 2c       	mov	r13, r1
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	a8 01       	movw	r20, r16
     cba:	44 19       	sub	r20, r4
     cbc:	51 09       	sbc	r21, r1
     cbe:	5e 87       	std	Y+14, r21	; 0x0e
     cc0:	4d 87       	std	Y+13, r20	; 0x0d
     cc2:	28 01       	movw	r4, r16
     cc4:	4c 18       	sub	r4, r12
     cc6:	5d 08       	sbc	r5, r13
     cc8:	48 0c       	add	r4, r8
     cca:	59 1c       	adc	r5, r9
     ccc:	87 2d       	mov	r24, r7
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	44 27       	eor	r20, r20
     cd2:	55 27       	eor	r21, r21
     cd4:	48 1b       	sub	r20, r24
     cd6:	59 0b       	sbc	r21, r25
     cd8:	58 8b       	std	Y+16, r21	; 0x10
     cda:	4f 87       	std	Y+15, r20	; 0x0f
     cdc:	5f ef       	ldi	r21, 0xFF	; 255
     cde:	c5 16       	cp	r12, r21
     ce0:	d5 06       	cpc	r13, r21
     ce2:	49 f4       	brne	.+18     	; 0xcf6 <vfprintf+0x376>
     ce4:	b7 01       	movw	r22, r14
     ce6:	8e e2       	ldi	r24, 0x2E	; 46
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	2a 8b       	std	Y+18, r18	; 0x12
     cec:	39 8b       	std	Y+17, r19	; 0x11
     cee:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     cf2:	39 89       	ldd	r19, Y+17	; 0x11
     cf4:	2a 89       	ldd	r18, Y+18	; 0x12
     cf6:	0c 15       	cp	r16, r12
     cf8:	1d 05       	cpc	r17, r13
     cfa:	54 f0       	brlt	.+20     	; 0xd10 <vfprintf+0x390>
     cfc:	4d 85       	ldd	r20, Y+13	; 0x0d
     cfe:	5e 85       	ldd	r21, Y+14	; 0x0e
     d00:	4c 15       	cp	r20, r12
     d02:	5d 05       	cpc	r21, r13
     d04:	2c f4       	brge	.+10     	; 0xd10 <vfprintf+0x390>
     d06:	f2 01       	movw	r30, r4
     d08:	e2 0f       	add	r30, r18
     d0a:	f3 1f       	adc	r31, r19
     d0c:	81 81       	ldd	r24, Z+1	; 0x01
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <vfprintf+0x392>
     d10:	80 e3       	ldi	r24, 0x30	; 48
     d12:	51 e0       	ldi	r21, 0x01	; 1
     d14:	c5 1a       	sub	r12, r21
     d16:	d1 08       	sbc	r13, r1
     d18:	2f 5f       	subi	r18, 0xFF	; 255
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	4f 85       	ldd	r20, Y+15	; 0x0f
     d1e:	58 89       	ldd	r21, Y+16	; 0x10
     d20:	c4 16       	cp	r12, r20
     d22:	d5 06       	cpc	r13, r21
     d24:	4c f0       	brlt	.+18     	; 0xd38 <vfprintf+0x3b8>
     d26:	b7 01       	movw	r22, r14
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	2a 8b       	std	Y+18, r18	; 0x12
     d2c:	39 8b       	std	Y+17, r19	; 0x11
     d2e:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     d32:	2a 89       	ldd	r18, Y+18	; 0x12
     d34:	39 89       	ldd	r19, Y+17	; 0x11
     d36:	d2 cf       	rjmp	.-92     	; 0xcdc <vfprintf+0x35c>
     d38:	c0 16       	cp	r12, r16
     d3a:	d1 06       	cpc	r13, r17
     d3c:	49 f4       	brne	.+18     	; 0xd50 <vfprintf+0x3d0>
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	96 33       	cpi	r25, 0x36	; 54
     d42:	28 f4       	brcc	.+10     	; 0xd4e <vfprintf+0x3ce>
     d44:	95 33       	cpi	r25, 0x35	; 53
     d46:	21 f4       	brne	.+8      	; 0xd50 <vfprintf+0x3d0>
     d48:	5c 85       	ldd	r21, Y+12	; 0x0c
     d4a:	54 fd       	sbrc	r21, 4
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <vfprintf+0x3d0>
     d4e:	81 e3       	ldi	r24, 0x31	; 49
     d50:	b7 01       	movw	r22, r14
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	4a c0       	rjmp	.+148    	; 0xdea <vfprintf+0x46a>
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	81 33       	cpi	r24, 0x31	; 49
     d5a:	19 f0       	breq	.+6      	; 0xd62 <vfprintf+0x3e2>
     d5c:	4c 85       	ldd	r20, Y+12	; 0x0c
     d5e:	4f 7e       	andi	r20, 0xEF	; 239
     d60:	4c 87       	std	Y+12, r20	; 0x0c
     d62:	b7 01       	movw	r22, r14
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     d6a:	71 10       	cpse	r7, r1
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <vfprintf+0x3f8>
     d6e:	54 fe       	sbrs	r5, 4
     d70:	16 c0       	rjmp	.+44     	; 0xd9e <vfprintf+0x41e>
     d72:	85 e4       	ldi	r24, 0x45	; 69
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	15 c0       	rjmp	.+42     	; 0xda2 <vfprintf+0x422>
     d78:	b7 01       	movw	r22, r14
     d7a:	8e e2       	ldi	r24, 0x2E	; 46
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     d82:	42 e0       	ldi	r20, 0x02	; 2
     d84:	d4 2e       	mov	r13, r20
     d86:	f4 01       	movw	r30, r8
     d88:	ed 0d       	add	r30, r13
     d8a:	f1 1d       	adc	r31, r1
     d8c:	d3 94       	inc	r13
     d8e:	b7 01       	movw	r22, r14
     d90:	80 81       	ld	r24, Z
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     d98:	7a 94       	dec	r7
     d9a:	a9 f7       	brne	.-22     	; 0xd86 <vfprintf+0x406>
     d9c:	e8 cf       	rjmp	.-48     	; 0xd6e <vfprintf+0x3ee>
     d9e:	85 e6       	ldi	r24, 0x65	; 101
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	b7 01       	movw	r22, r14
     da4:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     da8:	17 fd       	sbrc	r17, 7
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <vfprintf+0x438>
     dac:	01 15       	cp	r16, r1
     dae:	11 05       	cpc	r17, r1
     db0:	41 f4       	brne	.+16     	; 0xdc2 <vfprintf+0x442>
     db2:	5c 85       	ldd	r21, Y+12	; 0x0c
     db4:	54 ff       	sbrs	r21, 4
     db6:	05 c0       	rjmp	.+10     	; 0xdc2 <vfprintf+0x442>
     db8:	11 95       	neg	r17
     dba:	01 95       	neg	r16
     dbc:	11 09       	sbc	r17, r1
     dbe:	8d e2       	ldi	r24, 0x2D	; 45
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <vfprintf+0x444>
     dc2:	8b e2       	ldi	r24, 0x2B	; 43
     dc4:	b7 01       	movw	r22, r14
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     dcc:	80 e3       	ldi	r24, 0x30	; 48
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <vfprintf+0x456>
     dd0:	8f 5f       	subi	r24, 0xFF	; 255
     dd2:	0a 50       	subi	r16, 0x0A	; 10
     dd4:	11 09       	sbc	r17, r1
     dd6:	0a 30       	cpi	r16, 0x0A	; 10
     dd8:	11 05       	cpc	r17, r1
     dda:	d4 f7       	brge	.-12     	; 0xdd0 <vfprintf+0x450>
     ddc:	b7 01       	movw	r22, r14
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     de4:	b7 01       	movw	r22, r14
     de6:	c8 01       	movw	r24, r16
     de8:	c0 96       	adiw	r24, 0x30	; 48
     dea:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     dee:	50 c1       	rjmp	.+672    	; 0x1090 <vfprintf+0x710>
     df0:	83 36       	cpi	r24, 0x63	; 99
     df2:	31 f0       	breq	.+12     	; 0xe00 <vfprintf+0x480>
     df4:	83 37       	cpi	r24, 0x73	; 115
     df6:	81 f0       	breq	.+32     	; 0xe18 <vfprintf+0x498>
     df8:	83 35       	cpi	r24, 0x53	; 83
     dfa:	09 f0       	breq	.+2      	; 0xdfe <vfprintf+0x47e>
     dfc:	5e c0       	rjmp	.+188    	; 0xeba <vfprintf+0x53a>
     dfe:	24 c0       	rjmp	.+72     	; 0xe48 <vfprintf+0x4c8>
     e00:	56 01       	movw	r10, r12
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	a8 0e       	add	r10, r24
     e06:	b1 1c       	adc	r11, r1
     e08:	f6 01       	movw	r30, r12
     e0a:	80 81       	ld	r24, Z
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	cc 24       	eor	r12, r12
     e10:	c3 94       	inc	r12
     e12:	d1 2c       	mov	r13, r1
     e14:	84 01       	movw	r16, r8
     e16:	14 c0       	rjmp	.+40     	; 0xe40 <vfprintf+0x4c0>
     e18:	56 01       	movw	r10, r12
     e1a:	f2 e0       	ldi	r31, 0x02	; 2
     e1c:	af 0e       	add	r10, r31
     e1e:	b1 1c       	adc	r11, r1
     e20:	f6 01       	movw	r30, r12
     e22:	00 81       	ld	r16, Z
     e24:	11 81       	ldd	r17, Z+1	; 0x01
     e26:	26 ff       	sbrs	r18, 6
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <vfprintf+0x4b0>
     e2a:	67 2d       	mov	r22, r7
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <vfprintf+0x4b4>
     e30:	6f ef       	ldi	r22, 0xFF	; 255
     e32:	7f ef       	ldi	r23, 0xFF	; 255
     e34:	c8 01       	movw	r24, r16
     e36:	2a 8b       	std	Y+18, r18	; 0x12
     e38:	0e 94 76 09 	call	0x12ec	; 0x12ec <strnlen>
     e3c:	6c 01       	movw	r12, r24
     e3e:	2a 89       	ldd	r18, Y+18	; 0x12
     e40:	9f e7       	ldi	r25, 0x7F	; 127
     e42:	59 2e       	mov	r5, r25
     e44:	52 22       	and	r5, r18
     e46:	17 c0       	rjmp	.+46     	; 0xe76 <vfprintf+0x4f6>
     e48:	56 01       	movw	r10, r12
     e4a:	f2 e0       	ldi	r31, 0x02	; 2
     e4c:	af 0e       	add	r10, r31
     e4e:	b1 1c       	adc	r11, r1
     e50:	f6 01       	movw	r30, r12
     e52:	00 81       	ld	r16, Z
     e54:	11 81       	ldd	r17, Z+1	; 0x01
     e56:	26 ff       	sbrs	r18, 6
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <vfprintf+0x4e0>
     e5a:	67 2d       	mov	r22, r7
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <vfprintf+0x4e4>
     e60:	6f ef       	ldi	r22, 0xFF	; 255
     e62:	7f ef       	ldi	r23, 0xFF	; 255
     e64:	c8 01       	movw	r24, r16
     e66:	2a 8b       	std	Y+18, r18	; 0x12
     e68:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <strnlen_P>
     e6c:	6c 01       	movw	r12, r24
     e6e:	2a 89       	ldd	r18, Y+18	; 0x12
     e70:	80 e8       	ldi	r24, 0x80	; 128
     e72:	58 2e       	mov	r5, r24
     e74:	52 2a       	or	r5, r18
     e76:	53 fc       	sbrc	r5, 3
     e78:	1c c0       	rjmp	.+56     	; 0xeb2 <vfprintf+0x532>
     e7a:	06 c0       	rjmp	.+12     	; 0xe88 <vfprintf+0x508>
     e7c:	b7 01       	movw	r22, r14
     e7e:	80 e2       	ldi	r24, 0x20	; 32
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     e86:	6a 94       	dec	r6
     e88:	86 2d       	mov	r24, r6
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	c8 16       	cp	r12, r24
     e8e:	d9 06       	cpc	r13, r25
     e90:	a8 f3       	brcs	.-22     	; 0xe7c <vfprintf+0x4fc>
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <vfprintf+0x532>
     e94:	f8 01       	movw	r30, r16
     e96:	57 fc       	sbrc	r5, 7
     e98:	85 91       	lpm	r24, Z+
     e9a:	57 fe       	sbrs	r5, 7
     e9c:	81 91       	ld	r24, Z+
     e9e:	8f 01       	movw	r16, r30
     ea0:	b7 01       	movw	r22, r14
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
     ea8:	61 10       	cpse	r6, r1
     eaa:	6a 94       	dec	r6
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	cf 1a       	sub	r12, r31
     eb0:	d1 08       	sbc	r13, r1
     eb2:	c1 14       	cp	r12, r1
     eb4:	d1 04       	cpc	r13, r1
     eb6:	71 f7       	brne	.-36     	; 0xe94 <vfprintf+0x514>
     eb8:	eb c0       	rjmp	.+470    	; 0x1090 <vfprintf+0x710>
     eba:	84 36       	cpi	r24, 0x64	; 100
     ebc:	11 f0       	breq	.+4      	; 0xec2 <vfprintf+0x542>
     ebe:	89 36       	cpi	r24, 0x69	; 105
     ec0:	51 f5       	brne	.+84     	; 0xf16 <vfprintf+0x596>
     ec2:	56 01       	movw	r10, r12
     ec4:	27 ff       	sbrs	r18, 7
     ec6:	09 c0       	rjmp	.+18     	; 0xeda <vfprintf+0x55a>
     ec8:	44 e0       	ldi	r20, 0x04	; 4
     eca:	a4 0e       	add	r10, r20
     ecc:	b1 1c       	adc	r11, r1
     ece:	f6 01       	movw	r30, r12
     ed0:	60 81       	ld	r22, Z
     ed2:	71 81       	ldd	r23, Z+1	; 0x01
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	0a c0       	rjmp	.+20     	; 0xeee <vfprintf+0x56e>
     eda:	f2 e0       	ldi	r31, 0x02	; 2
     edc:	af 0e       	add	r10, r31
     ede:	b1 1c       	adc	r11, r1
     ee0:	f6 01       	movw	r30, r12
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	88 27       	eor	r24, r24
     ee8:	77 fd       	sbrc	r23, 7
     eea:	80 95       	com	r24
     eec:	98 2f       	mov	r25, r24
     eee:	12 2f       	mov	r17, r18
     ef0:	1f 76       	andi	r17, 0x6F	; 111
     ef2:	97 ff       	sbrs	r25, 7
     ef4:	08 c0       	rjmp	.+16     	; 0xf06 <vfprintf+0x586>
     ef6:	90 95       	com	r25
     ef8:	80 95       	com	r24
     efa:	70 95       	com	r23
     efc:	61 95       	neg	r22
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	8f 4f       	sbci	r24, 0xFF	; 255
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	10 68       	ori	r17, 0x80	; 128
     f06:	2a e0       	ldi	r18, 0x0A	; 10
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	a4 01       	movw	r20, r8
     f0c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__ultoa_invert>
     f10:	d8 2e       	mov	r13, r24
     f12:	d8 18       	sub	r13, r8
     f14:	40 c0       	rjmp	.+128    	; 0xf96 <vfprintf+0x616>
     f16:	12 2f       	mov	r17, r18
     f18:	85 37       	cpi	r24, 0x75	; 117
     f1a:	21 f4       	brne	.+8      	; 0xf24 <vfprintf+0x5a4>
     f1c:	1f 7e       	andi	r17, 0xEF	; 239
     f1e:	2a e0       	ldi	r18, 0x0A	; 10
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	1f c0       	rjmp	.+62     	; 0xf62 <vfprintf+0x5e2>
     f24:	19 7f       	andi	r17, 0xF9	; 249
     f26:	8f 36       	cpi	r24, 0x6F	; 111
     f28:	a1 f0       	breq	.+40     	; 0xf52 <vfprintf+0x5d2>
     f2a:	20 f4       	brcc	.+8      	; 0xf34 <vfprintf+0x5b4>
     f2c:	88 35       	cpi	r24, 0x58	; 88
     f2e:	09 f0       	breq	.+2      	; 0xf32 <vfprintf+0x5b2>
     f30:	b2 c0       	rjmp	.+356    	; 0x1096 <vfprintf+0x716>
     f32:	0b c0       	rjmp	.+22     	; 0xf4a <vfprintf+0x5ca>
     f34:	80 37       	cpi	r24, 0x70	; 112
     f36:	21 f0       	breq	.+8      	; 0xf40 <vfprintf+0x5c0>
     f38:	88 37       	cpi	r24, 0x78	; 120
     f3a:	09 f0       	breq	.+2      	; 0xf3e <vfprintf+0x5be>
     f3c:	ac c0       	rjmp	.+344    	; 0x1096 <vfprintf+0x716>
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <vfprintf+0x5c2>
     f40:	10 61       	ori	r17, 0x10	; 16
     f42:	14 ff       	sbrs	r17, 4
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <vfprintf+0x5d8>
     f46:	14 60       	ori	r17, 0x04	; 4
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <vfprintf+0x5d8>
     f4a:	24 ff       	sbrs	r18, 4
     f4c:	08 c0       	rjmp	.+16     	; 0xf5e <vfprintf+0x5de>
     f4e:	16 60       	ori	r17, 0x06	; 6
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <vfprintf+0x5de>
     f52:	28 e0       	ldi	r18, 0x08	; 8
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <vfprintf+0x5e2>
     f58:	20 e1       	ldi	r18, 0x10	; 16
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <vfprintf+0x5e2>
     f5e:	20 e1       	ldi	r18, 0x10	; 16
     f60:	32 e0       	ldi	r19, 0x02	; 2
     f62:	56 01       	movw	r10, r12
     f64:	17 ff       	sbrs	r17, 7
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <vfprintf+0x5fa>
     f68:	f4 e0       	ldi	r31, 0x04	; 4
     f6a:	af 0e       	add	r10, r31
     f6c:	b1 1c       	adc	r11, r1
     f6e:	f6 01       	movw	r30, r12
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	08 c0       	rjmp	.+16     	; 0xf8a <vfprintf+0x60a>
     f7a:	f2 e0       	ldi	r31, 0x02	; 2
     f7c:	af 0e       	add	r10, r31
     f7e:	b1 1c       	adc	r11, r1
     f80:	f6 01       	movw	r30, r12
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	a4 01       	movw	r20, r8
     f8c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__ultoa_invert>
     f90:	d8 2e       	mov	r13, r24
     f92:	d8 18       	sub	r13, r8
     f94:	1f 77       	andi	r17, 0x7F	; 127
     f96:	16 ff       	sbrs	r17, 6
     f98:	0b c0       	rjmp	.+22     	; 0xfb0 <vfprintf+0x630>
     f9a:	21 2f       	mov	r18, r17
     f9c:	2e 7f       	andi	r18, 0xFE	; 254
     f9e:	d7 14       	cp	r13, r7
     fa0:	50 f4       	brcc	.+20     	; 0xfb6 <vfprintf+0x636>
     fa2:	14 ff       	sbrs	r17, 4
     fa4:	0a c0       	rjmp	.+20     	; 0xfba <vfprintf+0x63a>
     fa6:	12 fd       	sbrc	r17, 2
     fa8:	08 c0       	rjmp	.+16     	; 0xfba <vfprintf+0x63a>
     faa:	21 2f       	mov	r18, r17
     fac:	2e 7e       	andi	r18, 0xEE	; 238
     fae:	05 c0       	rjmp	.+10     	; 0xfba <vfprintf+0x63a>
     fb0:	0d 2d       	mov	r16, r13
     fb2:	21 2f       	mov	r18, r17
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <vfprintf+0x63c>
     fb6:	0d 2d       	mov	r16, r13
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <vfprintf+0x63c>
     fba:	07 2d       	mov	r16, r7
     fbc:	24 ff       	sbrs	r18, 4
     fbe:	0c c0       	rjmp	.+24     	; 0xfd8 <vfprintf+0x658>
     fc0:	fe 01       	movw	r30, r28
     fc2:	ed 0d       	add	r30, r13
     fc4:	f1 1d       	adc	r31, r1
     fc6:	80 81       	ld	r24, Z
     fc8:	80 33       	cpi	r24, 0x30	; 48
     fca:	11 f4       	brne	.+4      	; 0xfd0 <vfprintf+0x650>
     fcc:	29 7e       	andi	r18, 0xE9	; 233
     fce:	08 c0       	rjmp	.+16     	; 0xfe0 <vfprintf+0x660>
     fd0:	22 ff       	sbrs	r18, 2
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <vfprintf+0x65e>
     fd4:	0e 5f       	subi	r16, 0xFE	; 254
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <vfprintf+0x660>
     fd8:	82 2f       	mov	r24, r18
     fda:	86 78       	andi	r24, 0x86	; 134
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <vfprintf+0x660>
     fde:	0f 5f       	subi	r16, 0xFF	; 255
     fe0:	23 fd       	sbrc	r18, 3
     fe2:	14 c0       	rjmp	.+40     	; 0x100c <vfprintf+0x68c>
     fe4:	20 ff       	sbrs	r18, 0
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <vfprintf+0x686>
     fe8:	7d 2c       	mov	r7, r13
     fea:	06 15       	cp	r16, r6
     fec:	60 f4       	brcc	.+24     	; 0x1006 <vfprintf+0x686>
     fee:	76 0c       	add	r7, r6
     ff0:	70 1a       	sub	r7, r16
     ff2:	06 2d       	mov	r16, r6
     ff4:	08 c0       	rjmp	.+16     	; 0x1006 <vfprintf+0x686>
     ff6:	b7 01       	movw	r22, r14
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	2a 8b       	std	Y+18, r18	; 0x12
     ffe:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
    1002:	0f 5f       	subi	r16, 0xFF	; 255
    1004:	2a 89       	ldd	r18, Y+18	; 0x12
    1006:	06 15       	cp	r16, r6
    1008:	b0 f3       	brcs	.-20     	; 0xff6 <vfprintf+0x676>
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <vfprintf+0x694>
    100c:	06 15       	cp	r16, r6
    100e:	10 f4       	brcc	.+4      	; 0x1014 <vfprintf+0x694>
    1010:	60 1a       	sub	r6, r16
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <vfprintf+0x696>
    1014:	61 2c       	mov	r6, r1
    1016:	24 ff       	sbrs	r18, 4
    1018:	12 c0       	rjmp	.+36     	; 0x103e <vfprintf+0x6be>
    101a:	b7 01       	movw	r22, r14
    101c:	80 e3       	ldi	r24, 0x30	; 48
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	2a 8b       	std	Y+18, r18	; 0x12
    1022:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
    1026:	2a 89       	ldd	r18, Y+18	; 0x12
    1028:	22 ff       	sbrs	r18, 2
    102a:	1e c0       	rjmp	.+60     	; 0x1068 <vfprintf+0x6e8>
    102c:	21 ff       	sbrs	r18, 1
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <vfprintf+0x6b6>
    1030:	88 e5       	ldi	r24, 0x58	; 88
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <vfprintf+0x6ba>
    1036:	88 e7       	ldi	r24, 0x78	; 120
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	b7 01       	movw	r22, r14
    103c:	0c c0       	rjmp	.+24     	; 0x1056 <vfprintf+0x6d6>
    103e:	82 2f       	mov	r24, r18
    1040:	86 78       	andi	r24, 0x86	; 134
    1042:	91 f0       	breq	.+36     	; 0x1068 <vfprintf+0x6e8>
    1044:	21 fd       	sbrc	r18, 1
    1046:	02 c0       	rjmp	.+4      	; 0x104c <vfprintf+0x6cc>
    1048:	80 e2       	ldi	r24, 0x20	; 32
    104a:	01 c0       	rjmp	.+2      	; 0x104e <vfprintf+0x6ce>
    104c:	8b e2       	ldi	r24, 0x2B	; 43
    104e:	27 fd       	sbrc	r18, 7
    1050:	8d e2       	ldi	r24, 0x2D	; 45
    1052:	b7 01       	movw	r22, r14
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
    105a:	06 c0       	rjmp	.+12     	; 0x1068 <vfprintf+0x6e8>
    105c:	b7 01       	movw	r22, r14
    105e:	80 e3       	ldi	r24, 0x30	; 48
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
    1066:	7a 94       	dec	r7
    1068:	d7 14       	cp	r13, r7
    106a:	c0 f3       	brcs	.-16     	; 0x105c <vfprintf+0x6dc>
    106c:	da 94       	dec	r13
    106e:	f4 01       	movw	r30, r8
    1070:	ed 0d       	add	r30, r13
    1072:	f1 1d       	adc	r31, r1
    1074:	b7 01       	movw	r22, r14
    1076:	80 81       	ld	r24, Z
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
    107e:	d1 10       	cpse	r13, r1
    1080:	f5 cf       	rjmp	.-22     	; 0x106c <vfprintf+0x6ec>
    1082:	06 c0       	rjmp	.+12     	; 0x1090 <vfprintf+0x710>
    1084:	b7 01       	movw	r22, r14
    1086:	80 e2       	ldi	r24, 0x20	; 32
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 81 09 	call	0x1302	; 0x1302 <fputc>
    108e:	6a 94       	dec	r6
    1090:	61 10       	cpse	r6, r1
    1092:	f8 cf       	rjmp	.-16     	; 0x1084 <vfprintf+0x704>
    1094:	99 cc       	rjmp	.-1742   	; 0x9c8 <vfprintf+0x48>
    1096:	f7 01       	movw	r30, r14
    1098:	26 81       	ldd	r18, Z+6	; 0x06
    109a:	37 81       	ldd	r19, Z+7	; 0x07
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <vfprintf+0x722>
    109e:	2f ef       	ldi	r18, 0xFF	; 255
    10a0:	3f ef       	ldi	r19, 0xFF	; 255
    10a2:	c9 01       	movw	r24, r18
    10a4:	62 96       	adiw	r28, 0x12	; 18
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	bf 90       	pop	r11
    10c2:	af 90       	pop	r10
    10c4:	9f 90       	pop	r9
    10c6:	8f 90       	pop	r8
    10c8:	7f 90       	pop	r7
    10ca:	6f 90       	pop	r6
    10cc:	5f 90       	pop	r5
    10ce:	4f 90       	pop	r4
    10d0:	3f 90       	pop	r3
    10d2:	2f 90       	pop	r2
    10d4:	08 95       	ret

000010d6 <__udivmodhi4>:
    10d6:	aa 1b       	sub	r26, r26
    10d8:	bb 1b       	sub	r27, r27
    10da:	51 e1       	ldi	r21, 0x11	; 17
    10dc:	07 c0       	rjmp	.+14     	; 0x10ec <__udivmodhi4_ep>

000010de <__udivmodhi4_loop>:
    10de:	aa 1f       	adc	r26, r26
    10e0:	bb 1f       	adc	r27, r27
    10e2:	a6 17       	cp	r26, r22
    10e4:	b7 07       	cpc	r27, r23
    10e6:	10 f0       	brcs	.+4      	; 0x10ec <__udivmodhi4_ep>
    10e8:	a6 1b       	sub	r26, r22
    10ea:	b7 0b       	sbc	r27, r23

000010ec <__udivmodhi4_ep>:
    10ec:	88 1f       	adc	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	5a 95       	dec	r21
    10f2:	a9 f7       	brne	.-22     	; 0x10de <__udivmodhi4_loop>
    10f4:	80 95       	com	r24
    10f6:	90 95       	com	r25
    10f8:	bc 01       	movw	r22, r24
    10fa:	cd 01       	movw	r24, r26
    10fc:	08 95       	ret

000010fe <__divmodhi4>:
    10fe:	97 fb       	bst	r25, 7
    1100:	07 2e       	mov	r0, r23
    1102:	16 f4       	brtc	.+4      	; 0x1108 <__divmodhi4+0xa>
    1104:	00 94       	com	r0
    1106:	07 d0       	rcall	.+14     	; 0x1116 <__divmodhi4_neg1>
    1108:	77 fd       	sbrc	r23, 7
    110a:	09 d0       	rcall	.+18     	; 0x111e <__divmodhi4_neg2>
    110c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__udivmodhi4>
    1110:	07 fc       	sbrc	r0, 7
    1112:	05 d0       	rcall	.+10     	; 0x111e <__divmodhi4_neg2>
    1114:	3e f4       	brtc	.+14     	; 0x1124 <__divmodhi4_exit>

00001116 <__divmodhi4_neg1>:
    1116:	90 95       	com	r25
    1118:	81 95       	neg	r24
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	08 95       	ret

0000111e <__divmodhi4_neg2>:
    111e:	70 95       	com	r23
    1120:	61 95       	neg	r22
    1122:	7f 4f       	sbci	r23, 0xFF	; 255

00001124 <__divmodhi4_exit>:
    1124:	08 95       	ret

00001126 <__ftoa_engine>:
    1126:	28 30       	cpi	r18, 0x08	; 8
    1128:	08 f0       	brcs	.+2      	; 0x112c <__ftoa_engine+0x6>
    112a:	27 e0       	ldi	r18, 0x07	; 7
    112c:	33 27       	eor	r19, r19
    112e:	da 01       	movw	r26, r20
    1130:	99 0f       	add	r25, r25
    1132:	31 1d       	adc	r19, r1
    1134:	87 fd       	sbrc	r24, 7
    1136:	91 60       	ori	r25, 0x01	; 1
    1138:	00 96       	adiw	r24, 0x00	; 0
    113a:	61 05       	cpc	r22, r1
    113c:	71 05       	cpc	r23, r1
    113e:	39 f4       	brne	.+14     	; 0x114e <__ftoa_engine+0x28>
    1140:	32 60       	ori	r19, 0x02	; 2
    1142:	2e 5f       	subi	r18, 0xFE	; 254
    1144:	3d 93       	st	X+, r19
    1146:	30 e3       	ldi	r19, 0x30	; 48
    1148:	2a 95       	dec	r18
    114a:	e1 f7       	brne	.-8      	; 0x1144 <__ftoa_engine+0x1e>
    114c:	08 95       	ret
    114e:	9f 3f       	cpi	r25, 0xFF	; 255
    1150:	30 f0       	brcs	.+12     	; 0x115e <__ftoa_engine+0x38>
    1152:	80 38       	cpi	r24, 0x80	; 128
    1154:	71 05       	cpc	r23, r1
    1156:	61 05       	cpc	r22, r1
    1158:	09 f0       	breq	.+2      	; 0x115c <__ftoa_engine+0x36>
    115a:	3c 5f       	subi	r19, 0xFC	; 252
    115c:	3c 5f       	subi	r19, 0xFC	; 252
    115e:	3d 93       	st	X+, r19
    1160:	91 30       	cpi	r25, 0x01	; 1
    1162:	08 f0       	brcs	.+2      	; 0x1166 <__ftoa_engine+0x40>
    1164:	80 68       	ori	r24, 0x80	; 128
    1166:	91 1d       	adc	r25, r1
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	1f 93       	push	r17
    116e:	0f 93       	push	r16
    1170:	ff 92       	push	r15
    1172:	ef 92       	push	r14
    1174:	19 2f       	mov	r17, r25
    1176:	98 7f       	andi	r25, 0xF8	; 248
    1178:	96 95       	lsr	r25
    117a:	e9 2f       	mov	r30, r25
    117c:	96 95       	lsr	r25
    117e:	96 95       	lsr	r25
    1180:	e9 0f       	add	r30, r25
    1182:	ff 27       	eor	r31, r31
    1184:	e3 5b       	subi	r30, 0xB3	; 179
    1186:	fe 4f       	sbci	r31, 0xFE	; 254
    1188:	99 27       	eor	r25, r25
    118a:	33 27       	eor	r19, r19
    118c:	ee 24       	eor	r14, r14
    118e:	ff 24       	eor	r15, r15
    1190:	a7 01       	movw	r20, r14
    1192:	e7 01       	movw	r28, r14
    1194:	05 90       	lpm	r0, Z+
    1196:	08 94       	sec
    1198:	07 94       	ror	r0
    119a:	28 f4       	brcc	.+10     	; 0x11a6 <__ftoa_engine+0x80>
    119c:	36 0f       	add	r19, r22
    119e:	e7 1e       	adc	r14, r23
    11a0:	f8 1e       	adc	r15, r24
    11a2:	49 1f       	adc	r20, r25
    11a4:	51 1d       	adc	r21, r1
    11a6:	66 0f       	add	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	06 94       	lsr	r0
    11b0:	a1 f7       	brne	.-24     	; 0x119a <__ftoa_engine+0x74>
    11b2:	05 90       	lpm	r0, Z+
    11b4:	07 94       	ror	r0
    11b6:	28 f4       	brcc	.+10     	; 0x11c2 <__ftoa_engine+0x9c>
    11b8:	e7 0e       	add	r14, r23
    11ba:	f8 1e       	adc	r15, r24
    11bc:	49 1f       	adc	r20, r25
    11be:	56 1f       	adc	r21, r22
    11c0:	c1 1d       	adc	r28, r1
    11c2:	77 0f       	add	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	66 1f       	adc	r22, r22
    11ca:	06 94       	lsr	r0
    11cc:	a1 f7       	brne	.-24     	; 0x11b6 <__ftoa_engine+0x90>
    11ce:	05 90       	lpm	r0, Z+
    11d0:	07 94       	ror	r0
    11d2:	28 f4       	brcc	.+10     	; 0x11de <__ftoa_engine+0xb8>
    11d4:	f8 0e       	add	r15, r24
    11d6:	49 1f       	adc	r20, r25
    11d8:	56 1f       	adc	r21, r22
    11da:	c7 1f       	adc	r28, r23
    11dc:	d1 1d       	adc	r29, r1
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	66 1f       	adc	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	06 94       	lsr	r0
    11e8:	a1 f7       	brne	.-24     	; 0x11d2 <__ftoa_engine+0xac>
    11ea:	05 90       	lpm	r0, Z+
    11ec:	07 94       	ror	r0
    11ee:	20 f4       	brcc	.+8      	; 0x11f8 <__ftoa_engine+0xd2>
    11f0:	49 0f       	add	r20, r25
    11f2:	56 1f       	adc	r21, r22
    11f4:	c7 1f       	adc	r28, r23
    11f6:	d8 1f       	adc	r29, r24
    11f8:	99 0f       	add	r25, r25
    11fa:	66 1f       	adc	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	06 94       	lsr	r0
    1202:	a9 f7       	brne	.-22     	; 0x11ee <__ftoa_engine+0xc8>
    1204:	84 91       	lpm	r24, Z
    1206:	10 95       	com	r17
    1208:	17 70       	andi	r17, 0x07	; 7
    120a:	41 f0       	breq	.+16     	; 0x121c <__ftoa_engine+0xf6>
    120c:	d6 95       	lsr	r29
    120e:	c7 95       	ror	r28
    1210:	57 95       	ror	r21
    1212:	47 95       	ror	r20
    1214:	f7 94       	ror	r15
    1216:	e7 94       	ror	r14
    1218:	1a 95       	dec	r17
    121a:	c1 f7       	brne	.-16     	; 0x120c <__ftoa_engine+0xe6>
    121c:	e3 ef       	ldi	r30, 0xF3	; 243
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	68 94       	set
    1222:	15 90       	lpm	r1, Z+
    1224:	15 91       	lpm	r17, Z+
    1226:	35 91       	lpm	r19, Z+
    1228:	65 91       	lpm	r22, Z+
    122a:	95 91       	lpm	r25, Z+
    122c:	05 90       	lpm	r0, Z+
    122e:	7f e2       	ldi	r23, 0x2F	; 47
    1230:	73 95       	inc	r23
    1232:	e1 18       	sub	r14, r1
    1234:	f1 0a       	sbc	r15, r17
    1236:	43 0b       	sbc	r20, r19
    1238:	56 0b       	sbc	r21, r22
    123a:	c9 0b       	sbc	r28, r25
    123c:	d0 09       	sbc	r29, r0
    123e:	c0 f7       	brcc	.-16     	; 0x1230 <__ftoa_engine+0x10a>
    1240:	e1 0c       	add	r14, r1
    1242:	f1 1e       	adc	r15, r17
    1244:	43 1f       	adc	r20, r19
    1246:	56 1f       	adc	r21, r22
    1248:	c9 1f       	adc	r28, r25
    124a:	d0 1d       	adc	r29, r0
    124c:	7e f4       	brtc	.+30     	; 0x126c <__ftoa_engine+0x146>
    124e:	70 33       	cpi	r23, 0x30	; 48
    1250:	11 f4       	brne	.+4      	; 0x1256 <__ftoa_engine+0x130>
    1252:	8a 95       	dec	r24
    1254:	e6 cf       	rjmp	.-52     	; 0x1222 <__ftoa_engine+0xfc>
    1256:	e8 94       	clt
    1258:	01 50       	subi	r16, 0x01	; 1
    125a:	30 f0       	brcs	.+12     	; 0x1268 <__ftoa_engine+0x142>
    125c:	08 0f       	add	r16, r24
    125e:	0a f4       	brpl	.+2      	; 0x1262 <__ftoa_engine+0x13c>
    1260:	00 27       	eor	r16, r16
    1262:	02 17       	cp	r16, r18
    1264:	08 f4       	brcc	.+2      	; 0x1268 <__ftoa_engine+0x142>
    1266:	20 2f       	mov	r18, r16
    1268:	23 95       	inc	r18
    126a:	02 2f       	mov	r16, r18
    126c:	7a 33       	cpi	r23, 0x3A	; 58
    126e:	28 f0       	brcs	.+10     	; 0x127a <__ftoa_engine+0x154>
    1270:	79 e3       	ldi	r23, 0x39	; 57
    1272:	7d 93       	st	X+, r23
    1274:	2a 95       	dec	r18
    1276:	e9 f7       	brne	.-6      	; 0x1272 <__ftoa_engine+0x14c>
    1278:	10 c0       	rjmp	.+32     	; 0x129a <__ftoa_engine+0x174>
    127a:	7d 93       	st	X+, r23
    127c:	2a 95       	dec	r18
    127e:	89 f6       	brne	.-94     	; 0x1222 <__ftoa_engine+0xfc>
    1280:	06 94       	lsr	r0
    1282:	97 95       	ror	r25
    1284:	67 95       	ror	r22
    1286:	37 95       	ror	r19
    1288:	17 95       	ror	r17
    128a:	17 94       	ror	r1
    128c:	e1 18       	sub	r14, r1
    128e:	f1 0a       	sbc	r15, r17
    1290:	43 0b       	sbc	r20, r19
    1292:	56 0b       	sbc	r21, r22
    1294:	c9 0b       	sbc	r28, r25
    1296:	d0 09       	sbc	r29, r0
    1298:	98 f0       	brcs	.+38     	; 0x12c0 <__ftoa_engine+0x19a>
    129a:	23 95       	inc	r18
    129c:	7e 91       	ld	r23, -X
    129e:	73 95       	inc	r23
    12a0:	7a 33       	cpi	r23, 0x3A	; 58
    12a2:	08 f0       	brcs	.+2      	; 0x12a6 <__ftoa_engine+0x180>
    12a4:	70 e3       	ldi	r23, 0x30	; 48
    12a6:	7c 93       	st	X, r23
    12a8:	20 13       	cpse	r18, r16
    12aa:	b8 f7       	brcc	.-18     	; 0x129a <__ftoa_engine+0x174>
    12ac:	7e 91       	ld	r23, -X
    12ae:	70 61       	ori	r23, 0x10	; 16
    12b0:	7d 93       	st	X+, r23
    12b2:	30 f0       	brcs	.+12     	; 0x12c0 <__ftoa_engine+0x19a>
    12b4:	83 95       	inc	r24
    12b6:	71 e3       	ldi	r23, 0x31	; 49
    12b8:	7d 93       	st	X+, r23
    12ba:	70 e3       	ldi	r23, 0x30	; 48
    12bc:	2a 95       	dec	r18
    12be:	e1 f7       	brne	.-8      	; 0x12b8 <__ftoa_engine+0x192>
    12c0:	11 24       	eor	r1, r1
    12c2:	ef 90       	pop	r14
    12c4:	ff 90       	pop	r15
    12c6:	0f 91       	pop	r16
    12c8:	1f 91       	pop	r17
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	99 27       	eor	r25, r25
    12d0:	87 fd       	sbrc	r24, 7
    12d2:	90 95       	com	r25
    12d4:	08 95       	ret

000012d6 <strnlen_P>:
    12d6:	fc 01       	movw	r30, r24
    12d8:	05 90       	lpm	r0, Z+
    12da:	61 50       	subi	r22, 0x01	; 1
    12dc:	70 40       	sbci	r23, 0x00	; 0
    12de:	01 10       	cpse	r0, r1
    12e0:	d8 f7       	brcc	.-10     	; 0x12d8 <strnlen_P+0x2>
    12e2:	80 95       	com	r24
    12e4:	90 95       	com	r25
    12e6:	8e 0f       	add	r24, r30
    12e8:	9f 1f       	adc	r25, r31
    12ea:	08 95       	ret

000012ec <strnlen>:
    12ec:	fc 01       	movw	r30, r24
    12ee:	61 50       	subi	r22, 0x01	; 1
    12f0:	70 40       	sbci	r23, 0x00	; 0
    12f2:	01 90       	ld	r0, Z+
    12f4:	01 10       	cpse	r0, r1
    12f6:	d8 f7       	brcc	.-10     	; 0x12ee <strnlen+0x2>
    12f8:	80 95       	com	r24
    12fa:	90 95       	com	r25
    12fc:	8e 0f       	add	r24, r30
    12fe:	9f 1f       	adc	r25, r31
    1300:	08 95       	ret

00001302 <fputc>:
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	8c 01       	movw	r16, r24
    130c:	eb 01       	movw	r28, r22
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	81 fd       	sbrc	r24, 1
    1312:	03 c0       	rjmp	.+6      	; 0x131a <fputc+0x18>
    1314:	0f ef       	ldi	r16, 0xFF	; 255
    1316:	1f ef       	ldi	r17, 0xFF	; 255
    1318:	1a c0       	rjmp	.+52     	; 0x134e <fputc+0x4c>
    131a:	82 ff       	sbrs	r24, 2
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <fputc+0x36>
    131e:	2e 81       	ldd	r18, Y+6	; 0x06
    1320:	3f 81       	ldd	r19, Y+7	; 0x07
    1322:	8c 81       	ldd	r24, Y+4	; 0x04
    1324:	9d 81       	ldd	r25, Y+5	; 0x05
    1326:	28 17       	cp	r18, r24
    1328:	39 07       	cpc	r19, r25
    132a:	64 f4       	brge	.+24     	; 0x1344 <fputc+0x42>
    132c:	e8 81       	ld	r30, Y
    132e:	f9 81       	ldd	r31, Y+1	; 0x01
    1330:	01 93       	st	Z+, r16
    1332:	f9 83       	std	Y+1, r31	; 0x01
    1334:	e8 83       	st	Y, r30
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <fputc+0x42>
    1338:	e8 85       	ldd	r30, Y+8	; 0x08
    133a:	f9 85       	ldd	r31, Y+9	; 0x09
    133c:	80 2f       	mov	r24, r16
    133e:	09 95       	icall
    1340:	89 2b       	or	r24, r25
    1342:	41 f7       	brne	.-48     	; 0x1314 <fputc+0x12>
    1344:	8e 81       	ldd	r24, Y+6	; 0x06
    1346:	9f 81       	ldd	r25, Y+7	; 0x07
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	9f 83       	std	Y+7, r25	; 0x07
    134c:	8e 83       	std	Y+6, r24	; 0x06
    134e:	c8 01       	movw	r24, r16
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <sprintf>:
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	2e 97       	sbiw	r28, 0x0e	; 14
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	0d 89       	ldd	r16, Y+21	; 0x15
    1374:	1e 89       	ldd	r17, Y+22	; 0x16
    1376:	86 e0       	ldi	r24, 0x06	; 6
    1378:	8c 83       	std	Y+4, r24	; 0x04
    137a:	1a 83       	std	Y+2, r17	; 0x02
    137c:	09 83       	std	Y+1, r16	; 0x01
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	9f e7       	ldi	r25, 0x7F	; 127
    1382:	9e 83       	std	Y+6, r25	; 0x06
    1384:	8d 83       	std	Y+5, r24	; 0x05
    1386:	ce 01       	movw	r24, r28
    1388:	49 96       	adiw	r24, 0x19	; 25
    138a:	ac 01       	movw	r20, r24
    138c:	6f 89       	ldd	r22, Y+23	; 0x17
    138e:	78 8d       	ldd	r23, Y+24	; 0x18
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	0e 94 c0 04 	call	0x980	; 0x980 <vfprintf>
    1398:	ef 81       	ldd	r30, Y+7	; 0x07
    139a:	f8 85       	ldd	r31, Y+8	; 0x08
    139c:	e0 0f       	add	r30, r16
    139e:	f1 1f       	adc	r31, r17
    13a0:	10 82       	st	Z, r1
    13a2:	2e 96       	adiw	r28, 0x0e	; 14
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	08 95       	ret

000013b8 <__ultoa_invert>:
    13b8:	fa 01       	movw	r30, r20
    13ba:	aa 27       	eor	r26, r26
    13bc:	28 30       	cpi	r18, 0x08	; 8
    13be:	51 f1       	breq	.+84     	; 0x1414 <__ultoa_invert+0x5c>
    13c0:	20 31       	cpi	r18, 0x10	; 16
    13c2:	81 f1       	breq	.+96     	; 0x1424 <__ultoa_invert+0x6c>
    13c4:	e8 94       	clt
    13c6:	6f 93       	push	r22
    13c8:	6e 7f       	andi	r22, 0xFE	; 254
    13ca:	6e 5f       	subi	r22, 0xFE	; 254
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	8f 4f       	sbci	r24, 0xFF	; 255
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	af 4f       	sbci	r26, 0xFF	; 255
    13d4:	b1 e0       	ldi	r27, 0x01	; 1
    13d6:	3e d0       	rcall	.+124    	; 0x1454 <__ultoa_invert+0x9c>
    13d8:	b4 e0       	ldi	r27, 0x04	; 4
    13da:	3c d0       	rcall	.+120    	; 0x1454 <__ultoa_invert+0x9c>
    13dc:	67 0f       	add	r22, r23
    13de:	78 1f       	adc	r23, r24
    13e0:	89 1f       	adc	r24, r25
    13e2:	9a 1f       	adc	r25, r26
    13e4:	a1 1d       	adc	r26, r1
    13e6:	68 0f       	add	r22, r24
    13e8:	79 1f       	adc	r23, r25
    13ea:	8a 1f       	adc	r24, r26
    13ec:	91 1d       	adc	r25, r1
    13ee:	a1 1d       	adc	r26, r1
    13f0:	6a 0f       	add	r22, r26
    13f2:	71 1d       	adc	r23, r1
    13f4:	81 1d       	adc	r24, r1
    13f6:	91 1d       	adc	r25, r1
    13f8:	a1 1d       	adc	r26, r1
    13fa:	20 d0       	rcall	.+64     	; 0x143c <__ultoa_invert+0x84>
    13fc:	09 f4       	brne	.+2      	; 0x1400 <__ultoa_invert+0x48>
    13fe:	68 94       	set
    1400:	3f 91       	pop	r19
    1402:	2a e0       	ldi	r18, 0x0A	; 10
    1404:	26 9f       	mul	r18, r22
    1406:	11 24       	eor	r1, r1
    1408:	30 19       	sub	r19, r0
    140a:	30 5d       	subi	r19, 0xD0	; 208
    140c:	31 93       	st	Z+, r19
    140e:	de f6       	brtc	.-74     	; 0x13c6 <__ultoa_invert+0xe>
    1410:	cf 01       	movw	r24, r30
    1412:	08 95       	ret
    1414:	46 2f       	mov	r20, r22
    1416:	47 70       	andi	r20, 0x07	; 7
    1418:	40 5d       	subi	r20, 0xD0	; 208
    141a:	41 93       	st	Z+, r20
    141c:	b3 e0       	ldi	r27, 0x03	; 3
    141e:	0f d0       	rcall	.+30     	; 0x143e <__ultoa_invert+0x86>
    1420:	c9 f7       	brne	.-14     	; 0x1414 <__ultoa_invert+0x5c>
    1422:	f6 cf       	rjmp	.-20     	; 0x1410 <__ultoa_invert+0x58>
    1424:	46 2f       	mov	r20, r22
    1426:	4f 70       	andi	r20, 0x0F	; 15
    1428:	40 5d       	subi	r20, 0xD0	; 208
    142a:	4a 33       	cpi	r20, 0x3A	; 58
    142c:	18 f0       	brcs	.+6      	; 0x1434 <__ultoa_invert+0x7c>
    142e:	49 5d       	subi	r20, 0xD9	; 217
    1430:	31 fd       	sbrc	r19, 1
    1432:	40 52       	subi	r20, 0x20	; 32
    1434:	41 93       	st	Z+, r20
    1436:	02 d0       	rcall	.+4      	; 0x143c <__ultoa_invert+0x84>
    1438:	a9 f7       	brne	.-22     	; 0x1424 <__ultoa_invert+0x6c>
    143a:	ea cf       	rjmp	.-44     	; 0x1410 <__ultoa_invert+0x58>
    143c:	b4 e0       	ldi	r27, 0x04	; 4
    143e:	a6 95       	lsr	r26
    1440:	97 95       	ror	r25
    1442:	87 95       	ror	r24
    1444:	77 95       	ror	r23
    1446:	67 95       	ror	r22
    1448:	ba 95       	dec	r27
    144a:	c9 f7       	brne	.-14     	; 0x143e <__ultoa_invert+0x86>
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	61 05       	cpc	r22, r1
    1450:	71 05       	cpc	r23, r1
    1452:	08 95       	ret
    1454:	9b 01       	movw	r18, r22
    1456:	ac 01       	movw	r20, r24
    1458:	0a 2e       	mov	r0, r26
    145a:	06 94       	lsr	r0
    145c:	57 95       	ror	r21
    145e:	47 95       	ror	r20
    1460:	37 95       	ror	r19
    1462:	27 95       	ror	r18
    1464:	ba 95       	dec	r27
    1466:	c9 f7       	brne	.-14     	; 0x145a <__ultoa_invert+0xa2>
    1468:	62 0f       	add	r22, r18
    146a:	73 1f       	adc	r23, r19
    146c:	84 1f       	adc	r24, r20
    146e:	95 1f       	adc	r25, r21
    1470:	a0 1d       	adc	r26, r0
    1472:	08 95       	ret

00001474 <_exit>:
    1474:	f8 94       	cli

00001476 <__stop_program>:
    1476:	ff cf       	rjmp	.-2      	; 0x1476 <__stop_program>
