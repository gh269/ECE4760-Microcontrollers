
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00001664  000016f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080010a  0080010a  00001702  2**0
                  ALLOC
  3 .stab         0000297c  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007e8  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004868  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00004897  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a95  00000000  00000000  0000493f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000815  00000000  00000000  000063d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b8e  00000000  00000000  00006be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000046c  00000000  00000000  00007778  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005a5  00000000  00000000  00007be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001496  00000000  00000000  00008189  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  0000961f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_12>
      34:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_13>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_16>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

0000008c <LCD_number>:
      8c:	43 61 70 61 63 69 74 61 6e 63 65 3d 00 00           Capacitance=..

0000009a <LCD_initialize>:
      9a:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000ab <LcdCustomChar>:
      ab:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      bb:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      cb:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      db:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000eb <__c.2006>:
      eb:	6e 61 6e 00                                         nan.

000000ef <__c.2004>:
      ef:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ff:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10f:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1af:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1bf:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1cf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1df:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e4       	ldi	r29, 0x40	; 64
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	e4 e6       	ldi	r30, 0x64	; 100
     202:	f6 e1       	ldi	r31, 0x16	; 22
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	aa 30       	cpi	r26, 0x0A	; 10
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	aa e0       	ldi	r26, 0x0A	; 10
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a1 33       	cpi	r26, 0x31	; 49
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <main>
     228:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <init_cap_measurement_analog_timer>:

//configures Analog Comparator and Timer1
//set it to full speed 
//clear TCNT1
void init_cap_measurement_analog_timer(){
	TCCR1B = 0;
     230:	e1 e8       	ldi	r30, 0x81	; 129
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	10 82       	st	Z, r1
	//full speed [ 16 MHz], capture on positive edge
	TCCR1B |= INPUT_CAPTURE_EDGE_SELECT + T0B_CS00;
     236:	80 81       	ld	r24, Z
     238:	81 64       	ori	r24, 0x41	; 65
     23a:	80 83       	st	Z, r24
	//turn on timer 1 interrupt-on-capture
	TIMSK1 = 0;
     23c:	ef e6       	ldi	r30, 0x6F	; 111
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	10 82       	st	Z, r1
	TIMSK1 |= INTERRUPT_ON_CAPTURE;
     242:	80 81       	ld	r24, Z
     244:	80 62       	ori	r24, 0x20	; 32
     246:	80 83       	st	Z, r24

	//set analog comp to connect to timer capture input
	//with positive input reference voltage
	ACSR = 0;
     248:	10 be       	out	0x30, r1	; 48
	ACSR |= ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     24a:	80 b7       	in	r24, 0x30	; 48
     24c:	84 60       	ori	r24, 0x04	; 4
     24e:	80 bf       	out	0x30, r24	; 48
	ACSR &= ~ANALOG_COMPARATOR_BANDGAP_SELECT;
     250:	80 b7       	in	r24, 0x30	; 48
     252:	8f 7b       	andi	r24, 0xBF	; 191
     254:	80 bf       	out	0x30, r24	; 48
	//set all ports to input
	DDRB = 0;
     256:	14 b8       	out	0x04, r1	; 4
	DDRB &= ~(COMPARATOR_INPUT + COMPARATOR_REFERENCE);
     258:	84 b1       	in	r24, 0x04	; 4
     25a:	83 7f       	andi	r24, 0xF3	; 243
     25c:	84 b9       	out	0x04, r24	; 4
     25e:	08 95       	ret

00000260 <init_cap_discharge_wait_timer>:

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     260:	22 e0       	ldi	r18, 0x02	; 2
     262:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     266:	8a e5       	ldi	r24, 0x5A	; 90
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	90 93 89 00 	sts	0x0089, r25
     26e:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     272:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     276:	e0 e8       	ldi	r30, 0x80	; 128
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	10 82       	st	Z, r1
	TCCR1A |= CLEAR_ON_MATCH;
     27c:	80 81       	ld	r24, Z
     27e:	82 60       	ori	r24, 0x02	; 2
     280:	80 83       	st	Z, r24
     282:	08 95       	ret

00000284 <init_cap_measurements>:
	Convert PortB2 to an input and start a timer. The capacitor will start to charge toward Vcc.
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
	DDRB = 0;
     284:	14 b8       	out	0x04, r1	; 4
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     286:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     288:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     28a:	2a 98       	cbi	0x05, 2	; 5
	//use Timer1.A to perform this delay and signal when we can continue measurements
	init_cap_discharge_wait_timer();
     28c:	0c 94 30 01 	jmp	0x260	; 0x260 <init_cap_discharge_wait_timer>

00000290 <__vector_16>:
}

//1 ms timebase register
//Blinks LED 1/second
//refreshes LCD 1/200 ms
ISR (TIMER0_COMPA_vect){
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
	if( led_time_count > 0)
     29e:	80 91 2f 01 	lds	r24, 0x012F
     2a2:	90 91 30 01 	lds	r25, 0x0130
     2a6:	89 2b       	or	r24, r25
     2a8:	49 f0       	breq	.+18     	; 0x2bc <__vector_16+0x2c>
		--led_time_count;
     2aa:	80 91 2f 01 	lds	r24, 0x012F
     2ae:	90 91 30 01 	lds	r25, 0x0130
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	90 93 30 01 	sts	0x0130, r25
     2b8:	80 93 2f 01 	sts	0x012F, r24
	if( lcd_time_count > 0)
     2bc:	80 91 10 01 	lds	r24, 0x0110
     2c0:	90 91 11 01 	lds	r25, 0x0111
     2c4:	89 2b       	or	r24, r25
     2c6:	49 f0       	breq	.+18     	; 0x2da <__vector_16+0x4a>
		--lcd_time_count;
     2c8:	80 91 10 01 	lds	r24, 0x0110
     2cc:	90 91 11 01 	lds	r25, 0x0111
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	90 93 11 01 	sts	0x0111, r25
     2d6:	80 93 10 01 	sts	0x0110, r24

}
     2da:	9f 91       	pop	r25
     2dc:	8f 91       	pop	r24
     2de:	0f 90       	pop	r0
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	0f 90       	pop	r0
     2e4:	1f 90       	pop	r1
     2e6:	18 95       	reti

000002e8 <__vector_13>:
//Once this triggers even once, we know that we have waited long enough for a cap discharge
ISR (TIMER1_COMPA_vect){
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	8f 93       	push	r24
     2f4:	9f 93       	push	r25
	cap_discharged = TRUE;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	90 93 0d 01 	sts	0x010D, r25
     2fe:	80 93 0c 01 	sts	0x010C, r24
}
     302:	9f 91       	pop	r25
     304:	8f 91       	pop	r24
     306:	0f 90       	pop	r0
     308:	0f be       	out	0x3f, r0	; 63
     30a:	0f 90       	pop	r0
     30c:	1f 90       	pop	r1
     30e:	18 95       	reti

00000310 <__vector_12>:
			  t
	C = ------------
		R2 * ln(0.5)

*/
ISR (TIMER1_CAPT_vect){
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	0b b6       	in	r0, 0x3b	; 59
     31c:	0f 92       	push	r0
     31e:	2f 93       	push	r18
     320:	3f 93       	push	r19
     322:	4f 93       	push	r20
     324:	5f 93       	push	r21
     326:	6f 93       	push	r22
     328:	7f 93       	push	r23
     32a:	8f 93       	push	r24
     32c:	9f 93       	push	r25
     32e:	af 93       	push	r26
     330:	bf 93       	push	r27
     332:	ef 93       	push	r30
     334:	ff 93       	push	r31
    // read timer1 input capture register
    charge_time = ICR1 * T1_CLK_PERIOD;
     336:	60 91 86 00 	lds	r22, 0x0086
     33a:	70 91 87 00 	lds	r23, 0x0087
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 c5 04 	call	0x98a	; 0x98a <__floatunsisf>
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	4a e7       	ldi	r20, 0x7A	; 122
     34c:	52 e4       	ldi	r21, 0x42	; 66
     34e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__mulsf3>
     352:	ab 01       	movw	r20, r22
     354:	bc 01       	movw	r22, r24
     356:	40 93 24 01 	sts	0x0124, r20
     35a:	50 93 25 01 	sts	0x0125, r21
     35e:	60 93 26 01 	sts	0x0126, r22
     362:	70 93 27 01 	sts	0x0127, r23
    // set the charged flag to true
    cap_charged = TRUE;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	90 93 0b 01 	sts	0x010B, r25
     36e:	80 93 0a 01 	sts	0x010A, r24
}
     372:	ff 91       	pop	r31
     374:	ef 91       	pop	r30
     376:	bf 91       	pop	r27
     378:	af 91       	pop	r26
     37a:	9f 91       	pop	r25
     37c:	8f 91       	pop	r24
     37e:	7f 91       	pop	r23
     380:	6f 91       	pop	r22
     382:	5f 91       	pop	r21
     384:	4f 91       	pop	r20
     386:	3f 91       	pop	r19
     388:	2f 91       	pop	r18
     38a:	0f 90       	pop	r0
     38c:	0b be       	out	0x3b, r0	; 59
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <toggle_led>:

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     398:	8b b1       	in	r24, 0x0b	; 11
     39a:	94 e0       	ldi	r25, 0x04	; 4
     39c:	89 27       	eor	r24, r25
     39e:	8b b9       	out	0x0b, r24	; 11
     3a0:	08 95       	ret

000003a2 <init_timer0A>:
//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 249;
     3a8:	89 ef       	ldi	r24, 0xF9	; 249
     3aa:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     3ac:	83 e0       	ldi	r24, 0x03	; 3
     3ae:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     3b0:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     3b2:	84 b5       	in	r24, 0x24	; 36
     3b4:	82 60       	ori	r24, 0x02	; 2
     3b6:	84 bd       	out	0x24, r24	; 36
     3b8:	08 95       	ret

000003ba <init_lcd>:
}

// LCD setup
void init_lcd(void){
	LCDinit();	//initialize the display
     3ba:	0e 94 11 03 	call	0x622	; 0x622 <LCDinit>
	LCDcursorOFF();
     3be:	0e 94 89 03 	call	0x712	; 0x712 <LCDcursorOFF>
	LCDclr();				//clear the display
     3c2:	0e 94 a1 02 	call	0x542	; 0x542 <LCDclr>
	LCDGotoXY(0,0);
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	0e 94 c6 02 	call	0x58c	; 0x58c <LCDGotoXY>
	CopyStringtoLCD(LCD_number, 0, 0);
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	8c e8       	ldi	r24, 0x8C	; 140
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <CopyStringtoLCD>

000003da <refresh_lcd>:
}


// writes contents of lcd_buffer to LCD every 200 mSec
// 
void refresh_lcd(void){
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
  // increment time counter and format string 
  //if (capacitance >= .1 && capacitance <= 100) {
  sprintf(lcd_buffer,"%-.5f",capacitance);	 
     3de:	80 91 28 01 	lds	r24, 0x0128
     3e2:	90 91 29 01 	lds	r25, 0x0129
     3e6:	a0 91 2a 01 	lds	r26, 0x012A
     3ea:	b0 91 2b 01 	lds	r27, 0x012B
     3ee:	bf 93       	push	r27
     3f0:	af 93       	push	r26
     3f2:	9f 93       	push	r25
     3f4:	8f 93       	push	r24
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	c2 e1       	ldi	r28, 0x12	; 18
     400:	d1 e0       	ldi	r29, 0x01	; 1
     402:	df 93       	push	r29
     404:	cf 93       	push	r28
     406:	0e 94 a3 0a 	call	0x1546	; 0x1546 <sprintf>
  //}
  //else {
  //	sprintf(lcd_buffer,"N/A");
  //}               
  LCDGotoXY(0, 1);
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	0e 94 c6 02 	call	0x58c	; 0x58c <LCDGotoXY>
  	// display the capacitance 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     412:	fe 01       	movw	r30, r28
     414:	01 90       	ld	r0, Z+
     416:	00 20       	and	r0, r0
     418:	e9 f7       	brne	.-6      	; 0x414 <refresh_lcd+0x3a>
     41a:	bf 01       	movw	r22, r30
     41c:	61 50       	subi	r22, 0x01	; 1
     41e:	71 09       	sbc	r23, r1
     420:	6c 1b       	sub	r22, r28
     422:	7d 0b       	sbc	r23, r29
     424:	ce 01       	movw	r24, r28
     426:	0e 94 a7 02 	call	0x54e	; 0x54e <LCDstring>
  else {
  	sprintf(lcd_buffer, "N/A");
  } 
  */         
  // now move a char left and right
  LCDGotoXY(anipos,1);	   //second line
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	80 91 23 01 	lds	r24, 0x0123
     430:	0e 94 c6 02 	call	0x58c	; 0x58c <LCDGotoXY>
  LCDsendChar(' '); 
     434:	80 e2       	ldi	r24, 0x20	; 32
     436:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCDsendChar>
      	
  if (anipos>=15) dir=-1;   // check boundaries
     43a:	90 91 23 01 	lds	r25, 0x0123
     43e:	2d b7       	in	r18, 0x3d	; 61
     440:	3e b7       	in	r19, 0x3e	; 62
     442:	28 5f       	subi	r18, 0xF8	; 248
     444:	3f 4f       	sbci	r19, 0xFF	; 255
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	3e bf       	out	0x3e, r19	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	2d bf       	out	0x3d, r18	; 61
     450:	9f 30       	cpi	r25, 0x0F	; 15
     452:	10 f0       	brcs	.+4      	; 0x458 <refresh_lcd+0x7e>
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	03 c0       	rjmp	.+6      	; 0x45e <refresh_lcd+0x84>
  if (anipos<=8 ) dir=1;
     458:	99 30       	cpi	r25, 0x09	; 9
     45a:	18 f4       	brcc	.+6      	; 0x462 <refresh_lcd+0x88>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 2c 01 	sts	0x012C, r24
  anipos=anipos+dir;
     462:	80 91 2c 01 	lds	r24, 0x012C
     466:	89 0f       	add	r24, r25
     468:	80 93 23 01 	sts	0x0123, r24
  LCDGotoXY(anipos,1);	   //second line
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	0e 94 c6 02 	call	0x58c	; 0x58c <LCDGotoXY>
  LCDsendChar('o');
     472:	8f e6       	ldi	r24, 0x6F	; 111
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
      	
  if (anipos>=15) dir=-1;   // check boundaries
  if (anipos<=8 ) dir=1;
  anipos=anipos+dir;
  LCDGotoXY(anipos,1);	   //second line
  LCDsendChar('o');
     478:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <LCDsendChar>

0000047c <initialize>:
}

void initialize(void){
	anipos = 8;
     47c:	88 e0       	ldi	r24, 0x08	; 8
     47e:	80 93 23 01 	sts	0x0123, r24
	led_time_count = 0;
     482:	10 92 30 01 	sts	0x0130, r1
     486:	10 92 2f 01 	sts	0x012F, r1
	init_timer0A();
     48a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <init_timer0A>

	DDRB = 0;
     48e:	14 b8       	out	0x04, r1	; 4
	DDRD = 0;
     490:	1a b8       	out	0x0a, r1	; 10

	//Enable LED Port
	DDRD = ONBOARD_LED; //turn the LED to an output
     492:	84 e0       	ldi	r24, 0x04	; 4
     494:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; //turn off LED 
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	8b b9       	out	0x0b, r24	; 11

	init_lcd();
     49a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <init_lcd>
	LCDclr();
     49e:	0e 94 a1 02 	call	0x542	; 0x542 <LCDclr>


	sei();
     4a2:	78 94       	sei
     4a4:	08 95       	ret

000004a6 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     4a6:	98 2f       	mov	r25, r24
     4a8:	90 7f       	andi	r25, 0xF0	; 240
     4aa:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_RS;
     4ac:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     4ae:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b0:	ef e3       	ldi	r30, 0x3F	; 63
     4b2:	ff e1       	ldi	r31, 0x1F	; 31
     4b4:	31 97       	sbiw	r30, 0x01	; 1
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCDsendChar+0xe>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCDsendChar+0x14>
     4ba:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     4bc:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     4be:	40 98       	cbi	0x08, 0	; 8
     4c0:	ef e3       	ldi	r30, 0x3F	; 63
     4c2:	ff e1       	ldi	r31, 0x1F	; 31
     4c4:	31 97       	sbiw	r30, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <LCDsendChar+0x1e>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <LCDsendChar+0x24>
     4ca:	00 00       	nop
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     4cc:	f0 e1       	ldi	r31, 0x10	; 16
     4ce:	8f 9f       	mul	r24, r31
     4d0:	c0 01       	movw	r24, r0
     4d2:	11 24       	eor	r1, r1
     4d4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     4d6:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     4d8:	42 9a       	sbi	0x08, 2	; 8
     4da:	8f e3       	ldi	r24, 0x3F	; 63
     4dc:	9f e1       	ldi	r25, 0x1F	; 31
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <LCDsendChar+0x38>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <LCDsendChar+0x3e>
     4e4:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     4e6:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     4e8:	40 98       	cbi	0x08, 0	; 8
     4ea:	ef e3       	ldi	r30, 0x3F	; 63
     4ec:	ff e1       	ldi	r31, 0x1F	; 31
     4ee:	31 97       	sbiw	r30, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <LCDsendChar+0x48>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <LCDsendChar+0x4e>
     4f4:	00 00       	nop
     4f6:	08 95       	ret

000004f8 <LCDsendCommand>:
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     4f8:	98 2f       	mov	r25, r24
     4fa:	90 7f       	andi	r25, 0xF0	; 240
     4fc:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_E;		
     4fe:	42 9a       	sbi	0x08, 2	; 8
     500:	ef e3       	ldi	r30, 0x3F	; 63
     502:	ff e1       	ldi	r31, 0x1F	; 31
     504:	31 97       	sbiw	r30, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <LCDsendCommand+0xc>
     508:	00 c0       	rjmp	.+0      	; 0x50a <LCDsendCommand+0x12>
     50a:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     50c:	42 98       	cbi	0x08, 2	; 8
     50e:	ef e3       	ldi	r30, 0x3F	; 63
     510:	ff e1       	ldi	r31, 0x1F	; 31
     512:	31 97       	sbiw	r30, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <LCDsendCommand+0x1a>
     516:	00 c0       	rjmp	.+0      	; 0x518 <LCDsendCommand+0x20>
     518:	00 00       	nop
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     51a:	f0 e1       	ldi	r31, 0x10	; 16
     51c:	8f 9f       	mul	r24, r31
     51e:	c0 01       	movw	r24, r0
     520:	11 24       	eor	r1, r1
     522:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     524:	42 9a       	sbi	0x08, 2	; 8
     526:	8f e3       	ldi	r24, 0x3F	; 63
     528:	9f e1       	ldi	r25, 0x1F	; 31
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <LCDsendCommand+0x32>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <LCDsendCommand+0x38>
     530:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     532:	42 98       	cbi	0x08, 2	; 8
     534:	ef e3       	ldi	r30, 0x3F	; 63
     536:	ff e1       	ldi	r31, 0x1F	; 31
     538:	31 97       	sbiw	r30, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <LCDsendCommand+0x40>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <LCDsendCommand+0x46>
     53e:	00 00       	nop
     540:	08 95       	ret

00000542 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <LCDsendCommand>

00000548 <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <LCDsendCommand>

0000054e <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	1f 92       	push	r1
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     55e:	00 97       	sbiw	r24, 0x00	; 0
     560:	71 f0       	breq	.+28     	; 0x57e <LCDstring+0x30>
     562:	18 2f       	mov	r17, r24
     564:	7c 01       	movw	r14, r24
     566:	07 c0       	rjmp	.+14     	; 0x576 <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     568:	f7 01       	movw	r30, r14
     56a:	81 91       	ld	r24, Z+
     56c:	7f 01       	movw	r14, r30
     56e:	69 83       	std	Y+1, r22	; 0x01
     570:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCDsendChar>
     574:	69 81       	ldd	r22, Y+1	; 0x01

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     576:	8e 2d       	mov	r24, r14
     578:	81 1b       	sub	r24, r17
     57a:	86 17       	cp	r24, r22
     57c:	a8 f3       	brcs	.-22     	; 0x568 <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     57e:	0f 90       	pop	r0
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	ff 90       	pop	r15
     588:	ef 90       	pop	r14
     58a:	08 95       	ret

0000058c <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     58c:	62 30       	cpi	r22, 0x02	; 2
     58e:	31 f0       	breq	.+12     	; 0x59c <LCDGotoXY+0x10>
     590:	63 30       	cpi	r22, 0x03	; 3
     592:	31 f0       	breq	.+12     	; 0x5a0 <LCDGotoXY+0x14>
     594:	61 30       	cpi	r22, 0x01	; 1
     596:	29 f4       	brne	.+10     	; 0x5a2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     598:	80 5c       	subi	r24, 0xC0	; 192
     59a:	03 c0       	rjmp	.+6      	; 0x5a2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     59c:	8c 5e       	subi	r24, 0xEC	; 236
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     5a0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     5a2:	80 68       	ori	r24, 0x80	; 128
     5a4:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <LCDsendCommand>

000005a8 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	ec 01       	movw	r28, r24
     5b0:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     5b2:	64 2f       	mov	r22, r20
     5b4:	0e 94 c6 02 	call	0x58c	; 0x58c <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5b8:	10 e0       	ldi	r17, 0x00	; 0
     5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     5bc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5c0:	1f 5f       	subi	r17, 0xFF	; 255
     5c2:	fe 01       	movw	r30, r28
     5c4:	e1 0f       	add	r30, r17
     5c6:	f1 1d       	adc	r31, r1
     5c8:	84 91       	lpm	r24, Z
     5ca:	81 11       	cpse	r24, r1
     5cc:	f7 cf       	rjmp	.-18     	; 0x5bc <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	08 95       	ret

000005d6 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     5e4:	88 e0       	ldi	r24, 0x08	; 8
     5e6:	68 9f       	mul	r22, r24
     5e8:	b0 01       	movw	r22, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	80 e4       	ldi	r24, 0x40	; 64
     5ee:	e8 2e       	mov	r14, r24
     5f0:	e6 2a       	or	r14, r22
	for (i=0; i<8; i++){
     5f2:	c0 e0       	ldi	r28, 0x00	; 0
     5f4:	d0 e0       	ldi	r29, 0x00	; 0
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     5f6:	f8 01       	movw	r30, r16
     5f8:	ec 0f       	add	r30, r28
     5fa:	fd 1f       	adc	r31, r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     5fc:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
     5fe:	8c 2f       	mov	r24, r28
     600:	8e 0d       	add	r24, r14
     602:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCDsendCommand>
		LCDsendChar(pcc);
     606:	8f 2d       	mov	r24, r15
     608:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     60c:	21 96       	adiw	r28, 0x01	; 1
     60e:	c8 30       	cpi	r28, 0x08	; 8
     610:	d1 05       	cpc	r29, r1
     612:	89 f7       	brne	.-30     	; 0x5f6 <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	08 95       	ret

00000622 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	8f e5       	ldi	r24, 0x5F	; 95
     62a:	9a ee       	ldi	r25, 0xEA	; 234
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <LCDinit+0xa>
     630:	00 c0       	rjmp	.+0      	; 0x632 <LCDinit+0x10>
     632:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     634:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     636:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     638:	87 b1       	in	r24, 0x07	; 7
     63a:	80 6f       	ori	r24, 0xF0	; 240
     63c:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     63e:	87 b1       	in	r24, 0x07	; 7
     640:	87 60       	ori	r24, 0x07	; 7
     642:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     644:	80 e3       	ldi	r24, 0x30	; 48
     646:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     648:	42 9a       	sbi	0x08, 2	; 8
     64a:	ef e3       	ldi	r30, 0x3F	; 63
     64c:	ff e1       	ldi	r31, 0x1F	; 31
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <LCDinit+0x2c>
     652:	00 c0       	rjmp	.+0      	; 0x654 <LCDinit+0x32>
     654:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     656:	42 98       	cbi	0x08, 2	; 8
     658:	ef e3       	ldi	r30, 0x3F	; 63
     65a:	ff e1       	ldi	r31, 0x1F	; 31
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <LCDinit+0x3a>
     660:	00 c0       	rjmp	.+0      	; 0x662 <LCDinit+0x40>
     662:	00 00       	nop
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     664:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     666:	42 9a       	sbi	0x08, 2	; 8
     668:	8f e3       	ldi	r24, 0x3F	; 63
     66a:	9f e1       	ldi	r25, 0x1F	; 31
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <LCDinit+0x4a>
     670:	00 c0       	rjmp	.+0      	; 0x672 <LCDinit+0x50>
     672:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     674:	42 98       	cbi	0x08, 2	; 8
     676:	ef e3       	ldi	r30, 0x3F	; 63
     678:	ff e1       	ldi	r31, 0x1F	; 31
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <LCDinit+0x58>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <LCDinit+0x5e>
     680:	00 00       	nop
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     682:	80 e2       	ldi	r24, 0x20	; 32
     684:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     686:	42 9a       	sbi	0x08, 2	; 8
     688:	8f e3       	ldi	r24, 0x3F	; 63
     68a:	9f e1       	ldi	r25, 0x1F	; 31
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <LCDinit+0x6a>
     690:	00 c0       	rjmp	.+0      	; 0x692 <LCDinit+0x70>
     692:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     694:	42 98       	cbi	0x08, 2	; 8
     696:	ef e3       	ldi	r30, 0x3F	; 63
     698:	ff e1       	ldi	r31, 0x1F	; 31
     69a:	31 97       	sbiw	r30, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <LCDinit+0x78>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <LCDinit+0x7e>
     6a0:	00 00       	nop
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     6a2:	88 e2       	ldi	r24, 0x28	; 40
     6a4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     6a8:	8c e0       	ldi	r24, 0x0C	; 12
     6aa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCDsendCommand>
     6ae:	cb ea       	ldi	r28, 0xAB	; 171
     6b0:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     6b2:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     6b4:	16 2f       	mov	r17, r22
     6b6:	1f 5f       	subi	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCDdefinechar>
     6be:	28 96       	adiw	r28, 0x08	; 8
     6c0:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     6c2:	18 30       	cpi	r17, 0x08	; 8
     6c4:	b9 f7       	brne	.-18     	; 0x6b4 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	08 95       	ret

000006ce <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     6d4:	c0 e0       	ldi	r28, 0x00	; 0
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
     6d8:	8e e1       	ldi	r24, 0x1E	; 30
     6da:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     6de:	cf 5f       	subi	r28, 0xFF	; 255
     6e0:	cd 13       	cpse	r28, r29
     6e2:	fa cf       	rjmp	.-12     	; 0x6d8 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     6f0:	c0 e0       	ldi	r28, 0x00	; 0
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
     6f4:	88 e1       	ldi	r24, 0x18	; 24
     6f6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     6fa:	cf 5f       	subi	r28, 0xFF	; 255
     6fc:	cd 13       	cpse	r28, r29
     6fe:	fa cf       	rjmp	.-12     	; 0x6f4 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     706:	8e e0       	ldi	r24, 0x0E	; 14
     708:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <LCDsendCommand>

0000070c <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     70c:	8f e0       	ldi	r24, 0x0F	; 15
     70e:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <LCDsendCommand>

00000712 <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     712:	8c e0       	ldi	r24, 0x0C	; 12
     714:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <LCDsendCommand>

00000718 <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     718:	88 e0       	ldi	r24, 0x08	; 8
     71a:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <LCDsendCommand>

0000071e <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     71e:	8c e0       	ldi	r24, 0x0C	; 12
     720:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <LCDsendCommand>

00000724 <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     72a:	c0 e0       	ldi	r28, 0x00	; 0
     72c:	04 c0       	rjmp	.+8      	; 0x736 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
     72e:	80 e1       	ldi	r24, 0x10	; 16
     730:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     734:	cf 5f       	subi	r28, 0xFF	; 255
     736:	cd 13       	cpse	r28, r29
     738:	fa cf       	rjmp	.-12     	; 0x72e <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     746:	c0 e0       	ldi	r28, 0x00	; 0
     748:	04 c0       	rjmp	.+8      	; 0x752 <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
     74a:	84 e1       	ldi	r24, 0x14	; 20
     74c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     750:	cf 5f       	subi	r28, 0xFF	; 255
     752:	cd 13       	cpse	r28, r29
     754:	fa cf       	rjmp	.-12     	; 0x74a <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     75c:	cf 92       	push	r12
     75e:	df 92       	push	r13
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	1f 92       	push	r1
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     772:	56 e0       	ldi	r21, 0x06	; 6
     774:	45 9f       	mul	r20, r21
     776:	90 01       	movw	r18, r0
     778:	11 24       	eor	r1, r1
     77a:	e8 2f       	mov	r30, r24
     77c:	e2 9f       	mul	r30, r18
     77e:	c0 01       	movw	r24, r0
     780:	e3 9f       	mul	r30, r19
     782:	90 0d       	add	r25, r0
     784:	11 24       	eor	r1, r1
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	0e 94 75 09 	call	0x12ea	; 0x12ea <__divmodhi4>
     78c:	8b 01       	movw	r16, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     78e:	cb 01       	movw	r24, r22
     790:	66 e0       	ldi	r22, 0x06	; 6
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__udivmodhi4>
     798:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     79a:	c1 2c       	mov	r12, r1
     79c:	d1 2c       	mov	r13, r1
     79e:	f1 2c       	mov	r15, r1
     7a0:	16 c0       	rjmp	.+44     	; 0x7ce <LCDprogressBar+0x72>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     7a2:	96 01       	movw	r18, r12
     7a4:	2b 5f       	subi	r18, 0xFB	; 251
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	02 17       	cp	r16, r18
     7aa:	13 07       	cpc	r17, r19
     7ac:	28 f4       	brcc	.+10     	; 0x7b8 <LCDprogressBar+0x5c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     7ae:	0c 15       	cp	r16, r12
     7b0:	1d 05       	cpc	r17, r13
     7b2:	20 f0       	brcs	.+8      	; 0x7bc <LCDprogressBar+0x60>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     7b4:	8e 2d       	mov	r24, r14
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <LCDprogressBar+0x62>
			}
		}
		else
		{
			// this is a full block
			c = 5;
     7b8:	85 e0       	ldi	r24, 0x05	; 5
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <LCDprogressBar+0x62>
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
     7bc:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     7be:	49 83       	std	Y+1, r20	; 0x01
     7c0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     7c4:	f3 94       	inc	r15
     7c6:	f6 e0       	ldi	r31, 0x06	; 6
     7c8:	cf 0e       	add	r12, r31
     7ca:	d1 1c       	adc	r13, r1
     7cc:	49 81       	ldd	r20, Y+1	; 0x01
     7ce:	f4 12       	cpse	r15, r20
     7d0:	e8 cf       	rjmp	.-48     	; 0x7a2 <LCDprogressBar+0x46>
		
		// write character to display
		LCDsendChar(c);
	}

}
     7d2:	0f 90       	pop	r0
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	08 95       	ret

000007e6 <main>:
}

int main(void){
	initialize();
     7e6:	0e 94 3e 02 	call	0x47c	; 0x47c <initialize>
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	8c e8       	ldi	r24, 0x8C	; 140
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <CopyStringtoLCD>
	
	while(1){
		if( led_time_count == 0){
			led_time_count = LED_BLINK_PERIOD / 2;
     7f6:	c4 ef       	ldi	r28, 0xF4	; 244
     7f8:	d1 e0       	ldi	r29, 0x01	; 1
			toggle_led();
		}
		if( lcd_time_count == 0){
			lcd_time_count = LCD_REFRESH_RATE;
     7fa:	08 ec       	ldi	r16, 0xC8	; 200
     7fc:	10 e0       	ldi	r17, 0x00	; 0
		if(cap_discharged && !begin_cap_measurement){
			//begin cap measurements
			//switch Timer1A mode

			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     7fe:	ee 24       	eor	r14, r14
     800:	e3 94       	inc	r14
     802:	f1 2c       	mov	r15, r1
int main(void){
	initialize();
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
	
	while(1){
		if( led_time_count == 0){
     804:	80 91 2f 01 	lds	r24, 0x012F
     808:	90 91 30 01 	lds	r25, 0x0130
     80c:	89 2b       	or	r24, r25
     80e:	31 f4       	brne	.+12     	; 0x81c <main+0x36>
			led_time_count = LED_BLINK_PERIOD / 2;
     810:	d0 93 30 01 	sts	0x0130, r29
     814:	c0 93 2f 01 	sts	0x012F, r28
			toggle_led();
     818:	0e 94 cc 01 	call	0x398	; 0x398 <toggle_led>
		}
		if( lcd_time_count == 0){
     81c:	80 91 10 01 	lds	r24, 0x0110
     820:	90 91 11 01 	lds	r25, 0x0111
     824:	89 2b       	or	r24, r25
     826:	31 f4       	brne	.+12     	; 0x834 <main+0x4e>
			lcd_time_count = LCD_REFRESH_RATE;
     828:	10 93 11 01 	sts	0x0111, r17
     82c:	00 93 10 01 	sts	0x0110, r16
			refresh_lcd();
     830:	0e 94 ed 01 	call	0x3da	; 0x3da <refresh_lcd>
		}
		if(cap_discharged && !begin_cap_measurement){
     834:	80 91 0c 01 	lds	r24, 0x010C
     838:	90 91 0d 01 	lds	r25, 0x010D
     83c:	89 2b       	or	r24, r25
     83e:	61 f0       	breq	.+24     	; 0x858 <main+0x72>
     840:	80 91 0e 01 	lds	r24, 0x010E
     844:	90 91 0f 01 	lds	r25, 0x010F
     848:	89 2b       	or	r24, r25
     84a:	31 f4       	brne	.+12     	; 0x858 <main+0x72>
			//begin cap measurements
			//switch Timer1A mode

			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     84c:	f0 92 0f 01 	sts	0x010F, r15
     850:	e0 92 0e 01 	sts	0x010E, r14
			//initalize timer for cap measurement
			init_cap_measurement_analog_timer();
     854:	0e 94 18 01 	call	0x230	; 0x230 <init_cap_measurement_analog_timer>
		}

		if(begin_cap_measurement && cap_charged){
     858:	80 91 0e 01 	lds	r24, 0x010E
     85c:	90 91 0f 01 	lds	r25, 0x010F
     860:	89 2b       	or	r24, r25
     862:	81 f2       	breq	.-96     	; 0x804 <main+0x1e>
     864:	80 91 0a 01 	lds	r24, 0x010A
     868:	90 91 0b 01 	lds	r25, 0x010B
     86c:	89 2b       	or	r24, r25
     86e:	51 f2       	breq	.-108    	; 0x804 <main+0x1e>
			// Revert the flags
			cap_discharged = FALSE;
     870:	10 92 0d 01 	sts	0x010D, r1
     874:	10 92 0c 01 	sts	0x010C, r1
			begin_cap_measurement = FALSE;
     878:	10 92 0f 01 	sts	0x010F, r1
     87c:	10 92 0e 01 	sts	0x010E, r1
			cap_charged = FALSE;
     880:	10 92 0b 01 	sts	0x010B, r1
     884:	10 92 0a 01 	sts	0x010A, r1
			// Calculate the capacitance with the time elapsed. 
			// V(t) = Vo(1 - exp(-t/(R2*C))) becomes
			// C = -t / (R2 * ln(.5)) to find out when V(t) = .5 * Vo (R3 = R4)
			// (Due to ln(.5) being negative, the negative on the t is canceled out)
			capacitance = charge_time / (RESISTOR * ln_half);
     888:	60 91 24 01 	lds	r22, 0x0124
     88c:	70 91 25 01 	lds	r23, 0x0125
     890:	80 91 26 01 	lds	r24, 0x0126
     894:	90 91 27 01 	lds	r25, 0x0127
     898:	26 ec       	ldi	r18, 0xC6	; 198
     89a:	3b e9       	ldi	r19, 0x9B	; 155
     89c:	48 ed       	ldi	r20, 0xD8	; 216
     89e:	55 e4       	ldi	r21, 0x45	; 69
     8a0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__divsf3>
     8a4:	ab 01       	movw	r20, r22
     8a6:	bc 01       	movw	r22, r24
     8a8:	40 93 28 01 	sts	0x0128, r20
     8ac:	50 93 29 01 	sts	0x0129, r21
     8b0:	60 93 2a 01 	sts	0x012A, r22
     8b4:	70 93 2b 01 	sts	0x012B, r23
     8b8:	a5 cf       	rjmp	.-182    	; 0x804 <main+0x1e>

000008ba <__divsf3>:
     8ba:	0c d0       	rcall	.+24     	; 0x8d4 <__divsf3x>
     8bc:	ba c0       	rjmp	.+372    	; 0xa32 <__fp_round>
     8be:	b2 d0       	rcall	.+356    	; 0xa24 <__fp_pscB>
     8c0:	40 f0       	brcs	.+16     	; 0x8d2 <__divsf3+0x18>
     8c2:	a9 d0       	rcall	.+338    	; 0xa16 <__fp_pscA>
     8c4:	30 f0       	brcs	.+12     	; 0x8d2 <__divsf3+0x18>
     8c6:	21 f4       	brne	.+8      	; 0x8d0 <__divsf3+0x16>
     8c8:	5f 3f       	cpi	r21, 0xFF	; 255
     8ca:	19 f0       	breq	.+6      	; 0x8d2 <__divsf3+0x18>
     8cc:	9b c0       	rjmp	.+310    	; 0xa04 <__fp_inf>
     8ce:	51 11       	cpse	r21, r1
     8d0:	e4 c0       	rjmp	.+456    	; 0xa9a <__fp_szero>
     8d2:	9e c0       	rjmp	.+316    	; 0xa10 <__fp_nan>

000008d4 <__divsf3x>:
     8d4:	bf d0       	rcall	.+382    	; 0xa54 <__fp_split3>
     8d6:	98 f3       	brcs	.-26     	; 0x8be <__divsf3+0x4>

000008d8 <__divsf3_pse>:
     8d8:	99 23       	and	r25, r25
     8da:	c9 f3       	breq	.-14     	; 0x8ce <__divsf3+0x14>
     8dc:	55 23       	and	r21, r21
     8de:	b1 f3       	breq	.-20     	; 0x8cc <__divsf3+0x12>
     8e0:	95 1b       	sub	r25, r21
     8e2:	55 0b       	sbc	r21, r21
     8e4:	bb 27       	eor	r27, r27
     8e6:	aa 27       	eor	r26, r26
     8e8:	62 17       	cp	r22, r18
     8ea:	73 07       	cpc	r23, r19
     8ec:	84 07       	cpc	r24, r20
     8ee:	38 f0       	brcs	.+14     	; 0x8fe <__divsf3_pse+0x26>
     8f0:	9f 5f       	subi	r25, 0xFF	; 255
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	22 0f       	add	r18, r18
     8f6:	33 1f       	adc	r19, r19
     8f8:	44 1f       	adc	r20, r20
     8fa:	aa 1f       	adc	r26, r26
     8fc:	a9 f3       	breq	.-22     	; 0x8e8 <__divsf3_pse+0x10>
     8fe:	33 d0       	rcall	.+102    	; 0x966 <__divsf3_pse+0x8e>
     900:	0e 2e       	mov	r0, r30
     902:	3a f0       	brmi	.+14     	; 0x912 <__divsf3_pse+0x3a>
     904:	e0 e8       	ldi	r30, 0x80	; 128
     906:	30 d0       	rcall	.+96     	; 0x968 <__divsf3_pse+0x90>
     908:	91 50       	subi	r25, 0x01	; 1
     90a:	50 40       	sbci	r21, 0x00	; 0
     90c:	e6 95       	lsr	r30
     90e:	00 1c       	adc	r0, r0
     910:	ca f7       	brpl	.-14     	; 0x904 <__divsf3_pse+0x2c>
     912:	29 d0       	rcall	.+82     	; 0x966 <__divsf3_pse+0x8e>
     914:	fe 2f       	mov	r31, r30
     916:	27 d0       	rcall	.+78     	; 0x966 <__divsf3_pse+0x8e>
     918:	66 0f       	add	r22, r22
     91a:	77 1f       	adc	r23, r23
     91c:	88 1f       	adc	r24, r24
     91e:	bb 1f       	adc	r27, r27
     920:	26 17       	cp	r18, r22
     922:	37 07       	cpc	r19, r23
     924:	48 07       	cpc	r20, r24
     926:	ab 07       	cpc	r26, r27
     928:	b0 e8       	ldi	r27, 0x80	; 128
     92a:	09 f0       	breq	.+2      	; 0x92e <__divsf3_pse+0x56>
     92c:	bb 0b       	sbc	r27, r27
     92e:	80 2d       	mov	r24, r0
     930:	bf 01       	movw	r22, r30
     932:	ff 27       	eor	r31, r31
     934:	93 58       	subi	r25, 0x83	; 131
     936:	5f 4f       	sbci	r21, 0xFF	; 255
     938:	2a f0       	brmi	.+10     	; 0x944 <__divsf3_pse+0x6c>
     93a:	9e 3f       	cpi	r25, 0xFE	; 254
     93c:	51 05       	cpc	r21, r1
     93e:	68 f0       	brcs	.+26     	; 0x95a <__divsf3_pse+0x82>
     940:	61 c0       	rjmp	.+194    	; 0xa04 <__fp_inf>
     942:	ab c0       	rjmp	.+342    	; 0xa9a <__fp_szero>
     944:	5f 3f       	cpi	r21, 0xFF	; 255
     946:	ec f3       	brlt	.-6      	; 0x942 <__divsf3_pse+0x6a>
     948:	98 3e       	cpi	r25, 0xE8	; 232
     94a:	dc f3       	brlt	.-10     	; 0x942 <__divsf3_pse+0x6a>
     94c:	86 95       	lsr	r24
     94e:	77 95       	ror	r23
     950:	67 95       	ror	r22
     952:	b7 95       	ror	r27
     954:	f7 95       	ror	r31
     956:	9f 5f       	subi	r25, 0xFF	; 255
     958:	c9 f7       	brne	.-14     	; 0x94c <__divsf3_pse+0x74>
     95a:	88 0f       	add	r24, r24
     95c:	91 1d       	adc	r25, r1
     95e:	96 95       	lsr	r25
     960:	87 95       	ror	r24
     962:	97 f9       	bld	r25, 7
     964:	08 95       	ret
     966:	e1 e0       	ldi	r30, 0x01	; 1
     968:	66 0f       	add	r22, r22
     96a:	77 1f       	adc	r23, r23
     96c:	88 1f       	adc	r24, r24
     96e:	bb 1f       	adc	r27, r27
     970:	62 17       	cp	r22, r18
     972:	73 07       	cpc	r23, r19
     974:	84 07       	cpc	r24, r20
     976:	ba 07       	cpc	r27, r26
     978:	20 f0       	brcs	.+8      	; 0x982 <__divsf3_pse+0xaa>
     97a:	62 1b       	sub	r22, r18
     97c:	73 0b       	sbc	r23, r19
     97e:	84 0b       	sbc	r24, r20
     980:	ba 0b       	sbc	r27, r26
     982:	ee 1f       	adc	r30, r30
     984:	88 f7       	brcc	.-30     	; 0x968 <__divsf3_pse+0x90>
     986:	e0 95       	com	r30
     988:	08 95       	ret

0000098a <__floatunsisf>:
     98a:	e8 94       	clt
     98c:	09 c0       	rjmp	.+18     	; 0x9a0 <__floatsisf+0x12>

0000098e <__floatsisf>:
     98e:	97 fb       	bst	r25, 7
     990:	3e f4       	brtc	.+14     	; 0x9a0 <__floatsisf+0x12>
     992:	90 95       	com	r25
     994:	80 95       	com	r24
     996:	70 95       	com	r23
     998:	61 95       	neg	r22
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	8f 4f       	sbci	r24, 0xFF	; 255
     99e:	9f 4f       	sbci	r25, 0xFF	; 255
     9a0:	99 23       	and	r25, r25
     9a2:	a9 f0       	breq	.+42     	; 0x9ce <__floatsisf+0x40>
     9a4:	f9 2f       	mov	r31, r25
     9a6:	96 e9       	ldi	r25, 0x96	; 150
     9a8:	bb 27       	eor	r27, r27
     9aa:	93 95       	inc	r25
     9ac:	f6 95       	lsr	r31
     9ae:	87 95       	ror	r24
     9b0:	77 95       	ror	r23
     9b2:	67 95       	ror	r22
     9b4:	b7 95       	ror	r27
     9b6:	f1 11       	cpse	r31, r1
     9b8:	f8 cf       	rjmp	.-16     	; 0x9aa <__floatsisf+0x1c>
     9ba:	fa f4       	brpl	.+62     	; 0x9fa <__floatsisf+0x6c>
     9bc:	bb 0f       	add	r27, r27
     9be:	11 f4       	brne	.+4      	; 0x9c4 <__floatsisf+0x36>
     9c0:	60 ff       	sbrs	r22, 0
     9c2:	1b c0       	rjmp	.+54     	; 0x9fa <__floatsisf+0x6c>
     9c4:	6f 5f       	subi	r22, 0xFF	; 255
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
     9c8:	8f 4f       	sbci	r24, 0xFF	; 255
     9ca:	9f 4f       	sbci	r25, 0xFF	; 255
     9cc:	16 c0       	rjmp	.+44     	; 0x9fa <__floatsisf+0x6c>
     9ce:	88 23       	and	r24, r24
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <__floatsisf+0x48>
     9d2:	96 e9       	ldi	r25, 0x96	; 150
     9d4:	11 c0       	rjmp	.+34     	; 0x9f8 <__floatsisf+0x6a>
     9d6:	77 23       	and	r23, r23
     9d8:	21 f0       	breq	.+8      	; 0x9e2 <__floatsisf+0x54>
     9da:	9e e8       	ldi	r25, 0x8E	; 142
     9dc:	87 2f       	mov	r24, r23
     9de:	76 2f       	mov	r23, r22
     9e0:	05 c0       	rjmp	.+10     	; 0x9ec <__floatsisf+0x5e>
     9e2:	66 23       	and	r22, r22
     9e4:	71 f0       	breq	.+28     	; 0xa02 <__floatsisf+0x74>
     9e6:	96 e8       	ldi	r25, 0x86	; 134
     9e8:	86 2f       	mov	r24, r22
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	2a f0       	brmi	.+10     	; 0x9fa <__floatsisf+0x6c>
     9f0:	9a 95       	dec	r25
     9f2:	66 0f       	add	r22, r22
     9f4:	77 1f       	adc	r23, r23
     9f6:	88 1f       	adc	r24, r24
     9f8:	da f7       	brpl	.-10     	; 0x9f0 <__floatsisf+0x62>
     9fa:	88 0f       	add	r24, r24
     9fc:	96 95       	lsr	r25
     9fe:	87 95       	ror	r24
     a00:	97 f9       	bld	r25, 7
     a02:	08 95       	ret

00000a04 <__fp_inf>:
     a04:	97 f9       	bld	r25, 7
     a06:	9f 67       	ori	r25, 0x7F	; 127
     a08:	80 e8       	ldi	r24, 0x80	; 128
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	08 95       	ret

00000a10 <__fp_nan>:
     a10:	9f ef       	ldi	r25, 0xFF	; 255
     a12:	80 ec       	ldi	r24, 0xC0	; 192
     a14:	08 95       	ret

00000a16 <__fp_pscA>:
     a16:	00 24       	eor	r0, r0
     a18:	0a 94       	dec	r0
     a1a:	16 16       	cp	r1, r22
     a1c:	17 06       	cpc	r1, r23
     a1e:	18 06       	cpc	r1, r24
     a20:	09 06       	cpc	r0, r25
     a22:	08 95       	ret

00000a24 <__fp_pscB>:
     a24:	00 24       	eor	r0, r0
     a26:	0a 94       	dec	r0
     a28:	12 16       	cp	r1, r18
     a2a:	13 06       	cpc	r1, r19
     a2c:	14 06       	cpc	r1, r20
     a2e:	05 06       	cpc	r0, r21
     a30:	08 95       	ret

00000a32 <__fp_round>:
     a32:	09 2e       	mov	r0, r25
     a34:	03 94       	inc	r0
     a36:	00 0c       	add	r0, r0
     a38:	11 f4       	brne	.+4      	; 0xa3e <__fp_round+0xc>
     a3a:	88 23       	and	r24, r24
     a3c:	52 f0       	brmi	.+20     	; 0xa52 <__fp_round+0x20>
     a3e:	bb 0f       	add	r27, r27
     a40:	40 f4       	brcc	.+16     	; 0xa52 <__fp_round+0x20>
     a42:	bf 2b       	or	r27, r31
     a44:	11 f4       	brne	.+4      	; 0xa4a <__fp_round+0x18>
     a46:	60 ff       	sbrs	r22, 0
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <__fp_round+0x20>
     a4a:	6f 5f       	subi	r22, 0xFF	; 255
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	8f 4f       	sbci	r24, 0xFF	; 255
     a50:	9f 4f       	sbci	r25, 0xFF	; 255
     a52:	08 95       	ret

00000a54 <__fp_split3>:
     a54:	57 fd       	sbrc	r21, 7
     a56:	90 58       	subi	r25, 0x80	; 128
     a58:	44 0f       	add	r20, r20
     a5a:	55 1f       	adc	r21, r21
     a5c:	59 f0       	breq	.+22     	; 0xa74 <__fp_splitA+0x10>
     a5e:	5f 3f       	cpi	r21, 0xFF	; 255
     a60:	71 f0       	breq	.+28     	; 0xa7e <__fp_splitA+0x1a>
     a62:	47 95       	ror	r20

00000a64 <__fp_splitA>:
     a64:	88 0f       	add	r24, r24
     a66:	97 fb       	bst	r25, 7
     a68:	99 1f       	adc	r25, r25
     a6a:	61 f0       	breq	.+24     	; 0xa84 <__fp_splitA+0x20>
     a6c:	9f 3f       	cpi	r25, 0xFF	; 255
     a6e:	79 f0       	breq	.+30     	; 0xa8e <__fp_splitA+0x2a>
     a70:	87 95       	ror	r24
     a72:	08 95       	ret
     a74:	12 16       	cp	r1, r18
     a76:	13 06       	cpc	r1, r19
     a78:	14 06       	cpc	r1, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	f2 cf       	rjmp	.-28     	; 0xa62 <__fp_split3+0xe>
     a7e:	46 95       	lsr	r20
     a80:	f1 df       	rcall	.-30     	; 0xa64 <__fp_splitA>
     a82:	08 c0       	rjmp	.+16     	; 0xa94 <__fp_splitA+0x30>
     a84:	16 16       	cp	r1, r22
     a86:	17 06       	cpc	r1, r23
     a88:	18 06       	cpc	r1, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	f1 cf       	rjmp	.-30     	; 0xa70 <__fp_splitA+0xc>
     a8e:	86 95       	lsr	r24
     a90:	71 05       	cpc	r23, r1
     a92:	61 05       	cpc	r22, r1
     a94:	08 94       	sec
     a96:	08 95       	ret

00000a98 <__fp_zero>:
     a98:	e8 94       	clt

00000a9a <__fp_szero>:
     a9a:	bb 27       	eor	r27, r27
     a9c:	66 27       	eor	r22, r22
     a9e:	77 27       	eor	r23, r23
     aa0:	cb 01       	movw	r24, r22
     aa2:	97 f9       	bld	r25, 7
     aa4:	08 95       	ret

00000aa6 <__mulsf3>:
     aa6:	0b d0       	rcall	.+22     	; 0xabe <__mulsf3x>
     aa8:	c4 cf       	rjmp	.-120    	; 0xa32 <__fp_round>
     aaa:	b5 df       	rcall	.-150    	; 0xa16 <__fp_pscA>
     aac:	28 f0       	brcs	.+10     	; 0xab8 <__mulsf3+0x12>
     aae:	ba df       	rcall	.-140    	; 0xa24 <__fp_pscB>
     ab0:	18 f0       	brcs	.+6      	; 0xab8 <__mulsf3+0x12>
     ab2:	95 23       	and	r25, r21
     ab4:	09 f0       	breq	.+2      	; 0xab8 <__mulsf3+0x12>
     ab6:	a6 cf       	rjmp	.-180    	; 0xa04 <__fp_inf>
     ab8:	ab cf       	rjmp	.-170    	; 0xa10 <__fp_nan>
     aba:	11 24       	eor	r1, r1
     abc:	ee cf       	rjmp	.-36     	; 0xa9a <__fp_szero>

00000abe <__mulsf3x>:
     abe:	ca df       	rcall	.-108    	; 0xa54 <__fp_split3>
     ac0:	a0 f3       	brcs	.-24     	; 0xaaa <__mulsf3+0x4>

00000ac2 <__mulsf3_pse>:
     ac2:	95 9f       	mul	r25, r21
     ac4:	d1 f3       	breq	.-12     	; 0xaba <__mulsf3+0x14>
     ac6:	95 0f       	add	r25, r21
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	55 1f       	adc	r21, r21
     acc:	62 9f       	mul	r22, r18
     ace:	f0 01       	movw	r30, r0
     ad0:	72 9f       	mul	r23, r18
     ad2:	bb 27       	eor	r27, r27
     ad4:	f0 0d       	add	r31, r0
     ad6:	b1 1d       	adc	r27, r1
     ad8:	63 9f       	mul	r22, r19
     ada:	aa 27       	eor	r26, r26
     adc:	f0 0d       	add	r31, r0
     ade:	b1 1d       	adc	r27, r1
     ae0:	aa 1f       	adc	r26, r26
     ae2:	64 9f       	mul	r22, r20
     ae4:	66 27       	eor	r22, r22
     ae6:	b0 0d       	add	r27, r0
     ae8:	a1 1d       	adc	r26, r1
     aea:	66 1f       	adc	r22, r22
     aec:	82 9f       	mul	r24, r18
     aee:	22 27       	eor	r18, r18
     af0:	b0 0d       	add	r27, r0
     af2:	a1 1d       	adc	r26, r1
     af4:	62 1f       	adc	r22, r18
     af6:	73 9f       	mul	r23, r19
     af8:	b0 0d       	add	r27, r0
     afa:	a1 1d       	adc	r26, r1
     afc:	62 1f       	adc	r22, r18
     afe:	83 9f       	mul	r24, r19
     b00:	a0 0d       	add	r26, r0
     b02:	61 1d       	adc	r22, r1
     b04:	22 1f       	adc	r18, r18
     b06:	74 9f       	mul	r23, r20
     b08:	33 27       	eor	r19, r19
     b0a:	a0 0d       	add	r26, r0
     b0c:	61 1d       	adc	r22, r1
     b0e:	23 1f       	adc	r18, r19
     b10:	84 9f       	mul	r24, r20
     b12:	60 0d       	add	r22, r0
     b14:	21 1d       	adc	r18, r1
     b16:	82 2f       	mov	r24, r18
     b18:	76 2f       	mov	r23, r22
     b1a:	6a 2f       	mov	r22, r26
     b1c:	11 24       	eor	r1, r1
     b1e:	9f 57       	subi	r25, 0x7F	; 127
     b20:	50 40       	sbci	r21, 0x00	; 0
     b22:	8a f0       	brmi	.+34     	; 0xb46 <__mulsf3_pse+0x84>
     b24:	e1 f0       	breq	.+56     	; 0xb5e <__mulsf3_pse+0x9c>
     b26:	88 23       	and	r24, r24
     b28:	4a f0       	brmi	.+18     	; 0xb3c <__mulsf3_pse+0x7a>
     b2a:	ee 0f       	add	r30, r30
     b2c:	ff 1f       	adc	r31, r31
     b2e:	bb 1f       	adc	r27, r27
     b30:	66 1f       	adc	r22, r22
     b32:	77 1f       	adc	r23, r23
     b34:	88 1f       	adc	r24, r24
     b36:	91 50       	subi	r25, 0x01	; 1
     b38:	50 40       	sbci	r21, 0x00	; 0
     b3a:	a9 f7       	brne	.-22     	; 0xb26 <__mulsf3_pse+0x64>
     b3c:	9e 3f       	cpi	r25, 0xFE	; 254
     b3e:	51 05       	cpc	r21, r1
     b40:	70 f0       	brcs	.+28     	; 0xb5e <__mulsf3_pse+0x9c>
     b42:	60 cf       	rjmp	.-320    	; 0xa04 <__fp_inf>
     b44:	aa cf       	rjmp	.-172    	; 0xa9a <__fp_szero>
     b46:	5f 3f       	cpi	r21, 0xFF	; 255
     b48:	ec f3       	brlt	.-6      	; 0xb44 <__mulsf3_pse+0x82>
     b4a:	98 3e       	cpi	r25, 0xE8	; 232
     b4c:	dc f3       	brlt	.-10     	; 0xb44 <__mulsf3_pse+0x82>
     b4e:	86 95       	lsr	r24
     b50:	77 95       	ror	r23
     b52:	67 95       	ror	r22
     b54:	b7 95       	ror	r27
     b56:	f7 95       	ror	r31
     b58:	e7 95       	ror	r30
     b5a:	9f 5f       	subi	r25, 0xFF	; 255
     b5c:	c1 f7       	brne	.-16     	; 0xb4e <__mulsf3_pse+0x8c>
     b5e:	fe 2b       	or	r31, r30
     b60:	88 0f       	add	r24, r24
     b62:	91 1d       	adc	r25, r1
     b64:	96 95       	lsr	r25
     b66:	87 95       	ror	r24
     b68:	97 f9       	bld	r25, 7
     b6a:	08 95       	ret

00000b6c <vfprintf>:
     b6c:	2f 92       	push	r2
     b6e:	3f 92       	push	r3
     b70:	4f 92       	push	r4
     b72:	5f 92       	push	r5
     b74:	6f 92       	push	r6
     b76:	7f 92       	push	r7
     b78:	8f 92       	push	r8
     b7a:	9f 92       	push	r9
     b7c:	af 92       	push	r10
     b7e:	bf 92       	push	r11
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	62 97       	sbiw	r28, 0x12	; 18
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	7c 01       	movw	r14, r24
     ba2:	1b 01       	movw	r2, r22
     ba4:	6a 01       	movw	r12, r20
     ba6:	fc 01       	movw	r30, r24
     ba8:	17 82       	std	Z+7, r1	; 0x07
     baa:	16 82       	std	Z+6, r1	; 0x06
     bac:	83 81       	ldd	r24, Z+3	; 0x03
     bae:	81 fd       	sbrc	r24, 1
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <vfprintf+0x4c>
     bb2:	6b c3       	rjmp	.+1750   	; 0x128a <vfprintf+0x71e>
     bb4:	65 01       	movw	r12, r10
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <vfprintf+0x56>
     bb8:	88 24       	eor	r8, r8
     bba:	83 94       	inc	r8
     bbc:	91 2c       	mov	r9, r1
     bbe:	8c 0e       	add	r8, r28
     bc0:	9d 1e       	adc	r9, r29
     bc2:	f7 01       	movw	r30, r14
     bc4:	93 81       	ldd	r25, Z+3	; 0x03
     bc6:	f1 01       	movw	r30, r2
     bc8:	93 fd       	sbrc	r25, 3
     bca:	85 91       	lpm	r24, Z+
     bcc:	93 ff       	sbrs	r25, 3
     bce:	81 91       	ld	r24, Z+
     bd0:	1f 01       	movw	r2, r30
     bd2:	88 23       	and	r24, r24
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <vfprintf+0x6c>
     bd6:	55 c3       	rjmp	.+1706   	; 0x1282 <vfprintf+0x716>
     bd8:	85 32       	cpi	r24, 0x25	; 37
     bda:	39 f4       	brne	.+14     	; 0xbea <vfprintf+0x7e>
     bdc:	93 fd       	sbrc	r25, 3
     bde:	85 91       	lpm	r24, Z+
     be0:	93 ff       	sbrs	r25, 3
     be2:	81 91       	ld	r24, Z+
     be4:	1f 01       	movw	r2, r30
     be6:	85 32       	cpi	r24, 0x25	; 37
     be8:	31 f4       	brne	.+12     	; 0xbf6 <vfprintf+0x8a>
     bea:	b7 01       	movw	r22, r14
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     bf2:	56 01       	movw	r10, r12
     bf4:	df cf       	rjmp	.-66     	; 0xbb4 <vfprintf+0x48>
     bf6:	71 2c       	mov	r7, r1
     bf8:	61 2c       	mov	r6, r1
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	20 32       	cpi	r18, 0x20	; 32
     bfe:	a8 f4       	brcc	.+42     	; 0xc2a <vfprintf+0xbe>
     c00:	8b 32       	cpi	r24, 0x2B	; 43
     c02:	61 f0       	breq	.+24     	; 0xc1c <vfprintf+0xb0>
     c04:	28 f4       	brcc	.+10     	; 0xc10 <vfprintf+0xa4>
     c06:	80 32       	cpi	r24, 0x20	; 32
     c08:	51 f0       	breq	.+20     	; 0xc1e <vfprintf+0xb2>
     c0a:	83 32       	cpi	r24, 0x23	; 35
     c0c:	71 f4       	brne	.+28     	; 0xc2a <vfprintf+0xbe>
     c0e:	0b c0       	rjmp	.+22     	; 0xc26 <vfprintf+0xba>
     c10:	8d 32       	cpi	r24, 0x2D	; 45
     c12:	39 f0       	breq	.+14     	; 0xc22 <vfprintf+0xb6>
     c14:	80 33       	cpi	r24, 0x30	; 48
     c16:	49 f4       	brne	.+18     	; 0xc2a <vfprintf+0xbe>
     c18:	21 60       	ori	r18, 0x01	; 1
     c1a:	28 c0       	rjmp	.+80     	; 0xc6c <vfprintf+0x100>
     c1c:	22 60       	ori	r18, 0x02	; 2
     c1e:	24 60       	ori	r18, 0x04	; 4
     c20:	25 c0       	rjmp	.+74     	; 0xc6c <vfprintf+0x100>
     c22:	28 60       	ori	r18, 0x08	; 8
     c24:	23 c0       	rjmp	.+70     	; 0xc6c <vfprintf+0x100>
     c26:	20 61       	ori	r18, 0x10	; 16
     c28:	21 c0       	rjmp	.+66     	; 0xc6c <vfprintf+0x100>
     c2a:	27 fd       	sbrc	r18, 7
     c2c:	27 c0       	rjmp	.+78     	; 0xc7c <vfprintf+0x110>
     c2e:	38 2f       	mov	r19, r24
     c30:	30 53       	subi	r19, 0x30	; 48
     c32:	3a 30       	cpi	r19, 0x0A	; 10
     c34:	78 f4       	brcc	.+30     	; 0xc54 <vfprintf+0xe8>
     c36:	26 ff       	sbrs	r18, 6
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <vfprintf+0xda>
     c3a:	fa e0       	ldi	r31, 0x0A	; 10
     c3c:	7f 9e       	mul	r7, r31
     c3e:	30 0d       	add	r19, r0
     c40:	11 24       	eor	r1, r1
     c42:	73 2e       	mov	r7, r19
     c44:	13 c0       	rjmp	.+38     	; 0xc6c <vfprintf+0x100>
     c46:	4a e0       	ldi	r20, 0x0A	; 10
     c48:	64 9e       	mul	r6, r20
     c4a:	30 0d       	add	r19, r0
     c4c:	11 24       	eor	r1, r1
     c4e:	63 2e       	mov	r6, r19
     c50:	20 62       	ori	r18, 0x20	; 32
     c52:	0c c0       	rjmp	.+24     	; 0xc6c <vfprintf+0x100>
     c54:	8e 32       	cpi	r24, 0x2E	; 46
     c56:	21 f4       	brne	.+8      	; 0xc60 <vfprintf+0xf4>
     c58:	26 fd       	sbrc	r18, 6
     c5a:	13 c3       	rjmp	.+1574   	; 0x1282 <vfprintf+0x716>
     c5c:	20 64       	ori	r18, 0x40	; 64
     c5e:	06 c0       	rjmp	.+12     	; 0xc6c <vfprintf+0x100>
     c60:	8c 36       	cpi	r24, 0x6C	; 108
     c62:	11 f4       	brne	.+4      	; 0xc68 <vfprintf+0xfc>
     c64:	20 68       	ori	r18, 0x80	; 128
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x100>
     c68:	88 36       	cpi	r24, 0x68	; 104
     c6a:	41 f4       	brne	.+16     	; 0xc7c <vfprintf+0x110>
     c6c:	f1 01       	movw	r30, r2
     c6e:	93 fd       	sbrc	r25, 3
     c70:	85 91       	lpm	r24, Z+
     c72:	93 ff       	sbrs	r25, 3
     c74:	81 91       	ld	r24, Z+
     c76:	1f 01       	movw	r2, r30
     c78:	81 11       	cpse	r24, r1
     c7a:	c0 cf       	rjmp	.-128    	; 0xbfc <vfprintf+0x90>
     c7c:	98 2f       	mov	r25, r24
     c7e:	95 54       	subi	r25, 0x45	; 69
     c80:	93 30       	cpi	r25, 0x03	; 3
     c82:	18 f4       	brcc	.+6      	; 0xc8a <vfprintf+0x11e>
     c84:	20 61       	ori	r18, 0x10	; 16
     c86:	80 5e       	subi	r24, 0xE0	; 224
     c88:	06 c0       	rjmp	.+12     	; 0xc96 <vfprintf+0x12a>
     c8a:	98 2f       	mov	r25, r24
     c8c:	95 56       	subi	r25, 0x65	; 101
     c8e:	93 30       	cpi	r25, 0x03	; 3
     c90:	08 f0       	brcs	.+2      	; 0xc94 <vfprintf+0x128>
     c92:	a4 c1       	rjmp	.+840    	; 0xfdc <vfprintf+0x470>
     c94:	2f 7e       	andi	r18, 0xEF	; 239
     c96:	26 fd       	sbrc	r18, 6
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <vfprintf+0x132>
     c9a:	16 e0       	ldi	r17, 0x06	; 6
     c9c:	71 2e       	mov	r7, r17
     c9e:	bf e3       	ldi	r27, 0x3F	; 63
     ca0:	5b 2e       	mov	r5, r27
     ca2:	52 22       	and	r5, r18
     ca4:	85 36       	cpi	r24, 0x65	; 101
     ca6:	19 f4       	brne	.+6      	; 0xcae <vfprintf+0x142>
     ca8:	f0 e4       	ldi	r31, 0x40	; 64
     caa:	5f 2a       	or	r5, r31
     cac:	07 c0       	rjmp	.+14     	; 0xcbc <vfprintf+0x150>
     cae:	86 36       	cpi	r24, 0x66	; 102
     cb0:	19 f4       	brne	.+6      	; 0xcb8 <vfprintf+0x14c>
     cb2:	40 e8       	ldi	r20, 0x80	; 128
     cb4:	54 2a       	or	r5, r20
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <vfprintf+0x150>
     cb8:	71 10       	cpse	r7, r1
     cba:	7a 94       	dec	r7
     cbc:	57 fe       	sbrs	r5, 7
     cbe:	07 c0       	rjmp	.+14     	; 0xcce <vfprintf+0x162>
     cc0:	5b e3       	ldi	r21, 0x3B	; 59
     cc2:	57 15       	cp	r21, r7
     cc4:	48 f0       	brcs	.+18     	; 0xcd8 <vfprintf+0x16c>
     cc6:	47 2c       	mov	r4, r7
     cc8:	43 94       	inc	r4
     cca:	27 e0       	ldi	r18, 0x07	; 7
     ccc:	0d c0       	rjmp	.+26     	; 0xce8 <vfprintf+0x17c>
     cce:	87 e0       	ldi	r24, 0x07	; 7
     cd0:	87 15       	cp	r24, r7
     cd2:	30 f0       	brcs	.+12     	; 0xce0 <vfprintf+0x174>
     cd4:	27 2d       	mov	r18, r7
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <vfprintf+0x17a>
     cd8:	27 e0       	ldi	r18, 0x07	; 7
     cda:	ac e3       	ldi	r26, 0x3C	; 60
     cdc:	4a 2e       	mov	r4, r26
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <vfprintf+0x17c>
     ce0:	27 e0       	ldi	r18, 0x07	; 7
     ce2:	f7 e0       	ldi	r31, 0x07	; 7
     ce4:	7f 2e       	mov	r7, r31
     ce6:	41 2c       	mov	r4, r1
     ce8:	56 01       	movw	r10, r12
     cea:	94 e0       	ldi	r25, 0x04	; 4
     cec:	a9 0e       	add	r10, r25
     cee:	b1 1c       	adc	r11, r1
     cf0:	f6 01       	movw	r30, r12
     cf2:	60 81       	ld	r22, Z
     cf4:	71 81       	ldd	r23, Z+1	; 0x01
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	93 81       	ldd	r25, Z+3	; 0x03
     cfa:	04 2d       	mov	r16, r4
     cfc:	a4 01       	movw	r20, r8
     cfe:	0e 94 89 09 	call	0x1312	; 0x1312 <__ftoa_engine>
     d02:	8c 01       	movw	r16, r24
     d04:	49 81       	ldd	r20, Y+1	; 0x01
     d06:	4c 87       	std	Y+12, r20	; 0x0c
     d08:	40 ff       	sbrs	r20, 0
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <vfprintf+0x1a4>
     d0c:	43 ff       	sbrs	r20, 3
     d0e:	07 c0       	rjmp	.+14     	; 0xd1e <vfprintf+0x1b2>
     d10:	51 fc       	sbrc	r5, 1
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <vfprintf+0x1b8>
     d14:	52 fe       	sbrs	r5, 2
     d16:	09 c0       	rjmp	.+18     	; 0xd2a <vfprintf+0x1be>
     d18:	e0 e2       	ldi	r30, 0x20	; 32
     d1a:	de 2e       	mov	r13, r30
     d1c:	07 c0       	rjmp	.+14     	; 0xd2c <vfprintf+0x1c0>
     d1e:	7d e2       	ldi	r23, 0x2D	; 45
     d20:	d7 2e       	mov	r13, r23
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <vfprintf+0x1c0>
     d24:	6b e2       	ldi	r22, 0x2B	; 43
     d26:	d6 2e       	mov	r13, r22
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <vfprintf+0x1c0>
     d2a:	d1 2c       	mov	r13, r1
     d2c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d2e:	8c 70       	andi	r24, 0x0C	; 12
     d30:	a1 f1       	breq	.+104    	; 0xd9a <vfprintf+0x22e>
     d32:	dd 20       	and	r13, r13
     d34:	11 f0       	breq	.+4      	; 0xd3a <vfprintf+0x1ce>
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <vfprintf+0x1d0>
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	86 15       	cp	r24, r6
     d3e:	10 f0       	brcs	.+4      	; 0xd44 <vfprintf+0x1d8>
     d40:	61 2c       	mov	r6, r1
     d42:	0b c0       	rjmp	.+22     	; 0xd5a <vfprintf+0x1ee>
     d44:	68 1a       	sub	r6, r24
     d46:	53 fc       	sbrc	r5, 3
     d48:	08 c0       	rjmp	.+16     	; 0xd5a <vfprintf+0x1ee>
     d4a:	b7 01       	movw	r22, r14
     d4c:	80 e2       	ldi	r24, 0x20	; 32
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     d54:	6a 94       	dec	r6
     d56:	c9 f7       	brne	.-14     	; 0xd4a <vfprintf+0x1de>
     d58:	f3 cf       	rjmp	.-26     	; 0xd40 <vfprintf+0x1d4>
     d5a:	dd 20       	and	r13, r13
     d5c:	29 f0       	breq	.+10     	; 0xd68 <vfprintf+0x1fc>
     d5e:	b7 01       	movw	r22, r14
     d60:	8d 2d       	mov	r24, r13
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     d68:	5c 85       	ldd	r21, Y+12	; 0x0c
     d6a:	53 fd       	sbrc	r21, 3
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <vfprintf+0x208>
     d6e:	0f ee       	ldi	r16, 0xEF	; 239
     d70:	10 e0       	ldi	r17, 0x00	; 0
     d72:	0c c0       	rjmp	.+24     	; 0xd8c <vfprintf+0x220>
     d74:	0b ee       	ldi	r16, 0xEB	; 235
     d76:	10 e0       	ldi	r17, 0x00	; 0
     d78:	09 c0       	rjmp	.+18     	; 0xd8c <vfprintf+0x220>
     d7a:	51 10       	cpse	r5, r1
     d7c:	80 52       	subi	r24, 0x20	; 32
     d7e:	b7 01       	movw	r22, r14
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     d86:	0f 5f       	subi	r16, 0xFF	; 255
     d88:	1f 4f       	sbci	r17, 0xFF	; 255
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <vfprintf+0x224>
     d8c:	80 e1       	ldi	r24, 0x10	; 16
     d8e:	58 22       	and	r5, r24
     d90:	f8 01       	movw	r30, r16
     d92:	84 91       	lpm	r24, Z
     d94:	81 11       	cpse	r24, r1
     d96:	f1 cf       	rjmp	.-30     	; 0xd7a <vfprintf+0x20e>
     d98:	71 c2       	rjmp	.+1250   	; 0x127c <vfprintf+0x710>
     d9a:	57 fe       	sbrs	r5, 7
     d9c:	0e c0       	rjmp	.+28     	; 0xdba <vfprintf+0x24e>
     d9e:	40 0e       	add	r4, r16
     da0:	4c 85       	ldd	r20, Y+12	; 0x0c
     da2:	44 ff       	sbrs	r20, 4
     da4:	04 c0       	rjmp	.+8      	; 0xdae <vfprintf+0x242>
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	81 33       	cpi	r24, 0x31	; 49
     daa:	09 f4       	brne	.+2      	; 0xdae <vfprintf+0x242>
     dac:	4a 94       	dec	r4
     dae:	14 14       	cp	r1, r4
     db0:	4c f5       	brge	.+82     	; 0xe04 <vfprintf+0x298>
     db2:	58 e0       	ldi	r21, 0x08	; 8
     db4:	54 15       	cp	r21, r4
     db6:	48 f1       	brcs	.+82     	; 0xe0a <vfprintf+0x29e>
     db8:	2c c0       	rjmp	.+88     	; 0xe12 <vfprintf+0x2a6>
     dba:	56 fc       	sbrc	r5, 6
     dbc:	2a c0       	rjmp	.+84     	; 0xe12 <vfprintf+0x2a6>
     dbe:	87 2d       	mov	r24, r7
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	80 17       	cp	r24, r16
     dc4:	91 07       	cpc	r25, r17
     dc6:	44 f0       	brlt	.+16     	; 0xdd8 <vfprintf+0x26c>
     dc8:	0c 3f       	cpi	r16, 0xFC	; 252
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	18 07       	cpc	r17, r24
     dce:	24 f0       	brlt	.+8      	; 0xdd8 <vfprintf+0x26c>
     dd0:	90 e8       	ldi	r25, 0x80	; 128
     dd2:	59 2a       	or	r5, r25
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <vfprintf+0x26c>
     dd6:	7a 94       	dec	r7
     dd8:	77 20       	and	r7, r7
     dda:	49 f0       	breq	.+18     	; 0xdee <vfprintf+0x282>
     ddc:	e2 e0       	ldi	r30, 0x02	; 2
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	ec 0f       	add	r30, r28
     de2:	fd 1f       	adc	r31, r29
     de4:	e7 0d       	add	r30, r7
     de6:	f1 1d       	adc	r31, r1
     de8:	80 81       	ld	r24, Z
     dea:	80 33       	cpi	r24, 0x30	; 48
     dec:	a1 f3       	breq	.-24     	; 0xdd6 <vfprintf+0x26a>
     dee:	57 fe       	sbrs	r5, 7
     df0:	10 c0       	rjmp	.+32     	; 0xe12 <vfprintf+0x2a6>
     df2:	47 2c       	mov	r4, r7
     df4:	43 94       	inc	r4
     df6:	87 2d       	mov	r24, r7
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	08 17       	cp	r16, r24
     dfc:	19 07       	cpc	r17, r25
     dfe:	44 f4       	brge	.+16     	; 0xe10 <vfprintf+0x2a4>
     e00:	70 1a       	sub	r7, r16
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <vfprintf+0x2a6>
     e04:	44 24       	eor	r4, r4
     e06:	43 94       	inc	r4
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <vfprintf+0x2a6>
     e0a:	58 e0       	ldi	r21, 0x08	; 8
     e0c:	45 2e       	mov	r4, r21
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <vfprintf+0x2a6>
     e10:	71 2c       	mov	r7, r1
     e12:	57 fe       	sbrs	r5, 7
     e14:	07 c0       	rjmp	.+14     	; 0xe24 <vfprintf+0x2b8>
     e16:	10 16       	cp	r1, r16
     e18:	11 06       	cpc	r1, r17
     e1a:	3c f4       	brge	.+14     	; 0xe2a <vfprintf+0x2be>
     e1c:	98 01       	movw	r18, r16
     e1e:	2f 5f       	subi	r18, 0xFF	; 255
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	05 c0       	rjmp	.+10     	; 0xe2e <vfprintf+0x2c2>
     e24:	25 e0       	ldi	r18, 0x05	; 5
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <vfprintf+0x2c2>
     e2a:	21 e0       	ldi	r18, 0x01	; 1
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	dd 20       	and	r13, r13
     e30:	11 f0       	breq	.+4      	; 0xe36 <vfprintf+0x2ca>
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	3f 4f       	sbci	r19, 0xFF	; 255
     e36:	77 20       	and	r7, r7
     e38:	31 f0       	breq	.+12     	; 0xe46 <vfprintf+0x2da>
     e3a:	47 2d       	mov	r20, r7
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	4f 5f       	subi	r20, 0xFF	; 255
     e40:	5f 4f       	sbci	r21, 0xFF	; 255
     e42:	24 0f       	add	r18, r20
     e44:	35 1f       	adc	r19, r21
     e46:	46 2d       	mov	r20, r6
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	24 17       	cp	r18, r20
     e4c:	35 07       	cpc	r19, r21
     e4e:	14 f4       	brge	.+4      	; 0xe54 <vfprintf+0x2e8>
     e50:	62 1a       	sub	r6, r18
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <vfprintf+0x2ea>
     e54:	61 2c       	mov	r6, r1
     e56:	85 2d       	mov	r24, r5
     e58:	89 70       	andi	r24, 0x09	; 9
     e5a:	49 f4       	brne	.+18     	; 0xe6e <vfprintf+0x302>
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <vfprintf+0x2fe>
     e5e:	b7 01       	movw	r22, r14
     e60:	80 e2       	ldi	r24, 0x20	; 32
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     e68:	6a 94       	dec	r6
     e6a:	61 10       	cpse	r6, r1
     e6c:	f8 cf       	rjmp	.-16     	; 0xe5e <vfprintf+0x2f2>
     e6e:	dd 20       	and	r13, r13
     e70:	29 f0       	breq	.+10     	; 0xe7c <vfprintf+0x310>
     e72:	b7 01       	movw	r22, r14
     e74:	8d 2d       	mov	r24, r13
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     e7c:	53 fc       	sbrc	r5, 3
     e7e:	09 c0       	rjmp	.+18     	; 0xe92 <vfprintf+0x326>
     e80:	06 c0       	rjmp	.+12     	; 0xe8e <vfprintf+0x322>
     e82:	b7 01       	movw	r22, r14
     e84:	80 e3       	ldi	r24, 0x30	; 48
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     e8c:	6a 94       	dec	r6
     e8e:	61 10       	cpse	r6, r1
     e90:	f8 cf       	rjmp	.-16     	; 0xe82 <vfprintf+0x316>
     e92:	57 fe       	sbrs	r5, 7
     e94:	56 c0       	rjmp	.+172    	; 0xf42 <vfprintf+0x3d6>
     e96:	68 01       	movw	r12, r16
     e98:	17 ff       	sbrs	r17, 7
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <vfprintf+0x334>
     e9c:	c1 2c       	mov	r12, r1
     e9e:	d1 2c       	mov	r13, r1
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	a8 01       	movw	r20, r16
     ea6:	44 19       	sub	r20, r4
     ea8:	51 09       	sbc	r21, r1
     eaa:	5e 87       	std	Y+14, r21	; 0x0e
     eac:	4d 87       	std	Y+13, r20	; 0x0d
     eae:	28 01       	movw	r4, r16
     eb0:	4c 18       	sub	r4, r12
     eb2:	5d 08       	sbc	r5, r13
     eb4:	48 0c       	add	r4, r8
     eb6:	59 1c       	adc	r5, r9
     eb8:	87 2d       	mov	r24, r7
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	44 27       	eor	r20, r20
     ebe:	55 27       	eor	r21, r21
     ec0:	48 1b       	sub	r20, r24
     ec2:	59 0b       	sbc	r21, r25
     ec4:	58 8b       	std	Y+16, r21	; 0x10
     ec6:	4f 87       	std	Y+15, r20	; 0x0f
     ec8:	5f ef       	ldi	r21, 0xFF	; 255
     eca:	c5 16       	cp	r12, r21
     ecc:	d5 06       	cpc	r13, r21
     ece:	49 f4       	brne	.+18     	; 0xee2 <vfprintf+0x376>
     ed0:	b7 01       	movw	r22, r14
     ed2:	8e e2       	ldi	r24, 0x2E	; 46
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	2a 8b       	std	Y+18, r18	; 0x12
     ed8:	39 8b       	std	Y+17, r19	; 0x11
     eda:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     ede:	39 89       	ldd	r19, Y+17	; 0x11
     ee0:	2a 89       	ldd	r18, Y+18	; 0x12
     ee2:	0c 15       	cp	r16, r12
     ee4:	1d 05       	cpc	r17, r13
     ee6:	54 f0       	brlt	.+20     	; 0xefc <vfprintf+0x390>
     ee8:	4d 85       	ldd	r20, Y+13	; 0x0d
     eea:	5e 85       	ldd	r21, Y+14	; 0x0e
     eec:	4c 15       	cp	r20, r12
     eee:	5d 05       	cpc	r21, r13
     ef0:	2c f4       	brge	.+10     	; 0xefc <vfprintf+0x390>
     ef2:	f2 01       	movw	r30, r4
     ef4:	e2 0f       	add	r30, r18
     ef6:	f3 1f       	adc	r31, r19
     ef8:	81 81       	ldd	r24, Z+1	; 0x01
     efa:	01 c0       	rjmp	.+2      	; 0xefe <vfprintf+0x392>
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	51 e0       	ldi	r21, 0x01	; 1
     f00:	c5 1a       	sub	r12, r21
     f02:	d1 08       	sbc	r13, r1
     f04:	2f 5f       	subi	r18, 0xFF	; 255
     f06:	3f 4f       	sbci	r19, 0xFF	; 255
     f08:	4f 85       	ldd	r20, Y+15	; 0x0f
     f0a:	58 89       	ldd	r21, Y+16	; 0x10
     f0c:	c4 16       	cp	r12, r20
     f0e:	d5 06       	cpc	r13, r21
     f10:	4c f0       	brlt	.+18     	; 0xf24 <vfprintf+0x3b8>
     f12:	b7 01       	movw	r22, r14
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	2a 8b       	std	Y+18, r18	; 0x12
     f18:	39 8b       	std	Y+17, r19	; 0x11
     f1a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     f1e:	2a 89       	ldd	r18, Y+18	; 0x12
     f20:	39 89       	ldd	r19, Y+17	; 0x11
     f22:	d2 cf       	rjmp	.-92     	; 0xec8 <vfprintf+0x35c>
     f24:	c0 16       	cp	r12, r16
     f26:	d1 06       	cpc	r13, r17
     f28:	49 f4       	brne	.+18     	; 0xf3c <vfprintf+0x3d0>
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	96 33       	cpi	r25, 0x36	; 54
     f2e:	28 f4       	brcc	.+10     	; 0xf3a <vfprintf+0x3ce>
     f30:	95 33       	cpi	r25, 0x35	; 53
     f32:	21 f4       	brne	.+8      	; 0xf3c <vfprintf+0x3d0>
     f34:	5c 85       	ldd	r21, Y+12	; 0x0c
     f36:	54 fd       	sbrc	r21, 4
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <vfprintf+0x3d0>
     f3a:	81 e3       	ldi	r24, 0x31	; 49
     f3c:	b7 01       	movw	r22, r14
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	4a c0       	rjmp	.+148    	; 0xfd6 <vfprintf+0x46a>
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	81 33       	cpi	r24, 0x31	; 49
     f46:	19 f0       	breq	.+6      	; 0xf4e <vfprintf+0x3e2>
     f48:	4c 85       	ldd	r20, Y+12	; 0x0c
     f4a:	4f 7e       	andi	r20, 0xEF	; 239
     f4c:	4c 87       	std	Y+12, r20	; 0x0c
     f4e:	b7 01       	movw	r22, r14
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     f56:	71 10       	cpse	r7, r1
     f58:	05 c0       	rjmp	.+10     	; 0xf64 <vfprintf+0x3f8>
     f5a:	54 fe       	sbrs	r5, 4
     f5c:	16 c0       	rjmp	.+44     	; 0xf8a <vfprintf+0x41e>
     f5e:	85 e4       	ldi	r24, 0x45	; 69
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	15 c0       	rjmp	.+42     	; 0xf8e <vfprintf+0x422>
     f64:	b7 01       	movw	r22, r14
     f66:	8e e2       	ldi	r24, 0x2E	; 46
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     f6e:	42 e0       	ldi	r20, 0x02	; 2
     f70:	d4 2e       	mov	r13, r20
     f72:	f4 01       	movw	r30, r8
     f74:	ed 0d       	add	r30, r13
     f76:	f1 1d       	adc	r31, r1
     f78:	d3 94       	inc	r13
     f7a:	b7 01       	movw	r22, r14
     f7c:	80 81       	ld	r24, Z
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     f84:	7a 94       	dec	r7
     f86:	a9 f7       	brne	.-22     	; 0xf72 <vfprintf+0x406>
     f88:	e8 cf       	rjmp	.-48     	; 0xf5a <vfprintf+0x3ee>
     f8a:	85 e6       	ldi	r24, 0x65	; 101
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	b7 01       	movw	r22, r14
     f90:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     f94:	17 fd       	sbrc	r17, 7
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <vfprintf+0x438>
     f98:	01 15       	cp	r16, r1
     f9a:	11 05       	cpc	r17, r1
     f9c:	41 f4       	brne	.+16     	; 0xfae <vfprintf+0x442>
     f9e:	5c 85       	ldd	r21, Y+12	; 0x0c
     fa0:	54 ff       	sbrs	r21, 4
     fa2:	05 c0       	rjmp	.+10     	; 0xfae <vfprintf+0x442>
     fa4:	11 95       	neg	r17
     fa6:	01 95       	neg	r16
     fa8:	11 09       	sbc	r17, r1
     faa:	8d e2       	ldi	r24, 0x2D	; 45
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <vfprintf+0x444>
     fae:	8b e2       	ldi	r24, 0x2B	; 43
     fb0:	b7 01       	movw	r22, r14
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     fb8:	80 e3       	ldi	r24, 0x30	; 48
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <vfprintf+0x456>
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	0a 50       	subi	r16, 0x0A	; 10
     fc0:	11 09       	sbc	r17, r1
     fc2:	0a 30       	cpi	r16, 0x0A	; 10
     fc4:	11 05       	cpc	r17, r1
     fc6:	d4 f7       	brge	.-12     	; 0xfbc <vfprintf+0x450>
     fc8:	b7 01       	movw	r22, r14
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     fd0:	b7 01       	movw	r22, r14
     fd2:	c8 01       	movw	r24, r16
     fd4:	c0 96       	adiw	r24, 0x30	; 48
     fd6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
     fda:	50 c1       	rjmp	.+672    	; 0x127c <vfprintf+0x710>
     fdc:	83 36       	cpi	r24, 0x63	; 99
     fde:	31 f0       	breq	.+12     	; 0xfec <vfprintf+0x480>
     fe0:	83 37       	cpi	r24, 0x73	; 115
     fe2:	81 f0       	breq	.+32     	; 0x1004 <vfprintf+0x498>
     fe4:	83 35       	cpi	r24, 0x53	; 83
     fe6:	09 f0       	breq	.+2      	; 0xfea <vfprintf+0x47e>
     fe8:	5e c0       	rjmp	.+188    	; 0x10a6 <vfprintf+0x53a>
     fea:	24 c0       	rjmp	.+72     	; 0x1034 <vfprintf+0x4c8>
     fec:	56 01       	movw	r10, r12
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	a8 0e       	add	r10, r24
     ff2:	b1 1c       	adc	r11, r1
     ff4:	f6 01       	movw	r30, r12
     ff6:	80 81       	ld	r24, Z
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	cc 24       	eor	r12, r12
     ffc:	c3 94       	inc	r12
     ffe:	d1 2c       	mov	r13, r1
    1000:	84 01       	movw	r16, r8
    1002:	14 c0       	rjmp	.+40     	; 0x102c <vfprintf+0x4c0>
    1004:	56 01       	movw	r10, r12
    1006:	f2 e0       	ldi	r31, 0x02	; 2
    1008:	af 0e       	add	r10, r31
    100a:	b1 1c       	adc	r11, r1
    100c:	f6 01       	movw	r30, r12
    100e:	00 81       	ld	r16, Z
    1010:	11 81       	ldd	r17, Z+1	; 0x01
    1012:	26 ff       	sbrs	r18, 6
    1014:	03 c0       	rjmp	.+6      	; 0x101c <vfprintf+0x4b0>
    1016:	67 2d       	mov	r22, r7
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <vfprintf+0x4b4>
    101c:	6f ef       	ldi	r22, 0xFF	; 255
    101e:	7f ef       	ldi	r23, 0xFF	; 255
    1020:	c8 01       	movw	r24, r16
    1022:	2a 8b       	std	Y+18, r18	; 0x12
    1024:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <strnlen>
    1028:	6c 01       	movw	r12, r24
    102a:	2a 89       	ldd	r18, Y+18	; 0x12
    102c:	9f e7       	ldi	r25, 0x7F	; 127
    102e:	59 2e       	mov	r5, r25
    1030:	52 22       	and	r5, r18
    1032:	17 c0       	rjmp	.+46     	; 0x1062 <vfprintf+0x4f6>
    1034:	56 01       	movw	r10, r12
    1036:	f2 e0       	ldi	r31, 0x02	; 2
    1038:	af 0e       	add	r10, r31
    103a:	b1 1c       	adc	r11, r1
    103c:	f6 01       	movw	r30, r12
    103e:	00 81       	ld	r16, Z
    1040:	11 81       	ldd	r17, Z+1	; 0x01
    1042:	26 ff       	sbrs	r18, 6
    1044:	03 c0       	rjmp	.+6      	; 0x104c <vfprintf+0x4e0>
    1046:	67 2d       	mov	r22, r7
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <vfprintf+0x4e4>
    104c:	6f ef       	ldi	r22, 0xFF	; 255
    104e:	7f ef       	ldi	r23, 0xFF	; 255
    1050:	c8 01       	movw	r24, r16
    1052:	2a 8b       	std	Y+18, r18	; 0x12
    1054:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <strnlen_P>
    1058:	6c 01       	movw	r12, r24
    105a:	2a 89       	ldd	r18, Y+18	; 0x12
    105c:	80 e8       	ldi	r24, 0x80	; 128
    105e:	58 2e       	mov	r5, r24
    1060:	52 2a       	or	r5, r18
    1062:	53 fc       	sbrc	r5, 3
    1064:	1c c0       	rjmp	.+56     	; 0x109e <vfprintf+0x532>
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <vfprintf+0x508>
    1068:	b7 01       	movw	r22, r14
    106a:	80 e2       	ldi	r24, 0x20	; 32
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1072:	6a 94       	dec	r6
    1074:	86 2d       	mov	r24, r6
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	c8 16       	cp	r12, r24
    107a:	d9 06       	cpc	r13, r25
    107c:	a8 f3       	brcs	.-22     	; 0x1068 <vfprintf+0x4fc>
    107e:	0f c0       	rjmp	.+30     	; 0x109e <vfprintf+0x532>
    1080:	f8 01       	movw	r30, r16
    1082:	57 fc       	sbrc	r5, 7
    1084:	85 91       	lpm	r24, Z+
    1086:	57 fe       	sbrs	r5, 7
    1088:	81 91       	ld	r24, Z+
    108a:	8f 01       	movw	r16, r30
    108c:	b7 01       	movw	r22, r14
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1094:	61 10       	cpse	r6, r1
    1096:	6a 94       	dec	r6
    1098:	f1 e0       	ldi	r31, 0x01	; 1
    109a:	cf 1a       	sub	r12, r31
    109c:	d1 08       	sbc	r13, r1
    109e:	c1 14       	cp	r12, r1
    10a0:	d1 04       	cpc	r13, r1
    10a2:	71 f7       	brne	.-36     	; 0x1080 <vfprintf+0x514>
    10a4:	eb c0       	rjmp	.+470    	; 0x127c <vfprintf+0x710>
    10a6:	84 36       	cpi	r24, 0x64	; 100
    10a8:	11 f0       	breq	.+4      	; 0x10ae <vfprintf+0x542>
    10aa:	89 36       	cpi	r24, 0x69	; 105
    10ac:	51 f5       	brne	.+84     	; 0x1102 <vfprintf+0x596>
    10ae:	56 01       	movw	r10, r12
    10b0:	27 ff       	sbrs	r18, 7
    10b2:	09 c0       	rjmp	.+18     	; 0x10c6 <vfprintf+0x55a>
    10b4:	44 e0       	ldi	r20, 0x04	; 4
    10b6:	a4 0e       	add	r10, r20
    10b8:	b1 1c       	adc	r11, r1
    10ba:	f6 01       	movw	r30, r12
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	0a c0       	rjmp	.+20     	; 0x10da <vfprintf+0x56e>
    10c6:	f2 e0       	ldi	r31, 0x02	; 2
    10c8:	af 0e       	add	r10, r31
    10ca:	b1 1c       	adc	r11, r1
    10cc:	f6 01       	movw	r30, r12
    10ce:	60 81       	ld	r22, Z
    10d0:	71 81       	ldd	r23, Z+1	; 0x01
    10d2:	88 27       	eor	r24, r24
    10d4:	77 fd       	sbrc	r23, 7
    10d6:	80 95       	com	r24
    10d8:	98 2f       	mov	r25, r24
    10da:	12 2f       	mov	r17, r18
    10dc:	1f 76       	andi	r17, 0x6F	; 111
    10de:	97 ff       	sbrs	r25, 7
    10e0:	08 c0       	rjmp	.+16     	; 0x10f2 <vfprintf+0x586>
    10e2:	90 95       	com	r25
    10e4:	80 95       	com	r24
    10e6:	70 95       	com	r23
    10e8:	61 95       	neg	r22
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	8f 4f       	sbci	r24, 0xFF	; 255
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	10 68       	ori	r17, 0x80	; 128
    10f2:	2a e0       	ldi	r18, 0x0A	; 10
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	a4 01       	movw	r20, r8
    10f8:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__ultoa_invert>
    10fc:	d8 2e       	mov	r13, r24
    10fe:	d8 18       	sub	r13, r8
    1100:	40 c0       	rjmp	.+128    	; 0x1182 <vfprintf+0x616>
    1102:	12 2f       	mov	r17, r18
    1104:	85 37       	cpi	r24, 0x75	; 117
    1106:	21 f4       	brne	.+8      	; 0x1110 <vfprintf+0x5a4>
    1108:	1f 7e       	andi	r17, 0xEF	; 239
    110a:	2a e0       	ldi	r18, 0x0A	; 10
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	1f c0       	rjmp	.+62     	; 0x114e <vfprintf+0x5e2>
    1110:	19 7f       	andi	r17, 0xF9	; 249
    1112:	8f 36       	cpi	r24, 0x6F	; 111
    1114:	a1 f0       	breq	.+40     	; 0x113e <vfprintf+0x5d2>
    1116:	20 f4       	brcc	.+8      	; 0x1120 <vfprintf+0x5b4>
    1118:	88 35       	cpi	r24, 0x58	; 88
    111a:	09 f0       	breq	.+2      	; 0x111e <vfprintf+0x5b2>
    111c:	b2 c0       	rjmp	.+356    	; 0x1282 <vfprintf+0x716>
    111e:	0b c0       	rjmp	.+22     	; 0x1136 <vfprintf+0x5ca>
    1120:	80 37       	cpi	r24, 0x70	; 112
    1122:	21 f0       	breq	.+8      	; 0x112c <vfprintf+0x5c0>
    1124:	88 37       	cpi	r24, 0x78	; 120
    1126:	09 f0       	breq	.+2      	; 0x112a <vfprintf+0x5be>
    1128:	ac c0       	rjmp	.+344    	; 0x1282 <vfprintf+0x716>
    112a:	01 c0       	rjmp	.+2      	; 0x112e <vfprintf+0x5c2>
    112c:	10 61       	ori	r17, 0x10	; 16
    112e:	14 ff       	sbrs	r17, 4
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <vfprintf+0x5d8>
    1132:	14 60       	ori	r17, 0x04	; 4
    1134:	07 c0       	rjmp	.+14     	; 0x1144 <vfprintf+0x5d8>
    1136:	24 ff       	sbrs	r18, 4
    1138:	08 c0       	rjmp	.+16     	; 0x114a <vfprintf+0x5de>
    113a:	16 60       	ori	r17, 0x06	; 6
    113c:	06 c0       	rjmp	.+12     	; 0x114a <vfprintf+0x5de>
    113e:	28 e0       	ldi	r18, 0x08	; 8
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	05 c0       	rjmp	.+10     	; 0x114e <vfprintf+0x5e2>
    1144:	20 e1       	ldi	r18, 0x10	; 16
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	02 c0       	rjmp	.+4      	; 0x114e <vfprintf+0x5e2>
    114a:	20 e1       	ldi	r18, 0x10	; 16
    114c:	32 e0       	ldi	r19, 0x02	; 2
    114e:	56 01       	movw	r10, r12
    1150:	17 ff       	sbrs	r17, 7
    1152:	09 c0       	rjmp	.+18     	; 0x1166 <vfprintf+0x5fa>
    1154:	f4 e0       	ldi	r31, 0x04	; 4
    1156:	af 0e       	add	r10, r31
    1158:	b1 1c       	adc	r11, r1
    115a:	f6 01       	movw	r30, r12
    115c:	60 81       	ld	r22, Z
    115e:	71 81       	ldd	r23, Z+1	; 0x01
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	08 c0       	rjmp	.+16     	; 0x1176 <vfprintf+0x60a>
    1166:	f2 e0       	ldi	r31, 0x02	; 2
    1168:	af 0e       	add	r10, r31
    116a:	b1 1c       	adc	r11, r1
    116c:	f6 01       	movw	r30, r12
    116e:	60 81       	ld	r22, Z
    1170:	71 81       	ldd	r23, Z+1	; 0x01
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a4 01       	movw	r20, r8
    1178:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__ultoa_invert>
    117c:	d8 2e       	mov	r13, r24
    117e:	d8 18       	sub	r13, r8
    1180:	1f 77       	andi	r17, 0x7F	; 127
    1182:	16 ff       	sbrs	r17, 6
    1184:	0b c0       	rjmp	.+22     	; 0x119c <vfprintf+0x630>
    1186:	21 2f       	mov	r18, r17
    1188:	2e 7f       	andi	r18, 0xFE	; 254
    118a:	d7 14       	cp	r13, r7
    118c:	50 f4       	brcc	.+20     	; 0x11a2 <vfprintf+0x636>
    118e:	14 ff       	sbrs	r17, 4
    1190:	0a c0       	rjmp	.+20     	; 0x11a6 <vfprintf+0x63a>
    1192:	12 fd       	sbrc	r17, 2
    1194:	08 c0       	rjmp	.+16     	; 0x11a6 <vfprintf+0x63a>
    1196:	21 2f       	mov	r18, r17
    1198:	2e 7e       	andi	r18, 0xEE	; 238
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <vfprintf+0x63a>
    119c:	0d 2d       	mov	r16, r13
    119e:	21 2f       	mov	r18, r17
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <vfprintf+0x63c>
    11a2:	0d 2d       	mov	r16, r13
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <vfprintf+0x63c>
    11a6:	07 2d       	mov	r16, r7
    11a8:	24 ff       	sbrs	r18, 4
    11aa:	0c c0       	rjmp	.+24     	; 0x11c4 <vfprintf+0x658>
    11ac:	fe 01       	movw	r30, r28
    11ae:	ed 0d       	add	r30, r13
    11b0:	f1 1d       	adc	r31, r1
    11b2:	80 81       	ld	r24, Z
    11b4:	80 33       	cpi	r24, 0x30	; 48
    11b6:	11 f4       	brne	.+4      	; 0x11bc <vfprintf+0x650>
    11b8:	29 7e       	andi	r18, 0xE9	; 233
    11ba:	08 c0       	rjmp	.+16     	; 0x11cc <vfprintf+0x660>
    11bc:	22 ff       	sbrs	r18, 2
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <vfprintf+0x65e>
    11c0:	0e 5f       	subi	r16, 0xFE	; 254
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <vfprintf+0x660>
    11c4:	82 2f       	mov	r24, r18
    11c6:	86 78       	andi	r24, 0x86	; 134
    11c8:	09 f0       	breq	.+2      	; 0x11cc <vfprintf+0x660>
    11ca:	0f 5f       	subi	r16, 0xFF	; 255
    11cc:	23 fd       	sbrc	r18, 3
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <vfprintf+0x68c>
    11d0:	20 ff       	sbrs	r18, 0
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <vfprintf+0x686>
    11d4:	7d 2c       	mov	r7, r13
    11d6:	06 15       	cp	r16, r6
    11d8:	60 f4       	brcc	.+24     	; 0x11f2 <vfprintf+0x686>
    11da:	76 0c       	add	r7, r6
    11dc:	70 1a       	sub	r7, r16
    11de:	06 2d       	mov	r16, r6
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <vfprintf+0x686>
    11e2:	b7 01       	movw	r22, r14
    11e4:	80 e2       	ldi	r24, 0x20	; 32
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	2a 8b       	std	Y+18, r18	; 0x12
    11ea:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    11ee:	0f 5f       	subi	r16, 0xFF	; 255
    11f0:	2a 89       	ldd	r18, Y+18	; 0x12
    11f2:	06 15       	cp	r16, r6
    11f4:	b0 f3       	brcs	.-20     	; 0x11e2 <vfprintf+0x676>
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <vfprintf+0x694>
    11f8:	06 15       	cp	r16, r6
    11fa:	10 f4       	brcc	.+4      	; 0x1200 <vfprintf+0x694>
    11fc:	60 1a       	sub	r6, r16
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <vfprintf+0x696>
    1200:	61 2c       	mov	r6, r1
    1202:	24 ff       	sbrs	r18, 4
    1204:	12 c0       	rjmp	.+36     	; 0x122a <vfprintf+0x6be>
    1206:	b7 01       	movw	r22, r14
    1208:	80 e3       	ldi	r24, 0x30	; 48
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	2a 8b       	std	Y+18, r18	; 0x12
    120e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1212:	2a 89       	ldd	r18, Y+18	; 0x12
    1214:	22 ff       	sbrs	r18, 2
    1216:	1e c0       	rjmp	.+60     	; 0x1254 <vfprintf+0x6e8>
    1218:	21 ff       	sbrs	r18, 1
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <vfprintf+0x6b6>
    121c:	88 e5       	ldi	r24, 0x58	; 88
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <vfprintf+0x6ba>
    1222:	88 e7       	ldi	r24, 0x78	; 120
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	b7 01       	movw	r22, r14
    1228:	0c c0       	rjmp	.+24     	; 0x1242 <vfprintf+0x6d6>
    122a:	82 2f       	mov	r24, r18
    122c:	86 78       	andi	r24, 0x86	; 134
    122e:	91 f0       	breq	.+36     	; 0x1254 <vfprintf+0x6e8>
    1230:	21 fd       	sbrc	r18, 1
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <vfprintf+0x6cc>
    1234:	80 e2       	ldi	r24, 0x20	; 32
    1236:	01 c0       	rjmp	.+2      	; 0x123a <vfprintf+0x6ce>
    1238:	8b e2       	ldi	r24, 0x2B	; 43
    123a:	27 fd       	sbrc	r18, 7
    123c:	8d e2       	ldi	r24, 0x2D	; 45
    123e:	b7 01       	movw	r22, r14
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <vfprintf+0x6e8>
    1248:	b7 01       	movw	r22, r14
    124a:	80 e3       	ldi	r24, 0x30	; 48
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1252:	7a 94       	dec	r7
    1254:	d7 14       	cp	r13, r7
    1256:	c0 f3       	brcs	.-16     	; 0x1248 <vfprintf+0x6dc>
    1258:	da 94       	dec	r13
    125a:	f4 01       	movw	r30, r8
    125c:	ed 0d       	add	r30, r13
    125e:	f1 1d       	adc	r31, r1
    1260:	b7 01       	movw	r22, r14
    1262:	80 81       	ld	r24, Z
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    126a:	d1 10       	cpse	r13, r1
    126c:	f5 cf       	rjmp	.-22     	; 0x1258 <vfprintf+0x6ec>
    126e:	06 c0       	rjmp	.+12     	; 0x127c <vfprintf+0x710>
    1270:	b7 01       	movw	r22, r14
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    127a:	6a 94       	dec	r6
    127c:	61 10       	cpse	r6, r1
    127e:	f8 cf       	rjmp	.-16     	; 0x1270 <vfprintf+0x704>
    1280:	99 cc       	rjmp	.-1742   	; 0xbb4 <vfprintf+0x48>
    1282:	f7 01       	movw	r30, r14
    1284:	26 81       	ldd	r18, Z+6	; 0x06
    1286:	37 81       	ldd	r19, Z+7	; 0x07
    1288:	02 c0       	rjmp	.+4      	; 0x128e <vfprintf+0x722>
    128a:	2f ef       	ldi	r18, 0xFF	; 255
    128c:	3f ef       	ldi	r19, 0xFF	; 255
    128e:	c9 01       	movw	r24, r18
    1290:	62 96       	adiw	r28, 0x12	; 18
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	bf 90       	pop	r11
    12ae:	af 90       	pop	r10
    12b0:	9f 90       	pop	r9
    12b2:	8f 90       	pop	r8
    12b4:	7f 90       	pop	r7
    12b6:	6f 90       	pop	r6
    12b8:	5f 90       	pop	r5
    12ba:	4f 90       	pop	r4
    12bc:	3f 90       	pop	r3
    12be:	2f 90       	pop	r2
    12c0:	08 95       	ret

000012c2 <__udivmodhi4>:
    12c2:	aa 1b       	sub	r26, r26
    12c4:	bb 1b       	sub	r27, r27
    12c6:	51 e1       	ldi	r21, 0x11	; 17
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <__udivmodhi4_ep>

000012ca <__udivmodhi4_loop>:
    12ca:	aa 1f       	adc	r26, r26
    12cc:	bb 1f       	adc	r27, r27
    12ce:	a6 17       	cp	r26, r22
    12d0:	b7 07       	cpc	r27, r23
    12d2:	10 f0       	brcs	.+4      	; 0x12d8 <__udivmodhi4_ep>
    12d4:	a6 1b       	sub	r26, r22
    12d6:	b7 0b       	sbc	r27, r23

000012d8 <__udivmodhi4_ep>:
    12d8:	88 1f       	adc	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	5a 95       	dec	r21
    12de:	a9 f7       	brne	.-22     	; 0x12ca <__udivmodhi4_loop>
    12e0:	80 95       	com	r24
    12e2:	90 95       	com	r25
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	08 95       	ret

000012ea <__divmodhi4>:
    12ea:	97 fb       	bst	r25, 7
    12ec:	07 2e       	mov	r0, r23
    12ee:	16 f4       	brtc	.+4      	; 0x12f4 <__divmodhi4+0xa>
    12f0:	00 94       	com	r0
    12f2:	07 d0       	rcall	.+14     	; 0x1302 <__divmodhi4_neg1>
    12f4:	77 fd       	sbrc	r23, 7
    12f6:	09 d0       	rcall	.+18     	; 0x130a <__divmodhi4_neg2>
    12f8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__udivmodhi4>
    12fc:	07 fc       	sbrc	r0, 7
    12fe:	05 d0       	rcall	.+10     	; 0x130a <__divmodhi4_neg2>
    1300:	3e f4       	brtc	.+14     	; 0x1310 <__divmodhi4_exit>

00001302 <__divmodhi4_neg1>:
    1302:	90 95       	com	r25
    1304:	81 95       	neg	r24
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	08 95       	ret

0000130a <__divmodhi4_neg2>:
    130a:	70 95       	com	r23
    130c:	61 95       	neg	r22
    130e:	7f 4f       	sbci	r23, 0xFF	; 255

00001310 <__divmodhi4_exit>:
    1310:	08 95       	ret

00001312 <__ftoa_engine>:
    1312:	28 30       	cpi	r18, 0x08	; 8
    1314:	08 f0       	brcs	.+2      	; 0x1318 <__ftoa_engine+0x6>
    1316:	27 e0       	ldi	r18, 0x07	; 7
    1318:	33 27       	eor	r19, r19
    131a:	da 01       	movw	r26, r20
    131c:	99 0f       	add	r25, r25
    131e:	31 1d       	adc	r19, r1
    1320:	87 fd       	sbrc	r24, 7
    1322:	91 60       	ori	r25, 0x01	; 1
    1324:	00 96       	adiw	r24, 0x00	; 0
    1326:	61 05       	cpc	r22, r1
    1328:	71 05       	cpc	r23, r1
    132a:	39 f4       	brne	.+14     	; 0x133a <__ftoa_engine+0x28>
    132c:	32 60       	ori	r19, 0x02	; 2
    132e:	2e 5f       	subi	r18, 0xFE	; 254
    1330:	3d 93       	st	X+, r19
    1332:	30 e3       	ldi	r19, 0x30	; 48
    1334:	2a 95       	dec	r18
    1336:	e1 f7       	brne	.-8      	; 0x1330 <__ftoa_engine+0x1e>
    1338:	08 95       	ret
    133a:	9f 3f       	cpi	r25, 0xFF	; 255
    133c:	30 f0       	brcs	.+12     	; 0x134a <__ftoa_engine+0x38>
    133e:	80 38       	cpi	r24, 0x80	; 128
    1340:	71 05       	cpc	r23, r1
    1342:	61 05       	cpc	r22, r1
    1344:	09 f0       	breq	.+2      	; 0x1348 <__ftoa_engine+0x36>
    1346:	3c 5f       	subi	r19, 0xFC	; 252
    1348:	3c 5f       	subi	r19, 0xFC	; 252
    134a:	3d 93       	st	X+, r19
    134c:	91 30       	cpi	r25, 0x01	; 1
    134e:	08 f0       	brcs	.+2      	; 0x1352 <__ftoa_engine+0x40>
    1350:	80 68       	ori	r24, 0x80	; 128
    1352:	91 1d       	adc	r25, r1
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	1f 93       	push	r17
    135a:	0f 93       	push	r16
    135c:	ff 92       	push	r15
    135e:	ef 92       	push	r14
    1360:	19 2f       	mov	r17, r25
    1362:	98 7f       	andi	r25, 0xF8	; 248
    1364:	96 95       	lsr	r25
    1366:	e9 2f       	mov	r30, r25
    1368:	96 95       	lsr	r25
    136a:	96 95       	lsr	r25
    136c:	e9 0f       	add	r30, r25
    136e:	ff 27       	eor	r31, r31
    1370:	e3 5b       	subi	r30, 0xB3	; 179
    1372:	fe 4f       	sbci	r31, 0xFE	; 254
    1374:	99 27       	eor	r25, r25
    1376:	33 27       	eor	r19, r19
    1378:	ee 24       	eor	r14, r14
    137a:	ff 24       	eor	r15, r15
    137c:	a7 01       	movw	r20, r14
    137e:	e7 01       	movw	r28, r14
    1380:	05 90       	lpm	r0, Z+
    1382:	08 94       	sec
    1384:	07 94       	ror	r0
    1386:	28 f4       	brcc	.+10     	; 0x1392 <__ftoa_engine+0x80>
    1388:	36 0f       	add	r19, r22
    138a:	e7 1e       	adc	r14, r23
    138c:	f8 1e       	adc	r15, r24
    138e:	49 1f       	adc	r20, r25
    1390:	51 1d       	adc	r21, r1
    1392:	66 0f       	add	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	88 1f       	adc	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	06 94       	lsr	r0
    139c:	a1 f7       	brne	.-24     	; 0x1386 <__ftoa_engine+0x74>
    139e:	05 90       	lpm	r0, Z+
    13a0:	07 94       	ror	r0
    13a2:	28 f4       	brcc	.+10     	; 0x13ae <__ftoa_engine+0x9c>
    13a4:	e7 0e       	add	r14, r23
    13a6:	f8 1e       	adc	r15, r24
    13a8:	49 1f       	adc	r20, r25
    13aa:	56 1f       	adc	r21, r22
    13ac:	c1 1d       	adc	r28, r1
    13ae:	77 0f       	add	r23, r23
    13b0:	88 1f       	adc	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	66 1f       	adc	r22, r22
    13b6:	06 94       	lsr	r0
    13b8:	a1 f7       	brne	.-24     	; 0x13a2 <__ftoa_engine+0x90>
    13ba:	05 90       	lpm	r0, Z+
    13bc:	07 94       	ror	r0
    13be:	28 f4       	brcc	.+10     	; 0x13ca <__ftoa_engine+0xb8>
    13c0:	f8 0e       	add	r15, r24
    13c2:	49 1f       	adc	r20, r25
    13c4:	56 1f       	adc	r21, r22
    13c6:	c7 1f       	adc	r28, r23
    13c8:	d1 1d       	adc	r29, r1
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	66 1f       	adc	r22, r22
    13d0:	77 1f       	adc	r23, r23
    13d2:	06 94       	lsr	r0
    13d4:	a1 f7       	brne	.-24     	; 0x13be <__ftoa_engine+0xac>
    13d6:	05 90       	lpm	r0, Z+
    13d8:	07 94       	ror	r0
    13da:	20 f4       	brcc	.+8      	; 0x13e4 <__ftoa_engine+0xd2>
    13dc:	49 0f       	add	r20, r25
    13de:	56 1f       	adc	r21, r22
    13e0:	c7 1f       	adc	r28, r23
    13e2:	d8 1f       	adc	r29, r24
    13e4:	99 0f       	add	r25, r25
    13e6:	66 1f       	adc	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	06 94       	lsr	r0
    13ee:	a9 f7       	brne	.-22     	; 0x13da <__ftoa_engine+0xc8>
    13f0:	84 91       	lpm	r24, Z
    13f2:	10 95       	com	r17
    13f4:	17 70       	andi	r17, 0x07	; 7
    13f6:	41 f0       	breq	.+16     	; 0x1408 <__ftoa_engine+0xf6>
    13f8:	d6 95       	lsr	r29
    13fa:	c7 95       	ror	r28
    13fc:	57 95       	ror	r21
    13fe:	47 95       	ror	r20
    1400:	f7 94       	ror	r15
    1402:	e7 94       	ror	r14
    1404:	1a 95       	dec	r17
    1406:	c1 f7       	brne	.-16     	; 0x13f8 <__ftoa_engine+0xe6>
    1408:	e3 ef       	ldi	r30, 0xF3	; 243
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	68 94       	set
    140e:	15 90       	lpm	r1, Z+
    1410:	15 91       	lpm	r17, Z+
    1412:	35 91       	lpm	r19, Z+
    1414:	65 91       	lpm	r22, Z+
    1416:	95 91       	lpm	r25, Z+
    1418:	05 90       	lpm	r0, Z+
    141a:	7f e2       	ldi	r23, 0x2F	; 47
    141c:	73 95       	inc	r23
    141e:	e1 18       	sub	r14, r1
    1420:	f1 0a       	sbc	r15, r17
    1422:	43 0b       	sbc	r20, r19
    1424:	56 0b       	sbc	r21, r22
    1426:	c9 0b       	sbc	r28, r25
    1428:	d0 09       	sbc	r29, r0
    142a:	c0 f7       	brcc	.-16     	; 0x141c <__ftoa_engine+0x10a>
    142c:	e1 0c       	add	r14, r1
    142e:	f1 1e       	adc	r15, r17
    1430:	43 1f       	adc	r20, r19
    1432:	56 1f       	adc	r21, r22
    1434:	c9 1f       	adc	r28, r25
    1436:	d0 1d       	adc	r29, r0
    1438:	7e f4       	brtc	.+30     	; 0x1458 <__ftoa_engine+0x146>
    143a:	70 33       	cpi	r23, 0x30	; 48
    143c:	11 f4       	brne	.+4      	; 0x1442 <__ftoa_engine+0x130>
    143e:	8a 95       	dec	r24
    1440:	e6 cf       	rjmp	.-52     	; 0x140e <__ftoa_engine+0xfc>
    1442:	e8 94       	clt
    1444:	01 50       	subi	r16, 0x01	; 1
    1446:	30 f0       	brcs	.+12     	; 0x1454 <__ftoa_engine+0x142>
    1448:	08 0f       	add	r16, r24
    144a:	0a f4       	brpl	.+2      	; 0x144e <__ftoa_engine+0x13c>
    144c:	00 27       	eor	r16, r16
    144e:	02 17       	cp	r16, r18
    1450:	08 f4       	brcc	.+2      	; 0x1454 <__ftoa_engine+0x142>
    1452:	20 2f       	mov	r18, r16
    1454:	23 95       	inc	r18
    1456:	02 2f       	mov	r16, r18
    1458:	7a 33       	cpi	r23, 0x3A	; 58
    145a:	28 f0       	brcs	.+10     	; 0x1466 <__ftoa_engine+0x154>
    145c:	79 e3       	ldi	r23, 0x39	; 57
    145e:	7d 93       	st	X+, r23
    1460:	2a 95       	dec	r18
    1462:	e9 f7       	brne	.-6      	; 0x145e <__ftoa_engine+0x14c>
    1464:	10 c0       	rjmp	.+32     	; 0x1486 <__ftoa_engine+0x174>
    1466:	7d 93       	st	X+, r23
    1468:	2a 95       	dec	r18
    146a:	89 f6       	brne	.-94     	; 0x140e <__ftoa_engine+0xfc>
    146c:	06 94       	lsr	r0
    146e:	97 95       	ror	r25
    1470:	67 95       	ror	r22
    1472:	37 95       	ror	r19
    1474:	17 95       	ror	r17
    1476:	17 94       	ror	r1
    1478:	e1 18       	sub	r14, r1
    147a:	f1 0a       	sbc	r15, r17
    147c:	43 0b       	sbc	r20, r19
    147e:	56 0b       	sbc	r21, r22
    1480:	c9 0b       	sbc	r28, r25
    1482:	d0 09       	sbc	r29, r0
    1484:	98 f0       	brcs	.+38     	; 0x14ac <__ftoa_engine+0x19a>
    1486:	23 95       	inc	r18
    1488:	7e 91       	ld	r23, -X
    148a:	73 95       	inc	r23
    148c:	7a 33       	cpi	r23, 0x3A	; 58
    148e:	08 f0       	brcs	.+2      	; 0x1492 <__ftoa_engine+0x180>
    1490:	70 e3       	ldi	r23, 0x30	; 48
    1492:	7c 93       	st	X, r23
    1494:	20 13       	cpse	r18, r16
    1496:	b8 f7       	brcc	.-18     	; 0x1486 <__ftoa_engine+0x174>
    1498:	7e 91       	ld	r23, -X
    149a:	70 61       	ori	r23, 0x10	; 16
    149c:	7d 93       	st	X+, r23
    149e:	30 f0       	brcs	.+12     	; 0x14ac <__ftoa_engine+0x19a>
    14a0:	83 95       	inc	r24
    14a2:	71 e3       	ldi	r23, 0x31	; 49
    14a4:	7d 93       	st	X+, r23
    14a6:	70 e3       	ldi	r23, 0x30	; 48
    14a8:	2a 95       	dec	r18
    14aa:	e1 f7       	brne	.-8      	; 0x14a4 <__ftoa_engine+0x192>
    14ac:	11 24       	eor	r1, r1
    14ae:	ef 90       	pop	r14
    14b0:	ff 90       	pop	r15
    14b2:	0f 91       	pop	r16
    14b4:	1f 91       	pop	r17
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	99 27       	eor	r25, r25
    14bc:	87 fd       	sbrc	r24, 7
    14be:	90 95       	com	r25
    14c0:	08 95       	ret

000014c2 <strnlen_P>:
    14c2:	fc 01       	movw	r30, r24
    14c4:	05 90       	lpm	r0, Z+
    14c6:	61 50       	subi	r22, 0x01	; 1
    14c8:	70 40       	sbci	r23, 0x00	; 0
    14ca:	01 10       	cpse	r0, r1
    14cc:	d8 f7       	brcc	.-10     	; 0x14c4 <strnlen_P+0x2>
    14ce:	80 95       	com	r24
    14d0:	90 95       	com	r25
    14d2:	8e 0f       	add	r24, r30
    14d4:	9f 1f       	adc	r25, r31
    14d6:	08 95       	ret

000014d8 <strnlen>:
    14d8:	fc 01       	movw	r30, r24
    14da:	61 50       	subi	r22, 0x01	; 1
    14dc:	70 40       	sbci	r23, 0x00	; 0
    14de:	01 90       	ld	r0, Z+
    14e0:	01 10       	cpse	r0, r1
    14e2:	d8 f7       	brcc	.-10     	; 0x14da <strnlen+0x2>
    14e4:	80 95       	com	r24
    14e6:	90 95       	com	r25
    14e8:	8e 0f       	add	r24, r30
    14ea:	9f 1f       	adc	r25, r31
    14ec:	08 95       	ret

000014ee <fputc>:
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	8c 01       	movw	r16, r24
    14f8:	eb 01       	movw	r28, r22
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	81 fd       	sbrc	r24, 1
    14fe:	03 c0       	rjmp	.+6      	; 0x1506 <fputc+0x18>
    1500:	0f ef       	ldi	r16, 0xFF	; 255
    1502:	1f ef       	ldi	r17, 0xFF	; 255
    1504:	1a c0       	rjmp	.+52     	; 0x153a <fputc+0x4c>
    1506:	82 ff       	sbrs	r24, 2
    1508:	0d c0       	rjmp	.+26     	; 0x1524 <fputc+0x36>
    150a:	2e 81       	ldd	r18, Y+6	; 0x06
    150c:	3f 81       	ldd	r19, Y+7	; 0x07
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	28 17       	cp	r18, r24
    1514:	39 07       	cpc	r19, r25
    1516:	64 f4       	brge	.+24     	; 0x1530 <fputc+0x42>
    1518:	e8 81       	ld	r30, Y
    151a:	f9 81       	ldd	r31, Y+1	; 0x01
    151c:	01 93       	st	Z+, r16
    151e:	f9 83       	std	Y+1, r31	; 0x01
    1520:	e8 83       	st	Y, r30
    1522:	06 c0       	rjmp	.+12     	; 0x1530 <fputc+0x42>
    1524:	e8 85       	ldd	r30, Y+8	; 0x08
    1526:	f9 85       	ldd	r31, Y+9	; 0x09
    1528:	80 2f       	mov	r24, r16
    152a:	09 95       	icall
    152c:	89 2b       	or	r24, r25
    152e:	41 f7       	brne	.-48     	; 0x1500 <fputc+0x12>
    1530:	8e 81       	ldd	r24, Y+6	; 0x06
    1532:	9f 81       	ldd	r25, Y+7	; 0x07
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	9f 83       	std	Y+7, r25	; 0x07
    1538:	8e 83       	std	Y+6, r24	; 0x06
    153a:	c8 01       	movw	r24, r16
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	08 95       	ret

00001546 <sprintf>:
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	2e 97       	sbiw	r28, 0x0e	; 14
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	0d 89       	ldd	r16, Y+21	; 0x15
    1560:	1e 89       	ldd	r17, Y+22	; 0x16
    1562:	86 e0       	ldi	r24, 0x06	; 6
    1564:	8c 83       	std	Y+4, r24	; 0x04
    1566:	1a 83       	std	Y+2, r17	; 0x02
    1568:	09 83       	std	Y+1, r16	; 0x01
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	9f e7       	ldi	r25, 0x7F	; 127
    156e:	9e 83       	std	Y+6, r25	; 0x06
    1570:	8d 83       	std	Y+5, r24	; 0x05
    1572:	ce 01       	movw	r24, r28
    1574:	49 96       	adiw	r24, 0x19	; 25
    1576:	ac 01       	movw	r20, r24
    1578:	6f 89       	ldd	r22, Y+23	; 0x17
    157a:	78 8d       	ldd	r23, Y+24	; 0x18
    157c:	ce 01       	movw	r24, r28
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	0e 94 b6 05 	call	0xb6c	; 0xb6c <vfprintf>
    1584:	ef 81       	ldd	r30, Y+7	; 0x07
    1586:	f8 85       	ldd	r31, Y+8	; 0x08
    1588:	e0 0f       	add	r30, r16
    158a:	f1 1f       	adc	r31, r17
    158c:	10 82       	st	Z, r1
    158e:	2e 96       	adiw	r28, 0x0e	; 14
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	08 95       	ret

000015a4 <__ultoa_invert>:
    15a4:	fa 01       	movw	r30, r20
    15a6:	aa 27       	eor	r26, r26
    15a8:	28 30       	cpi	r18, 0x08	; 8
    15aa:	51 f1       	breq	.+84     	; 0x1600 <__ultoa_invert+0x5c>
    15ac:	20 31       	cpi	r18, 0x10	; 16
    15ae:	81 f1       	breq	.+96     	; 0x1610 <__ultoa_invert+0x6c>
    15b0:	e8 94       	clt
    15b2:	6f 93       	push	r22
    15b4:	6e 7f       	andi	r22, 0xFE	; 254
    15b6:	6e 5f       	subi	r22, 0xFE	; 254
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	8f 4f       	sbci	r24, 0xFF	; 255
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	af 4f       	sbci	r26, 0xFF	; 255
    15c0:	b1 e0       	ldi	r27, 0x01	; 1
    15c2:	3e d0       	rcall	.+124    	; 0x1640 <__ultoa_invert+0x9c>
    15c4:	b4 e0       	ldi	r27, 0x04	; 4
    15c6:	3c d0       	rcall	.+120    	; 0x1640 <__ultoa_invert+0x9c>
    15c8:	67 0f       	add	r22, r23
    15ca:	78 1f       	adc	r23, r24
    15cc:	89 1f       	adc	r24, r25
    15ce:	9a 1f       	adc	r25, r26
    15d0:	a1 1d       	adc	r26, r1
    15d2:	68 0f       	add	r22, r24
    15d4:	79 1f       	adc	r23, r25
    15d6:	8a 1f       	adc	r24, r26
    15d8:	91 1d       	adc	r25, r1
    15da:	a1 1d       	adc	r26, r1
    15dc:	6a 0f       	add	r22, r26
    15de:	71 1d       	adc	r23, r1
    15e0:	81 1d       	adc	r24, r1
    15e2:	91 1d       	adc	r25, r1
    15e4:	a1 1d       	adc	r26, r1
    15e6:	20 d0       	rcall	.+64     	; 0x1628 <__ultoa_invert+0x84>
    15e8:	09 f4       	brne	.+2      	; 0x15ec <__ultoa_invert+0x48>
    15ea:	68 94       	set
    15ec:	3f 91       	pop	r19
    15ee:	2a e0       	ldi	r18, 0x0A	; 10
    15f0:	26 9f       	mul	r18, r22
    15f2:	11 24       	eor	r1, r1
    15f4:	30 19       	sub	r19, r0
    15f6:	30 5d       	subi	r19, 0xD0	; 208
    15f8:	31 93       	st	Z+, r19
    15fa:	de f6       	brtc	.-74     	; 0x15b2 <__ultoa_invert+0xe>
    15fc:	cf 01       	movw	r24, r30
    15fe:	08 95       	ret
    1600:	46 2f       	mov	r20, r22
    1602:	47 70       	andi	r20, 0x07	; 7
    1604:	40 5d       	subi	r20, 0xD0	; 208
    1606:	41 93       	st	Z+, r20
    1608:	b3 e0       	ldi	r27, 0x03	; 3
    160a:	0f d0       	rcall	.+30     	; 0x162a <__ultoa_invert+0x86>
    160c:	c9 f7       	brne	.-14     	; 0x1600 <__ultoa_invert+0x5c>
    160e:	f6 cf       	rjmp	.-20     	; 0x15fc <__ultoa_invert+0x58>
    1610:	46 2f       	mov	r20, r22
    1612:	4f 70       	andi	r20, 0x0F	; 15
    1614:	40 5d       	subi	r20, 0xD0	; 208
    1616:	4a 33       	cpi	r20, 0x3A	; 58
    1618:	18 f0       	brcs	.+6      	; 0x1620 <__ultoa_invert+0x7c>
    161a:	49 5d       	subi	r20, 0xD9	; 217
    161c:	31 fd       	sbrc	r19, 1
    161e:	40 52       	subi	r20, 0x20	; 32
    1620:	41 93       	st	Z+, r20
    1622:	02 d0       	rcall	.+4      	; 0x1628 <__ultoa_invert+0x84>
    1624:	a9 f7       	brne	.-22     	; 0x1610 <__ultoa_invert+0x6c>
    1626:	ea cf       	rjmp	.-44     	; 0x15fc <__ultoa_invert+0x58>
    1628:	b4 e0       	ldi	r27, 0x04	; 4
    162a:	a6 95       	lsr	r26
    162c:	97 95       	ror	r25
    162e:	87 95       	ror	r24
    1630:	77 95       	ror	r23
    1632:	67 95       	ror	r22
    1634:	ba 95       	dec	r27
    1636:	c9 f7       	brne	.-14     	; 0x162a <__ultoa_invert+0x86>
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	61 05       	cpc	r22, r1
    163c:	71 05       	cpc	r23, r1
    163e:	08 95       	ret
    1640:	9b 01       	movw	r18, r22
    1642:	ac 01       	movw	r20, r24
    1644:	0a 2e       	mov	r0, r26
    1646:	06 94       	lsr	r0
    1648:	57 95       	ror	r21
    164a:	47 95       	ror	r20
    164c:	37 95       	ror	r19
    164e:	27 95       	ror	r18
    1650:	ba 95       	dec	r27
    1652:	c9 f7       	brne	.-14     	; 0x1646 <__ultoa_invert+0xa2>
    1654:	62 0f       	add	r22, r18
    1656:	73 1f       	adc	r23, r19
    1658:	84 1f       	adc	r24, r20
    165a:	95 1f       	adc	r25, r21
    165c:	a0 1d       	adc	r26, r0
    165e:	08 95       	ret

00001660 <_exit>:
    1660:	f8 94       	cli

00001662 <__stop_program>:
    1662:	ff cf       	rjmp	.-2      	; 0x1662 <__stop_program>
