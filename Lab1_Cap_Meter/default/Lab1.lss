
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000160e  000016a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000160e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800112  00800112  000016b4  2**0
                  ALLOC
  3 .stab         00002490  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000775  00000000  00000000  00003b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000042b9  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  000042e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b28  00000000  00000000  00004390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000815  00000000  00000000  00005eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bb2  00000000  00000000  000066cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000434  00000000  00000000  00007280  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005b9  00000000  00000000  000076b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000013fa  00000000  00000000  00007c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00009067  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_12>
      34:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_13>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_16>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

0000008c <LCD_number>:
      8c:	43 61 70 61 63 69 74 61 6e 63 65 3d 00 00           Capacitance=..

0000009a <LCD_initialize>:
      9a:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000ab <LcdCustomChar>:
      ab:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      bb:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      cb:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      db:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000eb <__c.2006>:
      eb:	6e 61 6e 00                                         nan.

000000ef <__c.2004>:
      ef:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ff:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10f:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1af:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1bf:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1cf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1df:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e4       	ldi	r29, 0x40	; 64
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	ee e0       	ldi	r30, 0x0E	; 14
     202:	f6 e1       	ldi	r31, 0x16	; 22
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	a2 31       	cpi	r26, 0x12	; 18
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	a2 e1       	ldi	r26, 0x12	; 18
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a5 33       	cpi	r26, 0x35	; 53
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 06 04 	call	0x80c	; 0x80c <main>
     228:	0c 94 05 0b 	jmp	0x160a	; 0x160a <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <init_cap_measurement_analog_timer>:

//configures Analog Comparator and Timer1
//set it to full speed 
//clear TCNT1
void init_cap_measurement_analog_timer(){
	TCCR1A = 0;
     230:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
     234:	e1 e8       	ldi	r30, 0x81	; 129
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	10 82       	st	Z, r1
	//full speed [ 16 MHz], capture on positive edge
	TCCR1B |= INPUT_CAPTURE_EDGE_SELECT + T0B_CS00;
     23a:	80 81       	ld	r24, Z
     23c:	81 64       	ori	r24, 0x41	; 65
     23e:	80 83       	st	Z, r24
	//turn on timer 1 interrupt-on-capture
	TIMSK1 = 0;
     240:	ef e6       	ldi	r30, 0x6F	; 111
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	10 82       	st	Z, r1
	TIMSK1 |= INTERRUPT_ON_CAPTURE ;
     246:	80 81       	ld	r24, Z
     248:	80 62       	ori	r24, 0x20	; 32
     24a:	80 83       	st	Z, r24

	//set analog comp to connect to timer capture input
	//with positive input reference voltage
	ACSR = 0;
     24c:	10 be       	out	0x30, r1	; 48
	ACSR |= ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     24e:	80 b7       	in	r24, 0x30	; 48
     250:	84 60       	ori	r24, 0x04	; 4
     252:	80 bf       	out	0x30, r24	; 48
	ACSR &= ~ANALOG_COMPARATOR_BANDGAP_SELECT;
     254:	80 b7       	in	r24, 0x30	; 48
     256:	8f 7b       	andi	r24, 0xBF	; 191
     258:	80 bf       	out	0x30, r24	; 48
	//set all ports to input
	DDRB = 0;
     25a:	14 b8       	out	0x04, r1	; 4
	DDRB &= ~(COMPARATOR_INPUT + COMPARATOR_REFERENCE);
     25c:	84 b1       	in	r24, 0x04	; 4
     25e:	83 7f       	andi	r24, 0xF3	; 243
     260:	84 b9       	out	0x04, r24	; 4
     262:	08 95       	ret

00000264 <init_cap_discharge_wait_timer>:

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     264:	22 e0       	ldi	r18, 0x02	; 2
     266:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     26a:	8a e5       	ldi	r24, 0x5A	; 90
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 89 00 	sts	0x0089, r25
     272:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     276:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     27a:	e0 e8       	ldi	r30, 0x80	; 128
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	10 82       	st	Z, r1
	TCCR1A |= CLEAR_ON_MATCH;
     280:	80 81       	ld	r24, Z
     282:	82 60       	ori	r24, 0x02	; 2
     284:	80 83       	st	Z, r24
     286:	08 95       	ret

00000288 <init_cap_measurements>:
	Convert PortB2 to an input and start a timer. The capacitor will start to charge toward Vcc.
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
	DDRB = 0;
     288:	14 b8       	out	0x04, r1	; 4
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     28a:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     28c:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     28e:	2a 98       	cbi	0x05, 2	; 5
	//use Timer1.A to perform this delay and signal when we can continue measurements
	init_cap_discharge_wait_timer();
     290:	0c 94 32 01 	jmp	0x264	; 0x264 <init_cap_discharge_wait_timer>

00000294 <__vector_16>:
}

//1 ms timebase register
//Blinks LED 1/second
//refreshes LCD 1/200 ms
ISR (TIMER0_COMPA_vect){
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
	if( led_time_count > 0)
     2a2:	80 91 2f 01 	lds	r24, 0x012F
     2a6:	90 91 30 01 	lds	r25, 0x0130
     2aa:	89 2b       	or	r24, r25
     2ac:	49 f0       	breq	.+18     	; 0x2c0 <__vector_16+0x2c>
		--led_time_count;
     2ae:	80 91 2f 01 	lds	r24, 0x012F
     2b2:	90 91 30 01 	lds	r25, 0x0130
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	90 93 30 01 	sts	0x0130, r25
     2bc:	80 93 2f 01 	sts	0x012F, r24
	if( lcd_time_count > 0)
     2c0:	80 91 12 01 	lds	r24, 0x0112
     2c4:	90 91 13 01 	lds	r25, 0x0113
     2c8:	89 2b       	or	r24, r25
     2ca:	49 f0       	breq	.+18     	; 0x2de <__vector_16+0x4a>
		--lcd_time_count;
     2cc:	80 91 12 01 	lds	r24, 0x0112
     2d0:	90 91 13 01 	lds	r25, 0x0113
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	90 93 13 01 	sts	0x0113, r25
     2da:	80 93 12 01 	sts	0x0112, r24

}
     2de:	9f 91       	pop	r25
     2e0:	8f 91       	pop	r24
     2e2:	0f 90       	pop	r0
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	0f 90       	pop	r0
     2e8:	1f 90       	pop	r1
     2ea:	18 95       	reti

000002ec <__vector_13>:
//Once this triggers even once, we know that we have waited long enough for a cap discharge
ISR (TIMER1_COMPA_vect){
     2ec:	1f 92       	push	r1
     2ee:	0f 92       	push	r0
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	0f 92       	push	r0
     2f4:	11 24       	eor	r1, r1
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
	cap_discharged = TRUE;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 29 01 	sts	0x0129, r25
     302:	80 93 28 01 	sts	0x0128, r24
}
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	0f 90       	pop	r0
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	0f 90       	pop	r0
     310:	1f 90       	pop	r1
     312:	18 95       	reti

00000314 <__vector_12>:
			  t
	C = ------------
		R2 * ln(0.5)

*/
ISR (TIMER1_CAPT_vect){
     314:	1f 92       	push	r1
     316:	0f 92       	push	r0
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	0f 92       	push	r0
     31c:	11 24       	eor	r1, r1
     31e:	0b b6       	in	r0, 0x3b	; 59
     320:	0f 92       	push	r0
     322:	8f 93       	push	r24
     324:	9f 93       	push	r25
     326:	ef 93       	push	r30
     328:	ff 93       	push	r31
	// read timer1 input capture register
    //ICR1 = 65000;
	charge_cycles = ICR1;
     32a:	e6 e8       	ldi	r30, 0x86	; 134
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	91 81       	ldd	r25, Z+1	; 0x01
     332:	90 93 27 01 	sts	0x0127, r25
     336:	80 93 26 01 	sts	0x0126, r24
	ICR1 = 0;
     33a:	11 82       	std	Z+1, r1	; 0x01
     33c:	10 82       	st	Z, r1
    // set the charged flag to true
    cap_charged = TRUE;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	90 93 34 01 	sts	0x0134, r25
     346:	80 93 33 01 	sts	0x0133, r24
}
     34a:	ff 91       	pop	r31
     34c:	ef 91       	pop	r30
     34e:	9f 91       	pop	r25
     350:	8f 91       	pop	r24
     352:	0f 90       	pop	r0
     354:	0b be       	out	0x3b, r0	; 59
     356:	0f 90       	pop	r0
     358:	0f be       	out	0x3f, r0	; 63
     35a:	0f 90       	pop	r0
     35c:	1f 90       	pop	r1
     35e:	18 95       	reti

00000360 <toggle_led>:

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     360:	8b b1       	in	r24, 0x0b	; 11
     362:	94 e0       	ldi	r25, 0x04	; 4
     364:	89 27       	eor	r24, r25
     366:	8b b9       	out	0x0b, r24	; 11
     368:	08 95       	ret

0000036a <init_timer0A>:
//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 249;
     370:	89 ef       	ldi	r24, 0xF9	; 249
     372:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     374:	83 e0       	ldi	r24, 0x03	; 3
     376:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     378:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     37a:	84 b5       	in	r24, 0x24	; 36
     37c:	82 60       	ori	r24, 0x02	; 2
     37e:	84 bd       	out	0x24, r24	; 36
     380:	08 95       	ret

00000382 <init_lcd>:
}

// LCD setup
void init_lcd(void){
	LCDinit();	//initialize the display
     382:	0e 94 24 03 	call	0x648	; 0x648 <LCDinit>
	LCDcursorOFF();
     386:	0e 94 9c 03 	call	0x738	; 0x738 <LCDcursorOFF>
	LCDclr();				//clear the display
     38a:	0e 94 b4 02 	call	0x568	; 0x568 <LCDclr>
	LCDGotoXY(0,0);
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCDGotoXY>
	CopyStringtoLCD(LCD_number, 0, 0);
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	8c e8       	ldi	r24, 0x8C	; 140
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <CopyStringtoLCD>

000003a2 <refresh_lcd>:

// writes contents of lcd_buffer to LCD every 200 mSec
// 
void refresh_lcd(void){
  // increment time counter and format string 
  if ((charge_cycles - 126) > 85) {
     3a2:	80 91 26 01 	lds	r24, 0x0126
     3a6:	90 91 27 01 	lds	r25, 0x0127
     3aa:	8e 57       	subi	r24, 0x7E	; 126
     3ac:	91 09       	sbc	r25, r1
     3ae:	86 35       	cpi	r24, 0x56	; 86
     3b0:	91 05       	cpc	r25, r1
     3b2:	b8 f0       	brcs	.+46     	; 0x3e2 <refresh_lcd+0x40>
   	//sprintf(lcd_buffer,"%-.4f",capacitance);
    sprintf(lcd_buffer,"%-u", charge_cycles);	 
     3b4:	80 91 26 01 	lds	r24, 0x0126
     3b8:	90 91 27 01 	lds	r25, 0x0127
     3bc:	9f 93       	push	r25
     3be:	8f 93       	push	r24
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	84 e1       	ldi	r24, 0x14	; 20
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	9f 93       	push	r25
     3ce:	8f 93       	push	r24
     3d0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <sprintf>
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	06 c0       	rjmp	.+12     	; 0x3ee <refresh_lcd+0x4c>
  }
  else {
  	sprintf(lcd_buffer,"N/A     ");
     3e2:	68 e0       	ldi	r22, 0x08	; 8
     3e4:	71 e0       	ldi	r23, 0x01	; 1
     3e6:	84 e1       	ldi	r24, 0x14	; 20
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 3a 0a 	call	0x1474	; 0x1474 <strcpy>
  }               
  LCDGotoXY(0, 1);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCDGotoXY>
  	// display the capacitance 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     3f6:	e4 e1       	ldi	r30, 0x14	; 20
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	df 01       	movw	r26, r30
     3fc:	0d 90       	ld	r0, X+
     3fe:	00 20       	and	r0, r0
     400:	e9 f7       	brne	.-6      	; 0x3fc <refresh_lcd+0x5a>
     402:	bd 01       	movw	r22, r26
     404:	61 50       	subi	r22, 0x01	; 1
     406:	71 09       	sbc	r23, r1
     408:	6e 1b       	sub	r22, r30
     40a:	7f 0b       	sbc	r23, r31
     40c:	cf 01       	movw	r24, r30
     40e:	0e 94 ba 02 	call	0x574	; 0x574 <LCDstring>
  // now move a char left and right
  
  
  
  LCDGotoXY(anipos,1);	   //second line
     412:	61 e0       	ldi	r22, 0x01	; 1
     414:	80 91 25 01 	lds	r24, 0x0125
     418:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCDGotoXY>
  LCDsendChar(' ');
     41c:	80 e2       	ldi	r24, 0x20	; 32
     41e:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCDsendChar>
  LCDGotoXY(anipos+1,1);
     422:	80 91 25 01 	lds	r24, 0x0125
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	8f 5f       	subi	r24, 0xFF	; 255
     42a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCDGotoXY>
  LCDsendChar(' '); 
     42e:	80 e2       	ldi	r24, 0x20	; 32
     430:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCDsendChar>
  if (anipos>=14) dir=-1;   // check boundaries
     434:	90 91 25 01 	lds	r25, 0x0125
     438:	9e 30       	cpi	r25, 0x0E	; 14
     43a:	10 f0       	brcs	.+4      	; 0x440 <refresh_lcd+0x9e>
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	03 c0       	rjmp	.+6      	; 0x446 <refresh_lcd+0xa4>
  if (anipos<=8 ) dir=1;
     440:	99 30       	cpi	r25, 0x09	; 9
     442:	18 f4       	brcc	.+6      	; 0x44a <refresh_lcd+0xa8>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 2e 01 	sts	0x012E, r24
  anipos=anipos+dir;
     44a:	80 91 2e 01 	lds	r24, 0x012E
     44e:	89 0f       	add	r24, r25
     450:	80 93 25 01 	sts	0x0125, r24
  LCDGotoXY(anipos,1);	   //second line
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCDGotoXY>
  LCDsendChar('n');
     45a:	8e e6       	ldi	r24, 0x6E	; 110
     45c:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCDsendChar>
  LCDGotoXY(anipos+1,1);
     460:	80 91 25 01 	lds	r24, 0x0125
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	8f 5f       	subi	r24, 0xFF	; 255
     468:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCDGotoXY>
  LCDsendChar('F');  
     46c:	86 e4       	ldi	r24, 0x46	; 70
     46e:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <LCDsendChar>

00000472 <initialize>:
}

void initialize(void){
	anipos = 8;
     472:	88 e0       	ldi	r24, 0x08	; 8
     474:	80 93 25 01 	sts	0x0125, r24
	led_time_count = 0;
     478:	10 92 30 01 	sts	0x0130, r1
     47c:	10 92 2f 01 	sts	0x012F, r1
	init_timer0A();
     480:	0e 94 b5 01 	call	0x36a	; 0x36a <init_timer0A>

	DDRB = 0;
     484:	14 b8       	out	0x04, r1	; 4
	DDRD = 0;
     486:	1a b8       	out	0x0a, r1	; 10

	//Enable LED Port
	DDRD = ONBOARD_LED; //turn the LED to an output
     488:	84 e0       	ldi	r24, 0x04	; 4
     48a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; //turn off LED 
     48c:	8f ef       	ldi	r24, 0xFF	; 255
     48e:	8b b9       	out	0x0b, r24	; 11

	capacitance = 0;
     490:	10 92 2a 01 	sts	0x012A, r1
     494:	10 92 2b 01 	sts	0x012B, r1
     498:	10 92 2c 01 	sts	0x012C, r1
     49c:	10 92 2d 01 	sts	0x012D, r1
	charge_cycles = 0;
     4a0:	10 92 27 01 	sts	0x0127, r1
     4a4:	10 92 26 01 	sts	0x0126, r1
	cap_discharged = FALSE;
     4a8:	10 92 29 01 	sts	0x0129, r1
     4ac:	10 92 28 01 	sts	0x0128, r1
	begin_cap_measurement = FALSE;
     4b0:	10 92 32 01 	sts	0x0132, r1
     4b4:	10 92 31 01 	sts	0x0131, r1
	cap_charged = FALSE;
     4b8:	10 92 34 01 	sts	0x0134, r1
     4bc:	10 92 33 01 	sts	0x0133, r1

	init_lcd();
     4c0:	0e 94 c1 01 	call	0x382	; 0x382 <init_lcd>
	LCDclr();
     4c4:	0e 94 b4 02 	call	0x568	; 0x568 <LCDclr>
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting timers...\n\r");


	sei();
     4c8:	78 94       	sei
     4ca:	08 95       	ret

000004cc <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     4cc:	98 2f       	mov	r25, r24
     4ce:	90 7f       	andi	r25, 0xF0	; 240
     4d0:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_RS;
     4d2:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     4d4:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d6:	ef e3       	ldi	r30, 0x3F	; 63
     4d8:	ff e1       	ldi	r31, 0x1F	; 31
     4da:	31 97       	sbiw	r30, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <LCDsendChar+0xe>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <LCDsendChar+0x14>
     4e0:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     4e2:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     4e4:	40 98       	cbi	0x08, 0	; 8
     4e6:	ef e3       	ldi	r30, 0x3F	; 63
     4e8:	ff e1       	ldi	r31, 0x1F	; 31
     4ea:	31 97       	sbiw	r30, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCDsendChar+0x1e>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCDsendChar+0x24>
     4f0:	00 00       	nop
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     4f2:	f0 e1       	ldi	r31, 0x10	; 16
     4f4:	8f 9f       	mul	r24, r31
     4f6:	c0 01       	movw	r24, r0
     4f8:	11 24       	eor	r1, r1
     4fa:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     4fc:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     4fe:	42 9a       	sbi	0x08, 2	; 8
     500:	8f e3       	ldi	r24, 0x3F	; 63
     502:	9f e1       	ldi	r25, 0x1F	; 31
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <LCDsendChar+0x38>
     508:	00 c0       	rjmp	.+0      	; 0x50a <LCDsendChar+0x3e>
     50a:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     50c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     50e:	40 98       	cbi	0x08, 0	; 8
     510:	ef e3       	ldi	r30, 0x3F	; 63
     512:	ff e1       	ldi	r31, 0x1F	; 31
     514:	31 97       	sbiw	r30, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <LCDsendChar+0x48>
     518:	00 c0       	rjmp	.+0      	; 0x51a <LCDsendChar+0x4e>
     51a:	00 00       	nop
     51c:	08 95       	ret

0000051e <LCDsendCommand>:
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     51e:	98 2f       	mov	r25, r24
     520:	90 7f       	andi	r25, 0xF0	; 240
     522:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_E;		
     524:	42 9a       	sbi	0x08, 2	; 8
     526:	ef e3       	ldi	r30, 0x3F	; 63
     528:	ff e1       	ldi	r31, 0x1F	; 31
     52a:	31 97       	sbiw	r30, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <LCDsendCommand+0xc>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <LCDsendCommand+0x12>
     530:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     532:	42 98       	cbi	0x08, 2	; 8
     534:	ef e3       	ldi	r30, 0x3F	; 63
     536:	ff e1       	ldi	r31, 0x1F	; 31
     538:	31 97       	sbiw	r30, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <LCDsendCommand+0x1a>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <LCDsendCommand+0x20>
     53e:	00 00       	nop
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     540:	f0 e1       	ldi	r31, 0x10	; 16
     542:	8f 9f       	mul	r24, r31
     544:	c0 01       	movw	r24, r0
     546:	11 24       	eor	r1, r1
     548:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     54a:	42 9a       	sbi	0x08, 2	; 8
     54c:	8f e3       	ldi	r24, 0x3F	; 63
     54e:	9f e1       	ldi	r25, 0x1F	; 31
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <LCDsendCommand+0x32>
     554:	00 c0       	rjmp	.+0      	; 0x556 <LCDsendCommand+0x38>
     556:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     558:	42 98       	cbi	0x08, 2	; 8
     55a:	ef e3       	ldi	r30, 0x3F	; 63
     55c:	ff e1       	ldi	r31, 0x1F	; 31
     55e:	31 97       	sbiw	r30, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <LCDsendCommand+0x40>
     562:	00 c0       	rjmp	.+0      	; 0x564 <LCDsendCommand+0x46>
     564:	00 00       	nop
     566:	08 95       	ret

00000568 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LCDsendCommand>

0000056e <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LCDsendCommand>

00000574 <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	1f 92       	push	r1
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     584:	00 97       	sbiw	r24, 0x00	; 0
     586:	71 f0       	breq	.+28     	; 0x5a4 <LCDstring+0x30>
     588:	18 2f       	mov	r17, r24
     58a:	7c 01       	movw	r14, r24
     58c:	07 c0       	rjmp	.+14     	; 0x59c <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     58e:	f7 01       	movw	r30, r14
     590:	81 91       	ld	r24, Z+
     592:	7f 01       	movw	r14, r30
     594:	69 83       	std	Y+1, r22	; 0x01
     596:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCDsendChar>
     59a:	69 81       	ldd	r22, Y+1	; 0x01

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     59c:	8e 2d       	mov	r24, r14
     59e:	81 1b       	sub	r24, r17
     5a0:	86 17       	cp	r24, r22
     5a2:	a8 f3       	brcs	.-22     	; 0x58e <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     5a4:	0f 90       	pop	r0
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	08 95       	ret

000005b2 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     5b2:	62 30       	cpi	r22, 0x02	; 2
     5b4:	31 f0       	breq	.+12     	; 0x5c2 <LCDGotoXY+0x10>
     5b6:	63 30       	cpi	r22, 0x03	; 3
     5b8:	31 f0       	breq	.+12     	; 0x5c6 <LCDGotoXY+0x14>
     5ba:	61 30       	cpi	r22, 0x01	; 1
     5bc:	29 f4       	brne	.+10     	; 0x5c8 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     5be:	80 5c       	subi	r24, 0xC0	; 192
     5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     5c2:	8c 5e       	subi	r24, 0xEC	; 236
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     5c6:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     5c8:	80 68       	ori	r24, 0x80	; 128
     5ca:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LCDsendCommand>

000005ce <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	ec 01       	movw	r28, r24
     5d6:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     5d8:	64 2f       	mov	r22, r20
     5da:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5de:	10 e0       	ldi	r17, 0x00	; 0
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     5e2:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5e6:	1f 5f       	subi	r17, 0xFF	; 255
     5e8:	fe 01       	movw	r30, r28
     5ea:	e1 0f       	add	r30, r17
     5ec:	f1 1d       	adc	r31, r1
     5ee:	84 91       	lpm	r24, Z
     5f0:	81 11       	cpse	r24, r1
     5f2:	f7 cf       	rjmp	.-18     	; 0x5e2 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	08 95       	ret

000005fc <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     60a:	88 e0       	ldi	r24, 0x08	; 8
     60c:	68 9f       	mul	r22, r24
     60e:	b0 01       	movw	r22, r0
     610:	11 24       	eor	r1, r1
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	e8 2e       	mov	r14, r24
     616:	e6 2a       	or	r14, r22
	for (i=0; i<8; i++){
     618:	c0 e0       	ldi	r28, 0x00	; 0
     61a:	d0 e0       	ldi	r29, 0x00	; 0
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     61c:	f8 01       	movw	r30, r16
     61e:	ec 0f       	add	r30, r28
     620:	fd 1f       	adc	r31, r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     622:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
     624:	8c 2f       	mov	r24, r28
     626:	8e 0d       	add	r24, r14
     628:	0e 94 8f 02 	call	0x51e	; 0x51e <LCDsendCommand>
		LCDsendChar(pcc);
     62c:	8f 2d       	mov	r24, r15
     62e:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     632:	21 96       	adiw	r28, 0x01	; 1
     634:	c8 30       	cpi	r28, 0x08	; 8
     636:	d1 05       	cpc	r29, r1
     638:	89 f7       	brne	.-30     	; 0x61c <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	08 95       	ret

00000648 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	8f e5       	ldi	r24, 0x5F	; 95
     650:	9a ee       	ldi	r25, 0xEA	; 234
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <LCDinit+0xa>
     656:	00 c0       	rjmp	.+0      	; 0x658 <LCDinit+0x10>
     658:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     65a:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     65c:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     65e:	87 b1       	in	r24, 0x07	; 7
     660:	80 6f       	ori	r24, 0xF0	; 240
     662:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     664:	87 b1       	in	r24, 0x07	; 7
     666:	87 60       	ori	r24, 0x07	; 7
     668:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     66a:	80 e3       	ldi	r24, 0x30	; 48
     66c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     66e:	42 9a       	sbi	0x08, 2	; 8
     670:	ef e3       	ldi	r30, 0x3F	; 63
     672:	ff e1       	ldi	r31, 0x1F	; 31
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <LCDinit+0x2c>
     678:	00 c0       	rjmp	.+0      	; 0x67a <LCDinit+0x32>
     67a:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     67c:	42 98       	cbi	0x08, 2	; 8
     67e:	ef e3       	ldi	r30, 0x3F	; 63
     680:	ff e1       	ldi	r31, 0x1F	; 31
     682:	31 97       	sbiw	r30, 0x01	; 1
     684:	f1 f7       	brne	.-4      	; 0x682 <LCDinit+0x3a>
     686:	00 c0       	rjmp	.+0      	; 0x688 <LCDinit+0x40>
     688:	00 00       	nop
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     68a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     68c:	42 9a       	sbi	0x08, 2	; 8
     68e:	8f e3       	ldi	r24, 0x3F	; 63
     690:	9f e1       	ldi	r25, 0x1F	; 31
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <LCDinit+0x4a>
     696:	00 c0       	rjmp	.+0      	; 0x698 <LCDinit+0x50>
     698:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     69a:	42 98       	cbi	0x08, 2	; 8
     69c:	ef e3       	ldi	r30, 0x3F	; 63
     69e:	ff e1       	ldi	r31, 0x1F	; 31
     6a0:	31 97       	sbiw	r30, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <LCDinit+0x58>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <LCDinit+0x5e>
     6a6:	00 00       	nop
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     6a8:	80 e2       	ldi	r24, 0x20	; 32
     6aa:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     6ac:	42 9a       	sbi	0x08, 2	; 8
     6ae:	8f e3       	ldi	r24, 0x3F	; 63
     6b0:	9f e1       	ldi	r25, 0x1F	; 31
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <LCDinit+0x6a>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <LCDinit+0x70>
     6b8:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     6ba:	42 98       	cbi	0x08, 2	; 8
     6bc:	ef e3       	ldi	r30, 0x3F	; 63
     6be:	ff e1       	ldi	r31, 0x1F	; 31
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <LCDinit+0x78>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <LCDinit+0x7e>
     6c6:	00 00       	nop
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     6c8:	88 e2       	ldi	r24, 0x28	; 40
     6ca:	0e 94 8f 02 	call	0x51e	; 0x51e <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     6ce:	8c e0       	ldi	r24, 0x0C	; 12
     6d0:	0e 94 8f 02 	call	0x51e	; 0x51e <LCDsendCommand>
     6d4:	cb ea       	ldi	r28, 0xAB	; 171
     6d6:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     6d8:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     6da:	16 2f       	mov	r17, r22
     6dc:	1f 5f       	subi	r17, 0xFF	; 255
     6de:	ce 01       	movw	r24, r28
     6e0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <LCDdefinechar>
     6e4:	28 96       	adiw	r28, 0x08	; 8
     6e6:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     6e8:	18 30       	cpi	r17, 0x08	; 8
     6ea:	b9 f7       	brne	.-18     	; 0x6da <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	08 95       	ret

000006f4 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     6fa:	c0 e0       	ldi	r28, 0x00	; 0
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
     6fe:	8e e1       	ldi	r24, 0x1E	; 30
     700:	0e 94 8f 02 	call	0x51e	; 0x51e <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     704:	cf 5f       	subi	r28, 0xFF	; 255
     706:	cd 13       	cpse	r28, r29
     708:	fa cf       	rjmp	.-12     	; 0x6fe <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     716:	c0 e0       	ldi	r28, 0x00	; 0
     718:	04 c0       	rjmp	.+8      	; 0x722 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
     71a:	88 e1       	ldi	r24, 0x18	; 24
     71c:	0e 94 8f 02 	call	0x51e	; 0x51e <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     720:	cf 5f       	subi	r28, 0xFF	; 255
     722:	cd 13       	cpse	r28, r29
     724:	fa cf       	rjmp	.-12     	; 0x71a <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     72c:	8e e0       	ldi	r24, 0x0E	; 14
     72e:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LCDsendCommand>

00000732 <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     732:	8f e0       	ldi	r24, 0x0F	; 15
     734:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LCDsendCommand>

00000738 <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     738:	8c e0       	ldi	r24, 0x0C	; 12
     73a:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LCDsendCommand>

0000073e <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     73e:	88 e0       	ldi	r24, 0x08	; 8
     740:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LCDsendCommand>

00000744 <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     744:	8c e0       	ldi	r24, 0x0C	; 12
     746:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LCDsendCommand>

0000074a <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     750:	c0 e0       	ldi	r28, 0x00	; 0
     752:	04 c0       	rjmp	.+8      	; 0x75c <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
     754:	80 e1       	ldi	r24, 0x10	; 16
     756:	0e 94 8f 02 	call	0x51e	; 0x51e <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     75a:	cf 5f       	subi	r28, 0xFF	; 255
     75c:	cd 13       	cpse	r28, r29
     75e:	fa cf       	rjmp	.-12     	; 0x754 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     76c:	c0 e0       	ldi	r28, 0x00	; 0
     76e:	04 c0       	rjmp	.+8      	; 0x778 <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
     770:	84 e1       	ldi	r24, 0x14	; 20
     772:	0e 94 8f 02 	call	0x51e	; 0x51e <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     776:	cf 5f       	subi	r28, 0xFF	; 255
     778:	cd 13       	cpse	r28, r29
     77a:	fa cf       	rjmp	.-12     	; 0x770 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     782:	cf 92       	push	r12
     784:	df 92       	push	r13
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	1f 92       	push	r1
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     798:	56 e0       	ldi	r21, 0x06	; 6
     79a:	45 9f       	mul	r20, r21
     79c:	90 01       	movw	r18, r0
     79e:	11 24       	eor	r1, r1
     7a0:	e8 2f       	mov	r30, r24
     7a2:	e2 9f       	mul	r30, r18
     7a4:	c0 01       	movw	r24, r0
     7a6:	e3 9f       	mul	r30, r19
     7a8:	90 0d       	add	r25, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	0e 94 43 09 	call	0x1286	; 0x1286 <__divmodhi4>
     7b2:	8b 01       	movw	r16, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     7b4:	cb 01       	movw	r24, r22
     7b6:	66 e0       	ldi	r22, 0x06	; 6
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	0e 94 2f 09 	call	0x125e	; 0x125e <__udivmodhi4>
     7be:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     7c0:	c1 2c       	mov	r12, r1
     7c2:	d1 2c       	mov	r13, r1
     7c4:	f1 2c       	mov	r15, r1
     7c6:	16 c0       	rjmp	.+44     	; 0x7f4 <LCDprogressBar+0x72>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     7c8:	96 01       	movw	r18, r12
     7ca:	2b 5f       	subi	r18, 0xFB	; 251
     7cc:	3f 4f       	sbci	r19, 0xFF	; 255
     7ce:	02 17       	cp	r16, r18
     7d0:	13 07       	cpc	r17, r19
     7d2:	28 f4       	brcc	.+10     	; 0x7de <LCDprogressBar+0x5c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     7d4:	0c 15       	cp	r16, r12
     7d6:	1d 05       	cpc	r17, r13
     7d8:	20 f0       	brcs	.+8      	; 0x7e2 <LCDprogressBar+0x60>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     7da:	8e 2d       	mov	r24, r14
     7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <LCDprogressBar+0x62>
			}
		}
		else
		{
			// this is a full block
			c = 5;
     7de:	85 e0       	ldi	r24, 0x05	; 5
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <LCDprogressBar+0x62>
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
     7e2:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     7e4:	49 83       	std	Y+1, r20	; 0x01
     7e6:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     7ea:	f3 94       	inc	r15
     7ec:	f6 e0       	ldi	r31, 0x06	; 6
     7ee:	cf 0e       	add	r12, r31
     7f0:	d1 1c       	adc	r13, r1
     7f2:	49 81       	ldd	r20, Y+1	; 0x01
     7f4:	f4 12       	cpse	r15, r20
     7f6:	e8 cf       	rjmp	.-48     	; 0x7c8 <LCDprogressBar+0x46>
		
		// write character to display
		LCDsendChar(c);
	}

}
     7f8:	0f 90       	pop	r0
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	08 95       	ret

0000080c <main>:
}

int main(void){
	initialize();
     80c:	0e 94 39 02 	call	0x472	; 0x472 <initialize>
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	8c e8       	ldi	r24, 0x8C	; 140
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CopyStringtoLCD>
	
	while(1){
		if( led_time_count == 0){
			led_time_count = LED_BLINK_PERIOD / 2;
     81c:	c4 ef       	ldi	r28, 0xF4	; 244
     81e:	d1 e0       	ldi	r29, 0x01	; 1
			toggle_led();
		}
		if( lcd_time_count == 0){
			lcd_time_count = LCD_REFRESH_RATE;
     820:	08 ec       	ldi	r16, 0xC8	; 200
     822:	10 e0       	ldi	r17, 0x00	; 0
		}
		if(cap_discharged && !begin_cap_measurement){
			//cli();
			//begin cap measurements
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     824:	ee 24       	eor	r14, r14
     826:	e3 94       	inc	r14
     828:	f1 2c       	mov	r15, r1
int main(void){
	initialize();
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
	
	while(1){
		if( led_time_count == 0){
     82a:	80 91 2f 01 	lds	r24, 0x012F
     82e:	90 91 30 01 	lds	r25, 0x0130
     832:	89 2b       	or	r24, r25
     834:	31 f4       	brne	.+12     	; 0x842 <main+0x36>
			led_time_count = LED_BLINK_PERIOD / 2;
     836:	d0 93 30 01 	sts	0x0130, r29
     83a:	c0 93 2f 01 	sts	0x012F, r28
			toggle_led();
     83e:	0e 94 b0 01 	call	0x360	; 0x360 <toggle_led>
		}
		if( lcd_time_count == 0){
     842:	80 91 12 01 	lds	r24, 0x0112
     846:	90 91 13 01 	lds	r25, 0x0113
     84a:	89 2b       	or	r24, r25
     84c:	31 f4       	brne	.+12     	; 0x85a <main+0x4e>
			lcd_time_count = LCD_REFRESH_RATE;
     84e:	10 93 13 01 	sts	0x0113, r17
     852:	00 93 12 01 	sts	0x0112, r16
			refresh_lcd();
     856:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <refresh_lcd>
		}
		if (!cap_discharged && !begin_cap_measurement && !cap_charged) {
     85a:	80 91 28 01 	lds	r24, 0x0128
     85e:	90 91 29 01 	lds	r25, 0x0129
     862:	89 2b       	or	r24, r25
     864:	81 f4       	brne	.+32     	; 0x886 <main+0x7a>
     866:	80 91 31 01 	lds	r24, 0x0131
     86a:	90 91 32 01 	lds	r25, 0x0132
     86e:	89 2b       	or	r24, r25
     870:	51 f4       	brne	.+20     	; 0x886 <main+0x7a>
     872:	80 91 33 01 	lds	r24, 0x0133
     876:	90 91 34 01 	lds	r25, 0x0134
     87a:	89 2b       	or	r24, r25
     87c:	21 f4       	brne	.+8      	; 0x886 <main+0x7a>
			cli();
     87e:	f8 94       	cli
			init_cap_measurements();
     880:	0e 94 44 01 	call	0x288	; 0x288 <init_cap_measurements>
			sei();
     884:	78 94       	sei
		}
		if(cap_discharged && !begin_cap_measurement){
     886:	80 91 28 01 	lds	r24, 0x0128
     88a:	90 91 29 01 	lds	r25, 0x0129
     88e:	89 2b       	or	r24, r25
     890:	61 f0       	breq	.+24     	; 0x8aa <main+0x9e>
     892:	80 91 31 01 	lds	r24, 0x0131
     896:	90 91 32 01 	lds	r25, 0x0132
     89a:	89 2b       	or	r24, r25
     89c:	31 f4       	brne	.+12     	; 0x8aa <main+0x9e>
			//cli();
			//begin cap measurements
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     89e:	f0 92 32 01 	sts	0x0132, r15
     8a2:	e0 92 31 01 	sts	0x0131, r14
			//initalize timer for cap measurement
			init_cap_measurement_analog_timer();
     8a6:	0e 94 18 01 	call	0x230	; 0x230 <init_cap_measurement_analog_timer>
			//sei();
		}
		if(begin_cap_measurement && cap_charged){
     8aa:	80 91 31 01 	lds	r24, 0x0131
     8ae:	90 91 32 01 	lds	r25, 0x0132
     8b2:	89 2b       	or	r24, r25
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <main+0xac>
     8b6:	b9 cf       	rjmp	.-142    	; 0x82a <main+0x1e>
     8b8:	80 91 33 01 	lds	r24, 0x0133
     8bc:	90 91 34 01 	lds	r25, 0x0134
     8c0:	89 2b       	or	r24, r25
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <main+0xba>
     8c4:	b2 cf       	rjmp	.-156    	; 0x82a <main+0x1e>
			cli();
     8c6:	f8 94       	cli
			// Revert the flags
			cap_discharged = FALSE;
     8c8:	10 92 29 01 	sts	0x0129, r1
     8cc:	10 92 28 01 	sts	0x0128, r1
			begin_cap_measurement = FALSE;
     8d0:	10 92 32 01 	sts	0x0132, r1
     8d4:	10 92 31 01 	sts	0x0131, r1
			cap_charged = FALSE;
     8d8:	10 92 34 01 	sts	0x0134, r1
     8dc:	10 92 33 01 	sts	0x0133, r1
			
			// Turn off analog capture register
			ACSR &= ~ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     8e0:	80 b7       	in	r24, 0x30	; 48
     8e2:	8b 7f       	andi	r24, 0xFB	; 251
     8e4:	80 bf       	out	0x30, r24	; 48
			TCCR1B &= ~INPUT_CAPTURE_EDGE_SELECT;
     8e6:	80 91 81 00 	lds	r24, 0x0081
     8ea:	8f 7b       	andi	r24, 0xBF	; 191
     8ec:	80 93 81 00 	sts	0x0081, r24
			// Calculate the capacitance with the time elapsed. 
			// V(t) = Vo(1 - exp(-t/(R2*C))) becomes
			// C = -t / (R2 * ln(.5)) to find out when V(t) = .5 * Vo (R3 = R4)
			// (Due to ln(.5) being negative, the negative on the t is canceled out)
			// constant = time_per_cycle / (R2 * ln(.5)
			capacitance = (charge_cycles - 126) * constant;
     8f0:	60 91 26 01 	lds	r22, 0x0126
     8f4:	70 91 27 01 	lds	r23, 0x0127
     8f8:	6e 57       	subi	r22, 0x7E	; 126
     8fa:	71 09       	sbc	r23, r1
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 93 04 	call	0x926	; 0x926 <__floatunsisf>
     904:	21 e6       	ldi	r18, 0x61	; 97
     906:	3c ee       	ldi	r19, 0xEC	; 236
     908:	44 e1       	ldi	r20, 0x14	; 20
     90a:	5c e3       	ldi	r21, 0x3C	; 60
     90c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__mulsf3>
     910:	ab 01       	movw	r20, r22
     912:	bc 01       	movw	r22, r24
     914:	40 93 2a 01 	sts	0x012A, r20
     918:	50 93 2b 01 	sts	0x012B, r21
     91c:	60 93 2c 01 	sts	0x012C, r22
     920:	70 93 2d 01 	sts	0x012D, r23
     924:	82 cf       	rjmp	.-252    	; 0x82a <main+0x1e>

00000926 <__floatunsisf>:
     926:	e8 94       	clt
     928:	09 c0       	rjmp	.+18     	; 0x93c <__floatsisf+0x12>

0000092a <__floatsisf>:
     92a:	97 fb       	bst	r25, 7
     92c:	3e f4       	brtc	.+14     	; 0x93c <__floatsisf+0x12>
     92e:	90 95       	com	r25
     930:	80 95       	com	r24
     932:	70 95       	com	r23
     934:	61 95       	neg	r22
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	8f 4f       	sbci	r24, 0xFF	; 255
     93a:	9f 4f       	sbci	r25, 0xFF	; 255
     93c:	99 23       	and	r25, r25
     93e:	a9 f0       	breq	.+42     	; 0x96a <__floatsisf+0x40>
     940:	f9 2f       	mov	r31, r25
     942:	96 e9       	ldi	r25, 0x96	; 150
     944:	bb 27       	eor	r27, r27
     946:	93 95       	inc	r25
     948:	f6 95       	lsr	r31
     94a:	87 95       	ror	r24
     94c:	77 95       	ror	r23
     94e:	67 95       	ror	r22
     950:	b7 95       	ror	r27
     952:	f1 11       	cpse	r31, r1
     954:	f8 cf       	rjmp	.-16     	; 0x946 <__floatsisf+0x1c>
     956:	fa f4       	brpl	.+62     	; 0x996 <__floatsisf+0x6c>
     958:	bb 0f       	add	r27, r27
     95a:	11 f4       	brne	.+4      	; 0x960 <__floatsisf+0x36>
     95c:	60 ff       	sbrs	r22, 0
     95e:	1b c0       	rjmp	.+54     	; 0x996 <__floatsisf+0x6c>
     960:	6f 5f       	subi	r22, 0xFF	; 255
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	8f 4f       	sbci	r24, 0xFF	; 255
     966:	9f 4f       	sbci	r25, 0xFF	; 255
     968:	16 c0       	rjmp	.+44     	; 0x996 <__floatsisf+0x6c>
     96a:	88 23       	and	r24, r24
     96c:	11 f0       	breq	.+4      	; 0x972 <__floatsisf+0x48>
     96e:	96 e9       	ldi	r25, 0x96	; 150
     970:	11 c0       	rjmp	.+34     	; 0x994 <__floatsisf+0x6a>
     972:	77 23       	and	r23, r23
     974:	21 f0       	breq	.+8      	; 0x97e <__floatsisf+0x54>
     976:	9e e8       	ldi	r25, 0x8E	; 142
     978:	87 2f       	mov	r24, r23
     97a:	76 2f       	mov	r23, r22
     97c:	05 c0       	rjmp	.+10     	; 0x988 <__floatsisf+0x5e>
     97e:	66 23       	and	r22, r22
     980:	71 f0       	breq	.+28     	; 0x99e <__floatsisf+0x74>
     982:	96 e8       	ldi	r25, 0x86	; 134
     984:	86 2f       	mov	r24, r22
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	2a f0       	brmi	.+10     	; 0x996 <__floatsisf+0x6c>
     98c:	9a 95       	dec	r25
     98e:	66 0f       	add	r22, r22
     990:	77 1f       	adc	r23, r23
     992:	88 1f       	adc	r24, r24
     994:	da f7       	brpl	.-10     	; 0x98c <__floatsisf+0x62>
     996:	88 0f       	add	r24, r24
     998:	96 95       	lsr	r25
     99a:	87 95       	ror	r24
     99c:	97 f9       	bld	r25, 7
     99e:	08 95       	ret

000009a0 <__mulsf3>:
     9a0:	0b d0       	rcall	.+22     	; 0x9b8 <__mulsf3x>
     9a2:	78 c0       	rjmp	.+240    	; 0xa94 <__fp_round>
     9a4:	69 d0       	rcall	.+210    	; 0xa78 <__fp_pscA>
     9a6:	28 f0       	brcs	.+10     	; 0x9b2 <__mulsf3+0x12>
     9a8:	6e d0       	rcall	.+220    	; 0xa86 <__fp_pscB>
     9aa:	18 f0       	brcs	.+6      	; 0x9b2 <__mulsf3+0x12>
     9ac:	95 23       	and	r25, r21
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <__mulsf3+0x12>
     9b0:	5a c0       	rjmp	.+180    	; 0xa66 <__fp_inf>
     9b2:	5f c0       	rjmp	.+190    	; 0xa72 <__fp_nan>
     9b4:	11 24       	eor	r1, r1
     9b6:	a2 c0       	rjmp	.+324    	; 0xafc <__fp_szero>

000009b8 <__mulsf3x>:
     9b8:	7e d0       	rcall	.+252    	; 0xab6 <__fp_split3>
     9ba:	a0 f3       	brcs	.-24     	; 0x9a4 <__mulsf3+0x4>

000009bc <__mulsf3_pse>:
     9bc:	95 9f       	mul	r25, r21
     9be:	d1 f3       	breq	.-12     	; 0x9b4 <__mulsf3+0x14>
     9c0:	95 0f       	add	r25, r21
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	55 1f       	adc	r21, r21
     9c6:	62 9f       	mul	r22, r18
     9c8:	f0 01       	movw	r30, r0
     9ca:	72 9f       	mul	r23, r18
     9cc:	bb 27       	eor	r27, r27
     9ce:	f0 0d       	add	r31, r0
     9d0:	b1 1d       	adc	r27, r1
     9d2:	63 9f       	mul	r22, r19
     9d4:	aa 27       	eor	r26, r26
     9d6:	f0 0d       	add	r31, r0
     9d8:	b1 1d       	adc	r27, r1
     9da:	aa 1f       	adc	r26, r26
     9dc:	64 9f       	mul	r22, r20
     9de:	66 27       	eor	r22, r22
     9e0:	b0 0d       	add	r27, r0
     9e2:	a1 1d       	adc	r26, r1
     9e4:	66 1f       	adc	r22, r22
     9e6:	82 9f       	mul	r24, r18
     9e8:	22 27       	eor	r18, r18
     9ea:	b0 0d       	add	r27, r0
     9ec:	a1 1d       	adc	r26, r1
     9ee:	62 1f       	adc	r22, r18
     9f0:	73 9f       	mul	r23, r19
     9f2:	b0 0d       	add	r27, r0
     9f4:	a1 1d       	adc	r26, r1
     9f6:	62 1f       	adc	r22, r18
     9f8:	83 9f       	mul	r24, r19
     9fa:	a0 0d       	add	r26, r0
     9fc:	61 1d       	adc	r22, r1
     9fe:	22 1f       	adc	r18, r18
     a00:	74 9f       	mul	r23, r20
     a02:	33 27       	eor	r19, r19
     a04:	a0 0d       	add	r26, r0
     a06:	61 1d       	adc	r22, r1
     a08:	23 1f       	adc	r18, r19
     a0a:	84 9f       	mul	r24, r20
     a0c:	60 0d       	add	r22, r0
     a0e:	21 1d       	adc	r18, r1
     a10:	82 2f       	mov	r24, r18
     a12:	76 2f       	mov	r23, r22
     a14:	6a 2f       	mov	r22, r26
     a16:	11 24       	eor	r1, r1
     a18:	9f 57       	subi	r25, 0x7F	; 127
     a1a:	50 40       	sbci	r21, 0x00	; 0
     a1c:	8a f0       	brmi	.+34     	; 0xa40 <__mulsf3_pse+0x84>
     a1e:	e1 f0       	breq	.+56     	; 0xa58 <__mulsf3_pse+0x9c>
     a20:	88 23       	and	r24, r24
     a22:	4a f0       	brmi	.+18     	; 0xa36 <__mulsf3_pse+0x7a>
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	bb 1f       	adc	r27, r27
     a2a:	66 1f       	adc	r22, r22
     a2c:	77 1f       	adc	r23, r23
     a2e:	88 1f       	adc	r24, r24
     a30:	91 50       	subi	r25, 0x01	; 1
     a32:	50 40       	sbci	r21, 0x00	; 0
     a34:	a9 f7       	brne	.-22     	; 0xa20 <__mulsf3_pse+0x64>
     a36:	9e 3f       	cpi	r25, 0xFE	; 254
     a38:	51 05       	cpc	r21, r1
     a3a:	70 f0       	brcs	.+28     	; 0xa58 <__mulsf3_pse+0x9c>
     a3c:	14 c0       	rjmp	.+40     	; 0xa66 <__fp_inf>
     a3e:	5e c0       	rjmp	.+188    	; 0xafc <__fp_szero>
     a40:	5f 3f       	cpi	r21, 0xFF	; 255
     a42:	ec f3       	brlt	.-6      	; 0xa3e <__mulsf3_pse+0x82>
     a44:	98 3e       	cpi	r25, 0xE8	; 232
     a46:	dc f3       	brlt	.-10     	; 0xa3e <__mulsf3_pse+0x82>
     a48:	86 95       	lsr	r24
     a4a:	77 95       	ror	r23
     a4c:	67 95       	ror	r22
     a4e:	b7 95       	ror	r27
     a50:	f7 95       	ror	r31
     a52:	e7 95       	ror	r30
     a54:	9f 5f       	subi	r25, 0xFF	; 255
     a56:	c1 f7       	brne	.-16     	; 0xa48 <__mulsf3_pse+0x8c>
     a58:	fe 2b       	or	r31, r30
     a5a:	88 0f       	add	r24, r24
     a5c:	91 1d       	adc	r25, r1
     a5e:	96 95       	lsr	r25
     a60:	87 95       	ror	r24
     a62:	97 f9       	bld	r25, 7
     a64:	08 95       	ret

00000a66 <__fp_inf>:
     a66:	97 f9       	bld	r25, 7
     a68:	9f 67       	ori	r25, 0x7F	; 127
     a6a:	80 e8       	ldi	r24, 0x80	; 128
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	08 95       	ret

00000a72 <__fp_nan>:
     a72:	9f ef       	ldi	r25, 0xFF	; 255
     a74:	80 ec       	ldi	r24, 0xC0	; 192
     a76:	08 95       	ret

00000a78 <__fp_pscA>:
     a78:	00 24       	eor	r0, r0
     a7a:	0a 94       	dec	r0
     a7c:	16 16       	cp	r1, r22
     a7e:	17 06       	cpc	r1, r23
     a80:	18 06       	cpc	r1, r24
     a82:	09 06       	cpc	r0, r25
     a84:	08 95       	ret

00000a86 <__fp_pscB>:
     a86:	00 24       	eor	r0, r0
     a88:	0a 94       	dec	r0
     a8a:	12 16       	cp	r1, r18
     a8c:	13 06       	cpc	r1, r19
     a8e:	14 06       	cpc	r1, r20
     a90:	05 06       	cpc	r0, r21
     a92:	08 95       	ret

00000a94 <__fp_round>:
     a94:	09 2e       	mov	r0, r25
     a96:	03 94       	inc	r0
     a98:	00 0c       	add	r0, r0
     a9a:	11 f4       	brne	.+4      	; 0xaa0 <__fp_round+0xc>
     a9c:	88 23       	and	r24, r24
     a9e:	52 f0       	brmi	.+20     	; 0xab4 <__fp_round+0x20>
     aa0:	bb 0f       	add	r27, r27
     aa2:	40 f4       	brcc	.+16     	; 0xab4 <__fp_round+0x20>
     aa4:	bf 2b       	or	r27, r31
     aa6:	11 f4       	brne	.+4      	; 0xaac <__fp_round+0x18>
     aa8:	60 ff       	sbrs	r22, 0
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <__fp_round+0x20>
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	8f 4f       	sbci	r24, 0xFF	; 255
     ab2:	9f 4f       	sbci	r25, 0xFF	; 255
     ab4:	08 95       	ret

00000ab6 <__fp_split3>:
     ab6:	57 fd       	sbrc	r21, 7
     ab8:	90 58       	subi	r25, 0x80	; 128
     aba:	44 0f       	add	r20, r20
     abc:	55 1f       	adc	r21, r21
     abe:	59 f0       	breq	.+22     	; 0xad6 <__fp_splitA+0x10>
     ac0:	5f 3f       	cpi	r21, 0xFF	; 255
     ac2:	71 f0       	breq	.+28     	; 0xae0 <__fp_splitA+0x1a>
     ac4:	47 95       	ror	r20

00000ac6 <__fp_splitA>:
     ac6:	88 0f       	add	r24, r24
     ac8:	97 fb       	bst	r25, 7
     aca:	99 1f       	adc	r25, r25
     acc:	61 f0       	breq	.+24     	; 0xae6 <__fp_splitA+0x20>
     ace:	9f 3f       	cpi	r25, 0xFF	; 255
     ad0:	79 f0       	breq	.+30     	; 0xaf0 <__fp_splitA+0x2a>
     ad2:	87 95       	ror	r24
     ad4:	08 95       	ret
     ad6:	12 16       	cp	r1, r18
     ad8:	13 06       	cpc	r1, r19
     ada:	14 06       	cpc	r1, r20
     adc:	55 1f       	adc	r21, r21
     ade:	f2 cf       	rjmp	.-28     	; 0xac4 <__fp_split3+0xe>
     ae0:	46 95       	lsr	r20
     ae2:	f1 df       	rcall	.-30     	; 0xac6 <__fp_splitA>
     ae4:	08 c0       	rjmp	.+16     	; 0xaf6 <__fp_splitA+0x30>
     ae6:	16 16       	cp	r1, r22
     ae8:	17 06       	cpc	r1, r23
     aea:	18 06       	cpc	r1, r24
     aec:	99 1f       	adc	r25, r25
     aee:	f1 cf       	rjmp	.-30     	; 0xad2 <__fp_splitA+0xc>
     af0:	86 95       	lsr	r24
     af2:	71 05       	cpc	r23, r1
     af4:	61 05       	cpc	r22, r1
     af6:	08 94       	sec
     af8:	08 95       	ret

00000afa <__fp_zero>:
     afa:	e8 94       	clt

00000afc <__fp_szero>:
     afc:	bb 27       	eor	r27, r27
     afe:	66 27       	eor	r22, r22
     b00:	77 27       	eor	r23, r23
     b02:	cb 01       	movw	r24, r22
     b04:	97 f9       	bld	r25, 7
     b06:	08 95       	ret

00000b08 <vfprintf>:
     b08:	2f 92       	push	r2
     b0a:	3f 92       	push	r3
     b0c:	4f 92       	push	r4
     b0e:	5f 92       	push	r5
     b10:	6f 92       	push	r6
     b12:	7f 92       	push	r7
     b14:	8f 92       	push	r8
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	62 97       	sbiw	r28, 0x12	; 18
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	7c 01       	movw	r14, r24
     b3e:	1b 01       	movw	r2, r22
     b40:	6a 01       	movw	r12, r20
     b42:	fc 01       	movw	r30, r24
     b44:	17 82       	std	Z+7, r1	; 0x07
     b46:	16 82       	std	Z+6, r1	; 0x06
     b48:	83 81       	ldd	r24, Z+3	; 0x03
     b4a:	81 fd       	sbrc	r24, 1
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <vfprintf+0x4c>
     b4e:	6b c3       	rjmp	.+1750   	; 0x1226 <vfprintf+0x71e>
     b50:	65 01       	movw	r12, r10
     b52:	05 c0       	rjmp	.+10     	; 0xb5e <vfprintf+0x56>
     b54:	88 24       	eor	r8, r8
     b56:	83 94       	inc	r8
     b58:	91 2c       	mov	r9, r1
     b5a:	8c 0e       	add	r8, r28
     b5c:	9d 1e       	adc	r9, r29
     b5e:	f7 01       	movw	r30, r14
     b60:	93 81       	ldd	r25, Z+3	; 0x03
     b62:	f1 01       	movw	r30, r2
     b64:	93 fd       	sbrc	r25, 3
     b66:	85 91       	lpm	r24, Z+
     b68:	93 ff       	sbrs	r25, 3
     b6a:	81 91       	ld	r24, Z+
     b6c:	1f 01       	movw	r2, r30
     b6e:	88 23       	and	r24, r24
     b70:	09 f4       	brne	.+2      	; 0xb74 <vfprintf+0x6c>
     b72:	55 c3       	rjmp	.+1706   	; 0x121e <vfprintf+0x716>
     b74:	85 32       	cpi	r24, 0x25	; 37
     b76:	39 f4       	brne	.+14     	; 0xb86 <vfprintf+0x7e>
     b78:	93 fd       	sbrc	r25, 3
     b7a:	85 91       	lpm	r24, Z+
     b7c:	93 ff       	sbrs	r25, 3
     b7e:	81 91       	ld	r24, Z+
     b80:	1f 01       	movw	r2, r30
     b82:	85 32       	cpi	r24, 0x25	; 37
     b84:	31 f4       	brne	.+12     	; 0xb92 <vfprintf+0x8a>
     b86:	b7 01       	movw	r22, r14
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     b8e:	56 01       	movw	r10, r12
     b90:	df cf       	rjmp	.-66     	; 0xb50 <vfprintf+0x48>
     b92:	71 2c       	mov	r7, r1
     b94:	61 2c       	mov	r6, r1
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	20 32       	cpi	r18, 0x20	; 32
     b9a:	a8 f4       	brcc	.+42     	; 0xbc6 <vfprintf+0xbe>
     b9c:	8b 32       	cpi	r24, 0x2B	; 43
     b9e:	61 f0       	breq	.+24     	; 0xbb8 <vfprintf+0xb0>
     ba0:	28 f4       	brcc	.+10     	; 0xbac <vfprintf+0xa4>
     ba2:	80 32       	cpi	r24, 0x20	; 32
     ba4:	51 f0       	breq	.+20     	; 0xbba <vfprintf+0xb2>
     ba6:	83 32       	cpi	r24, 0x23	; 35
     ba8:	71 f4       	brne	.+28     	; 0xbc6 <vfprintf+0xbe>
     baa:	0b c0       	rjmp	.+22     	; 0xbc2 <vfprintf+0xba>
     bac:	8d 32       	cpi	r24, 0x2D	; 45
     bae:	39 f0       	breq	.+14     	; 0xbbe <vfprintf+0xb6>
     bb0:	80 33       	cpi	r24, 0x30	; 48
     bb2:	49 f4       	brne	.+18     	; 0xbc6 <vfprintf+0xbe>
     bb4:	21 60       	ori	r18, 0x01	; 1
     bb6:	28 c0       	rjmp	.+80     	; 0xc08 <vfprintf+0x100>
     bb8:	22 60       	ori	r18, 0x02	; 2
     bba:	24 60       	ori	r18, 0x04	; 4
     bbc:	25 c0       	rjmp	.+74     	; 0xc08 <vfprintf+0x100>
     bbe:	28 60       	ori	r18, 0x08	; 8
     bc0:	23 c0       	rjmp	.+70     	; 0xc08 <vfprintf+0x100>
     bc2:	20 61       	ori	r18, 0x10	; 16
     bc4:	21 c0       	rjmp	.+66     	; 0xc08 <vfprintf+0x100>
     bc6:	27 fd       	sbrc	r18, 7
     bc8:	27 c0       	rjmp	.+78     	; 0xc18 <vfprintf+0x110>
     bca:	38 2f       	mov	r19, r24
     bcc:	30 53       	subi	r19, 0x30	; 48
     bce:	3a 30       	cpi	r19, 0x0A	; 10
     bd0:	78 f4       	brcc	.+30     	; 0xbf0 <vfprintf+0xe8>
     bd2:	26 ff       	sbrs	r18, 6
     bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <vfprintf+0xda>
     bd6:	fa e0       	ldi	r31, 0x0A	; 10
     bd8:	7f 9e       	mul	r7, r31
     bda:	30 0d       	add	r19, r0
     bdc:	11 24       	eor	r1, r1
     bde:	73 2e       	mov	r7, r19
     be0:	13 c0       	rjmp	.+38     	; 0xc08 <vfprintf+0x100>
     be2:	4a e0       	ldi	r20, 0x0A	; 10
     be4:	64 9e       	mul	r6, r20
     be6:	30 0d       	add	r19, r0
     be8:	11 24       	eor	r1, r1
     bea:	63 2e       	mov	r6, r19
     bec:	20 62       	ori	r18, 0x20	; 32
     bee:	0c c0       	rjmp	.+24     	; 0xc08 <vfprintf+0x100>
     bf0:	8e 32       	cpi	r24, 0x2E	; 46
     bf2:	21 f4       	brne	.+8      	; 0xbfc <vfprintf+0xf4>
     bf4:	26 fd       	sbrc	r18, 6
     bf6:	13 c3       	rjmp	.+1574   	; 0x121e <vfprintf+0x716>
     bf8:	20 64       	ori	r18, 0x40	; 64
     bfa:	06 c0       	rjmp	.+12     	; 0xc08 <vfprintf+0x100>
     bfc:	8c 36       	cpi	r24, 0x6C	; 108
     bfe:	11 f4       	brne	.+4      	; 0xc04 <vfprintf+0xfc>
     c00:	20 68       	ori	r18, 0x80	; 128
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <vfprintf+0x100>
     c04:	88 36       	cpi	r24, 0x68	; 104
     c06:	41 f4       	brne	.+16     	; 0xc18 <vfprintf+0x110>
     c08:	f1 01       	movw	r30, r2
     c0a:	93 fd       	sbrc	r25, 3
     c0c:	85 91       	lpm	r24, Z+
     c0e:	93 ff       	sbrs	r25, 3
     c10:	81 91       	ld	r24, Z+
     c12:	1f 01       	movw	r2, r30
     c14:	81 11       	cpse	r24, r1
     c16:	c0 cf       	rjmp	.-128    	; 0xb98 <vfprintf+0x90>
     c18:	98 2f       	mov	r25, r24
     c1a:	95 54       	subi	r25, 0x45	; 69
     c1c:	93 30       	cpi	r25, 0x03	; 3
     c1e:	18 f4       	brcc	.+6      	; 0xc26 <vfprintf+0x11e>
     c20:	20 61       	ori	r18, 0x10	; 16
     c22:	80 5e       	subi	r24, 0xE0	; 224
     c24:	06 c0       	rjmp	.+12     	; 0xc32 <vfprintf+0x12a>
     c26:	98 2f       	mov	r25, r24
     c28:	95 56       	subi	r25, 0x65	; 101
     c2a:	93 30       	cpi	r25, 0x03	; 3
     c2c:	08 f0       	brcs	.+2      	; 0xc30 <vfprintf+0x128>
     c2e:	a4 c1       	rjmp	.+840    	; 0xf78 <vfprintf+0x470>
     c30:	2f 7e       	andi	r18, 0xEF	; 239
     c32:	26 fd       	sbrc	r18, 6
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <vfprintf+0x132>
     c36:	16 e0       	ldi	r17, 0x06	; 6
     c38:	71 2e       	mov	r7, r17
     c3a:	bf e3       	ldi	r27, 0x3F	; 63
     c3c:	5b 2e       	mov	r5, r27
     c3e:	52 22       	and	r5, r18
     c40:	85 36       	cpi	r24, 0x65	; 101
     c42:	19 f4       	brne	.+6      	; 0xc4a <vfprintf+0x142>
     c44:	f0 e4       	ldi	r31, 0x40	; 64
     c46:	5f 2a       	or	r5, r31
     c48:	07 c0       	rjmp	.+14     	; 0xc58 <vfprintf+0x150>
     c4a:	86 36       	cpi	r24, 0x66	; 102
     c4c:	19 f4       	brne	.+6      	; 0xc54 <vfprintf+0x14c>
     c4e:	40 e8       	ldi	r20, 0x80	; 128
     c50:	54 2a       	or	r5, r20
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <vfprintf+0x150>
     c54:	71 10       	cpse	r7, r1
     c56:	7a 94       	dec	r7
     c58:	57 fe       	sbrs	r5, 7
     c5a:	07 c0       	rjmp	.+14     	; 0xc6a <vfprintf+0x162>
     c5c:	5b e3       	ldi	r21, 0x3B	; 59
     c5e:	57 15       	cp	r21, r7
     c60:	48 f0       	brcs	.+18     	; 0xc74 <vfprintf+0x16c>
     c62:	47 2c       	mov	r4, r7
     c64:	43 94       	inc	r4
     c66:	27 e0       	ldi	r18, 0x07	; 7
     c68:	0d c0       	rjmp	.+26     	; 0xc84 <vfprintf+0x17c>
     c6a:	87 e0       	ldi	r24, 0x07	; 7
     c6c:	87 15       	cp	r24, r7
     c6e:	30 f0       	brcs	.+12     	; 0xc7c <vfprintf+0x174>
     c70:	27 2d       	mov	r18, r7
     c72:	07 c0       	rjmp	.+14     	; 0xc82 <vfprintf+0x17a>
     c74:	27 e0       	ldi	r18, 0x07	; 7
     c76:	ac e3       	ldi	r26, 0x3C	; 60
     c78:	4a 2e       	mov	r4, r26
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <vfprintf+0x17c>
     c7c:	27 e0       	ldi	r18, 0x07	; 7
     c7e:	f7 e0       	ldi	r31, 0x07	; 7
     c80:	7f 2e       	mov	r7, r31
     c82:	41 2c       	mov	r4, r1
     c84:	56 01       	movw	r10, r12
     c86:	94 e0       	ldi	r25, 0x04	; 4
     c88:	a9 0e       	add	r10, r25
     c8a:	b1 1c       	adc	r11, r1
     c8c:	f6 01       	movw	r30, r12
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	04 2d       	mov	r16, r4
     c98:	a4 01       	movw	r20, r8
     c9a:	0e 94 57 09 	call	0x12ae	; 0x12ae <__ftoa_engine>
     c9e:	8c 01       	movw	r16, r24
     ca0:	49 81       	ldd	r20, Y+1	; 0x01
     ca2:	4c 87       	std	Y+12, r20	; 0x0c
     ca4:	40 ff       	sbrs	r20, 0
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <vfprintf+0x1a4>
     ca8:	43 ff       	sbrs	r20, 3
     caa:	07 c0       	rjmp	.+14     	; 0xcba <vfprintf+0x1b2>
     cac:	51 fc       	sbrc	r5, 1
     cae:	08 c0       	rjmp	.+16     	; 0xcc0 <vfprintf+0x1b8>
     cb0:	52 fe       	sbrs	r5, 2
     cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <vfprintf+0x1be>
     cb4:	e0 e2       	ldi	r30, 0x20	; 32
     cb6:	de 2e       	mov	r13, r30
     cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <vfprintf+0x1c0>
     cba:	7d e2       	ldi	r23, 0x2D	; 45
     cbc:	d7 2e       	mov	r13, r23
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <vfprintf+0x1c0>
     cc0:	6b e2       	ldi	r22, 0x2B	; 43
     cc2:	d6 2e       	mov	r13, r22
     cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <vfprintf+0x1c0>
     cc6:	d1 2c       	mov	r13, r1
     cc8:	8c 85       	ldd	r24, Y+12	; 0x0c
     cca:	8c 70       	andi	r24, 0x0C	; 12
     ccc:	a1 f1       	breq	.+104    	; 0xd36 <vfprintf+0x22e>
     cce:	dd 20       	and	r13, r13
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <vfprintf+0x1ce>
     cd2:	84 e0       	ldi	r24, 0x04	; 4
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <vfprintf+0x1d0>
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	86 15       	cp	r24, r6
     cda:	10 f0       	brcs	.+4      	; 0xce0 <vfprintf+0x1d8>
     cdc:	61 2c       	mov	r6, r1
     cde:	0b c0       	rjmp	.+22     	; 0xcf6 <vfprintf+0x1ee>
     ce0:	68 1a       	sub	r6, r24
     ce2:	53 fc       	sbrc	r5, 3
     ce4:	08 c0       	rjmp	.+16     	; 0xcf6 <vfprintf+0x1ee>
     ce6:	b7 01       	movw	r22, r14
     ce8:	80 e2       	ldi	r24, 0x20	; 32
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     cf0:	6a 94       	dec	r6
     cf2:	c9 f7       	brne	.-14     	; 0xce6 <vfprintf+0x1de>
     cf4:	f3 cf       	rjmp	.-26     	; 0xcdc <vfprintf+0x1d4>
     cf6:	dd 20       	and	r13, r13
     cf8:	29 f0       	breq	.+10     	; 0xd04 <vfprintf+0x1fc>
     cfa:	b7 01       	movw	r22, r14
     cfc:	8d 2d       	mov	r24, r13
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     d04:	5c 85       	ldd	r21, Y+12	; 0x0c
     d06:	53 fd       	sbrc	r21, 3
     d08:	03 c0       	rjmp	.+6      	; 0xd10 <vfprintf+0x208>
     d0a:	0f ee       	ldi	r16, 0xEF	; 239
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	0c c0       	rjmp	.+24     	; 0xd28 <vfprintf+0x220>
     d10:	0b ee       	ldi	r16, 0xEB	; 235
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	09 c0       	rjmp	.+18     	; 0xd28 <vfprintf+0x220>
     d16:	51 10       	cpse	r5, r1
     d18:	80 52       	subi	r24, 0x20	; 32
     d1a:	b7 01       	movw	r22, r14
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     d22:	0f 5f       	subi	r16, 0xFF	; 255
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <vfprintf+0x224>
     d28:	80 e1       	ldi	r24, 0x10	; 16
     d2a:	58 22       	and	r5, r24
     d2c:	f8 01       	movw	r30, r16
     d2e:	84 91       	lpm	r24, Z
     d30:	81 11       	cpse	r24, r1
     d32:	f1 cf       	rjmp	.-30     	; 0xd16 <vfprintf+0x20e>
     d34:	71 c2       	rjmp	.+1250   	; 0x1218 <vfprintf+0x710>
     d36:	57 fe       	sbrs	r5, 7
     d38:	0e c0       	rjmp	.+28     	; 0xd56 <vfprintf+0x24e>
     d3a:	40 0e       	add	r4, r16
     d3c:	4c 85       	ldd	r20, Y+12	; 0x0c
     d3e:	44 ff       	sbrs	r20, 4
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <vfprintf+0x242>
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	81 33       	cpi	r24, 0x31	; 49
     d46:	09 f4       	brne	.+2      	; 0xd4a <vfprintf+0x242>
     d48:	4a 94       	dec	r4
     d4a:	14 14       	cp	r1, r4
     d4c:	4c f5       	brge	.+82     	; 0xda0 <vfprintf+0x298>
     d4e:	58 e0       	ldi	r21, 0x08	; 8
     d50:	54 15       	cp	r21, r4
     d52:	48 f1       	brcs	.+82     	; 0xda6 <vfprintf+0x29e>
     d54:	2c c0       	rjmp	.+88     	; 0xdae <vfprintf+0x2a6>
     d56:	56 fc       	sbrc	r5, 6
     d58:	2a c0       	rjmp	.+84     	; 0xdae <vfprintf+0x2a6>
     d5a:	87 2d       	mov	r24, r7
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	80 17       	cp	r24, r16
     d60:	91 07       	cpc	r25, r17
     d62:	44 f0       	brlt	.+16     	; 0xd74 <vfprintf+0x26c>
     d64:	0c 3f       	cpi	r16, 0xFC	; 252
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	18 07       	cpc	r17, r24
     d6a:	24 f0       	brlt	.+8      	; 0xd74 <vfprintf+0x26c>
     d6c:	90 e8       	ldi	r25, 0x80	; 128
     d6e:	59 2a       	or	r5, r25
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <vfprintf+0x26c>
     d72:	7a 94       	dec	r7
     d74:	77 20       	and	r7, r7
     d76:	49 f0       	breq	.+18     	; 0xd8a <vfprintf+0x282>
     d78:	e2 e0       	ldi	r30, 0x02	; 2
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	ec 0f       	add	r30, r28
     d7e:	fd 1f       	adc	r31, r29
     d80:	e7 0d       	add	r30, r7
     d82:	f1 1d       	adc	r31, r1
     d84:	80 81       	ld	r24, Z
     d86:	80 33       	cpi	r24, 0x30	; 48
     d88:	a1 f3       	breq	.-24     	; 0xd72 <vfprintf+0x26a>
     d8a:	57 fe       	sbrs	r5, 7
     d8c:	10 c0       	rjmp	.+32     	; 0xdae <vfprintf+0x2a6>
     d8e:	47 2c       	mov	r4, r7
     d90:	43 94       	inc	r4
     d92:	87 2d       	mov	r24, r7
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	08 17       	cp	r16, r24
     d98:	19 07       	cpc	r17, r25
     d9a:	44 f4       	brge	.+16     	; 0xdac <vfprintf+0x2a4>
     d9c:	70 1a       	sub	r7, r16
     d9e:	07 c0       	rjmp	.+14     	; 0xdae <vfprintf+0x2a6>
     da0:	44 24       	eor	r4, r4
     da2:	43 94       	inc	r4
     da4:	04 c0       	rjmp	.+8      	; 0xdae <vfprintf+0x2a6>
     da6:	58 e0       	ldi	r21, 0x08	; 8
     da8:	45 2e       	mov	r4, r21
     daa:	01 c0       	rjmp	.+2      	; 0xdae <vfprintf+0x2a6>
     dac:	71 2c       	mov	r7, r1
     dae:	57 fe       	sbrs	r5, 7
     db0:	07 c0       	rjmp	.+14     	; 0xdc0 <vfprintf+0x2b8>
     db2:	10 16       	cp	r1, r16
     db4:	11 06       	cpc	r1, r17
     db6:	3c f4       	brge	.+14     	; 0xdc6 <vfprintf+0x2be>
     db8:	98 01       	movw	r18, r16
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <vfprintf+0x2c2>
     dc0:	25 e0       	ldi	r18, 0x05	; 5
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <vfprintf+0x2c2>
     dc6:	21 e0       	ldi	r18, 0x01	; 1
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	dd 20       	and	r13, r13
     dcc:	11 f0       	breq	.+4      	; 0xdd2 <vfprintf+0x2ca>
     dce:	2f 5f       	subi	r18, 0xFF	; 255
     dd0:	3f 4f       	sbci	r19, 0xFF	; 255
     dd2:	77 20       	and	r7, r7
     dd4:	31 f0       	breq	.+12     	; 0xde2 <vfprintf+0x2da>
     dd6:	47 2d       	mov	r20, r7
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	4f 5f       	subi	r20, 0xFF	; 255
     ddc:	5f 4f       	sbci	r21, 0xFF	; 255
     dde:	24 0f       	add	r18, r20
     de0:	35 1f       	adc	r19, r21
     de2:	46 2d       	mov	r20, r6
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	24 17       	cp	r18, r20
     de8:	35 07       	cpc	r19, r21
     dea:	14 f4       	brge	.+4      	; 0xdf0 <vfprintf+0x2e8>
     dec:	62 1a       	sub	r6, r18
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <vfprintf+0x2ea>
     df0:	61 2c       	mov	r6, r1
     df2:	85 2d       	mov	r24, r5
     df4:	89 70       	andi	r24, 0x09	; 9
     df6:	49 f4       	brne	.+18     	; 0xe0a <vfprintf+0x302>
     df8:	06 c0       	rjmp	.+12     	; 0xe06 <vfprintf+0x2fe>
     dfa:	b7 01       	movw	r22, r14
     dfc:	80 e2       	ldi	r24, 0x20	; 32
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     e04:	6a 94       	dec	r6
     e06:	61 10       	cpse	r6, r1
     e08:	f8 cf       	rjmp	.-16     	; 0xdfa <vfprintf+0x2f2>
     e0a:	dd 20       	and	r13, r13
     e0c:	29 f0       	breq	.+10     	; 0xe18 <vfprintf+0x310>
     e0e:	b7 01       	movw	r22, r14
     e10:	8d 2d       	mov	r24, r13
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     e18:	53 fc       	sbrc	r5, 3
     e1a:	09 c0       	rjmp	.+18     	; 0xe2e <vfprintf+0x326>
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <vfprintf+0x322>
     e1e:	b7 01       	movw	r22, r14
     e20:	80 e3       	ldi	r24, 0x30	; 48
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     e28:	6a 94       	dec	r6
     e2a:	61 10       	cpse	r6, r1
     e2c:	f8 cf       	rjmp	.-16     	; 0xe1e <vfprintf+0x316>
     e2e:	57 fe       	sbrs	r5, 7
     e30:	56 c0       	rjmp	.+172    	; 0xede <vfprintf+0x3d6>
     e32:	68 01       	movw	r12, r16
     e34:	17 ff       	sbrs	r17, 7
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <vfprintf+0x334>
     e38:	c1 2c       	mov	r12, r1
     e3a:	d1 2c       	mov	r13, r1
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	a8 01       	movw	r20, r16
     e42:	44 19       	sub	r20, r4
     e44:	51 09       	sbc	r21, r1
     e46:	5e 87       	std	Y+14, r21	; 0x0e
     e48:	4d 87       	std	Y+13, r20	; 0x0d
     e4a:	28 01       	movw	r4, r16
     e4c:	4c 18       	sub	r4, r12
     e4e:	5d 08       	sbc	r5, r13
     e50:	48 0c       	add	r4, r8
     e52:	59 1c       	adc	r5, r9
     e54:	87 2d       	mov	r24, r7
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	44 27       	eor	r20, r20
     e5a:	55 27       	eor	r21, r21
     e5c:	48 1b       	sub	r20, r24
     e5e:	59 0b       	sbc	r21, r25
     e60:	58 8b       	std	Y+16, r21	; 0x10
     e62:	4f 87       	std	Y+15, r20	; 0x0f
     e64:	5f ef       	ldi	r21, 0xFF	; 255
     e66:	c5 16       	cp	r12, r21
     e68:	d5 06       	cpc	r13, r21
     e6a:	49 f4       	brne	.+18     	; 0xe7e <vfprintf+0x376>
     e6c:	b7 01       	movw	r22, r14
     e6e:	8e e2       	ldi	r24, 0x2E	; 46
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	2a 8b       	std	Y+18, r18	; 0x12
     e74:	39 8b       	std	Y+17, r19	; 0x11
     e76:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     e7a:	39 89       	ldd	r19, Y+17	; 0x11
     e7c:	2a 89       	ldd	r18, Y+18	; 0x12
     e7e:	0c 15       	cp	r16, r12
     e80:	1d 05       	cpc	r17, r13
     e82:	54 f0       	brlt	.+20     	; 0xe98 <vfprintf+0x390>
     e84:	4d 85       	ldd	r20, Y+13	; 0x0d
     e86:	5e 85       	ldd	r21, Y+14	; 0x0e
     e88:	4c 15       	cp	r20, r12
     e8a:	5d 05       	cpc	r21, r13
     e8c:	2c f4       	brge	.+10     	; 0xe98 <vfprintf+0x390>
     e8e:	f2 01       	movw	r30, r4
     e90:	e2 0f       	add	r30, r18
     e92:	f3 1f       	adc	r31, r19
     e94:	81 81       	ldd	r24, Z+1	; 0x01
     e96:	01 c0       	rjmp	.+2      	; 0xe9a <vfprintf+0x392>
     e98:	80 e3       	ldi	r24, 0x30	; 48
     e9a:	51 e0       	ldi	r21, 0x01	; 1
     e9c:	c5 1a       	sub	r12, r21
     e9e:	d1 08       	sbc	r13, r1
     ea0:	2f 5f       	subi	r18, 0xFF	; 255
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	4f 85       	ldd	r20, Y+15	; 0x0f
     ea6:	58 89       	ldd	r21, Y+16	; 0x10
     ea8:	c4 16       	cp	r12, r20
     eaa:	d5 06       	cpc	r13, r21
     eac:	4c f0       	brlt	.+18     	; 0xec0 <vfprintf+0x3b8>
     eae:	b7 01       	movw	r22, r14
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	2a 8b       	std	Y+18, r18	; 0x12
     eb4:	39 8b       	std	Y+17, r19	; 0x11
     eb6:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     eba:	2a 89       	ldd	r18, Y+18	; 0x12
     ebc:	39 89       	ldd	r19, Y+17	; 0x11
     ebe:	d2 cf       	rjmp	.-92     	; 0xe64 <vfprintf+0x35c>
     ec0:	c0 16       	cp	r12, r16
     ec2:	d1 06       	cpc	r13, r17
     ec4:	49 f4       	brne	.+18     	; 0xed8 <vfprintf+0x3d0>
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	96 33       	cpi	r25, 0x36	; 54
     eca:	28 f4       	brcc	.+10     	; 0xed6 <vfprintf+0x3ce>
     ecc:	95 33       	cpi	r25, 0x35	; 53
     ece:	21 f4       	brne	.+8      	; 0xed8 <vfprintf+0x3d0>
     ed0:	5c 85       	ldd	r21, Y+12	; 0x0c
     ed2:	54 fd       	sbrc	r21, 4
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <vfprintf+0x3d0>
     ed6:	81 e3       	ldi	r24, 0x31	; 49
     ed8:	b7 01       	movw	r22, r14
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	4a c0       	rjmp	.+148    	; 0xf72 <vfprintf+0x46a>
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	81 33       	cpi	r24, 0x31	; 49
     ee2:	19 f0       	breq	.+6      	; 0xeea <vfprintf+0x3e2>
     ee4:	4c 85       	ldd	r20, Y+12	; 0x0c
     ee6:	4f 7e       	andi	r20, 0xEF	; 239
     ee8:	4c 87       	std	Y+12, r20	; 0x0c
     eea:	b7 01       	movw	r22, r14
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     ef2:	71 10       	cpse	r7, r1
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <vfprintf+0x3f8>
     ef6:	54 fe       	sbrs	r5, 4
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <vfprintf+0x41e>
     efa:	85 e4       	ldi	r24, 0x45	; 69
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	15 c0       	rjmp	.+42     	; 0xf2a <vfprintf+0x422>
     f00:	b7 01       	movw	r22, r14
     f02:	8e e2       	ldi	r24, 0x2E	; 46
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     f0a:	42 e0       	ldi	r20, 0x02	; 2
     f0c:	d4 2e       	mov	r13, r20
     f0e:	f4 01       	movw	r30, r8
     f10:	ed 0d       	add	r30, r13
     f12:	f1 1d       	adc	r31, r1
     f14:	d3 94       	inc	r13
     f16:	b7 01       	movw	r22, r14
     f18:	80 81       	ld	r24, Z
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     f20:	7a 94       	dec	r7
     f22:	a9 f7       	brne	.-22     	; 0xf0e <vfprintf+0x406>
     f24:	e8 cf       	rjmp	.-48     	; 0xef6 <vfprintf+0x3ee>
     f26:	85 e6       	ldi	r24, 0x65	; 101
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	b7 01       	movw	r22, r14
     f2c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     f30:	17 fd       	sbrc	r17, 7
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <vfprintf+0x438>
     f34:	01 15       	cp	r16, r1
     f36:	11 05       	cpc	r17, r1
     f38:	41 f4       	brne	.+16     	; 0xf4a <vfprintf+0x442>
     f3a:	5c 85       	ldd	r21, Y+12	; 0x0c
     f3c:	54 ff       	sbrs	r21, 4
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <vfprintf+0x442>
     f40:	11 95       	neg	r17
     f42:	01 95       	neg	r16
     f44:	11 09       	sbc	r17, r1
     f46:	8d e2       	ldi	r24, 0x2D	; 45
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <vfprintf+0x444>
     f4a:	8b e2       	ldi	r24, 0x2B	; 43
     f4c:	b7 01       	movw	r22, r14
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     f54:	80 e3       	ldi	r24, 0x30	; 48
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <vfprintf+0x456>
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	0a 50       	subi	r16, 0x0A	; 10
     f5c:	11 09       	sbc	r17, r1
     f5e:	0a 30       	cpi	r16, 0x0A	; 10
     f60:	11 05       	cpc	r17, r1
     f62:	d4 f7       	brge	.-12     	; 0xf58 <vfprintf+0x450>
     f64:	b7 01       	movw	r22, r14
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     f6c:	b7 01       	movw	r22, r14
     f6e:	c8 01       	movw	r24, r16
     f70:	c0 96       	adiw	r24, 0x30	; 48
     f72:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
     f76:	50 c1       	rjmp	.+672    	; 0x1218 <vfprintf+0x710>
     f78:	83 36       	cpi	r24, 0x63	; 99
     f7a:	31 f0       	breq	.+12     	; 0xf88 <vfprintf+0x480>
     f7c:	83 37       	cpi	r24, 0x73	; 115
     f7e:	81 f0       	breq	.+32     	; 0xfa0 <vfprintf+0x498>
     f80:	83 35       	cpi	r24, 0x53	; 83
     f82:	09 f0       	breq	.+2      	; 0xf86 <vfprintf+0x47e>
     f84:	5e c0       	rjmp	.+188    	; 0x1042 <vfprintf+0x53a>
     f86:	24 c0       	rjmp	.+72     	; 0xfd0 <vfprintf+0x4c8>
     f88:	56 01       	movw	r10, r12
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	a8 0e       	add	r10, r24
     f8e:	b1 1c       	adc	r11, r1
     f90:	f6 01       	movw	r30, r12
     f92:	80 81       	ld	r24, Z
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	cc 24       	eor	r12, r12
     f98:	c3 94       	inc	r12
     f9a:	d1 2c       	mov	r13, r1
     f9c:	84 01       	movw	r16, r8
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <vfprintf+0x4c0>
     fa0:	56 01       	movw	r10, r12
     fa2:	f2 e0       	ldi	r31, 0x02	; 2
     fa4:	af 0e       	add	r10, r31
     fa6:	b1 1c       	adc	r11, r1
     fa8:	f6 01       	movw	r30, r12
     faa:	00 81       	ld	r16, Z
     fac:	11 81       	ldd	r17, Z+1	; 0x01
     fae:	26 ff       	sbrs	r18, 6
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <vfprintf+0x4b0>
     fb2:	67 2d       	mov	r22, r7
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <vfprintf+0x4b4>
     fb8:	6f ef       	ldi	r22, 0xFF	; 255
     fba:	7f ef       	ldi	r23, 0xFF	; 255
     fbc:	c8 01       	movw	r24, r16
     fbe:	2a 8b       	std	Y+18, r18	; 0x12
     fc0:	0e 94 41 0a 	call	0x1482	; 0x1482 <strnlen>
     fc4:	6c 01       	movw	r12, r24
     fc6:	2a 89       	ldd	r18, Y+18	; 0x12
     fc8:	9f e7       	ldi	r25, 0x7F	; 127
     fca:	59 2e       	mov	r5, r25
     fcc:	52 22       	and	r5, r18
     fce:	17 c0       	rjmp	.+46     	; 0xffe <vfprintf+0x4f6>
     fd0:	56 01       	movw	r10, r12
     fd2:	f2 e0       	ldi	r31, 0x02	; 2
     fd4:	af 0e       	add	r10, r31
     fd6:	b1 1c       	adc	r11, r1
     fd8:	f6 01       	movw	r30, r12
     fda:	00 81       	ld	r16, Z
     fdc:	11 81       	ldd	r17, Z+1	; 0x01
     fde:	26 ff       	sbrs	r18, 6
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <vfprintf+0x4e0>
     fe2:	67 2d       	mov	r22, r7
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <vfprintf+0x4e4>
     fe8:	6f ef       	ldi	r22, 0xFF	; 255
     fea:	7f ef       	ldi	r23, 0xFF	; 255
     fec:	c8 01       	movw	r24, r16
     fee:	2a 8b       	std	Y+18, r18	; 0x12
     ff0:	0e 94 2f 0a 	call	0x145e	; 0x145e <strnlen_P>
     ff4:	6c 01       	movw	r12, r24
     ff6:	2a 89       	ldd	r18, Y+18	; 0x12
     ff8:	80 e8       	ldi	r24, 0x80	; 128
     ffa:	58 2e       	mov	r5, r24
     ffc:	52 2a       	or	r5, r18
     ffe:	53 fc       	sbrc	r5, 3
    1000:	1c c0       	rjmp	.+56     	; 0x103a <vfprintf+0x532>
    1002:	06 c0       	rjmp	.+12     	; 0x1010 <vfprintf+0x508>
    1004:	b7 01       	movw	r22, r14
    1006:	80 e2       	ldi	r24, 0x20	; 32
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
    100e:	6a 94       	dec	r6
    1010:	86 2d       	mov	r24, r6
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	c8 16       	cp	r12, r24
    1016:	d9 06       	cpc	r13, r25
    1018:	a8 f3       	brcs	.-22     	; 0x1004 <vfprintf+0x4fc>
    101a:	0f c0       	rjmp	.+30     	; 0x103a <vfprintf+0x532>
    101c:	f8 01       	movw	r30, r16
    101e:	57 fc       	sbrc	r5, 7
    1020:	85 91       	lpm	r24, Z+
    1022:	57 fe       	sbrs	r5, 7
    1024:	81 91       	ld	r24, Z+
    1026:	8f 01       	movw	r16, r30
    1028:	b7 01       	movw	r22, r14
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
    1030:	61 10       	cpse	r6, r1
    1032:	6a 94       	dec	r6
    1034:	f1 e0       	ldi	r31, 0x01	; 1
    1036:	cf 1a       	sub	r12, r31
    1038:	d1 08       	sbc	r13, r1
    103a:	c1 14       	cp	r12, r1
    103c:	d1 04       	cpc	r13, r1
    103e:	71 f7       	brne	.-36     	; 0x101c <vfprintf+0x514>
    1040:	eb c0       	rjmp	.+470    	; 0x1218 <vfprintf+0x710>
    1042:	84 36       	cpi	r24, 0x64	; 100
    1044:	11 f0       	breq	.+4      	; 0x104a <vfprintf+0x542>
    1046:	89 36       	cpi	r24, 0x69	; 105
    1048:	51 f5       	brne	.+84     	; 0x109e <vfprintf+0x596>
    104a:	56 01       	movw	r10, r12
    104c:	27 ff       	sbrs	r18, 7
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <vfprintf+0x55a>
    1050:	44 e0       	ldi	r20, 0x04	; 4
    1052:	a4 0e       	add	r10, r20
    1054:	b1 1c       	adc	r11, r1
    1056:	f6 01       	movw	r30, r12
    1058:	60 81       	ld	r22, Z
    105a:	71 81       	ldd	r23, Z+1	; 0x01
    105c:	82 81       	ldd	r24, Z+2	; 0x02
    105e:	93 81       	ldd	r25, Z+3	; 0x03
    1060:	0a c0       	rjmp	.+20     	; 0x1076 <vfprintf+0x56e>
    1062:	f2 e0       	ldi	r31, 0x02	; 2
    1064:	af 0e       	add	r10, r31
    1066:	b1 1c       	adc	r11, r1
    1068:	f6 01       	movw	r30, r12
    106a:	60 81       	ld	r22, Z
    106c:	71 81       	ldd	r23, Z+1	; 0x01
    106e:	88 27       	eor	r24, r24
    1070:	77 fd       	sbrc	r23, 7
    1072:	80 95       	com	r24
    1074:	98 2f       	mov	r25, r24
    1076:	12 2f       	mov	r17, r18
    1078:	1f 76       	andi	r17, 0x6F	; 111
    107a:	97 ff       	sbrs	r25, 7
    107c:	08 c0       	rjmp	.+16     	; 0x108e <vfprintf+0x586>
    107e:	90 95       	com	r25
    1080:	80 95       	com	r24
    1082:	70 95       	com	r23
    1084:	61 95       	neg	r22
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	8f 4f       	sbci	r24, 0xFF	; 255
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	10 68       	ori	r17, 0x80	; 128
    108e:	2a e0       	ldi	r18, 0x0A	; 10
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	a4 01       	movw	r20, r8
    1094:	0e 94 a7 0a 	call	0x154e	; 0x154e <__ultoa_invert>
    1098:	d8 2e       	mov	r13, r24
    109a:	d8 18       	sub	r13, r8
    109c:	40 c0       	rjmp	.+128    	; 0x111e <vfprintf+0x616>
    109e:	12 2f       	mov	r17, r18
    10a0:	85 37       	cpi	r24, 0x75	; 117
    10a2:	21 f4       	brne	.+8      	; 0x10ac <vfprintf+0x5a4>
    10a4:	1f 7e       	andi	r17, 0xEF	; 239
    10a6:	2a e0       	ldi	r18, 0x0A	; 10
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	1f c0       	rjmp	.+62     	; 0x10ea <vfprintf+0x5e2>
    10ac:	19 7f       	andi	r17, 0xF9	; 249
    10ae:	8f 36       	cpi	r24, 0x6F	; 111
    10b0:	a1 f0       	breq	.+40     	; 0x10da <vfprintf+0x5d2>
    10b2:	20 f4       	brcc	.+8      	; 0x10bc <vfprintf+0x5b4>
    10b4:	88 35       	cpi	r24, 0x58	; 88
    10b6:	09 f0       	breq	.+2      	; 0x10ba <vfprintf+0x5b2>
    10b8:	b2 c0       	rjmp	.+356    	; 0x121e <vfprintf+0x716>
    10ba:	0b c0       	rjmp	.+22     	; 0x10d2 <vfprintf+0x5ca>
    10bc:	80 37       	cpi	r24, 0x70	; 112
    10be:	21 f0       	breq	.+8      	; 0x10c8 <vfprintf+0x5c0>
    10c0:	88 37       	cpi	r24, 0x78	; 120
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <vfprintf+0x5be>
    10c4:	ac c0       	rjmp	.+344    	; 0x121e <vfprintf+0x716>
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <vfprintf+0x5c2>
    10c8:	10 61       	ori	r17, 0x10	; 16
    10ca:	14 ff       	sbrs	r17, 4
    10cc:	09 c0       	rjmp	.+18     	; 0x10e0 <vfprintf+0x5d8>
    10ce:	14 60       	ori	r17, 0x04	; 4
    10d0:	07 c0       	rjmp	.+14     	; 0x10e0 <vfprintf+0x5d8>
    10d2:	24 ff       	sbrs	r18, 4
    10d4:	08 c0       	rjmp	.+16     	; 0x10e6 <vfprintf+0x5de>
    10d6:	16 60       	ori	r17, 0x06	; 6
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <vfprintf+0x5de>
    10da:	28 e0       	ldi	r18, 0x08	; 8
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <vfprintf+0x5e2>
    10e0:	20 e1       	ldi	r18, 0x10	; 16
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <vfprintf+0x5e2>
    10e6:	20 e1       	ldi	r18, 0x10	; 16
    10e8:	32 e0       	ldi	r19, 0x02	; 2
    10ea:	56 01       	movw	r10, r12
    10ec:	17 ff       	sbrs	r17, 7
    10ee:	09 c0       	rjmp	.+18     	; 0x1102 <vfprintf+0x5fa>
    10f0:	f4 e0       	ldi	r31, 0x04	; 4
    10f2:	af 0e       	add	r10, r31
    10f4:	b1 1c       	adc	r11, r1
    10f6:	f6 01       	movw	r30, r12
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	08 c0       	rjmp	.+16     	; 0x1112 <vfprintf+0x60a>
    1102:	f2 e0       	ldi	r31, 0x02	; 2
    1104:	af 0e       	add	r10, r31
    1106:	b1 1c       	adc	r11, r1
    1108:	f6 01       	movw	r30, r12
    110a:	60 81       	ld	r22, Z
    110c:	71 81       	ldd	r23, Z+1	; 0x01
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a4 01       	movw	r20, r8
    1114:	0e 94 a7 0a 	call	0x154e	; 0x154e <__ultoa_invert>
    1118:	d8 2e       	mov	r13, r24
    111a:	d8 18       	sub	r13, r8
    111c:	1f 77       	andi	r17, 0x7F	; 127
    111e:	16 ff       	sbrs	r17, 6
    1120:	0b c0       	rjmp	.+22     	; 0x1138 <vfprintf+0x630>
    1122:	21 2f       	mov	r18, r17
    1124:	2e 7f       	andi	r18, 0xFE	; 254
    1126:	d7 14       	cp	r13, r7
    1128:	50 f4       	brcc	.+20     	; 0x113e <vfprintf+0x636>
    112a:	14 ff       	sbrs	r17, 4
    112c:	0a c0       	rjmp	.+20     	; 0x1142 <vfprintf+0x63a>
    112e:	12 fd       	sbrc	r17, 2
    1130:	08 c0       	rjmp	.+16     	; 0x1142 <vfprintf+0x63a>
    1132:	21 2f       	mov	r18, r17
    1134:	2e 7e       	andi	r18, 0xEE	; 238
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <vfprintf+0x63a>
    1138:	0d 2d       	mov	r16, r13
    113a:	21 2f       	mov	r18, r17
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <vfprintf+0x63c>
    113e:	0d 2d       	mov	r16, r13
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <vfprintf+0x63c>
    1142:	07 2d       	mov	r16, r7
    1144:	24 ff       	sbrs	r18, 4
    1146:	0c c0       	rjmp	.+24     	; 0x1160 <vfprintf+0x658>
    1148:	fe 01       	movw	r30, r28
    114a:	ed 0d       	add	r30, r13
    114c:	f1 1d       	adc	r31, r1
    114e:	80 81       	ld	r24, Z
    1150:	80 33       	cpi	r24, 0x30	; 48
    1152:	11 f4       	brne	.+4      	; 0x1158 <vfprintf+0x650>
    1154:	29 7e       	andi	r18, 0xE9	; 233
    1156:	08 c0       	rjmp	.+16     	; 0x1168 <vfprintf+0x660>
    1158:	22 ff       	sbrs	r18, 2
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <vfprintf+0x65e>
    115c:	0e 5f       	subi	r16, 0xFE	; 254
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <vfprintf+0x660>
    1160:	82 2f       	mov	r24, r18
    1162:	86 78       	andi	r24, 0x86	; 134
    1164:	09 f0       	breq	.+2      	; 0x1168 <vfprintf+0x660>
    1166:	0f 5f       	subi	r16, 0xFF	; 255
    1168:	23 fd       	sbrc	r18, 3
    116a:	14 c0       	rjmp	.+40     	; 0x1194 <vfprintf+0x68c>
    116c:	20 ff       	sbrs	r18, 0
    116e:	0f c0       	rjmp	.+30     	; 0x118e <vfprintf+0x686>
    1170:	7d 2c       	mov	r7, r13
    1172:	06 15       	cp	r16, r6
    1174:	60 f4       	brcc	.+24     	; 0x118e <vfprintf+0x686>
    1176:	76 0c       	add	r7, r6
    1178:	70 1a       	sub	r7, r16
    117a:	06 2d       	mov	r16, r6
    117c:	08 c0       	rjmp	.+16     	; 0x118e <vfprintf+0x686>
    117e:	b7 01       	movw	r22, r14
    1180:	80 e2       	ldi	r24, 0x20	; 32
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	2a 8b       	std	Y+18, r18	; 0x12
    1186:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
    118a:	0f 5f       	subi	r16, 0xFF	; 255
    118c:	2a 89       	ldd	r18, Y+18	; 0x12
    118e:	06 15       	cp	r16, r6
    1190:	b0 f3       	brcs	.-20     	; 0x117e <vfprintf+0x676>
    1192:	04 c0       	rjmp	.+8      	; 0x119c <vfprintf+0x694>
    1194:	06 15       	cp	r16, r6
    1196:	10 f4       	brcc	.+4      	; 0x119c <vfprintf+0x694>
    1198:	60 1a       	sub	r6, r16
    119a:	01 c0       	rjmp	.+2      	; 0x119e <vfprintf+0x696>
    119c:	61 2c       	mov	r6, r1
    119e:	24 ff       	sbrs	r18, 4
    11a0:	12 c0       	rjmp	.+36     	; 0x11c6 <vfprintf+0x6be>
    11a2:	b7 01       	movw	r22, r14
    11a4:	80 e3       	ldi	r24, 0x30	; 48
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	2a 8b       	std	Y+18, r18	; 0x12
    11aa:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
    11ae:	2a 89       	ldd	r18, Y+18	; 0x12
    11b0:	22 ff       	sbrs	r18, 2
    11b2:	1e c0       	rjmp	.+60     	; 0x11f0 <vfprintf+0x6e8>
    11b4:	21 ff       	sbrs	r18, 1
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <vfprintf+0x6b6>
    11b8:	88 e5       	ldi	r24, 0x58	; 88
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <vfprintf+0x6ba>
    11be:	88 e7       	ldi	r24, 0x78	; 120
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	b7 01       	movw	r22, r14
    11c4:	0c c0       	rjmp	.+24     	; 0x11de <vfprintf+0x6d6>
    11c6:	82 2f       	mov	r24, r18
    11c8:	86 78       	andi	r24, 0x86	; 134
    11ca:	91 f0       	breq	.+36     	; 0x11f0 <vfprintf+0x6e8>
    11cc:	21 fd       	sbrc	r18, 1
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <vfprintf+0x6cc>
    11d0:	80 e2       	ldi	r24, 0x20	; 32
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <vfprintf+0x6ce>
    11d4:	8b e2       	ldi	r24, 0x2B	; 43
    11d6:	27 fd       	sbrc	r18, 7
    11d8:	8d e2       	ldi	r24, 0x2D	; 45
    11da:	b7 01       	movw	r22, r14
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <vfprintf+0x6e8>
    11e4:	b7 01       	movw	r22, r14
    11e6:	80 e3       	ldi	r24, 0x30	; 48
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
    11ee:	7a 94       	dec	r7
    11f0:	d7 14       	cp	r13, r7
    11f2:	c0 f3       	brcs	.-16     	; 0x11e4 <vfprintf+0x6dc>
    11f4:	da 94       	dec	r13
    11f6:	f4 01       	movw	r30, r8
    11f8:	ed 0d       	add	r30, r13
    11fa:	f1 1d       	adc	r31, r1
    11fc:	b7 01       	movw	r22, r14
    11fe:	80 81       	ld	r24, Z
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
    1206:	d1 10       	cpse	r13, r1
    1208:	f5 cf       	rjmp	.-22     	; 0x11f4 <vfprintf+0x6ec>
    120a:	06 c0       	rjmp	.+12     	; 0x1218 <vfprintf+0x710>
    120c:	b7 01       	movw	r22, r14
    120e:	80 e2       	ldi	r24, 0x20	; 32
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 4c 0a 	call	0x1498	; 0x1498 <fputc>
    1216:	6a 94       	dec	r6
    1218:	61 10       	cpse	r6, r1
    121a:	f8 cf       	rjmp	.-16     	; 0x120c <vfprintf+0x704>
    121c:	99 cc       	rjmp	.-1742   	; 0xb50 <vfprintf+0x48>
    121e:	f7 01       	movw	r30, r14
    1220:	26 81       	ldd	r18, Z+6	; 0x06
    1222:	37 81       	ldd	r19, Z+7	; 0x07
    1224:	02 c0       	rjmp	.+4      	; 0x122a <vfprintf+0x722>
    1226:	2f ef       	ldi	r18, 0xFF	; 255
    1228:	3f ef       	ldi	r19, 0xFF	; 255
    122a:	c9 01       	movw	r24, r18
    122c:	62 96       	adiw	r28, 0x12	; 18
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	df 90       	pop	r13
    1246:	cf 90       	pop	r12
    1248:	bf 90       	pop	r11
    124a:	af 90       	pop	r10
    124c:	9f 90       	pop	r9
    124e:	8f 90       	pop	r8
    1250:	7f 90       	pop	r7
    1252:	6f 90       	pop	r6
    1254:	5f 90       	pop	r5
    1256:	4f 90       	pop	r4
    1258:	3f 90       	pop	r3
    125a:	2f 90       	pop	r2
    125c:	08 95       	ret

0000125e <__udivmodhi4>:
    125e:	aa 1b       	sub	r26, r26
    1260:	bb 1b       	sub	r27, r27
    1262:	51 e1       	ldi	r21, 0x11	; 17
    1264:	07 c0       	rjmp	.+14     	; 0x1274 <__udivmodhi4_ep>

00001266 <__udivmodhi4_loop>:
    1266:	aa 1f       	adc	r26, r26
    1268:	bb 1f       	adc	r27, r27
    126a:	a6 17       	cp	r26, r22
    126c:	b7 07       	cpc	r27, r23
    126e:	10 f0       	brcs	.+4      	; 0x1274 <__udivmodhi4_ep>
    1270:	a6 1b       	sub	r26, r22
    1272:	b7 0b       	sbc	r27, r23

00001274 <__udivmodhi4_ep>:
    1274:	88 1f       	adc	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	5a 95       	dec	r21
    127a:	a9 f7       	brne	.-22     	; 0x1266 <__udivmodhi4_loop>
    127c:	80 95       	com	r24
    127e:	90 95       	com	r25
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	08 95       	ret

00001286 <__divmodhi4>:
    1286:	97 fb       	bst	r25, 7
    1288:	07 2e       	mov	r0, r23
    128a:	16 f4       	brtc	.+4      	; 0x1290 <__divmodhi4+0xa>
    128c:	00 94       	com	r0
    128e:	07 d0       	rcall	.+14     	; 0x129e <__divmodhi4_neg1>
    1290:	77 fd       	sbrc	r23, 7
    1292:	09 d0       	rcall	.+18     	; 0x12a6 <__divmodhi4_neg2>
    1294:	0e 94 2f 09 	call	0x125e	; 0x125e <__udivmodhi4>
    1298:	07 fc       	sbrc	r0, 7
    129a:	05 d0       	rcall	.+10     	; 0x12a6 <__divmodhi4_neg2>
    129c:	3e f4       	brtc	.+14     	; 0x12ac <__divmodhi4_exit>

0000129e <__divmodhi4_neg1>:
    129e:	90 95       	com	r25
    12a0:	81 95       	neg	r24
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	08 95       	ret

000012a6 <__divmodhi4_neg2>:
    12a6:	70 95       	com	r23
    12a8:	61 95       	neg	r22
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255

000012ac <__divmodhi4_exit>:
    12ac:	08 95       	ret

000012ae <__ftoa_engine>:
    12ae:	28 30       	cpi	r18, 0x08	; 8
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <__ftoa_engine+0x6>
    12b2:	27 e0       	ldi	r18, 0x07	; 7
    12b4:	33 27       	eor	r19, r19
    12b6:	da 01       	movw	r26, r20
    12b8:	99 0f       	add	r25, r25
    12ba:	31 1d       	adc	r19, r1
    12bc:	87 fd       	sbrc	r24, 7
    12be:	91 60       	ori	r25, 0x01	; 1
    12c0:	00 96       	adiw	r24, 0x00	; 0
    12c2:	61 05       	cpc	r22, r1
    12c4:	71 05       	cpc	r23, r1
    12c6:	39 f4       	brne	.+14     	; 0x12d6 <__ftoa_engine+0x28>
    12c8:	32 60       	ori	r19, 0x02	; 2
    12ca:	2e 5f       	subi	r18, 0xFE	; 254
    12cc:	3d 93       	st	X+, r19
    12ce:	30 e3       	ldi	r19, 0x30	; 48
    12d0:	2a 95       	dec	r18
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <__ftoa_engine+0x1e>
    12d4:	08 95       	ret
    12d6:	9f 3f       	cpi	r25, 0xFF	; 255
    12d8:	30 f0       	brcs	.+12     	; 0x12e6 <__ftoa_engine+0x38>
    12da:	80 38       	cpi	r24, 0x80	; 128
    12dc:	71 05       	cpc	r23, r1
    12de:	61 05       	cpc	r22, r1
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <__ftoa_engine+0x36>
    12e2:	3c 5f       	subi	r19, 0xFC	; 252
    12e4:	3c 5f       	subi	r19, 0xFC	; 252
    12e6:	3d 93       	st	X+, r19
    12e8:	91 30       	cpi	r25, 0x01	; 1
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <__ftoa_engine+0x40>
    12ec:	80 68       	ori	r24, 0x80	; 128
    12ee:	91 1d       	adc	r25, r1
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	1f 93       	push	r17
    12f6:	0f 93       	push	r16
    12f8:	ff 92       	push	r15
    12fa:	ef 92       	push	r14
    12fc:	19 2f       	mov	r17, r25
    12fe:	98 7f       	andi	r25, 0xF8	; 248
    1300:	96 95       	lsr	r25
    1302:	e9 2f       	mov	r30, r25
    1304:	96 95       	lsr	r25
    1306:	96 95       	lsr	r25
    1308:	e9 0f       	add	r30, r25
    130a:	ff 27       	eor	r31, r31
    130c:	e3 5b       	subi	r30, 0xB3	; 179
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	99 27       	eor	r25, r25
    1312:	33 27       	eor	r19, r19
    1314:	ee 24       	eor	r14, r14
    1316:	ff 24       	eor	r15, r15
    1318:	a7 01       	movw	r20, r14
    131a:	e7 01       	movw	r28, r14
    131c:	05 90       	lpm	r0, Z+
    131e:	08 94       	sec
    1320:	07 94       	ror	r0
    1322:	28 f4       	brcc	.+10     	; 0x132e <__ftoa_engine+0x80>
    1324:	36 0f       	add	r19, r22
    1326:	e7 1e       	adc	r14, r23
    1328:	f8 1e       	adc	r15, r24
    132a:	49 1f       	adc	r20, r25
    132c:	51 1d       	adc	r21, r1
    132e:	66 0f       	add	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	06 94       	lsr	r0
    1338:	a1 f7       	brne	.-24     	; 0x1322 <__ftoa_engine+0x74>
    133a:	05 90       	lpm	r0, Z+
    133c:	07 94       	ror	r0
    133e:	28 f4       	brcc	.+10     	; 0x134a <__ftoa_engine+0x9c>
    1340:	e7 0e       	add	r14, r23
    1342:	f8 1e       	adc	r15, r24
    1344:	49 1f       	adc	r20, r25
    1346:	56 1f       	adc	r21, r22
    1348:	c1 1d       	adc	r28, r1
    134a:	77 0f       	add	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	66 1f       	adc	r22, r22
    1352:	06 94       	lsr	r0
    1354:	a1 f7       	brne	.-24     	; 0x133e <__ftoa_engine+0x90>
    1356:	05 90       	lpm	r0, Z+
    1358:	07 94       	ror	r0
    135a:	28 f4       	brcc	.+10     	; 0x1366 <__ftoa_engine+0xb8>
    135c:	f8 0e       	add	r15, r24
    135e:	49 1f       	adc	r20, r25
    1360:	56 1f       	adc	r21, r22
    1362:	c7 1f       	adc	r28, r23
    1364:	d1 1d       	adc	r29, r1
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	66 1f       	adc	r22, r22
    136c:	77 1f       	adc	r23, r23
    136e:	06 94       	lsr	r0
    1370:	a1 f7       	brne	.-24     	; 0x135a <__ftoa_engine+0xac>
    1372:	05 90       	lpm	r0, Z+
    1374:	07 94       	ror	r0
    1376:	20 f4       	brcc	.+8      	; 0x1380 <__ftoa_engine+0xd2>
    1378:	49 0f       	add	r20, r25
    137a:	56 1f       	adc	r21, r22
    137c:	c7 1f       	adc	r28, r23
    137e:	d8 1f       	adc	r29, r24
    1380:	99 0f       	add	r25, r25
    1382:	66 1f       	adc	r22, r22
    1384:	77 1f       	adc	r23, r23
    1386:	88 1f       	adc	r24, r24
    1388:	06 94       	lsr	r0
    138a:	a9 f7       	brne	.-22     	; 0x1376 <__ftoa_engine+0xc8>
    138c:	84 91       	lpm	r24, Z
    138e:	10 95       	com	r17
    1390:	17 70       	andi	r17, 0x07	; 7
    1392:	41 f0       	breq	.+16     	; 0x13a4 <__ftoa_engine+0xf6>
    1394:	d6 95       	lsr	r29
    1396:	c7 95       	ror	r28
    1398:	57 95       	ror	r21
    139a:	47 95       	ror	r20
    139c:	f7 94       	ror	r15
    139e:	e7 94       	ror	r14
    13a0:	1a 95       	dec	r17
    13a2:	c1 f7       	brne	.-16     	; 0x1394 <__ftoa_engine+0xe6>
    13a4:	e3 ef       	ldi	r30, 0xF3	; 243
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	68 94       	set
    13aa:	15 90       	lpm	r1, Z+
    13ac:	15 91       	lpm	r17, Z+
    13ae:	35 91       	lpm	r19, Z+
    13b0:	65 91       	lpm	r22, Z+
    13b2:	95 91       	lpm	r25, Z+
    13b4:	05 90       	lpm	r0, Z+
    13b6:	7f e2       	ldi	r23, 0x2F	; 47
    13b8:	73 95       	inc	r23
    13ba:	e1 18       	sub	r14, r1
    13bc:	f1 0a       	sbc	r15, r17
    13be:	43 0b       	sbc	r20, r19
    13c0:	56 0b       	sbc	r21, r22
    13c2:	c9 0b       	sbc	r28, r25
    13c4:	d0 09       	sbc	r29, r0
    13c6:	c0 f7       	brcc	.-16     	; 0x13b8 <__ftoa_engine+0x10a>
    13c8:	e1 0c       	add	r14, r1
    13ca:	f1 1e       	adc	r15, r17
    13cc:	43 1f       	adc	r20, r19
    13ce:	56 1f       	adc	r21, r22
    13d0:	c9 1f       	adc	r28, r25
    13d2:	d0 1d       	adc	r29, r0
    13d4:	7e f4       	brtc	.+30     	; 0x13f4 <__ftoa_engine+0x146>
    13d6:	70 33       	cpi	r23, 0x30	; 48
    13d8:	11 f4       	brne	.+4      	; 0x13de <__ftoa_engine+0x130>
    13da:	8a 95       	dec	r24
    13dc:	e6 cf       	rjmp	.-52     	; 0x13aa <__ftoa_engine+0xfc>
    13de:	e8 94       	clt
    13e0:	01 50       	subi	r16, 0x01	; 1
    13e2:	30 f0       	brcs	.+12     	; 0x13f0 <__ftoa_engine+0x142>
    13e4:	08 0f       	add	r16, r24
    13e6:	0a f4       	brpl	.+2      	; 0x13ea <__ftoa_engine+0x13c>
    13e8:	00 27       	eor	r16, r16
    13ea:	02 17       	cp	r16, r18
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <__ftoa_engine+0x142>
    13ee:	20 2f       	mov	r18, r16
    13f0:	23 95       	inc	r18
    13f2:	02 2f       	mov	r16, r18
    13f4:	7a 33       	cpi	r23, 0x3A	; 58
    13f6:	28 f0       	brcs	.+10     	; 0x1402 <__ftoa_engine+0x154>
    13f8:	79 e3       	ldi	r23, 0x39	; 57
    13fa:	7d 93       	st	X+, r23
    13fc:	2a 95       	dec	r18
    13fe:	e9 f7       	brne	.-6      	; 0x13fa <__ftoa_engine+0x14c>
    1400:	10 c0       	rjmp	.+32     	; 0x1422 <__ftoa_engine+0x174>
    1402:	7d 93       	st	X+, r23
    1404:	2a 95       	dec	r18
    1406:	89 f6       	brne	.-94     	; 0x13aa <__ftoa_engine+0xfc>
    1408:	06 94       	lsr	r0
    140a:	97 95       	ror	r25
    140c:	67 95       	ror	r22
    140e:	37 95       	ror	r19
    1410:	17 95       	ror	r17
    1412:	17 94       	ror	r1
    1414:	e1 18       	sub	r14, r1
    1416:	f1 0a       	sbc	r15, r17
    1418:	43 0b       	sbc	r20, r19
    141a:	56 0b       	sbc	r21, r22
    141c:	c9 0b       	sbc	r28, r25
    141e:	d0 09       	sbc	r29, r0
    1420:	98 f0       	brcs	.+38     	; 0x1448 <__ftoa_engine+0x19a>
    1422:	23 95       	inc	r18
    1424:	7e 91       	ld	r23, -X
    1426:	73 95       	inc	r23
    1428:	7a 33       	cpi	r23, 0x3A	; 58
    142a:	08 f0       	brcs	.+2      	; 0x142e <__ftoa_engine+0x180>
    142c:	70 e3       	ldi	r23, 0x30	; 48
    142e:	7c 93       	st	X, r23
    1430:	20 13       	cpse	r18, r16
    1432:	b8 f7       	brcc	.-18     	; 0x1422 <__ftoa_engine+0x174>
    1434:	7e 91       	ld	r23, -X
    1436:	70 61       	ori	r23, 0x10	; 16
    1438:	7d 93       	st	X+, r23
    143a:	30 f0       	brcs	.+12     	; 0x1448 <__ftoa_engine+0x19a>
    143c:	83 95       	inc	r24
    143e:	71 e3       	ldi	r23, 0x31	; 49
    1440:	7d 93       	st	X+, r23
    1442:	70 e3       	ldi	r23, 0x30	; 48
    1444:	2a 95       	dec	r18
    1446:	e1 f7       	brne	.-8      	; 0x1440 <__ftoa_engine+0x192>
    1448:	11 24       	eor	r1, r1
    144a:	ef 90       	pop	r14
    144c:	ff 90       	pop	r15
    144e:	0f 91       	pop	r16
    1450:	1f 91       	pop	r17
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	99 27       	eor	r25, r25
    1458:	87 fd       	sbrc	r24, 7
    145a:	90 95       	com	r25
    145c:	08 95       	ret

0000145e <strnlen_P>:
    145e:	fc 01       	movw	r30, r24
    1460:	05 90       	lpm	r0, Z+
    1462:	61 50       	subi	r22, 0x01	; 1
    1464:	70 40       	sbci	r23, 0x00	; 0
    1466:	01 10       	cpse	r0, r1
    1468:	d8 f7       	brcc	.-10     	; 0x1460 <strnlen_P+0x2>
    146a:	80 95       	com	r24
    146c:	90 95       	com	r25
    146e:	8e 0f       	add	r24, r30
    1470:	9f 1f       	adc	r25, r31
    1472:	08 95       	ret

00001474 <strcpy>:
    1474:	fb 01       	movw	r30, r22
    1476:	dc 01       	movw	r26, r24
    1478:	01 90       	ld	r0, Z+
    147a:	0d 92       	st	X+, r0
    147c:	00 20       	and	r0, r0
    147e:	e1 f7       	brne	.-8      	; 0x1478 <strcpy+0x4>
    1480:	08 95       	ret

00001482 <strnlen>:
    1482:	fc 01       	movw	r30, r24
    1484:	61 50       	subi	r22, 0x01	; 1
    1486:	70 40       	sbci	r23, 0x00	; 0
    1488:	01 90       	ld	r0, Z+
    148a:	01 10       	cpse	r0, r1
    148c:	d8 f7       	brcc	.-10     	; 0x1484 <strnlen+0x2>
    148e:	80 95       	com	r24
    1490:	90 95       	com	r25
    1492:	8e 0f       	add	r24, r30
    1494:	9f 1f       	adc	r25, r31
    1496:	08 95       	ret

00001498 <fputc>:
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	8c 01       	movw	r16, r24
    14a2:	eb 01       	movw	r28, r22
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	81 fd       	sbrc	r24, 1
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <fputc+0x18>
    14aa:	0f ef       	ldi	r16, 0xFF	; 255
    14ac:	1f ef       	ldi	r17, 0xFF	; 255
    14ae:	1a c0       	rjmp	.+52     	; 0x14e4 <fputc+0x4c>
    14b0:	82 ff       	sbrs	r24, 2
    14b2:	0d c0       	rjmp	.+26     	; 0x14ce <fputc+0x36>
    14b4:	2e 81       	ldd	r18, Y+6	; 0x06
    14b6:	3f 81       	ldd	r19, Y+7	; 0x07
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	28 17       	cp	r18, r24
    14be:	39 07       	cpc	r19, r25
    14c0:	64 f4       	brge	.+24     	; 0x14da <fputc+0x42>
    14c2:	e8 81       	ld	r30, Y
    14c4:	f9 81       	ldd	r31, Y+1	; 0x01
    14c6:	01 93       	st	Z+, r16
    14c8:	f9 83       	std	Y+1, r31	; 0x01
    14ca:	e8 83       	st	Y, r30
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <fputc+0x42>
    14ce:	e8 85       	ldd	r30, Y+8	; 0x08
    14d0:	f9 85       	ldd	r31, Y+9	; 0x09
    14d2:	80 2f       	mov	r24, r16
    14d4:	09 95       	icall
    14d6:	89 2b       	or	r24, r25
    14d8:	41 f7       	brne	.-48     	; 0x14aa <fputc+0x12>
    14da:	8e 81       	ldd	r24, Y+6	; 0x06
    14dc:	9f 81       	ldd	r25, Y+7	; 0x07
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	9f 83       	std	Y+7, r25	; 0x07
    14e2:	8e 83       	std	Y+6, r24	; 0x06
    14e4:	c8 01       	movw	r24, r16
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	08 95       	ret

000014f0 <sprintf>:
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	2e 97       	sbiw	r28, 0x0e	; 14
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	0d 89       	ldd	r16, Y+21	; 0x15
    150a:	1e 89       	ldd	r17, Y+22	; 0x16
    150c:	86 e0       	ldi	r24, 0x06	; 6
    150e:	8c 83       	std	Y+4, r24	; 0x04
    1510:	1a 83       	std	Y+2, r17	; 0x02
    1512:	09 83       	std	Y+1, r16	; 0x01
    1514:	8f ef       	ldi	r24, 0xFF	; 255
    1516:	9f e7       	ldi	r25, 0x7F	; 127
    1518:	9e 83       	std	Y+6, r25	; 0x06
    151a:	8d 83       	std	Y+5, r24	; 0x05
    151c:	ce 01       	movw	r24, r28
    151e:	49 96       	adiw	r24, 0x19	; 25
    1520:	ac 01       	movw	r20, r24
    1522:	6f 89       	ldd	r22, Y+23	; 0x17
    1524:	78 8d       	ldd	r23, Y+24	; 0x18
    1526:	ce 01       	movw	r24, r28
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	0e 94 84 05 	call	0xb08	; 0xb08 <vfprintf>
    152e:	ef 81       	ldd	r30, Y+7	; 0x07
    1530:	f8 85       	ldd	r31, Y+8	; 0x08
    1532:	e0 0f       	add	r30, r16
    1534:	f1 1f       	adc	r31, r17
    1536:	10 82       	st	Z, r1
    1538:	2e 96       	adiw	r28, 0x0e	; 14
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	08 95       	ret

0000154e <__ultoa_invert>:
    154e:	fa 01       	movw	r30, r20
    1550:	aa 27       	eor	r26, r26
    1552:	28 30       	cpi	r18, 0x08	; 8
    1554:	51 f1       	breq	.+84     	; 0x15aa <__ultoa_invert+0x5c>
    1556:	20 31       	cpi	r18, 0x10	; 16
    1558:	81 f1       	breq	.+96     	; 0x15ba <__ultoa_invert+0x6c>
    155a:	e8 94       	clt
    155c:	6f 93       	push	r22
    155e:	6e 7f       	andi	r22, 0xFE	; 254
    1560:	6e 5f       	subi	r22, 0xFE	; 254
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	8f 4f       	sbci	r24, 0xFF	; 255
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	af 4f       	sbci	r26, 0xFF	; 255
    156a:	b1 e0       	ldi	r27, 0x01	; 1
    156c:	3e d0       	rcall	.+124    	; 0x15ea <__ultoa_invert+0x9c>
    156e:	b4 e0       	ldi	r27, 0x04	; 4
    1570:	3c d0       	rcall	.+120    	; 0x15ea <__ultoa_invert+0x9c>
    1572:	67 0f       	add	r22, r23
    1574:	78 1f       	adc	r23, r24
    1576:	89 1f       	adc	r24, r25
    1578:	9a 1f       	adc	r25, r26
    157a:	a1 1d       	adc	r26, r1
    157c:	68 0f       	add	r22, r24
    157e:	79 1f       	adc	r23, r25
    1580:	8a 1f       	adc	r24, r26
    1582:	91 1d       	adc	r25, r1
    1584:	a1 1d       	adc	r26, r1
    1586:	6a 0f       	add	r22, r26
    1588:	71 1d       	adc	r23, r1
    158a:	81 1d       	adc	r24, r1
    158c:	91 1d       	adc	r25, r1
    158e:	a1 1d       	adc	r26, r1
    1590:	20 d0       	rcall	.+64     	; 0x15d2 <__ultoa_invert+0x84>
    1592:	09 f4       	brne	.+2      	; 0x1596 <__ultoa_invert+0x48>
    1594:	68 94       	set
    1596:	3f 91       	pop	r19
    1598:	2a e0       	ldi	r18, 0x0A	; 10
    159a:	26 9f       	mul	r18, r22
    159c:	11 24       	eor	r1, r1
    159e:	30 19       	sub	r19, r0
    15a0:	30 5d       	subi	r19, 0xD0	; 208
    15a2:	31 93       	st	Z+, r19
    15a4:	de f6       	brtc	.-74     	; 0x155c <__ultoa_invert+0xe>
    15a6:	cf 01       	movw	r24, r30
    15a8:	08 95       	ret
    15aa:	46 2f       	mov	r20, r22
    15ac:	47 70       	andi	r20, 0x07	; 7
    15ae:	40 5d       	subi	r20, 0xD0	; 208
    15b0:	41 93       	st	Z+, r20
    15b2:	b3 e0       	ldi	r27, 0x03	; 3
    15b4:	0f d0       	rcall	.+30     	; 0x15d4 <__ultoa_invert+0x86>
    15b6:	c9 f7       	brne	.-14     	; 0x15aa <__ultoa_invert+0x5c>
    15b8:	f6 cf       	rjmp	.-20     	; 0x15a6 <__ultoa_invert+0x58>
    15ba:	46 2f       	mov	r20, r22
    15bc:	4f 70       	andi	r20, 0x0F	; 15
    15be:	40 5d       	subi	r20, 0xD0	; 208
    15c0:	4a 33       	cpi	r20, 0x3A	; 58
    15c2:	18 f0       	brcs	.+6      	; 0x15ca <__ultoa_invert+0x7c>
    15c4:	49 5d       	subi	r20, 0xD9	; 217
    15c6:	31 fd       	sbrc	r19, 1
    15c8:	40 52       	subi	r20, 0x20	; 32
    15ca:	41 93       	st	Z+, r20
    15cc:	02 d0       	rcall	.+4      	; 0x15d2 <__ultoa_invert+0x84>
    15ce:	a9 f7       	brne	.-22     	; 0x15ba <__ultoa_invert+0x6c>
    15d0:	ea cf       	rjmp	.-44     	; 0x15a6 <__ultoa_invert+0x58>
    15d2:	b4 e0       	ldi	r27, 0x04	; 4
    15d4:	a6 95       	lsr	r26
    15d6:	97 95       	ror	r25
    15d8:	87 95       	ror	r24
    15da:	77 95       	ror	r23
    15dc:	67 95       	ror	r22
    15de:	ba 95       	dec	r27
    15e0:	c9 f7       	brne	.-14     	; 0x15d4 <__ultoa_invert+0x86>
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	61 05       	cpc	r22, r1
    15e6:	71 05       	cpc	r23, r1
    15e8:	08 95       	ret
    15ea:	9b 01       	movw	r18, r22
    15ec:	ac 01       	movw	r20, r24
    15ee:	0a 2e       	mov	r0, r26
    15f0:	06 94       	lsr	r0
    15f2:	57 95       	ror	r21
    15f4:	47 95       	ror	r20
    15f6:	37 95       	ror	r19
    15f8:	27 95       	ror	r18
    15fa:	ba 95       	dec	r27
    15fc:	c9 f7       	brne	.-14     	; 0x15f0 <__ultoa_invert+0xa2>
    15fe:	62 0f       	add	r22, r18
    1600:	73 1f       	adc	r23, r19
    1602:	84 1f       	adc	r24, r20
    1604:	95 1f       	adc	r25, r21
    1606:	a0 1d       	adc	r26, r0
    1608:	08 95       	ret

0000160a <_exit>:
    160a:	f8 94       	cli

0000160c <__stop_program>:
    160c:	ff cf       	rjmp	.-2      	; 0x160c <__stop_program>
