
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001756  000017ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001756  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080010c  0080010c  000017f6  2**0
                  ALLOC
  3 .stab         00002cc4  00000000  00000000  000017f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009b4  00000000  00000000  000044bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00004e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b03  00000000  00000000  00004f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000815  00000000  00000000  00006a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bb3  00000000  00000000  0000725f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000428  00000000  00000000  00007e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005c4  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000013e0  00000000  00000000  00008800  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00009be0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 2a 03 	jmp	0x654	; 0x654 <__vector_12>
      34:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_13>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__vector_16>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_number>:
      cc:	43 61 70 61 63 69 74 61 6e 63 65 3d 00 00           Capacitance=..

000000da <LCD_initialize>:
      da:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000eb <__c.2006>:
      eb:	6e 61 6e 00                                         nan.

000000ef <__c.2004>:
      ef:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ff:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10f:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1af:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1bf:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1cf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1df:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e4       	ldi	r29, 0x40	; 64
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	e6 e5       	ldi	r30, 0x56	; 86
     202:	f7 e1       	ldi	r31, 0x17	; 23
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	ac 30       	cpi	r26, 0x0C	; 12
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	ac e0       	ldi	r26, 0x0C	; 12
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a5 33       	cpi	r26, 0x35	; 53
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 09 04 	call	0x812	; 0x812 <main>
     228:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     230:	98 2f       	mov	r25, r24
     232:	90 7f       	andi	r25, 0xF0	; 240
     234:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_RS;
     236:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     238:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23a:	ef e3       	ldi	r30, 0x3F	; 63
     23c:	ff e1       	ldi	r31, 0x1F	; 31
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <LCDsendChar+0xe>
     242:	00 c0       	rjmp	.+0      	; 0x244 <LCDsendChar+0x14>
     244:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     246:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     248:	40 98       	cbi	0x08, 0	; 8
     24a:	ef e3       	ldi	r30, 0x3F	; 63
     24c:	ff e1       	ldi	r31, 0x1F	; 31
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <LCDsendChar+0x1e>
     252:	00 c0       	rjmp	.+0      	; 0x254 <LCDsendChar+0x24>
     254:	00 00       	nop
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     256:	f0 e1       	ldi	r31, 0x10	; 16
     258:	8f 9f       	mul	r24, r31
     25a:	c0 01       	movw	r24, r0
     25c:	11 24       	eor	r1, r1
     25e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     260:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     262:	42 9a       	sbi	0x08, 2	; 8
     264:	8f e3       	ldi	r24, 0x3F	; 63
     266:	9f e1       	ldi	r25, 0x1F	; 31
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <LCDsendChar+0x38>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <LCDsendChar+0x3e>
     26e:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     270:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     272:	40 98       	cbi	0x08, 0	; 8
     274:	ef e3       	ldi	r30, 0x3F	; 63
     276:	ff e1       	ldi	r31, 0x1F	; 31
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <LCDsendChar+0x48>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <LCDsendChar+0x4e>
     27e:	00 00       	nop
     280:	08 95       	ret

00000282 <LCDsendCommand>:
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     282:	98 2f       	mov	r25, r24
     284:	90 7f       	andi	r25, 0xF0	; 240
     286:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_E;		
     288:	42 9a       	sbi	0x08, 2	; 8
     28a:	ef e3       	ldi	r30, 0x3F	; 63
     28c:	ff e1       	ldi	r31, 0x1F	; 31
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <LCDsendCommand+0xc>
     292:	00 c0       	rjmp	.+0      	; 0x294 <LCDsendCommand+0x12>
     294:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     296:	42 98       	cbi	0x08, 2	; 8
     298:	ef e3       	ldi	r30, 0x3F	; 63
     29a:	ff e1       	ldi	r31, 0x1F	; 31
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <LCDsendCommand+0x1a>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCDsendCommand+0x20>
     2a2:	00 00       	nop
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     2a4:	f0 e1       	ldi	r31, 0x10	; 16
     2a6:	8f 9f       	mul	r24, r31
     2a8:	c0 01       	movw	r24, r0
     2aa:	11 24       	eor	r1, r1
     2ac:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     2ae:	42 9a       	sbi	0x08, 2	; 8
     2b0:	8f e3       	ldi	r24, 0x3F	; 63
     2b2:	9f e1       	ldi	r25, 0x1F	; 31
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCDsendCommand+0x32>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCDsendCommand+0x38>
     2ba:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     2bc:	42 98       	cbi	0x08, 2	; 8
     2be:	ef e3       	ldi	r30, 0x3F	; 63
     2c0:	ff e1       	ldi	r31, 0x1F	; 31
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCDsendCommand+0x40>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCDsendCommand+0x46>
     2c8:	00 00       	nop
     2ca:	08 95       	ret

000002cc <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000002d2 <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000002d8 <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	1f 92       	push	r1
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	71 f0       	breq	.+28     	; 0x308 <LCDstring+0x30>
     2ec:	18 2f       	mov	r17, r24
     2ee:	7c 01       	movw	r14, r24
     2f0:	07 c0       	rjmp	.+14     	; 0x300 <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     2f2:	f7 01       	movw	r30, r14
     2f4:	81 91       	ld	r24, Z+
     2f6:	7f 01       	movw	r14, r30
     2f8:	69 83       	std	Y+1, r22	; 0x01
     2fa:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
     2fe:	69 81       	ldd	r22, Y+1	; 0x01

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     300:	8e 2d       	mov	r24, r14
     302:	81 1b       	sub	r24, r17
     304:	86 17       	cp	r24, r22
     306:	a8 f3       	brcs	.-22     	; 0x2f2 <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     308:	0f 90       	pop	r0
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	08 95       	ret

00000316 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     316:	62 30       	cpi	r22, 0x02	; 2
     318:	31 f0       	breq	.+12     	; 0x326 <LCDGotoXY+0x10>
     31a:	63 30       	cpi	r22, 0x03	; 3
     31c:	31 f0       	breq	.+12     	; 0x32a <LCDGotoXY+0x14>
     31e:	61 30       	cpi	r22, 0x01	; 1
     320:	29 f4       	brne	.+10     	; 0x32c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     322:	80 5c       	subi	r24, 0xC0	; 192
     324:	03 c0       	rjmp	.+6      	; 0x32c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     326:	8c 5e       	subi	r24, 0xEC	; 236
     328:	01 c0       	rjmp	.+2      	; 0x32c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     32a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     32c:	80 68       	ori	r24, 0x80	; 128
     32e:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

00000332 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	ec 01       	movw	r28, r24
     33a:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     33c:	64 2f       	mov	r22, r20
     33e:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	03 c0       	rjmp	.+6      	; 0x34c <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     346:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     34a:	1f 5f       	subi	r17, 0xFF	; 255
     34c:	fe 01       	movw	r30, r28
     34e:	e1 0f       	add	r30, r17
     350:	f1 1d       	adc	r31, r1
     352:	84 91       	lpm	r24, Z
     354:	81 11       	cpse	r24, r1
     356:	f7 cf       	rjmp	.-18     	; 0x346 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	08 95       	ret

00000360 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     36e:	88 e0       	ldi	r24, 0x08	; 8
     370:	68 9f       	mul	r22, r24
     372:	b0 01       	movw	r22, r0
     374:	11 24       	eor	r1, r1
     376:	80 e4       	ldi	r24, 0x40	; 64
     378:	e8 2e       	mov	r14, r24
     37a:	e6 2a       	or	r14, r22
	for (i=0; i<8; i++){
     37c:	c0 e0       	ldi	r28, 0x00	; 0
     37e:	d0 e0       	ldi	r29, 0x00	; 0
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     380:	f8 01       	movw	r30, r16
     382:	ec 0f       	add	r30, r28
     384:	fd 1f       	adc	r31, r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     386:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
     388:	8c 2f       	mov	r24, r28
     38a:	8e 0d       	add	r24, r14
     38c:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendChar(pcc);
     390:	8f 2d       	mov	r24, r15
     392:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     396:	21 96       	adiw	r28, 0x01	; 1
     398:	c8 30       	cpi	r28, 0x08	; 8
     39a:	d1 05       	cpc	r29, r1
     39c:	89 f7       	brne	.-30     	; 0x380 <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	08 95       	ret

000003ac <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	8f e5       	ldi	r24, 0x5F	; 95
     3b4:	9a ee       	ldi	r25, 0xEA	; 234
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <LCDinit+0xa>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCDinit+0x10>
     3bc:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     3be:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     3c0:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     3c2:	87 b1       	in	r24, 0x07	; 7
     3c4:	80 6f       	ori	r24, 0xF0	; 240
     3c6:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     3c8:	87 b1       	in	r24, 0x07	; 7
     3ca:	87 60       	ori	r24, 0x07	; 7
     3cc:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     3ce:	80 e3       	ldi	r24, 0x30	; 48
     3d0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     3d2:	42 9a       	sbi	0x08, 2	; 8
     3d4:	ef e3       	ldi	r30, 0x3F	; 63
     3d6:	ff e1       	ldi	r31, 0x1F	; 31
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCDinit+0x2c>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <LCDinit+0x32>
     3de:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     3e0:	42 98       	cbi	0x08, 2	; 8
     3e2:	ef e3       	ldi	r30, 0x3F	; 63
     3e4:	ff e1       	ldi	r31, 0x1F	; 31
     3e6:	31 97       	sbiw	r30, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCDinit+0x3a>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCDinit+0x40>
     3ec:	00 00       	nop
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     3ee:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     3f0:	42 9a       	sbi	0x08, 2	; 8
     3f2:	8f e3       	ldi	r24, 0x3F	; 63
     3f4:	9f e1       	ldi	r25, 0x1F	; 31
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCDinit+0x4a>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCDinit+0x50>
     3fc:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     3fe:	42 98       	cbi	0x08, 2	; 8
     400:	ef e3       	ldi	r30, 0x3F	; 63
     402:	ff e1       	ldi	r31, 0x1F	; 31
     404:	31 97       	sbiw	r30, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <LCDinit+0x58>
     408:	00 c0       	rjmp	.+0      	; 0x40a <LCDinit+0x5e>
     40a:	00 00       	nop
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     40c:	80 e2       	ldi	r24, 0x20	; 32
     40e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     410:	42 9a       	sbi	0x08, 2	; 8
     412:	8f e3       	ldi	r24, 0x3F	; 63
     414:	9f e1       	ldi	r25, 0x1F	; 31
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <LCDinit+0x6a>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <LCDinit+0x70>
     41c:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     41e:	42 98       	cbi	0x08, 2	; 8
     420:	ef e3       	ldi	r30, 0x3F	; 63
     422:	ff e1       	ldi	r31, 0x1F	; 31
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <LCDinit+0x78>
     428:	00 c0       	rjmp	.+0      	; 0x42a <LCDinit+0x7e>
     42a:	00 00       	nop
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     42c:	88 e2       	ldi	r24, 0x28	; 40
     42e:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     432:	8c e0       	ldi	r24, 0x0C	; 12
     434:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
     438:	cc e8       	ldi	r28, 0x8C	; 140
     43a:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     43c:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     43e:	16 2f       	mov	r17, r22
     440:	1f 5f       	subi	r17, 0xFF	; 255
     442:	ce 01       	movw	r24, r28
     444:	0e 94 b0 01 	call	0x360	; 0x360 <LCDdefinechar>
     448:	28 96       	adiw	r28, 0x08	; 8
     44a:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     44c:	18 30       	cpi	r17, 0x08	; 8
     44e:	b9 f7       	brne	.-18     	; 0x43e <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	08 95       	ret

00000458 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     45e:	c0 e0       	ldi	r28, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
     462:	8e e1       	ldi	r24, 0x1E	; 30
     464:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     468:	cf 5f       	subi	r28, 0xFF	; 255
     46a:	cd 13       	cpse	r28, r29
     46c:	fa cf       	rjmp	.-12     	; 0x462 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     47a:	c0 e0       	ldi	r28, 0x00	; 0
     47c:	04 c0       	rjmp	.+8      	; 0x486 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
     47e:	88 e1       	ldi	r24, 0x18	; 24
     480:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     484:	cf 5f       	subi	r28, 0xFF	; 255
     486:	cd 13       	cpse	r28, r29
     488:	fa cf       	rjmp	.-12     	; 0x47e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     490:	8e e0       	ldi	r24, 0x0E	; 14
     492:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

00000496 <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     496:	8f e0       	ldi	r24, 0x0F	; 15
     498:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

0000049c <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     49c:	8c e0       	ldi	r24, 0x0C	; 12
     49e:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004a2 <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     4a2:	88 e0       	ldi	r24, 0x08	; 8
     4a4:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004a8 <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     4a8:	8c e0       	ldi	r24, 0x0C	; 12
     4aa:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004ae <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     4b4:	c0 e0       	ldi	r28, 0x00	; 0
     4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
     4b8:	80 e1       	ldi	r24, 0x10	; 16
     4ba:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     4be:	cf 5f       	subi	r28, 0xFF	; 255
     4c0:	cd 13       	cpse	r28, r29
     4c2:	fa cf       	rjmp	.-12     	; 0x4b8 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     4d0:	c0 e0       	ldi	r28, 0x00	; 0
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
     4d4:	84 e1       	ldi	r24, 0x14	; 20
     4d6:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     4da:	cf 5f       	subi	r28, 0xFF	; 255
     4dc:	cd 13       	cpse	r28, r29
     4de:	fa cf       	rjmp	.-12     	; 0x4d4 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	1f 92       	push	r1
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     4fc:	56 e0       	ldi	r21, 0x06	; 6
     4fe:	45 9f       	mul	r20, r21
     500:	90 01       	movw	r18, r0
     502:	11 24       	eor	r1, r1
     504:	e8 2f       	mov	r30, r24
     506:	e2 9f       	mul	r30, r18
     508:	c0 01       	movw	r24, r0
     50a:	e3 9f       	mul	r30, r19
     50c:	90 0d       	add	r25, r0
     50e:	11 24       	eor	r1, r1
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__divmodhi4>
     516:	8b 01       	movw	r16, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     518:	cb 01       	movw	r24, r22
     51a:	66 e0       	ldi	r22, 0x06	; 6
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__udivmodhi4>
     522:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     524:	c1 2c       	mov	r12, r1
     526:	d1 2c       	mov	r13, r1
     528:	f1 2c       	mov	r15, r1
     52a:	16 c0       	rjmp	.+44     	; 0x558 <LCDprogressBar+0x72>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     52c:	96 01       	movw	r18, r12
     52e:	2b 5f       	subi	r18, 0xFB	; 251
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	02 17       	cp	r16, r18
     534:	13 07       	cpc	r17, r19
     536:	28 f4       	brcc	.+10     	; 0x542 <LCDprogressBar+0x5c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     538:	0c 15       	cp	r16, r12
     53a:	1d 05       	cpc	r17, r13
     53c:	20 f0       	brcs	.+8      	; 0x546 <LCDprogressBar+0x60>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     53e:	8e 2d       	mov	r24, r14
     540:	03 c0       	rjmp	.+6      	; 0x548 <LCDprogressBar+0x62>
			}
		}
		else
		{
			// this is a full block
			c = 5;
     542:	85 e0       	ldi	r24, 0x05	; 5
     544:	01 c0       	rjmp	.+2      	; 0x548 <LCDprogressBar+0x62>
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
     546:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     548:	49 83       	std	Y+1, r20	; 0x01
     54a:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     54e:	f3 94       	inc	r15
     550:	f6 e0       	ldi	r31, 0x06	; 6
     552:	cf 0e       	add	r12, r31
     554:	d1 1c       	adc	r13, r1
     556:	49 81       	ldd	r20, Y+1	; 0x01
     558:	f4 12       	cpse	r15, r20
     55a:	e8 cf       	rjmp	.-48     	; 0x52c <LCDprogressBar+0x46>
		
		// write character to display
		LCDsendChar(c);
	}

}
     55c:	0f 90       	pop	r0
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret

00000570 <init_cap_measurement_analog_timer>:
//configures Analog Comparator and Timer1
//set it to full speed 
//clear TCNT1
void init_cap_measurement_analog_timer(){
	//turn off interrupts
	cli();
     570:	f8 94       	cli
	TCCR1B = 0;
     572:	e1 e8       	ldi	r30, 0x81	; 129
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	10 82       	st	Z, r1
	//full speed [ 16 MHz], capture on positive edge
	TCCR1B |= INPUT_CAPTURE_EDGE_SELECT + T0B_CS00;
     578:	80 81       	ld	r24, Z
     57a:	81 64       	ori	r24, 0x41	; 65
     57c:	80 83       	st	Z, r24
	//turn on timer 1 interrupt-on-capture
	TIMSK1 = 0;
     57e:	ef e6       	ldi	r30, 0x6F	; 111
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	10 82       	st	Z, r1
	TIMSK1 |= INTERRUPT_ON_CAPTURE;
     584:	80 81       	ld	r24, Z
     586:	80 62       	ori	r24, 0x20	; 32
     588:	80 83       	st	Z, r24

	//set analog comp to connect to timer capture input
	//with positive input reference voltage
	ACSR = 0;
     58a:	10 be       	out	0x30, r1	; 48
	ACSR |= ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     58c:	80 b7       	in	r24, 0x30	; 48
     58e:	84 60       	ori	r24, 0x04	; 4
     590:	80 bf       	out	0x30, r24	; 48
	ACSR &= ~ANALOG_COMPARATOR_BANDGAP_SELECT;
     592:	80 b7       	in	r24, 0x30	; 48
     594:	8f 7b       	andi	r24, 0xBF	; 191
     596:	80 bf       	out	0x30, r24	; 48
	//set all ports to input
	DDRB = 0;
     598:	14 b8       	out	0x04, r1	; 4
	DDRB &= ~(COMPARATOR_INPUT + COMPARATOR_REFERENCE);
     59a:	84 b1       	in	r24, 0x04	; 4
     59c:	83 7f       	andi	r24, 0xF3	; 243
     59e:	84 b9       	out	0x04, r24	; 4
	//turn on interrupts
	sei();
     5a0:	78 94       	sei
     5a2:	08 95       	ret

000005a4 <init_cap_discharge_wait_timer>:

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     5a4:	22 e0       	ldi	r18, 0x02	; 2
     5a6:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     5aa:	8a e5       	ldi	r24, 0x5A	; 90
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	90 93 89 00 	sts	0x0089, r25
     5b2:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     5b6:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     5ba:	e0 e8       	ldi	r30, 0x80	; 128
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	10 82       	st	Z, r1
	TCCR1A |= CLEAR_ON_MATCH;
     5c0:	80 81       	ld	r24, Z
     5c2:	82 60       	ori	r24, 0x02	; 2
     5c4:	80 83       	st	Z, r24
     5c6:	08 95       	ret

000005c8 <init_cap_measurements>:
	Convert PortB2 to an input and start a timer. The capacitor will start to charge toward Vcc.
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
	DDRB = 0;
     5c8:	14 b8       	out	0x04, r1	; 4
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     5ca:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     5cc:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     5ce:	2a 98       	cbi	0x05, 2	; 5
	//use Timer1.A to perform this delay and signal when we can continue measurements
	init_cap_discharge_wait_timer();
     5d0:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <init_cap_discharge_wait_timer>

000005d4 <__vector_16>:
}

//1 ms timebase register
//Blinks LED 1/second
//refreshes LCD 1/200 ms
ISR (TIMER0_COMPA_vect){
     5d4:	1f 92       	push	r1
     5d6:	0f 92       	push	r0
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	0f 92       	push	r0
     5dc:	11 24       	eor	r1, r1
     5de:	8f 93       	push	r24
     5e0:	9f 93       	push	r25
	if( led_time_count > 0)
     5e2:	80 91 2f 01 	lds	r24, 0x012F
     5e6:	90 91 30 01 	lds	r25, 0x0130
     5ea:	89 2b       	or	r24, r25
     5ec:	49 f0       	breq	.+18     	; 0x600 <__vector_16+0x2c>
		--led_time_count;
     5ee:	80 91 2f 01 	lds	r24, 0x012F
     5f2:	90 91 30 01 	lds	r25, 0x0130
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	90 93 30 01 	sts	0x0130, r25
     5fc:	80 93 2f 01 	sts	0x012F, r24
	if( lcd_time_count > 0)
     600:	80 91 0c 01 	lds	r24, 0x010C
     604:	90 91 0d 01 	lds	r25, 0x010D
     608:	89 2b       	or	r24, r25
     60a:	49 f0       	breq	.+18     	; 0x61e <__vector_16+0x4a>
		--lcd_time_count;
     60c:	80 91 0c 01 	lds	r24, 0x010C
     610:	90 91 0d 01 	lds	r25, 0x010D
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	90 93 0d 01 	sts	0x010D, r25
     61a:	80 93 0c 01 	sts	0x010C, r24

}
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	0f 90       	pop	r0
     624:	0f be       	out	0x3f, r0	; 63
     626:	0f 90       	pop	r0
     628:	1f 90       	pop	r1
     62a:	18 95       	reti

0000062c <__vector_13>:
//Once this triggers even once, we know that we have waited long enough for a cap discharge
ISR (TIMER1_COMPA_vect){
     62c:	1f 92       	push	r1
     62e:	0f 92       	push	r0
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	0f 92       	push	r0
     634:	11 24       	eor	r1, r1
     636:	8f 93       	push	r24
     638:	9f 93       	push	r25
	cap_discharged = TRUE;
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	90 93 27 01 	sts	0x0127, r25
     642:	80 93 26 01 	sts	0x0126, r24
}
     646:	9f 91       	pop	r25
     648:	8f 91       	pop	r24
     64a:	0f 90       	pop	r0
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	0f 90       	pop	r0
     650:	1f 90       	pop	r1
     652:	18 95       	reti

00000654 <__vector_12>:
			  t
	C = ------------
		R2 * ln(0.5)

*/
ISR (TIMER1_CAPT_vect){
     654:	1f 92       	push	r1
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	0f 92       	push	r0
     65c:	11 24       	eor	r1, r1
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
	// read timer1 input capture register
    charge_cycles = ICR1;
     662:	80 91 86 00 	lds	r24, 0x0086
     666:	90 91 87 00 	lds	r25, 0x0087
     66a:	90 93 25 01 	sts	0x0125, r25
     66e:	80 93 24 01 	sts	0x0124, r24
    // set the charged flag to true
    cap_charged = TRUE;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	90 93 34 01 	sts	0x0134, r25
     67a:	80 93 33 01 	sts	0x0133, r24
}
     67e:	9f 91       	pop	r25
     680:	8f 91       	pop	r24
     682:	0f 90       	pop	r0
     684:	0f be       	out	0x3f, r0	; 63
     686:	0f 90       	pop	r0
     688:	1f 90       	pop	r1
     68a:	18 95       	reti

0000068c <toggle_led>:

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     68c:	8b b1       	in	r24, 0x0b	; 11
     68e:	94 e0       	ldi	r25, 0x04	; 4
     690:	89 27       	eor	r24, r25
     692:	8b b9       	out	0x0b, r24	; 11
     694:	08 95       	ret

00000696 <init_timer0A>:
//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 249;
     69c:	89 ef       	ldi	r24, 0xF9	; 249
     69e:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     6a4:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     6a6:	84 b5       	in	r24, 0x24	; 36
     6a8:	82 60       	ori	r24, 0x02	; 2
     6aa:	84 bd       	out	0x24, r24	; 36
     6ac:	08 95       	ret

000006ae <init_lcd>:
}

// LCD setup
void init_lcd(void){
	LCDinit();	//initialize the display
     6ae:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCDinit>
	LCDcursorOFF();
     6b2:	0e 94 4e 02 	call	0x49c	; 0x49c <LCDcursorOFF>
	LCDclr();				//clear the display
     6b6:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDclr>
	LCDGotoXY(0,0);
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
	CopyStringtoLCD(LCD_number, 0, 0);
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	8c ec       	ldi	r24, 0xCC	; 204
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0c 94 99 01 	jmp	0x332	; 0x332 <CopyStringtoLCD>

000006ce <refresh_lcd>:

// writes contents of lcd_buffer to LCD every 200 mSec
// 
void refresh_lcd(void){
  // increment time counter and format string 
  if (capacitance >= .1 && capacitance <= 100) {
     6ce:	60 91 28 01 	lds	r22, 0x0128
     6d2:	70 91 29 01 	lds	r23, 0x0129
     6d6:	80 91 2a 01 	lds	r24, 0x012A
     6da:	90 91 2b 01 	lds	r25, 0x012B
     6de:	2d ec       	ldi	r18, 0xCD	; 205
     6e0:	3c ec       	ldi	r19, 0xCC	; 204
     6e2:	4c ec       	ldi	r20, 0xCC	; 204
     6e4:	5d e3       	ldi	r21, 0x3D	; 61
     6e6:	0e 94 c1 05 	call	0xb82	; 0xb82 <__gesf2>
     6ea:	87 fd       	sbrc	r24, 7
     6ec:	27 c0       	rjmp	.+78     	; 0x73c <refresh_lcd+0x6e>
     6ee:	60 91 28 01 	lds	r22, 0x0128
     6f2:	70 91 29 01 	lds	r23, 0x0129
     6f6:	80 91 2a 01 	lds	r24, 0x012A
     6fa:	90 91 2b 01 	lds	r25, 0x012B
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	48 ec       	ldi	r20, 0xC8	; 200
     704:	52 e4       	ldi	r21, 0x42	; 66
     706:	0e 94 a3 04 	call	0x946	; 0x946 <__cmpsf2>
     70a:	18 16       	cp	r1, r24
     70c:	bc f0       	brlt	.+46     	; 0x73c <refresh_lcd+0x6e>
  	//sprintf(lcd_buffer,"%-.5f",capacitance);
	sprintf(lcd_buffer,"%-i", charge_cycles);	 
     70e:	80 91 24 01 	lds	r24, 0x0124
     712:	90 91 25 01 	lds	r25, 0x0125
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	84 e0       	ldi	r24, 0x04	; 4
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	9f 93       	push	r25
     720:	8f 93       	push	r24
     722:	8e e0       	ldi	r24, 0x0E	; 14
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <sprintf>
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	06 c0       	rjmp	.+12     	; 0x748 <refresh_lcd+0x7a>
  }
  else {
  	sprintf(lcd_buffer,"N/A");
     73c:	68 e0       	ldi	r22, 0x08	; 8
     73e:	71 e0       	ldi	r23, 0x01	; 1
     740:	8e e0       	ldi	r24, 0x0E	; 14
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 de 0a 	call	0x15bc	; 0x15bc <strcpy>
  }               
  LCDGotoXY(0, 1);
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  	// display the capacitance 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     750:	ee e0       	ldi	r30, 0x0E	; 14
     752:	f1 e0       	ldi	r31, 0x01	; 1
     754:	df 01       	movw	r26, r30
     756:	0d 90       	ld	r0, X+
     758:	00 20       	and	r0, r0
     75a:	e9 f7       	brne	.-6      	; 0x756 <refresh_lcd+0x88>
     75c:	bd 01       	movw	r22, r26
     75e:	61 50       	subi	r22, 0x01	; 1
     760:	71 09       	sbc	r23, r1
     762:	6e 1b       	sub	r22, r30
     764:	7f 0b       	sbc	r23, r31
     766:	cf 01       	movw	r24, r30
     768:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCDstring>
  // now move a char left and right
  LCDGotoXY(anipos,1);	   //second line
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	80 91 1f 01 	lds	r24, 0x011F
     772:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  LCDsendChar(' '); 
     776:	80 e2       	ldi	r24, 0x20	; 32
     778:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
      	
  if (anipos>=15) dir=-1;   // check boundaries
     77c:	90 91 1f 01 	lds	r25, 0x011F
     780:	9f 30       	cpi	r25, 0x0F	; 15
     782:	10 f0       	brcs	.+4      	; 0x788 <refresh_lcd+0xba>
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	03 c0       	rjmp	.+6      	; 0x78e <refresh_lcd+0xc0>
  if (anipos<=8 ) dir=1;
     788:	99 30       	cpi	r25, 0x09	; 9
     78a:	18 f4       	brcc	.+6      	; 0x792 <refresh_lcd+0xc4>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 2c 01 	sts	0x012C, r24
  anipos=anipos+dir;
     792:	80 91 2c 01 	lds	r24, 0x012C
     796:	89 0f       	add	r24, r25
     798:	80 93 1f 01 	sts	0x011F, r24
  LCDGotoXY(anipos,1);	   //second line
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  LCDsendChar('o');
     7a2:	8f e6       	ldi	r24, 0x6F	; 111
     7a4:	0c 94 18 01 	jmp	0x230	; 0x230 <LCDsendChar>

000007a8 <initialize>:
}

void initialize(void){
	anipos = 8;
     7a8:	88 e0       	ldi	r24, 0x08	; 8
     7aa:	80 93 1f 01 	sts	0x011F, r24
	led_time_count = 0;
     7ae:	10 92 30 01 	sts	0x0130, r1
     7b2:	10 92 2f 01 	sts	0x012F, r1
	init_timer0A();
     7b6:	0e 94 4b 03 	call	0x696	; 0x696 <init_timer0A>

	DDRB = 0;
     7ba:	14 b8       	out	0x04, r1	; 4
	DDRD = 0;
     7bc:	1a b8       	out	0x0a, r1	; 10

	//Enable LED Port
	DDRD = ONBOARD_LED; //turn the LED to an output
     7be:	84 e0       	ldi	r24, 0x04	; 4
     7c0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; //turn off LED 
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	8b b9       	out	0x0b, r24	; 11

	capacitance = 0;
     7c6:	10 92 28 01 	sts	0x0128, r1
     7ca:	10 92 29 01 	sts	0x0129, r1
     7ce:	10 92 2a 01 	sts	0x012A, r1
     7d2:	10 92 2b 01 	sts	0x012B, r1
	charge_cycles = 0;
     7d6:	10 92 25 01 	sts	0x0125, r1
     7da:	10 92 24 01 	sts	0x0124, r1
	charge_time = 0;
     7de:	10 92 20 01 	sts	0x0120, r1
     7e2:	10 92 21 01 	sts	0x0121, r1
     7e6:	10 92 22 01 	sts	0x0122, r1
     7ea:	10 92 23 01 	sts	0x0123, r1
	cap_discharged = FALSE;
     7ee:	10 92 27 01 	sts	0x0127, r1
     7f2:	10 92 26 01 	sts	0x0126, r1
	begin_cap_measurement = FALSE;
     7f6:	10 92 32 01 	sts	0x0132, r1
     7fa:	10 92 31 01 	sts	0x0131, r1
	cap_charged = FALSE;
     7fe:	10 92 34 01 	sts	0x0134, r1
     802:	10 92 33 01 	sts	0x0133, r1

	init_lcd();
     806:	0e 94 57 03 	call	0x6ae	; 0x6ae <init_lcd>
	LCDclr();
     80a:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDclr>


	sei();
     80e:	78 94       	sei
     810:	08 95       	ret

00000812 <main>:
}

int main(void){
	initialize();
     812:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <initialize>
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	8c ec       	ldi	r24, 0xCC	; 204
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 99 01 	call	0x332	; 0x332 <CopyStringtoLCD>
	
	while(1){
		if( led_time_count == 0){
			led_time_count = LED_BLINK_PERIOD / 2;
     822:	c4 ef       	ldi	r28, 0xF4	; 244
     824:	d1 e0       	ldi	r29, 0x01	; 1
			toggle_led();
		}
		if( lcd_time_count == 0){
			lcd_time_count = LCD_REFRESH_RATE;
     826:	08 ec       	ldi	r16, 0xC8	; 200
     828:	10 e0       	ldi	r17, 0x00	; 0
		if(cap_discharged && !begin_cap_measurement){
			//begin cap measurements
			//switch Timer1A mode
			//DDRB &= ~COMPARATOR_INPUT;
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     82a:	ee 24       	eor	r14, r14
     82c:	e3 94       	inc	r14
     82e:	f1 2c       	mov	r15, r1
int main(void){
	initialize();
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
	
	while(1){
		if( led_time_count == 0){
     830:	80 91 2f 01 	lds	r24, 0x012F
     834:	90 91 30 01 	lds	r25, 0x0130
     838:	89 2b       	or	r24, r25
     83a:	31 f4       	brne	.+12     	; 0x848 <main+0x36>
			led_time_count = LED_BLINK_PERIOD / 2;
     83c:	d0 93 30 01 	sts	0x0130, r29
     840:	c0 93 2f 01 	sts	0x012F, r28
			toggle_led();
     844:	0e 94 46 03 	call	0x68c	; 0x68c <toggle_led>
		}
		if( lcd_time_count == 0){
     848:	80 91 0c 01 	lds	r24, 0x010C
     84c:	90 91 0d 01 	lds	r25, 0x010D
     850:	89 2b       	or	r24, r25
     852:	31 f4       	brne	.+12     	; 0x860 <main+0x4e>
			lcd_time_count = LCD_REFRESH_RATE;
     854:	10 93 0d 01 	sts	0x010D, r17
     858:	00 93 0c 01 	sts	0x010C, r16
			refresh_lcd();
     85c:	0e 94 67 03 	call	0x6ce	; 0x6ce <refresh_lcd>
		}
		if (!cap_discharged && !begin_cap_measurement && !cap_charged) {
     860:	80 91 26 01 	lds	r24, 0x0126
     864:	90 91 27 01 	lds	r25, 0x0127
     868:	89 2b       	or	r24, r25
     86a:	71 f4       	brne	.+28     	; 0x888 <main+0x76>
     86c:	80 91 31 01 	lds	r24, 0x0131
     870:	90 91 32 01 	lds	r25, 0x0132
     874:	89 2b       	or	r24, r25
     876:	41 f4       	brne	.+16     	; 0x888 <main+0x76>
     878:	80 91 33 01 	lds	r24, 0x0133
     87c:	90 91 34 01 	lds	r25, 0x0134
     880:	89 2b       	or	r24, r25
     882:	11 f4       	brne	.+4      	; 0x888 <main+0x76>
			init_cap_measurements();
     884:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <init_cap_measurements>
		}
		if(cap_discharged && !begin_cap_measurement){
     888:	80 91 26 01 	lds	r24, 0x0126
     88c:	90 91 27 01 	lds	r25, 0x0127
     890:	89 2b       	or	r24, r25
     892:	61 f0       	breq	.+24     	; 0x8ac <main+0x9a>
     894:	80 91 31 01 	lds	r24, 0x0131
     898:	90 91 32 01 	lds	r25, 0x0132
     89c:	89 2b       	or	r24, r25
     89e:	31 f4       	brne	.+12     	; 0x8ac <main+0x9a>
			//begin cap measurements
			//switch Timer1A mode
			//DDRB &= ~COMPARATOR_INPUT;
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     8a0:	f0 92 32 01 	sts	0x0132, r15
     8a4:	e0 92 31 01 	sts	0x0131, r14
			//initalize timer for cap measurement
			init_cap_measurement_analog_timer();
     8a8:	0e 94 b8 02 	call	0x570	; 0x570 <init_cap_measurement_analog_timer>
		}
		if(begin_cap_measurement && cap_charged){
     8ac:	80 91 31 01 	lds	r24, 0x0131
     8b0:	90 91 32 01 	lds	r25, 0x0132
     8b4:	89 2b       	or	r24, r25
     8b6:	09 f4       	brne	.+2      	; 0x8ba <main+0xa8>
     8b8:	bb cf       	rjmp	.-138    	; 0x830 <main+0x1e>
     8ba:	80 91 33 01 	lds	r24, 0x0133
     8be:	90 91 34 01 	lds	r25, 0x0134
     8c2:	89 2b       	or	r24, r25
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <main+0xb6>
     8c6:	b4 cf       	rjmp	.-152    	; 0x830 <main+0x1e>
			//capacitance = 3.3;
			// Revert the flags
			cap_discharged = FALSE;
     8c8:	10 92 27 01 	sts	0x0127, r1
     8cc:	10 92 26 01 	sts	0x0126, r1
			begin_cap_measurement = FALSE;
     8d0:	10 92 32 01 	sts	0x0132, r1
     8d4:	10 92 31 01 	sts	0x0131, r1
			cap_charged = FALSE;
     8d8:	10 92 34 01 	sts	0x0134, r1
     8dc:	10 92 33 01 	sts	0x0133, r1
			// Calculate the capacitance with the time elapsed. 
			// V(t) = Vo(1 - exp(-t/(R2*C))) becomes
			// C = -t / (R2 * ln(.5)) to find out when V(t) = .5 * Vo (R3 = R4)
			// (Due to ln(.5) being negative, the negative on the t is canceled out)
			charge_time = charge_cycles * T1_CLK_PERIOD;
     8e0:	60 91 24 01 	lds	r22, 0x0124
     8e4:	70 91 25 01 	lds	r23, 0x0125
     8e8:	88 27       	eor	r24, r24
     8ea:	77 fd       	sbrc	r23, 7
     8ec:	80 95       	com	r24
     8ee:	98 2f       	mov	r25, r24
     8f0:	0e 94 11 05 	call	0xa22	; 0xa22 <__floatsisf>
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	4a e7       	ldi	r20, 0x7A	; 122
     8fa:	52 e4       	ldi	r21, 0x42	; 66
     8fc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__mulsf3>
     900:	ab 01       	movw	r20, r22
     902:	bc 01       	movw	r22, r24
     904:	40 93 20 01 	sts	0x0120, r20
     908:	50 93 21 01 	sts	0x0121, r21
     90c:	60 93 22 01 	sts	0x0122, r22
     910:	70 93 23 01 	sts	0x0123, r23
			capacitance = charge_time / (RESISTOR * ln_half);
     914:	60 91 20 01 	lds	r22, 0x0120
     918:	70 91 21 01 	lds	r23, 0x0121
     91c:	80 91 22 01 	lds	r24, 0x0122
     920:	90 91 23 01 	lds	r25, 0x0123
     924:	26 ec       	ldi	r18, 0xC6	; 198
     926:	3b e9       	ldi	r19, 0x9B	; 155
     928:	48 ed       	ldi	r20, 0xD8	; 216
     92a:	55 e4       	ldi	r21, 0x45	; 69
     92c:	0e 94 a7 04 	call	0x94e	; 0x94e <__divsf3>
     930:	ab 01       	movw	r20, r22
     932:	bc 01       	movw	r22, r24
     934:	40 93 28 01 	sts	0x0128, r20
     938:	50 93 29 01 	sts	0x0129, r21
     93c:	60 93 2a 01 	sts	0x012A, r22
     940:	70 93 2b 01 	sts	0x012B, r23
     944:	75 cf       	rjmp	.-278    	; 0x830 <main+0x1e>

00000946 <__cmpsf2>:
     946:	a8 d0       	rcall	.+336    	; 0xa98 <__fp_cmp>
     948:	08 f4       	brcc	.+2      	; 0x94c <__cmpsf2+0x6>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	08 95       	ret

0000094e <__divsf3>:
     94e:	0c d0       	rcall	.+24     	; 0x968 <__divsf3x>
     950:	de c0       	rjmp	.+444    	; 0xb0e <__fp_round>
     952:	d6 d0       	rcall	.+428    	; 0xb00 <__fp_pscB>
     954:	40 f0       	brcs	.+16     	; 0x966 <__divsf3+0x18>
     956:	cd d0       	rcall	.+410    	; 0xaf2 <__fp_pscA>
     958:	30 f0       	brcs	.+12     	; 0x966 <__divsf3+0x18>
     95a:	21 f4       	brne	.+8      	; 0x964 <__divsf3+0x16>
     95c:	5f 3f       	cpi	r21, 0xFF	; 255
     95e:	19 f0       	breq	.+6      	; 0x966 <__divsf3+0x18>
     960:	bf c0       	rjmp	.+382    	; 0xae0 <__fp_inf>
     962:	51 11       	cpse	r21, r1
     964:	08 c1       	rjmp	.+528    	; 0xb76 <__fp_szero>
     966:	c2 c0       	rjmp	.+388    	; 0xaec <__fp_nan>

00000968 <__divsf3x>:
     968:	e3 d0       	rcall	.+454    	; 0xb30 <__fp_split3>
     96a:	98 f3       	brcs	.-26     	; 0x952 <__divsf3+0x4>

0000096c <__divsf3_pse>:
     96c:	99 23       	and	r25, r25
     96e:	c9 f3       	breq	.-14     	; 0x962 <__divsf3+0x14>
     970:	55 23       	and	r21, r21
     972:	b1 f3       	breq	.-20     	; 0x960 <__divsf3+0x12>
     974:	95 1b       	sub	r25, r21
     976:	55 0b       	sbc	r21, r21
     978:	bb 27       	eor	r27, r27
     97a:	aa 27       	eor	r26, r26
     97c:	62 17       	cp	r22, r18
     97e:	73 07       	cpc	r23, r19
     980:	84 07       	cpc	r24, r20
     982:	38 f0       	brcs	.+14     	; 0x992 <__divsf3_pse+0x26>
     984:	9f 5f       	subi	r25, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	22 0f       	add	r18, r18
     98a:	33 1f       	adc	r19, r19
     98c:	44 1f       	adc	r20, r20
     98e:	aa 1f       	adc	r26, r26
     990:	a9 f3       	breq	.-22     	; 0x97c <__divsf3_pse+0x10>
     992:	33 d0       	rcall	.+102    	; 0x9fa <__divsf3_pse+0x8e>
     994:	0e 2e       	mov	r0, r30
     996:	3a f0       	brmi	.+14     	; 0x9a6 <__divsf3_pse+0x3a>
     998:	e0 e8       	ldi	r30, 0x80	; 128
     99a:	30 d0       	rcall	.+96     	; 0x9fc <__divsf3_pse+0x90>
     99c:	91 50       	subi	r25, 0x01	; 1
     99e:	50 40       	sbci	r21, 0x00	; 0
     9a0:	e6 95       	lsr	r30
     9a2:	00 1c       	adc	r0, r0
     9a4:	ca f7       	brpl	.-14     	; 0x998 <__divsf3_pse+0x2c>
     9a6:	29 d0       	rcall	.+82     	; 0x9fa <__divsf3_pse+0x8e>
     9a8:	fe 2f       	mov	r31, r30
     9aa:	27 d0       	rcall	.+78     	; 0x9fa <__divsf3_pse+0x8e>
     9ac:	66 0f       	add	r22, r22
     9ae:	77 1f       	adc	r23, r23
     9b0:	88 1f       	adc	r24, r24
     9b2:	bb 1f       	adc	r27, r27
     9b4:	26 17       	cp	r18, r22
     9b6:	37 07       	cpc	r19, r23
     9b8:	48 07       	cpc	r20, r24
     9ba:	ab 07       	cpc	r26, r27
     9bc:	b0 e8       	ldi	r27, 0x80	; 128
     9be:	09 f0       	breq	.+2      	; 0x9c2 <__divsf3_pse+0x56>
     9c0:	bb 0b       	sbc	r27, r27
     9c2:	80 2d       	mov	r24, r0
     9c4:	bf 01       	movw	r22, r30
     9c6:	ff 27       	eor	r31, r31
     9c8:	93 58       	subi	r25, 0x83	; 131
     9ca:	5f 4f       	sbci	r21, 0xFF	; 255
     9cc:	2a f0       	brmi	.+10     	; 0x9d8 <__divsf3_pse+0x6c>
     9ce:	9e 3f       	cpi	r25, 0xFE	; 254
     9d0:	51 05       	cpc	r21, r1
     9d2:	68 f0       	brcs	.+26     	; 0x9ee <__divsf3_pse+0x82>
     9d4:	85 c0       	rjmp	.+266    	; 0xae0 <__fp_inf>
     9d6:	cf c0       	rjmp	.+414    	; 0xb76 <__fp_szero>
     9d8:	5f 3f       	cpi	r21, 0xFF	; 255
     9da:	ec f3       	brlt	.-6      	; 0x9d6 <__divsf3_pse+0x6a>
     9dc:	98 3e       	cpi	r25, 0xE8	; 232
     9de:	dc f3       	brlt	.-10     	; 0x9d6 <__divsf3_pse+0x6a>
     9e0:	86 95       	lsr	r24
     9e2:	77 95       	ror	r23
     9e4:	67 95       	ror	r22
     9e6:	b7 95       	ror	r27
     9e8:	f7 95       	ror	r31
     9ea:	9f 5f       	subi	r25, 0xFF	; 255
     9ec:	c9 f7       	brne	.-14     	; 0x9e0 <__divsf3_pse+0x74>
     9ee:	88 0f       	add	r24, r24
     9f0:	91 1d       	adc	r25, r1
     9f2:	96 95       	lsr	r25
     9f4:	87 95       	ror	r24
     9f6:	97 f9       	bld	r25, 7
     9f8:	08 95       	ret
     9fa:	e1 e0       	ldi	r30, 0x01	; 1
     9fc:	66 0f       	add	r22, r22
     9fe:	77 1f       	adc	r23, r23
     a00:	88 1f       	adc	r24, r24
     a02:	bb 1f       	adc	r27, r27
     a04:	62 17       	cp	r22, r18
     a06:	73 07       	cpc	r23, r19
     a08:	84 07       	cpc	r24, r20
     a0a:	ba 07       	cpc	r27, r26
     a0c:	20 f0       	brcs	.+8      	; 0xa16 <__divsf3_pse+0xaa>
     a0e:	62 1b       	sub	r22, r18
     a10:	73 0b       	sbc	r23, r19
     a12:	84 0b       	sbc	r24, r20
     a14:	ba 0b       	sbc	r27, r26
     a16:	ee 1f       	adc	r30, r30
     a18:	88 f7       	brcc	.-30     	; 0x9fc <__divsf3_pse+0x90>
     a1a:	e0 95       	com	r30
     a1c:	08 95       	ret

00000a1e <__floatunsisf>:
     a1e:	e8 94       	clt
     a20:	09 c0       	rjmp	.+18     	; 0xa34 <__floatsisf+0x12>

00000a22 <__floatsisf>:
     a22:	97 fb       	bst	r25, 7
     a24:	3e f4       	brtc	.+14     	; 0xa34 <__floatsisf+0x12>
     a26:	90 95       	com	r25
     a28:	80 95       	com	r24
     a2a:	70 95       	com	r23
     a2c:	61 95       	neg	r22
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	8f 4f       	sbci	r24, 0xFF	; 255
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	99 23       	and	r25, r25
     a36:	a9 f0       	breq	.+42     	; 0xa62 <__floatsisf+0x40>
     a38:	f9 2f       	mov	r31, r25
     a3a:	96 e9       	ldi	r25, 0x96	; 150
     a3c:	bb 27       	eor	r27, r27
     a3e:	93 95       	inc	r25
     a40:	f6 95       	lsr	r31
     a42:	87 95       	ror	r24
     a44:	77 95       	ror	r23
     a46:	67 95       	ror	r22
     a48:	b7 95       	ror	r27
     a4a:	f1 11       	cpse	r31, r1
     a4c:	f8 cf       	rjmp	.-16     	; 0xa3e <__floatsisf+0x1c>
     a4e:	fa f4       	brpl	.+62     	; 0xa8e <__floatsisf+0x6c>
     a50:	bb 0f       	add	r27, r27
     a52:	11 f4       	brne	.+4      	; 0xa58 <__floatsisf+0x36>
     a54:	60 ff       	sbrs	r22, 0
     a56:	1b c0       	rjmp	.+54     	; 0xa8e <__floatsisf+0x6c>
     a58:	6f 5f       	subi	r22, 0xFF	; 255
     a5a:	7f 4f       	sbci	r23, 0xFF	; 255
     a5c:	8f 4f       	sbci	r24, 0xFF	; 255
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	16 c0       	rjmp	.+44     	; 0xa8e <__floatsisf+0x6c>
     a62:	88 23       	and	r24, r24
     a64:	11 f0       	breq	.+4      	; 0xa6a <__floatsisf+0x48>
     a66:	96 e9       	ldi	r25, 0x96	; 150
     a68:	11 c0       	rjmp	.+34     	; 0xa8c <__floatsisf+0x6a>
     a6a:	77 23       	and	r23, r23
     a6c:	21 f0       	breq	.+8      	; 0xa76 <__floatsisf+0x54>
     a6e:	9e e8       	ldi	r25, 0x8E	; 142
     a70:	87 2f       	mov	r24, r23
     a72:	76 2f       	mov	r23, r22
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <__floatsisf+0x5e>
     a76:	66 23       	and	r22, r22
     a78:	71 f0       	breq	.+28     	; 0xa96 <__floatsisf+0x74>
     a7a:	96 e8       	ldi	r25, 0x86	; 134
     a7c:	86 2f       	mov	r24, r22
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	2a f0       	brmi	.+10     	; 0xa8e <__floatsisf+0x6c>
     a84:	9a 95       	dec	r25
     a86:	66 0f       	add	r22, r22
     a88:	77 1f       	adc	r23, r23
     a8a:	88 1f       	adc	r24, r24
     a8c:	da f7       	brpl	.-10     	; 0xa84 <__floatsisf+0x62>
     a8e:	88 0f       	add	r24, r24
     a90:	96 95       	lsr	r25
     a92:	87 95       	ror	r24
     a94:	97 f9       	bld	r25, 7
     a96:	08 95       	ret

00000a98 <__fp_cmp>:
     a98:	99 0f       	add	r25, r25
     a9a:	00 08       	sbc	r0, r0
     a9c:	55 0f       	add	r21, r21
     a9e:	aa 0b       	sbc	r26, r26
     aa0:	e0 e8       	ldi	r30, 0x80	; 128
     aa2:	fe ef       	ldi	r31, 0xFE	; 254
     aa4:	16 16       	cp	r1, r22
     aa6:	17 06       	cpc	r1, r23
     aa8:	e8 07       	cpc	r30, r24
     aaa:	f9 07       	cpc	r31, r25
     aac:	c0 f0       	brcs	.+48     	; 0xade <__fp_cmp+0x46>
     aae:	12 16       	cp	r1, r18
     ab0:	13 06       	cpc	r1, r19
     ab2:	e4 07       	cpc	r30, r20
     ab4:	f5 07       	cpc	r31, r21
     ab6:	98 f0       	brcs	.+38     	; 0xade <__fp_cmp+0x46>
     ab8:	62 1b       	sub	r22, r18
     aba:	73 0b       	sbc	r23, r19
     abc:	84 0b       	sbc	r24, r20
     abe:	95 0b       	sbc	r25, r21
     ac0:	39 f4       	brne	.+14     	; 0xad0 <__fp_cmp+0x38>
     ac2:	0a 26       	eor	r0, r26
     ac4:	61 f0       	breq	.+24     	; 0xade <__fp_cmp+0x46>
     ac6:	23 2b       	or	r18, r19
     ac8:	24 2b       	or	r18, r20
     aca:	25 2b       	or	r18, r21
     acc:	21 f4       	brne	.+8      	; 0xad6 <__fp_cmp+0x3e>
     ace:	08 95       	ret
     ad0:	0a 26       	eor	r0, r26
     ad2:	09 f4       	brne	.+2      	; 0xad6 <__fp_cmp+0x3e>
     ad4:	a1 40       	sbci	r26, 0x01	; 1
     ad6:	a6 95       	lsr	r26
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	81 1d       	adc	r24, r1
     adc:	81 1d       	adc	r24, r1
     ade:	08 95       	ret

00000ae0 <__fp_inf>:
     ae0:	97 f9       	bld	r25, 7
     ae2:	9f 67       	ori	r25, 0x7F	; 127
     ae4:	80 e8       	ldi	r24, 0x80	; 128
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	08 95       	ret

00000aec <__fp_nan>:
     aec:	9f ef       	ldi	r25, 0xFF	; 255
     aee:	80 ec       	ldi	r24, 0xC0	; 192
     af0:	08 95       	ret

00000af2 <__fp_pscA>:
     af2:	00 24       	eor	r0, r0
     af4:	0a 94       	dec	r0
     af6:	16 16       	cp	r1, r22
     af8:	17 06       	cpc	r1, r23
     afa:	18 06       	cpc	r1, r24
     afc:	09 06       	cpc	r0, r25
     afe:	08 95       	ret

00000b00 <__fp_pscB>:
     b00:	00 24       	eor	r0, r0
     b02:	0a 94       	dec	r0
     b04:	12 16       	cp	r1, r18
     b06:	13 06       	cpc	r1, r19
     b08:	14 06       	cpc	r1, r20
     b0a:	05 06       	cpc	r0, r21
     b0c:	08 95       	ret

00000b0e <__fp_round>:
     b0e:	09 2e       	mov	r0, r25
     b10:	03 94       	inc	r0
     b12:	00 0c       	add	r0, r0
     b14:	11 f4       	brne	.+4      	; 0xb1a <__fp_round+0xc>
     b16:	88 23       	and	r24, r24
     b18:	52 f0       	brmi	.+20     	; 0xb2e <__fp_round+0x20>
     b1a:	bb 0f       	add	r27, r27
     b1c:	40 f4       	brcc	.+16     	; 0xb2e <__fp_round+0x20>
     b1e:	bf 2b       	or	r27, r31
     b20:	11 f4       	brne	.+4      	; 0xb26 <__fp_round+0x18>
     b22:	60 ff       	sbrs	r22, 0
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <__fp_round+0x20>
     b26:	6f 5f       	subi	r22, 0xFF	; 255
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	8f 4f       	sbci	r24, 0xFF	; 255
     b2c:	9f 4f       	sbci	r25, 0xFF	; 255
     b2e:	08 95       	ret

00000b30 <__fp_split3>:
     b30:	57 fd       	sbrc	r21, 7
     b32:	90 58       	subi	r25, 0x80	; 128
     b34:	44 0f       	add	r20, r20
     b36:	55 1f       	adc	r21, r21
     b38:	59 f0       	breq	.+22     	; 0xb50 <__fp_splitA+0x10>
     b3a:	5f 3f       	cpi	r21, 0xFF	; 255
     b3c:	71 f0       	breq	.+28     	; 0xb5a <__fp_splitA+0x1a>
     b3e:	47 95       	ror	r20

00000b40 <__fp_splitA>:
     b40:	88 0f       	add	r24, r24
     b42:	97 fb       	bst	r25, 7
     b44:	99 1f       	adc	r25, r25
     b46:	61 f0       	breq	.+24     	; 0xb60 <__fp_splitA+0x20>
     b48:	9f 3f       	cpi	r25, 0xFF	; 255
     b4a:	79 f0       	breq	.+30     	; 0xb6a <__fp_splitA+0x2a>
     b4c:	87 95       	ror	r24
     b4e:	08 95       	ret
     b50:	12 16       	cp	r1, r18
     b52:	13 06       	cpc	r1, r19
     b54:	14 06       	cpc	r1, r20
     b56:	55 1f       	adc	r21, r21
     b58:	f2 cf       	rjmp	.-28     	; 0xb3e <__fp_split3+0xe>
     b5a:	46 95       	lsr	r20
     b5c:	f1 df       	rcall	.-30     	; 0xb40 <__fp_splitA>
     b5e:	08 c0       	rjmp	.+16     	; 0xb70 <__fp_splitA+0x30>
     b60:	16 16       	cp	r1, r22
     b62:	17 06       	cpc	r1, r23
     b64:	18 06       	cpc	r1, r24
     b66:	99 1f       	adc	r25, r25
     b68:	f1 cf       	rjmp	.-30     	; 0xb4c <__fp_splitA+0xc>
     b6a:	86 95       	lsr	r24
     b6c:	71 05       	cpc	r23, r1
     b6e:	61 05       	cpc	r22, r1
     b70:	08 94       	sec
     b72:	08 95       	ret

00000b74 <__fp_zero>:
     b74:	e8 94       	clt

00000b76 <__fp_szero>:
     b76:	bb 27       	eor	r27, r27
     b78:	66 27       	eor	r22, r22
     b7a:	77 27       	eor	r23, r23
     b7c:	cb 01       	movw	r24, r22
     b7e:	97 f9       	bld	r25, 7
     b80:	08 95       	ret

00000b82 <__gesf2>:
     b82:	8a df       	rcall	.-236    	; 0xa98 <__fp_cmp>
     b84:	08 f4       	brcc	.+2      	; 0xb88 <__gesf2+0x6>
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	08 95       	ret

00000b8a <__mulsf3>:
     b8a:	0b d0       	rcall	.+22     	; 0xba2 <__mulsf3x>
     b8c:	c0 cf       	rjmp	.-128    	; 0xb0e <__fp_round>
     b8e:	b1 df       	rcall	.-158    	; 0xaf2 <__fp_pscA>
     b90:	28 f0       	brcs	.+10     	; 0xb9c <__mulsf3+0x12>
     b92:	b6 df       	rcall	.-148    	; 0xb00 <__fp_pscB>
     b94:	18 f0       	brcs	.+6      	; 0xb9c <__mulsf3+0x12>
     b96:	95 23       	and	r25, r21
     b98:	09 f0       	breq	.+2      	; 0xb9c <__mulsf3+0x12>
     b9a:	a2 cf       	rjmp	.-188    	; 0xae0 <__fp_inf>
     b9c:	a7 cf       	rjmp	.-178    	; 0xaec <__fp_nan>
     b9e:	11 24       	eor	r1, r1
     ba0:	ea cf       	rjmp	.-44     	; 0xb76 <__fp_szero>

00000ba2 <__mulsf3x>:
     ba2:	c6 df       	rcall	.-116    	; 0xb30 <__fp_split3>
     ba4:	a0 f3       	brcs	.-24     	; 0xb8e <__mulsf3+0x4>

00000ba6 <__mulsf3_pse>:
     ba6:	95 9f       	mul	r25, r21
     ba8:	d1 f3       	breq	.-12     	; 0xb9e <__mulsf3+0x14>
     baa:	95 0f       	add	r25, r21
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	55 1f       	adc	r21, r21
     bb0:	62 9f       	mul	r22, r18
     bb2:	f0 01       	movw	r30, r0
     bb4:	72 9f       	mul	r23, r18
     bb6:	bb 27       	eor	r27, r27
     bb8:	f0 0d       	add	r31, r0
     bba:	b1 1d       	adc	r27, r1
     bbc:	63 9f       	mul	r22, r19
     bbe:	aa 27       	eor	r26, r26
     bc0:	f0 0d       	add	r31, r0
     bc2:	b1 1d       	adc	r27, r1
     bc4:	aa 1f       	adc	r26, r26
     bc6:	64 9f       	mul	r22, r20
     bc8:	66 27       	eor	r22, r22
     bca:	b0 0d       	add	r27, r0
     bcc:	a1 1d       	adc	r26, r1
     bce:	66 1f       	adc	r22, r22
     bd0:	82 9f       	mul	r24, r18
     bd2:	22 27       	eor	r18, r18
     bd4:	b0 0d       	add	r27, r0
     bd6:	a1 1d       	adc	r26, r1
     bd8:	62 1f       	adc	r22, r18
     bda:	73 9f       	mul	r23, r19
     bdc:	b0 0d       	add	r27, r0
     bde:	a1 1d       	adc	r26, r1
     be0:	62 1f       	adc	r22, r18
     be2:	83 9f       	mul	r24, r19
     be4:	a0 0d       	add	r26, r0
     be6:	61 1d       	adc	r22, r1
     be8:	22 1f       	adc	r18, r18
     bea:	74 9f       	mul	r23, r20
     bec:	33 27       	eor	r19, r19
     bee:	a0 0d       	add	r26, r0
     bf0:	61 1d       	adc	r22, r1
     bf2:	23 1f       	adc	r18, r19
     bf4:	84 9f       	mul	r24, r20
     bf6:	60 0d       	add	r22, r0
     bf8:	21 1d       	adc	r18, r1
     bfa:	82 2f       	mov	r24, r18
     bfc:	76 2f       	mov	r23, r22
     bfe:	6a 2f       	mov	r22, r26
     c00:	11 24       	eor	r1, r1
     c02:	9f 57       	subi	r25, 0x7F	; 127
     c04:	50 40       	sbci	r21, 0x00	; 0
     c06:	8a f0       	brmi	.+34     	; 0xc2a <__mulsf3_pse+0x84>
     c08:	e1 f0       	breq	.+56     	; 0xc42 <__mulsf3_pse+0x9c>
     c0a:	88 23       	and	r24, r24
     c0c:	4a f0       	brmi	.+18     	; 0xc20 <__mulsf3_pse+0x7a>
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	bb 1f       	adc	r27, r27
     c14:	66 1f       	adc	r22, r22
     c16:	77 1f       	adc	r23, r23
     c18:	88 1f       	adc	r24, r24
     c1a:	91 50       	subi	r25, 0x01	; 1
     c1c:	50 40       	sbci	r21, 0x00	; 0
     c1e:	a9 f7       	brne	.-22     	; 0xc0a <__mulsf3_pse+0x64>
     c20:	9e 3f       	cpi	r25, 0xFE	; 254
     c22:	51 05       	cpc	r21, r1
     c24:	70 f0       	brcs	.+28     	; 0xc42 <__mulsf3_pse+0x9c>
     c26:	5c cf       	rjmp	.-328    	; 0xae0 <__fp_inf>
     c28:	a6 cf       	rjmp	.-180    	; 0xb76 <__fp_szero>
     c2a:	5f 3f       	cpi	r21, 0xFF	; 255
     c2c:	ec f3       	brlt	.-6      	; 0xc28 <__mulsf3_pse+0x82>
     c2e:	98 3e       	cpi	r25, 0xE8	; 232
     c30:	dc f3       	brlt	.-10     	; 0xc28 <__mulsf3_pse+0x82>
     c32:	86 95       	lsr	r24
     c34:	77 95       	ror	r23
     c36:	67 95       	ror	r22
     c38:	b7 95       	ror	r27
     c3a:	f7 95       	ror	r31
     c3c:	e7 95       	ror	r30
     c3e:	9f 5f       	subi	r25, 0xFF	; 255
     c40:	c1 f7       	brne	.-16     	; 0xc32 <__mulsf3_pse+0x8c>
     c42:	fe 2b       	or	r31, r30
     c44:	88 0f       	add	r24, r24
     c46:	91 1d       	adc	r25, r1
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	97 f9       	bld	r25, 7
     c4e:	08 95       	ret

00000c50 <vfprintf>:
     c50:	2f 92       	push	r2
     c52:	3f 92       	push	r3
     c54:	4f 92       	push	r4
     c56:	5f 92       	push	r5
     c58:	6f 92       	push	r6
     c5a:	7f 92       	push	r7
     c5c:	8f 92       	push	r8
     c5e:	9f 92       	push	r9
     c60:	af 92       	push	r10
     c62:	bf 92       	push	r11
     c64:	cf 92       	push	r12
     c66:	df 92       	push	r13
     c68:	ef 92       	push	r14
     c6a:	ff 92       	push	r15
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	62 97       	sbiw	r28, 0x12	; 18
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	7c 01       	movw	r14, r24
     c86:	1b 01       	movw	r2, r22
     c88:	6a 01       	movw	r12, r20
     c8a:	fc 01       	movw	r30, r24
     c8c:	17 82       	std	Z+7, r1	; 0x07
     c8e:	16 82       	std	Z+6, r1	; 0x06
     c90:	83 81       	ldd	r24, Z+3	; 0x03
     c92:	81 fd       	sbrc	r24, 1
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <vfprintf+0x4c>
     c96:	6b c3       	rjmp	.+1750   	; 0x136e <vfprintf+0x71e>
     c98:	65 01       	movw	r12, r10
     c9a:	05 c0       	rjmp	.+10     	; 0xca6 <vfprintf+0x56>
     c9c:	88 24       	eor	r8, r8
     c9e:	83 94       	inc	r8
     ca0:	91 2c       	mov	r9, r1
     ca2:	8c 0e       	add	r8, r28
     ca4:	9d 1e       	adc	r9, r29
     ca6:	f7 01       	movw	r30, r14
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	f1 01       	movw	r30, r2
     cac:	93 fd       	sbrc	r25, 3
     cae:	85 91       	lpm	r24, Z+
     cb0:	93 ff       	sbrs	r25, 3
     cb2:	81 91       	ld	r24, Z+
     cb4:	1f 01       	movw	r2, r30
     cb6:	88 23       	and	r24, r24
     cb8:	09 f4       	brne	.+2      	; 0xcbc <vfprintf+0x6c>
     cba:	55 c3       	rjmp	.+1706   	; 0x1366 <vfprintf+0x716>
     cbc:	85 32       	cpi	r24, 0x25	; 37
     cbe:	39 f4       	brne	.+14     	; 0xcce <vfprintf+0x7e>
     cc0:	93 fd       	sbrc	r25, 3
     cc2:	85 91       	lpm	r24, Z+
     cc4:	93 ff       	sbrs	r25, 3
     cc6:	81 91       	ld	r24, Z+
     cc8:	1f 01       	movw	r2, r30
     cca:	85 32       	cpi	r24, 0x25	; 37
     ccc:	31 f4       	brne	.+12     	; 0xcda <vfprintf+0x8a>
     cce:	b7 01       	movw	r22, r14
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
     cd6:	56 01       	movw	r10, r12
     cd8:	df cf       	rjmp	.-66     	; 0xc98 <vfprintf+0x48>
     cda:	71 2c       	mov	r7, r1
     cdc:	61 2c       	mov	r6, r1
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	20 32       	cpi	r18, 0x20	; 32
     ce2:	a8 f4       	brcc	.+42     	; 0xd0e <vfprintf+0xbe>
     ce4:	8b 32       	cpi	r24, 0x2B	; 43
     ce6:	61 f0       	breq	.+24     	; 0xd00 <vfprintf+0xb0>
     ce8:	28 f4       	brcc	.+10     	; 0xcf4 <vfprintf+0xa4>
     cea:	80 32       	cpi	r24, 0x20	; 32
     cec:	51 f0       	breq	.+20     	; 0xd02 <vfprintf+0xb2>
     cee:	83 32       	cpi	r24, 0x23	; 35
     cf0:	71 f4       	brne	.+28     	; 0xd0e <vfprintf+0xbe>
     cf2:	0b c0       	rjmp	.+22     	; 0xd0a <vfprintf+0xba>
     cf4:	8d 32       	cpi	r24, 0x2D	; 45
     cf6:	39 f0       	breq	.+14     	; 0xd06 <vfprintf+0xb6>
     cf8:	80 33       	cpi	r24, 0x30	; 48
     cfa:	49 f4       	brne	.+18     	; 0xd0e <vfprintf+0xbe>
     cfc:	21 60       	ori	r18, 0x01	; 1
     cfe:	28 c0       	rjmp	.+80     	; 0xd50 <vfprintf+0x100>
     d00:	22 60       	ori	r18, 0x02	; 2
     d02:	24 60       	ori	r18, 0x04	; 4
     d04:	25 c0       	rjmp	.+74     	; 0xd50 <vfprintf+0x100>
     d06:	28 60       	ori	r18, 0x08	; 8
     d08:	23 c0       	rjmp	.+70     	; 0xd50 <vfprintf+0x100>
     d0a:	20 61       	ori	r18, 0x10	; 16
     d0c:	21 c0       	rjmp	.+66     	; 0xd50 <vfprintf+0x100>
     d0e:	27 fd       	sbrc	r18, 7
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <vfprintf+0x110>
     d12:	38 2f       	mov	r19, r24
     d14:	30 53       	subi	r19, 0x30	; 48
     d16:	3a 30       	cpi	r19, 0x0A	; 10
     d18:	78 f4       	brcc	.+30     	; 0xd38 <vfprintf+0xe8>
     d1a:	26 ff       	sbrs	r18, 6
     d1c:	06 c0       	rjmp	.+12     	; 0xd2a <vfprintf+0xda>
     d1e:	fa e0       	ldi	r31, 0x0A	; 10
     d20:	7f 9e       	mul	r7, r31
     d22:	30 0d       	add	r19, r0
     d24:	11 24       	eor	r1, r1
     d26:	73 2e       	mov	r7, r19
     d28:	13 c0       	rjmp	.+38     	; 0xd50 <vfprintf+0x100>
     d2a:	4a e0       	ldi	r20, 0x0A	; 10
     d2c:	64 9e       	mul	r6, r20
     d2e:	30 0d       	add	r19, r0
     d30:	11 24       	eor	r1, r1
     d32:	63 2e       	mov	r6, r19
     d34:	20 62       	ori	r18, 0x20	; 32
     d36:	0c c0       	rjmp	.+24     	; 0xd50 <vfprintf+0x100>
     d38:	8e 32       	cpi	r24, 0x2E	; 46
     d3a:	21 f4       	brne	.+8      	; 0xd44 <vfprintf+0xf4>
     d3c:	26 fd       	sbrc	r18, 6
     d3e:	13 c3       	rjmp	.+1574   	; 0x1366 <vfprintf+0x716>
     d40:	20 64       	ori	r18, 0x40	; 64
     d42:	06 c0       	rjmp	.+12     	; 0xd50 <vfprintf+0x100>
     d44:	8c 36       	cpi	r24, 0x6C	; 108
     d46:	11 f4       	brne	.+4      	; 0xd4c <vfprintf+0xfc>
     d48:	20 68       	ori	r18, 0x80	; 128
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <vfprintf+0x100>
     d4c:	88 36       	cpi	r24, 0x68	; 104
     d4e:	41 f4       	brne	.+16     	; 0xd60 <vfprintf+0x110>
     d50:	f1 01       	movw	r30, r2
     d52:	93 fd       	sbrc	r25, 3
     d54:	85 91       	lpm	r24, Z+
     d56:	93 ff       	sbrs	r25, 3
     d58:	81 91       	ld	r24, Z+
     d5a:	1f 01       	movw	r2, r30
     d5c:	81 11       	cpse	r24, r1
     d5e:	c0 cf       	rjmp	.-128    	; 0xce0 <vfprintf+0x90>
     d60:	98 2f       	mov	r25, r24
     d62:	95 54       	subi	r25, 0x45	; 69
     d64:	93 30       	cpi	r25, 0x03	; 3
     d66:	18 f4       	brcc	.+6      	; 0xd6e <vfprintf+0x11e>
     d68:	20 61       	ori	r18, 0x10	; 16
     d6a:	80 5e       	subi	r24, 0xE0	; 224
     d6c:	06 c0       	rjmp	.+12     	; 0xd7a <vfprintf+0x12a>
     d6e:	98 2f       	mov	r25, r24
     d70:	95 56       	subi	r25, 0x65	; 101
     d72:	93 30       	cpi	r25, 0x03	; 3
     d74:	08 f0       	brcs	.+2      	; 0xd78 <vfprintf+0x128>
     d76:	a4 c1       	rjmp	.+840    	; 0x10c0 <vfprintf+0x470>
     d78:	2f 7e       	andi	r18, 0xEF	; 239
     d7a:	26 fd       	sbrc	r18, 6
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <vfprintf+0x132>
     d7e:	16 e0       	ldi	r17, 0x06	; 6
     d80:	71 2e       	mov	r7, r17
     d82:	bf e3       	ldi	r27, 0x3F	; 63
     d84:	5b 2e       	mov	r5, r27
     d86:	52 22       	and	r5, r18
     d88:	85 36       	cpi	r24, 0x65	; 101
     d8a:	19 f4       	brne	.+6      	; 0xd92 <vfprintf+0x142>
     d8c:	f0 e4       	ldi	r31, 0x40	; 64
     d8e:	5f 2a       	or	r5, r31
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <vfprintf+0x150>
     d92:	86 36       	cpi	r24, 0x66	; 102
     d94:	19 f4       	brne	.+6      	; 0xd9c <vfprintf+0x14c>
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	54 2a       	or	r5, r20
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <vfprintf+0x150>
     d9c:	71 10       	cpse	r7, r1
     d9e:	7a 94       	dec	r7
     da0:	57 fe       	sbrs	r5, 7
     da2:	07 c0       	rjmp	.+14     	; 0xdb2 <vfprintf+0x162>
     da4:	5b e3       	ldi	r21, 0x3B	; 59
     da6:	57 15       	cp	r21, r7
     da8:	48 f0       	brcs	.+18     	; 0xdbc <vfprintf+0x16c>
     daa:	47 2c       	mov	r4, r7
     dac:	43 94       	inc	r4
     dae:	27 e0       	ldi	r18, 0x07	; 7
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <vfprintf+0x17c>
     db2:	87 e0       	ldi	r24, 0x07	; 7
     db4:	87 15       	cp	r24, r7
     db6:	30 f0       	brcs	.+12     	; 0xdc4 <vfprintf+0x174>
     db8:	27 2d       	mov	r18, r7
     dba:	07 c0       	rjmp	.+14     	; 0xdca <vfprintf+0x17a>
     dbc:	27 e0       	ldi	r18, 0x07	; 7
     dbe:	ac e3       	ldi	r26, 0x3C	; 60
     dc0:	4a 2e       	mov	r4, r26
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <vfprintf+0x17c>
     dc4:	27 e0       	ldi	r18, 0x07	; 7
     dc6:	f7 e0       	ldi	r31, 0x07	; 7
     dc8:	7f 2e       	mov	r7, r31
     dca:	41 2c       	mov	r4, r1
     dcc:	56 01       	movw	r10, r12
     dce:	94 e0       	ldi	r25, 0x04	; 4
     dd0:	a9 0e       	add	r10, r25
     dd2:	b1 1c       	adc	r11, r1
     dd4:	f6 01       	movw	r30, r12
     dd6:	60 81       	ld	r22, Z
     dd8:	71 81       	ldd	r23, Z+1	; 0x01
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	93 81       	ldd	r25, Z+3	; 0x03
     dde:	04 2d       	mov	r16, r4
     de0:	a4 01       	movw	r20, r8
     de2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__ftoa_engine>
     de6:	8c 01       	movw	r16, r24
     de8:	49 81       	ldd	r20, Y+1	; 0x01
     dea:	4c 87       	std	Y+12, r20	; 0x0c
     dec:	40 ff       	sbrs	r20, 0
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x1a4>
     df0:	43 ff       	sbrs	r20, 3
     df2:	07 c0       	rjmp	.+14     	; 0xe02 <vfprintf+0x1b2>
     df4:	51 fc       	sbrc	r5, 1
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <vfprintf+0x1b8>
     df8:	52 fe       	sbrs	r5, 2
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <vfprintf+0x1be>
     dfc:	e0 e2       	ldi	r30, 0x20	; 32
     dfe:	de 2e       	mov	r13, r30
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <vfprintf+0x1c0>
     e02:	7d e2       	ldi	r23, 0x2D	; 45
     e04:	d7 2e       	mov	r13, r23
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <vfprintf+0x1c0>
     e08:	6b e2       	ldi	r22, 0x2B	; 43
     e0a:	d6 2e       	mov	r13, r22
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <vfprintf+0x1c0>
     e0e:	d1 2c       	mov	r13, r1
     e10:	8c 85       	ldd	r24, Y+12	; 0x0c
     e12:	8c 70       	andi	r24, 0x0C	; 12
     e14:	a1 f1       	breq	.+104    	; 0xe7e <vfprintf+0x22e>
     e16:	dd 20       	and	r13, r13
     e18:	11 f0       	breq	.+4      	; 0xe1e <vfprintf+0x1ce>
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <vfprintf+0x1d0>
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	86 15       	cp	r24, r6
     e22:	10 f0       	brcs	.+4      	; 0xe28 <vfprintf+0x1d8>
     e24:	61 2c       	mov	r6, r1
     e26:	0b c0       	rjmp	.+22     	; 0xe3e <vfprintf+0x1ee>
     e28:	68 1a       	sub	r6, r24
     e2a:	53 fc       	sbrc	r5, 3
     e2c:	08 c0       	rjmp	.+16     	; 0xe3e <vfprintf+0x1ee>
     e2e:	b7 01       	movw	r22, r14
     e30:	80 e2       	ldi	r24, 0x20	; 32
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
     e38:	6a 94       	dec	r6
     e3a:	c9 f7       	brne	.-14     	; 0xe2e <vfprintf+0x1de>
     e3c:	f3 cf       	rjmp	.-26     	; 0xe24 <vfprintf+0x1d4>
     e3e:	dd 20       	and	r13, r13
     e40:	29 f0       	breq	.+10     	; 0xe4c <vfprintf+0x1fc>
     e42:	b7 01       	movw	r22, r14
     e44:	8d 2d       	mov	r24, r13
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
     e4c:	5c 85       	ldd	r21, Y+12	; 0x0c
     e4e:	53 fd       	sbrc	r21, 3
     e50:	03 c0       	rjmp	.+6      	; 0xe58 <vfprintf+0x208>
     e52:	0f ee       	ldi	r16, 0xEF	; 239
     e54:	10 e0       	ldi	r17, 0x00	; 0
     e56:	0c c0       	rjmp	.+24     	; 0xe70 <vfprintf+0x220>
     e58:	0b ee       	ldi	r16, 0xEB	; 235
     e5a:	10 e0       	ldi	r17, 0x00	; 0
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <vfprintf+0x220>
     e5e:	51 10       	cpse	r5, r1
     e60:	80 52       	subi	r24, 0x20	; 32
     e62:	b7 01       	movw	r22, r14
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
     e6a:	0f 5f       	subi	r16, 0xFF	; 255
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <vfprintf+0x224>
     e70:	80 e1       	ldi	r24, 0x10	; 16
     e72:	58 22       	and	r5, r24
     e74:	f8 01       	movw	r30, r16
     e76:	84 91       	lpm	r24, Z
     e78:	81 11       	cpse	r24, r1
     e7a:	f1 cf       	rjmp	.-30     	; 0xe5e <vfprintf+0x20e>
     e7c:	71 c2       	rjmp	.+1250   	; 0x1360 <vfprintf+0x710>
     e7e:	57 fe       	sbrs	r5, 7
     e80:	0e c0       	rjmp	.+28     	; 0xe9e <vfprintf+0x24e>
     e82:	40 0e       	add	r4, r16
     e84:	4c 85       	ldd	r20, Y+12	; 0x0c
     e86:	44 ff       	sbrs	r20, 4
     e88:	04 c0       	rjmp	.+8      	; 0xe92 <vfprintf+0x242>
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	81 33       	cpi	r24, 0x31	; 49
     e8e:	09 f4       	brne	.+2      	; 0xe92 <vfprintf+0x242>
     e90:	4a 94       	dec	r4
     e92:	14 14       	cp	r1, r4
     e94:	4c f5       	brge	.+82     	; 0xee8 <vfprintf+0x298>
     e96:	58 e0       	ldi	r21, 0x08	; 8
     e98:	54 15       	cp	r21, r4
     e9a:	48 f1       	brcs	.+82     	; 0xeee <vfprintf+0x29e>
     e9c:	2c c0       	rjmp	.+88     	; 0xef6 <vfprintf+0x2a6>
     e9e:	56 fc       	sbrc	r5, 6
     ea0:	2a c0       	rjmp	.+84     	; 0xef6 <vfprintf+0x2a6>
     ea2:	87 2d       	mov	r24, r7
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	80 17       	cp	r24, r16
     ea8:	91 07       	cpc	r25, r17
     eaa:	44 f0       	brlt	.+16     	; 0xebc <vfprintf+0x26c>
     eac:	0c 3f       	cpi	r16, 0xFC	; 252
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	18 07       	cpc	r17, r24
     eb2:	24 f0       	brlt	.+8      	; 0xebc <vfprintf+0x26c>
     eb4:	90 e8       	ldi	r25, 0x80	; 128
     eb6:	59 2a       	or	r5, r25
     eb8:	01 c0       	rjmp	.+2      	; 0xebc <vfprintf+0x26c>
     eba:	7a 94       	dec	r7
     ebc:	77 20       	and	r7, r7
     ebe:	49 f0       	breq	.+18     	; 0xed2 <vfprintf+0x282>
     ec0:	e2 e0       	ldi	r30, 0x02	; 2
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	ec 0f       	add	r30, r28
     ec6:	fd 1f       	adc	r31, r29
     ec8:	e7 0d       	add	r30, r7
     eca:	f1 1d       	adc	r31, r1
     ecc:	80 81       	ld	r24, Z
     ece:	80 33       	cpi	r24, 0x30	; 48
     ed0:	a1 f3       	breq	.-24     	; 0xeba <vfprintf+0x26a>
     ed2:	57 fe       	sbrs	r5, 7
     ed4:	10 c0       	rjmp	.+32     	; 0xef6 <vfprintf+0x2a6>
     ed6:	47 2c       	mov	r4, r7
     ed8:	43 94       	inc	r4
     eda:	87 2d       	mov	r24, r7
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	08 17       	cp	r16, r24
     ee0:	19 07       	cpc	r17, r25
     ee2:	44 f4       	brge	.+16     	; 0xef4 <vfprintf+0x2a4>
     ee4:	70 1a       	sub	r7, r16
     ee6:	07 c0       	rjmp	.+14     	; 0xef6 <vfprintf+0x2a6>
     ee8:	44 24       	eor	r4, r4
     eea:	43 94       	inc	r4
     eec:	04 c0       	rjmp	.+8      	; 0xef6 <vfprintf+0x2a6>
     eee:	58 e0       	ldi	r21, 0x08	; 8
     ef0:	45 2e       	mov	r4, r21
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <vfprintf+0x2a6>
     ef4:	71 2c       	mov	r7, r1
     ef6:	57 fe       	sbrs	r5, 7
     ef8:	07 c0       	rjmp	.+14     	; 0xf08 <vfprintf+0x2b8>
     efa:	10 16       	cp	r1, r16
     efc:	11 06       	cpc	r1, r17
     efe:	3c f4       	brge	.+14     	; 0xf0e <vfprintf+0x2be>
     f00:	98 01       	movw	r18, r16
     f02:	2f 5f       	subi	r18, 0xFF	; 255
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <vfprintf+0x2c2>
     f08:	25 e0       	ldi	r18, 0x05	; 5
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <vfprintf+0x2c2>
     f0e:	21 e0       	ldi	r18, 0x01	; 1
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	dd 20       	and	r13, r13
     f14:	11 f0       	breq	.+4      	; 0xf1a <vfprintf+0x2ca>
     f16:	2f 5f       	subi	r18, 0xFF	; 255
     f18:	3f 4f       	sbci	r19, 0xFF	; 255
     f1a:	77 20       	and	r7, r7
     f1c:	31 f0       	breq	.+12     	; 0xf2a <vfprintf+0x2da>
     f1e:	47 2d       	mov	r20, r7
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	4f 5f       	subi	r20, 0xFF	; 255
     f24:	5f 4f       	sbci	r21, 0xFF	; 255
     f26:	24 0f       	add	r18, r20
     f28:	35 1f       	adc	r19, r21
     f2a:	46 2d       	mov	r20, r6
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	24 17       	cp	r18, r20
     f30:	35 07       	cpc	r19, r21
     f32:	14 f4       	brge	.+4      	; 0xf38 <vfprintf+0x2e8>
     f34:	62 1a       	sub	r6, r18
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <vfprintf+0x2ea>
     f38:	61 2c       	mov	r6, r1
     f3a:	85 2d       	mov	r24, r5
     f3c:	89 70       	andi	r24, 0x09	; 9
     f3e:	49 f4       	brne	.+18     	; 0xf52 <vfprintf+0x302>
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <vfprintf+0x2fe>
     f42:	b7 01       	movw	r22, r14
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
     f4c:	6a 94       	dec	r6
     f4e:	61 10       	cpse	r6, r1
     f50:	f8 cf       	rjmp	.-16     	; 0xf42 <vfprintf+0x2f2>
     f52:	dd 20       	and	r13, r13
     f54:	29 f0       	breq	.+10     	; 0xf60 <vfprintf+0x310>
     f56:	b7 01       	movw	r22, r14
     f58:	8d 2d       	mov	r24, r13
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
     f60:	53 fc       	sbrc	r5, 3
     f62:	09 c0       	rjmp	.+18     	; 0xf76 <vfprintf+0x326>
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <vfprintf+0x322>
     f66:	b7 01       	movw	r22, r14
     f68:	80 e3       	ldi	r24, 0x30	; 48
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
     f70:	6a 94       	dec	r6
     f72:	61 10       	cpse	r6, r1
     f74:	f8 cf       	rjmp	.-16     	; 0xf66 <vfprintf+0x316>
     f76:	57 fe       	sbrs	r5, 7
     f78:	56 c0       	rjmp	.+172    	; 0x1026 <vfprintf+0x3d6>
     f7a:	68 01       	movw	r12, r16
     f7c:	17 ff       	sbrs	r17, 7
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <vfprintf+0x334>
     f80:	c1 2c       	mov	r12, r1
     f82:	d1 2c       	mov	r13, r1
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	a8 01       	movw	r20, r16
     f8a:	44 19       	sub	r20, r4
     f8c:	51 09       	sbc	r21, r1
     f8e:	5e 87       	std	Y+14, r21	; 0x0e
     f90:	4d 87       	std	Y+13, r20	; 0x0d
     f92:	28 01       	movw	r4, r16
     f94:	4c 18       	sub	r4, r12
     f96:	5d 08       	sbc	r5, r13
     f98:	48 0c       	add	r4, r8
     f9a:	59 1c       	adc	r5, r9
     f9c:	87 2d       	mov	r24, r7
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	44 27       	eor	r20, r20
     fa2:	55 27       	eor	r21, r21
     fa4:	48 1b       	sub	r20, r24
     fa6:	59 0b       	sbc	r21, r25
     fa8:	58 8b       	std	Y+16, r21	; 0x10
     faa:	4f 87       	std	Y+15, r20	; 0x0f
     fac:	5f ef       	ldi	r21, 0xFF	; 255
     fae:	c5 16       	cp	r12, r21
     fb0:	d5 06       	cpc	r13, r21
     fb2:	49 f4       	brne	.+18     	; 0xfc6 <vfprintf+0x376>
     fb4:	b7 01       	movw	r22, r14
     fb6:	8e e2       	ldi	r24, 0x2E	; 46
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	2a 8b       	std	Y+18, r18	; 0x12
     fbc:	39 8b       	std	Y+17, r19	; 0x11
     fbe:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
     fc2:	39 89       	ldd	r19, Y+17	; 0x11
     fc4:	2a 89       	ldd	r18, Y+18	; 0x12
     fc6:	0c 15       	cp	r16, r12
     fc8:	1d 05       	cpc	r17, r13
     fca:	54 f0       	brlt	.+20     	; 0xfe0 <vfprintf+0x390>
     fcc:	4d 85       	ldd	r20, Y+13	; 0x0d
     fce:	5e 85       	ldd	r21, Y+14	; 0x0e
     fd0:	4c 15       	cp	r20, r12
     fd2:	5d 05       	cpc	r21, r13
     fd4:	2c f4       	brge	.+10     	; 0xfe0 <vfprintf+0x390>
     fd6:	f2 01       	movw	r30, r4
     fd8:	e2 0f       	add	r30, r18
     fda:	f3 1f       	adc	r31, r19
     fdc:	81 81       	ldd	r24, Z+1	; 0x01
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <vfprintf+0x392>
     fe0:	80 e3       	ldi	r24, 0x30	; 48
     fe2:	51 e0       	ldi	r21, 0x01	; 1
     fe4:	c5 1a       	sub	r12, r21
     fe6:	d1 08       	sbc	r13, r1
     fe8:	2f 5f       	subi	r18, 0xFF	; 255
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	4f 85       	ldd	r20, Y+15	; 0x0f
     fee:	58 89       	ldd	r21, Y+16	; 0x10
     ff0:	c4 16       	cp	r12, r20
     ff2:	d5 06       	cpc	r13, r21
     ff4:	4c f0       	brlt	.+18     	; 0x1008 <vfprintf+0x3b8>
     ff6:	b7 01       	movw	r22, r14
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	2a 8b       	std	Y+18, r18	; 0x12
     ffc:	39 8b       	std	Y+17, r19	; 0x11
     ffe:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    1002:	2a 89       	ldd	r18, Y+18	; 0x12
    1004:	39 89       	ldd	r19, Y+17	; 0x11
    1006:	d2 cf       	rjmp	.-92     	; 0xfac <vfprintf+0x35c>
    1008:	c0 16       	cp	r12, r16
    100a:	d1 06       	cpc	r13, r17
    100c:	49 f4       	brne	.+18     	; 0x1020 <vfprintf+0x3d0>
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	96 33       	cpi	r25, 0x36	; 54
    1012:	28 f4       	brcc	.+10     	; 0x101e <vfprintf+0x3ce>
    1014:	95 33       	cpi	r25, 0x35	; 53
    1016:	21 f4       	brne	.+8      	; 0x1020 <vfprintf+0x3d0>
    1018:	5c 85       	ldd	r21, Y+12	; 0x0c
    101a:	54 fd       	sbrc	r21, 4
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <vfprintf+0x3d0>
    101e:	81 e3       	ldi	r24, 0x31	; 49
    1020:	b7 01       	movw	r22, r14
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	4a c0       	rjmp	.+148    	; 0x10ba <vfprintf+0x46a>
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	81 33       	cpi	r24, 0x31	; 49
    102a:	19 f0       	breq	.+6      	; 0x1032 <vfprintf+0x3e2>
    102c:	4c 85       	ldd	r20, Y+12	; 0x0c
    102e:	4f 7e       	andi	r20, 0xEF	; 239
    1030:	4c 87       	std	Y+12, r20	; 0x0c
    1032:	b7 01       	movw	r22, r14
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    103a:	71 10       	cpse	r7, r1
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <vfprintf+0x3f8>
    103e:	54 fe       	sbrs	r5, 4
    1040:	16 c0       	rjmp	.+44     	; 0x106e <vfprintf+0x41e>
    1042:	85 e4       	ldi	r24, 0x45	; 69
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	15 c0       	rjmp	.+42     	; 0x1072 <vfprintf+0x422>
    1048:	b7 01       	movw	r22, r14
    104a:	8e e2       	ldi	r24, 0x2E	; 46
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    1052:	42 e0       	ldi	r20, 0x02	; 2
    1054:	d4 2e       	mov	r13, r20
    1056:	f4 01       	movw	r30, r8
    1058:	ed 0d       	add	r30, r13
    105a:	f1 1d       	adc	r31, r1
    105c:	d3 94       	inc	r13
    105e:	b7 01       	movw	r22, r14
    1060:	80 81       	ld	r24, Z
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    1068:	7a 94       	dec	r7
    106a:	a9 f7       	brne	.-22     	; 0x1056 <vfprintf+0x406>
    106c:	e8 cf       	rjmp	.-48     	; 0x103e <vfprintf+0x3ee>
    106e:	85 e6       	ldi	r24, 0x65	; 101
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	b7 01       	movw	r22, r14
    1074:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    1078:	17 fd       	sbrc	r17, 7
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <vfprintf+0x438>
    107c:	01 15       	cp	r16, r1
    107e:	11 05       	cpc	r17, r1
    1080:	41 f4       	brne	.+16     	; 0x1092 <vfprintf+0x442>
    1082:	5c 85       	ldd	r21, Y+12	; 0x0c
    1084:	54 ff       	sbrs	r21, 4
    1086:	05 c0       	rjmp	.+10     	; 0x1092 <vfprintf+0x442>
    1088:	11 95       	neg	r17
    108a:	01 95       	neg	r16
    108c:	11 09       	sbc	r17, r1
    108e:	8d e2       	ldi	r24, 0x2D	; 45
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <vfprintf+0x444>
    1092:	8b e2       	ldi	r24, 0x2B	; 43
    1094:	b7 01       	movw	r22, r14
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    109c:	80 e3       	ldi	r24, 0x30	; 48
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <vfprintf+0x456>
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	0a 50       	subi	r16, 0x0A	; 10
    10a4:	11 09       	sbc	r17, r1
    10a6:	0a 30       	cpi	r16, 0x0A	; 10
    10a8:	11 05       	cpc	r17, r1
    10aa:	d4 f7       	brge	.-12     	; 0x10a0 <vfprintf+0x450>
    10ac:	b7 01       	movw	r22, r14
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    10b4:	b7 01       	movw	r22, r14
    10b6:	c8 01       	movw	r24, r16
    10b8:	c0 96       	adiw	r24, 0x30	; 48
    10ba:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    10be:	50 c1       	rjmp	.+672    	; 0x1360 <vfprintf+0x710>
    10c0:	83 36       	cpi	r24, 0x63	; 99
    10c2:	31 f0       	breq	.+12     	; 0x10d0 <vfprintf+0x480>
    10c4:	83 37       	cpi	r24, 0x73	; 115
    10c6:	81 f0       	breq	.+32     	; 0x10e8 <vfprintf+0x498>
    10c8:	83 35       	cpi	r24, 0x53	; 83
    10ca:	09 f0       	breq	.+2      	; 0x10ce <vfprintf+0x47e>
    10cc:	5e c0       	rjmp	.+188    	; 0x118a <vfprintf+0x53a>
    10ce:	24 c0       	rjmp	.+72     	; 0x1118 <vfprintf+0x4c8>
    10d0:	56 01       	movw	r10, r12
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	a8 0e       	add	r10, r24
    10d6:	b1 1c       	adc	r11, r1
    10d8:	f6 01       	movw	r30, r12
    10da:	80 81       	ld	r24, Z
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	cc 24       	eor	r12, r12
    10e0:	c3 94       	inc	r12
    10e2:	d1 2c       	mov	r13, r1
    10e4:	84 01       	movw	r16, r8
    10e6:	14 c0       	rjmp	.+40     	; 0x1110 <vfprintf+0x4c0>
    10e8:	56 01       	movw	r10, r12
    10ea:	f2 e0       	ldi	r31, 0x02	; 2
    10ec:	af 0e       	add	r10, r31
    10ee:	b1 1c       	adc	r11, r1
    10f0:	f6 01       	movw	r30, r12
    10f2:	00 81       	ld	r16, Z
    10f4:	11 81       	ldd	r17, Z+1	; 0x01
    10f6:	26 ff       	sbrs	r18, 6
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <vfprintf+0x4b0>
    10fa:	67 2d       	mov	r22, r7
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <vfprintf+0x4b4>
    1100:	6f ef       	ldi	r22, 0xFF	; 255
    1102:	7f ef       	ldi	r23, 0xFF	; 255
    1104:	c8 01       	movw	r24, r16
    1106:	2a 8b       	std	Y+18, r18	; 0x12
    1108:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <strnlen>
    110c:	6c 01       	movw	r12, r24
    110e:	2a 89       	ldd	r18, Y+18	; 0x12
    1110:	9f e7       	ldi	r25, 0x7F	; 127
    1112:	59 2e       	mov	r5, r25
    1114:	52 22       	and	r5, r18
    1116:	17 c0       	rjmp	.+46     	; 0x1146 <vfprintf+0x4f6>
    1118:	56 01       	movw	r10, r12
    111a:	f2 e0       	ldi	r31, 0x02	; 2
    111c:	af 0e       	add	r10, r31
    111e:	b1 1c       	adc	r11, r1
    1120:	f6 01       	movw	r30, r12
    1122:	00 81       	ld	r16, Z
    1124:	11 81       	ldd	r17, Z+1	; 0x01
    1126:	26 ff       	sbrs	r18, 6
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <vfprintf+0x4e0>
    112a:	67 2d       	mov	r22, r7
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <vfprintf+0x4e4>
    1130:	6f ef       	ldi	r22, 0xFF	; 255
    1132:	7f ef       	ldi	r23, 0xFF	; 255
    1134:	c8 01       	movw	r24, r16
    1136:	2a 8b       	std	Y+18, r18	; 0x12
    1138:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <strnlen_P>
    113c:	6c 01       	movw	r12, r24
    113e:	2a 89       	ldd	r18, Y+18	; 0x12
    1140:	80 e8       	ldi	r24, 0x80	; 128
    1142:	58 2e       	mov	r5, r24
    1144:	52 2a       	or	r5, r18
    1146:	53 fc       	sbrc	r5, 3
    1148:	1c c0       	rjmp	.+56     	; 0x1182 <vfprintf+0x532>
    114a:	06 c0       	rjmp	.+12     	; 0x1158 <vfprintf+0x508>
    114c:	b7 01       	movw	r22, r14
    114e:	80 e2       	ldi	r24, 0x20	; 32
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    1156:	6a 94       	dec	r6
    1158:	86 2d       	mov	r24, r6
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	c8 16       	cp	r12, r24
    115e:	d9 06       	cpc	r13, r25
    1160:	a8 f3       	brcs	.-22     	; 0x114c <vfprintf+0x4fc>
    1162:	0f c0       	rjmp	.+30     	; 0x1182 <vfprintf+0x532>
    1164:	f8 01       	movw	r30, r16
    1166:	57 fc       	sbrc	r5, 7
    1168:	85 91       	lpm	r24, Z+
    116a:	57 fe       	sbrs	r5, 7
    116c:	81 91       	ld	r24, Z+
    116e:	8f 01       	movw	r16, r30
    1170:	b7 01       	movw	r22, r14
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    1178:	61 10       	cpse	r6, r1
    117a:	6a 94       	dec	r6
    117c:	f1 e0       	ldi	r31, 0x01	; 1
    117e:	cf 1a       	sub	r12, r31
    1180:	d1 08       	sbc	r13, r1
    1182:	c1 14       	cp	r12, r1
    1184:	d1 04       	cpc	r13, r1
    1186:	71 f7       	brne	.-36     	; 0x1164 <vfprintf+0x514>
    1188:	eb c0       	rjmp	.+470    	; 0x1360 <vfprintf+0x710>
    118a:	84 36       	cpi	r24, 0x64	; 100
    118c:	11 f0       	breq	.+4      	; 0x1192 <vfprintf+0x542>
    118e:	89 36       	cpi	r24, 0x69	; 105
    1190:	51 f5       	brne	.+84     	; 0x11e6 <vfprintf+0x596>
    1192:	56 01       	movw	r10, r12
    1194:	27 ff       	sbrs	r18, 7
    1196:	09 c0       	rjmp	.+18     	; 0x11aa <vfprintf+0x55a>
    1198:	44 e0       	ldi	r20, 0x04	; 4
    119a:	a4 0e       	add	r10, r20
    119c:	b1 1c       	adc	r11, r1
    119e:	f6 01       	movw	r30, r12
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	0a c0       	rjmp	.+20     	; 0x11be <vfprintf+0x56e>
    11aa:	f2 e0       	ldi	r31, 0x02	; 2
    11ac:	af 0e       	add	r10, r31
    11ae:	b1 1c       	adc	r11, r1
    11b0:	f6 01       	movw	r30, r12
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	88 27       	eor	r24, r24
    11b8:	77 fd       	sbrc	r23, 7
    11ba:	80 95       	com	r24
    11bc:	98 2f       	mov	r25, r24
    11be:	12 2f       	mov	r17, r18
    11c0:	1f 76       	andi	r17, 0x6F	; 111
    11c2:	97 ff       	sbrs	r25, 7
    11c4:	08 c0       	rjmp	.+16     	; 0x11d6 <vfprintf+0x586>
    11c6:	90 95       	com	r25
    11c8:	80 95       	com	r24
    11ca:	70 95       	com	r23
    11cc:	61 95       	neg	r22
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	8f 4f       	sbci	r24, 0xFF	; 255
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	10 68       	ori	r17, 0x80	; 128
    11d6:	2a e0       	ldi	r18, 0x0A	; 10
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	a4 01       	movw	r20, r8
    11dc:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__ultoa_invert>
    11e0:	d8 2e       	mov	r13, r24
    11e2:	d8 18       	sub	r13, r8
    11e4:	40 c0       	rjmp	.+128    	; 0x1266 <vfprintf+0x616>
    11e6:	12 2f       	mov	r17, r18
    11e8:	85 37       	cpi	r24, 0x75	; 117
    11ea:	21 f4       	brne	.+8      	; 0x11f4 <vfprintf+0x5a4>
    11ec:	1f 7e       	andi	r17, 0xEF	; 239
    11ee:	2a e0       	ldi	r18, 0x0A	; 10
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	1f c0       	rjmp	.+62     	; 0x1232 <vfprintf+0x5e2>
    11f4:	19 7f       	andi	r17, 0xF9	; 249
    11f6:	8f 36       	cpi	r24, 0x6F	; 111
    11f8:	a1 f0       	breq	.+40     	; 0x1222 <vfprintf+0x5d2>
    11fa:	20 f4       	brcc	.+8      	; 0x1204 <vfprintf+0x5b4>
    11fc:	88 35       	cpi	r24, 0x58	; 88
    11fe:	09 f0       	breq	.+2      	; 0x1202 <vfprintf+0x5b2>
    1200:	b2 c0       	rjmp	.+356    	; 0x1366 <vfprintf+0x716>
    1202:	0b c0       	rjmp	.+22     	; 0x121a <vfprintf+0x5ca>
    1204:	80 37       	cpi	r24, 0x70	; 112
    1206:	21 f0       	breq	.+8      	; 0x1210 <vfprintf+0x5c0>
    1208:	88 37       	cpi	r24, 0x78	; 120
    120a:	09 f0       	breq	.+2      	; 0x120e <vfprintf+0x5be>
    120c:	ac c0       	rjmp	.+344    	; 0x1366 <vfprintf+0x716>
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <vfprintf+0x5c2>
    1210:	10 61       	ori	r17, 0x10	; 16
    1212:	14 ff       	sbrs	r17, 4
    1214:	09 c0       	rjmp	.+18     	; 0x1228 <vfprintf+0x5d8>
    1216:	14 60       	ori	r17, 0x04	; 4
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <vfprintf+0x5d8>
    121a:	24 ff       	sbrs	r18, 4
    121c:	08 c0       	rjmp	.+16     	; 0x122e <vfprintf+0x5de>
    121e:	16 60       	ori	r17, 0x06	; 6
    1220:	06 c0       	rjmp	.+12     	; 0x122e <vfprintf+0x5de>
    1222:	28 e0       	ldi	r18, 0x08	; 8
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	05 c0       	rjmp	.+10     	; 0x1232 <vfprintf+0x5e2>
    1228:	20 e1       	ldi	r18, 0x10	; 16
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <vfprintf+0x5e2>
    122e:	20 e1       	ldi	r18, 0x10	; 16
    1230:	32 e0       	ldi	r19, 0x02	; 2
    1232:	56 01       	movw	r10, r12
    1234:	17 ff       	sbrs	r17, 7
    1236:	09 c0       	rjmp	.+18     	; 0x124a <vfprintf+0x5fa>
    1238:	f4 e0       	ldi	r31, 0x04	; 4
    123a:	af 0e       	add	r10, r31
    123c:	b1 1c       	adc	r11, r1
    123e:	f6 01       	movw	r30, r12
    1240:	60 81       	ld	r22, Z
    1242:	71 81       	ldd	r23, Z+1	; 0x01
    1244:	82 81       	ldd	r24, Z+2	; 0x02
    1246:	93 81       	ldd	r25, Z+3	; 0x03
    1248:	08 c0       	rjmp	.+16     	; 0x125a <vfprintf+0x60a>
    124a:	f2 e0       	ldi	r31, 0x02	; 2
    124c:	af 0e       	add	r10, r31
    124e:	b1 1c       	adc	r11, r1
    1250:	f6 01       	movw	r30, r12
    1252:	60 81       	ld	r22, Z
    1254:	71 81       	ldd	r23, Z+1	; 0x01
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a4 01       	movw	r20, r8
    125c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__ultoa_invert>
    1260:	d8 2e       	mov	r13, r24
    1262:	d8 18       	sub	r13, r8
    1264:	1f 77       	andi	r17, 0x7F	; 127
    1266:	16 ff       	sbrs	r17, 6
    1268:	0b c0       	rjmp	.+22     	; 0x1280 <vfprintf+0x630>
    126a:	21 2f       	mov	r18, r17
    126c:	2e 7f       	andi	r18, 0xFE	; 254
    126e:	d7 14       	cp	r13, r7
    1270:	50 f4       	brcc	.+20     	; 0x1286 <vfprintf+0x636>
    1272:	14 ff       	sbrs	r17, 4
    1274:	0a c0       	rjmp	.+20     	; 0x128a <vfprintf+0x63a>
    1276:	12 fd       	sbrc	r17, 2
    1278:	08 c0       	rjmp	.+16     	; 0x128a <vfprintf+0x63a>
    127a:	21 2f       	mov	r18, r17
    127c:	2e 7e       	andi	r18, 0xEE	; 238
    127e:	05 c0       	rjmp	.+10     	; 0x128a <vfprintf+0x63a>
    1280:	0d 2d       	mov	r16, r13
    1282:	21 2f       	mov	r18, r17
    1284:	03 c0       	rjmp	.+6      	; 0x128c <vfprintf+0x63c>
    1286:	0d 2d       	mov	r16, r13
    1288:	01 c0       	rjmp	.+2      	; 0x128c <vfprintf+0x63c>
    128a:	07 2d       	mov	r16, r7
    128c:	24 ff       	sbrs	r18, 4
    128e:	0c c0       	rjmp	.+24     	; 0x12a8 <vfprintf+0x658>
    1290:	fe 01       	movw	r30, r28
    1292:	ed 0d       	add	r30, r13
    1294:	f1 1d       	adc	r31, r1
    1296:	80 81       	ld	r24, Z
    1298:	80 33       	cpi	r24, 0x30	; 48
    129a:	11 f4       	brne	.+4      	; 0x12a0 <vfprintf+0x650>
    129c:	29 7e       	andi	r18, 0xE9	; 233
    129e:	08 c0       	rjmp	.+16     	; 0x12b0 <vfprintf+0x660>
    12a0:	22 ff       	sbrs	r18, 2
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <vfprintf+0x65e>
    12a4:	0e 5f       	subi	r16, 0xFE	; 254
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <vfprintf+0x660>
    12a8:	82 2f       	mov	r24, r18
    12aa:	86 78       	andi	r24, 0x86	; 134
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <vfprintf+0x660>
    12ae:	0f 5f       	subi	r16, 0xFF	; 255
    12b0:	23 fd       	sbrc	r18, 3
    12b2:	14 c0       	rjmp	.+40     	; 0x12dc <vfprintf+0x68c>
    12b4:	20 ff       	sbrs	r18, 0
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <vfprintf+0x686>
    12b8:	7d 2c       	mov	r7, r13
    12ba:	06 15       	cp	r16, r6
    12bc:	60 f4       	brcc	.+24     	; 0x12d6 <vfprintf+0x686>
    12be:	76 0c       	add	r7, r6
    12c0:	70 1a       	sub	r7, r16
    12c2:	06 2d       	mov	r16, r6
    12c4:	08 c0       	rjmp	.+16     	; 0x12d6 <vfprintf+0x686>
    12c6:	b7 01       	movw	r22, r14
    12c8:	80 e2       	ldi	r24, 0x20	; 32
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	2a 8b       	std	Y+18, r18	; 0x12
    12ce:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    12d2:	0f 5f       	subi	r16, 0xFF	; 255
    12d4:	2a 89       	ldd	r18, Y+18	; 0x12
    12d6:	06 15       	cp	r16, r6
    12d8:	b0 f3       	brcs	.-20     	; 0x12c6 <vfprintf+0x676>
    12da:	04 c0       	rjmp	.+8      	; 0x12e4 <vfprintf+0x694>
    12dc:	06 15       	cp	r16, r6
    12de:	10 f4       	brcc	.+4      	; 0x12e4 <vfprintf+0x694>
    12e0:	60 1a       	sub	r6, r16
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <vfprintf+0x696>
    12e4:	61 2c       	mov	r6, r1
    12e6:	24 ff       	sbrs	r18, 4
    12e8:	12 c0       	rjmp	.+36     	; 0x130e <vfprintf+0x6be>
    12ea:	b7 01       	movw	r22, r14
    12ec:	80 e3       	ldi	r24, 0x30	; 48
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	2a 8b       	std	Y+18, r18	; 0x12
    12f2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    12f6:	2a 89       	ldd	r18, Y+18	; 0x12
    12f8:	22 ff       	sbrs	r18, 2
    12fa:	1e c0       	rjmp	.+60     	; 0x1338 <vfprintf+0x6e8>
    12fc:	21 ff       	sbrs	r18, 1
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <vfprintf+0x6b6>
    1300:	88 e5       	ldi	r24, 0x58	; 88
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 c0       	rjmp	.+4      	; 0x130a <vfprintf+0x6ba>
    1306:	88 e7       	ldi	r24, 0x78	; 120
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	b7 01       	movw	r22, r14
    130c:	0c c0       	rjmp	.+24     	; 0x1326 <vfprintf+0x6d6>
    130e:	82 2f       	mov	r24, r18
    1310:	86 78       	andi	r24, 0x86	; 134
    1312:	91 f0       	breq	.+36     	; 0x1338 <vfprintf+0x6e8>
    1314:	21 fd       	sbrc	r18, 1
    1316:	02 c0       	rjmp	.+4      	; 0x131c <vfprintf+0x6cc>
    1318:	80 e2       	ldi	r24, 0x20	; 32
    131a:	01 c0       	rjmp	.+2      	; 0x131e <vfprintf+0x6ce>
    131c:	8b e2       	ldi	r24, 0x2B	; 43
    131e:	27 fd       	sbrc	r18, 7
    1320:	8d e2       	ldi	r24, 0x2D	; 45
    1322:	b7 01       	movw	r22, r14
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    132a:	06 c0       	rjmp	.+12     	; 0x1338 <vfprintf+0x6e8>
    132c:	b7 01       	movw	r22, r14
    132e:	80 e3       	ldi	r24, 0x30	; 48
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    1336:	7a 94       	dec	r7
    1338:	d7 14       	cp	r13, r7
    133a:	c0 f3       	brcs	.-16     	; 0x132c <vfprintf+0x6dc>
    133c:	da 94       	dec	r13
    133e:	f4 01       	movw	r30, r8
    1340:	ed 0d       	add	r30, r13
    1342:	f1 1d       	adc	r31, r1
    1344:	b7 01       	movw	r22, r14
    1346:	80 81       	ld	r24, Z
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    134e:	d1 10       	cpse	r13, r1
    1350:	f5 cf       	rjmp	.-22     	; 0x133c <vfprintf+0x6ec>
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <vfprintf+0x710>
    1354:	b7 01       	movw	r22, r14
    1356:	80 e2       	ldi	r24, 0x20	; 32
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <fputc>
    135e:	6a 94       	dec	r6
    1360:	61 10       	cpse	r6, r1
    1362:	f8 cf       	rjmp	.-16     	; 0x1354 <vfprintf+0x704>
    1364:	99 cc       	rjmp	.-1742   	; 0xc98 <vfprintf+0x48>
    1366:	f7 01       	movw	r30, r14
    1368:	26 81       	ldd	r18, Z+6	; 0x06
    136a:	37 81       	ldd	r19, Z+7	; 0x07
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <vfprintf+0x722>
    136e:	2f ef       	ldi	r18, 0xFF	; 255
    1370:	3f ef       	ldi	r19, 0xFF	; 255
    1372:	c9 01       	movw	r24, r18
    1374:	62 96       	adiw	r28, 0x12	; 18
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	ff 90       	pop	r15
    138a:	ef 90       	pop	r14
    138c:	df 90       	pop	r13
    138e:	cf 90       	pop	r12
    1390:	bf 90       	pop	r11
    1392:	af 90       	pop	r10
    1394:	9f 90       	pop	r9
    1396:	8f 90       	pop	r8
    1398:	7f 90       	pop	r7
    139a:	6f 90       	pop	r6
    139c:	5f 90       	pop	r5
    139e:	4f 90       	pop	r4
    13a0:	3f 90       	pop	r3
    13a2:	2f 90       	pop	r2
    13a4:	08 95       	ret

000013a6 <__udivmodhi4>:
    13a6:	aa 1b       	sub	r26, r26
    13a8:	bb 1b       	sub	r27, r27
    13aa:	51 e1       	ldi	r21, 0x11	; 17
    13ac:	07 c0       	rjmp	.+14     	; 0x13bc <__udivmodhi4_ep>

000013ae <__udivmodhi4_loop>:
    13ae:	aa 1f       	adc	r26, r26
    13b0:	bb 1f       	adc	r27, r27
    13b2:	a6 17       	cp	r26, r22
    13b4:	b7 07       	cpc	r27, r23
    13b6:	10 f0       	brcs	.+4      	; 0x13bc <__udivmodhi4_ep>
    13b8:	a6 1b       	sub	r26, r22
    13ba:	b7 0b       	sbc	r27, r23

000013bc <__udivmodhi4_ep>:
    13bc:	88 1f       	adc	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	5a 95       	dec	r21
    13c2:	a9 f7       	brne	.-22     	; 0x13ae <__udivmodhi4_loop>
    13c4:	80 95       	com	r24
    13c6:	90 95       	com	r25
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	08 95       	ret

000013ce <__divmodhi4>:
    13ce:	97 fb       	bst	r25, 7
    13d0:	07 2e       	mov	r0, r23
    13d2:	16 f4       	brtc	.+4      	; 0x13d8 <__divmodhi4+0xa>
    13d4:	00 94       	com	r0
    13d6:	07 d0       	rcall	.+14     	; 0x13e6 <__divmodhi4_neg1>
    13d8:	77 fd       	sbrc	r23, 7
    13da:	09 d0       	rcall	.+18     	; 0x13ee <__divmodhi4_neg2>
    13dc:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__udivmodhi4>
    13e0:	07 fc       	sbrc	r0, 7
    13e2:	05 d0       	rcall	.+10     	; 0x13ee <__divmodhi4_neg2>
    13e4:	3e f4       	brtc	.+14     	; 0x13f4 <__divmodhi4_exit>

000013e6 <__divmodhi4_neg1>:
    13e6:	90 95       	com	r25
    13e8:	81 95       	neg	r24
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	08 95       	ret

000013ee <__divmodhi4_neg2>:
    13ee:	70 95       	com	r23
    13f0:	61 95       	neg	r22
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255

000013f4 <__divmodhi4_exit>:
    13f4:	08 95       	ret

000013f6 <__ftoa_engine>:
    13f6:	28 30       	cpi	r18, 0x08	; 8
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <__ftoa_engine+0x6>
    13fa:	27 e0       	ldi	r18, 0x07	; 7
    13fc:	33 27       	eor	r19, r19
    13fe:	da 01       	movw	r26, r20
    1400:	99 0f       	add	r25, r25
    1402:	31 1d       	adc	r19, r1
    1404:	87 fd       	sbrc	r24, 7
    1406:	91 60       	ori	r25, 0x01	; 1
    1408:	00 96       	adiw	r24, 0x00	; 0
    140a:	61 05       	cpc	r22, r1
    140c:	71 05       	cpc	r23, r1
    140e:	39 f4       	brne	.+14     	; 0x141e <__ftoa_engine+0x28>
    1410:	32 60       	ori	r19, 0x02	; 2
    1412:	2e 5f       	subi	r18, 0xFE	; 254
    1414:	3d 93       	st	X+, r19
    1416:	30 e3       	ldi	r19, 0x30	; 48
    1418:	2a 95       	dec	r18
    141a:	e1 f7       	brne	.-8      	; 0x1414 <__ftoa_engine+0x1e>
    141c:	08 95       	ret
    141e:	9f 3f       	cpi	r25, 0xFF	; 255
    1420:	30 f0       	brcs	.+12     	; 0x142e <__ftoa_engine+0x38>
    1422:	80 38       	cpi	r24, 0x80	; 128
    1424:	71 05       	cpc	r23, r1
    1426:	61 05       	cpc	r22, r1
    1428:	09 f0       	breq	.+2      	; 0x142c <__ftoa_engine+0x36>
    142a:	3c 5f       	subi	r19, 0xFC	; 252
    142c:	3c 5f       	subi	r19, 0xFC	; 252
    142e:	3d 93       	st	X+, r19
    1430:	91 30       	cpi	r25, 0x01	; 1
    1432:	08 f0       	brcs	.+2      	; 0x1436 <__ftoa_engine+0x40>
    1434:	80 68       	ori	r24, 0x80	; 128
    1436:	91 1d       	adc	r25, r1
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	1f 93       	push	r17
    143e:	0f 93       	push	r16
    1440:	ff 92       	push	r15
    1442:	ef 92       	push	r14
    1444:	19 2f       	mov	r17, r25
    1446:	98 7f       	andi	r25, 0xF8	; 248
    1448:	96 95       	lsr	r25
    144a:	e9 2f       	mov	r30, r25
    144c:	96 95       	lsr	r25
    144e:	96 95       	lsr	r25
    1450:	e9 0f       	add	r30, r25
    1452:	ff 27       	eor	r31, r31
    1454:	e3 5b       	subi	r30, 0xB3	; 179
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	99 27       	eor	r25, r25
    145a:	33 27       	eor	r19, r19
    145c:	ee 24       	eor	r14, r14
    145e:	ff 24       	eor	r15, r15
    1460:	a7 01       	movw	r20, r14
    1462:	e7 01       	movw	r28, r14
    1464:	05 90       	lpm	r0, Z+
    1466:	08 94       	sec
    1468:	07 94       	ror	r0
    146a:	28 f4       	brcc	.+10     	; 0x1476 <__ftoa_engine+0x80>
    146c:	36 0f       	add	r19, r22
    146e:	e7 1e       	adc	r14, r23
    1470:	f8 1e       	adc	r15, r24
    1472:	49 1f       	adc	r20, r25
    1474:	51 1d       	adc	r21, r1
    1476:	66 0f       	add	r22, r22
    1478:	77 1f       	adc	r23, r23
    147a:	88 1f       	adc	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	06 94       	lsr	r0
    1480:	a1 f7       	brne	.-24     	; 0x146a <__ftoa_engine+0x74>
    1482:	05 90       	lpm	r0, Z+
    1484:	07 94       	ror	r0
    1486:	28 f4       	brcc	.+10     	; 0x1492 <__ftoa_engine+0x9c>
    1488:	e7 0e       	add	r14, r23
    148a:	f8 1e       	adc	r15, r24
    148c:	49 1f       	adc	r20, r25
    148e:	56 1f       	adc	r21, r22
    1490:	c1 1d       	adc	r28, r1
    1492:	77 0f       	add	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	66 1f       	adc	r22, r22
    149a:	06 94       	lsr	r0
    149c:	a1 f7       	brne	.-24     	; 0x1486 <__ftoa_engine+0x90>
    149e:	05 90       	lpm	r0, Z+
    14a0:	07 94       	ror	r0
    14a2:	28 f4       	brcc	.+10     	; 0x14ae <__ftoa_engine+0xb8>
    14a4:	f8 0e       	add	r15, r24
    14a6:	49 1f       	adc	r20, r25
    14a8:	56 1f       	adc	r21, r22
    14aa:	c7 1f       	adc	r28, r23
    14ac:	d1 1d       	adc	r29, r1
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	66 1f       	adc	r22, r22
    14b4:	77 1f       	adc	r23, r23
    14b6:	06 94       	lsr	r0
    14b8:	a1 f7       	brne	.-24     	; 0x14a2 <__ftoa_engine+0xac>
    14ba:	05 90       	lpm	r0, Z+
    14bc:	07 94       	ror	r0
    14be:	20 f4       	brcc	.+8      	; 0x14c8 <__ftoa_engine+0xd2>
    14c0:	49 0f       	add	r20, r25
    14c2:	56 1f       	adc	r21, r22
    14c4:	c7 1f       	adc	r28, r23
    14c6:	d8 1f       	adc	r29, r24
    14c8:	99 0f       	add	r25, r25
    14ca:	66 1f       	adc	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	06 94       	lsr	r0
    14d2:	a9 f7       	brne	.-22     	; 0x14be <__ftoa_engine+0xc8>
    14d4:	84 91       	lpm	r24, Z
    14d6:	10 95       	com	r17
    14d8:	17 70       	andi	r17, 0x07	; 7
    14da:	41 f0       	breq	.+16     	; 0x14ec <__ftoa_engine+0xf6>
    14dc:	d6 95       	lsr	r29
    14de:	c7 95       	ror	r28
    14e0:	57 95       	ror	r21
    14e2:	47 95       	ror	r20
    14e4:	f7 94       	ror	r15
    14e6:	e7 94       	ror	r14
    14e8:	1a 95       	dec	r17
    14ea:	c1 f7       	brne	.-16     	; 0x14dc <__ftoa_engine+0xe6>
    14ec:	e3 ef       	ldi	r30, 0xF3	; 243
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	68 94       	set
    14f2:	15 90       	lpm	r1, Z+
    14f4:	15 91       	lpm	r17, Z+
    14f6:	35 91       	lpm	r19, Z+
    14f8:	65 91       	lpm	r22, Z+
    14fa:	95 91       	lpm	r25, Z+
    14fc:	05 90       	lpm	r0, Z+
    14fe:	7f e2       	ldi	r23, 0x2F	; 47
    1500:	73 95       	inc	r23
    1502:	e1 18       	sub	r14, r1
    1504:	f1 0a       	sbc	r15, r17
    1506:	43 0b       	sbc	r20, r19
    1508:	56 0b       	sbc	r21, r22
    150a:	c9 0b       	sbc	r28, r25
    150c:	d0 09       	sbc	r29, r0
    150e:	c0 f7       	brcc	.-16     	; 0x1500 <__ftoa_engine+0x10a>
    1510:	e1 0c       	add	r14, r1
    1512:	f1 1e       	adc	r15, r17
    1514:	43 1f       	adc	r20, r19
    1516:	56 1f       	adc	r21, r22
    1518:	c9 1f       	adc	r28, r25
    151a:	d0 1d       	adc	r29, r0
    151c:	7e f4       	brtc	.+30     	; 0x153c <__ftoa_engine+0x146>
    151e:	70 33       	cpi	r23, 0x30	; 48
    1520:	11 f4       	brne	.+4      	; 0x1526 <__ftoa_engine+0x130>
    1522:	8a 95       	dec	r24
    1524:	e6 cf       	rjmp	.-52     	; 0x14f2 <__ftoa_engine+0xfc>
    1526:	e8 94       	clt
    1528:	01 50       	subi	r16, 0x01	; 1
    152a:	30 f0       	brcs	.+12     	; 0x1538 <__ftoa_engine+0x142>
    152c:	08 0f       	add	r16, r24
    152e:	0a f4       	brpl	.+2      	; 0x1532 <__ftoa_engine+0x13c>
    1530:	00 27       	eor	r16, r16
    1532:	02 17       	cp	r16, r18
    1534:	08 f4       	brcc	.+2      	; 0x1538 <__ftoa_engine+0x142>
    1536:	20 2f       	mov	r18, r16
    1538:	23 95       	inc	r18
    153a:	02 2f       	mov	r16, r18
    153c:	7a 33       	cpi	r23, 0x3A	; 58
    153e:	28 f0       	brcs	.+10     	; 0x154a <__ftoa_engine+0x154>
    1540:	79 e3       	ldi	r23, 0x39	; 57
    1542:	7d 93       	st	X+, r23
    1544:	2a 95       	dec	r18
    1546:	e9 f7       	brne	.-6      	; 0x1542 <__ftoa_engine+0x14c>
    1548:	10 c0       	rjmp	.+32     	; 0x156a <__ftoa_engine+0x174>
    154a:	7d 93       	st	X+, r23
    154c:	2a 95       	dec	r18
    154e:	89 f6       	brne	.-94     	; 0x14f2 <__ftoa_engine+0xfc>
    1550:	06 94       	lsr	r0
    1552:	97 95       	ror	r25
    1554:	67 95       	ror	r22
    1556:	37 95       	ror	r19
    1558:	17 95       	ror	r17
    155a:	17 94       	ror	r1
    155c:	e1 18       	sub	r14, r1
    155e:	f1 0a       	sbc	r15, r17
    1560:	43 0b       	sbc	r20, r19
    1562:	56 0b       	sbc	r21, r22
    1564:	c9 0b       	sbc	r28, r25
    1566:	d0 09       	sbc	r29, r0
    1568:	98 f0       	brcs	.+38     	; 0x1590 <__ftoa_engine+0x19a>
    156a:	23 95       	inc	r18
    156c:	7e 91       	ld	r23, -X
    156e:	73 95       	inc	r23
    1570:	7a 33       	cpi	r23, 0x3A	; 58
    1572:	08 f0       	brcs	.+2      	; 0x1576 <__ftoa_engine+0x180>
    1574:	70 e3       	ldi	r23, 0x30	; 48
    1576:	7c 93       	st	X, r23
    1578:	20 13       	cpse	r18, r16
    157a:	b8 f7       	brcc	.-18     	; 0x156a <__ftoa_engine+0x174>
    157c:	7e 91       	ld	r23, -X
    157e:	70 61       	ori	r23, 0x10	; 16
    1580:	7d 93       	st	X+, r23
    1582:	30 f0       	brcs	.+12     	; 0x1590 <__ftoa_engine+0x19a>
    1584:	83 95       	inc	r24
    1586:	71 e3       	ldi	r23, 0x31	; 49
    1588:	7d 93       	st	X+, r23
    158a:	70 e3       	ldi	r23, 0x30	; 48
    158c:	2a 95       	dec	r18
    158e:	e1 f7       	brne	.-8      	; 0x1588 <__ftoa_engine+0x192>
    1590:	11 24       	eor	r1, r1
    1592:	ef 90       	pop	r14
    1594:	ff 90       	pop	r15
    1596:	0f 91       	pop	r16
    1598:	1f 91       	pop	r17
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	99 27       	eor	r25, r25
    15a0:	87 fd       	sbrc	r24, 7
    15a2:	90 95       	com	r25
    15a4:	08 95       	ret

000015a6 <strnlen_P>:
    15a6:	fc 01       	movw	r30, r24
    15a8:	05 90       	lpm	r0, Z+
    15aa:	61 50       	subi	r22, 0x01	; 1
    15ac:	70 40       	sbci	r23, 0x00	; 0
    15ae:	01 10       	cpse	r0, r1
    15b0:	d8 f7       	brcc	.-10     	; 0x15a8 <strnlen_P+0x2>
    15b2:	80 95       	com	r24
    15b4:	90 95       	com	r25
    15b6:	8e 0f       	add	r24, r30
    15b8:	9f 1f       	adc	r25, r31
    15ba:	08 95       	ret

000015bc <strcpy>:
    15bc:	fb 01       	movw	r30, r22
    15be:	dc 01       	movw	r26, r24
    15c0:	01 90       	ld	r0, Z+
    15c2:	0d 92       	st	X+, r0
    15c4:	00 20       	and	r0, r0
    15c6:	e1 f7       	brne	.-8      	; 0x15c0 <strcpy+0x4>
    15c8:	08 95       	ret

000015ca <strnlen>:
    15ca:	fc 01       	movw	r30, r24
    15cc:	61 50       	subi	r22, 0x01	; 1
    15ce:	70 40       	sbci	r23, 0x00	; 0
    15d0:	01 90       	ld	r0, Z+
    15d2:	01 10       	cpse	r0, r1
    15d4:	d8 f7       	brcc	.-10     	; 0x15cc <strnlen+0x2>
    15d6:	80 95       	com	r24
    15d8:	90 95       	com	r25
    15da:	8e 0f       	add	r24, r30
    15dc:	9f 1f       	adc	r25, r31
    15de:	08 95       	ret

000015e0 <fputc>:
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	8c 01       	movw	r16, r24
    15ea:	eb 01       	movw	r28, r22
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	81 fd       	sbrc	r24, 1
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <fputc+0x18>
    15f2:	0f ef       	ldi	r16, 0xFF	; 255
    15f4:	1f ef       	ldi	r17, 0xFF	; 255
    15f6:	1a c0       	rjmp	.+52     	; 0x162c <fputc+0x4c>
    15f8:	82 ff       	sbrs	r24, 2
    15fa:	0d c0       	rjmp	.+26     	; 0x1616 <fputc+0x36>
    15fc:	2e 81       	ldd	r18, Y+6	; 0x06
    15fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	28 17       	cp	r18, r24
    1606:	39 07       	cpc	r19, r25
    1608:	64 f4       	brge	.+24     	; 0x1622 <fputc+0x42>
    160a:	e8 81       	ld	r30, Y
    160c:	f9 81       	ldd	r31, Y+1	; 0x01
    160e:	01 93       	st	Z+, r16
    1610:	f9 83       	std	Y+1, r31	; 0x01
    1612:	e8 83       	st	Y, r30
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <fputc+0x42>
    1616:	e8 85       	ldd	r30, Y+8	; 0x08
    1618:	f9 85       	ldd	r31, Y+9	; 0x09
    161a:	80 2f       	mov	r24, r16
    161c:	09 95       	icall
    161e:	89 2b       	or	r24, r25
    1620:	41 f7       	brne	.-48     	; 0x15f2 <fputc+0x12>
    1622:	8e 81       	ldd	r24, Y+6	; 0x06
    1624:	9f 81       	ldd	r25, Y+7	; 0x07
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	9f 83       	std	Y+7, r25	; 0x07
    162a:	8e 83       	std	Y+6, r24	; 0x06
    162c:	c8 01       	movw	r24, r16
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	08 95       	ret

00001638 <sprintf>:
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	2e 97       	sbiw	r28, 0x0e	; 14
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	0d 89       	ldd	r16, Y+21	; 0x15
    1652:	1e 89       	ldd	r17, Y+22	; 0x16
    1654:	86 e0       	ldi	r24, 0x06	; 6
    1656:	8c 83       	std	Y+4, r24	; 0x04
    1658:	1a 83       	std	Y+2, r17	; 0x02
    165a:	09 83       	std	Y+1, r16	; 0x01
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	9f e7       	ldi	r25, 0x7F	; 127
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
    1664:	ce 01       	movw	r24, r28
    1666:	49 96       	adiw	r24, 0x19	; 25
    1668:	ac 01       	movw	r20, r24
    166a:	6f 89       	ldd	r22, Y+23	; 0x17
    166c:	78 8d       	ldd	r23, Y+24	; 0x18
    166e:	ce 01       	movw	r24, r28
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	0e 94 28 06 	call	0xc50	; 0xc50 <vfprintf>
    1676:	ef 81       	ldd	r30, Y+7	; 0x07
    1678:	f8 85       	ldd	r31, Y+8	; 0x08
    167a:	e0 0f       	add	r30, r16
    167c:	f1 1f       	adc	r31, r17
    167e:	10 82       	st	Z, r1
    1680:	2e 96       	adiw	r28, 0x0e	; 14
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	08 95       	ret

00001696 <__ultoa_invert>:
    1696:	fa 01       	movw	r30, r20
    1698:	aa 27       	eor	r26, r26
    169a:	28 30       	cpi	r18, 0x08	; 8
    169c:	51 f1       	breq	.+84     	; 0x16f2 <__ultoa_invert+0x5c>
    169e:	20 31       	cpi	r18, 0x10	; 16
    16a0:	81 f1       	breq	.+96     	; 0x1702 <__ultoa_invert+0x6c>
    16a2:	e8 94       	clt
    16a4:	6f 93       	push	r22
    16a6:	6e 7f       	andi	r22, 0xFE	; 254
    16a8:	6e 5f       	subi	r22, 0xFE	; 254
    16aa:	7f 4f       	sbci	r23, 0xFF	; 255
    16ac:	8f 4f       	sbci	r24, 0xFF	; 255
    16ae:	9f 4f       	sbci	r25, 0xFF	; 255
    16b0:	af 4f       	sbci	r26, 0xFF	; 255
    16b2:	b1 e0       	ldi	r27, 0x01	; 1
    16b4:	3e d0       	rcall	.+124    	; 0x1732 <__ultoa_invert+0x9c>
    16b6:	b4 e0       	ldi	r27, 0x04	; 4
    16b8:	3c d0       	rcall	.+120    	; 0x1732 <__ultoa_invert+0x9c>
    16ba:	67 0f       	add	r22, r23
    16bc:	78 1f       	adc	r23, r24
    16be:	89 1f       	adc	r24, r25
    16c0:	9a 1f       	adc	r25, r26
    16c2:	a1 1d       	adc	r26, r1
    16c4:	68 0f       	add	r22, r24
    16c6:	79 1f       	adc	r23, r25
    16c8:	8a 1f       	adc	r24, r26
    16ca:	91 1d       	adc	r25, r1
    16cc:	a1 1d       	adc	r26, r1
    16ce:	6a 0f       	add	r22, r26
    16d0:	71 1d       	adc	r23, r1
    16d2:	81 1d       	adc	r24, r1
    16d4:	91 1d       	adc	r25, r1
    16d6:	a1 1d       	adc	r26, r1
    16d8:	20 d0       	rcall	.+64     	; 0x171a <__ultoa_invert+0x84>
    16da:	09 f4       	brne	.+2      	; 0x16de <__ultoa_invert+0x48>
    16dc:	68 94       	set
    16de:	3f 91       	pop	r19
    16e0:	2a e0       	ldi	r18, 0x0A	; 10
    16e2:	26 9f       	mul	r18, r22
    16e4:	11 24       	eor	r1, r1
    16e6:	30 19       	sub	r19, r0
    16e8:	30 5d       	subi	r19, 0xD0	; 208
    16ea:	31 93       	st	Z+, r19
    16ec:	de f6       	brtc	.-74     	; 0x16a4 <__ultoa_invert+0xe>
    16ee:	cf 01       	movw	r24, r30
    16f0:	08 95       	ret
    16f2:	46 2f       	mov	r20, r22
    16f4:	47 70       	andi	r20, 0x07	; 7
    16f6:	40 5d       	subi	r20, 0xD0	; 208
    16f8:	41 93       	st	Z+, r20
    16fa:	b3 e0       	ldi	r27, 0x03	; 3
    16fc:	0f d0       	rcall	.+30     	; 0x171c <__ultoa_invert+0x86>
    16fe:	c9 f7       	brne	.-14     	; 0x16f2 <__ultoa_invert+0x5c>
    1700:	f6 cf       	rjmp	.-20     	; 0x16ee <__ultoa_invert+0x58>
    1702:	46 2f       	mov	r20, r22
    1704:	4f 70       	andi	r20, 0x0F	; 15
    1706:	40 5d       	subi	r20, 0xD0	; 208
    1708:	4a 33       	cpi	r20, 0x3A	; 58
    170a:	18 f0       	brcs	.+6      	; 0x1712 <__ultoa_invert+0x7c>
    170c:	49 5d       	subi	r20, 0xD9	; 217
    170e:	31 fd       	sbrc	r19, 1
    1710:	40 52       	subi	r20, 0x20	; 32
    1712:	41 93       	st	Z+, r20
    1714:	02 d0       	rcall	.+4      	; 0x171a <__ultoa_invert+0x84>
    1716:	a9 f7       	brne	.-22     	; 0x1702 <__ultoa_invert+0x6c>
    1718:	ea cf       	rjmp	.-44     	; 0x16ee <__ultoa_invert+0x58>
    171a:	b4 e0       	ldi	r27, 0x04	; 4
    171c:	a6 95       	lsr	r26
    171e:	97 95       	ror	r25
    1720:	87 95       	ror	r24
    1722:	77 95       	ror	r23
    1724:	67 95       	ror	r22
    1726:	ba 95       	dec	r27
    1728:	c9 f7       	brne	.-14     	; 0x171c <__ultoa_invert+0x86>
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	61 05       	cpc	r22, r1
    172e:	71 05       	cpc	r23, r1
    1730:	08 95       	ret
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	0a 2e       	mov	r0, r26
    1738:	06 94       	lsr	r0
    173a:	57 95       	ror	r21
    173c:	47 95       	ror	r20
    173e:	37 95       	ror	r19
    1740:	27 95       	ror	r18
    1742:	ba 95       	dec	r27
    1744:	c9 f7       	brne	.-14     	; 0x1738 <__ultoa_invert+0xa2>
    1746:	62 0f       	add	r22, r18
    1748:	73 1f       	adc	r23, r19
    174a:	84 1f       	adc	r24, r20
    174c:	95 1f       	adc	r25, r21
    174e:	a0 1d       	adc	r26, r0
    1750:	08 95       	ret

00001752 <_exit>:
    1752:	f8 94       	cli

00001754 <__stop_program>:
    1754:	ff cf       	rjmp	.-2      	; 0x1754 <__stop_program>
