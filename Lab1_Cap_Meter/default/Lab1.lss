
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000157e  00001612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000157e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080010a  0080010a  0000161c  2**0
                  ALLOC
  3 .stab         00002424  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000701  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004141  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00004170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a9e  00000000  00000000  00004218  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000815  00000000  00000000  00005cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b91  00000000  00000000  000064cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000046c  00000000  00000000  0000705c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005a5  00000000  00000000  000074c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001496  00000000  00000000  00007a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00008f03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_12>
      34:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_13>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_16>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

0000008c <LCD_number>:
      8c:	43 61 70 61 63 69 74 61 6e 63 65 3d 00 00           Capacitance=..

0000009a <LCD_initialize>:
      9a:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000ab <LcdCustomChar>:
      ab:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      bb:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      cb:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      db:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000eb <__c.2006>:
      eb:	6e 61 6e 00                                         nan.

000000ef <__c.2004>:
      ef:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ff:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10f:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1af:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1bf:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1cf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1df:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e4       	ldi	r29, 0x40	; 64
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	ee e7       	ldi	r30, 0x7E	; 126
     202:	f5 e1       	ldi	r31, 0x15	; 21
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	aa 30       	cpi	r26, 0x0A	; 10
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	aa e0       	ldi	r26, 0x0A	; 10
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a1 33       	cpi	r26, 0x31	; 49
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 0b 04 	call	0x816	; 0x816 <main>
     228:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <init_cap_measurement_analog_timer>:

//configures Analog Comparator and Timer1
//set it to full speed 
//clear TCNT1
void init_cap_measurement_analog_timer(){
	TCCR1B = 0;
     230:	e1 e8       	ldi	r30, 0x81	; 129
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	10 82       	st	Z, r1
	//full speed [ 16 MHz], capture on positive edge
	TCCR1B |= INPUT_CAPTURE_EDGE_SELECT + T0B_CS00;
     236:	80 81       	ld	r24, Z
     238:	81 64       	ori	r24, 0x41	; 65
     23a:	80 83       	st	Z, r24
	//turn on timer 1 interrupt-on-capture
	TIMSK1 = 0;
     23c:	ef e6       	ldi	r30, 0x6F	; 111
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	10 82       	st	Z, r1
	TIMSK1 |= INTERRUPT_ON_CAPTURE;
     242:	80 81       	ld	r24, Z
     244:	80 62       	ori	r24, 0x20	; 32
     246:	80 83       	st	Z, r24

	//set analog comp to connect to timer capture input
	//with positive input reference voltage
	ACSR = 0;
     248:	10 be       	out	0x30, r1	; 48
	ACSR |= ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     24a:	80 b7       	in	r24, 0x30	; 48
     24c:	84 60       	ori	r24, 0x04	; 4
     24e:	80 bf       	out	0x30, r24	; 48
	ACSR &= ~ANALOG_COMPARATOR_BANDGAP_SELECT;
     250:	80 b7       	in	r24, 0x30	; 48
     252:	8f 7b       	andi	r24, 0xBF	; 191
     254:	80 bf       	out	0x30, r24	; 48
	//set all ports to input
	DDRB = 0;
     256:	14 b8       	out	0x04, r1	; 4
	DDRB &= ~(COMPARATOR_INPUT + COMPARATOR_REFERENCE);
     258:	84 b1       	in	r24, 0x04	; 4
     25a:	83 7f       	andi	r24, 0xF3	; 243
     25c:	84 b9       	out	0x04, r24	; 4
     25e:	08 95       	ret

00000260 <init_cap_discharge_wait_timer>:

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     260:	22 e0       	ldi	r18, 0x02	; 2
     262:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     266:	84 eb       	ldi	r24, 0xB4	; 180
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	90 93 89 00 	sts	0x0089, r25
     26e:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     272:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     276:	e0 e8       	ldi	r30, 0x80	; 128
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	10 82       	st	Z, r1
	TCCR1A |= CLEAR_ON_MATCH;
     27c:	80 81       	ld	r24, Z
     27e:	82 60       	ori	r24, 0x02	; 2
     280:	80 83       	st	Z, r24
     282:	08 95       	ret

00000284 <init_cap_measurements>:
	Convert PortB2 to an input and start a timer. The capacitor will start to charge toward Vcc.
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
	DDRB = 0;
     284:	14 b8       	out	0x04, r1	; 4
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     286:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     288:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     28a:	2a 98       	cbi	0x05, 2	; 5
	//use Timer1.A to perform this delay and signal when we can continue measurements
	init_cap_discharge_wait_timer();
     28c:	0c 94 30 01 	jmp	0x260	; 0x260 <init_cap_discharge_wait_timer>

00000290 <__vector_16>:
}

//1 ms timebase register
//Blinks LED 1/second
//refreshes LCD 1/200 ms
ISR (TIMER0_COMPA_vect){
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
	if( led_time_count > 0)
     29e:	80 91 2f 01 	lds	r24, 0x012F
     2a2:	90 91 30 01 	lds	r25, 0x0130
     2a6:	89 2b       	or	r24, r25
     2a8:	49 f0       	breq	.+18     	; 0x2bc <__vector_16+0x2c>
		--led_time_count;
     2aa:	80 91 2f 01 	lds	r24, 0x012F
     2ae:	90 91 30 01 	lds	r25, 0x0130
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	90 93 30 01 	sts	0x0130, r25
     2b8:	80 93 2f 01 	sts	0x012F, r24
	if( lcd_time_count > 0)
     2bc:	80 91 10 01 	lds	r24, 0x0110
     2c0:	90 91 11 01 	lds	r25, 0x0111
     2c4:	89 2b       	or	r24, r25
     2c6:	49 f0       	breq	.+18     	; 0x2da <__vector_16+0x4a>
		--lcd_time_count;
     2c8:	80 91 10 01 	lds	r24, 0x0110
     2cc:	90 91 11 01 	lds	r25, 0x0111
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	90 93 11 01 	sts	0x0111, r25
     2d6:	80 93 10 01 	sts	0x0110, r24

}
     2da:	9f 91       	pop	r25
     2dc:	8f 91       	pop	r24
     2de:	0f 90       	pop	r0
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	0f 90       	pop	r0
     2e4:	1f 90       	pop	r1
     2e6:	18 95       	reti

000002e8 <__vector_13>:
//Once this triggers even once, we know that we have waited long enough for a cap discharge
ISR (TIMER1_COMPA_vect){
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	8f 93       	push	r24
     2f4:	9f 93       	push	r25
	cap_discharged = TRUE;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	90 93 0d 01 	sts	0x010D, r25
     2fe:	80 93 0c 01 	sts	0x010C, r24
}
     302:	9f 91       	pop	r25
     304:	8f 91       	pop	r24
     306:	0f 90       	pop	r0
     308:	0f be       	out	0x3f, r0	; 63
     30a:	0f 90       	pop	r0
     30c:	1f 90       	pop	r1
     30e:	18 95       	reti

00000310 <__vector_12>:
			  t
	C = ------------
		R2 * ln(0.5)

*/
ISR (TIMER1_CAPT_vect){
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	0b b6       	in	r0, 0x3b	; 59
     31c:	0f 92       	push	r0
     31e:	2f 93       	push	r18
     320:	3f 93       	push	r19
     322:	4f 93       	push	r20
     324:	5f 93       	push	r21
     326:	6f 93       	push	r22
     328:	7f 93       	push	r23
     32a:	8f 93       	push	r24
     32c:	9f 93       	push	r25
     32e:	af 93       	push	r26
     330:	bf 93       	push	r27
     332:	ef 93       	push	r30
     334:	ff 93       	push	r31
	capacitance = 3.3;
     336:	83 e3       	ldi	r24, 0x33	; 51
     338:	93 e3       	ldi	r25, 0x33	; 51
     33a:	a3 e5       	ldi	r26, 0x53	; 83
     33c:	b0 e4       	ldi	r27, 0x40	; 64
     33e:	80 93 28 01 	sts	0x0128, r24
     342:	90 93 29 01 	sts	0x0129, r25
     346:	a0 93 2a 01 	sts	0x012A, r26
     34a:	b0 93 2b 01 	sts	0x012B, r27
    // set the charged flag to true
    cap_charged = TRUE;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	90 93 0b 01 	sts	0x010B, r25
     356:	80 93 0a 01 	sts	0x010A, r24
    // read timer1 input capture register
    charge_time = ICR1 * T1_CLK_PERIOD;
     35a:	60 91 86 00 	lds	r22, 0x0086
     35e:	70 91 87 00 	lds	r23, 0x0087
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__floatunsisf>
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	4a e7       	ldi	r20, 0x7A	; 122
     370:	52 e4       	ldi	r21, 0x42	; 66
     372:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3>
     376:	ab 01       	movw	r20, r22
     378:	bc 01       	movw	r22, r24
     37a:	40 93 24 01 	sts	0x0124, r20
     37e:	50 93 25 01 	sts	0x0125, r21
     382:	60 93 26 01 	sts	0x0126, r22
     386:	70 93 27 01 	sts	0x0127, r23
}
     38a:	ff 91       	pop	r31
     38c:	ef 91       	pop	r30
     38e:	bf 91       	pop	r27
     390:	af 91       	pop	r26
     392:	9f 91       	pop	r25
     394:	8f 91       	pop	r24
     396:	7f 91       	pop	r23
     398:	6f 91       	pop	r22
     39a:	5f 91       	pop	r21
     39c:	4f 91       	pop	r20
     39e:	3f 91       	pop	r19
     3a0:	2f 91       	pop	r18
     3a2:	0f 90       	pop	r0
     3a4:	0b be       	out	0x3b, r0	; 59
     3a6:	0f 90       	pop	r0
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	0f 90       	pop	r0
     3ac:	1f 90       	pop	r1
     3ae:	18 95       	reti

000003b0 <toggle_led>:

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     3b0:	8b b1       	in	r24, 0x0b	; 11
     3b2:	94 e0       	ldi	r25, 0x04	; 4
     3b4:	89 27       	eor	r24, r25
     3b6:	8b b9       	out	0x0b, r24	; 11
     3b8:	08 95       	ret

000003ba <init_timer0A>:
//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 249;
     3c0:	89 ef       	ldi	r24, 0xF9	; 249
     3c2:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     3c4:	83 e0       	ldi	r24, 0x03	; 3
     3c6:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     3c8:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     3ca:	84 b5       	in	r24, 0x24	; 36
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	84 bd       	out	0x24, r24	; 36
     3d0:	08 95       	ret

000003d2 <init_lcd>:
}

// LCD setup
void init_lcd(void){
	LCDinit();	//initialize the display
     3d2:	0e 94 29 03 	call	0x652	; 0x652 <LCDinit>
	LCDcursorOFF();
     3d6:	0e 94 a1 03 	call	0x742	; 0x742 <LCDcursorOFF>
	LCDclr();				//clear the display
     3da:	0e 94 b9 02 	call	0x572	; 0x572 <LCDclr>
	LCDGotoXY(0,0);
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCDGotoXY>
	CopyStringtoLCD(LCD_number, 0, 0);
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	8c e8       	ldi	r24, 0x8C	; 140
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <CopyStringtoLCD>

000003f2 <refresh_lcd>:
}


// writes contents of lcd_buffer to LCD every 200 mSec
// 
void refresh_lcd(void){
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
  // increment time counter and format string 
  //if (capacitance >= .1 && capacitance <= 100) {
  sprintf(lcd_buffer,"%-.5f",capacitance);	 
     3f6:	80 91 28 01 	lds	r24, 0x0128
     3fa:	90 91 29 01 	lds	r25, 0x0129
     3fe:	a0 91 2a 01 	lds	r26, 0x012A
     402:	b0 91 2b 01 	lds	r27, 0x012B
     406:	bf 93       	push	r27
     408:	af 93       	push	r26
     40a:	9f 93       	push	r25
     40c:	8f 93       	push	r24
     40e:	84 e0       	ldi	r24, 0x04	; 4
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	c2 e1       	ldi	r28, 0x12	; 18
     418:	d1 e0       	ldi	r29, 0x01	; 1
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	0e 94 30 0a 	call	0x1460	; 0x1460 <sprintf>
  //}
  //else {
  //	sprintf(lcd_buffer,"N/A");
  //}               
  LCDGotoXY(0, 1);
     422:	61 e0       	ldi	r22, 0x01	; 1
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCDGotoXY>
  	// display the capacitance 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     42a:	fe 01       	movw	r30, r28
     42c:	01 90       	ld	r0, Z+
     42e:	00 20       	and	r0, r0
     430:	e9 f7       	brne	.-6      	; 0x42c <refresh_lcd+0x3a>
     432:	bf 01       	movw	r22, r30
     434:	61 50       	subi	r22, 0x01	; 1
     436:	71 09       	sbc	r23, r1
     438:	6c 1b       	sub	r22, r28
     43a:	7d 0b       	sbc	r23, r29
     43c:	ce 01       	movw	r24, r28
     43e:	0e 94 bf 02 	call	0x57e	; 0x57e <LCDstring>
  else {
  	sprintf(lcd_buffer, "N/A");
  } 
  */         
  // now move a char left and right
  LCDGotoXY(anipos,1);	   //second line
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	80 91 23 01 	lds	r24, 0x0123
     448:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCDGotoXY>
  LCDsendChar(' '); 
     44c:	80 e2       	ldi	r24, 0x20	; 32
     44e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCDsendChar>
      	
  if (anipos>=15) dir=-1;   // check boundaries
     452:	90 91 23 01 	lds	r25, 0x0123
     456:	2d b7       	in	r18, 0x3d	; 61
     458:	3e b7       	in	r19, 0x3e	; 62
     45a:	28 5f       	subi	r18, 0xF8	; 248
     45c:	3f 4f       	sbci	r19, 0xFF	; 255
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	3e bf       	out	0x3e, r19	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	2d bf       	out	0x3d, r18	; 61
     468:	9f 30       	cpi	r25, 0x0F	; 15
     46a:	10 f0       	brcs	.+4      	; 0x470 <refresh_lcd+0x7e>
     46c:	8f ef       	ldi	r24, 0xFF	; 255
     46e:	03 c0       	rjmp	.+6      	; 0x476 <refresh_lcd+0x84>
  if (anipos<=8 ) dir=1;
     470:	99 30       	cpi	r25, 0x09	; 9
     472:	18 f4       	brcc	.+6      	; 0x47a <refresh_lcd+0x88>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 2c 01 	sts	0x012C, r24
  anipos=anipos+dir;
     47a:	80 91 2c 01 	lds	r24, 0x012C
     47e:	89 0f       	add	r24, r25
     480:	80 93 23 01 	sts	0x0123, r24
  LCDGotoXY(anipos,1);	   //second line
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCDGotoXY>
  LCDsendChar('o');
     48a:	8f e6       	ldi	r24, 0x6F	; 111
}
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
      	
  if (anipos>=15) dir=-1;   // check boundaries
  if (anipos<=8 ) dir=1;
  anipos=anipos+dir;
  LCDGotoXY(anipos,1);	   //second line
  LCDsendChar('o');
     490:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <LCDsendChar>

00000494 <initialize>:
}

void initialize(void){
	anipos = 8;
     494:	88 e0       	ldi	r24, 0x08	; 8
     496:	80 93 23 01 	sts	0x0123, r24
	led_time_count = 0;
     49a:	10 92 30 01 	sts	0x0130, r1
     49e:	10 92 2f 01 	sts	0x012F, r1
	init_timer0A();
     4a2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <init_timer0A>

	DDRB = 0;
     4a6:	14 b8       	out	0x04, r1	; 4
	DDRD = 0;
     4a8:	1a b8       	out	0x0a, r1	; 10

	//Enable LED Port
	DDRD = ONBOARD_LED; //turn the LED to an output
     4aa:	84 e0       	ldi	r24, 0x04	; 4
     4ac:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; //turn off LED 
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	8b b9       	out	0x0b, r24	; 11

	cap_discharged = FALSE;
     4b2:	10 92 0d 01 	sts	0x010D, r1
     4b6:	10 92 0c 01 	sts	0x010C, r1
	begin_cap_measurement = FALSE;
     4ba:	10 92 0f 01 	sts	0x010F, r1
     4be:	10 92 0e 01 	sts	0x010E, r1
	cap_charged = FALSE;
     4c2:	10 92 0b 01 	sts	0x010B, r1
     4c6:	10 92 0a 01 	sts	0x010A, r1

	init_lcd();
     4ca:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <init_lcd>
	LCDclr();
     4ce:	0e 94 b9 02 	call	0x572	; 0x572 <LCDclr>


	sei();
     4d2:	78 94       	sei
     4d4:	08 95       	ret

000004d6 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     4d6:	98 2f       	mov	r25, r24
     4d8:	90 7f       	andi	r25, 0xF0	; 240
     4da:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_RS;
     4dc:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     4de:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e0:	ef e3       	ldi	r30, 0x3F	; 63
     4e2:	ff e1       	ldi	r31, 0x1F	; 31
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <LCDsendChar+0xe>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <LCDsendChar+0x14>
     4ea:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     4ec:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     4ee:	40 98       	cbi	0x08, 0	; 8
     4f0:	ef e3       	ldi	r30, 0x3F	; 63
     4f2:	ff e1       	ldi	r31, 0x1F	; 31
     4f4:	31 97       	sbiw	r30, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LCDsendChar+0x1e>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <LCDsendChar+0x24>
     4fa:	00 00       	nop
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     4fc:	f0 e1       	ldi	r31, 0x10	; 16
     4fe:	8f 9f       	mul	r24, r31
     500:	c0 01       	movw	r24, r0
     502:	11 24       	eor	r1, r1
     504:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     506:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     508:	42 9a       	sbi	0x08, 2	; 8
     50a:	8f e3       	ldi	r24, 0x3F	; 63
     50c:	9f e1       	ldi	r25, 0x1F	; 31
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <LCDsendChar+0x38>
     512:	00 c0       	rjmp	.+0      	; 0x514 <LCDsendChar+0x3e>
     514:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     516:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     518:	40 98       	cbi	0x08, 0	; 8
     51a:	ef e3       	ldi	r30, 0x3F	; 63
     51c:	ff e1       	ldi	r31, 0x1F	; 31
     51e:	31 97       	sbiw	r30, 0x01	; 1
     520:	f1 f7       	brne	.-4      	; 0x51e <LCDsendChar+0x48>
     522:	00 c0       	rjmp	.+0      	; 0x524 <LCDsendChar+0x4e>
     524:	00 00       	nop
     526:	08 95       	ret

00000528 <LCDsendCommand>:
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     528:	98 2f       	mov	r25, r24
     52a:	90 7f       	andi	r25, 0xF0	; 240
     52c:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_E;		
     52e:	42 9a       	sbi	0x08, 2	; 8
     530:	ef e3       	ldi	r30, 0x3F	; 63
     532:	ff e1       	ldi	r31, 0x1F	; 31
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <LCDsendCommand+0xc>
     538:	00 c0       	rjmp	.+0      	; 0x53a <LCDsendCommand+0x12>
     53a:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     53c:	42 98       	cbi	0x08, 2	; 8
     53e:	ef e3       	ldi	r30, 0x3F	; 63
     540:	ff e1       	ldi	r31, 0x1F	; 31
     542:	31 97       	sbiw	r30, 0x01	; 1
     544:	f1 f7       	brne	.-4      	; 0x542 <LCDsendCommand+0x1a>
     546:	00 c0       	rjmp	.+0      	; 0x548 <LCDsendCommand+0x20>
     548:	00 00       	nop
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     54a:	f0 e1       	ldi	r31, 0x10	; 16
     54c:	8f 9f       	mul	r24, r31
     54e:	c0 01       	movw	r24, r0
     550:	11 24       	eor	r1, r1
     552:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     554:	42 9a       	sbi	0x08, 2	; 8
     556:	8f e3       	ldi	r24, 0x3F	; 63
     558:	9f e1       	ldi	r25, 0x1F	; 31
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	f1 f7       	brne	.-4      	; 0x55a <LCDsendCommand+0x32>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <LCDsendCommand+0x38>
     560:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     562:	42 98       	cbi	0x08, 2	; 8
     564:	ef e3       	ldi	r30, 0x3F	; 63
     566:	ff e1       	ldi	r31, 0x1F	; 31
     568:	31 97       	sbiw	r30, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <LCDsendCommand+0x40>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <LCDsendCommand+0x46>
     56e:	00 00       	nop
     570:	08 95       	ret

00000572 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	0c 94 94 02 	jmp	0x528	; 0x528 <LCDsendCommand>

00000578 <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	0c 94 94 02 	jmp	0x528	; 0x528 <LCDsendCommand>

0000057e <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	1f 92       	push	r1
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     58e:	00 97       	sbiw	r24, 0x00	; 0
     590:	71 f0       	breq	.+28     	; 0x5ae <LCDstring+0x30>
     592:	18 2f       	mov	r17, r24
     594:	7c 01       	movw	r14, r24
     596:	07 c0       	rjmp	.+14     	; 0x5a6 <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     598:	f7 01       	movw	r30, r14
     59a:	81 91       	ld	r24, Z+
     59c:	7f 01       	movw	r14, r30
     59e:	69 83       	std	Y+1, r22	; 0x01
     5a0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCDsendChar>
     5a4:	69 81       	ldd	r22, Y+1	; 0x01

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     5a6:	8e 2d       	mov	r24, r14
     5a8:	81 1b       	sub	r24, r17
     5aa:	86 17       	cp	r24, r22
     5ac:	a8 f3       	brcs	.-22     	; 0x598 <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     5ae:	0f 90       	pop	r0
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	08 95       	ret

000005bc <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     5bc:	62 30       	cpi	r22, 0x02	; 2
     5be:	31 f0       	breq	.+12     	; 0x5cc <LCDGotoXY+0x10>
     5c0:	63 30       	cpi	r22, 0x03	; 3
     5c2:	31 f0       	breq	.+12     	; 0x5d0 <LCDGotoXY+0x14>
     5c4:	61 30       	cpi	r22, 0x01	; 1
     5c6:	29 f4       	brne	.+10     	; 0x5d2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     5c8:	80 5c       	subi	r24, 0xC0	; 192
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     5cc:	8c 5e       	subi	r24, 0xEC	; 236
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     5d0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     5d2:	80 68       	ori	r24, 0x80	; 128
     5d4:	0c 94 94 02 	jmp	0x528	; 0x528 <LCDsendCommand>

000005d8 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
     5e0:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     5e2:	64 2f       	mov	r22, r20
     5e4:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5e8:	10 e0       	ldi	r17, 0x00	; 0
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     5ec:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5f0:	1f 5f       	subi	r17, 0xFF	; 255
     5f2:	fe 01       	movw	r30, r28
     5f4:	e1 0f       	add	r30, r17
     5f6:	f1 1d       	adc	r31, r1
     5f8:	84 91       	lpm	r24, Z
     5fa:	81 11       	cpse	r24, r1
     5fc:	f7 cf       	rjmp	.-18     	; 0x5ec <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	08 95       	ret

00000606 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     614:	88 e0       	ldi	r24, 0x08	; 8
     616:	68 9f       	mul	r22, r24
     618:	b0 01       	movw	r22, r0
     61a:	11 24       	eor	r1, r1
     61c:	80 e4       	ldi	r24, 0x40	; 64
     61e:	e8 2e       	mov	r14, r24
     620:	e6 2a       	or	r14, r22
	for (i=0; i<8; i++){
     622:	c0 e0       	ldi	r28, 0x00	; 0
     624:	d0 e0       	ldi	r29, 0x00	; 0
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     626:	f8 01       	movw	r30, r16
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     62c:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
     62e:	8c 2f       	mov	r24, r28
     630:	8e 0d       	add	r24, r14
     632:	0e 94 94 02 	call	0x528	; 0x528 <LCDsendCommand>
		LCDsendChar(pcc);
     636:	8f 2d       	mov	r24, r15
     638:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     63c:	21 96       	adiw	r28, 0x01	; 1
     63e:	c8 30       	cpi	r28, 0x08	; 8
     640:	d1 05       	cpc	r29, r1
     642:	89 f7       	brne	.-30     	; 0x626 <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	08 95       	ret

00000652 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	8f e5       	ldi	r24, 0x5F	; 95
     65a:	9a ee       	ldi	r25, 0xEA	; 234
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <LCDinit+0xa>
     660:	00 c0       	rjmp	.+0      	; 0x662 <LCDinit+0x10>
     662:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     664:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     666:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     668:	87 b1       	in	r24, 0x07	; 7
     66a:	80 6f       	ori	r24, 0xF0	; 240
     66c:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     66e:	87 b1       	in	r24, 0x07	; 7
     670:	87 60       	ori	r24, 0x07	; 7
     672:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     674:	80 e3       	ldi	r24, 0x30	; 48
     676:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     678:	42 9a       	sbi	0x08, 2	; 8
     67a:	ef e3       	ldi	r30, 0x3F	; 63
     67c:	ff e1       	ldi	r31, 0x1F	; 31
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <LCDinit+0x2c>
     682:	00 c0       	rjmp	.+0      	; 0x684 <LCDinit+0x32>
     684:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     686:	42 98       	cbi	0x08, 2	; 8
     688:	ef e3       	ldi	r30, 0x3F	; 63
     68a:	ff e1       	ldi	r31, 0x1F	; 31
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <LCDinit+0x3a>
     690:	00 c0       	rjmp	.+0      	; 0x692 <LCDinit+0x40>
     692:	00 00       	nop
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     694:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     696:	42 9a       	sbi	0x08, 2	; 8
     698:	8f e3       	ldi	r24, 0x3F	; 63
     69a:	9f e1       	ldi	r25, 0x1F	; 31
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <LCDinit+0x4a>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <LCDinit+0x50>
     6a2:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     6a4:	42 98       	cbi	0x08, 2	; 8
     6a6:	ef e3       	ldi	r30, 0x3F	; 63
     6a8:	ff e1       	ldi	r31, 0x1F	; 31
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <LCDinit+0x58>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <LCDinit+0x5e>
     6b0:	00 00       	nop
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     6b2:	80 e2       	ldi	r24, 0x20	; 32
     6b4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     6b6:	42 9a       	sbi	0x08, 2	; 8
     6b8:	8f e3       	ldi	r24, 0x3F	; 63
     6ba:	9f e1       	ldi	r25, 0x1F	; 31
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <LCDinit+0x6a>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <LCDinit+0x70>
     6c2:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     6c4:	42 98       	cbi	0x08, 2	; 8
     6c6:	ef e3       	ldi	r30, 0x3F	; 63
     6c8:	ff e1       	ldi	r31, 0x1F	; 31
     6ca:	31 97       	sbiw	r30, 0x01	; 1
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <LCDinit+0x78>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <LCDinit+0x7e>
     6d0:	00 00       	nop
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     6d2:	88 e2       	ldi	r24, 0x28	; 40
     6d4:	0e 94 94 02 	call	0x528	; 0x528 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     6d8:	8c e0       	ldi	r24, 0x0C	; 12
     6da:	0e 94 94 02 	call	0x528	; 0x528 <LCDsendCommand>
     6de:	cb ea       	ldi	r28, 0xAB	; 171
     6e0:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     6e2:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     6e4:	16 2f       	mov	r17, r22
     6e6:	1f 5f       	subi	r17, 0xFF	; 255
     6e8:	ce 01       	movw	r24, r28
     6ea:	0e 94 03 03 	call	0x606	; 0x606 <LCDdefinechar>
     6ee:	28 96       	adiw	r28, 0x08	; 8
     6f0:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     6f2:	18 30       	cpi	r17, 0x08	; 8
     6f4:	b9 f7       	brne	.-18     	; 0x6e4 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	08 95       	ret

000006fe <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     704:	c0 e0       	ldi	r28, 0x00	; 0
     706:	04 c0       	rjmp	.+8      	; 0x710 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
     708:	8e e1       	ldi	r24, 0x1E	; 30
     70a:	0e 94 94 02 	call	0x528	; 0x528 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     70e:	cf 5f       	subi	r28, 0xFF	; 255
     710:	cd 13       	cpse	r28, r29
     712:	fa cf       	rjmp	.-12     	; 0x708 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	08 95       	ret

0000071a <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     720:	c0 e0       	ldi	r28, 0x00	; 0
     722:	04 c0       	rjmp	.+8      	; 0x72c <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
     724:	88 e1       	ldi	r24, 0x18	; 24
     726:	0e 94 94 02 	call	0x528	; 0x528 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     72a:	cf 5f       	subi	r28, 0xFF	; 255
     72c:	cd 13       	cpse	r28, r29
     72e:	fa cf       	rjmp	.-12     	; 0x724 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     736:	8e e0       	ldi	r24, 0x0E	; 14
     738:	0c 94 94 02 	jmp	0x528	; 0x528 <LCDsendCommand>

0000073c <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     73c:	8f e0       	ldi	r24, 0x0F	; 15
     73e:	0c 94 94 02 	jmp	0x528	; 0x528 <LCDsendCommand>

00000742 <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     742:	8c e0       	ldi	r24, 0x0C	; 12
     744:	0c 94 94 02 	jmp	0x528	; 0x528 <LCDsendCommand>

00000748 <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     748:	88 e0       	ldi	r24, 0x08	; 8
     74a:	0c 94 94 02 	jmp	0x528	; 0x528 <LCDsendCommand>

0000074e <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     74e:	8c e0       	ldi	r24, 0x0C	; 12
     750:	0c 94 94 02 	jmp	0x528	; 0x528 <LCDsendCommand>

00000754 <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     75a:	c0 e0       	ldi	r28, 0x00	; 0
     75c:	04 c0       	rjmp	.+8      	; 0x766 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
     75e:	80 e1       	ldi	r24, 0x10	; 16
     760:	0e 94 94 02 	call	0x528	; 0x528 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     764:	cf 5f       	subi	r28, 0xFF	; 255
     766:	cd 13       	cpse	r28, r29
     768:	fa cf       	rjmp	.-12     	; 0x75e <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     776:	c0 e0       	ldi	r28, 0x00	; 0
     778:	04 c0       	rjmp	.+8      	; 0x782 <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
     77a:	84 e1       	ldi	r24, 0x14	; 20
     77c:	0e 94 94 02 	call	0x528	; 0x528 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     780:	cf 5f       	subi	r28, 0xFF	; 255
     782:	cd 13       	cpse	r28, r29
     784:	fa cf       	rjmp	.-12     	; 0x77a <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	1f 92       	push	r1
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     7a2:	56 e0       	ldi	r21, 0x06	; 6
     7a4:	45 9f       	mul	r20, r21
     7a6:	90 01       	movw	r18, r0
     7a8:	11 24       	eor	r1, r1
     7aa:	e8 2f       	mov	r30, r24
     7ac:	e2 9f       	mul	r30, r18
     7ae:	c0 01       	movw	r24, r0
     7b0:	e3 9f       	mul	r30, r19
     7b2:	90 0d       	add	r25, r0
     7b4:	11 24       	eor	r1, r1
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	0e 94 02 09 	call	0x1204	; 0x1204 <__divmodhi4>
     7bc:	8b 01       	movw	r16, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     7be:	cb 01       	movw	r24, r22
     7c0:	66 e0       	ldi	r22, 0x06	; 6
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__udivmodhi4>
     7c8:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     7ca:	c1 2c       	mov	r12, r1
     7cc:	d1 2c       	mov	r13, r1
     7ce:	f1 2c       	mov	r15, r1
     7d0:	16 c0       	rjmp	.+44     	; 0x7fe <LCDprogressBar+0x72>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     7d2:	96 01       	movw	r18, r12
     7d4:	2b 5f       	subi	r18, 0xFB	; 251
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	02 17       	cp	r16, r18
     7da:	13 07       	cpc	r17, r19
     7dc:	28 f4       	brcc	.+10     	; 0x7e8 <LCDprogressBar+0x5c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     7de:	0c 15       	cp	r16, r12
     7e0:	1d 05       	cpc	r17, r13
     7e2:	20 f0       	brcs	.+8      	; 0x7ec <LCDprogressBar+0x60>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     7e4:	8e 2d       	mov	r24, r14
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <LCDprogressBar+0x62>
			}
		}
		else
		{
			// this is a full block
			c = 5;
     7e8:	85 e0       	ldi	r24, 0x05	; 5
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <LCDprogressBar+0x62>
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     7ee:	49 83       	std	Y+1, r20	; 0x01
     7f0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     7f4:	f3 94       	inc	r15
     7f6:	f6 e0       	ldi	r31, 0x06	; 6
     7f8:	cf 0e       	add	r12, r31
     7fa:	d1 1c       	adc	r13, r1
     7fc:	49 81       	ldd	r20, Y+1	; 0x01
     7fe:	f4 12       	cpse	r15, r20
     800:	e8 cf       	rjmp	.-48     	; 0x7d2 <LCDprogressBar+0x46>
		
		// write character to display
		LCDsendChar(c);
	}

}
     802:	0f 90       	pop	r0
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	df 90       	pop	r13
     812:	cf 90       	pop	r12
     814:	08 95       	ret

00000816 <main>:
}

int main(void){
	initialize();
     816:	0e 94 4a 02 	call	0x494	; 0x494 <initialize>
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	8c e8       	ldi	r24, 0x8C	; 140
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <CopyStringtoLCD>
	
	while(1){
		if( led_time_count == 0){
			led_time_count = LED_BLINK_PERIOD / 2;
     826:	c4 ef       	ldi	r28, 0xF4	; 244
     828:	d1 e0       	ldi	r29, 0x01	; 1
			toggle_led();
		}
		if( lcd_time_count == 0){
			lcd_time_count = LCD_REFRESH_RATE;
     82a:	08 ec       	ldi	r16, 0xC8	; 200
     82c:	10 e0       	ldi	r17, 0x00	; 0
		if(cap_discharged && !begin_cap_measurement){
			//begin cap measurements
			//switch Timer1A mode
			DDRB &= ~COMPARATOR_INPUT;
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     82e:	ee 24       	eor	r14, r14
     830:	e3 94       	inc	r14
     832:	f1 2c       	mov	r15, r1
int main(void){
	initialize();
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
	
	while(1){
		if( led_time_count == 0){
     834:	80 91 2f 01 	lds	r24, 0x012F
     838:	90 91 30 01 	lds	r25, 0x0130
     83c:	89 2b       	or	r24, r25
     83e:	31 f4       	brne	.+12     	; 0x84c <main+0x36>
			led_time_count = LED_BLINK_PERIOD / 2;
     840:	d0 93 30 01 	sts	0x0130, r29
     844:	c0 93 2f 01 	sts	0x012F, r28
			toggle_led();
     848:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <toggle_led>
		}
		if( lcd_time_count == 0){
     84c:	80 91 10 01 	lds	r24, 0x0110
     850:	90 91 11 01 	lds	r25, 0x0111
     854:	89 2b       	or	r24, r25
     856:	31 f4       	brne	.+12     	; 0x864 <main+0x4e>
			lcd_time_count = LCD_REFRESH_RATE;
     858:	10 93 11 01 	sts	0x0111, r17
     85c:	00 93 10 01 	sts	0x0110, r16
			refresh_lcd();
     860:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <refresh_lcd>
		}
		init_cap_measurements();
     864:	0e 94 42 01 	call	0x284	; 0x284 <init_cap_measurements>
		if(cap_discharged && !begin_cap_measurement){
     868:	80 91 0c 01 	lds	r24, 0x010C
     86c:	90 91 0d 01 	lds	r25, 0x010D
     870:	89 2b       	or	r24, r25
     872:	69 f0       	breq	.+26     	; 0x88e <main+0x78>
     874:	80 91 0e 01 	lds	r24, 0x010E
     878:	90 91 0f 01 	lds	r25, 0x010F
     87c:	89 2b       	or	r24, r25
     87e:	39 f4       	brne	.+14     	; 0x88e <main+0x78>
			//begin cap measurements
			//switch Timer1A mode
			DDRB &= ~COMPARATOR_INPUT;
     880:	22 98       	cbi	0x04, 2	; 4
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     882:	f0 92 0f 01 	sts	0x010F, r15
     886:	e0 92 0e 01 	sts	0x010E, r14
			//initalize timer for cap measurement
			init_cap_measurement_analog_timer();
     88a:	0e 94 18 01 	call	0x230	; 0x230 <init_cap_measurement_analog_timer>
		}

		if(begin_cap_measurement && cap_charged){
     88e:	80 91 0e 01 	lds	r24, 0x010E
     892:	90 91 0f 01 	lds	r25, 0x010F
     896:	89 2b       	or	r24, r25
     898:	69 f2       	breq	.-102    	; 0x834 <main+0x1e>
     89a:	80 91 0a 01 	lds	r24, 0x010A
     89e:	90 91 0b 01 	lds	r25, 0x010B
     8a2:	c8 cf       	rjmp	.-112    	; 0x834 <main+0x1e>

000008a4 <__floatunsisf>:
     8a4:	e8 94       	clt
     8a6:	09 c0       	rjmp	.+18     	; 0x8ba <__floatsisf+0x12>

000008a8 <__floatsisf>:
     8a8:	97 fb       	bst	r25, 7
     8aa:	3e f4       	brtc	.+14     	; 0x8ba <__floatsisf+0x12>
     8ac:	90 95       	com	r25
     8ae:	80 95       	com	r24
     8b0:	70 95       	com	r23
     8b2:	61 95       	neg	r22
     8b4:	7f 4f       	sbci	r23, 0xFF	; 255
     8b6:	8f 4f       	sbci	r24, 0xFF	; 255
     8b8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ba:	99 23       	and	r25, r25
     8bc:	a9 f0       	breq	.+42     	; 0x8e8 <__floatsisf+0x40>
     8be:	f9 2f       	mov	r31, r25
     8c0:	96 e9       	ldi	r25, 0x96	; 150
     8c2:	bb 27       	eor	r27, r27
     8c4:	93 95       	inc	r25
     8c6:	f6 95       	lsr	r31
     8c8:	87 95       	ror	r24
     8ca:	77 95       	ror	r23
     8cc:	67 95       	ror	r22
     8ce:	b7 95       	ror	r27
     8d0:	f1 11       	cpse	r31, r1
     8d2:	f8 cf       	rjmp	.-16     	; 0x8c4 <__floatsisf+0x1c>
     8d4:	fa f4       	brpl	.+62     	; 0x914 <__floatsisf+0x6c>
     8d6:	bb 0f       	add	r27, r27
     8d8:	11 f4       	brne	.+4      	; 0x8de <__floatsisf+0x36>
     8da:	60 ff       	sbrs	r22, 0
     8dc:	1b c0       	rjmp	.+54     	; 0x914 <__floatsisf+0x6c>
     8de:	6f 5f       	subi	r22, 0xFF	; 255
     8e0:	7f 4f       	sbci	r23, 0xFF	; 255
     8e2:	8f 4f       	sbci	r24, 0xFF	; 255
     8e4:	9f 4f       	sbci	r25, 0xFF	; 255
     8e6:	16 c0       	rjmp	.+44     	; 0x914 <__floatsisf+0x6c>
     8e8:	88 23       	and	r24, r24
     8ea:	11 f0       	breq	.+4      	; 0x8f0 <__floatsisf+0x48>
     8ec:	96 e9       	ldi	r25, 0x96	; 150
     8ee:	11 c0       	rjmp	.+34     	; 0x912 <__floatsisf+0x6a>
     8f0:	77 23       	and	r23, r23
     8f2:	21 f0       	breq	.+8      	; 0x8fc <__floatsisf+0x54>
     8f4:	9e e8       	ldi	r25, 0x8E	; 142
     8f6:	87 2f       	mov	r24, r23
     8f8:	76 2f       	mov	r23, r22
     8fa:	05 c0       	rjmp	.+10     	; 0x906 <__floatsisf+0x5e>
     8fc:	66 23       	and	r22, r22
     8fe:	71 f0       	breq	.+28     	; 0x91c <__floatsisf+0x74>
     900:	96 e8       	ldi	r25, 0x86	; 134
     902:	86 2f       	mov	r24, r22
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	2a f0       	brmi	.+10     	; 0x914 <__floatsisf+0x6c>
     90a:	9a 95       	dec	r25
     90c:	66 0f       	add	r22, r22
     90e:	77 1f       	adc	r23, r23
     910:	88 1f       	adc	r24, r24
     912:	da f7       	brpl	.-10     	; 0x90a <__floatsisf+0x62>
     914:	88 0f       	add	r24, r24
     916:	96 95       	lsr	r25
     918:	87 95       	ror	r24
     91a:	97 f9       	bld	r25, 7
     91c:	08 95       	ret

0000091e <__mulsf3>:
     91e:	0b d0       	rcall	.+22     	; 0x936 <__mulsf3x>
     920:	78 c0       	rjmp	.+240    	; 0xa12 <__fp_round>
     922:	69 d0       	rcall	.+210    	; 0x9f6 <__fp_pscA>
     924:	28 f0       	brcs	.+10     	; 0x930 <__mulsf3+0x12>
     926:	6e d0       	rcall	.+220    	; 0xa04 <__fp_pscB>
     928:	18 f0       	brcs	.+6      	; 0x930 <__mulsf3+0x12>
     92a:	95 23       	and	r25, r21
     92c:	09 f0       	breq	.+2      	; 0x930 <__mulsf3+0x12>
     92e:	5a c0       	rjmp	.+180    	; 0x9e4 <__fp_inf>
     930:	5f c0       	rjmp	.+190    	; 0x9f0 <__fp_nan>
     932:	11 24       	eor	r1, r1
     934:	a2 c0       	rjmp	.+324    	; 0xa7a <__fp_szero>

00000936 <__mulsf3x>:
     936:	7e d0       	rcall	.+252    	; 0xa34 <__fp_split3>
     938:	a0 f3       	brcs	.-24     	; 0x922 <__mulsf3+0x4>

0000093a <__mulsf3_pse>:
     93a:	95 9f       	mul	r25, r21
     93c:	d1 f3       	breq	.-12     	; 0x932 <__mulsf3+0x14>
     93e:	95 0f       	add	r25, r21
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	55 1f       	adc	r21, r21
     944:	62 9f       	mul	r22, r18
     946:	f0 01       	movw	r30, r0
     948:	72 9f       	mul	r23, r18
     94a:	bb 27       	eor	r27, r27
     94c:	f0 0d       	add	r31, r0
     94e:	b1 1d       	adc	r27, r1
     950:	63 9f       	mul	r22, r19
     952:	aa 27       	eor	r26, r26
     954:	f0 0d       	add	r31, r0
     956:	b1 1d       	adc	r27, r1
     958:	aa 1f       	adc	r26, r26
     95a:	64 9f       	mul	r22, r20
     95c:	66 27       	eor	r22, r22
     95e:	b0 0d       	add	r27, r0
     960:	a1 1d       	adc	r26, r1
     962:	66 1f       	adc	r22, r22
     964:	82 9f       	mul	r24, r18
     966:	22 27       	eor	r18, r18
     968:	b0 0d       	add	r27, r0
     96a:	a1 1d       	adc	r26, r1
     96c:	62 1f       	adc	r22, r18
     96e:	73 9f       	mul	r23, r19
     970:	b0 0d       	add	r27, r0
     972:	a1 1d       	adc	r26, r1
     974:	62 1f       	adc	r22, r18
     976:	83 9f       	mul	r24, r19
     978:	a0 0d       	add	r26, r0
     97a:	61 1d       	adc	r22, r1
     97c:	22 1f       	adc	r18, r18
     97e:	74 9f       	mul	r23, r20
     980:	33 27       	eor	r19, r19
     982:	a0 0d       	add	r26, r0
     984:	61 1d       	adc	r22, r1
     986:	23 1f       	adc	r18, r19
     988:	84 9f       	mul	r24, r20
     98a:	60 0d       	add	r22, r0
     98c:	21 1d       	adc	r18, r1
     98e:	82 2f       	mov	r24, r18
     990:	76 2f       	mov	r23, r22
     992:	6a 2f       	mov	r22, r26
     994:	11 24       	eor	r1, r1
     996:	9f 57       	subi	r25, 0x7F	; 127
     998:	50 40       	sbci	r21, 0x00	; 0
     99a:	8a f0       	brmi	.+34     	; 0x9be <__mulsf3_pse+0x84>
     99c:	e1 f0       	breq	.+56     	; 0x9d6 <__mulsf3_pse+0x9c>
     99e:	88 23       	and	r24, r24
     9a0:	4a f0       	brmi	.+18     	; 0x9b4 <__mulsf3_pse+0x7a>
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	bb 1f       	adc	r27, r27
     9a8:	66 1f       	adc	r22, r22
     9aa:	77 1f       	adc	r23, r23
     9ac:	88 1f       	adc	r24, r24
     9ae:	91 50       	subi	r25, 0x01	; 1
     9b0:	50 40       	sbci	r21, 0x00	; 0
     9b2:	a9 f7       	brne	.-22     	; 0x99e <__mulsf3_pse+0x64>
     9b4:	9e 3f       	cpi	r25, 0xFE	; 254
     9b6:	51 05       	cpc	r21, r1
     9b8:	70 f0       	brcs	.+28     	; 0x9d6 <__mulsf3_pse+0x9c>
     9ba:	14 c0       	rjmp	.+40     	; 0x9e4 <__fp_inf>
     9bc:	5e c0       	rjmp	.+188    	; 0xa7a <__fp_szero>
     9be:	5f 3f       	cpi	r21, 0xFF	; 255
     9c0:	ec f3       	brlt	.-6      	; 0x9bc <__mulsf3_pse+0x82>
     9c2:	98 3e       	cpi	r25, 0xE8	; 232
     9c4:	dc f3       	brlt	.-10     	; 0x9bc <__mulsf3_pse+0x82>
     9c6:	86 95       	lsr	r24
     9c8:	77 95       	ror	r23
     9ca:	67 95       	ror	r22
     9cc:	b7 95       	ror	r27
     9ce:	f7 95       	ror	r31
     9d0:	e7 95       	ror	r30
     9d2:	9f 5f       	subi	r25, 0xFF	; 255
     9d4:	c1 f7       	brne	.-16     	; 0x9c6 <__mulsf3_pse+0x8c>
     9d6:	fe 2b       	or	r31, r30
     9d8:	88 0f       	add	r24, r24
     9da:	91 1d       	adc	r25, r1
     9dc:	96 95       	lsr	r25
     9de:	87 95       	ror	r24
     9e0:	97 f9       	bld	r25, 7
     9e2:	08 95       	ret

000009e4 <__fp_inf>:
     9e4:	97 f9       	bld	r25, 7
     9e6:	9f 67       	ori	r25, 0x7F	; 127
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	08 95       	ret

000009f0 <__fp_nan>:
     9f0:	9f ef       	ldi	r25, 0xFF	; 255
     9f2:	80 ec       	ldi	r24, 0xC0	; 192
     9f4:	08 95       	ret

000009f6 <__fp_pscA>:
     9f6:	00 24       	eor	r0, r0
     9f8:	0a 94       	dec	r0
     9fa:	16 16       	cp	r1, r22
     9fc:	17 06       	cpc	r1, r23
     9fe:	18 06       	cpc	r1, r24
     a00:	09 06       	cpc	r0, r25
     a02:	08 95       	ret

00000a04 <__fp_pscB>:
     a04:	00 24       	eor	r0, r0
     a06:	0a 94       	dec	r0
     a08:	12 16       	cp	r1, r18
     a0a:	13 06       	cpc	r1, r19
     a0c:	14 06       	cpc	r1, r20
     a0e:	05 06       	cpc	r0, r21
     a10:	08 95       	ret

00000a12 <__fp_round>:
     a12:	09 2e       	mov	r0, r25
     a14:	03 94       	inc	r0
     a16:	00 0c       	add	r0, r0
     a18:	11 f4       	brne	.+4      	; 0xa1e <__fp_round+0xc>
     a1a:	88 23       	and	r24, r24
     a1c:	52 f0       	brmi	.+20     	; 0xa32 <__fp_round+0x20>
     a1e:	bb 0f       	add	r27, r27
     a20:	40 f4       	brcc	.+16     	; 0xa32 <__fp_round+0x20>
     a22:	bf 2b       	or	r27, r31
     a24:	11 f4       	brne	.+4      	; 0xa2a <__fp_round+0x18>
     a26:	60 ff       	sbrs	r22, 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__fp_round+0x20>
     a2a:	6f 5f       	subi	r22, 0xFF	; 255
     a2c:	7f 4f       	sbci	r23, 0xFF	; 255
     a2e:	8f 4f       	sbci	r24, 0xFF	; 255
     a30:	9f 4f       	sbci	r25, 0xFF	; 255
     a32:	08 95       	ret

00000a34 <__fp_split3>:
     a34:	57 fd       	sbrc	r21, 7
     a36:	90 58       	subi	r25, 0x80	; 128
     a38:	44 0f       	add	r20, r20
     a3a:	55 1f       	adc	r21, r21
     a3c:	59 f0       	breq	.+22     	; 0xa54 <__fp_splitA+0x10>
     a3e:	5f 3f       	cpi	r21, 0xFF	; 255
     a40:	71 f0       	breq	.+28     	; 0xa5e <__fp_splitA+0x1a>
     a42:	47 95       	ror	r20

00000a44 <__fp_splitA>:
     a44:	88 0f       	add	r24, r24
     a46:	97 fb       	bst	r25, 7
     a48:	99 1f       	adc	r25, r25
     a4a:	61 f0       	breq	.+24     	; 0xa64 <__fp_splitA+0x20>
     a4c:	9f 3f       	cpi	r25, 0xFF	; 255
     a4e:	79 f0       	breq	.+30     	; 0xa6e <__fp_splitA+0x2a>
     a50:	87 95       	ror	r24
     a52:	08 95       	ret
     a54:	12 16       	cp	r1, r18
     a56:	13 06       	cpc	r1, r19
     a58:	14 06       	cpc	r1, r20
     a5a:	55 1f       	adc	r21, r21
     a5c:	f2 cf       	rjmp	.-28     	; 0xa42 <__fp_split3+0xe>
     a5e:	46 95       	lsr	r20
     a60:	f1 df       	rcall	.-30     	; 0xa44 <__fp_splitA>
     a62:	08 c0       	rjmp	.+16     	; 0xa74 <__fp_splitA+0x30>
     a64:	16 16       	cp	r1, r22
     a66:	17 06       	cpc	r1, r23
     a68:	18 06       	cpc	r1, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	f1 cf       	rjmp	.-30     	; 0xa50 <__fp_splitA+0xc>
     a6e:	86 95       	lsr	r24
     a70:	71 05       	cpc	r23, r1
     a72:	61 05       	cpc	r22, r1
     a74:	08 94       	sec
     a76:	08 95       	ret

00000a78 <__fp_zero>:
     a78:	e8 94       	clt

00000a7a <__fp_szero>:
     a7a:	bb 27       	eor	r27, r27
     a7c:	66 27       	eor	r22, r22
     a7e:	77 27       	eor	r23, r23
     a80:	cb 01       	movw	r24, r22
     a82:	97 f9       	bld	r25, 7
     a84:	08 95       	ret

00000a86 <vfprintf>:
     a86:	2f 92       	push	r2
     a88:	3f 92       	push	r3
     a8a:	4f 92       	push	r4
     a8c:	5f 92       	push	r5
     a8e:	6f 92       	push	r6
     a90:	7f 92       	push	r7
     a92:	8f 92       	push	r8
     a94:	9f 92       	push	r9
     a96:	af 92       	push	r10
     a98:	bf 92       	push	r11
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	62 97       	sbiw	r28, 0x12	; 18
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	cd bf       	out	0x3d, r28	; 61
     aba:	7c 01       	movw	r14, r24
     abc:	1b 01       	movw	r2, r22
     abe:	6a 01       	movw	r12, r20
     ac0:	fc 01       	movw	r30, r24
     ac2:	17 82       	std	Z+7, r1	; 0x07
     ac4:	16 82       	std	Z+6, r1	; 0x06
     ac6:	83 81       	ldd	r24, Z+3	; 0x03
     ac8:	81 fd       	sbrc	r24, 1
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <vfprintf+0x4c>
     acc:	6b c3       	rjmp	.+1750   	; 0x11a4 <vfprintf+0x71e>
     ace:	65 01       	movw	r12, r10
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <vfprintf+0x56>
     ad2:	88 24       	eor	r8, r8
     ad4:	83 94       	inc	r8
     ad6:	91 2c       	mov	r9, r1
     ad8:	8c 0e       	add	r8, r28
     ada:	9d 1e       	adc	r9, r29
     adc:	f7 01       	movw	r30, r14
     ade:	93 81       	ldd	r25, Z+3	; 0x03
     ae0:	f1 01       	movw	r30, r2
     ae2:	93 fd       	sbrc	r25, 3
     ae4:	85 91       	lpm	r24, Z+
     ae6:	93 ff       	sbrs	r25, 3
     ae8:	81 91       	ld	r24, Z+
     aea:	1f 01       	movw	r2, r30
     aec:	88 23       	and	r24, r24
     aee:	09 f4       	brne	.+2      	; 0xaf2 <vfprintf+0x6c>
     af0:	55 c3       	rjmp	.+1706   	; 0x119c <vfprintf+0x716>
     af2:	85 32       	cpi	r24, 0x25	; 37
     af4:	39 f4       	brne	.+14     	; 0xb04 <vfprintf+0x7e>
     af6:	93 fd       	sbrc	r25, 3
     af8:	85 91       	lpm	r24, Z+
     afa:	93 ff       	sbrs	r25, 3
     afc:	81 91       	ld	r24, Z+
     afe:	1f 01       	movw	r2, r30
     b00:	85 32       	cpi	r24, 0x25	; 37
     b02:	31 f4       	brne	.+12     	; 0xb10 <vfprintf+0x8a>
     b04:	b7 01       	movw	r22, r14
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     b0c:	56 01       	movw	r10, r12
     b0e:	df cf       	rjmp	.-66     	; 0xace <vfprintf+0x48>
     b10:	71 2c       	mov	r7, r1
     b12:	61 2c       	mov	r6, r1
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	20 32       	cpi	r18, 0x20	; 32
     b18:	a8 f4       	brcc	.+42     	; 0xb44 <vfprintf+0xbe>
     b1a:	8b 32       	cpi	r24, 0x2B	; 43
     b1c:	61 f0       	breq	.+24     	; 0xb36 <vfprintf+0xb0>
     b1e:	28 f4       	brcc	.+10     	; 0xb2a <vfprintf+0xa4>
     b20:	80 32       	cpi	r24, 0x20	; 32
     b22:	51 f0       	breq	.+20     	; 0xb38 <vfprintf+0xb2>
     b24:	83 32       	cpi	r24, 0x23	; 35
     b26:	71 f4       	brne	.+28     	; 0xb44 <vfprintf+0xbe>
     b28:	0b c0       	rjmp	.+22     	; 0xb40 <vfprintf+0xba>
     b2a:	8d 32       	cpi	r24, 0x2D	; 45
     b2c:	39 f0       	breq	.+14     	; 0xb3c <vfprintf+0xb6>
     b2e:	80 33       	cpi	r24, 0x30	; 48
     b30:	49 f4       	brne	.+18     	; 0xb44 <vfprintf+0xbe>
     b32:	21 60       	ori	r18, 0x01	; 1
     b34:	28 c0       	rjmp	.+80     	; 0xb86 <vfprintf+0x100>
     b36:	22 60       	ori	r18, 0x02	; 2
     b38:	24 60       	ori	r18, 0x04	; 4
     b3a:	25 c0       	rjmp	.+74     	; 0xb86 <vfprintf+0x100>
     b3c:	28 60       	ori	r18, 0x08	; 8
     b3e:	23 c0       	rjmp	.+70     	; 0xb86 <vfprintf+0x100>
     b40:	20 61       	ori	r18, 0x10	; 16
     b42:	21 c0       	rjmp	.+66     	; 0xb86 <vfprintf+0x100>
     b44:	27 fd       	sbrc	r18, 7
     b46:	27 c0       	rjmp	.+78     	; 0xb96 <vfprintf+0x110>
     b48:	38 2f       	mov	r19, r24
     b4a:	30 53       	subi	r19, 0x30	; 48
     b4c:	3a 30       	cpi	r19, 0x0A	; 10
     b4e:	78 f4       	brcc	.+30     	; 0xb6e <vfprintf+0xe8>
     b50:	26 ff       	sbrs	r18, 6
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <vfprintf+0xda>
     b54:	fa e0       	ldi	r31, 0x0A	; 10
     b56:	7f 9e       	mul	r7, r31
     b58:	30 0d       	add	r19, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	73 2e       	mov	r7, r19
     b5e:	13 c0       	rjmp	.+38     	; 0xb86 <vfprintf+0x100>
     b60:	4a e0       	ldi	r20, 0x0A	; 10
     b62:	64 9e       	mul	r6, r20
     b64:	30 0d       	add	r19, r0
     b66:	11 24       	eor	r1, r1
     b68:	63 2e       	mov	r6, r19
     b6a:	20 62       	ori	r18, 0x20	; 32
     b6c:	0c c0       	rjmp	.+24     	; 0xb86 <vfprintf+0x100>
     b6e:	8e 32       	cpi	r24, 0x2E	; 46
     b70:	21 f4       	brne	.+8      	; 0xb7a <vfprintf+0xf4>
     b72:	26 fd       	sbrc	r18, 6
     b74:	13 c3       	rjmp	.+1574   	; 0x119c <vfprintf+0x716>
     b76:	20 64       	ori	r18, 0x40	; 64
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <vfprintf+0x100>
     b7a:	8c 36       	cpi	r24, 0x6C	; 108
     b7c:	11 f4       	brne	.+4      	; 0xb82 <vfprintf+0xfc>
     b7e:	20 68       	ori	r18, 0x80	; 128
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <vfprintf+0x100>
     b82:	88 36       	cpi	r24, 0x68	; 104
     b84:	41 f4       	brne	.+16     	; 0xb96 <vfprintf+0x110>
     b86:	f1 01       	movw	r30, r2
     b88:	93 fd       	sbrc	r25, 3
     b8a:	85 91       	lpm	r24, Z+
     b8c:	93 ff       	sbrs	r25, 3
     b8e:	81 91       	ld	r24, Z+
     b90:	1f 01       	movw	r2, r30
     b92:	81 11       	cpse	r24, r1
     b94:	c0 cf       	rjmp	.-128    	; 0xb16 <vfprintf+0x90>
     b96:	98 2f       	mov	r25, r24
     b98:	95 54       	subi	r25, 0x45	; 69
     b9a:	93 30       	cpi	r25, 0x03	; 3
     b9c:	18 f4       	brcc	.+6      	; 0xba4 <vfprintf+0x11e>
     b9e:	20 61       	ori	r18, 0x10	; 16
     ba0:	80 5e       	subi	r24, 0xE0	; 224
     ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <vfprintf+0x12a>
     ba4:	98 2f       	mov	r25, r24
     ba6:	95 56       	subi	r25, 0x65	; 101
     ba8:	93 30       	cpi	r25, 0x03	; 3
     baa:	08 f0       	brcs	.+2      	; 0xbae <vfprintf+0x128>
     bac:	a4 c1       	rjmp	.+840    	; 0xef6 <vfprintf+0x470>
     bae:	2f 7e       	andi	r18, 0xEF	; 239
     bb0:	26 fd       	sbrc	r18, 6
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <vfprintf+0x132>
     bb4:	16 e0       	ldi	r17, 0x06	; 6
     bb6:	71 2e       	mov	r7, r17
     bb8:	bf e3       	ldi	r27, 0x3F	; 63
     bba:	5b 2e       	mov	r5, r27
     bbc:	52 22       	and	r5, r18
     bbe:	85 36       	cpi	r24, 0x65	; 101
     bc0:	19 f4       	brne	.+6      	; 0xbc8 <vfprintf+0x142>
     bc2:	f0 e4       	ldi	r31, 0x40	; 64
     bc4:	5f 2a       	or	r5, r31
     bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <vfprintf+0x150>
     bc8:	86 36       	cpi	r24, 0x66	; 102
     bca:	19 f4       	brne	.+6      	; 0xbd2 <vfprintf+0x14c>
     bcc:	40 e8       	ldi	r20, 0x80	; 128
     bce:	54 2a       	or	r5, r20
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <vfprintf+0x150>
     bd2:	71 10       	cpse	r7, r1
     bd4:	7a 94       	dec	r7
     bd6:	57 fe       	sbrs	r5, 7
     bd8:	07 c0       	rjmp	.+14     	; 0xbe8 <vfprintf+0x162>
     bda:	5b e3       	ldi	r21, 0x3B	; 59
     bdc:	57 15       	cp	r21, r7
     bde:	48 f0       	brcs	.+18     	; 0xbf2 <vfprintf+0x16c>
     be0:	47 2c       	mov	r4, r7
     be2:	43 94       	inc	r4
     be4:	27 e0       	ldi	r18, 0x07	; 7
     be6:	0d c0       	rjmp	.+26     	; 0xc02 <vfprintf+0x17c>
     be8:	87 e0       	ldi	r24, 0x07	; 7
     bea:	87 15       	cp	r24, r7
     bec:	30 f0       	brcs	.+12     	; 0xbfa <vfprintf+0x174>
     bee:	27 2d       	mov	r18, r7
     bf0:	07 c0       	rjmp	.+14     	; 0xc00 <vfprintf+0x17a>
     bf2:	27 e0       	ldi	r18, 0x07	; 7
     bf4:	ac e3       	ldi	r26, 0x3C	; 60
     bf6:	4a 2e       	mov	r4, r26
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <vfprintf+0x17c>
     bfa:	27 e0       	ldi	r18, 0x07	; 7
     bfc:	f7 e0       	ldi	r31, 0x07	; 7
     bfe:	7f 2e       	mov	r7, r31
     c00:	41 2c       	mov	r4, r1
     c02:	56 01       	movw	r10, r12
     c04:	94 e0       	ldi	r25, 0x04	; 4
     c06:	a9 0e       	add	r10, r25
     c08:	b1 1c       	adc	r11, r1
     c0a:	f6 01       	movw	r30, r12
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	82 81       	ldd	r24, Z+2	; 0x02
     c12:	93 81       	ldd	r25, Z+3	; 0x03
     c14:	04 2d       	mov	r16, r4
     c16:	a4 01       	movw	r20, r8
     c18:	0e 94 16 09 	call	0x122c	; 0x122c <__ftoa_engine>
     c1c:	8c 01       	movw	r16, r24
     c1e:	49 81       	ldd	r20, Y+1	; 0x01
     c20:	4c 87       	std	Y+12, r20	; 0x0c
     c22:	40 ff       	sbrs	r20, 0
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <vfprintf+0x1a4>
     c26:	43 ff       	sbrs	r20, 3
     c28:	07 c0       	rjmp	.+14     	; 0xc38 <vfprintf+0x1b2>
     c2a:	51 fc       	sbrc	r5, 1
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <vfprintf+0x1b8>
     c2e:	52 fe       	sbrs	r5, 2
     c30:	09 c0       	rjmp	.+18     	; 0xc44 <vfprintf+0x1be>
     c32:	e0 e2       	ldi	r30, 0x20	; 32
     c34:	de 2e       	mov	r13, r30
     c36:	07 c0       	rjmp	.+14     	; 0xc46 <vfprintf+0x1c0>
     c38:	7d e2       	ldi	r23, 0x2D	; 45
     c3a:	d7 2e       	mov	r13, r23
     c3c:	04 c0       	rjmp	.+8      	; 0xc46 <vfprintf+0x1c0>
     c3e:	6b e2       	ldi	r22, 0x2B	; 43
     c40:	d6 2e       	mov	r13, r22
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <vfprintf+0x1c0>
     c44:	d1 2c       	mov	r13, r1
     c46:	8c 85       	ldd	r24, Y+12	; 0x0c
     c48:	8c 70       	andi	r24, 0x0C	; 12
     c4a:	a1 f1       	breq	.+104    	; 0xcb4 <vfprintf+0x22e>
     c4c:	dd 20       	and	r13, r13
     c4e:	11 f0       	breq	.+4      	; 0xc54 <vfprintf+0x1ce>
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <vfprintf+0x1d0>
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	86 15       	cp	r24, r6
     c58:	10 f0       	brcs	.+4      	; 0xc5e <vfprintf+0x1d8>
     c5a:	61 2c       	mov	r6, r1
     c5c:	0b c0       	rjmp	.+22     	; 0xc74 <vfprintf+0x1ee>
     c5e:	68 1a       	sub	r6, r24
     c60:	53 fc       	sbrc	r5, 3
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <vfprintf+0x1ee>
     c64:	b7 01       	movw	r22, r14
     c66:	80 e2       	ldi	r24, 0x20	; 32
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     c6e:	6a 94       	dec	r6
     c70:	c9 f7       	brne	.-14     	; 0xc64 <vfprintf+0x1de>
     c72:	f3 cf       	rjmp	.-26     	; 0xc5a <vfprintf+0x1d4>
     c74:	dd 20       	and	r13, r13
     c76:	29 f0       	breq	.+10     	; 0xc82 <vfprintf+0x1fc>
     c78:	b7 01       	movw	r22, r14
     c7a:	8d 2d       	mov	r24, r13
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     c82:	5c 85       	ldd	r21, Y+12	; 0x0c
     c84:	53 fd       	sbrc	r21, 3
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <vfprintf+0x208>
     c88:	0f ee       	ldi	r16, 0xEF	; 239
     c8a:	10 e0       	ldi	r17, 0x00	; 0
     c8c:	0c c0       	rjmp	.+24     	; 0xca6 <vfprintf+0x220>
     c8e:	0b ee       	ldi	r16, 0xEB	; 235
     c90:	10 e0       	ldi	r17, 0x00	; 0
     c92:	09 c0       	rjmp	.+18     	; 0xca6 <vfprintf+0x220>
     c94:	51 10       	cpse	r5, r1
     c96:	80 52       	subi	r24, 0x20	; 32
     c98:	b7 01       	movw	r22, r14
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     ca0:	0f 5f       	subi	r16, 0xFF	; 255
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <vfprintf+0x224>
     ca6:	80 e1       	ldi	r24, 0x10	; 16
     ca8:	58 22       	and	r5, r24
     caa:	f8 01       	movw	r30, r16
     cac:	84 91       	lpm	r24, Z
     cae:	81 11       	cpse	r24, r1
     cb0:	f1 cf       	rjmp	.-30     	; 0xc94 <vfprintf+0x20e>
     cb2:	71 c2       	rjmp	.+1250   	; 0x1196 <vfprintf+0x710>
     cb4:	57 fe       	sbrs	r5, 7
     cb6:	0e c0       	rjmp	.+28     	; 0xcd4 <vfprintf+0x24e>
     cb8:	40 0e       	add	r4, r16
     cba:	4c 85       	ldd	r20, Y+12	; 0x0c
     cbc:	44 ff       	sbrs	r20, 4
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <vfprintf+0x242>
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	81 33       	cpi	r24, 0x31	; 49
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <vfprintf+0x242>
     cc6:	4a 94       	dec	r4
     cc8:	14 14       	cp	r1, r4
     cca:	4c f5       	brge	.+82     	; 0xd1e <vfprintf+0x298>
     ccc:	58 e0       	ldi	r21, 0x08	; 8
     cce:	54 15       	cp	r21, r4
     cd0:	48 f1       	brcs	.+82     	; 0xd24 <vfprintf+0x29e>
     cd2:	2c c0       	rjmp	.+88     	; 0xd2c <vfprintf+0x2a6>
     cd4:	56 fc       	sbrc	r5, 6
     cd6:	2a c0       	rjmp	.+84     	; 0xd2c <vfprintf+0x2a6>
     cd8:	87 2d       	mov	r24, r7
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	80 17       	cp	r24, r16
     cde:	91 07       	cpc	r25, r17
     ce0:	44 f0       	brlt	.+16     	; 0xcf2 <vfprintf+0x26c>
     ce2:	0c 3f       	cpi	r16, 0xFC	; 252
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	18 07       	cpc	r17, r24
     ce8:	24 f0       	brlt	.+8      	; 0xcf2 <vfprintf+0x26c>
     cea:	90 e8       	ldi	r25, 0x80	; 128
     cec:	59 2a       	or	r5, r25
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <vfprintf+0x26c>
     cf0:	7a 94       	dec	r7
     cf2:	77 20       	and	r7, r7
     cf4:	49 f0       	breq	.+18     	; 0xd08 <vfprintf+0x282>
     cf6:	e2 e0       	ldi	r30, 0x02	; 2
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	ec 0f       	add	r30, r28
     cfc:	fd 1f       	adc	r31, r29
     cfe:	e7 0d       	add	r30, r7
     d00:	f1 1d       	adc	r31, r1
     d02:	80 81       	ld	r24, Z
     d04:	80 33       	cpi	r24, 0x30	; 48
     d06:	a1 f3       	breq	.-24     	; 0xcf0 <vfprintf+0x26a>
     d08:	57 fe       	sbrs	r5, 7
     d0a:	10 c0       	rjmp	.+32     	; 0xd2c <vfprintf+0x2a6>
     d0c:	47 2c       	mov	r4, r7
     d0e:	43 94       	inc	r4
     d10:	87 2d       	mov	r24, r7
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	08 17       	cp	r16, r24
     d16:	19 07       	cpc	r17, r25
     d18:	44 f4       	brge	.+16     	; 0xd2a <vfprintf+0x2a4>
     d1a:	70 1a       	sub	r7, r16
     d1c:	07 c0       	rjmp	.+14     	; 0xd2c <vfprintf+0x2a6>
     d1e:	44 24       	eor	r4, r4
     d20:	43 94       	inc	r4
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <vfprintf+0x2a6>
     d24:	58 e0       	ldi	r21, 0x08	; 8
     d26:	45 2e       	mov	r4, r21
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <vfprintf+0x2a6>
     d2a:	71 2c       	mov	r7, r1
     d2c:	57 fe       	sbrs	r5, 7
     d2e:	07 c0       	rjmp	.+14     	; 0xd3e <vfprintf+0x2b8>
     d30:	10 16       	cp	r1, r16
     d32:	11 06       	cpc	r1, r17
     d34:	3c f4       	brge	.+14     	; 0xd44 <vfprintf+0x2be>
     d36:	98 01       	movw	r18, r16
     d38:	2f 5f       	subi	r18, 0xFF	; 255
     d3a:	3f 4f       	sbci	r19, 0xFF	; 255
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <vfprintf+0x2c2>
     d3e:	25 e0       	ldi	r18, 0x05	; 5
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <vfprintf+0x2c2>
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	dd 20       	and	r13, r13
     d4a:	11 f0       	breq	.+4      	; 0xd50 <vfprintf+0x2ca>
     d4c:	2f 5f       	subi	r18, 0xFF	; 255
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	77 20       	and	r7, r7
     d52:	31 f0       	breq	.+12     	; 0xd60 <vfprintf+0x2da>
     d54:	47 2d       	mov	r20, r7
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	4f 5f       	subi	r20, 0xFF	; 255
     d5a:	5f 4f       	sbci	r21, 0xFF	; 255
     d5c:	24 0f       	add	r18, r20
     d5e:	35 1f       	adc	r19, r21
     d60:	46 2d       	mov	r20, r6
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	24 17       	cp	r18, r20
     d66:	35 07       	cpc	r19, r21
     d68:	14 f4       	brge	.+4      	; 0xd6e <vfprintf+0x2e8>
     d6a:	62 1a       	sub	r6, r18
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <vfprintf+0x2ea>
     d6e:	61 2c       	mov	r6, r1
     d70:	85 2d       	mov	r24, r5
     d72:	89 70       	andi	r24, 0x09	; 9
     d74:	49 f4       	brne	.+18     	; 0xd88 <vfprintf+0x302>
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <vfprintf+0x2fe>
     d78:	b7 01       	movw	r22, r14
     d7a:	80 e2       	ldi	r24, 0x20	; 32
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     d82:	6a 94       	dec	r6
     d84:	61 10       	cpse	r6, r1
     d86:	f8 cf       	rjmp	.-16     	; 0xd78 <vfprintf+0x2f2>
     d88:	dd 20       	and	r13, r13
     d8a:	29 f0       	breq	.+10     	; 0xd96 <vfprintf+0x310>
     d8c:	b7 01       	movw	r22, r14
     d8e:	8d 2d       	mov	r24, r13
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     d96:	53 fc       	sbrc	r5, 3
     d98:	09 c0       	rjmp	.+18     	; 0xdac <vfprintf+0x326>
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <vfprintf+0x322>
     d9c:	b7 01       	movw	r22, r14
     d9e:	80 e3       	ldi	r24, 0x30	; 48
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     da6:	6a 94       	dec	r6
     da8:	61 10       	cpse	r6, r1
     daa:	f8 cf       	rjmp	.-16     	; 0xd9c <vfprintf+0x316>
     dac:	57 fe       	sbrs	r5, 7
     dae:	56 c0       	rjmp	.+172    	; 0xe5c <vfprintf+0x3d6>
     db0:	68 01       	movw	r12, r16
     db2:	17 ff       	sbrs	r17, 7
     db4:	02 c0       	rjmp	.+4      	; 0xdba <vfprintf+0x334>
     db6:	c1 2c       	mov	r12, r1
     db8:	d1 2c       	mov	r13, r1
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	a8 01       	movw	r20, r16
     dc0:	44 19       	sub	r20, r4
     dc2:	51 09       	sbc	r21, r1
     dc4:	5e 87       	std	Y+14, r21	; 0x0e
     dc6:	4d 87       	std	Y+13, r20	; 0x0d
     dc8:	28 01       	movw	r4, r16
     dca:	4c 18       	sub	r4, r12
     dcc:	5d 08       	sbc	r5, r13
     dce:	48 0c       	add	r4, r8
     dd0:	59 1c       	adc	r5, r9
     dd2:	87 2d       	mov	r24, r7
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	44 27       	eor	r20, r20
     dd8:	55 27       	eor	r21, r21
     dda:	48 1b       	sub	r20, r24
     ddc:	59 0b       	sbc	r21, r25
     dde:	58 8b       	std	Y+16, r21	; 0x10
     de0:	4f 87       	std	Y+15, r20	; 0x0f
     de2:	5f ef       	ldi	r21, 0xFF	; 255
     de4:	c5 16       	cp	r12, r21
     de6:	d5 06       	cpc	r13, r21
     de8:	49 f4       	brne	.+18     	; 0xdfc <vfprintf+0x376>
     dea:	b7 01       	movw	r22, r14
     dec:	8e e2       	ldi	r24, 0x2E	; 46
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	2a 8b       	std	Y+18, r18	; 0x12
     df2:	39 8b       	std	Y+17, r19	; 0x11
     df4:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     df8:	39 89       	ldd	r19, Y+17	; 0x11
     dfa:	2a 89       	ldd	r18, Y+18	; 0x12
     dfc:	0c 15       	cp	r16, r12
     dfe:	1d 05       	cpc	r17, r13
     e00:	54 f0       	brlt	.+20     	; 0xe16 <vfprintf+0x390>
     e02:	4d 85       	ldd	r20, Y+13	; 0x0d
     e04:	5e 85       	ldd	r21, Y+14	; 0x0e
     e06:	4c 15       	cp	r20, r12
     e08:	5d 05       	cpc	r21, r13
     e0a:	2c f4       	brge	.+10     	; 0xe16 <vfprintf+0x390>
     e0c:	f2 01       	movw	r30, r4
     e0e:	e2 0f       	add	r30, r18
     e10:	f3 1f       	adc	r31, r19
     e12:	81 81       	ldd	r24, Z+1	; 0x01
     e14:	01 c0       	rjmp	.+2      	; 0xe18 <vfprintf+0x392>
     e16:	80 e3       	ldi	r24, 0x30	; 48
     e18:	51 e0       	ldi	r21, 0x01	; 1
     e1a:	c5 1a       	sub	r12, r21
     e1c:	d1 08       	sbc	r13, r1
     e1e:	2f 5f       	subi	r18, 0xFF	; 255
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	4f 85       	ldd	r20, Y+15	; 0x0f
     e24:	58 89       	ldd	r21, Y+16	; 0x10
     e26:	c4 16       	cp	r12, r20
     e28:	d5 06       	cpc	r13, r21
     e2a:	4c f0       	brlt	.+18     	; 0xe3e <vfprintf+0x3b8>
     e2c:	b7 01       	movw	r22, r14
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	2a 8b       	std	Y+18, r18	; 0x12
     e32:	39 8b       	std	Y+17, r19	; 0x11
     e34:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     e38:	2a 89       	ldd	r18, Y+18	; 0x12
     e3a:	39 89       	ldd	r19, Y+17	; 0x11
     e3c:	d2 cf       	rjmp	.-92     	; 0xde2 <vfprintf+0x35c>
     e3e:	c0 16       	cp	r12, r16
     e40:	d1 06       	cpc	r13, r17
     e42:	49 f4       	brne	.+18     	; 0xe56 <vfprintf+0x3d0>
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	96 33       	cpi	r25, 0x36	; 54
     e48:	28 f4       	brcc	.+10     	; 0xe54 <vfprintf+0x3ce>
     e4a:	95 33       	cpi	r25, 0x35	; 53
     e4c:	21 f4       	brne	.+8      	; 0xe56 <vfprintf+0x3d0>
     e4e:	5c 85       	ldd	r21, Y+12	; 0x0c
     e50:	54 fd       	sbrc	r21, 4
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <vfprintf+0x3d0>
     e54:	81 e3       	ldi	r24, 0x31	; 49
     e56:	b7 01       	movw	r22, r14
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	4a c0       	rjmp	.+148    	; 0xef0 <vfprintf+0x46a>
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	81 33       	cpi	r24, 0x31	; 49
     e60:	19 f0       	breq	.+6      	; 0xe68 <vfprintf+0x3e2>
     e62:	4c 85       	ldd	r20, Y+12	; 0x0c
     e64:	4f 7e       	andi	r20, 0xEF	; 239
     e66:	4c 87       	std	Y+12, r20	; 0x0c
     e68:	b7 01       	movw	r22, r14
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     e70:	71 10       	cpse	r7, r1
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <vfprintf+0x3f8>
     e74:	54 fe       	sbrs	r5, 4
     e76:	16 c0       	rjmp	.+44     	; 0xea4 <vfprintf+0x41e>
     e78:	85 e4       	ldi	r24, 0x45	; 69
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	15 c0       	rjmp	.+42     	; 0xea8 <vfprintf+0x422>
     e7e:	b7 01       	movw	r22, r14
     e80:	8e e2       	ldi	r24, 0x2E	; 46
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     e88:	42 e0       	ldi	r20, 0x02	; 2
     e8a:	d4 2e       	mov	r13, r20
     e8c:	f4 01       	movw	r30, r8
     e8e:	ed 0d       	add	r30, r13
     e90:	f1 1d       	adc	r31, r1
     e92:	d3 94       	inc	r13
     e94:	b7 01       	movw	r22, r14
     e96:	80 81       	ld	r24, Z
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     e9e:	7a 94       	dec	r7
     ea0:	a9 f7       	brne	.-22     	; 0xe8c <vfprintf+0x406>
     ea2:	e8 cf       	rjmp	.-48     	; 0xe74 <vfprintf+0x3ee>
     ea4:	85 e6       	ldi	r24, 0x65	; 101
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	b7 01       	movw	r22, r14
     eaa:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     eae:	17 fd       	sbrc	r17, 7
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <vfprintf+0x438>
     eb2:	01 15       	cp	r16, r1
     eb4:	11 05       	cpc	r17, r1
     eb6:	41 f4       	brne	.+16     	; 0xec8 <vfprintf+0x442>
     eb8:	5c 85       	ldd	r21, Y+12	; 0x0c
     eba:	54 ff       	sbrs	r21, 4
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <vfprintf+0x442>
     ebe:	11 95       	neg	r17
     ec0:	01 95       	neg	r16
     ec2:	11 09       	sbc	r17, r1
     ec4:	8d e2       	ldi	r24, 0x2D	; 45
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <vfprintf+0x444>
     ec8:	8b e2       	ldi	r24, 0x2B	; 43
     eca:	b7 01       	movw	r22, r14
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     ed2:	80 e3       	ldi	r24, 0x30	; 48
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <vfprintf+0x456>
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
     ed8:	0a 50       	subi	r16, 0x0A	; 10
     eda:	11 09       	sbc	r17, r1
     edc:	0a 30       	cpi	r16, 0x0A	; 10
     ede:	11 05       	cpc	r17, r1
     ee0:	d4 f7       	brge	.-12     	; 0xed6 <vfprintf+0x450>
     ee2:	b7 01       	movw	r22, r14
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     eea:	b7 01       	movw	r22, r14
     eec:	c8 01       	movw	r24, r16
     eee:	c0 96       	adiw	r24, 0x30	; 48
     ef0:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     ef4:	50 c1       	rjmp	.+672    	; 0x1196 <vfprintf+0x710>
     ef6:	83 36       	cpi	r24, 0x63	; 99
     ef8:	31 f0       	breq	.+12     	; 0xf06 <vfprintf+0x480>
     efa:	83 37       	cpi	r24, 0x73	; 115
     efc:	81 f0       	breq	.+32     	; 0xf1e <vfprintf+0x498>
     efe:	83 35       	cpi	r24, 0x53	; 83
     f00:	09 f0       	breq	.+2      	; 0xf04 <vfprintf+0x47e>
     f02:	5e c0       	rjmp	.+188    	; 0xfc0 <vfprintf+0x53a>
     f04:	24 c0       	rjmp	.+72     	; 0xf4e <vfprintf+0x4c8>
     f06:	56 01       	movw	r10, r12
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	a8 0e       	add	r10, r24
     f0c:	b1 1c       	adc	r11, r1
     f0e:	f6 01       	movw	r30, r12
     f10:	80 81       	ld	r24, Z
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	cc 24       	eor	r12, r12
     f16:	c3 94       	inc	r12
     f18:	d1 2c       	mov	r13, r1
     f1a:	84 01       	movw	r16, r8
     f1c:	14 c0       	rjmp	.+40     	; 0xf46 <vfprintf+0x4c0>
     f1e:	56 01       	movw	r10, r12
     f20:	f2 e0       	ldi	r31, 0x02	; 2
     f22:	af 0e       	add	r10, r31
     f24:	b1 1c       	adc	r11, r1
     f26:	f6 01       	movw	r30, r12
     f28:	00 81       	ld	r16, Z
     f2a:	11 81       	ldd	r17, Z+1	; 0x01
     f2c:	26 ff       	sbrs	r18, 6
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <vfprintf+0x4b0>
     f30:	67 2d       	mov	r22, r7
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x4b4>
     f36:	6f ef       	ldi	r22, 0xFF	; 255
     f38:	7f ef       	ldi	r23, 0xFF	; 255
     f3a:	c8 01       	movw	r24, r16
     f3c:	2a 8b       	std	Y+18, r18	; 0x12
     f3e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <strnlen>
     f42:	6c 01       	movw	r12, r24
     f44:	2a 89       	ldd	r18, Y+18	; 0x12
     f46:	9f e7       	ldi	r25, 0x7F	; 127
     f48:	59 2e       	mov	r5, r25
     f4a:	52 22       	and	r5, r18
     f4c:	17 c0       	rjmp	.+46     	; 0xf7c <vfprintf+0x4f6>
     f4e:	56 01       	movw	r10, r12
     f50:	f2 e0       	ldi	r31, 0x02	; 2
     f52:	af 0e       	add	r10, r31
     f54:	b1 1c       	adc	r11, r1
     f56:	f6 01       	movw	r30, r12
     f58:	00 81       	ld	r16, Z
     f5a:	11 81       	ldd	r17, Z+1	; 0x01
     f5c:	26 ff       	sbrs	r18, 6
     f5e:	03 c0       	rjmp	.+6      	; 0xf66 <vfprintf+0x4e0>
     f60:	67 2d       	mov	r22, r7
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <vfprintf+0x4e4>
     f66:	6f ef       	ldi	r22, 0xFF	; 255
     f68:	7f ef       	ldi	r23, 0xFF	; 255
     f6a:	c8 01       	movw	r24, r16
     f6c:	2a 8b       	std	Y+18, r18	; 0x12
     f6e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <strnlen_P>
     f72:	6c 01       	movw	r12, r24
     f74:	2a 89       	ldd	r18, Y+18	; 0x12
     f76:	80 e8       	ldi	r24, 0x80	; 128
     f78:	58 2e       	mov	r5, r24
     f7a:	52 2a       	or	r5, r18
     f7c:	53 fc       	sbrc	r5, 3
     f7e:	1c c0       	rjmp	.+56     	; 0xfb8 <vfprintf+0x532>
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <vfprintf+0x508>
     f82:	b7 01       	movw	r22, r14
     f84:	80 e2       	ldi	r24, 0x20	; 32
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     f8c:	6a 94       	dec	r6
     f8e:	86 2d       	mov	r24, r6
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	c8 16       	cp	r12, r24
     f94:	d9 06       	cpc	r13, r25
     f96:	a8 f3       	brcs	.-22     	; 0xf82 <vfprintf+0x4fc>
     f98:	0f c0       	rjmp	.+30     	; 0xfb8 <vfprintf+0x532>
     f9a:	f8 01       	movw	r30, r16
     f9c:	57 fc       	sbrc	r5, 7
     f9e:	85 91       	lpm	r24, Z+
     fa0:	57 fe       	sbrs	r5, 7
     fa2:	81 91       	ld	r24, Z+
     fa4:	8f 01       	movw	r16, r30
     fa6:	b7 01       	movw	r22, r14
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
     fae:	61 10       	cpse	r6, r1
     fb0:	6a 94       	dec	r6
     fb2:	f1 e0       	ldi	r31, 0x01	; 1
     fb4:	cf 1a       	sub	r12, r31
     fb6:	d1 08       	sbc	r13, r1
     fb8:	c1 14       	cp	r12, r1
     fba:	d1 04       	cpc	r13, r1
     fbc:	71 f7       	brne	.-36     	; 0xf9a <vfprintf+0x514>
     fbe:	eb c0       	rjmp	.+470    	; 0x1196 <vfprintf+0x710>
     fc0:	84 36       	cpi	r24, 0x64	; 100
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <vfprintf+0x542>
     fc4:	89 36       	cpi	r24, 0x69	; 105
     fc6:	51 f5       	brne	.+84     	; 0x101c <vfprintf+0x596>
     fc8:	56 01       	movw	r10, r12
     fca:	27 ff       	sbrs	r18, 7
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <vfprintf+0x55a>
     fce:	44 e0       	ldi	r20, 0x04	; 4
     fd0:	a4 0e       	add	r10, r20
     fd2:	b1 1c       	adc	r11, r1
     fd4:	f6 01       	movw	r30, r12
     fd6:	60 81       	ld	r22, Z
     fd8:	71 81       	ldd	r23, Z+1	; 0x01
     fda:	82 81       	ldd	r24, Z+2	; 0x02
     fdc:	93 81       	ldd	r25, Z+3	; 0x03
     fde:	0a c0       	rjmp	.+20     	; 0xff4 <vfprintf+0x56e>
     fe0:	f2 e0       	ldi	r31, 0x02	; 2
     fe2:	af 0e       	add	r10, r31
     fe4:	b1 1c       	adc	r11, r1
     fe6:	f6 01       	movw	r30, r12
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	88 27       	eor	r24, r24
     fee:	77 fd       	sbrc	r23, 7
     ff0:	80 95       	com	r24
     ff2:	98 2f       	mov	r25, r24
     ff4:	12 2f       	mov	r17, r18
     ff6:	1f 76       	andi	r17, 0x6F	; 111
     ff8:	97 ff       	sbrs	r25, 7
     ffa:	08 c0       	rjmp	.+16     	; 0x100c <vfprintf+0x586>
     ffc:	90 95       	com	r25
     ffe:	80 95       	com	r24
    1000:	70 95       	com	r23
    1002:	61 95       	neg	r22
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	8f 4f       	sbci	r24, 0xFF	; 255
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	10 68       	ori	r17, 0x80	; 128
    100c:	2a e0       	ldi	r18, 0x0A	; 10
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	a4 01       	movw	r20, r8
    1012:	0e 94 5f 0a 	call	0x14be	; 0x14be <__ultoa_invert>
    1016:	d8 2e       	mov	r13, r24
    1018:	d8 18       	sub	r13, r8
    101a:	40 c0       	rjmp	.+128    	; 0x109c <vfprintf+0x616>
    101c:	12 2f       	mov	r17, r18
    101e:	85 37       	cpi	r24, 0x75	; 117
    1020:	21 f4       	brne	.+8      	; 0x102a <vfprintf+0x5a4>
    1022:	1f 7e       	andi	r17, 0xEF	; 239
    1024:	2a e0       	ldi	r18, 0x0A	; 10
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	1f c0       	rjmp	.+62     	; 0x1068 <vfprintf+0x5e2>
    102a:	19 7f       	andi	r17, 0xF9	; 249
    102c:	8f 36       	cpi	r24, 0x6F	; 111
    102e:	a1 f0       	breq	.+40     	; 0x1058 <vfprintf+0x5d2>
    1030:	20 f4       	brcc	.+8      	; 0x103a <vfprintf+0x5b4>
    1032:	88 35       	cpi	r24, 0x58	; 88
    1034:	09 f0       	breq	.+2      	; 0x1038 <vfprintf+0x5b2>
    1036:	b2 c0       	rjmp	.+356    	; 0x119c <vfprintf+0x716>
    1038:	0b c0       	rjmp	.+22     	; 0x1050 <vfprintf+0x5ca>
    103a:	80 37       	cpi	r24, 0x70	; 112
    103c:	21 f0       	breq	.+8      	; 0x1046 <vfprintf+0x5c0>
    103e:	88 37       	cpi	r24, 0x78	; 120
    1040:	09 f0       	breq	.+2      	; 0x1044 <vfprintf+0x5be>
    1042:	ac c0       	rjmp	.+344    	; 0x119c <vfprintf+0x716>
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <vfprintf+0x5c2>
    1046:	10 61       	ori	r17, 0x10	; 16
    1048:	14 ff       	sbrs	r17, 4
    104a:	09 c0       	rjmp	.+18     	; 0x105e <vfprintf+0x5d8>
    104c:	14 60       	ori	r17, 0x04	; 4
    104e:	07 c0       	rjmp	.+14     	; 0x105e <vfprintf+0x5d8>
    1050:	24 ff       	sbrs	r18, 4
    1052:	08 c0       	rjmp	.+16     	; 0x1064 <vfprintf+0x5de>
    1054:	16 60       	ori	r17, 0x06	; 6
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <vfprintf+0x5de>
    1058:	28 e0       	ldi	r18, 0x08	; 8
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <vfprintf+0x5e2>
    105e:	20 e1       	ldi	r18, 0x10	; 16
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <vfprintf+0x5e2>
    1064:	20 e1       	ldi	r18, 0x10	; 16
    1066:	32 e0       	ldi	r19, 0x02	; 2
    1068:	56 01       	movw	r10, r12
    106a:	17 ff       	sbrs	r17, 7
    106c:	09 c0       	rjmp	.+18     	; 0x1080 <vfprintf+0x5fa>
    106e:	f4 e0       	ldi	r31, 0x04	; 4
    1070:	af 0e       	add	r10, r31
    1072:	b1 1c       	adc	r11, r1
    1074:	f6 01       	movw	r30, r12
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	08 c0       	rjmp	.+16     	; 0x1090 <vfprintf+0x60a>
    1080:	f2 e0       	ldi	r31, 0x02	; 2
    1082:	af 0e       	add	r10, r31
    1084:	b1 1c       	adc	r11, r1
    1086:	f6 01       	movw	r30, r12
    1088:	60 81       	ld	r22, Z
    108a:	71 81       	ldd	r23, Z+1	; 0x01
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a4 01       	movw	r20, r8
    1092:	0e 94 5f 0a 	call	0x14be	; 0x14be <__ultoa_invert>
    1096:	d8 2e       	mov	r13, r24
    1098:	d8 18       	sub	r13, r8
    109a:	1f 77       	andi	r17, 0x7F	; 127
    109c:	16 ff       	sbrs	r17, 6
    109e:	0b c0       	rjmp	.+22     	; 0x10b6 <vfprintf+0x630>
    10a0:	21 2f       	mov	r18, r17
    10a2:	2e 7f       	andi	r18, 0xFE	; 254
    10a4:	d7 14       	cp	r13, r7
    10a6:	50 f4       	brcc	.+20     	; 0x10bc <vfprintf+0x636>
    10a8:	14 ff       	sbrs	r17, 4
    10aa:	0a c0       	rjmp	.+20     	; 0x10c0 <vfprintf+0x63a>
    10ac:	12 fd       	sbrc	r17, 2
    10ae:	08 c0       	rjmp	.+16     	; 0x10c0 <vfprintf+0x63a>
    10b0:	21 2f       	mov	r18, r17
    10b2:	2e 7e       	andi	r18, 0xEE	; 238
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <vfprintf+0x63a>
    10b6:	0d 2d       	mov	r16, r13
    10b8:	21 2f       	mov	r18, r17
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <vfprintf+0x63c>
    10bc:	0d 2d       	mov	r16, r13
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <vfprintf+0x63c>
    10c0:	07 2d       	mov	r16, r7
    10c2:	24 ff       	sbrs	r18, 4
    10c4:	0c c0       	rjmp	.+24     	; 0x10de <vfprintf+0x658>
    10c6:	fe 01       	movw	r30, r28
    10c8:	ed 0d       	add	r30, r13
    10ca:	f1 1d       	adc	r31, r1
    10cc:	80 81       	ld	r24, Z
    10ce:	80 33       	cpi	r24, 0x30	; 48
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <vfprintf+0x650>
    10d2:	29 7e       	andi	r18, 0xE9	; 233
    10d4:	08 c0       	rjmp	.+16     	; 0x10e6 <vfprintf+0x660>
    10d6:	22 ff       	sbrs	r18, 2
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <vfprintf+0x65e>
    10da:	0e 5f       	subi	r16, 0xFE	; 254
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <vfprintf+0x660>
    10de:	82 2f       	mov	r24, r18
    10e0:	86 78       	andi	r24, 0x86	; 134
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <vfprintf+0x660>
    10e4:	0f 5f       	subi	r16, 0xFF	; 255
    10e6:	23 fd       	sbrc	r18, 3
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <vfprintf+0x68c>
    10ea:	20 ff       	sbrs	r18, 0
    10ec:	0f c0       	rjmp	.+30     	; 0x110c <vfprintf+0x686>
    10ee:	7d 2c       	mov	r7, r13
    10f0:	06 15       	cp	r16, r6
    10f2:	60 f4       	brcc	.+24     	; 0x110c <vfprintf+0x686>
    10f4:	76 0c       	add	r7, r6
    10f6:	70 1a       	sub	r7, r16
    10f8:	06 2d       	mov	r16, r6
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <vfprintf+0x686>
    10fc:	b7 01       	movw	r22, r14
    10fe:	80 e2       	ldi	r24, 0x20	; 32
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	2a 8b       	std	Y+18, r18	; 0x12
    1104:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
    1108:	0f 5f       	subi	r16, 0xFF	; 255
    110a:	2a 89       	ldd	r18, Y+18	; 0x12
    110c:	06 15       	cp	r16, r6
    110e:	b0 f3       	brcs	.-20     	; 0x10fc <vfprintf+0x676>
    1110:	04 c0       	rjmp	.+8      	; 0x111a <vfprintf+0x694>
    1112:	06 15       	cp	r16, r6
    1114:	10 f4       	brcc	.+4      	; 0x111a <vfprintf+0x694>
    1116:	60 1a       	sub	r6, r16
    1118:	01 c0       	rjmp	.+2      	; 0x111c <vfprintf+0x696>
    111a:	61 2c       	mov	r6, r1
    111c:	24 ff       	sbrs	r18, 4
    111e:	12 c0       	rjmp	.+36     	; 0x1144 <vfprintf+0x6be>
    1120:	b7 01       	movw	r22, r14
    1122:	80 e3       	ldi	r24, 0x30	; 48
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	2a 8b       	std	Y+18, r18	; 0x12
    1128:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
    112c:	2a 89       	ldd	r18, Y+18	; 0x12
    112e:	22 ff       	sbrs	r18, 2
    1130:	1e c0       	rjmp	.+60     	; 0x116e <vfprintf+0x6e8>
    1132:	21 ff       	sbrs	r18, 1
    1134:	03 c0       	rjmp	.+6      	; 0x113c <vfprintf+0x6b6>
    1136:	88 e5       	ldi	r24, 0x58	; 88
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <vfprintf+0x6ba>
    113c:	88 e7       	ldi	r24, 0x78	; 120
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	b7 01       	movw	r22, r14
    1142:	0c c0       	rjmp	.+24     	; 0x115c <vfprintf+0x6d6>
    1144:	82 2f       	mov	r24, r18
    1146:	86 78       	andi	r24, 0x86	; 134
    1148:	91 f0       	breq	.+36     	; 0x116e <vfprintf+0x6e8>
    114a:	21 fd       	sbrc	r18, 1
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <vfprintf+0x6cc>
    114e:	80 e2       	ldi	r24, 0x20	; 32
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <vfprintf+0x6ce>
    1152:	8b e2       	ldi	r24, 0x2B	; 43
    1154:	27 fd       	sbrc	r18, 7
    1156:	8d e2       	ldi	r24, 0x2D	; 45
    1158:	b7 01       	movw	r22, r14
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
    1160:	06 c0       	rjmp	.+12     	; 0x116e <vfprintf+0x6e8>
    1162:	b7 01       	movw	r22, r14
    1164:	80 e3       	ldi	r24, 0x30	; 48
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
    116c:	7a 94       	dec	r7
    116e:	d7 14       	cp	r13, r7
    1170:	c0 f3       	brcs	.-16     	; 0x1162 <vfprintf+0x6dc>
    1172:	da 94       	dec	r13
    1174:	f4 01       	movw	r30, r8
    1176:	ed 0d       	add	r30, r13
    1178:	f1 1d       	adc	r31, r1
    117a:	b7 01       	movw	r22, r14
    117c:	80 81       	ld	r24, Z
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
    1184:	d1 10       	cpse	r13, r1
    1186:	f5 cf       	rjmp	.-22     	; 0x1172 <vfprintf+0x6ec>
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <vfprintf+0x710>
    118a:	b7 01       	movw	r22, r14
    118c:	80 e2       	ldi	r24, 0x20	; 32
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 04 0a 	call	0x1408	; 0x1408 <fputc>
    1194:	6a 94       	dec	r6
    1196:	61 10       	cpse	r6, r1
    1198:	f8 cf       	rjmp	.-16     	; 0x118a <vfprintf+0x704>
    119a:	99 cc       	rjmp	.-1742   	; 0xace <vfprintf+0x48>
    119c:	f7 01       	movw	r30, r14
    119e:	26 81       	ldd	r18, Z+6	; 0x06
    11a0:	37 81       	ldd	r19, Z+7	; 0x07
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <vfprintf+0x722>
    11a4:	2f ef       	ldi	r18, 0xFF	; 255
    11a6:	3f ef       	ldi	r19, 0xFF	; 255
    11a8:	c9 01       	movw	r24, r18
    11aa:	62 96       	adiw	r28, 0x12	; 18
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	cf 90       	pop	r12
    11c6:	bf 90       	pop	r11
    11c8:	af 90       	pop	r10
    11ca:	9f 90       	pop	r9
    11cc:	8f 90       	pop	r8
    11ce:	7f 90       	pop	r7
    11d0:	6f 90       	pop	r6
    11d2:	5f 90       	pop	r5
    11d4:	4f 90       	pop	r4
    11d6:	3f 90       	pop	r3
    11d8:	2f 90       	pop	r2
    11da:	08 95       	ret

000011dc <__udivmodhi4>:
    11dc:	aa 1b       	sub	r26, r26
    11de:	bb 1b       	sub	r27, r27
    11e0:	51 e1       	ldi	r21, 0x11	; 17
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <__udivmodhi4_ep>

000011e4 <__udivmodhi4_loop>:
    11e4:	aa 1f       	adc	r26, r26
    11e6:	bb 1f       	adc	r27, r27
    11e8:	a6 17       	cp	r26, r22
    11ea:	b7 07       	cpc	r27, r23
    11ec:	10 f0       	brcs	.+4      	; 0x11f2 <__udivmodhi4_ep>
    11ee:	a6 1b       	sub	r26, r22
    11f0:	b7 0b       	sbc	r27, r23

000011f2 <__udivmodhi4_ep>:
    11f2:	88 1f       	adc	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	5a 95       	dec	r21
    11f8:	a9 f7       	brne	.-22     	; 0x11e4 <__udivmodhi4_loop>
    11fa:	80 95       	com	r24
    11fc:	90 95       	com	r25
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	08 95       	ret

00001204 <__divmodhi4>:
    1204:	97 fb       	bst	r25, 7
    1206:	07 2e       	mov	r0, r23
    1208:	16 f4       	brtc	.+4      	; 0x120e <__divmodhi4+0xa>
    120a:	00 94       	com	r0
    120c:	07 d0       	rcall	.+14     	; 0x121c <__divmodhi4_neg1>
    120e:	77 fd       	sbrc	r23, 7
    1210:	09 d0       	rcall	.+18     	; 0x1224 <__divmodhi4_neg2>
    1212:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__udivmodhi4>
    1216:	07 fc       	sbrc	r0, 7
    1218:	05 d0       	rcall	.+10     	; 0x1224 <__divmodhi4_neg2>
    121a:	3e f4       	brtc	.+14     	; 0x122a <__divmodhi4_exit>

0000121c <__divmodhi4_neg1>:
    121c:	90 95       	com	r25
    121e:	81 95       	neg	r24
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	08 95       	ret

00001224 <__divmodhi4_neg2>:
    1224:	70 95       	com	r23
    1226:	61 95       	neg	r22
    1228:	7f 4f       	sbci	r23, 0xFF	; 255

0000122a <__divmodhi4_exit>:
    122a:	08 95       	ret

0000122c <__ftoa_engine>:
    122c:	28 30       	cpi	r18, 0x08	; 8
    122e:	08 f0       	brcs	.+2      	; 0x1232 <__ftoa_engine+0x6>
    1230:	27 e0       	ldi	r18, 0x07	; 7
    1232:	33 27       	eor	r19, r19
    1234:	da 01       	movw	r26, r20
    1236:	99 0f       	add	r25, r25
    1238:	31 1d       	adc	r19, r1
    123a:	87 fd       	sbrc	r24, 7
    123c:	91 60       	ori	r25, 0x01	; 1
    123e:	00 96       	adiw	r24, 0x00	; 0
    1240:	61 05       	cpc	r22, r1
    1242:	71 05       	cpc	r23, r1
    1244:	39 f4       	brne	.+14     	; 0x1254 <__ftoa_engine+0x28>
    1246:	32 60       	ori	r19, 0x02	; 2
    1248:	2e 5f       	subi	r18, 0xFE	; 254
    124a:	3d 93       	st	X+, r19
    124c:	30 e3       	ldi	r19, 0x30	; 48
    124e:	2a 95       	dec	r18
    1250:	e1 f7       	brne	.-8      	; 0x124a <__ftoa_engine+0x1e>
    1252:	08 95       	ret
    1254:	9f 3f       	cpi	r25, 0xFF	; 255
    1256:	30 f0       	brcs	.+12     	; 0x1264 <__ftoa_engine+0x38>
    1258:	80 38       	cpi	r24, 0x80	; 128
    125a:	71 05       	cpc	r23, r1
    125c:	61 05       	cpc	r22, r1
    125e:	09 f0       	breq	.+2      	; 0x1262 <__ftoa_engine+0x36>
    1260:	3c 5f       	subi	r19, 0xFC	; 252
    1262:	3c 5f       	subi	r19, 0xFC	; 252
    1264:	3d 93       	st	X+, r19
    1266:	91 30       	cpi	r25, 0x01	; 1
    1268:	08 f0       	brcs	.+2      	; 0x126c <__ftoa_engine+0x40>
    126a:	80 68       	ori	r24, 0x80	; 128
    126c:	91 1d       	adc	r25, r1
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	1f 93       	push	r17
    1274:	0f 93       	push	r16
    1276:	ff 92       	push	r15
    1278:	ef 92       	push	r14
    127a:	19 2f       	mov	r17, r25
    127c:	98 7f       	andi	r25, 0xF8	; 248
    127e:	96 95       	lsr	r25
    1280:	e9 2f       	mov	r30, r25
    1282:	96 95       	lsr	r25
    1284:	96 95       	lsr	r25
    1286:	e9 0f       	add	r30, r25
    1288:	ff 27       	eor	r31, r31
    128a:	e3 5b       	subi	r30, 0xB3	; 179
    128c:	fe 4f       	sbci	r31, 0xFE	; 254
    128e:	99 27       	eor	r25, r25
    1290:	33 27       	eor	r19, r19
    1292:	ee 24       	eor	r14, r14
    1294:	ff 24       	eor	r15, r15
    1296:	a7 01       	movw	r20, r14
    1298:	e7 01       	movw	r28, r14
    129a:	05 90       	lpm	r0, Z+
    129c:	08 94       	sec
    129e:	07 94       	ror	r0
    12a0:	28 f4       	brcc	.+10     	; 0x12ac <__ftoa_engine+0x80>
    12a2:	36 0f       	add	r19, r22
    12a4:	e7 1e       	adc	r14, r23
    12a6:	f8 1e       	adc	r15, r24
    12a8:	49 1f       	adc	r20, r25
    12aa:	51 1d       	adc	r21, r1
    12ac:	66 0f       	add	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	88 1f       	adc	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	06 94       	lsr	r0
    12b6:	a1 f7       	brne	.-24     	; 0x12a0 <__ftoa_engine+0x74>
    12b8:	05 90       	lpm	r0, Z+
    12ba:	07 94       	ror	r0
    12bc:	28 f4       	brcc	.+10     	; 0x12c8 <__ftoa_engine+0x9c>
    12be:	e7 0e       	add	r14, r23
    12c0:	f8 1e       	adc	r15, r24
    12c2:	49 1f       	adc	r20, r25
    12c4:	56 1f       	adc	r21, r22
    12c6:	c1 1d       	adc	r28, r1
    12c8:	77 0f       	add	r23, r23
    12ca:	88 1f       	adc	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	66 1f       	adc	r22, r22
    12d0:	06 94       	lsr	r0
    12d2:	a1 f7       	brne	.-24     	; 0x12bc <__ftoa_engine+0x90>
    12d4:	05 90       	lpm	r0, Z+
    12d6:	07 94       	ror	r0
    12d8:	28 f4       	brcc	.+10     	; 0x12e4 <__ftoa_engine+0xb8>
    12da:	f8 0e       	add	r15, r24
    12dc:	49 1f       	adc	r20, r25
    12de:	56 1f       	adc	r21, r22
    12e0:	c7 1f       	adc	r28, r23
    12e2:	d1 1d       	adc	r29, r1
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	66 1f       	adc	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	06 94       	lsr	r0
    12ee:	a1 f7       	brne	.-24     	; 0x12d8 <__ftoa_engine+0xac>
    12f0:	05 90       	lpm	r0, Z+
    12f2:	07 94       	ror	r0
    12f4:	20 f4       	brcc	.+8      	; 0x12fe <__ftoa_engine+0xd2>
    12f6:	49 0f       	add	r20, r25
    12f8:	56 1f       	adc	r21, r22
    12fa:	c7 1f       	adc	r28, r23
    12fc:	d8 1f       	adc	r29, r24
    12fe:	99 0f       	add	r25, r25
    1300:	66 1f       	adc	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	88 1f       	adc	r24, r24
    1306:	06 94       	lsr	r0
    1308:	a9 f7       	brne	.-22     	; 0x12f4 <__ftoa_engine+0xc8>
    130a:	84 91       	lpm	r24, Z
    130c:	10 95       	com	r17
    130e:	17 70       	andi	r17, 0x07	; 7
    1310:	41 f0       	breq	.+16     	; 0x1322 <__ftoa_engine+0xf6>
    1312:	d6 95       	lsr	r29
    1314:	c7 95       	ror	r28
    1316:	57 95       	ror	r21
    1318:	47 95       	ror	r20
    131a:	f7 94       	ror	r15
    131c:	e7 94       	ror	r14
    131e:	1a 95       	dec	r17
    1320:	c1 f7       	brne	.-16     	; 0x1312 <__ftoa_engine+0xe6>
    1322:	e3 ef       	ldi	r30, 0xF3	; 243
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	68 94       	set
    1328:	15 90       	lpm	r1, Z+
    132a:	15 91       	lpm	r17, Z+
    132c:	35 91       	lpm	r19, Z+
    132e:	65 91       	lpm	r22, Z+
    1330:	95 91       	lpm	r25, Z+
    1332:	05 90       	lpm	r0, Z+
    1334:	7f e2       	ldi	r23, 0x2F	; 47
    1336:	73 95       	inc	r23
    1338:	e1 18       	sub	r14, r1
    133a:	f1 0a       	sbc	r15, r17
    133c:	43 0b       	sbc	r20, r19
    133e:	56 0b       	sbc	r21, r22
    1340:	c9 0b       	sbc	r28, r25
    1342:	d0 09       	sbc	r29, r0
    1344:	c0 f7       	brcc	.-16     	; 0x1336 <__ftoa_engine+0x10a>
    1346:	e1 0c       	add	r14, r1
    1348:	f1 1e       	adc	r15, r17
    134a:	43 1f       	adc	r20, r19
    134c:	56 1f       	adc	r21, r22
    134e:	c9 1f       	adc	r28, r25
    1350:	d0 1d       	adc	r29, r0
    1352:	7e f4       	brtc	.+30     	; 0x1372 <__ftoa_engine+0x146>
    1354:	70 33       	cpi	r23, 0x30	; 48
    1356:	11 f4       	brne	.+4      	; 0x135c <__ftoa_engine+0x130>
    1358:	8a 95       	dec	r24
    135a:	e6 cf       	rjmp	.-52     	; 0x1328 <__ftoa_engine+0xfc>
    135c:	e8 94       	clt
    135e:	01 50       	subi	r16, 0x01	; 1
    1360:	30 f0       	brcs	.+12     	; 0x136e <__ftoa_engine+0x142>
    1362:	08 0f       	add	r16, r24
    1364:	0a f4       	brpl	.+2      	; 0x1368 <__ftoa_engine+0x13c>
    1366:	00 27       	eor	r16, r16
    1368:	02 17       	cp	r16, r18
    136a:	08 f4       	brcc	.+2      	; 0x136e <__ftoa_engine+0x142>
    136c:	20 2f       	mov	r18, r16
    136e:	23 95       	inc	r18
    1370:	02 2f       	mov	r16, r18
    1372:	7a 33       	cpi	r23, 0x3A	; 58
    1374:	28 f0       	brcs	.+10     	; 0x1380 <__ftoa_engine+0x154>
    1376:	79 e3       	ldi	r23, 0x39	; 57
    1378:	7d 93       	st	X+, r23
    137a:	2a 95       	dec	r18
    137c:	e9 f7       	brne	.-6      	; 0x1378 <__ftoa_engine+0x14c>
    137e:	10 c0       	rjmp	.+32     	; 0x13a0 <__ftoa_engine+0x174>
    1380:	7d 93       	st	X+, r23
    1382:	2a 95       	dec	r18
    1384:	89 f6       	brne	.-94     	; 0x1328 <__ftoa_engine+0xfc>
    1386:	06 94       	lsr	r0
    1388:	97 95       	ror	r25
    138a:	67 95       	ror	r22
    138c:	37 95       	ror	r19
    138e:	17 95       	ror	r17
    1390:	17 94       	ror	r1
    1392:	e1 18       	sub	r14, r1
    1394:	f1 0a       	sbc	r15, r17
    1396:	43 0b       	sbc	r20, r19
    1398:	56 0b       	sbc	r21, r22
    139a:	c9 0b       	sbc	r28, r25
    139c:	d0 09       	sbc	r29, r0
    139e:	98 f0       	brcs	.+38     	; 0x13c6 <__ftoa_engine+0x19a>
    13a0:	23 95       	inc	r18
    13a2:	7e 91       	ld	r23, -X
    13a4:	73 95       	inc	r23
    13a6:	7a 33       	cpi	r23, 0x3A	; 58
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <__ftoa_engine+0x180>
    13aa:	70 e3       	ldi	r23, 0x30	; 48
    13ac:	7c 93       	st	X, r23
    13ae:	20 13       	cpse	r18, r16
    13b0:	b8 f7       	brcc	.-18     	; 0x13a0 <__ftoa_engine+0x174>
    13b2:	7e 91       	ld	r23, -X
    13b4:	70 61       	ori	r23, 0x10	; 16
    13b6:	7d 93       	st	X+, r23
    13b8:	30 f0       	brcs	.+12     	; 0x13c6 <__ftoa_engine+0x19a>
    13ba:	83 95       	inc	r24
    13bc:	71 e3       	ldi	r23, 0x31	; 49
    13be:	7d 93       	st	X+, r23
    13c0:	70 e3       	ldi	r23, 0x30	; 48
    13c2:	2a 95       	dec	r18
    13c4:	e1 f7       	brne	.-8      	; 0x13be <__ftoa_engine+0x192>
    13c6:	11 24       	eor	r1, r1
    13c8:	ef 90       	pop	r14
    13ca:	ff 90       	pop	r15
    13cc:	0f 91       	pop	r16
    13ce:	1f 91       	pop	r17
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	99 27       	eor	r25, r25
    13d6:	87 fd       	sbrc	r24, 7
    13d8:	90 95       	com	r25
    13da:	08 95       	ret

000013dc <strnlen_P>:
    13dc:	fc 01       	movw	r30, r24
    13de:	05 90       	lpm	r0, Z+
    13e0:	61 50       	subi	r22, 0x01	; 1
    13e2:	70 40       	sbci	r23, 0x00	; 0
    13e4:	01 10       	cpse	r0, r1
    13e6:	d8 f7       	brcc	.-10     	; 0x13de <strnlen_P+0x2>
    13e8:	80 95       	com	r24
    13ea:	90 95       	com	r25
    13ec:	8e 0f       	add	r24, r30
    13ee:	9f 1f       	adc	r25, r31
    13f0:	08 95       	ret

000013f2 <strnlen>:
    13f2:	fc 01       	movw	r30, r24
    13f4:	61 50       	subi	r22, 0x01	; 1
    13f6:	70 40       	sbci	r23, 0x00	; 0
    13f8:	01 90       	ld	r0, Z+
    13fa:	01 10       	cpse	r0, r1
    13fc:	d8 f7       	brcc	.-10     	; 0x13f4 <strnlen+0x2>
    13fe:	80 95       	com	r24
    1400:	90 95       	com	r25
    1402:	8e 0f       	add	r24, r30
    1404:	9f 1f       	adc	r25, r31
    1406:	08 95       	ret

00001408 <fputc>:
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	8c 01       	movw	r16, r24
    1412:	eb 01       	movw	r28, r22
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	81 fd       	sbrc	r24, 1
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <fputc+0x18>
    141a:	0f ef       	ldi	r16, 0xFF	; 255
    141c:	1f ef       	ldi	r17, 0xFF	; 255
    141e:	1a c0       	rjmp	.+52     	; 0x1454 <fputc+0x4c>
    1420:	82 ff       	sbrs	r24, 2
    1422:	0d c0       	rjmp	.+26     	; 0x143e <fputc+0x36>
    1424:	2e 81       	ldd	r18, Y+6	; 0x06
    1426:	3f 81       	ldd	r19, Y+7	; 0x07
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	9d 81       	ldd	r25, Y+5	; 0x05
    142c:	28 17       	cp	r18, r24
    142e:	39 07       	cpc	r19, r25
    1430:	64 f4       	brge	.+24     	; 0x144a <fputc+0x42>
    1432:	e8 81       	ld	r30, Y
    1434:	f9 81       	ldd	r31, Y+1	; 0x01
    1436:	01 93       	st	Z+, r16
    1438:	f9 83       	std	Y+1, r31	; 0x01
    143a:	e8 83       	st	Y, r30
    143c:	06 c0       	rjmp	.+12     	; 0x144a <fputc+0x42>
    143e:	e8 85       	ldd	r30, Y+8	; 0x08
    1440:	f9 85       	ldd	r31, Y+9	; 0x09
    1442:	80 2f       	mov	r24, r16
    1444:	09 95       	icall
    1446:	89 2b       	or	r24, r25
    1448:	41 f7       	brne	.-48     	; 0x141a <fputc+0x12>
    144a:	8e 81       	ldd	r24, Y+6	; 0x06
    144c:	9f 81       	ldd	r25, Y+7	; 0x07
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	9f 83       	std	Y+7, r25	; 0x07
    1452:	8e 83       	std	Y+6, r24	; 0x06
    1454:	c8 01       	movw	r24, r16
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	08 95       	ret

00001460 <sprintf>:
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	2e 97       	sbiw	r28, 0x0e	; 14
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	0d 89       	ldd	r16, Y+21	; 0x15
    147a:	1e 89       	ldd	r17, Y+22	; 0x16
    147c:	86 e0       	ldi	r24, 0x06	; 6
    147e:	8c 83       	std	Y+4, r24	; 0x04
    1480:	1a 83       	std	Y+2, r17	; 0x02
    1482:	09 83       	std	Y+1, r16	; 0x01
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	9f e7       	ldi	r25, 0x7F	; 127
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	ce 01       	movw	r24, r28
    148e:	49 96       	adiw	r24, 0x19	; 25
    1490:	ac 01       	movw	r20, r24
    1492:	6f 89       	ldd	r22, Y+23	; 0x17
    1494:	78 8d       	ldd	r23, Y+24	; 0x18
    1496:	ce 01       	movw	r24, r28
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	0e 94 43 05 	call	0xa86	; 0xa86 <vfprintf>
    149e:	ef 81       	ldd	r30, Y+7	; 0x07
    14a0:	f8 85       	ldd	r31, Y+8	; 0x08
    14a2:	e0 0f       	add	r30, r16
    14a4:	f1 1f       	adc	r31, r17
    14a6:	10 82       	st	Z, r1
    14a8:	2e 96       	adiw	r28, 0x0e	; 14
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	08 95       	ret

000014be <__ultoa_invert>:
    14be:	fa 01       	movw	r30, r20
    14c0:	aa 27       	eor	r26, r26
    14c2:	28 30       	cpi	r18, 0x08	; 8
    14c4:	51 f1       	breq	.+84     	; 0x151a <__ultoa_invert+0x5c>
    14c6:	20 31       	cpi	r18, 0x10	; 16
    14c8:	81 f1       	breq	.+96     	; 0x152a <__ultoa_invert+0x6c>
    14ca:	e8 94       	clt
    14cc:	6f 93       	push	r22
    14ce:	6e 7f       	andi	r22, 0xFE	; 254
    14d0:	6e 5f       	subi	r22, 0xFE	; 254
    14d2:	7f 4f       	sbci	r23, 0xFF	; 255
    14d4:	8f 4f       	sbci	r24, 0xFF	; 255
    14d6:	9f 4f       	sbci	r25, 0xFF	; 255
    14d8:	af 4f       	sbci	r26, 0xFF	; 255
    14da:	b1 e0       	ldi	r27, 0x01	; 1
    14dc:	3e d0       	rcall	.+124    	; 0x155a <__ultoa_invert+0x9c>
    14de:	b4 e0       	ldi	r27, 0x04	; 4
    14e0:	3c d0       	rcall	.+120    	; 0x155a <__ultoa_invert+0x9c>
    14e2:	67 0f       	add	r22, r23
    14e4:	78 1f       	adc	r23, r24
    14e6:	89 1f       	adc	r24, r25
    14e8:	9a 1f       	adc	r25, r26
    14ea:	a1 1d       	adc	r26, r1
    14ec:	68 0f       	add	r22, r24
    14ee:	79 1f       	adc	r23, r25
    14f0:	8a 1f       	adc	r24, r26
    14f2:	91 1d       	adc	r25, r1
    14f4:	a1 1d       	adc	r26, r1
    14f6:	6a 0f       	add	r22, r26
    14f8:	71 1d       	adc	r23, r1
    14fa:	81 1d       	adc	r24, r1
    14fc:	91 1d       	adc	r25, r1
    14fe:	a1 1d       	adc	r26, r1
    1500:	20 d0       	rcall	.+64     	; 0x1542 <__ultoa_invert+0x84>
    1502:	09 f4       	brne	.+2      	; 0x1506 <__ultoa_invert+0x48>
    1504:	68 94       	set
    1506:	3f 91       	pop	r19
    1508:	2a e0       	ldi	r18, 0x0A	; 10
    150a:	26 9f       	mul	r18, r22
    150c:	11 24       	eor	r1, r1
    150e:	30 19       	sub	r19, r0
    1510:	30 5d       	subi	r19, 0xD0	; 208
    1512:	31 93       	st	Z+, r19
    1514:	de f6       	brtc	.-74     	; 0x14cc <__ultoa_invert+0xe>
    1516:	cf 01       	movw	r24, r30
    1518:	08 95       	ret
    151a:	46 2f       	mov	r20, r22
    151c:	47 70       	andi	r20, 0x07	; 7
    151e:	40 5d       	subi	r20, 0xD0	; 208
    1520:	41 93       	st	Z+, r20
    1522:	b3 e0       	ldi	r27, 0x03	; 3
    1524:	0f d0       	rcall	.+30     	; 0x1544 <__ultoa_invert+0x86>
    1526:	c9 f7       	brne	.-14     	; 0x151a <__ultoa_invert+0x5c>
    1528:	f6 cf       	rjmp	.-20     	; 0x1516 <__ultoa_invert+0x58>
    152a:	46 2f       	mov	r20, r22
    152c:	4f 70       	andi	r20, 0x0F	; 15
    152e:	40 5d       	subi	r20, 0xD0	; 208
    1530:	4a 33       	cpi	r20, 0x3A	; 58
    1532:	18 f0       	brcs	.+6      	; 0x153a <__ultoa_invert+0x7c>
    1534:	49 5d       	subi	r20, 0xD9	; 217
    1536:	31 fd       	sbrc	r19, 1
    1538:	40 52       	subi	r20, 0x20	; 32
    153a:	41 93       	st	Z+, r20
    153c:	02 d0       	rcall	.+4      	; 0x1542 <__ultoa_invert+0x84>
    153e:	a9 f7       	brne	.-22     	; 0x152a <__ultoa_invert+0x6c>
    1540:	ea cf       	rjmp	.-44     	; 0x1516 <__ultoa_invert+0x58>
    1542:	b4 e0       	ldi	r27, 0x04	; 4
    1544:	a6 95       	lsr	r26
    1546:	97 95       	ror	r25
    1548:	87 95       	ror	r24
    154a:	77 95       	ror	r23
    154c:	67 95       	ror	r22
    154e:	ba 95       	dec	r27
    1550:	c9 f7       	brne	.-14     	; 0x1544 <__ultoa_invert+0x86>
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	61 05       	cpc	r22, r1
    1556:	71 05       	cpc	r23, r1
    1558:	08 95       	ret
    155a:	9b 01       	movw	r18, r22
    155c:	ac 01       	movw	r20, r24
    155e:	0a 2e       	mov	r0, r26
    1560:	06 94       	lsr	r0
    1562:	57 95       	ror	r21
    1564:	47 95       	ror	r20
    1566:	37 95       	ror	r19
    1568:	27 95       	ror	r18
    156a:	ba 95       	dec	r27
    156c:	c9 f7       	brne	.-14     	; 0x1560 <__ultoa_invert+0xa2>
    156e:	62 0f       	add	r22, r18
    1570:	73 1f       	adc	r23, r19
    1572:	84 1f       	adc	r24, r20
    1574:	95 1f       	adc	r25, r21
    1576:	a0 1d       	adc	r26, r0
    1578:	08 95       	ret

0000157a <_exit>:
    157a:	f8 94       	cli

0000157c <__stop_program>:
    157c:	ff cf       	rjmp	.-2      	; 0x157c <__stop_program>
