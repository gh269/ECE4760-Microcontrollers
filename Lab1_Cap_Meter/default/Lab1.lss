
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000167e  00001712  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000167e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080010a  0080010a  0000171c  2**0
                  ALLOC
  3 .stab         0000297c  00000000  00000000  0000171c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007e8  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004880  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  000048af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a9e  00000000  00000000  00004957  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000815  00000000  00000000  000063f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b97  00000000  00000000  00006c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000046c  00000000  00000000  000077a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005a5  00000000  00000000  00007c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001496  00000000  00000000  000081b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  0000964b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_12>
      34:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_13>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_16>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

0000008c <LCD_number>:
      8c:	43 61 70 61 63 69 74 61 6e 63 65 3d 00 00           Capacitance=..

0000009a <LCD_initialize>:
      9a:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000ab <LcdCustomChar>:
      ab:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      bb:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      cb:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      db:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000eb <__c.2006>:
      eb:	6e 61 6e 00                                         nan.

000000ef <__c.2004>:
      ef:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ff:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10f:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1af:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1bf:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1cf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1df:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e4       	ldi	r29, 0x40	; 64
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	ee e7       	ldi	r30, 0x7E	; 126
     202:	f6 e1       	ldi	r31, 0x16	; 22
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	aa 30       	cpi	r26, 0x0A	; 10
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	aa e0       	ldi	r26, 0x0A	; 10
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a1 33       	cpi	r26, 0x31	; 49
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <main>
     228:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <init_cap_measurement_analog_timer>:

//configures Analog Comparator and Timer1
//set it to full speed 
//clear TCNT1
void init_cap_measurement_analog_timer(){
	TCCR1B = 0;
     230:	e1 e8       	ldi	r30, 0x81	; 129
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	10 82       	st	Z, r1
	//full speed [ 16 MHz], capture on positive edge
	TCCR1B |= INPUT_CAPTURE_EDGE_SELECT + T0B_CS00;
     236:	80 81       	ld	r24, Z
     238:	81 64       	ori	r24, 0x41	; 65
     23a:	80 83       	st	Z, r24
	//turn on timer 1 interrupt-on-capture
	TIMSK1 = 0;
     23c:	ef e6       	ldi	r30, 0x6F	; 111
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	10 82       	st	Z, r1
	TIMSK1 |= INTERRUPT_ON_CAPTURE;
     242:	80 81       	ld	r24, Z
     244:	80 62       	ori	r24, 0x20	; 32
     246:	80 83       	st	Z, r24

	//set analog comp to connect to timer capture input
	//with positive input reference voltage
	ACSR = 0;
     248:	10 be       	out	0x30, r1	; 48
	ACSR |= ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     24a:	80 b7       	in	r24, 0x30	; 48
     24c:	84 60       	ori	r24, 0x04	; 4
     24e:	80 bf       	out	0x30, r24	; 48
	ACSR &= ~ANALOG_COMPARATOR_BANDGAP_SELECT;
     250:	80 b7       	in	r24, 0x30	; 48
     252:	8f 7b       	andi	r24, 0xBF	; 191
     254:	80 bf       	out	0x30, r24	; 48
	//set all ports to input
	DDRB = 0;
     256:	14 b8       	out	0x04, r1	; 4
	DDRB &= ~(COMPARATOR_INPUT + COMPARATOR_REFERENCE);
     258:	84 b1       	in	r24, 0x04	; 4
     25a:	83 7f       	andi	r24, 0xF3	; 243
     25c:	84 b9       	out	0x04, r24	; 4
     25e:	08 95       	ret

00000260 <init_cap_discharge_wait_timer>:

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     260:	22 e0       	ldi	r18, 0x02	; 2
     262:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     266:	84 eb       	ldi	r24, 0xB4	; 180
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	90 93 89 00 	sts	0x0089, r25
     26e:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     272:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     276:	e0 e8       	ldi	r30, 0x80	; 128
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	10 82       	st	Z, r1
	TCCR1A |= CLEAR_ON_MATCH;
     27c:	80 81       	ld	r24, Z
     27e:	82 60       	ori	r24, 0x02	; 2
     280:	80 83       	st	Z, r24
     282:	08 95       	ret

00000284 <init_cap_measurements>:
	Convert PortB2 to an input and start a timer. The capacitor will start to charge toward Vcc.
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
	DDRB = 0;
     284:	14 b8       	out	0x04, r1	; 4
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     286:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     288:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     28a:	2a 98       	cbi	0x05, 2	; 5
	//use Timer1.A to perform this delay and signal when we can continue measurements
	init_cap_discharge_wait_timer();
     28c:	0c 94 30 01 	jmp	0x260	; 0x260 <init_cap_discharge_wait_timer>

00000290 <__vector_16>:
}

//1 ms timebase register
//Blinks LED 1/second
//refreshes LCD 1/200 ms
ISR (TIMER0_COMPA_vect){
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
	if( led_time_count > 0)
     29e:	80 91 2f 01 	lds	r24, 0x012F
     2a2:	90 91 30 01 	lds	r25, 0x0130
     2a6:	89 2b       	or	r24, r25
     2a8:	49 f0       	breq	.+18     	; 0x2bc <__vector_16+0x2c>
		--led_time_count;
     2aa:	80 91 2f 01 	lds	r24, 0x012F
     2ae:	90 91 30 01 	lds	r25, 0x0130
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	90 93 30 01 	sts	0x0130, r25
     2b8:	80 93 2f 01 	sts	0x012F, r24
	if( lcd_time_count > 0)
     2bc:	80 91 10 01 	lds	r24, 0x0110
     2c0:	90 91 11 01 	lds	r25, 0x0111
     2c4:	89 2b       	or	r24, r25
     2c6:	49 f0       	breq	.+18     	; 0x2da <__vector_16+0x4a>
		--lcd_time_count;
     2c8:	80 91 10 01 	lds	r24, 0x0110
     2cc:	90 91 11 01 	lds	r25, 0x0111
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	90 93 11 01 	sts	0x0111, r25
     2d6:	80 93 10 01 	sts	0x0110, r24

}
     2da:	9f 91       	pop	r25
     2dc:	8f 91       	pop	r24
     2de:	0f 90       	pop	r0
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	0f 90       	pop	r0
     2e4:	1f 90       	pop	r1
     2e6:	18 95       	reti

000002e8 <__vector_13>:
//Once this triggers even once, we know that we have waited long enough for a cap discharge
ISR (TIMER1_COMPA_vect){
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	8f 93       	push	r24
     2f4:	9f 93       	push	r25
	cap_discharged = TRUE;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	90 93 0d 01 	sts	0x010D, r25
     2fe:	80 93 0c 01 	sts	0x010C, r24
}
     302:	9f 91       	pop	r25
     304:	8f 91       	pop	r24
     306:	0f 90       	pop	r0
     308:	0f be       	out	0x3f, r0	; 63
     30a:	0f 90       	pop	r0
     30c:	1f 90       	pop	r1
     30e:	18 95       	reti

00000310 <__vector_12>:
			  t
	C = ------------
		R2 * ln(0.5)

*/
ISR (TIMER1_CAPT_vect){
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	0b b6       	in	r0, 0x3b	; 59
     31c:	0f 92       	push	r0
     31e:	2f 93       	push	r18
     320:	3f 93       	push	r19
     322:	4f 93       	push	r20
     324:	5f 93       	push	r21
     326:	6f 93       	push	r22
     328:	7f 93       	push	r23
     32a:	8f 93       	push	r24
     32c:	9f 93       	push	r25
     32e:	af 93       	push	r26
     330:	bf 93       	push	r27
     332:	ef 93       	push	r30
     334:	ff 93       	push	r31
    // set the charged flag to true
    cap_charged = TRUE;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	90 93 0b 01 	sts	0x010B, r25
     33e:	80 93 0a 01 	sts	0x010A, r24
    // read timer1 input capture register
    charge_time = ICR1 * T1_CLK_PERIOD;
     342:	60 91 86 00 	lds	r22, 0x0086
     346:	70 91 87 00 	lds	r23, 0x0087
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatunsisf>
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	4a e7       	ldi	r20, 0x7A	; 122
     358:	52 e4       	ldi	r21, 0x42	; 66
     35a:	0e 94 60 05 	call	0xac0	; 0xac0 <__mulsf3>
     35e:	ab 01       	movw	r20, r22
     360:	bc 01       	movw	r22, r24
     362:	40 93 24 01 	sts	0x0124, r20
     366:	50 93 25 01 	sts	0x0125, r21
     36a:	60 93 26 01 	sts	0x0126, r22
     36e:	70 93 27 01 	sts	0x0127, r23
}
     372:	ff 91       	pop	r31
     374:	ef 91       	pop	r30
     376:	bf 91       	pop	r27
     378:	af 91       	pop	r26
     37a:	9f 91       	pop	r25
     37c:	8f 91       	pop	r24
     37e:	7f 91       	pop	r23
     380:	6f 91       	pop	r22
     382:	5f 91       	pop	r21
     384:	4f 91       	pop	r20
     386:	3f 91       	pop	r19
     388:	2f 91       	pop	r18
     38a:	0f 90       	pop	r0
     38c:	0b be       	out	0x3b, r0	; 59
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <toggle_led>:

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     398:	8b b1       	in	r24, 0x0b	; 11
     39a:	94 e0       	ldi	r25, 0x04	; 4
     39c:	89 27       	eor	r24, r25
     39e:	8b b9       	out	0x0b, r24	; 11
     3a0:	08 95       	ret

000003a2 <init_timer0A>:
//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 249;
     3a8:	89 ef       	ldi	r24, 0xF9	; 249
     3aa:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     3ac:	83 e0       	ldi	r24, 0x03	; 3
     3ae:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     3b0:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     3b2:	84 b5       	in	r24, 0x24	; 36
     3b4:	82 60       	ori	r24, 0x02	; 2
     3b6:	84 bd       	out	0x24, r24	; 36
     3b8:	08 95       	ret

000003ba <init_lcd>:
}

// LCD setup
void init_lcd(void){
	LCDinit();	//initialize the display
     3ba:	0e 94 19 03 	call	0x632	; 0x632 <LCDinit>
	LCDcursorOFF();
     3be:	0e 94 91 03 	call	0x722	; 0x722 <LCDcursorOFF>
	LCDclr();				//clear the display
     3c2:	0e 94 a9 02 	call	0x552	; 0x552 <LCDclr>
	LCDGotoXY(0,0);
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	0e 94 ce 02 	call	0x59c	; 0x59c <LCDGotoXY>
	CopyStringtoLCD(LCD_number, 0, 0);
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	8c e8       	ldi	r24, 0x8C	; 140
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <CopyStringtoLCD>

000003da <refresh_lcd>:
}


// writes contents of lcd_buffer to LCD every 200 mSec
// 
void refresh_lcd(void){
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
  // increment time counter and format string 
  //if (capacitance >= .1 && capacitance <= 100) {
  sprintf(lcd_buffer,"%-.5f",capacitance);	 
     3de:	80 91 28 01 	lds	r24, 0x0128
     3e2:	90 91 29 01 	lds	r25, 0x0129
     3e6:	a0 91 2a 01 	lds	r26, 0x012A
     3ea:	b0 91 2b 01 	lds	r27, 0x012B
     3ee:	bf 93       	push	r27
     3f0:	af 93       	push	r26
     3f2:	9f 93       	push	r25
     3f4:	8f 93       	push	r24
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	c2 e1       	ldi	r28, 0x12	; 18
     400:	d1 e0       	ldi	r29, 0x01	; 1
     402:	df 93       	push	r29
     404:	cf 93       	push	r28
     406:	0e 94 b0 0a 	call	0x1560	; 0x1560 <sprintf>
  //}
  //else {
  //	sprintf(lcd_buffer,"N/A");
  //}               
  LCDGotoXY(0, 1);
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	0e 94 ce 02 	call	0x59c	; 0x59c <LCDGotoXY>
  	// display the capacitance 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     412:	fe 01       	movw	r30, r28
     414:	01 90       	ld	r0, Z+
     416:	00 20       	and	r0, r0
     418:	e9 f7       	brne	.-6      	; 0x414 <refresh_lcd+0x3a>
     41a:	bf 01       	movw	r22, r30
     41c:	61 50       	subi	r22, 0x01	; 1
     41e:	71 09       	sbc	r23, r1
     420:	6c 1b       	sub	r22, r28
     422:	7d 0b       	sbc	r23, r29
     424:	ce 01       	movw	r24, r28
     426:	0e 94 af 02 	call	0x55e	; 0x55e <LCDstring>
  else {
  	sprintf(lcd_buffer, "N/A");
  } 
  */         
  // now move a char left and right
  LCDGotoXY(anipos,1);	   //second line
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	80 91 23 01 	lds	r24, 0x0123
     430:	0e 94 ce 02 	call	0x59c	; 0x59c <LCDGotoXY>
  LCDsendChar(' '); 
     434:	80 e2       	ldi	r24, 0x20	; 32
     436:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCDsendChar>
      	
  if (anipos>=15) dir=-1;   // check boundaries
     43a:	90 91 23 01 	lds	r25, 0x0123
     43e:	2d b7       	in	r18, 0x3d	; 61
     440:	3e b7       	in	r19, 0x3e	; 62
     442:	28 5f       	subi	r18, 0xF8	; 248
     444:	3f 4f       	sbci	r19, 0xFF	; 255
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	3e bf       	out	0x3e, r19	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	2d bf       	out	0x3d, r18	; 61
     450:	9f 30       	cpi	r25, 0x0F	; 15
     452:	10 f0       	brcs	.+4      	; 0x458 <refresh_lcd+0x7e>
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	03 c0       	rjmp	.+6      	; 0x45e <refresh_lcd+0x84>
  if (anipos<=8 ) dir=1;
     458:	99 30       	cpi	r25, 0x09	; 9
     45a:	18 f4       	brcc	.+6      	; 0x462 <refresh_lcd+0x88>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 2c 01 	sts	0x012C, r24
  anipos=anipos+dir;
     462:	80 91 2c 01 	lds	r24, 0x012C
     466:	89 0f       	add	r24, r25
     468:	80 93 23 01 	sts	0x0123, r24
  LCDGotoXY(anipos,1);	   //second line
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	0e 94 ce 02 	call	0x59c	; 0x59c <LCDGotoXY>
  LCDsendChar('o');
     472:	8f e6       	ldi	r24, 0x6F	; 111
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
      	
  if (anipos>=15) dir=-1;   // check boundaries
  if (anipos<=8 ) dir=1;
  anipos=anipos+dir;
  LCDGotoXY(anipos,1);	   //second line
  LCDsendChar('o');
     478:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <LCDsendChar>

0000047c <initialize>:
}

void initialize(void){
	anipos = 8;
     47c:	88 e0       	ldi	r24, 0x08	; 8
     47e:	80 93 23 01 	sts	0x0123, r24
	led_time_count = 0;
     482:	10 92 30 01 	sts	0x0130, r1
     486:	10 92 2f 01 	sts	0x012F, r1
	init_timer0A();
     48a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <init_timer0A>

	DDRB = 0;
     48e:	14 b8       	out	0x04, r1	; 4
	DDRD = 0;
     490:	1a b8       	out	0x0a, r1	; 10

	//Enable LED Port
	DDRD = ONBOARD_LED; //turn the LED to an output
     492:	84 e0       	ldi	r24, 0x04	; 4
     494:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; //turn off LED 
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	8b b9       	out	0x0b, r24	; 11

	cap_discharged = FALSE;
     49a:	10 92 0d 01 	sts	0x010D, r1
     49e:	10 92 0c 01 	sts	0x010C, r1
	begin_cap_measurement = FALSE;
     4a2:	10 92 0f 01 	sts	0x010F, r1
     4a6:	10 92 0e 01 	sts	0x010E, r1

	init_lcd();
     4aa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <init_lcd>
	LCDclr();
     4ae:	0e 94 a9 02 	call	0x552	; 0x552 <LCDclr>


	sei();
     4b2:	78 94       	sei
     4b4:	08 95       	ret

000004b6 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     4b6:	98 2f       	mov	r25, r24
     4b8:	90 7f       	andi	r25, 0xF0	; 240
     4ba:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_RS;
     4bc:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     4be:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c0:	ef e3       	ldi	r30, 0x3F	; 63
     4c2:	ff e1       	ldi	r31, 0x1F	; 31
     4c4:	31 97       	sbiw	r30, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <LCDsendChar+0xe>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <LCDsendChar+0x14>
     4ca:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     4cc:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     4ce:	40 98       	cbi	0x08, 0	; 8
     4d0:	ef e3       	ldi	r30, 0x3F	; 63
     4d2:	ff e1       	ldi	r31, 0x1F	; 31
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LCDsendChar+0x1e>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <LCDsendChar+0x24>
     4da:	00 00       	nop
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     4dc:	f0 e1       	ldi	r31, 0x10	; 16
     4de:	8f 9f       	mul	r24, r31
     4e0:	c0 01       	movw	r24, r0
     4e2:	11 24       	eor	r1, r1
     4e4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     4e6:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     4e8:	42 9a       	sbi	0x08, 2	; 8
     4ea:	8f e3       	ldi	r24, 0x3F	; 63
     4ec:	9f e1       	ldi	r25, 0x1F	; 31
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <LCDsendChar+0x38>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <LCDsendChar+0x3e>
     4f4:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     4f6:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     4f8:	40 98       	cbi	0x08, 0	; 8
     4fa:	ef e3       	ldi	r30, 0x3F	; 63
     4fc:	ff e1       	ldi	r31, 0x1F	; 31
     4fe:	31 97       	sbiw	r30, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <LCDsendChar+0x48>
     502:	00 c0       	rjmp	.+0      	; 0x504 <LCDsendChar+0x4e>
     504:	00 00       	nop
     506:	08 95       	ret

00000508 <LCDsendCommand>:
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     508:	98 2f       	mov	r25, r24
     50a:	90 7f       	andi	r25, 0xF0	; 240
     50c:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_E;		
     50e:	42 9a       	sbi	0x08, 2	; 8
     510:	ef e3       	ldi	r30, 0x3F	; 63
     512:	ff e1       	ldi	r31, 0x1F	; 31
     514:	31 97       	sbiw	r30, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <LCDsendCommand+0xc>
     518:	00 c0       	rjmp	.+0      	; 0x51a <LCDsendCommand+0x12>
     51a:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     51c:	42 98       	cbi	0x08, 2	; 8
     51e:	ef e3       	ldi	r30, 0x3F	; 63
     520:	ff e1       	ldi	r31, 0x1F	; 31
     522:	31 97       	sbiw	r30, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <LCDsendCommand+0x1a>
     526:	00 c0       	rjmp	.+0      	; 0x528 <LCDsendCommand+0x20>
     528:	00 00       	nop
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     52a:	f0 e1       	ldi	r31, 0x10	; 16
     52c:	8f 9f       	mul	r24, r31
     52e:	c0 01       	movw	r24, r0
     530:	11 24       	eor	r1, r1
     532:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     534:	42 9a       	sbi	0x08, 2	; 8
     536:	8f e3       	ldi	r24, 0x3F	; 63
     538:	9f e1       	ldi	r25, 0x1F	; 31
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <LCDsendCommand+0x32>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <LCDsendCommand+0x38>
     540:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     542:	42 98       	cbi	0x08, 2	; 8
     544:	ef e3       	ldi	r30, 0x3F	; 63
     546:	ff e1       	ldi	r31, 0x1F	; 31
     548:	31 97       	sbiw	r30, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <LCDsendCommand+0x40>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <LCDsendCommand+0x46>
     54e:	00 00       	nop
     550:	08 95       	ret

00000552 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	0c 94 84 02 	jmp	0x508	; 0x508 <LCDsendCommand>

00000558 <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	0c 94 84 02 	jmp	0x508	; 0x508 <LCDsendCommand>

0000055e <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	1f 92       	push	r1
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     56e:	00 97       	sbiw	r24, 0x00	; 0
     570:	71 f0       	breq	.+28     	; 0x58e <LCDstring+0x30>
     572:	18 2f       	mov	r17, r24
     574:	7c 01       	movw	r14, r24
     576:	07 c0       	rjmp	.+14     	; 0x586 <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     578:	f7 01       	movw	r30, r14
     57a:	81 91       	ld	r24, Z+
     57c:	7f 01       	movw	r14, r30
     57e:	69 83       	std	Y+1, r22	; 0x01
     580:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCDsendChar>
     584:	69 81       	ldd	r22, Y+1	; 0x01

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     586:	8e 2d       	mov	r24, r14
     588:	81 1b       	sub	r24, r17
     58a:	86 17       	cp	r24, r22
     58c:	a8 f3       	brcs	.-22     	; 0x578 <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     58e:	0f 90       	pop	r0
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	08 95       	ret

0000059c <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     59c:	62 30       	cpi	r22, 0x02	; 2
     59e:	31 f0       	breq	.+12     	; 0x5ac <LCDGotoXY+0x10>
     5a0:	63 30       	cpi	r22, 0x03	; 3
     5a2:	31 f0       	breq	.+12     	; 0x5b0 <LCDGotoXY+0x14>
     5a4:	61 30       	cpi	r22, 0x01	; 1
     5a6:	29 f4       	brne	.+10     	; 0x5b2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     5a8:	80 5c       	subi	r24, 0xC0	; 192
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     5ac:	8c 5e       	subi	r24, 0xEC	; 236
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     5b0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     5b2:	80 68       	ori	r24, 0x80	; 128
     5b4:	0c 94 84 02 	jmp	0x508	; 0x508 <LCDsendCommand>

000005b8 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
     5c0:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     5c2:	64 2f       	mov	r22, r20
     5c4:	0e 94 ce 02 	call	0x59c	; 0x59c <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     5cc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5d0:	1f 5f       	subi	r17, 0xFF	; 255
     5d2:	fe 01       	movw	r30, r28
     5d4:	e1 0f       	add	r30, r17
     5d6:	f1 1d       	adc	r31, r1
     5d8:	84 91       	lpm	r24, Z
     5da:	81 11       	cpse	r24, r1
     5dc:	f7 cf       	rjmp	.-18     	; 0x5cc <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	08 95       	ret

000005e6 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     5f4:	88 e0       	ldi	r24, 0x08	; 8
     5f6:	68 9f       	mul	r22, r24
     5f8:	b0 01       	movw	r22, r0
     5fa:	11 24       	eor	r1, r1
     5fc:	80 e4       	ldi	r24, 0x40	; 64
     5fe:	e8 2e       	mov	r14, r24
     600:	e6 2a       	or	r14, r22
	for (i=0; i<8; i++){
     602:	c0 e0       	ldi	r28, 0x00	; 0
     604:	d0 e0       	ldi	r29, 0x00	; 0
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     606:	f8 01       	movw	r30, r16
     608:	ec 0f       	add	r30, r28
     60a:	fd 1f       	adc	r31, r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     60c:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
     60e:	8c 2f       	mov	r24, r28
     610:	8e 0d       	add	r24, r14
     612:	0e 94 84 02 	call	0x508	; 0x508 <LCDsendCommand>
		LCDsendChar(pcc);
     616:	8f 2d       	mov	r24, r15
     618:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     61c:	21 96       	adiw	r28, 0x01	; 1
     61e:	c8 30       	cpi	r28, 0x08	; 8
     620:	d1 05       	cpc	r29, r1
     622:	89 f7       	brne	.-30     	; 0x606 <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	08 95       	ret

00000632 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	8f e5       	ldi	r24, 0x5F	; 95
     63a:	9a ee       	ldi	r25, 0xEA	; 234
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <LCDinit+0xa>
     640:	00 c0       	rjmp	.+0      	; 0x642 <LCDinit+0x10>
     642:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     644:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     646:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     648:	87 b1       	in	r24, 0x07	; 7
     64a:	80 6f       	ori	r24, 0xF0	; 240
     64c:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     64e:	87 b1       	in	r24, 0x07	; 7
     650:	87 60       	ori	r24, 0x07	; 7
     652:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     654:	80 e3       	ldi	r24, 0x30	; 48
     656:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     658:	42 9a       	sbi	0x08, 2	; 8
     65a:	ef e3       	ldi	r30, 0x3F	; 63
     65c:	ff e1       	ldi	r31, 0x1F	; 31
     65e:	31 97       	sbiw	r30, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <LCDinit+0x2c>
     662:	00 c0       	rjmp	.+0      	; 0x664 <LCDinit+0x32>
     664:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     666:	42 98       	cbi	0x08, 2	; 8
     668:	ef e3       	ldi	r30, 0x3F	; 63
     66a:	ff e1       	ldi	r31, 0x1F	; 31
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <LCDinit+0x3a>
     670:	00 c0       	rjmp	.+0      	; 0x672 <LCDinit+0x40>
     672:	00 00       	nop
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     674:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     676:	42 9a       	sbi	0x08, 2	; 8
     678:	8f e3       	ldi	r24, 0x3F	; 63
     67a:	9f e1       	ldi	r25, 0x1F	; 31
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <LCDinit+0x4a>
     680:	00 c0       	rjmp	.+0      	; 0x682 <LCDinit+0x50>
     682:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     684:	42 98       	cbi	0x08, 2	; 8
     686:	ef e3       	ldi	r30, 0x3F	; 63
     688:	ff e1       	ldi	r31, 0x1F	; 31
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <LCDinit+0x58>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <LCDinit+0x5e>
     690:	00 00       	nop
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     692:	80 e2       	ldi	r24, 0x20	; 32
     694:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     696:	42 9a       	sbi	0x08, 2	; 8
     698:	8f e3       	ldi	r24, 0x3F	; 63
     69a:	9f e1       	ldi	r25, 0x1F	; 31
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <LCDinit+0x6a>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <LCDinit+0x70>
     6a2:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     6a4:	42 98       	cbi	0x08, 2	; 8
     6a6:	ef e3       	ldi	r30, 0x3F	; 63
     6a8:	ff e1       	ldi	r31, 0x1F	; 31
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <LCDinit+0x78>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <LCDinit+0x7e>
     6b0:	00 00       	nop
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     6b2:	88 e2       	ldi	r24, 0x28	; 40
     6b4:	0e 94 84 02 	call	0x508	; 0x508 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     6b8:	8c e0       	ldi	r24, 0x0C	; 12
     6ba:	0e 94 84 02 	call	0x508	; 0x508 <LCDsendCommand>
     6be:	cb ea       	ldi	r28, 0xAB	; 171
     6c0:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     6c2:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     6c4:	16 2f       	mov	r17, r22
     6c6:	1f 5f       	subi	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCDdefinechar>
     6ce:	28 96       	adiw	r28, 0x08	; 8
     6d0:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     6d2:	18 30       	cpi	r17, 0x08	; 8
     6d4:	b9 f7       	brne	.-18     	; 0x6c4 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	08 95       	ret

000006de <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     6e4:	c0 e0       	ldi	r28, 0x00	; 0
     6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
     6e8:	8e e1       	ldi	r24, 0x1E	; 30
     6ea:	0e 94 84 02 	call	0x508	; 0x508 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     6ee:	cf 5f       	subi	r28, 0xFF	; 255
     6f0:	cd 13       	cpse	r28, r29
     6f2:	fa cf       	rjmp	.-12     	; 0x6e8 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     700:	c0 e0       	ldi	r28, 0x00	; 0
     702:	04 c0       	rjmp	.+8      	; 0x70c <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
     704:	88 e1       	ldi	r24, 0x18	; 24
     706:	0e 94 84 02 	call	0x508	; 0x508 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     70a:	cf 5f       	subi	r28, 0xFF	; 255
     70c:	cd 13       	cpse	r28, r29
     70e:	fa cf       	rjmp	.-12     	; 0x704 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     716:	8e e0       	ldi	r24, 0x0E	; 14
     718:	0c 94 84 02 	jmp	0x508	; 0x508 <LCDsendCommand>

0000071c <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     71c:	8f e0       	ldi	r24, 0x0F	; 15
     71e:	0c 94 84 02 	jmp	0x508	; 0x508 <LCDsendCommand>

00000722 <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     722:	8c e0       	ldi	r24, 0x0C	; 12
     724:	0c 94 84 02 	jmp	0x508	; 0x508 <LCDsendCommand>

00000728 <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     728:	88 e0       	ldi	r24, 0x08	; 8
     72a:	0c 94 84 02 	jmp	0x508	; 0x508 <LCDsendCommand>

0000072e <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     72e:	8c e0       	ldi	r24, 0x0C	; 12
     730:	0c 94 84 02 	jmp	0x508	; 0x508 <LCDsendCommand>

00000734 <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     73a:	c0 e0       	ldi	r28, 0x00	; 0
     73c:	04 c0       	rjmp	.+8      	; 0x746 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
     73e:	80 e1       	ldi	r24, 0x10	; 16
     740:	0e 94 84 02 	call	0x508	; 0x508 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     744:	cf 5f       	subi	r28, 0xFF	; 255
     746:	cd 13       	cpse	r28, r29
     748:	fa cf       	rjmp	.-12     	; 0x73e <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     756:	c0 e0       	ldi	r28, 0x00	; 0
     758:	04 c0       	rjmp	.+8      	; 0x762 <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
     75a:	84 e1       	ldi	r24, 0x14	; 20
     75c:	0e 94 84 02 	call	0x508	; 0x508 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     760:	cf 5f       	subi	r28, 0xFF	; 255
     762:	cd 13       	cpse	r28, r29
     764:	fa cf       	rjmp	.-12     	; 0x75a <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	1f 92       	push	r1
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     782:	56 e0       	ldi	r21, 0x06	; 6
     784:	45 9f       	mul	r20, r21
     786:	90 01       	movw	r18, r0
     788:	11 24       	eor	r1, r1
     78a:	e8 2f       	mov	r30, r24
     78c:	e2 9f       	mul	r30, r18
     78e:	c0 01       	movw	r24, r0
     790:	e3 9f       	mul	r30, r19
     792:	90 0d       	add	r25, r0
     794:	11 24       	eor	r1, r1
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	0e 94 82 09 	call	0x1304	; 0x1304 <__divmodhi4>
     79c:	8b 01       	movw	r16, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     79e:	cb 01       	movw	r24, r22
     7a0:	66 e0       	ldi	r22, 0x06	; 6
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__udivmodhi4>
     7a8:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     7aa:	c1 2c       	mov	r12, r1
     7ac:	d1 2c       	mov	r13, r1
     7ae:	f1 2c       	mov	r15, r1
     7b0:	16 c0       	rjmp	.+44     	; 0x7de <LCDprogressBar+0x72>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     7b2:	96 01       	movw	r18, r12
     7b4:	2b 5f       	subi	r18, 0xFB	; 251
     7b6:	3f 4f       	sbci	r19, 0xFF	; 255
     7b8:	02 17       	cp	r16, r18
     7ba:	13 07       	cpc	r17, r19
     7bc:	28 f4       	brcc	.+10     	; 0x7c8 <LCDprogressBar+0x5c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     7be:	0c 15       	cp	r16, r12
     7c0:	1d 05       	cpc	r17, r13
     7c2:	20 f0       	brcs	.+8      	; 0x7cc <LCDprogressBar+0x60>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     7c4:	8e 2d       	mov	r24, r14
     7c6:	03 c0       	rjmp	.+6      	; 0x7ce <LCDprogressBar+0x62>
			}
		}
		else
		{
			// this is a full block
			c = 5;
     7c8:	85 e0       	ldi	r24, 0x05	; 5
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <LCDprogressBar+0x62>
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     7ce:	49 83       	std	Y+1, r20	; 0x01
     7d0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     7d4:	f3 94       	inc	r15
     7d6:	f6 e0       	ldi	r31, 0x06	; 6
     7d8:	cf 0e       	add	r12, r31
     7da:	d1 1c       	adc	r13, r1
     7dc:	49 81       	ldd	r20, Y+1	; 0x01
     7de:	f4 12       	cpse	r15, r20
     7e0:	e8 cf       	rjmp	.-48     	; 0x7b2 <LCDprogressBar+0x46>
		
		// write character to display
		LCDsendChar(c);
	}

}
     7e2:	0f 90       	pop	r0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	08 95       	ret

000007f6 <main>:
}

int main(void){
	initialize();
     7f6:	0e 94 3e 02 	call	0x47c	; 0x47c <initialize>
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	8c e8       	ldi	r24, 0x8C	; 140
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <CopyStringtoLCD>
	
	while(1){
		if( led_time_count == 0){
			led_time_count = LED_BLINK_PERIOD / 2;
     806:	c4 ef       	ldi	r28, 0xF4	; 244
     808:	d1 e0       	ldi	r29, 0x01	; 1
			toggle_led();
		}
		if( lcd_time_count == 0){
			lcd_time_count = LCD_REFRESH_RATE;
     80a:	08 ec       	ldi	r16, 0xC8	; 200
     80c:	10 e0       	ldi	r17, 0x00	; 0
		if(cap_discharged && !begin_cap_measurement){
			//begin cap measurements
			//switch Timer1A mode

			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     80e:	ee 24       	eor	r14, r14
     810:	e3 94       	inc	r14
     812:	f1 2c       	mov	r15, r1
			// Calculate the capacitance with the time elapsed. 
			// V(t) = Vo(1 - exp(-t/(R2*C))) becomes
			// C = -t / (R2 * ln(.5)) to find out when V(t) = .5 * Vo (R3 = R4)
			// (Due to ln(.5) being negative, the negative on the t is canceled out)
			capacitance = charge_time / (RESISTOR * ln_half);
			capacitance = 3.3;
     814:	93 e3       	ldi	r25, 0x33	; 51
     816:	89 2e       	mov	r8, r25
     818:	98 2c       	mov	r9, r8
     81a:	93 e5       	ldi	r25, 0x53	; 83
     81c:	a9 2e       	mov	r10, r25
     81e:	90 e4       	ldi	r25, 0x40	; 64
     820:	b9 2e       	mov	r11, r25
int main(void){
	initialize();
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
	
	while(1){
		if( led_time_count == 0){
     822:	80 91 2f 01 	lds	r24, 0x012F
     826:	90 91 30 01 	lds	r25, 0x0130
     82a:	89 2b       	or	r24, r25
     82c:	31 f4       	brne	.+12     	; 0x83a <main+0x44>
			led_time_count = LED_BLINK_PERIOD / 2;
     82e:	d0 93 30 01 	sts	0x0130, r29
     832:	c0 93 2f 01 	sts	0x012F, r28
			toggle_led();
     836:	0e 94 cc 01 	call	0x398	; 0x398 <toggle_led>
		}
		if( lcd_time_count == 0){
     83a:	80 91 10 01 	lds	r24, 0x0110
     83e:	90 91 11 01 	lds	r25, 0x0111
     842:	89 2b       	or	r24, r25
     844:	31 f4       	brne	.+12     	; 0x852 <main+0x5c>
			lcd_time_count = LCD_REFRESH_RATE;
     846:	10 93 11 01 	sts	0x0111, r17
     84a:	00 93 10 01 	sts	0x0110, r16
			refresh_lcd();
     84e:	0e 94 ed 01 	call	0x3da	; 0x3da <refresh_lcd>
		}
		init_cap_measurements();
     852:	0e 94 42 01 	call	0x284	; 0x284 <init_cap_measurements>
		if(cap_discharged && !begin_cap_measurement){
     856:	80 91 0c 01 	lds	r24, 0x010C
     85a:	90 91 0d 01 	lds	r25, 0x010D
     85e:	89 2b       	or	r24, r25
     860:	61 f0       	breq	.+24     	; 0x87a <main+0x84>
     862:	80 91 0e 01 	lds	r24, 0x010E
     866:	90 91 0f 01 	lds	r25, 0x010F
     86a:	89 2b       	or	r24, r25
     86c:	31 f4       	brne	.+12     	; 0x87a <main+0x84>
			//begin cap measurements
			//switch Timer1A mode

			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     86e:	f0 92 0f 01 	sts	0x010F, r15
     872:	e0 92 0e 01 	sts	0x010E, r14
			//initalize timer for cap measurement
			init_cap_measurement_analog_timer();
     876:	0e 94 18 01 	call	0x230	; 0x230 <init_cap_measurement_analog_timer>
		}

		if(begin_cap_measurement && cap_charged){
     87a:	80 91 0e 01 	lds	r24, 0x010E
     87e:	90 91 0f 01 	lds	r25, 0x010F
     882:	89 2b       	or	r24, r25
     884:	71 f2       	breq	.-100    	; 0x822 <main+0x2c>
     886:	80 91 0a 01 	lds	r24, 0x010A
     88a:	90 91 0b 01 	lds	r25, 0x010B
     88e:	89 2b       	or	r24, r25
     890:	41 f2       	breq	.-112    	; 0x822 <main+0x2c>
			//cap_charged = FALSE;
			// Calculate the capacitance with the time elapsed. 
			// V(t) = Vo(1 - exp(-t/(R2*C))) becomes
			// C = -t / (R2 * ln(.5)) to find out when V(t) = .5 * Vo (R3 = R4)
			// (Due to ln(.5) being negative, the negative on the t is canceled out)
			capacitance = charge_time / (RESISTOR * ln_half);
     892:	60 91 24 01 	lds	r22, 0x0124
     896:	70 91 25 01 	lds	r23, 0x0125
     89a:	80 91 26 01 	lds	r24, 0x0126
     89e:	90 91 27 01 	lds	r25, 0x0127
     8a2:	26 ec       	ldi	r18, 0xC6	; 198
     8a4:	3b e9       	ldi	r19, 0x9B	; 155
     8a6:	48 ed       	ldi	r20, 0xD8	; 216
     8a8:	55 e4       	ldi	r21, 0x45	; 69
     8aa:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3>
     8ae:	ab 01       	movw	r20, r22
     8b0:	bc 01       	movw	r22, r24
     8b2:	40 93 28 01 	sts	0x0128, r20
     8b6:	50 93 29 01 	sts	0x0129, r21
     8ba:	60 93 2a 01 	sts	0x012A, r22
     8be:	70 93 2b 01 	sts	0x012B, r23
			capacitance = 3.3;
     8c2:	80 92 28 01 	sts	0x0128, r8
     8c6:	90 92 29 01 	sts	0x0129, r9
     8ca:	a0 92 2a 01 	sts	0x012A, r10
     8ce:	b0 92 2b 01 	sts	0x012B, r11
     8d2:	a7 cf       	rjmp	.-178    	; 0x822 <main+0x2c>

000008d4 <__divsf3>:
     8d4:	0c d0       	rcall	.+24     	; 0x8ee <__divsf3x>
     8d6:	ba c0       	rjmp	.+372    	; 0xa4c <__fp_round>
     8d8:	b2 d0       	rcall	.+356    	; 0xa3e <__fp_pscB>
     8da:	40 f0       	brcs	.+16     	; 0x8ec <__divsf3+0x18>
     8dc:	a9 d0       	rcall	.+338    	; 0xa30 <__fp_pscA>
     8de:	30 f0       	brcs	.+12     	; 0x8ec <__divsf3+0x18>
     8e0:	21 f4       	brne	.+8      	; 0x8ea <__divsf3+0x16>
     8e2:	5f 3f       	cpi	r21, 0xFF	; 255
     8e4:	19 f0       	breq	.+6      	; 0x8ec <__divsf3+0x18>
     8e6:	9b c0       	rjmp	.+310    	; 0xa1e <__fp_inf>
     8e8:	51 11       	cpse	r21, r1
     8ea:	e4 c0       	rjmp	.+456    	; 0xab4 <__fp_szero>
     8ec:	9e c0       	rjmp	.+316    	; 0xa2a <__fp_nan>

000008ee <__divsf3x>:
     8ee:	bf d0       	rcall	.+382    	; 0xa6e <__fp_split3>
     8f0:	98 f3       	brcs	.-26     	; 0x8d8 <__divsf3+0x4>

000008f2 <__divsf3_pse>:
     8f2:	99 23       	and	r25, r25
     8f4:	c9 f3       	breq	.-14     	; 0x8e8 <__divsf3+0x14>
     8f6:	55 23       	and	r21, r21
     8f8:	b1 f3       	breq	.-20     	; 0x8e6 <__divsf3+0x12>
     8fa:	95 1b       	sub	r25, r21
     8fc:	55 0b       	sbc	r21, r21
     8fe:	bb 27       	eor	r27, r27
     900:	aa 27       	eor	r26, r26
     902:	62 17       	cp	r22, r18
     904:	73 07       	cpc	r23, r19
     906:	84 07       	cpc	r24, r20
     908:	38 f0       	brcs	.+14     	; 0x918 <__divsf3_pse+0x26>
     90a:	9f 5f       	subi	r25, 0xFF	; 255
     90c:	5f 4f       	sbci	r21, 0xFF	; 255
     90e:	22 0f       	add	r18, r18
     910:	33 1f       	adc	r19, r19
     912:	44 1f       	adc	r20, r20
     914:	aa 1f       	adc	r26, r26
     916:	a9 f3       	breq	.-22     	; 0x902 <__divsf3_pse+0x10>
     918:	33 d0       	rcall	.+102    	; 0x980 <__divsf3_pse+0x8e>
     91a:	0e 2e       	mov	r0, r30
     91c:	3a f0       	brmi	.+14     	; 0x92c <__divsf3_pse+0x3a>
     91e:	e0 e8       	ldi	r30, 0x80	; 128
     920:	30 d0       	rcall	.+96     	; 0x982 <__divsf3_pse+0x90>
     922:	91 50       	subi	r25, 0x01	; 1
     924:	50 40       	sbci	r21, 0x00	; 0
     926:	e6 95       	lsr	r30
     928:	00 1c       	adc	r0, r0
     92a:	ca f7       	brpl	.-14     	; 0x91e <__divsf3_pse+0x2c>
     92c:	29 d0       	rcall	.+82     	; 0x980 <__divsf3_pse+0x8e>
     92e:	fe 2f       	mov	r31, r30
     930:	27 d0       	rcall	.+78     	; 0x980 <__divsf3_pse+0x8e>
     932:	66 0f       	add	r22, r22
     934:	77 1f       	adc	r23, r23
     936:	88 1f       	adc	r24, r24
     938:	bb 1f       	adc	r27, r27
     93a:	26 17       	cp	r18, r22
     93c:	37 07       	cpc	r19, r23
     93e:	48 07       	cpc	r20, r24
     940:	ab 07       	cpc	r26, r27
     942:	b0 e8       	ldi	r27, 0x80	; 128
     944:	09 f0       	breq	.+2      	; 0x948 <__divsf3_pse+0x56>
     946:	bb 0b       	sbc	r27, r27
     948:	80 2d       	mov	r24, r0
     94a:	bf 01       	movw	r22, r30
     94c:	ff 27       	eor	r31, r31
     94e:	93 58       	subi	r25, 0x83	; 131
     950:	5f 4f       	sbci	r21, 0xFF	; 255
     952:	2a f0       	brmi	.+10     	; 0x95e <__divsf3_pse+0x6c>
     954:	9e 3f       	cpi	r25, 0xFE	; 254
     956:	51 05       	cpc	r21, r1
     958:	68 f0       	brcs	.+26     	; 0x974 <__divsf3_pse+0x82>
     95a:	61 c0       	rjmp	.+194    	; 0xa1e <__fp_inf>
     95c:	ab c0       	rjmp	.+342    	; 0xab4 <__fp_szero>
     95e:	5f 3f       	cpi	r21, 0xFF	; 255
     960:	ec f3       	brlt	.-6      	; 0x95c <__divsf3_pse+0x6a>
     962:	98 3e       	cpi	r25, 0xE8	; 232
     964:	dc f3       	brlt	.-10     	; 0x95c <__divsf3_pse+0x6a>
     966:	86 95       	lsr	r24
     968:	77 95       	ror	r23
     96a:	67 95       	ror	r22
     96c:	b7 95       	ror	r27
     96e:	f7 95       	ror	r31
     970:	9f 5f       	subi	r25, 0xFF	; 255
     972:	c9 f7       	brne	.-14     	; 0x966 <__divsf3_pse+0x74>
     974:	88 0f       	add	r24, r24
     976:	91 1d       	adc	r25, r1
     978:	96 95       	lsr	r25
     97a:	87 95       	ror	r24
     97c:	97 f9       	bld	r25, 7
     97e:	08 95       	ret
     980:	e1 e0       	ldi	r30, 0x01	; 1
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	88 1f       	adc	r24, r24
     988:	bb 1f       	adc	r27, r27
     98a:	62 17       	cp	r22, r18
     98c:	73 07       	cpc	r23, r19
     98e:	84 07       	cpc	r24, r20
     990:	ba 07       	cpc	r27, r26
     992:	20 f0       	brcs	.+8      	; 0x99c <__divsf3_pse+0xaa>
     994:	62 1b       	sub	r22, r18
     996:	73 0b       	sbc	r23, r19
     998:	84 0b       	sbc	r24, r20
     99a:	ba 0b       	sbc	r27, r26
     99c:	ee 1f       	adc	r30, r30
     99e:	88 f7       	brcc	.-30     	; 0x982 <__divsf3_pse+0x90>
     9a0:	e0 95       	com	r30
     9a2:	08 95       	ret

000009a4 <__floatunsisf>:
     9a4:	e8 94       	clt
     9a6:	09 c0       	rjmp	.+18     	; 0x9ba <__floatsisf+0x12>

000009a8 <__floatsisf>:
     9a8:	97 fb       	bst	r25, 7
     9aa:	3e f4       	brtc	.+14     	; 0x9ba <__floatsisf+0x12>
     9ac:	90 95       	com	r25
     9ae:	80 95       	com	r24
     9b0:	70 95       	com	r23
     9b2:	61 95       	neg	r22
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
     9b6:	8f 4f       	sbci	r24, 0xFF	; 255
     9b8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ba:	99 23       	and	r25, r25
     9bc:	a9 f0       	breq	.+42     	; 0x9e8 <__floatsisf+0x40>
     9be:	f9 2f       	mov	r31, r25
     9c0:	96 e9       	ldi	r25, 0x96	; 150
     9c2:	bb 27       	eor	r27, r27
     9c4:	93 95       	inc	r25
     9c6:	f6 95       	lsr	r31
     9c8:	87 95       	ror	r24
     9ca:	77 95       	ror	r23
     9cc:	67 95       	ror	r22
     9ce:	b7 95       	ror	r27
     9d0:	f1 11       	cpse	r31, r1
     9d2:	f8 cf       	rjmp	.-16     	; 0x9c4 <__floatsisf+0x1c>
     9d4:	fa f4       	brpl	.+62     	; 0xa14 <__floatsisf+0x6c>
     9d6:	bb 0f       	add	r27, r27
     9d8:	11 f4       	brne	.+4      	; 0x9de <__floatsisf+0x36>
     9da:	60 ff       	sbrs	r22, 0
     9dc:	1b c0       	rjmp	.+54     	; 0xa14 <__floatsisf+0x6c>
     9de:	6f 5f       	subi	r22, 0xFF	; 255
     9e0:	7f 4f       	sbci	r23, 0xFF	; 255
     9e2:	8f 4f       	sbci	r24, 0xFF	; 255
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	16 c0       	rjmp	.+44     	; 0xa14 <__floatsisf+0x6c>
     9e8:	88 23       	and	r24, r24
     9ea:	11 f0       	breq	.+4      	; 0x9f0 <__floatsisf+0x48>
     9ec:	96 e9       	ldi	r25, 0x96	; 150
     9ee:	11 c0       	rjmp	.+34     	; 0xa12 <__floatsisf+0x6a>
     9f0:	77 23       	and	r23, r23
     9f2:	21 f0       	breq	.+8      	; 0x9fc <__floatsisf+0x54>
     9f4:	9e e8       	ldi	r25, 0x8E	; 142
     9f6:	87 2f       	mov	r24, r23
     9f8:	76 2f       	mov	r23, r22
     9fa:	05 c0       	rjmp	.+10     	; 0xa06 <__floatsisf+0x5e>
     9fc:	66 23       	and	r22, r22
     9fe:	71 f0       	breq	.+28     	; 0xa1c <__floatsisf+0x74>
     a00:	96 e8       	ldi	r25, 0x86	; 134
     a02:	86 2f       	mov	r24, r22
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	2a f0       	brmi	.+10     	; 0xa14 <__floatsisf+0x6c>
     a0a:	9a 95       	dec	r25
     a0c:	66 0f       	add	r22, r22
     a0e:	77 1f       	adc	r23, r23
     a10:	88 1f       	adc	r24, r24
     a12:	da f7       	brpl	.-10     	; 0xa0a <__floatsisf+0x62>
     a14:	88 0f       	add	r24, r24
     a16:	96 95       	lsr	r25
     a18:	87 95       	ror	r24
     a1a:	97 f9       	bld	r25, 7
     a1c:	08 95       	ret

00000a1e <__fp_inf>:
     a1e:	97 f9       	bld	r25, 7
     a20:	9f 67       	ori	r25, 0x7F	; 127
     a22:	80 e8       	ldi	r24, 0x80	; 128
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	08 95       	ret

00000a2a <__fp_nan>:
     a2a:	9f ef       	ldi	r25, 0xFF	; 255
     a2c:	80 ec       	ldi	r24, 0xC0	; 192
     a2e:	08 95       	ret

00000a30 <__fp_pscA>:
     a30:	00 24       	eor	r0, r0
     a32:	0a 94       	dec	r0
     a34:	16 16       	cp	r1, r22
     a36:	17 06       	cpc	r1, r23
     a38:	18 06       	cpc	r1, r24
     a3a:	09 06       	cpc	r0, r25
     a3c:	08 95       	ret

00000a3e <__fp_pscB>:
     a3e:	00 24       	eor	r0, r0
     a40:	0a 94       	dec	r0
     a42:	12 16       	cp	r1, r18
     a44:	13 06       	cpc	r1, r19
     a46:	14 06       	cpc	r1, r20
     a48:	05 06       	cpc	r0, r21
     a4a:	08 95       	ret

00000a4c <__fp_round>:
     a4c:	09 2e       	mov	r0, r25
     a4e:	03 94       	inc	r0
     a50:	00 0c       	add	r0, r0
     a52:	11 f4       	brne	.+4      	; 0xa58 <__fp_round+0xc>
     a54:	88 23       	and	r24, r24
     a56:	52 f0       	brmi	.+20     	; 0xa6c <__fp_round+0x20>
     a58:	bb 0f       	add	r27, r27
     a5a:	40 f4       	brcc	.+16     	; 0xa6c <__fp_round+0x20>
     a5c:	bf 2b       	or	r27, r31
     a5e:	11 f4       	brne	.+4      	; 0xa64 <__fp_round+0x18>
     a60:	60 ff       	sbrs	r22, 0
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__fp_round+0x20>
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	8f 4f       	sbci	r24, 0xFF	; 255
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	08 95       	ret

00000a6e <__fp_split3>:
     a6e:	57 fd       	sbrc	r21, 7
     a70:	90 58       	subi	r25, 0x80	; 128
     a72:	44 0f       	add	r20, r20
     a74:	55 1f       	adc	r21, r21
     a76:	59 f0       	breq	.+22     	; 0xa8e <__fp_splitA+0x10>
     a78:	5f 3f       	cpi	r21, 0xFF	; 255
     a7a:	71 f0       	breq	.+28     	; 0xa98 <__fp_splitA+0x1a>
     a7c:	47 95       	ror	r20

00000a7e <__fp_splitA>:
     a7e:	88 0f       	add	r24, r24
     a80:	97 fb       	bst	r25, 7
     a82:	99 1f       	adc	r25, r25
     a84:	61 f0       	breq	.+24     	; 0xa9e <__fp_splitA+0x20>
     a86:	9f 3f       	cpi	r25, 0xFF	; 255
     a88:	79 f0       	breq	.+30     	; 0xaa8 <__fp_splitA+0x2a>
     a8a:	87 95       	ror	r24
     a8c:	08 95       	ret
     a8e:	12 16       	cp	r1, r18
     a90:	13 06       	cpc	r1, r19
     a92:	14 06       	cpc	r1, r20
     a94:	55 1f       	adc	r21, r21
     a96:	f2 cf       	rjmp	.-28     	; 0xa7c <__fp_split3+0xe>
     a98:	46 95       	lsr	r20
     a9a:	f1 df       	rcall	.-30     	; 0xa7e <__fp_splitA>
     a9c:	08 c0       	rjmp	.+16     	; 0xaae <__fp_splitA+0x30>
     a9e:	16 16       	cp	r1, r22
     aa0:	17 06       	cpc	r1, r23
     aa2:	18 06       	cpc	r1, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	f1 cf       	rjmp	.-30     	; 0xa8a <__fp_splitA+0xc>
     aa8:	86 95       	lsr	r24
     aaa:	71 05       	cpc	r23, r1
     aac:	61 05       	cpc	r22, r1
     aae:	08 94       	sec
     ab0:	08 95       	ret

00000ab2 <__fp_zero>:
     ab2:	e8 94       	clt

00000ab4 <__fp_szero>:
     ab4:	bb 27       	eor	r27, r27
     ab6:	66 27       	eor	r22, r22
     ab8:	77 27       	eor	r23, r23
     aba:	cb 01       	movw	r24, r22
     abc:	97 f9       	bld	r25, 7
     abe:	08 95       	ret

00000ac0 <__mulsf3>:
     ac0:	0b d0       	rcall	.+22     	; 0xad8 <__mulsf3x>
     ac2:	c4 cf       	rjmp	.-120    	; 0xa4c <__fp_round>
     ac4:	b5 df       	rcall	.-150    	; 0xa30 <__fp_pscA>
     ac6:	28 f0       	brcs	.+10     	; 0xad2 <__mulsf3+0x12>
     ac8:	ba df       	rcall	.-140    	; 0xa3e <__fp_pscB>
     aca:	18 f0       	brcs	.+6      	; 0xad2 <__mulsf3+0x12>
     acc:	95 23       	and	r25, r21
     ace:	09 f0       	breq	.+2      	; 0xad2 <__mulsf3+0x12>
     ad0:	a6 cf       	rjmp	.-180    	; 0xa1e <__fp_inf>
     ad2:	ab cf       	rjmp	.-170    	; 0xa2a <__fp_nan>
     ad4:	11 24       	eor	r1, r1
     ad6:	ee cf       	rjmp	.-36     	; 0xab4 <__fp_szero>

00000ad8 <__mulsf3x>:
     ad8:	ca df       	rcall	.-108    	; 0xa6e <__fp_split3>
     ada:	a0 f3       	brcs	.-24     	; 0xac4 <__mulsf3+0x4>

00000adc <__mulsf3_pse>:
     adc:	95 9f       	mul	r25, r21
     ade:	d1 f3       	breq	.-12     	; 0xad4 <__mulsf3+0x14>
     ae0:	95 0f       	add	r25, r21
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	55 1f       	adc	r21, r21
     ae6:	62 9f       	mul	r22, r18
     ae8:	f0 01       	movw	r30, r0
     aea:	72 9f       	mul	r23, r18
     aec:	bb 27       	eor	r27, r27
     aee:	f0 0d       	add	r31, r0
     af0:	b1 1d       	adc	r27, r1
     af2:	63 9f       	mul	r22, r19
     af4:	aa 27       	eor	r26, r26
     af6:	f0 0d       	add	r31, r0
     af8:	b1 1d       	adc	r27, r1
     afa:	aa 1f       	adc	r26, r26
     afc:	64 9f       	mul	r22, r20
     afe:	66 27       	eor	r22, r22
     b00:	b0 0d       	add	r27, r0
     b02:	a1 1d       	adc	r26, r1
     b04:	66 1f       	adc	r22, r22
     b06:	82 9f       	mul	r24, r18
     b08:	22 27       	eor	r18, r18
     b0a:	b0 0d       	add	r27, r0
     b0c:	a1 1d       	adc	r26, r1
     b0e:	62 1f       	adc	r22, r18
     b10:	73 9f       	mul	r23, r19
     b12:	b0 0d       	add	r27, r0
     b14:	a1 1d       	adc	r26, r1
     b16:	62 1f       	adc	r22, r18
     b18:	83 9f       	mul	r24, r19
     b1a:	a0 0d       	add	r26, r0
     b1c:	61 1d       	adc	r22, r1
     b1e:	22 1f       	adc	r18, r18
     b20:	74 9f       	mul	r23, r20
     b22:	33 27       	eor	r19, r19
     b24:	a0 0d       	add	r26, r0
     b26:	61 1d       	adc	r22, r1
     b28:	23 1f       	adc	r18, r19
     b2a:	84 9f       	mul	r24, r20
     b2c:	60 0d       	add	r22, r0
     b2e:	21 1d       	adc	r18, r1
     b30:	82 2f       	mov	r24, r18
     b32:	76 2f       	mov	r23, r22
     b34:	6a 2f       	mov	r22, r26
     b36:	11 24       	eor	r1, r1
     b38:	9f 57       	subi	r25, 0x7F	; 127
     b3a:	50 40       	sbci	r21, 0x00	; 0
     b3c:	8a f0       	brmi	.+34     	; 0xb60 <__mulsf3_pse+0x84>
     b3e:	e1 f0       	breq	.+56     	; 0xb78 <__mulsf3_pse+0x9c>
     b40:	88 23       	and	r24, r24
     b42:	4a f0       	brmi	.+18     	; 0xb56 <__mulsf3_pse+0x7a>
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	bb 1f       	adc	r27, r27
     b4a:	66 1f       	adc	r22, r22
     b4c:	77 1f       	adc	r23, r23
     b4e:	88 1f       	adc	r24, r24
     b50:	91 50       	subi	r25, 0x01	; 1
     b52:	50 40       	sbci	r21, 0x00	; 0
     b54:	a9 f7       	brne	.-22     	; 0xb40 <__mulsf3_pse+0x64>
     b56:	9e 3f       	cpi	r25, 0xFE	; 254
     b58:	51 05       	cpc	r21, r1
     b5a:	70 f0       	brcs	.+28     	; 0xb78 <__mulsf3_pse+0x9c>
     b5c:	60 cf       	rjmp	.-320    	; 0xa1e <__fp_inf>
     b5e:	aa cf       	rjmp	.-172    	; 0xab4 <__fp_szero>
     b60:	5f 3f       	cpi	r21, 0xFF	; 255
     b62:	ec f3       	brlt	.-6      	; 0xb5e <__mulsf3_pse+0x82>
     b64:	98 3e       	cpi	r25, 0xE8	; 232
     b66:	dc f3       	brlt	.-10     	; 0xb5e <__mulsf3_pse+0x82>
     b68:	86 95       	lsr	r24
     b6a:	77 95       	ror	r23
     b6c:	67 95       	ror	r22
     b6e:	b7 95       	ror	r27
     b70:	f7 95       	ror	r31
     b72:	e7 95       	ror	r30
     b74:	9f 5f       	subi	r25, 0xFF	; 255
     b76:	c1 f7       	brne	.-16     	; 0xb68 <__mulsf3_pse+0x8c>
     b78:	fe 2b       	or	r31, r30
     b7a:	88 0f       	add	r24, r24
     b7c:	91 1d       	adc	r25, r1
     b7e:	96 95       	lsr	r25
     b80:	87 95       	ror	r24
     b82:	97 f9       	bld	r25, 7
     b84:	08 95       	ret

00000b86 <vfprintf>:
     b86:	2f 92       	push	r2
     b88:	3f 92       	push	r3
     b8a:	4f 92       	push	r4
     b8c:	5f 92       	push	r5
     b8e:	6f 92       	push	r6
     b90:	7f 92       	push	r7
     b92:	8f 92       	push	r8
     b94:	9f 92       	push	r9
     b96:	af 92       	push	r10
     b98:	bf 92       	push	r11
     b9a:	cf 92       	push	r12
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	62 97       	sbiw	r28, 0x12	; 18
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	7c 01       	movw	r14, r24
     bbc:	1b 01       	movw	r2, r22
     bbe:	6a 01       	movw	r12, r20
     bc0:	fc 01       	movw	r30, r24
     bc2:	17 82       	std	Z+7, r1	; 0x07
     bc4:	16 82       	std	Z+6, r1	; 0x06
     bc6:	83 81       	ldd	r24, Z+3	; 0x03
     bc8:	81 fd       	sbrc	r24, 1
     bca:	03 c0       	rjmp	.+6      	; 0xbd2 <vfprintf+0x4c>
     bcc:	6b c3       	rjmp	.+1750   	; 0x12a4 <vfprintf+0x71e>
     bce:	65 01       	movw	r12, r10
     bd0:	05 c0       	rjmp	.+10     	; 0xbdc <vfprintf+0x56>
     bd2:	88 24       	eor	r8, r8
     bd4:	83 94       	inc	r8
     bd6:	91 2c       	mov	r9, r1
     bd8:	8c 0e       	add	r8, r28
     bda:	9d 1e       	adc	r9, r29
     bdc:	f7 01       	movw	r30, r14
     bde:	93 81       	ldd	r25, Z+3	; 0x03
     be0:	f1 01       	movw	r30, r2
     be2:	93 fd       	sbrc	r25, 3
     be4:	85 91       	lpm	r24, Z+
     be6:	93 ff       	sbrs	r25, 3
     be8:	81 91       	ld	r24, Z+
     bea:	1f 01       	movw	r2, r30
     bec:	88 23       	and	r24, r24
     bee:	09 f4       	brne	.+2      	; 0xbf2 <vfprintf+0x6c>
     bf0:	55 c3       	rjmp	.+1706   	; 0x129c <vfprintf+0x716>
     bf2:	85 32       	cpi	r24, 0x25	; 37
     bf4:	39 f4       	brne	.+14     	; 0xc04 <vfprintf+0x7e>
     bf6:	93 fd       	sbrc	r25, 3
     bf8:	85 91       	lpm	r24, Z+
     bfa:	93 ff       	sbrs	r25, 3
     bfc:	81 91       	ld	r24, Z+
     bfe:	1f 01       	movw	r2, r30
     c00:	85 32       	cpi	r24, 0x25	; 37
     c02:	31 f4       	brne	.+12     	; 0xc10 <vfprintf+0x8a>
     c04:	b7 01       	movw	r22, r14
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     c0c:	56 01       	movw	r10, r12
     c0e:	df cf       	rjmp	.-66     	; 0xbce <vfprintf+0x48>
     c10:	71 2c       	mov	r7, r1
     c12:	61 2c       	mov	r6, r1
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	20 32       	cpi	r18, 0x20	; 32
     c18:	a8 f4       	brcc	.+42     	; 0xc44 <vfprintf+0xbe>
     c1a:	8b 32       	cpi	r24, 0x2B	; 43
     c1c:	61 f0       	breq	.+24     	; 0xc36 <vfprintf+0xb0>
     c1e:	28 f4       	brcc	.+10     	; 0xc2a <vfprintf+0xa4>
     c20:	80 32       	cpi	r24, 0x20	; 32
     c22:	51 f0       	breq	.+20     	; 0xc38 <vfprintf+0xb2>
     c24:	83 32       	cpi	r24, 0x23	; 35
     c26:	71 f4       	brne	.+28     	; 0xc44 <vfprintf+0xbe>
     c28:	0b c0       	rjmp	.+22     	; 0xc40 <vfprintf+0xba>
     c2a:	8d 32       	cpi	r24, 0x2D	; 45
     c2c:	39 f0       	breq	.+14     	; 0xc3c <vfprintf+0xb6>
     c2e:	80 33       	cpi	r24, 0x30	; 48
     c30:	49 f4       	brne	.+18     	; 0xc44 <vfprintf+0xbe>
     c32:	21 60       	ori	r18, 0x01	; 1
     c34:	28 c0       	rjmp	.+80     	; 0xc86 <vfprintf+0x100>
     c36:	22 60       	ori	r18, 0x02	; 2
     c38:	24 60       	ori	r18, 0x04	; 4
     c3a:	25 c0       	rjmp	.+74     	; 0xc86 <vfprintf+0x100>
     c3c:	28 60       	ori	r18, 0x08	; 8
     c3e:	23 c0       	rjmp	.+70     	; 0xc86 <vfprintf+0x100>
     c40:	20 61       	ori	r18, 0x10	; 16
     c42:	21 c0       	rjmp	.+66     	; 0xc86 <vfprintf+0x100>
     c44:	27 fd       	sbrc	r18, 7
     c46:	27 c0       	rjmp	.+78     	; 0xc96 <vfprintf+0x110>
     c48:	38 2f       	mov	r19, r24
     c4a:	30 53       	subi	r19, 0x30	; 48
     c4c:	3a 30       	cpi	r19, 0x0A	; 10
     c4e:	78 f4       	brcc	.+30     	; 0xc6e <vfprintf+0xe8>
     c50:	26 ff       	sbrs	r18, 6
     c52:	06 c0       	rjmp	.+12     	; 0xc60 <vfprintf+0xda>
     c54:	fa e0       	ldi	r31, 0x0A	; 10
     c56:	7f 9e       	mul	r7, r31
     c58:	30 0d       	add	r19, r0
     c5a:	11 24       	eor	r1, r1
     c5c:	73 2e       	mov	r7, r19
     c5e:	13 c0       	rjmp	.+38     	; 0xc86 <vfprintf+0x100>
     c60:	4a e0       	ldi	r20, 0x0A	; 10
     c62:	64 9e       	mul	r6, r20
     c64:	30 0d       	add	r19, r0
     c66:	11 24       	eor	r1, r1
     c68:	63 2e       	mov	r6, r19
     c6a:	20 62       	ori	r18, 0x20	; 32
     c6c:	0c c0       	rjmp	.+24     	; 0xc86 <vfprintf+0x100>
     c6e:	8e 32       	cpi	r24, 0x2E	; 46
     c70:	21 f4       	brne	.+8      	; 0xc7a <vfprintf+0xf4>
     c72:	26 fd       	sbrc	r18, 6
     c74:	13 c3       	rjmp	.+1574   	; 0x129c <vfprintf+0x716>
     c76:	20 64       	ori	r18, 0x40	; 64
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x100>
     c7a:	8c 36       	cpi	r24, 0x6C	; 108
     c7c:	11 f4       	brne	.+4      	; 0xc82 <vfprintf+0xfc>
     c7e:	20 68       	ori	r18, 0x80	; 128
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <vfprintf+0x100>
     c82:	88 36       	cpi	r24, 0x68	; 104
     c84:	41 f4       	brne	.+16     	; 0xc96 <vfprintf+0x110>
     c86:	f1 01       	movw	r30, r2
     c88:	93 fd       	sbrc	r25, 3
     c8a:	85 91       	lpm	r24, Z+
     c8c:	93 ff       	sbrs	r25, 3
     c8e:	81 91       	ld	r24, Z+
     c90:	1f 01       	movw	r2, r30
     c92:	81 11       	cpse	r24, r1
     c94:	c0 cf       	rjmp	.-128    	; 0xc16 <vfprintf+0x90>
     c96:	98 2f       	mov	r25, r24
     c98:	95 54       	subi	r25, 0x45	; 69
     c9a:	93 30       	cpi	r25, 0x03	; 3
     c9c:	18 f4       	brcc	.+6      	; 0xca4 <vfprintf+0x11e>
     c9e:	20 61       	ori	r18, 0x10	; 16
     ca0:	80 5e       	subi	r24, 0xE0	; 224
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <vfprintf+0x12a>
     ca4:	98 2f       	mov	r25, r24
     ca6:	95 56       	subi	r25, 0x65	; 101
     ca8:	93 30       	cpi	r25, 0x03	; 3
     caa:	08 f0       	brcs	.+2      	; 0xcae <vfprintf+0x128>
     cac:	a4 c1       	rjmp	.+840    	; 0xff6 <vfprintf+0x470>
     cae:	2f 7e       	andi	r18, 0xEF	; 239
     cb0:	26 fd       	sbrc	r18, 6
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <vfprintf+0x132>
     cb4:	16 e0       	ldi	r17, 0x06	; 6
     cb6:	71 2e       	mov	r7, r17
     cb8:	bf e3       	ldi	r27, 0x3F	; 63
     cba:	5b 2e       	mov	r5, r27
     cbc:	52 22       	and	r5, r18
     cbe:	85 36       	cpi	r24, 0x65	; 101
     cc0:	19 f4       	brne	.+6      	; 0xcc8 <vfprintf+0x142>
     cc2:	f0 e4       	ldi	r31, 0x40	; 64
     cc4:	5f 2a       	or	r5, r31
     cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <vfprintf+0x150>
     cc8:	86 36       	cpi	r24, 0x66	; 102
     cca:	19 f4       	brne	.+6      	; 0xcd2 <vfprintf+0x14c>
     ccc:	40 e8       	ldi	r20, 0x80	; 128
     cce:	54 2a       	or	r5, r20
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <vfprintf+0x150>
     cd2:	71 10       	cpse	r7, r1
     cd4:	7a 94       	dec	r7
     cd6:	57 fe       	sbrs	r5, 7
     cd8:	07 c0       	rjmp	.+14     	; 0xce8 <vfprintf+0x162>
     cda:	5b e3       	ldi	r21, 0x3B	; 59
     cdc:	57 15       	cp	r21, r7
     cde:	48 f0       	brcs	.+18     	; 0xcf2 <vfprintf+0x16c>
     ce0:	47 2c       	mov	r4, r7
     ce2:	43 94       	inc	r4
     ce4:	27 e0       	ldi	r18, 0x07	; 7
     ce6:	0d c0       	rjmp	.+26     	; 0xd02 <vfprintf+0x17c>
     ce8:	87 e0       	ldi	r24, 0x07	; 7
     cea:	87 15       	cp	r24, r7
     cec:	30 f0       	brcs	.+12     	; 0xcfa <vfprintf+0x174>
     cee:	27 2d       	mov	r18, r7
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <vfprintf+0x17a>
     cf2:	27 e0       	ldi	r18, 0x07	; 7
     cf4:	ac e3       	ldi	r26, 0x3C	; 60
     cf6:	4a 2e       	mov	r4, r26
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <vfprintf+0x17c>
     cfa:	27 e0       	ldi	r18, 0x07	; 7
     cfc:	f7 e0       	ldi	r31, 0x07	; 7
     cfe:	7f 2e       	mov	r7, r31
     d00:	41 2c       	mov	r4, r1
     d02:	56 01       	movw	r10, r12
     d04:	94 e0       	ldi	r25, 0x04	; 4
     d06:	a9 0e       	add	r10, r25
     d08:	b1 1c       	adc	r11, r1
     d0a:	f6 01       	movw	r30, r12
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	04 2d       	mov	r16, r4
     d16:	a4 01       	movw	r20, r8
     d18:	0e 94 96 09 	call	0x132c	; 0x132c <__ftoa_engine>
     d1c:	8c 01       	movw	r16, r24
     d1e:	49 81       	ldd	r20, Y+1	; 0x01
     d20:	4c 87       	std	Y+12, r20	; 0x0c
     d22:	40 ff       	sbrs	r20, 0
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <vfprintf+0x1a4>
     d26:	43 ff       	sbrs	r20, 3
     d28:	07 c0       	rjmp	.+14     	; 0xd38 <vfprintf+0x1b2>
     d2a:	51 fc       	sbrc	r5, 1
     d2c:	08 c0       	rjmp	.+16     	; 0xd3e <vfprintf+0x1b8>
     d2e:	52 fe       	sbrs	r5, 2
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <vfprintf+0x1be>
     d32:	e0 e2       	ldi	r30, 0x20	; 32
     d34:	de 2e       	mov	r13, r30
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <vfprintf+0x1c0>
     d38:	7d e2       	ldi	r23, 0x2D	; 45
     d3a:	d7 2e       	mov	r13, r23
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <vfprintf+0x1c0>
     d3e:	6b e2       	ldi	r22, 0x2B	; 43
     d40:	d6 2e       	mov	r13, r22
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <vfprintf+0x1c0>
     d44:	d1 2c       	mov	r13, r1
     d46:	8c 85       	ldd	r24, Y+12	; 0x0c
     d48:	8c 70       	andi	r24, 0x0C	; 12
     d4a:	a1 f1       	breq	.+104    	; 0xdb4 <vfprintf+0x22e>
     d4c:	dd 20       	and	r13, r13
     d4e:	11 f0       	breq	.+4      	; 0xd54 <vfprintf+0x1ce>
     d50:	84 e0       	ldi	r24, 0x04	; 4
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <vfprintf+0x1d0>
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	86 15       	cp	r24, r6
     d58:	10 f0       	brcs	.+4      	; 0xd5e <vfprintf+0x1d8>
     d5a:	61 2c       	mov	r6, r1
     d5c:	0b c0       	rjmp	.+22     	; 0xd74 <vfprintf+0x1ee>
     d5e:	68 1a       	sub	r6, r24
     d60:	53 fc       	sbrc	r5, 3
     d62:	08 c0       	rjmp	.+16     	; 0xd74 <vfprintf+0x1ee>
     d64:	b7 01       	movw	r22, r14
     d66:	80 e2       	ldi	r24, 0x20	; 32
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     d6e:	6a 94       	dec	r6
     d70:	c9 f7       	brne	.-14     	; 0xd64 <vfprintf+0x1de>
     d72:	f3 cf       	rjmp	.-26     	; 0xd5a <vfprintf+0x1d4>
     d74:	dd 20       	and	r13, r13
     d76:	29 f0       	breq	.+10     	; 0xd82 <vfprintf+0x1fc>
     d78:	b7 01       	movw	r22, r14
     d7a:	8d 2d       	mov	r24, r13
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     d82:	5c 85       	ldd	r21, Y+12	; 0x0c
     d84:	53 fd       	sbrc	r21, 3
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <vfprintf+0x208>
     d88:	0f ee       	ldi	r16, 0xEF	; 239
     d8a:	10 e0       	ldi	r17, 0x00	; 0
     d8c:	0c c0       	rjmp	.+24     	; 0xda6 <vfprintf+0x220>
     d8e:	0b ee       	ldi	r16, 0xEB	; 235
     d90:	10 e0       	ldi	r17, 0x00	; 0
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <vfprintf+0x220>
     d94:	51 10       	cpse	r5, r1
     d96:	80 52       	subi	r24, 0x20	; 32
     d98:	b7 01       	movw	r22, r14
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     da0:	0f 5f       	subi	r16, 0xFF	; 255
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <vfprintf+0x224>
     da6:	80 e1       	ldi	r24, 0x10	; 16
     da8:	58 22       	and	r5, r24
     daa:	f8 01       	movw	r30, r16
     dac:	84 91       	lpm	r24, Z
     dae:	81 11       	cpse	r24, r1
     db0:	f1 cf       	rjmp	.-30     	; 0xd94 <vfprintf+0x20e>
     db2:	71 c2       	rjmp	.+1250   	; 0x1296 <vfprintf+0x710>
     db4:	57 fe       	sbrs	r5, 7
     db6:	0e c0       	rjmp	.+28     	; 0xdd4 <vfprintf+0x24e>
     db8:	40 0e       	add	r4, r16
     dba:	4c 85       	ldd	r20, Y+12	; 0x0c
     dbc:	44 ff       	sbrs	r20, 4
     dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <vfprintf+0x242>
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	81 33       	cpi	r24, 0x31	; 49
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <vfprintf+0x242>
     dc6:	4a 94       	dec	r4
     dc8:	14 14       	cp	r1, r4
     dca:	4c f5       	brge	.+82     	; 0xe1e <vfprintf+0x298>
     dcc:	58 e0       	ldi	r21, 0x08	; 8
     dce:	54 15       	cp	r21, r4
     dd0:	48 f1       	brcs	.+82     	; 0xe24 <vfprintf+0x29e>
     dd2:	2c c0       	rjmp	.+88     	; 0xe2c <vfprintf+0x2a6>
     dd4:	56 fc       	sbrc	r5, 6
     dd6:	2a c0       	rjmp	.+84     	; 0xe2c <vfprintf+0x2a6>
     dd8:	87 2d       	mov	r24, r7
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	80 17       	cp	r24, r16
     dde:	91 07       	cpc	r25, r17
     de0:	44 f0       	brlt	.+16     	; 0xdf2 <vfprintf+0x26c>
     de2:	0c 3f       	cpi	r16, 0xFC	; 252
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	18 07       	cpc	r17, r24
     de8:	24 f0       	brlt	.+8      	; 0xdf2 <vfprintf+0x26c>
     dea:	90 e8       	ldi	r25, 0x80	; 128
     dec:	59 2a       	or	r5, r25
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <vfprintf+0x26c>
     df0:	7a 94       	dec	r7
     df2:	77 20       	and	r7, r7
     df4:	49 f0       	breq	.+18     	; 0xe08 <vfprintf+0x282>
     df6:	e2 e0       	ldi	r30, 0x02	; 2
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	ec 0f       	add	r30, r28
     dfc:	fd 1f       	adc	r31, r29
     dfe:	e7 0d       	add	r30, r7
     e00:	f1 1d       	adc	r31, r1
     e02:	80 81       	ld	r24, Z
     e04:	80 33       	cpi	r24, 0x30	; 48
     e06:	a1 f3       	breq	.-24     	; 0xdf0 <vfprintf+0x26a>
     e08:	57 fe       	sbrs	r5, 7
     e0a:	10 c0       	rjmp	.+32     	; 0xe2c <vfprintf+0x2a6>
     e0c:	47 2c       	mov	r4, r7
     e0e:	43 94       	inc	r4
     e10:	87 2d       	mov	r24, r7
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	08 17       	cp	r16, r24
     e16:	19 07       	cpc	r17, r25
     e18:	44 f4       	brge	.+16     	; 0xe2a <vfprintf+0x2a4>
     e1a:	70 1a       	sub	r7, r16
     e1c:	07 c0       	rjmp	.+14     	; 0xe2c <vfprintf+0x2a6>
     e1e:	44 24       	eor	r4, r4
     e20:	43 94       	inc	r4
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <vfprintf+0x2a6>
     e24:	58 e0       	ldi	r21, 0x08	; 8
     e26:	45 2e       	mov	r4, r21
     e28:	01 c0       	rjmp	.+2      	; 0xe2c <vfprintf+0x2a6>
     e2a:	71 2c       	mov	r7, r1
     e2c:	57 fe       	sbrs	r5, 7
     e2e:	07 c0       	rjmp	.+14     	; 0xe3e <vfprintf+0x2b8>
     e30:	10 16       	cp	r1, r16
     e32:	11 06       	cpc	r1, r17
     e34:	3c f4       	brge	.+14     	; 0xe44 <vfprintf+0x2be>
     e36:	98 01       	movw	r18, r16
     e38:	2f 5f       	subi	r18, 0xFF	; 255
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <vfprintf+0x2c2>
     e3e:	25 e0       	ldi	r18, 0x05	; 5
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x2c2>
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	dd 20       	and	r13, r13
     e4a:	11 f0       	breq	.+4      	; 0xe50 <vfprintf+0x2ca>
     e4c:	2f 5f       	subi	r18, 0xFF	; 255
     e4e:	3f 4f       	sbci	r19, 0xFF	; 255
     e50:	77 20       	and	r7, r7
     e52:	31 f0       	breq	.+12     	; 0xe60 <vfprintf+0x2da>
     e54:	47 2d       	mov	r20, r7
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	4f 5f       	subi	r20, 0xFF	; 255
     e5a:	5f 4f       	sbci	r21, 0xFF	; 255
     e5c:	24 0f       	add	r18, r20
     e5e:	35 1f       	adc	r19, r21
     e60:	46 2d       	mov	r20, r6
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	24 17       	cp	r18, r20
     e66:	35 07       	cpc	r19, r21
     e68:	14 f4       	brge	.+4      	; 0xe6e <vfprintf+0x2e8>
     e6a:	62 1a       	sub	r6, r18
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <vfprintf+0x2ea>
     e6e:	61 2c       	mov	r6, r1
     e70:	85 2d       	mov	r24, r5
     e72:	89 70       	andi	r24, 0x09	; 9
     e74:	49 f4       	brne	.+18     	; 0xe88 <vfprintf+0x302>
     e76:	06 c0       	rjmp	.+12     	; 0xe84 <vfprintf+0x2fe>
     e78:	b7 01       	movw	r22, r14
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     e82:	6a 94       	dec	r6
     e84:	61 10       	cpse	r6, r1
     e86:	f8 cf       	rjmp	.-16     	; 0xe78 <vfprintf+0x2f2>
     e88:	dd 20       	and	r13, r13
     e8a:	29 f0       	breq	.+10     	; 0xe96 <vfprintf+0x310>
     e8c:	b7 01       	movw	r22, r14
     e8e:	8d 2d       	mov	r24, r13
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     e96:	53 fc       	sbrc	r5, 3
     e98:	09 c0       	rjmp	.+18     	; 0xeac <vfprintf+0x326>
     e9a:	06 c0       	rjmp	.+12     	; 0xea8 <vfprintf+0x322>
     e9c:	b7 01       	movw	r22, r14
     e9e:	80 e3       	ldi	r24, 0x30	; 48
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     ea6:	6a 94       	dec	r6
     ea8:	61 10       	cpse	r6, r1
     eaa:	f8 cf       	rjmp	.-16     	; 0xe9c <vfprintf+0x316>
     eac:	57 fe       	sbrs	r5, 7
     eae:	56 c0       	rjmp	.+172    	; 0xf5c <vfprintf+0x3d6>
     eb0:	68 01       	movw	r12, r16
     eb2:	17 ff       	sbrs	r17, 7
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <vfprintf+0x334>
     eb6:	c1 2c       	mov	r12, r1
     eb8:	d1 2c       	mov	r13, r1
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	a8 01       	movw	r20, r16
     ec0:	44 19       	sub	r20, r4
     ec2:	51 09       	sbc	r21, r1
     ec4:	5e 87       	std	Y+14, r21	; 0x0e
     ec6:	4d 87       	std	Y+13, r20	; 0x0d
     ec8:	28 01       	movw	r4, r16
     eca:	4c 18       	sub	r4, r12
     ecc:	5d 08       	sbc	r5, r13
     ece:	48 0c       	add	r4, r8
     ed0:	59 1c       	adc	r5, r9
     ed2:	87 2d       	mov	r24, r7
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	44 27       	eor	r20, r20
     ed8:	55 27       	eor	r21, r21
     eda:	48 1b       	sub	r20, r24
     edc:	59 0b       	sbc	r21, r25
     ede:	58 8b       	std	Y+16, r21	; 0x10
     ee0:	4f 87       	std	Y+15, r20	; 0x0f
     ee2:	5f ef       	ldi	r21, 0xFF	; 255
     ee4:	c5 16       	cp	r12, r21
     ee6:	d5 06       	cpc	r13, r21
     ee8:	49 f4       	brne	.+18     	; 0xefc <vfprintf+0x376>
     eea:	b7 01       	movw	r22, r14
     eec:	8e e2       	ldi	r24, 0x2E	; 46
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	2a 8b       	std	Y+18, r18	; 0x12
     ef2:	39 8b       	std	Y+17, r19	; 0x11
     ef4:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     ef8:	39 89       	ldd	r19, Y+17	; 0x11
     efa:	2a 89       	ldd	r18, Y+18	; 0x12
     efc:	0c 15       	cp	r16, r12
     efe:	1d 05       	cpc	r17, r13
     f00:	54 f0       	brlt	.+20     	; 0xf16 <vfprintf+0x390>
     f02:	4d 85       	ldd	r20, Y+13	; 0x0d
     f04:	5e 85       	ldd	r21, Y+14	; 0x0e
     f06:	4c 15       	cp	r20, r12
     f08:	5d 05       	cpc	r21, r13
     f0a:	2c f4       	brge	.+10     	; 0xf16 <vfprintf+0x390>
     f0c:	f2 01       	movw	r30, r4
     f0e:	e2 0f       	add	r30, r18
     f10:	f3 1f       	adc	r31, r19
     f12:	81 81       	ldd	r24, Z+1	; 0x01
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <vfprintf+0x392>
     f16:	80 e3       	ldi	r24, 0x30	; 48
     f18:	51 e0       	ldi	r21, 0x01	; 1
     f1a:	c5 1a       	sub	r12, r21
     f1c:	d1 08       	sbc	r13, r1
     f1e:	2f 5f       	subi	r18, 0xFF	; 255
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	4f 85       	ldd	r20, Y+15	; 0x0f
     f24:	58 89       	ldd	r21, Y+16	; 0x10
     f26:	c4 16       	cp	r12, r20
     f28:	d5 06       	cpc	r13, r21
     f2a:	4c f0       	brlt	.+18     	; 0xf3e <vfprintf+0x3b8>
     f2c:	b7 01       	movw	r22, r14
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	2a 8b       	std	Y+18, r18	; 0x12
     f32:	39 8b       	std	Y+17, r19	; 0x11
     f34:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     f38:	2a 89       	ldd	r18, Y+18	; 0x12
     f3a:	39 89       	ldd	r19, Y+17	; 0x11
     f3c:	d2 cf       	rjmp	.-92     	; 0xee2 <vfprintf+0x35c>
     f3e:	c0 16       	cp	r12, r16
     f40:	d1 06       	cpc	r13, r17
     f42:	49 f4       	brne	.+18     	; 0xf56 <vfprintf+0x3d0>
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	96 33       	cpi	r25, 0x36	; 54
     f48:	28 f4       	brcc	.+10     	; 0xf54 <vfprintf+0x3ce>
     f4a:	95 33       	cpi	r25, 0x35	; 53
     f4c:	21 f4       	brne	.+8      	; 0xf56 <vfprintf+0x3d0>
     f4e:	5c 85       	ldd	r21, Y+12	; 0x0c
     f50:	54 fd       	sbrc	r21, 4
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <vfprintf+0x3d0>
     f54:	81 e3       	ldi	r24, 0x31	; 49
     f56:	b7 01       	movw	r22, r14
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	4a c0       	rjmp	.+148    	; 0xff0 <vfprintf+0x46a>
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	81 33       	cpi	r24, 0x31	; 49
     f60:	19 f0       	breq	.+6      	; 0xf68 <vfprintf+0x3e2>
     f62:	4c 85       	ldd	r20, Y+12	; 0x0c
     f64:	4f 7e       	andi	r20, 0xEF	; 239
     f66:	4c 87       	std	Y+12, r20	; 0x0c
     f68:	b7 01       	movw	r22, r14
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     f70:	71 10       	cpse	r7, r1
     f72:	05 c0       	rjmp	.+10     	; 0xf7e <vfprintf+0x3f8>
     f74:	54 fe       	sbrs	r5, 4
     f76:	16 c0       	rjmp	.+44     	; 0xfa4 <vfprintf+0x41e>
     f78:	85 e4       	ldi	r24, 0x45	; 69
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	15 c0       	rjmp	.+42     	; 0xfa8 <vfprintf+0x422>
     f7e:	b7 01       	movw	r22, r14
     f80:	8e e2       	ldi	r24, 0x2E	; 46
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     f88:	42 e0       	ldi	r20, 0x02	; 2
     f8a:	d4 2e       	mov	r13, r20
     f8c:	f4 01       	movw	r30, r8
     f8e:	ed 0d       	add	r30, r13
     f90:	f1 1d       	adc	r31, r1
     f92:	d3 94       	inc	r13
     f94:	b7 01       	movw	r22, r14
     f96:	80 81       	ld	r24, Z
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     f9e:	7a 94       	dec	r7
     fa0:	a9 f7       	brne	.-22     	; 0xf8c <vfprintf+0x406>
     fa2:	e8 cf       	rjmp	.-48     	; 0xf74 <vfprintf+0x3ee>
     fa4:	85 e6       	ldi	r24, 0x65	; 101
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	b7 01       	movw	r22, r14
     faa:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     fae:	17 fd       	sbrc	r17, 7
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <vfprintf+0x438>
     fb2:	01 15       	cp	r16, r1
     fb4:	11 05       	cpc	r17, r1
     fb6:	41 f4       	brne	.+16     	; 0xfc8 <vfprintf+0x442>
     fb8:	5c 85       	ldd	r21, Y+12	; 0x0c
     fba:	54 ff       	sbrs	r21, 4
     fbc:	05 c0       	rjmp	.+10     	; 0xfc8 <vfprintf+0x442>
     fbe:	11 95       	neg	r17
     fc0:	01 95       	neg	r16
     fc2:	11 09       	sbc	r17, r1
     fc4:	8d e2       	ldi	r24, 0x2D	; 45
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <vfprintf+0x444>
     fc8:	8b e2       	ldi	r24, 0x2B	; 43
     fca:	b7 01       	movw	r22, r14
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     fd2:	80 e3       	ldi	r24, 0x30	; 48
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <vfprintf+0x456>
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	0a 50       	subi	r16, 0x0A	; 10
     fda:	11 09       	sbc	r17, r1
     fdc:	0a 30       	cpi	r16, 0x0A	; 10
     fde:	11 05       	cpc	r17, r1
     fe0:	d4 f7       	brge	.-12     	; 0xfd6 <vfprintf+0x450>
     fe2:	b7 01       	movw	r22, r14
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     fea:	b7 01       	movw	r22, r14
     fec:	c8 01       	movw	r24, r16
     fee:	c0 96       	adiw	r24, 0x30	; 48
     ff0:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     ff4:	50 c1       	rjmp	.+672    	; 0x1296 <vfprintf+0x710>
     ff6:	83 36       	cpi	r24, 0x63	; 99
     ff8:	31 f0       	breq	.+12     	; 0x1006 <vfprintf+0x480>
     ffa:	83 37       	cpi	r24, 0x73	; 115
     ffc:	81 f0       	breq	.+32     	; 0x101e <vfprintf+0x498>
     ffe:	83 35       	cpi	r24, 0x53	; 83
    1000:	09 f0       	breq	.+2      	; 0x1004 <vfprintf+0x47e>
    1002:	5e c0       	rjmp	.+188    	; 0x10c0 <vfprintf+0x53a>
    1004:	24 c0       	rjmp	.+72     	; 0x104e <vfprintf+0x4c8>
    1006:	56 01       	movw	r10, r12
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	a8 0e       	add	r10, r24
    100c:	b1 1c       	adc	r11, r1
    100e:	f6 01       	movw	r30, r12
    1010:	80 81       	ld	r24, Z
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	cc 24       	eor	r12, r12
    1016:	c3 94       	inc	r12
    1018:	d1 2c       	mov	r13, r1
    101a:	84 01       	movw	r16, r8
    101c:	14 c0       	rjmp	.+40     	; 0x1046 <vfprintf+0x4c0>
    101e:	56 01       	movw	r10, r12
    1020:	f2 e0       	ldi	r31, 0x02	; 2
    1022:	af 0e       	add	r10, r31
    1024:	b1 1c       	adc	r11, r1
    1026:	f6 01       	movw	r30, r12
    1028:	00 81       	ld	r16, Z
    102a:	11 81       	ldd	r17, Z+1	; 0x01
    102c:	26 ff       	sbrs	r18, 6
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <vfprintf+0x4b0>
    1030:	67 2d       	mov	r22, r7
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <vfprintf+0x4b4>
    1036:	6f ef       	ldi	r22, 0xFF	; 255
    1038:	7f ef       	ldi	r23, 0xFF	; 255
    103a:	c8 01       	movw	r24, r16
    103c:	2a 8b       	std	Y+18, r18	; 0x12
    103e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strnlen>
    1042:	6c 01       	movw	r12, r24
    1044:	2a 89       	ldd	r18, Y+18	; 0x12
    1046:	9f e7       	ldi	r25, 0x7F	; 127
    1048:	59 2e       	mov	r5, r25
    104a:	52 22       	and	r5, r18
    104c:	17 c0       	rjmp	.+46     	; 0x107c <vfprintf+0x4f6>
    104e:	56 01       	movw	r10, r12
    1050:	f2 e0       	ldi	r31, 0x02	; 2
    1052:	af 0e       	add	r10, r31
    1054:	b1 1c       	adc	r11, r1
    1056:	f6 01       	movw	r30, r12
    1058:	00 81       	ld	r16, Z
    105a:	11 81       	ldd	r17, Z+1	; 0x01
    105c:	26 ff       	sbrs	r18, 6
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <vfprintf+0x4e0>
    1060:	67 2d       	mov	r22, r7
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <vfprintf+0x4e4>
    1066:	6f ef       	ldi	r22, 0xFF	; 255
    1068:	7f ef       	ldi	r23, 0xFF	; 255
    106a:	c8 01       	movw	r24, r16
    106c:	2a 8b       	std	Y+18, r18	; 0x12
    106e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <strnlen_P>
    1072:	6c 01       	movw	r12, r24
    1074:	2a 89       	ldd	r18, Y+18	; 0x12
    1076:	80 e8       	ldi	r24, 0x80	; 128
    1078:	58 2e       	mov	r5, r24
    107a:	52 2a       	or	r5, r18
    107c:	53 fc       	sbrc	r5, 3
    107e:	1c c0       	rjmp	.+56     	; 0x10b8 <vfprintf+0x532>
    1080:	06 c0       	rjmp	.+12     	; 0x108e <vfprintf+0x508>
    1082:	b7 01       	movw	r22, r14
    1084:	80 e2       	ldi	r24, 0x20	; 32
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    108c:	6a 94       	dec	r6
    108e:	86 2d       	mov	r24, r6
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	c8 16       	cp	r12, r24
    1094:	d9 06       	cpc	r13, r25
    1096:	a8 f3       	brcs	.-22     	; 0x1082 <vfprintf+0x4fc>
    1098:	0f c0       	rjmp	.+30     	; 0x10b8 <vfprintf+0x532>
    109a:	f8 01       	movw	r30, r16
    109c:	57 fc       	sbrc	r5, 7
    109e:	85 91       	lpm	r24, Z+
    10a0:	57 fe       	sbrs	r5, 7
    10a2:	81 91       	ld	r24, Z+
    10a4:	8f 01       	movw	r16, r30
    10a6:	b7 01       	movw	r22, r14
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    10ae:	61 10       	cpse	r6, r1
    10b0:	6a 94       	dec	r6
    10b2:	f1 e0       	ldi	r31, 0x01	; 1
    10b4:	cf 1a       	sub	r12, r31
    10b6:	d1 08       	sbc	r13, r1
    10b8:	c1 14       	cp	r12, r1
    10ba:	d1 04       	cpc	r13, r1
    10bc:	71 f7       	brne	.-36     	; 0x109a <vfprintf+0x514>
    10be:	eb c0       	rjmp	.+470    	; 0x1296 <vfprintf+0x710>
    10c0:	84 36       	cpi	r24, 0x64	; 100
    10c2:	11 f0       	breq	.+4      	; 0x10c8 <vfprintf+0x542>
    10c4:	89 36       	cpi	r24, 0x69	; 105
    10c6:	51 f5       	brne	.+84     	; 0x111c <vfprintf+0x596>
    10c8:	56 01       	movw	r10, r12
    10ca:	27 ff       	sbrs	r18, 7
    10cc:	09 c0       	rjmp	.+18     	; 0x10e0 <vfprintf+0x55a>
    10ce:	44 e0       	ldi	r20, 0x04	; 4
    10d0:	a4 0e       	add	r10, r20
    10d2:	b1 1c       	adc	r11, r1
    10d4:	f6 01       	movw	r30, r12
    10d6:	60 81       	ld	r22, Z
    10d8:	71 81       	ldd	r23, Z+1	; 0x01
    10da:	82 81       	ldd	r24, Z+2	; 0x02
    10dc:	93 81       	ldd	r25, Z+3	; 0x03
    10de:	0a c0       	rjmp	.+20     	; 0x10f4 <vfprintf+0x56e>
    10e0:	f2 e0       	ldi	r31, 0x02	; 2
    10e2:	af 0e       	add	r10, r31
    10e4:	b1 1c       	adc	r11, r1
    10e6:	f6 01       	movw	r30, r12
    10e8:	60 81       	ld	r22, Z
    10ea:	71 81       	ldd	r23, Z+1	; 0x01
    10ec:	88 27       	eor	r24, r24
    10ee:	77 fd       	sbrc	r23, 7
    10f0:	80 95       	com	r24
    10f2:	98 2f       	mov	r25, r24
    10f4:	12 2f       	mov	r17, r18
    10f6:	1f 76       	andi	r17, 0x6F	; 111
    10f8:	97 ff       	sbrs	r25, 7
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <vfprintf+0x586>
    10fc:	90 95       	com	r25
    10fe:	80 95       	com	r24
    1100:	70 95       	com	r23
    1102:	61 95       	neg	r22
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	8f 4f       	sbci	r24, 0xFF	; 255
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	10 68       	ori	r17, 0x80	; 128
    110c:	2a e0       	ldi	r18, 0x0A	; 10
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	a4 01       	movw	r20, r8
    1112:	0e 94 df 0a 	call	0x15be	; 0x15be <__ultoa_invert>
    1116:	d8 2e       	mov	r13, r24
    1118:	d8 18       	sub	r13, r8
    111a:	40 c0       	rjmp	.+128    	; 0x119c <vfprintf+0x616>
    111c:	12 2f       	mov	r17, r18
    111e:	85 37       	cpi	r24, 0x75	; 117
    1120:	21 f4       	brne	.+8      	; 0x112a <vfprintf+0x5a4>
    1122:	1f 7e       	andi	r17, 0xEF	; 239
    1124:	2a e0       	ldi	r18, 0x0A	; 10
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	1f c0       	rjmp	.+62     	; 0x1168 <vfprintf+0x5e2>
    112a:	19 7f       	andi	r17, 0xF9	; 249
    112c:	8f 36       	cpi	r24, 0x6F	; 111
    112e:	a1 f0       	breq	.+40     	; 0x1158 <vfprintf+0x5d2>
    1130:	20 f4       	brcc	.+8      	; 0x113a <vfprintf+0x5b4>
    1132:	88 35       	cpi	r24, 0x58	; 88
    1134:	09 f0       	breq	.+2      	; 0x1138 <vfprintf+0x5b2>
    1136:	b2 c0       	rjmp	.+356    	; 0x129c <vfprintf+0x716>
    1138:	0b c0       	rjmp	.+22     	; 0x1150 <vfprintf+0x5ca>
    113a:	80 37       	cpi	r24, 0x70	; 112
    113c:	21 f0       	breq	.+8      	; 0x1146 <vfprintf+0x5c0>
    113e:	88 37       	cpi	r24, 0x78	; 120
    1140:	09 f0       	breq	.+2      	; 0x1144 <vfprintf+0x5be>
    1142:	ac c0       	rjmp	.+344    	; 0x129c <vfprintf+0x716>
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <vfprintf+0x5c2>
    1146:	10 61       	ori	r17, 0x10	; 16
    1148:	14 ff       	sbrs	r17, 4
    114a:	09 c0       	rjmp	.+18     	; 0x115e <vfprintf+0x5d8>
    114c:	14 60       	ori	r17, 0x04	; 4
    114e:	07 c0       	rjmp	.+14     	; 0x115e <vfprintf+0x5d8>
    1150:	24 ff       	sbrs	r18, 4
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <vfprintf+0x5de>
    1154:	16 60       	ori	r17, 0x06	; 6
    1156:	06 c0       	rjmp	.+12     	; 0x1164 <vfprintf+0x5de>
    1158:	28 e0       	ldi	r18, 0x08	; 8
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <vfprintf+0x5e2>
    115e:	20 e1       	ldi	r18, 0x10	; 16
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <vfprintf+0x5e2>
    1164:	20 e1       	ldi	r18, 0x10	; 16
    1166:	32 e0       	ldi	r19, 0x02	; 2
    1168:	56 01       	movw	r10, r12
    116a:	17 ff       	sbrs	r17, 7
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <vfprintf+0x5fa>
    116e:	f4 e0       	ldi	r31, 0x04	; 4
    1170:	af 0e       	add	r10, r31
    1172:	b1 1c       	adc	r11, r1
    1174:	f6 01       	movw	r30, r12
    1176:	60 81       	ld	r22, Z
    1178:	71 81       	ldd	r23, Z+1	; 0x01
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	08 c0       	rjmp	.+16     	; 0x1190 <vfprintf+0x60a>
    1180:	f2 e0       	ldi	r31, 0x02	; 2
    1182:	af 0e       	add	r10, r31
    1184:	b1 1c       	adc	r11, r1
    1186:	f6 01       	movw	r30, r12
    1188:	60 81       	ld	r22, Z
    118a:	71 81       	ldd	r23, Z+1	; 0x01
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a4 01       	movw	r20, r8
    1192:	0e 94 df 0a 	call	0x15be	; 0x15be <__ultoa_invert>
    1196:	d8 2e       	mov	r13, r24
    1198:	d8 18       	sub	r13, r8
    119a:	1f 77       	andi	r17, 0x7F	; 127
    119c:	16 ff       	sbrs	r17, 6
    119e:	0b c0       	rjmp	.+22     	; 0x11b6 <vfprintf+0x630>
    11a0:	21 2f       	mov	r18, r17
    11a2:	2e 7f       	andi	r18, 0xFE	; 254
    11a4:	d7 14       	cp	r13, r7
    11a6:	50 f4       	brcc	.+20     	; 0x11bc <vfprintf+0x636>
    11a8:	14 ff       	sbrs	r17, 4
    11aa:	0a c0       	rjmp	.+20     	; 0x11c0 <vfprintf+0x63a>
    11ac:	12 fd       	sbrc	r17, 2
    11ae:	08 c0       	rjmp	.+16     	; 0x11c0 <vfprintf+0x63a>
    11b0:	21 2f       	mov	r18, r17
    11b2:	2e 7e       	andi	r18, 0xEE	; 238
    11b4:	05 c0       	rjmp	.+10     	; 0x11c0 <vfprintf+0x63a>
    11b6:	0d 2d       	mov	r16, r13
    11b8:	21 2f       	mov	r18, r17
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <vfprintf+0x63c>
    11bc:	0d 2d       	mov	r16, r13
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <vfprintf+0x63c>
    11c0:	07 2d       	mov	r16, r7
    11c2:	24 ff       	sbrs	r18, 4
    11c4:	0c c0       	rjmp	.+24     	; 0x11de <vfprintf+0x658>
    11c6:	fe 01       	movw	r30, r28
    11c8:	ed 0d       	add	r30, r13
    11ca:	f1 1d       	adc	r31, r1
    11cc:	80 81       	ld	r24, Z
    11ce:	80 33       	cpi	r24, 0x30	; 48
    11d0:	11 f4       	brne	.+4      	; 0x11d6 <vfprintf+0x650>
    11d2:	29 7e       	andi	r18, 0xE9	; 233
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <vfprintf+0x660>
    11d6:	22 ff       	sbrs	r18, 2
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <vfprintf+0x65e>
    11da:	0e 5f       	subi	r16, 0xFE	; 254
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <vfprintf+0x660>
    11de:	82 2f       	mov	r24, r18
    11e0:	86 78       	andi	r24, 0x86	; 134
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <vfprintf+0x660>
    11e4:	0f 5f       	subi	r16, 0xFF	; 255
    11e6:	23 fd       	sbrc	r18, 3
    11e8:	14 c0       	rjmp	.+40     	; 0x1212 <vfprintf+0x68c>
    11ea:	20 ff       	sbrs	r18, 0
    11ec:	0f c0       	rjmp	.+30     	; 0x120c <vfprintf+0x686>
    11ee:	7d 2c       	mov	r7, r13
    11f0:	06 15       	cp	r16, r6
    11f2:	60 f4       	brcc	.+24     	; 0x120c <vfprintf+0x686>
    11f4:	76 0c       	add	r7, r6
    11f6:	70 1a       	sub	r7, r16
    11f8:	06 2d       	mov	r16, r6
    11fa:	08 c0       	rjmp	.+16     	; 0x120c <vfprintf+0x686>
    11fc:	b7 01       	movw	r22, r14
    11fe:	80 e2       	ldi	r24, 0x20	; 32
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	2a 8b       	std	Y+18, r18	; 0x12
    1204:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    1208:	0f 5f       	subi	r16, 0xFF	; 255
    120a:	2a 89       	ldd	r18, Y+18	; 0x12
    120c:	06 15       	cp	r16, r6
    120e:	b0 f3       	brcs	.-20     	; 0x11fc <vfprintf+0x676>
    1210:	04 c0       	rjmp	.+8      	; 0x121a <vfprintf+0x694>
    1212:	06 15       	cp	r16, r6
    1214:	10 f4       	brcc	.+4      	; 0x121a <vfprintf+0x694>
    1216:	60 1a       	sub	r6, r16
    1218:	01 c0       	rjmp	.+2      	; 0x121c <vfprintf+0x696>
    121a:	61 2c       	mov	r6, r1
    121c:	24 ff       	sbrs	r18, 4
    121e:	12 c0       	rjmp	.+36     	; 0x1244 <vfprintf+0x6be>
    1220:	b7 01       	movw	r22, r14
    1222:	80 e3       	ldi	r24, 0x30	; 48
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	2a 8b       	std	Y+18, r18	; 0x12
    1228:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    122c:	2a 89       	ldd	r18, Y+18	; 0x12
    122e:	22 ff       	sbrs	r18, 2
    1230:	1e c0       	rjmp	.+60     	; 0x126e <vfprintf+0x6e8>
    1232:	21 ff       	sbrs	r18, 1
    1234:	03 c0       	rjmp	.+6      	; 0x123c <vfprintf+0x6b6>
    1236:	88 e5       	ldi	r24, 0x58	; 88
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <vfprintf+0x6ba>
    123c:	88 e7       	ldi	r24, 0x78	; 120
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	b7 01       	movw	r22, r14
    1242:	0c c0       	rjmp	.+24     	; 0x125c <vfprintf+0x6d6>
    1244:	82 2f       	mov	r24, r18
    1246:	86 78       	andi	r24, 0x86	; 134
    1248:	91 f0       	breq	.+36     	; 0x126e <vfprintf+0x6e8>
    124a:	21 fd       	sbrc	r18, 1
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <vfprintf+0x6cc>
    124e:	80 e2       	ldi	r24, 0x20	; 32
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <vfprintf+0x6ce>
    1252:	8b e2       	ldi	r24, 0x2B	; 43
    1254:	27 fd       	sbrc	r18, 7
    1256:	8d e2       	ldi	r24, 0x2D	; 45
    1258:	b7 01       	movw	r22, r14
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    1260:	06 c0       	rjmp	.+12     	; 0x126e <vfprintf+0x6e8>
    1262:	b7 01       	movw	r22, r14
    1264:	80 e3       	ldi	r24, 0x30	; 48
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    126c:	7a 94       	dec	r7
    126e:	d7 14       	cp	r13, r7
    1270:	c0 f3       	brcs	.-16     	; 0x1262 <vfprintf+0x6dc>
    1272:	da 94       	dec	r13
    1274:	f4 01       	movw	r30, r8
    1276:	ed 0d       	add	r30, r13
    1278:	f1 1d       	adc	r31, r1
    127a:	b7 01       	movw	r22, r14
    127c:	80 81       	ld	r24, Z
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    1284:	d1 10       	cpse	r13, r1
    1286:	f5 cf       	rjmp	.-22     	; 0x1272 <vfprintf+0x6ec>
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <vfprintf+0x710>
    128a:	b7 01       	movw	r22, r14
    128c:	80 e2       	ldi	r24, 0x20	; 32
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    1294:	6a 94       	dec	r6
    1296:	61 10       	cpse	r6, r1
    1298:	f8 cf       	rjmp	.-16     	; 0x128a <vfprintf+0x704>
    129a:	99 cc       	rjmp	.-1742   	; 0xbce <vfprintf+0x48>
    129c:	f7 01       	movw	r30, r14
    129e:	26 81       	ldd	r18, Z+6	; 0x06
    12a0:	37 81       	ldd	r19, Z+7	; 0x07
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <vfprintf+0x722>
    12a4:	2f ef       	ldi	r18, 0xFF	; 255
    12a6:	3f ef       	ldi	r19, 0xFF	; 255
    12a8:	c9 01       	movw	r24, r18
    12aa:	62 96       	adiw	r28, 0x12	; 18
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	df 90       	pop	r13
    12c4:	cf 90       	pop	r12
    12c6:	bf 90       	pop	r11
    12c8:	af 90       	pop	r10
    12ca:	9f 90       	pop	r9
    12cc:	8f 90       	pop	r8
    12ce:	7f 90       	pop	r7
    12d0:	6f 90       	pop	r6
    12d2:	5f 90       	pop	r5
    12d4:	4f 90       	pop	r4
    12d6:	3f 90       	pop	r3
    12d8:	2f 90       	pop	r2
    12da:	08 95       	ret

000012dc <__udivmodhi4>:
    12dc:	aa 1b       	sub	r26, r26
    12de:	bb 1b       	sub	r27, r27
    12e0:	51 e1       	ldi	r21, 0x11	; 17
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <__udivmodhi4_ep>

000012e4 <__udivmodhi4_loop>:
    12e4:	aa 1f       	adc	r26, r26
    12e6:	bb 1f       	adc	r27, r27
    12e8:	a6 17       	cp	r26, r22
    12ea:	b7 07       	cpc	r27, r23
    12ec:	10 f0       	brcs	.+4      	; 0x12f2 <__udivmodhi4_ep>
    12ee:	a6 1b       	sub	r26, r22
    12f0:	b7 0b       	sbc	r27, r23

000012f2 <__udivmodhi4_ep>:
    12f2:	88 1f       	adc	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	5a 95       	dec	r21
    12f8:	a9 f7       	brne	.-22     	; 0x12e4 <__udivmodhi4_loop>
    12fa:	80 95       	com	r24
    12fc:	90 95       	com	r25
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	08 95       	ret

00001304 <__divmodhi4>:
    1304:	97 fb       	bst	r25, 7
    1306:	07 2e       	mov	r0, r23
    1308:	16 f4       	brtc	.+4      	; 0x130e <__divmodhi4+0xa>
    130a:	00 94       	com	r0
    130c:	07 d0       	rcall	.+14     	; 0x131c <__divmodhi4_neg1>
    130e:	77 fd       	sbrc	r23, 7
    1310:	09 d0       	rcall	.+18     	; 0x1324 <__divmodhi4_neg2>
    1312:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__udivmodhi4>
    1316:	07 fc       	sbrc	r0, 7
    1318:	05 d0       	rcall	.+10     	; 0x1324 <__divmodhi4_neg2>
    131a:	3e f4       	brtc	.+14     	; 0x132a <__divmodhi4_exit>

0000131c <__divmodhi4_neg1>:
    131c:	90 95       	com	r25
    131e:	81 95       	neg	r24
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	08 95       	ret

00001324 <__divmodhi4_neg2>:
    1324:	70 95       	com	r23
    1326:	61 95       	neg	r22
    1328:	7f 4f       	sbci	r23, 0xFF	; 255

0000132a <__divmodhi4_exit>:
    132a:	08 95       	ret

0000132c <__ftoa_engine>:
    132c:	28 30       	cpi	r18, 0x08	; 8
    132e:	08 f0       	brcs	.+2      	; 0x1332 <__ftoa_engine+0x6>
    1330:	27 e0       	ldi	r18, 0x07	; 7
    1332:	33 27       	eor	r19, r19
    1334:	da 01       	movw	r26, r20
    1336:	99 0f       	add	r25, r25
    1338:	31 1d       	adc	r19, r1
    133a:	87 fd       	sbrc	r24, 7
    133c:	91 60       	ori	r25, 0x01	; 1
    133e:	00 96       	adiw	r24, 0x00	; 0
    1340:	61 05       	cpc	r22, r1
    1342:	71 05       	cpc	r23, r1
    1344:	39 f4       	brne	.+14     	; 0x1354 <__ftoa_engine+0x28>
    1346:	32 60       	ori	r19, 0x02	; 2
    1348:	2e 5f       	subi	r18, 0xFE	; 254
    134a:	3d 93       	st	X+, r19
    134c:	30 e3       	ldi	r19, 0x30	; 48
    134e:	2a 95       	dec	r18
    1350:	e1 f7       	brne	.-8      	; 0x134a <__ftoa_engine+0x1e>
    1352:	08 95       	ret
    1354:	9f 3f       	cpi	r25, 0xFF	; 255
    1356:	30 f0       	brcs	.+12     	; 0x1364 <__ftoa_engine+0x38>
    1358:	80 38       	cpi	r24, 0x80	; 128
    135a:	71 05       	cpc	r23, r1
    135c:	61 05       	cpc	r22, r1
    135e:	09 f0       	breq	.+2      	; 0x1362 <__ftoa_engine+0x36>
    1360:	3c 5f       	subi	r19, 0xFC	; 252
    1362:	3c 5f       	subi	r19, 0xFC	; 252
    1364:	3d 93       	st	X+, r19
    1366:	91 30       	cpi	r25, 0x01	; 1
    1368:	08 f0       	brcs	.+2      	; 0x136c <__ftoa_engine+0x40>
    136a:	80 68       	ori	r24, 0x80	; 128
    136c:	91 1d       	adc	r25, r1
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	1f 93       	push	r17
    1374:	0f 93       	push	r16
    1376:	ff 92       	push	r15
    1378:	ef 92       	push	r14
    137a:	19 2f       	mov	r17, r25
    137c:	98 7f       	andi	r25, 0xF8	; 248
    137e:	96 95       	lsr	r25
    1380:	e9 2f       	mov	r30, r25
    1382:	96 95       	lsr	r25
    1384:	96 95       	lsr	r25
    1386:	e9 0f       	add	r30, r25
    1388:	ff 27       	eor	r31, r31
    138a:	e3 5b       	subi	r30, 0xB3	; 179
    138c:	fe 4f       	sbci	r31, 0xFE	; 254
    138e:	99 27       	eor	r25, r25
    1390:	33 27       	eor	r19, r19
    1392:	ee 24       	eor	r14, r14
    1394:	ff 24       	eor	r15, r15
    1396:	a7 01       	movw	r20, r14
    1398:	e7 01       	movw	r28, r14
    139a:	05 90       	lpm	r0, Z+
    139c:	08 94       	sec
    139e:	07 94       	ror	r0
    13a0:	28 f4       	brcc	.+10     	; 0x13ac <__ftoa_engine+0x80>
    13a2:	36 0f       	add	r19, r22
    13a4:	e7 1e       	adc	r14, r23
    13a6:	f8 1e       	adc	r15, r24
    13a8:	49 1f       	adc	r20, r25
    13aa:	51 1d       	adc	r21, r1
    13ac:	66 0f       	add	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	88 1f       	adc	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	06 94       	lsr	r0
    13b6:	a1 f7       	brne	.-24     	; 0x13a0 <__ftoa_engine+0x74>
    13b8:	05 90       	lpm	r0, Z+
    13ba:	07 94       	ror	r0
    13bc:	28 f4       	brcc	.+10     	; 0x13c8 <__ftoa_engine+0x9c>
    13be:	e7 0e       	add	r14, r23
    13c0:	f8 1e       	adc	r15, r24
    13c2:	49 1f       	adc	r20, r25
    13c4:	56 1f       	adc	r21, r22
    13c6:	c1 1d       	adc	r28, r1
    13c8:	77 0f       	add	r23, r23
    13ca:	88 1f       	adc	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	66 1f       	adc	r22, r22
    13d0:	06 94       	lsr	r0
    13d2:	a1 f7       	brne	.-24     	; 0x13bc <__ftoa_engine+0x90>
    13d4:	05 90       	lpm	r0, Z+
    13d6:	07 94       	ror	r0
    13d8:	28 f4       	brcc	.+10     	; 0x13e4 <__ftoa_engine+0xb8>
    13da:	f8 0e       	add	r15, r24
    13dc:	49 1f       	adc	r20, r25
    13de:	56 1f       	adc	r21, r22
    13e0:	c7 1f       	adc	r28, r23
    13e2:	d1 1d       	adc	r29, r1
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	66 1f       	adc	r22, r22
    13ea:	77 1f       	adc	r23, r23
    13ec:	06 94       	lsr	r0
    13ee:	a1 f7       	brne	.-24     	; 0x13d8 <__ftoa_engine+0xac>
    13f0:	05 90       	lpm	r0, Z+
    13f2:	07 94       	ror	r0
    13f4:	20 f4       	brcc	.+8      	; 0x13fe <__ftoa_engine+0xd2>
    13f6:	49 0f       	add	r20, r25
    13f8:	56 1f       	adc	r21, r22
    13fa:	c7 1f       	adc	r28, r23
    13fc:	d8 1f       	adc	r29, r24
    13fe:	99 0f       	add	r25, r25
    1400:	66 1f       	adc	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	88 1f       	adc	r24, r24
    1406:	06 94       	lsr	r0
    1408:	a9 f7       	brne	.-22     	; 0x13f4 <__ftoa_engine+0xc8>
    140a:	84 91       	lpm	r24, Z
    140c:	10 95       	com	r17
    140e:	17 70       	andi	r17, 0x07	; 7
    1410:	41 f0       	breq	.+16     	; 0x1422 <__ftoa_engine+0xf6>
    1412:	d6 95       	lsr	r29
    1414:	c7 95       	ror	r28
    1416:	57 95       	ror	r21
    1418:	47 95       	ror	r20
    141a:	f7 94       	ror	r15
    141c:	e7 94       	ror	r14
    141e:	1a 95       	dec	r17
    1420:	c1 f7       	brne	.-16     	; 0x1412 <__ftoa_engine+0xe6>
    1422:	e3 ef       	ldi	r30, 0xF3	; 243
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	68 94       	set
    1428:	15 90       	lpm	r1, Z+
    142a:	15 91       	lpm	r17, Z+
    142c:	35 91       	lpm	r19, Z+
    142e:	65 91       	lpm	r22, Z+
    1430:	95 91       	lpm	r25, Z+
    1432:	05 90       	lpm	r0, Z+
    1434:	7f e2       	ldi	r23, 0x2F	; 47
    1436:	73 95       	inc	r23
    1438:	e1 18       	sub	r14, r1
    143a:	f1 0a       	sbc	r15, r17
    143c:	43 0b       	sbc	r20, r19
    143e:	56 0b       	sbc	r21, r22
    1440:	c9 0b       	sbc	r28, r25
    1442:	d0 09       	sbc	r29, r0
    1444:	c0 f7       	brcc	.-16     	; 0x1436 <__ftoa_engine+0x10a>
    1446:	e1 0c       	add	r14, r1
    1448:	f1 1e       	adc	r15, r17
    144a:	43 1f       	adc	r20, r19
    144c:	56 1f       	adc	r21, r22
    144e:	c9 1f       	adc	r28, r25
    1450:	d0 1d       	adc	r29, r0
    1452:	7e f4       	brtc	.+30     	; 0x1472 <__ftoa_engine+0x146>
    1454:	70 33       	cpi	r23, 0x30	; 48
    1456:	11 f4       	brne	.+4      	; 0x145c <__ftoa_engine+0x130>
    1458:	8a 95       	dec	r24
    145a:	e6 cf       	rjmp	.-52     	; 0x1428 <__ftoa_engine+0xfc>
    145c:	e8 94       	clt
    145e:	01 50       	subi	r16, 0x01	; 1
    1460:	30 f0       	brcs	.+12     	; 0x146e <__ftoa_engine+0x142>
    1462:	08 0f       	add	r16, r24
    1464:	0a f4       	brpl	.+2      	; 0x1468 <__ftoa_engine+0x13c>
    1466:	00 27       	eor	r16, r16
    1468:	02 17       	cp	r16, r18
    146a:	08 f4       	brcc	.+2      	; 0x146e <__ftoa_engine+0x142>
    146c:	20 2f       	mov	r18, r16
    146e:	23 95       	inc	r18
    1470:	02 2f       	mov	r16, r18
    1472:	7a 33       	cpi	r23, 0x3A	; 58
    1474:	28 f0       	brcs	.+10     	; 0x1480 <__ftoa_engine+0x154>
    1476:	79 e3       	ldi	r23, 0x39	; 57
    1478:	7d 93       	st	X+, r23
    147a:	2a 95       	dec	r18
    147c:	e9 f7       	brne	.-6      	; 0x1478 <__ftoa_engine+0x14c>
    147e:	10 c0       	rjmp	.+32     	; 0x14a0 <__ftoa_engine+0x174>
    1480:	7d 93       	st	X+, r23
    1482:	2a 95       	dec	r18
    1484:	89 f6       	brne	.-94     	; 0x1428 <__ftoa_engine+0xfc>
    1486:	06 94       	lsr	r0
    1488:	97 95       	ror	r25
    148a:	67 95       	ror	r22
    148c:	37 95       	ror	r19
    148e:	17 95       	ror	r17
    1490:	17 94       	ror	r1
    1492:	e1 18       	sub	r14, r1
    1494:	f1 0a       	sbc	r15, r17
    1496:	43 0b       	sbc	r20, r19
    1498:	56 0b       	sbc	r21, r22
    149a:	c9 0b       	sbc	r28, r25
    149c:	d0 09       	sbc	r29, r0
    149e:	98 f0       	brcs	.+38     	; 0x14c6 <__ftoa_engine+0x19a>
    14a0:	23 95       	inc	r18
    14a2:	7e 91       	ld	r23, -X
    14a4:	73 95       	inc	r23
    14a6:	7a 33       	cpi	r23, 0x3A	; 58
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <__ftoa_engine+0x180>
    14aa:	70 e3       	ldi	r23, 0x30	; 48
    14ac:	7c 93       	st	X, r23
    14ae:	20 13       	cpse	r18, r16
    14b0:	b8 f7       	brcc	.-18     	; 0x14a0 <__ftoa_engine+0x174>
    14b2:	7e 91       	ld	r23, -X
    14b4:	70 61       	ori	r23, 0x10	; 16
    14b6:	7d 93       	st	X+, r23
    14b8:	30 f0       	brcs	.+12     	; 0x14c6 <__ftoa_engine+0x19a>
    14ba:	83 95       	inc	r24
    14bc:	71 e3       	ldi	r23, 0x31	; 49
    14be:	7d 93       	st	X+, r23
    14c0:	70 e3       	ldi	r23, 0x30	; 48
    14c2:	2a 95       	dec	r18
    14c4:	e1 f7       	brne	.-8      	; 0x14be <__ftoa_engine+0x192>
    14c6:	11 24       	eor	r1, r1
    14c8:	ef 90       	pop	r14
    14ca:	ff 90       	pop	r15
    14cc:	0f 91       	pop	r16
    14ce:	1f 91       	pop	r17
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	99 27       	eor	r25, r25
    14d6:	87 fd       	sbrc	r24, 7
    14d8:	90 95       	com	r25
    14da:	08 95       	ret

000014dc <strnlen_P>:
    14dc:	fc 01       	movw	r30, r24
    14de:	05 90       	lpm	r0, Z+
    14e0:	61 50       	subi	r22, 0x01	; 1
    14e2:	70 40       	sbci	r23, 0x00	; 0
    14e4:	01 10       	cpse	r0, r1
    14e6:	d8 f7       	brcc	.-10     	; 0x14de <strnlen_P+0x2>
    14e8:	80 95       	com	r24
    14ea:	90 95       	com	r25
    14ec:	8e 0f       	add	r24, r30
    14ee:	9f 1f       	adc	r25, r31
    14f0:	08 95       	ret

000014f2 <strnlen>:
    14f2:	fc 01       	movw	r30, r24
    14f4:	61 50       	subi	r22, 0x01	; 1
    14f6:	70 40       	sbci	r23, 0x00	; 0
    14f8:	01 90       	ld	r0, Z+
    14fa:	01 10       	cpse	r0, r1
    14fc:	d8 f7       	brcc	.-10     	; 0x14f4 <strnlen+0x2>
    14fe:	80 95       	com	r24
    1500:	90 95       	com	r25
    1502:	8e 0f       	add	r24, r30
    1504:	9f 1f       	adc	r25, r31
    1506:	08 95       	ret

00001508 <fputc>:
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	8c 01       	movw	r16, r24
    1512:	eb 01       	movw	r28, r22
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	81 fd       	sbrc	r24, 1
    1518:	03 c0       	rjmp	.+6      	; 0x1520 <fputc+0x18>
    151a:	0f ef       	ldi	r16, 0xFF	; 255
    151c:	1f ef       	ldi	r17, 0xFF	; 255
    151e:	1a c0       	rjmp	.+52     	; 0x1554 <fputc+0x4c>
    1520:	82 ff       	sbrs	r24, 2
    1522:	0d c0       	rjmp	.+26     	; 0x153e <fputc+0x36>
    1524:	2e 81       	ldd	r18, Y+6	; 0x06
    1526:	3f 81       	ldd	r19, Y+7	; 0x07
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	9d 81       	ldd	r25, Y+5	; 0x05
    152c:	28 17       	cp	r18, r24
    152e:	39 07       	cpc	r19, r25
    1530:	64 f4       	brge	.+24     	; 0x154a <fputc+0x42>
    1532:	e8 81       	ld	r30, Y
    1534:	f9 81       	ldd	r31, Y+1	; 0x01
    1536:	01 93       	st	Z+, r16
    1538:	f9 83       	std	Y+1, r31	; 0x01
    153a:	e8 83       	st	Y, r30
    153c:	06 c0       	rjmp	.+12     	; 0x154a <fputc+0x42>
    153e:	e8 85       	ldd	r30, Y+8	; 0x08
    1540:	f9 85       	ldd	r31, Y+9	; 0x09
    1542:	80 2f       	mov	r24, r16
    1544:	09 95       	icall
    1546:	89 2b       	or	r24, r25
    1548:	41 f7       	brne	.-48     	; 0x151a <fputc+0x12>
    154a:	8e 81       	ldd	r24, Y+6	; 0x06
    154c:	9f 81       	ldd	r25, Y+7	; 0x07
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	9f 83       	std	Y+7, r25	; 0x07
    1552:	8e 83       	std	Y+6, r24	; 0x06
    1554:	c8 01       	movw	r24, r16
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	08 95       	ret

00001560 <sprintf>:
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	2e 97       	sbiw	r28, 0x0e	; 14
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	0d 89       	ldd	r16, Y+21	; 0x15
    157a:	1e 89       	ldd	r17, Y+22	; 0x16
    157c:	86 e0       	ldi	r24, 0x06	; 6
    157e:	8c 83       	std	Y+4, r24	; 0x04
    1580:	1a 83       	std	Y+2, r17	; 0x02
    1582:	09 83       	std	Y+1, r16	; 0x01
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	9f e7       	ldi	r25, 0x7F	; 127
    1588:	9e 83       	std	Y+6, r25	; 0x06
    158a:	8d 83       	std	Y+5, r24	; 0x05
    158c:	ce 01       	movw	r24, r28
    158e:	49 96       	adiw	r24, 0x19	; 25
    1590:	ac 01       	movw	r20, r24
    1592:	6f 89       	ldd	r22, Y+23	; 0x17
    1594:	78 8d       	ldd	r23, Y+24	; 0x18
    1596:	ce 01       	movw	r24, r28
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	0e 94 c3 05 	call	0xb86	; 0xb86 <vfprintf>
    159e:	ef 81       	ldd	r30, Y+7	; 0x07
    15a0:	f8 85       	ldd	r31, Y+8	; 0x08
    15a2:	e0 0f       	add	r30, r16
    15a4:	f1 1f       	adc	r31, r17
    15a6:	10 82       	st	Z, r1
    15a8:	2e 96       	adiw	r28, 0x0e	; 14
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	08 95       	ret

000015be <__ultoa_invert>:
    15be:	fa 01       	movw	r30, r20
    15c0:	aa 27       	eor	r26, r26
    15c2:	28 30       	cpi	r18, 0x08	; 8
    15c4:	51 f1       	breq	.+84     	; 0x161a <__ultoa_invert+0x5c>
    15c6:	20 31       	cpi	r18, 0x10	; 16
    15c8:	81 f1       	breq	.+96     	; 0x162a <__ultoa_invert+0x6c>
    15ca:	e8 94       	clt
    15cc:	6f 93       	push	r22
    15ce:	6e 7f       	andi	r22, 0xFE	; 254
    15d0:	6e 5f       	subi	r22, 0xFE	; 254
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	8f 4f       	sbci	r24, 0xFF	; 255
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	af 4f       	sbci	r26, 0xFF	; 255
    15da:	b1 e0       	ldi	r27, 0x01	; 1
    15dc:	3e d0       	rcall	.+124    	; 0x165a <__ultoa_invert+0x9c>
    15de:	b4 e0       	ldi	r27, 0x04	; 4
    15e0:	3c d0       	rcall	.+120    	; 0x165a <__ultoa_invert+0x9c>
    15e2:	67 0f       	add	r22, r23
    15e4:	78 1f       	adc	r23, r24
    15e6:	89 1f       	adc	r24, r25
    15e8:	9a 1f       	adc	r25, r26
    15ea:	a1 1d       	adc	r26, r1
    15ec:	68 0f       	add	r22, r24
    15ee:	79 1f       	adc	r23, r25
    15f0:	8a 1f       	adc	r24, r26
    15f2:	91 1d       	adc	r25, r1
    15f4:	a1 1d       	adc	r26, r1
    15f6:	6a 0f       	add	r22, r26
    15f8:	71 1d       	adc	r23, r1
    15fa:	81 1d       	adc	r24, r1
    15fc:	91 1d       	adc	r25, r1
    15fe:	a1 1d       	adc	r26, r1
    1600:	20 d0       	rcall	.+64     	; 0x1642 <__ultoa_invert+0x84>
    1602:	09 f4       	brne	.+2      	; 0x1606 <__ultoa_invert+0x48>
    1604:	68 94       	set
    1606:	3f 91       	pop	r19
    1608:	2a e0       	ldi	r18, 0x0A	; 10
    160a:	26 9f       	mul	r18, r22
    160c:	11 24       	eor	r1, r1
    160e:	30 19       	sub	r19, r0
    1610:	30 5d       	subi	r19, 0xD0	; 208
    1612:	31 93       	st	Z+, r19
    1614:	de f6       	brtc	.-74     	; 0x15cc <__ultoa_invert+0xe>
    1616:	cf 01       	movw	r24, r30
    1618:	08 95       	ret
    161a:	46 2f       	mov	r20, r22
    161c:	47 70       	andi	r20, 0x07	; 7
    161e:	40 5d       	subi	r20, 0xD0	; 208
    1620:	41 93       	st	Z+, r20
    1622:	b3 e0       	ldi	r27, 0x03	; 3
    1624:	0f d0       	rcall	.+30     	; 0x1644 <__ultoa_invert+0x86>
    1626:	c9 f7       	brne	.-14     	; 0x161a <__ultoa_invert+0x5c>
    1628:	f6 cf       	rjmp	.-20     	; 0x1616 <__ultoa_invert+0x58>
    162a:	46 2f       	mov	r20, r22
    162c:	4f 70       	andi	r20, 0x0F	; 15
    162e:	40 5d       	subi	r20, 0xD0	; 208
    1630:	4a 33       	cpi	r20, 0x3A	; 58
    1632:	18 f0       	brcs	.+6      	; 0x163a <__ultoa_invert+0x7c>
    1634:	49 5d       	subi	r20, 0xD9	; 217
    1636:	31 fd       	sbrc	r19, 1
    1638:	40 52       	subi	r20, 0x20	; 32
    163a:	41 93       	st	Z+, r20
    163c:	02 d0       	rcall	.+4      	; 0x1642 <__ultoa_invert+0x84>
    163e:	a9 f7       	brne	.-22     	; 0x162a <__ultoa_invert+0x6c>
    1640:	ea cf       	rjmp	.-44     	; 0x1616 <__ultoa_invert+0x58>
    1642:	b4 e0       	ldi	r27, 0x04	; 4
    1644:	a6 95       	lsr	r26
    1646:	97 95       	ror	r25
    1648:	87 95       	ror	r24
    164a:	77 95       	ror	r23
    164c:	67 95       	ror	r22
    164e:	ba 95       	dec	r27
    1650:	c9 f7       	brne	.-14     	; 0x1644 <__ultoa_invert+0x86>
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	61 05       	cpc	r22, r1
    1656:	71 05       	cpc	r23, r1
    1658:	08 95       	ret
    165a:	9b 01       	movw	r18, r22
    165c:	ac 01       	movw	r20, r24
    165e:	0a 2e       	mov	r0, r26
    1660:	06 94       	lsr	r0
    1662:	57 95       	ror	r21
    1664:	47 95       	ror	r20
    1666:	37 95       	ror	r19
    1668:	27 95       	ror	r18
    166a:	ba 95       	dec	r27
    166c:	c9 f7       	brne	.-14     	; 0x1660 <__ultoa_invert+0xa2>
    166e:	62 0f       	add	r22, r18
    1670:	73 1f       	adc	r23, r19
    1672:	84 1f       	adc	r24, r20
    1674:	95 1f       	adc	r25, r21
    1676:	a0 1d       	adc	r26, r0
    1678:	08 95       	ret

0000167a <_exit>:
    167a:	f8 94       	cli

0000167c <__stop_program>:
    167c:	ff cf       	rjmp	.-2      	; 0x167c <__stop_program>
