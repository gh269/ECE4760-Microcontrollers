
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000015d6  0000166a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800114  00800114  0000167e  2**0
                  ALLOC
  3 .stab         00002490  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000775  00000000  00000000  00003b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004285  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  000042b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000019a2  00000000  00000000  0000435c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007cd  00000000  00000000  00005cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b87  00000000  00000000  000064cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000438  00000000  00000000  00007054  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005a8  00000000  00000000  0000748c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001414  00000000  00000000  00007a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00008e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_12>
      34:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_13>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_16>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

0000008c <LCD_number>:
      8c:	43 61 70 61 63 69 74 61 6e 63 65 3d 00 00           Capacitance=..

0000009a <LCD_initialize>:
      9a:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000ab <LcdCustomChar>:
      ab:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      bb:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      cb:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      db:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000eb <__c.2006>:
      eb:	6e 61 6e 00                                         nan.

000000ef <__c.2004>:
      ef:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ff:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10f:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1af:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1bf:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1cf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1df:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e4       	ldi	r29, 0x40	; 64
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	e6 ed       	ldi	r30, 0xD6	; 214
     202:	f5 e1       	ldi	r31, 0x15	; 21
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	a4 31       	cpi	r26, 0x14	; 20
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	a4 e1       	ldi	r26, 0x14	; 20
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a7 33       	cpi	r26, 0x37	; 55
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <main>
     228:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <init_cap_measurement_analog_timer>:

//configures Analog Comparator and Timer1
//set it to full speed 
//clear TCNT1
void init_cap_measurement_analog_timer(){
	TCCR1A = 0;
     230:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
     234:	e1 e8       	ldi	r30, 0x81	; 129
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	10 82       	st	Z, r1
	//full speed [ 16 MHz], capture on positive edge
	TCCR1B |= INPUT_CAPTURE_EDGE_SELECT + T0B_CS00;
     23a:	80 81       	ld	r24, Z
     23c:	81 64       	ori	r24, 0x41	; 65
     23e:	80 83       	st	Z, r24
	//turn on timer 1 interrupt-on-capture
	TIMSK1 = 0;
     240:	ef e6       	ldi	r30, 0x6F	; 111
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	10 82       	st	Z, r1
	TIMSK1 |= INTERRUPT_ON_CAPTURE ;
     246:	80 81       	ld	r24, Z
     248:	80 62       	ori	r24, 0x20	; 32
     24a:	80 83       	st	Z, r24

	//set analog comp to connect to timer capture input
	//with positive input reference voltage
	ACSR = 0;
     24c:	10 be       	out	0x30, r1	; 48
	ACSR |= ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     24e:	80 b7       	in	r24, 0x30	; 48
     250:	84 60       	ori	r24, 0x04	; 4
     252:	80 bf       	out	0x30, r24	; 48
	ACSR &= ~ANALOG_COMPARATOR_BANDGAP_SELECT;
     254:	80 b7       	in	r24, 0x30	; 48
     256:	8f 7b       	andi	r24, 0xBF	; 191
     258:	80 bf       	out	0x30, r24	; 48
	//set all ports to input
	DDRB = 0;
     25a:	14 b8       	out	0x04, r1	; 4
	DDRB &= ~(COMPARATOR_INPUT + COMPARATOR_REFERENCE);
     25c:	84 b1       	in	r24, 0x04	; 4
     25e:	83 7f       	andi	r24, 0xF3	; 243
     260:	84 b9       	out	0x04, r24	; 4
     262:	08 95       	ret

00000264 <init_cap_discharge_wait_timer>:

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     264:	22 e0       	ldi	r18, 0x02	; 2
     266:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     26a:	8a e5       	ldi	r24, 0x5A	; 90
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 89 00 	sts	0x0089, r25
     272:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     276:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     27a:	10 92 80 00 	sts	0x0080, r1
     27e:	08 95       	ret

00000280 <init_cap_measurements>:
	Convert PortB2 to an input and start a timer. The capacitor will start to charge toward Vcc.
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
	DDRB = 0;
     280:	14 b8       	out	0x04, r1	; 4
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     282:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     284:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     286:	2a 98       	cbi	0x05, 2	; 5
	//use Timer1.A to perform this delay and signal when we can continue measurements
	init_cap_discharge_wait_timer();
     288:	0c 94 32 01 	jmp	0x264	; 0x264 <init_cap_discharge_wait_timer>

0000028c <__vector_16>:
}

//1 ms timebase register
//Blinks LED 1/second
//refreshes LCD 1/200 ms
ISR (TIMER0_COMPA_vect){
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	8f 93       	push	r24
     298:	9f 93       	push	r25
	if( led_time_count > 0)
     29a:	80 91 31 01 	lds	r24, 0x0131
     29e:	90 91 32 01 	lds	r25, 0x0132
     2a2:	89 2b       	or	r24, r25
     2a4:	49 f0       	breq	.+18     	; 0x2b8 <__vector_16+0x2c>
		--led_time_count;
     2a6:	80 91 31 01 	lds	r24, 0x0131
     2aa:	90 91 32 01 	lds	r25, 0x0132
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	90 93 32 01 	sts	0x0132, r25
     2b4:	80 93 31 01 	sts	0x0131, r24
	if( lcd_time_count > 0)
     2b8:	80 91 14 01 	lds	r24, 0x0114
     2bc:	90 91 15 01 	lds	r25, 0x0115
     2c0:	89 2b       	or	r24, r25
     2c2:	49 f0       	breq	.+18     	; 0x2d6 <__vector_16+0x4a>
		--lcd_time_count;
     2c4:	80 91 14 01 	lds	r24, 0x0114
     2c8:	90 91 15 01 	lds	r25, 0x0115
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	90 93 15 01 	sts	0x0115, r25
     2d2:	80 93 14 01 	sts	0x0114, r24

}
     2d6:	9f 91       	pop	r25
     2d8:	8f 91       	pop	r24
     2da:	0f 90       	pop	r0
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	0f 90       	pop	r0
     2e0:	1f 90       	pop	r1
     2e2:	18 95       	reti

000002e4 <__vector_13>:
//Once this triggers even once, we know that we have waited long enough for a cap discharge
ISR (TIMER1_COMPA_vect){
     2e4:	1f 92       	push	r1
     2e6:	0f 92       	push	r0
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	0f 92       	push	r0
     2ec:	11 24       	eor	r1, r1
     2ee:	8f 93       	push	r24
     2f0:	9f 93       	push	r25
	cap_discharged = TRUE;
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	90 93 2b 01 	sts	0x012B, r25
     2fa:	80 93 2a 01 	sts	0x012A, r24
}
     2fe:	9f 91       	pop	r25
     300:	8f 91       	pop	r24
     302:	0f 90       	pop	r0
     304:	0f be       	out	0x3f, r0	; 63
     306:	0f 90       	pop	r0
     308:	1f 90       	pop	r1
     30a:	18 95       	reti

0000030c <__vector_12>:
			  t
	C = ------------
		R2 * ln(0.5)

*/
ISR (TIMER1_CAPT_vect){
     30c:	1f 92       	push	r1
     30e:	0f 92       	push	r0
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	0f 92       	push	r0
     314:	11 24       	eor	r1, r1
     316:	0b b6       	in	r0, 0x3b	; 59
     318:	0f 92       	push	r0
     31a:	8f 93       	push	r24
     31c:	9f 93       	push	r25
     31e:	ef 93       	push	r30
     320:	ff 93       	push	r31
	// read timer1 input capture register
    //ICR1 = 65000;
	charge_cycles = ICR1;
     322:	e6 e8       	ldi	r30, 0x86	; 134
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	91 81       	ldd	r25, Z+1	; 0x01
     32a:	90 93 29 01 	sts	0x0129, r25
     32e:	80 93 28 01 	sts	0x0128, r24
	ICR1 = 0;
     332:	11 82       	std	Z+1, r1	; 0x01
     334:	10 82       	st	Z, r1
    // set the charged flag to true
    cap_charged = TRUE;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	90 93 36 01 	sts	0x0136, r25
     33e:	80 93 35 01 	sts	0x0135, r24
}
     342:	ff 91       	pop	r31
     344:	ef 91       	pop	r30
     346:	9f 91       	pop	r25
     348:	8f 91       	pop	r24
     34a:	0f 90       	pop	r0
     34c:	0b be       	out	0x3b, r0	; 59
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <toggle_led>:

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     358:	8b b1       	in	r24, 0x0b	; 11
     35a:	94 e0       	ldi	r25, 0x04	; 4
     35c:	89 27       	eor	r24, r25
     35e:	8b b9       	out	0x0b, r24	; 11
     360:	08 95       	ret

00000362 <init_timer0A>:
//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 249;
     368:	89 ef       	ldi	r24, 0xF9	; 249
     36a:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     370:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     372:	84 b5       	in	r24, 0x24	; 36
     374:	82 60       	ori	r24, 0x02	; 2
     376:	84 bd       	out	0x24, r24	; 36
     378:	08 95       	ret

0000037a <init_lcd>:
}

// LCD setup
void init_lcd(void){
	LCDinit();	//initialize the display
     37a:	0e 94 06 03 	call	0x60c	; 0x60c <LCDinit>
	LCDcursorOFF();
     37e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LCDcursorOFF>
	LCDclr();				//clear the display
     382:	0e 94 96 02 	call	0x52c	; 0x52c <LCDclr>
	LCDGotoXY(0,0);
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 bb 02 	call	0x576	; 0x576 <LCDGotoXY>
	CopyStringtoLCD(LCD_number, 0, 0);
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	8c e8       	ldi	r24, 0x8C	; 140
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0c 94 c9 02 	jmp	0x592	; 0x592 <CopyStringtoLCD>

0000039a <refresh_lcd>:

// writes contents of lcd_buffer to LCD every 200 mSec
// 
void refresh_lcd(void){
  // increment time counter and format string 
  if ((charge_cycles - 126) > 85) {
     39a:	80 91 28 01 	lds	r24, 0x0128
     39e:	90 91 29 01 	lds	r25, 0x0129
     3a2:	8e 57       	subi	r24, 0x7E	; 126
     3a4:	91 09       	sbc	r25, r1
     3a6:	86 35       	cpi	r24, 0x56	; 86
     3a8:	91 05       	cpc	r25, r1
     3aa:	f8 f0       	brcs	.+62     	; 0x3ea <refresh_lcd+0x50>
   	sprintf(lcd_buffer,"%-.4f",capacitance);
     3ac:	80 91 2c 01 	lds	r24, 0x012C
     3b0:	90 91 2d 01 	lds	r25, 0x012D
     3b4:	a0 91 2e 01 	lds	r26, 0x012E
     3b8:	b0 91 2f 01 	lds	r27, 0x012F
     3bc:	bf 93       	push	r27
     3be:	af 93       	push	r26
     3c0:	9f 93       	push	r25
     3c2:	8f 93       	push	r24
     3c4:	84 e0       	ldi	r24, 0x04	; 4
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	86 e1       	ldi	r24, 0x16	; 22
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <sprintf>
     3d8:	8d b7       	in	r24, 0x3d	; 61
     3da:	9e b7       	in	r25, 0x3e	; 62
     3dc:	08 96       	adiw	r24, 0x08	; 8
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	9e bf       	out	0x3e, r25	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	8d bf       	out	0x3d, r24	; 61
     3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <refresh_lcd+0x5c>
    //sprintf(lcd_buffer,"%-u", charge_cycles);	 
  }
  else {
  	sprintf(lcd_buffer,"N/A     ");
     3ea:	6a e0       	ldi	r22, 0x0A	; 10
     3ec:	71 e0       	ldi	r23, 0x01	; 1
     3ee:	86 e1       	ldi	r24, 0x16	; 22
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 1e 0a 	call	0x143c	; 0x143c <strcpy>
  }               
  LCDGotoXY(0, 1);
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	0e 94 bb 02 	call	0x576	; 0x576 <LCDGotoXY>
  	// display the capacitance 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     3fe:	e6 e1       	ldi	r30, 0x16	; 22
     400:	f1 e0       	ldi	r31, 0x01	; 1
     402:	df 01       	movw	r26, r30
     404:	0d 90       	ld	r0, X+
     406:	00 20       	and	r0, r0
     408:	e9 f7       	brne	.-6      	; 0x404 <refresh_lcd+0x6a>
     40a:	bd 01       	movw	r22, r26
     40c:	61 50       	subi	r22, 0x01	; 1
     40e:	71 09       	sbc	r23, r1
     410:	6e 1b       	sub	r22, r30
     412:	7f 0b       	sbc	r23, r31
     414:	cf 01       	movw	r24, r30
     416:	0e 94 9c 02 	call	0x538	; 0x538 <LCDstring>
  // now move a char left and right
  
  
  LCDGotoXY(8,1);
     41a:	61 e0       	ldi	r22, 0x01	; 1
     41c:	88 e0       	ldi	r24, 0x08	; 8
     41e:	0e 94 bb 02 	call	0x576	; 0x576 <LCDGotoXY>
  LCDsendChar('n');
     422:	8e e6       	ldi	r24, 0x6E	; 110
     424:	0e 94 48 02 	call	0x490	; 0x490 <LCDsendChar>
  LCDGotoXY(9,1);
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	89 e0       	ldi	r24, 0x09	; 9
     42c:	0e 94 bb 02 	call	0x576	; 0x576 <LCDGotoXY>
  LCDsendChar('F');
     430:	86 e4       	ldi	r24, 0x46	; 70
     432:	0c 94 48 02 	jmp	0x490	; 0x490 <LCDsendChar>

00000436 <initialize>:
  LCDsendChar('F'); 
  */ 
}

void initialize(void){
	anipos = 8;
     436:	88 e0       	ldi	r24, 0x08	; 8
     438:	80 93 27 01 	sts	0x0127, r24
	led_time_count = 0;
     43c:	10 92 32 01 	sts	0x0132, r1
     440:	10 92 31 01 	sts	0x0131, r1
	init_timer0A();
     444:	0e 94 b1 01 	call	0x362	; 0x362 <init_timer0A>

	DDRB = 0;
     448:	14 b8       	out	0x04, r1	; 4
	DDRD = 0;
     44a:	1a b8       	out	0x0a, r1	; 10

	//Enable LED Port
	DDRD = ONBOARD_LED; //turn the LED to an output
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; //turn off LED 
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	8b b9       	out	0x0b, r24	; 11

	capacitance = 0;
     454:	10 92 2c 01 	sts	0x012C, r1
     458:	10 92 2d 01 	sts	0x012D, r1
     45c:	10 92 2e 01 	sts	0x012E, r1
     460:	10 92 2f 01 	sts	0x012F, r1
	charge_cycles = 0;
     464:	10 92 29 01 	sts	0x0129, r1
     468:	10 92 28 01 	sts	0x0128, r1
	cap_discharged = FALSE;
     46c:	10 92 2b 01 	sts	0x012B, r1
     470:	10 92 2a 01 	sts	0x012A, r1
	begin_cap_measurement = FALSE;
     474:	10 92 34 01 	sts	0x0134, r1
     478:	10 92 33 01 	sts	0x0133, r1
	cap_charged = FALSE;
     47c:	10 92 36 01 	sts	0x0136, r1
     480:	10 92 35 01 	sts	0x0135, r1

	init_lcd();
     484:	0e 94 bd 01 	call	0x37a	; 0x37a <init_lcd>
	LCDclr();
     488:	0e 94 96 02 	call	0x52c	; 0x52c <LCDclr>
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting timers...\n\r");


	sei();
     48c:	78 94       	sei
     48e:	08 95       	ret

00000490 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     490:	98 2f       	mov	r25, r24
     492:	90 7f       	andi	r25, 0xF0	; 240
     494:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_RS;
     496:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     498:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     49a:	ef e3       	ldi	r30, 0x3F	; 63
     49c:	ff e1       	ldi	r31, 0x1F	; 31
     49e:	31 97       	sbiw	r30, 0x01	; 1
     4a0:	f1 f7       	brne	.-4      	; 0x49e <LCDsendChar+0xe>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <LCDsendChar+0x14>
     4a4:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     4a6:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     4a8:	40 98       	cbi	0x08, 0	; 8
     4aa:	ef e3       	ldi	r30, 0x3F	; 63
     4ac:	ff e1       	ldi	r31, 0x1F	; 31
     4ae:	31 97       	sbiw	r30, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <LCDsendChar+0x1e>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <LCDsendChar+0x24>
     4b4:	00 00       	nop
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     4b6:	f0 e1       	ldi	r31, 0x10	; 16
     4b8:	8f 9f       	mul	r24, r31
     4ba:	c0 01       	movw	r24, r0
     4bc:	11 24       	eor	r1, r1
     4be:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     4c0:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     4c2:	42 9a       	sbi	0x08, 2	; 8
     4c4:	8f e3       	ldi	r24, 0x3F	; 63
     4c6:	9f e1       	ldi	r25, 0x1F	; 31
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <LCDsendChar+0x38>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <LCDsendChar+0x3e>
     4ce:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     4d0:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     4d2:	40 98       	cbi	0x08, 0	; 8
     4d4:	ef e3       	ldi	r30, 0x3F	; 63
     4d6:	ff e1       	ldi	r31, 0x1F	; 31
     4d8:	31 97       	sbiw	r30, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCDsendChar+0x48>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <LCDsendChar+0x4e>
     4de:	00 00       	nop
     4e0:	08 95       	ret

000004e2 <LCDsendCommand>:
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     4e2:	98 2f       	mov	r25, r24
     4e4:	90 7f       	andi	r25, 0xF0	; 240
     4e6:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_E;		
     4e8:	42 9a       	sbi	0x08, 2	; 8
     4ea:	ef e3       	ldi	r30, 0x3F	; 63
     4ec:	ff e1       	ldi	r31, 0x1F	; 31
     4ee:	31 97       	sbiw	r30, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <LCDsendCommand+0xc>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <LCDsendCommand+0x12>
     4f4:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     4f6:	42 98       	cbi	0x08, 2	; 8
     4f8:	ef e3       	ldi	r30, 0x3F	; 63
     4fa:	ff e1       	ldi	r31, 0x1F	; 31
     4fc:	31 97       	sbiw	r30, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <LCDsendCommand+0x1a>
     500:	00 c0       	rjmp	.+0      	; 0x502 <LCDsendCommand+0x20>
     502:	00 00       	nop
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     504:	f0 e1       	ldi	r31, 0x10	; 16
     506:	8f 9f       	mul	r24, r31
     508:	c0 01       	movw	r24, r0
     50a:	11 24       	eor	r1, r1
     50c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     50e:	42 9a       	sbi	0x08, 2	; 8
     510:	8f e3       	ldi	r24, 0x3F	; 63
     512:	9f e1       	ldi	r25, 0x1F	; 31
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <LCDsendCommand+0x32>
     518:	00 c0       	rjmp	.+0      	; 0x51a <LCDsendCommand+0x38>
     51a:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     51c:	42 98       	cbi	0x08, 2	; 8
     51e:	ef e3       	ldi	r30, 0x3F	; 63
     520:	ff e1       	ldi	r31, 0x1F	; 31
     522:	31 97       	sbiw	r30, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <LCDsendCommand+0x40>
     526:	00 c0       	rjmp	.+0      	; 0x528 <LCDsendCommand+0x46>
     528:	00 00       	nop
     52a:	08 95       	ret

0000052c <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <LCDsendCommand>

00000532 <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <LCDsendCommand>

00000538 <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	1f 92       	push	r1
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	71 f0       	breq	.+28     	; 0x568 <LCDstring+0x30>
     54c:	18 2f       	mov	r17, r24
     54e:	7c 01       	movw	r14, r24
     550:	07 c0       	rjmp	.+14     	; 0x560 <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     552:	f7 01       	movw	r30, r14
     554:	81 91       	ld	r24, Z+
     556:	7f 01       	movw	r14, r30
     558:	69 83       	std	Y+1, r22	; 0x01
     55a:	0e 94 48 02 	call	0x490	; 0x490 <LCDsendChar>
     55e:	69 81       	ldd	r22, Y+1	; 0x01

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     560:	8e 2d       	mov	r24, r14
     562:	81 1b       	sub	r24, r17
     564:	86 17       	cp	r24, r22
     566:	a8 f3       	brcs	.-22     	; 0x552 <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     568:	0f 90       	pop	r0
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	08 95       	ret

00000576 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     576:	62 30       	cpi	r22, 0x02	; 2
     578:	31 f0       	breq	.+12     	; 0x586 <LCDGotoXY+0x10>
     57a:	63 30       	cpi	r22, 0x03	; 3
     57c:	31 f0       	breq	.+12     	; 0x58a <LCDGotoXY+0x14>
     57e:	61 30       	cpi	r22, 0x01	; 1
     580:	29 f4       	brne	.+10     	; 0x58c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     582:	80 5c       	subi	r24, 0xC0	; 192
     584:	03 c0       	rjmp	.+6      	; 0x58c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     586:	8c 5e       	subi	r24, 0xEC	; 236
     588:	01 c0       	rjmp	.+2      	; 0x58c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     58a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     58c:	80 68       	ori	r24, 0x80	; 128
     58e:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <LCDsendCommand>

00000592 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	ec 01       	movw	r28, r24
     59a:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     59c:	64 2f       	mov	r22, r20
     59e:	0e 94 bb 02 	call	0x576	; 0x576 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5a2:	10 e0       	ldi	r17, 0x00	; 0
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     5a6:	0e 94 48 02 	call	0x490	; 0x490 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     5aa:	1f 5f       	subi	r17, 0xFF	; 255
     5ac:	fe 01       	movw	r30, r28
     5ae:	e1 0f       	add	r30, r17
     5b0:	f1 1d       	adc	r31, r1
     5b2:	84 91       	lpm	r24, Z
     5b4:	81 11       	cpse	r24, r1
     5b6:	f7 cf       	rjmp	.-18     	; 0x5a6 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	08 95       	ret

000005c0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     5ce:	88 e0       	ldi	r24, 0x08	; 8
     5d0:	68 9f       	mul	r22, r24
     5d2:	b0 01       	movw	r22, r0
     5d4:	11 24       	eor	r1, r1
     5d6:	80 e4       	ldi	r24, 0x40	; 64
     5d8:	e8 2e       	mov	r14, r24
     5da:	e6 2a       	or	r14, r22
	for (i=0; i<8; i++){
     5dc:	c0 e0       	ldi	r28, 0x00	; 0
     5de:	d0 e0       	ldi	r29, 0x00	; 0
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     5e0:	f8 01       	movw	r30, r16
     5e2:	ec 0f       	add	r30, r28
     5e4:	fd 1f       	adc	r31, r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     5e6:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
     5e8:	8c 2f       	mov	r24, r28
     5ea:	8e 0d       	add	r24, r14
     5ec:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCDsendCommand>
		LCDsendChar(pcc);
     5f0:	8f 2d       	mov	r24, r15
     5f2:	0e 94 48 02 	call	0x490	; 0x490 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     5f6:	21 96       	adiw	r28, 0x01	; 1
     5f8:	c8 30       	cpi	r28, 0x08	; 8
     5fa:	d1 05       	cpc	r29, r1
     5fc:	89 f7       	brne	.-30     	; 0x5e0 <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	08 95       	ret

0000060c <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	8f e5       	ldi	r24, 0x5F	; 95
     614:	9a ee       	ldi	r25, 0xEA	; 234
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	f1 f7       	brne	.-4      	; 0x616 <LCDinit+0xa>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <LCDinit+0x10>
     61c:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     61e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     620:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     622:	87 b1       	in	r24, 0x07	; 7
     624:	80 6f       	ori	r24, 0xF0	; 240
     626:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     628:	87 b1       	in	r24, 0x07	; 7
     62a:	87 60       	ori	r24, 0x07	; 7
     62c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     62e:	80 e3       	ldi	r24, 0x30	; 48
     630:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     632:	42 9a       	sbi	0x08, 2	; 8
     634:	ef e3       	ldi	r30, 0x3F	; 63
     636:	ff e1       	ldi	r31, 0x1F	; 31
     638:	31 97       	sbiw	r30, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <LCDinit+0x2c>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <LCDinit+0x32>
     63e:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     640:	42 98       	cbi	0x08, 2	; 8
     642:	ef e3       	ldi	r30, 0x3F	; 63
     644:	ff e1       	ldi	r31, 0x1F	; 31
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <LCDinit+0x3a>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <LCDinit+0x40>
     64c:	00 00       	nop
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     64e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     650:	42 9a       	sbi	0x08, 2	; 8
     652:	8f e3       	ldi	r24, 0x3F	; 63
     654:	9f e1       	ldi	r25, 0x1F	; 31
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <LCDinit+0x4a>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <LCDinit+0x50>
     65c:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     65e:	42 98       	cbi	0x08, 2	; 8
     660:	ef e3       	ldi	r30, 0x3F	; 63
     662:	ff e1       	ldi	r31, 0x1F	; 31
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <LCDinit+0x58>
     668:	00 c0       	rjmp	.+0      	; 0x66a <LCDinit+0x5e>
     66a:	00 00       	nop
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     66c:	80 e2       	ldi	r24, 0x20	; 32
     66e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     670:	42 9a       	sbi	0x08, 2	; 8
     672:	8f e3       	ldi	r24, 0x3F	; 63
     674:	9f e1       	ldi	r25, 0x1F	; 31
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <LCDinit+0x6a>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <LCDinit+0x70>
     67c:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     67e:	42 98       	cbi	0x08, 2	; 8
     680:	ef e3       	ldi	r30, 0x3F	; 63
     682:	ff e1       	ldi	r31, 0x1F	; 31
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <LCDinit+0x78>
     688:	00 c0       	rjmp	.+0      	; 0x68a <LCDinit+0x7e>
     68a:	00 00       	nop
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     68c:	88 e2       	ldi	r24, 0x28	; 40
     68e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     692:	8c e0       	ldi	r24, 0x0C	; 12
     694:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCDsendCommand>
     698:	cb ea       	ldi	r28, 0xAB	; 171
     69a:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     69c:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     69e:	16 2f       	mov	r17, r22
     6a0:	1f 5f       	subi	r17, 0xFF	; 255
     6a2:	ce 01       	movw	r24, r28
     6a4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCDdefinechar>
     6a8:	28 96       	adiw	r28, 0x08	; 8
     6aa:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     6ac:	18 30       	cpi	r17, 0x08	; 8
     6ae:	b9 f7       	brne	.-18     	; 0x69e <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	08 95       	ret

000006b8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     6be:	c0 e0       	ldi	r28, 0x00	; 0
     6c0:	04 c0       	rjmp	.+8      	; 0x6ca <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
     6c2:	8e e1       	ldi	r24, 0x1E	; 30
     6c4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     6c8:	cf 5f       	subi	r28, 0xFF	; 255
     6ca:	cd 13       	cpse	r28, r29
     6cc:	fa cf       	rjmp	.-12     	; 0x6c2 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     6da:	c0 e0       	ldi	r28, 0x00	; 0
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
     6de:	88 e1       	ldi	r24, 0x18	; 24
     6e0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     6e4:	cf 5f       	subi	r28, 0xFF	; 255
     6e6:	cd 13       	cpse	r28, r29
     6e8:	fa cf       	rjmp	.-12     	; 0x6de <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     6f0:	8e e0       	ldi	r24, 0x0E	; 14
     6f2:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <LCDsendCommand>

000006f6 <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     6f6:	8f e0       	ldi	r24, 0x0F	; 15
     6f8:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <LCDsendCommand>

000006fc <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     6fc:	8c e0       	ldi	r24, 0x0C	; 12
     6fe:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <LCDsendCommand>

00000702 <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     702:	88 e0       	ldi	r24, 0x08	; 8
     704:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <LCDsendCommand>

00000708 <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     708:	8c e0       	ldi	r24, 0x0C	; 12
     70a:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <LCDsendCommand>

0000070e <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	04 c0       	rjmp	.+8      	; 0x720 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
     718:	80 e1       	ldi	r24, 0x10	; 16
     71a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     71e:	cf 5f       	subi	r28, 0xFF	; 255
     720:	cd 13       	cpse	r28, r29
     722:	fa cf       	rjmp	.-12     	; 0x718 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     730:	c0 e0       	ldi	r28, 0x00	; 0
     732:	04 c0       	rjmp	.+8      	; 0x73c <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
     734:	84 e1       	ldi	r24, 0x14	; 20
     736:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     73a:	cf 5f       	subi	r28, 0xFF	; 255
     73c:	cd 13       	cpse	r28, r29
     73e:	fa cf       	rjmp	.-12     	; 0x734 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	1f 92       	push	r1
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     75c:	56 e0       	ldi	r21, 0x06	; 6
     75e:	45 9f       	mul	r20, r21
     760:	90 01       	movw	r18, r0
     762:	11 24       	eor	r1, r1
     764:	e8 2f       	mov	r30, r24
     766:	e2 9f       	mul	r30, r18
     768:	c0 01       	movw	r24, r0
     76a:	e3 9f       	mul	r30, r19
     76c:	90 0d       	add	r25, r0
     76e:	11 24       	eor	r1, r1
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	0e 94 27 09 	call	0x124e	; 0x124e <__divmodhi4>
     776:	8b 01       	movw	r16, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     778:	cb 01       	movw	r24, r22
     77a:	66 e0       	ldi	r22, 0x06	; 6
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	0e 94 13 09 	call	0x1226	; 0x1226 <__udivmodhi4>
     782:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     784:	c1 2c       	mov	r12, r1
     786:	d1 2c       	mov	r13, r1
     788:	f1 2c       	mov	r15, r1
     78a:	16 c0       	rjmp	.+44     	; 0x7b8 <LCDprogressBar+0x72>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     78c:	96 01       	movw	r18, r12
     78e:	2b 5f       	subi	r18, 0xFB	; 251
     790:	3f 4f       	sbci	r19, 0xFF	; 255
     792:	02 17       	cp	r16, r18
     794:	13 07       	cpc	r17, r19
     796:	28 f4       	brcc	.+10     	; 0x7a2 <LCDprogressBar+0x5c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     798:	0c 15       	cp	r16, r12
     79a:	1d 05       	cpc	r17, r13
     79c:	20 f0       	brcs	.+8      	; 0x7a6 <LCDprogressBar+0x60>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     79e:	8e 2d       	mov	r24, r14
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <LCDprogressBar+0x62>
			}
		}
		else
		{
			// this is a full block
			c = 5;
     7a2:	85 e0       	ldi	r24, 0x05	; 5
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <LCDprogressBar+0x62>
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
     7a6:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     7a8:	49 83       	std	Y+1, r20	; 0x01
     7aa:	0e 94 48 02 	call	0x490	; 0x490 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     7ae:	f3 94       	inc	r15
     7b0:	f6 e0       	ldi	r31, 0x06	; 6
     7b2:	cf 0e       	add	r12, r31
     7b4:	d1 1c       	adc	r13, r1
     7b6:	49 81       	ldd	r20, Y+1	; 0x01
     7b8:	f4 12       	cpse	r15, r20
     7ba:	e8 cf       	rjmp	.-48     	; 0x78c <LCDprogressBar+0x46>
		
		// write character to display
		LCDsendChar(c);
	}

}
     7bc:	0f 90       	pop	r0
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	df 90       	pop	r13
     7cc:	cf 90       	pop	r12
     7ce:	08 95       	ret

000007d0 <main>:
}

int main(void){
	initialize();
     7d0:	0e 94 1b 02 	call	0x436	; 0x436 <initialize>
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	8c e8       	ldi	r24, 0x8C	; 140
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 c9 02 	call	0x592	; 0x592 <CopyStringtoLCD>
	
	while(1){
		if( led_time_count == 0){
			led_time_count = LED_BLINK_PERIOD / 2;
     7e0:	c4 ef       	ldi	r28, 0xF4	; 244
     7e2:	d1 e0       	ldi	r29, 0x01	; 1
			//cli();
			toggle_led();
			//sei();
		}
		if( lcd_time_count == 0){
			lcd_time_count = LCD_REFRESH_RATE;
     7e4:	08 ec       	ldi	r16, 0xC8	; 200
     7e6:	10 e0       	ldi	r17, 0x00	; 0
			sei();
		}
		if(cap_discharged && !begin_cap_measurement){
			//begin cap measurements
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     7e8:	ee 24       	eor	r14, r14
     7ea:	e3 94       	inc	r14
     7ec:	f1 2c       	mov	r15, r1
int main(void){
	initialize();
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
	
	while(1){
		if( led_time_count == 0){
     7ee:	80 91 31 01 	lds	r24, 0x0131
     7f2:	90 91 32 01 	lds	r25, 0x0132
     7f6:	89 2b       	or	r24, r25
     7f8:	31 f4       	brne	.+12     	; 0x806 <main+0x36>
			led_time_count = LED_BLINK_PERIOD / 2;
     7fa:	d0 93 32 01 	sts	0x0132, r29
     7fe:	c0 93 31 01 	sts	0x0131, r28
			//cli();
			toggle_led();
     802:	0e 94 ac 01 	call	0x358	; 0x358 <toggle_led>
			//sei();
		}
		if( lcd_time_count == 0){
     806:	80 91 14 01 	lds	r24, 0x0114
     80a:	90 91 15 01 	lds	r25, 0x0115
     80e:	89 2b       	or	r24, r25
     810:	41 f4       	brne	.+16     	; 0x822 <main+0x52>
			lcd_time_count = LCD_REFRESH_RATE;
     812:	10 93 15 01 	sts	0x0115, r17
     816:	00 93 14 01 	sts	0x0114, r16
			cli();
     81a:	f8 94       	cli
			refresh_lcd();
     81c:	0e 94 cd 01 	call	0x39a	; 0x39a <refresh_lcd>
			sei();
     820:	78 94       	sei
			
		}
		if (!cap_discharged && !begin_cap_measurement && !cap_charged) {
     822:	80 91 2a 01 	lds	r24, 0x012A
     826:	90 91 2b 01 	lds	r25, 0x012B
     82a:	89 2b       	or	r24, r25
     82c:	81 f4       	brne	.+32     	; 0x84e <main+0x7e>
     82e:	80 91 33 01 	lds	r24, 0x0133
     832:	90 91 34 01 	lds	r25, 0x0134
     836:	89 2b       	or	r24, r25
     838:	51 f4       	brne	.+20     	; 0x84e <main+0x7e>
     83a:	80 91 35 01 	lds	r24, 0x0135
     83e:	90 91 36 01 	lds	r25, 0x0136
     842:	89 2b       	or	r24, r25
     844:	21 f4       	brne	.+8      	; 0x84e <main+0x7e>
			cli();
     846:	f8 94       	cli
			init_cap_measurements();
     848:	0e 94 40 01 	call	0x280	; 0x280 <init_cap_measurements>
			sei();
     84c:	78 94       	sei
		}
		if(cap_discharged && !begin_cap_measurement){
     84e:	80 91 2a 01 	lds	r24, 0x012A
     852:	90 91 2b 01 	lds	r25, 0x012B
     856:	89 2b       	or	r24, r25
     858:	61 f0       	breq	.+24     	; 0x872 <main+0xa2>
     85a:	80 91 33 01 	lds	r24, 0x0133
     85e:	90 91 34 01 	lds	r25, 0x0134
     862:	89 2b       	or	r24, r25
     864:	31 f4       	brne	.+12     	; 0x872 <main+0xa2>
			//begin cap measurements
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     866:	f0 92 34 01 	sts	0x0134, r15
     86a:	e0 92 33 01 	sts	0x0133, r14
			//initalize timer for cap measurement
			init_cap_measurement_analog_timer();
     86e:	0e 94 18 01 	call	0x230	; 0x230 <init_cap_measurement_analog_timer>
			
		}
		if(begin_cap_measurement && cap_charged){
     872:	80 91 33 01 	lds	r24, 0x0133
     876:	90 91 34 01 	lds	r25, 0x0134
     87a:	89 2b       	or	r24, r25
     87c:	09 f4       	brne	.+2      	; 0x880 <main+0xb0>
     87e:	b7 cf       	rjmp	.-146    	; 0x7ee <main+0x1e>
     880:	80 91 35 01 	lds	r24, 0x0135
     884:	90 91 36 01 	lds	r25, 0x0136
     888:	89 2b       	or	r24, r25
     88a:	09 f4       	brne	.+2      	; 0x88e <main+0xbe>
     88c:	b0 cf       	rjmp	.-160    	; 0x7ee <main+0x1e>
			cli();
     88e:	f8 94       	cli
			// Revert the flags
			cap_discharged = FALSE;
     890:	10 92 2b 01 	sts	0x012B, r1
     894:	10 92 2a 01 	sts	0x012A, r1
			begin_cap_measurement = FALSE;
     898:	10 92 34 01 	sts	0x0134, r1
     89c:	10 92 33 01 	sts	0x0133, r1
			cap_charged = FALSE;
     8a0:	10 92 36 01 	sts	0x0136, r1
     8a4:	10 92 35 01 	sts	0x0135, r1
			
			// Turn off analog capture register
			ACSR &= ~ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     8a8:	80 b7       	in	r24, 0x30	; 48
     8aa:	8b 7f       	andi	r24, 0xFB	; 251
     8ac:	80 bf       	out	0x30, r24	; 48
			TCCR1B &= ~INPUT_CAPTURE_EDGE_SELECT;
     8ae:	80 91 81 00 	lds	r24, 0x0081
     8b2:	8f 7b       	andi	r24, 0xBF	; 191
     8b4:	80 93 81 00 	sts	0x0081, r24
			// Calculate the capacitance with the time elapsed. 
			// V(t) = Vo(1 - exp(-t/(R2*C))) becomes
			// C = -t / (R2 * ln(.5)) to find out when V(t) = .5 * Vo (R3 = R4)
			// (Due to ln(.5) being negative, the negative on the t is canceled out)
			// constant = time_per_cycle / (R2 * ln(.5)
			capacitance = (charge_cycles - 126) * constant;
     8b8:	60 91 28 01 	lds	r22, 0x0128
     8bc:	70 91 29 01 	lds	r23, 0x0129
     8c0:	6e 57       	subi	r22, 0x7E	; 126
     8c2:	71 09       	sbc	r23, r1
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 77 04 	call	0x8ee	; 0x8ee <__floatunsisf>
     8cc:	21 e6       	ldi	r18, 0x61	; 97
     8ce:	3c ee       	ldi	r19, 0xEC	; 236
     8d0:	44 e1       	ldi	r20, 0x14	; 20
     8d2:	5c e3       	ldi	r21, 0x3C	; 60
     8d4:	0e 94 b4 04 	call	0x968	; 0x968 <__mulsf3>
     8d8:	ab 01       	movw	r20, r22
     8da:	bc 01       	movw	r22, r24
     8dc:	40 93 2c 01 	sts	0x012C, r20
     8e0:	50 93 2d 01 	sts	0x012D, r21
     8e4:	60 93 2e 01 	sts	0x012E, r22
     8e8:	70 93 2f 01 	sts	0x012F, r23
     8ec:	80 cf       	rjmp	.-256    	; 0x7ee <main+0x1e>

000008ee <__floatunsisf>:
     8ee:	e8 94       	clt
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <__floatsisf+0x12>

000008f2 <__floatsisf>:
     8f2:	97 fb       	bst	r25, 7
     8f4:	3e f4       	brtc	.+14     	; 0x904 <__floatsisf+0x12>
     8f6:	90 95       	com	r25
     8f8:	80 95       	com	r24
     8fa:	70 95       	com	r23
     8fc:	61 95       	neg	r22
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	8f 4f       	sbci	r24, 0xFF	; 255
     902:	9f 4f       	sbci	r25, 0xFF	; 255
     904:	99 23       	and	r25, r25
     906:	a9 f0       	breq	.+42     	; 0x932 <__floatsisf+0x40>
     908:	f9 2f       	mov	r31, r25
     90a:	96 e9       	ldi	r25, 0x96	; 150
     90c:	bb 27       	eor	r27, r27
     90e:	93 95       	inc	r25
     910:	f6 95       	lsr	r31
     912:	87 95       	ror	r24
     914:	77 95       	ror	r23
     916:	67 95       	ror	r22
     918:	b7 95       	ror	r27
     91a:	f1 11       	cpse	r31, r1
     91c:	f8 cf       	rjmp	.-16     	; 0x90e <__floatsisf+0x1c>
     91e:	fa f4       	brpl	.+62     	; 0x95e <__floatsisf+0x6c>
     920:	bb 0f       	add	r27, r27
     922:	11 f4       	brne	.+4      	; 0x928 <__floatsisf+0x36>
     924:	60 ff       	sbrs	r22, 0
     926:	1b c0       	rjmp	.+54     	; 0x95e <__floatsisf+0x6c>
     928:	6f 5f       	subi	r22, 0xFF	; 255
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	8f 4f       	sbci	r24, 0xFF	; 255
     92e:	9f 4f       	sbci	r25, 0xFF	; 255
     930:	16 c0       	rjmp	.+44     	; 0x95e <__floatsisf+0x6c>
     932:	88 23       	and	r24, r24
     934:	11 f0       	breq	.+4      	; 0x93a <__floatsisf+0x48>
     936:	96 e9       	ldi	r25, 0x96	; 150
     938:	11 c0       	rjmp	.+34     	; 0x95c <__floatsisf+0x6a>
     93a:	77 23       	and	r23, r23
     93c:	21 f0       	breq	.+8      	; 0x946 <__floatsisf+0x54>
     93e:	9e e8       	ldi	r25, 0x8E	; 142
     940:	87 2f       	mov	r24, r23
     942:	76 2f       	mov	r23, r22
     944:	05 c0       	rjmp	.+10     	; 0x950 <__floatsisf+0x5e>
     946:	66 23       	and	r22, r22
     948:	71 f0       	breq	.+28     	; 0x966 <__floatsisf+0x74>
     94a:	96 e8       	ldi	r25, 0x86	; 134
     94c:	86 2f       	mov	r24, r22
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	2a f0       	brmi	.+10     	; 0x95e <__floatsisf+0x6c>
     954:	9a 95       	dec	r25
     956:	66 0f       	add	r22, r22
     958:	77 1f       	adc	r23, r23
     95a:	88 1f       	adc	r24, r24
     95c:	da f7       	brpl	.-10     	; 0x954 <__floatsisf+0x62>
     95e:	88 0f       	add	r24, r24
     960:	96 95       	lsr	r25
     962:	87 95       	ror	r24
     964:	97 f9       	bld	r25, 7
     966:	08 95       	ret

00000968 <__mulsf3>:
     968:	0b d0       	rcall	.+22     	; 0x980 <__mulsf3x>
     96a:	78 c0       	rjmp	.+240    	; 0xa5c <__fp_round>
     96c:	69 d0       	rcall	.+210    	; 0xa40 <__fp_pscA>
     96e:	28 f0       	brcs	.+10     	; 0x97a <__mulsf3+0x12>
     970:	6e d0       	rcall	.+220    	; 0xa4e <__fp_pscB>
     972:	18 f0       	brcs	.+6      	; 0x97a <__mulsf3+0x12>
     974:	95 23       	and	r25, r21
     976:	09 f0       	breq	.+2      	; 0x97a <__mulsf3+0x12>
     978:	5a c0       	rjmp	.+180    	; 0xa2e <__fp_inf>
     97a:	5f c0       	rjmp	.+190    	; 0xa3a <__fp_nan>
     97c:	11 24       	eor	r1, r1
     97e:	a2 c0       	rjmp	.+324    	; 0xac4 <__fp_szero>

00000980 <__mulsf3x>:
     980:	7e d0       	rcall	.+252    	; 0xa7e <__fp_split3>
     982:	a0 f3       	brcs	.-24     	; 0x96c <__mulsf3+0x4>

00000984 <__mulsf3_pse>:
     984:	95 9f       	mul	r25, r21
     986:	d1 f3       	breq	.-12     	; 0x97c <__mulsf3+0x14>
     988:	95 0f       	add	r25, r21
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	55 1f       	adc	r21, r21
     98e:	62 9f       	mul	r22, r18
     990:	f0 01       	movw	r30, r0
     992:	72 9f       	mul	r23, r18
     994:	bb 27       	eor	r27, r27
     996:	f0 0d       	add	r31, r0
     998:	b1 1d       	adc	r27, r1
     99a:	63 9f       	mul	r22, r19
     99c:	aa 27       	eor	r26, r26
     99e:	f0 0d       	add	r31, r0
     9a0:	b1 1d       	adc	r27, r1
     9a2:	aa 1f       	adc	r26, r26
     9a4:	64 9f       	mul	r22, r20
     9a6:	66 27       	eor	r22, r22
     9a8:	b0 0d       	add	r27, r0
     9aa:	a1 1d       	adc	r26, r1
     9ac:	66 1f       	adc	r22, r22
     9ae:	82 9f       	mul	r24, r18
     9b0:	22 27       	eor	r18, r18
     9b2:	b0 0d       	add	r27, r0
     9b4:	a1 1d       	adc	r26, r1
     9b6:	62 1f       	adc	r22, r18
     9b8:	73 9f       	mul	r23, r19
     9ba:	b0 0d       	add	r27, r0
     9bc:	a1 1d       	adc	r26, r1
     9be:	62 1f       	adc	r22, r18
     9c0:	83 9f       	mul	r24, r19
     9c2:	a0 0d       	add	r26, r0
     9c4:	61 1d       	adc	r22, r1
     9c6:	22 1f       	adc	r18, r18
     9c8:	74 9f       	mul	r23, r20
     9ca:	33 27       	eor	r19, r19
     9cc:	a0 0d       	add	r26, r0
     9ce:	61 1d       	adc	r22, r1
     9d0:	23 1f       	adc	r18, r19
     9d2:	84 9f       	mul	r24, r20
     9d4:	60 0d       	add	r22, r0
     9d6:	21 1d       	adc	r18, r1
     9d8:	82 2f       	mov	r24, r18
     9da:	76 2f       	mov	r23, r22
     9dc:	6a 2f       	mov	r22, r26
     9de:	11 24       	eor	r1, r1
     9e0:	9f 57       	subi	r25, 0x7F	; 127
     9e2:	50 40       	sbci	r21, 0x00	; 0
     9e4:	8a f0       	brmi	.+34     	; 0xa08 <__mulsf3_pse+0x84>
     9e6:	e1 f0       	breq	.+56     	; 0xa20 <__mulsf3_pse+0x9c>
     9e8:	88 23       	and	r24, r24
     9ea:	4a f0       	brmi	.+18     	; 0x9fe <__mulsf3_pse+0x7a>
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	bb 1f       	adc	r27, r27
     9f2:	66 1f       	adc	r22, r22
     9f4:	77 1f       	adc	r23, r23
     9f6:	88 1f       	adc	r24, r24
     9f8:	91 50       	subi	r25, 0x01	; 1
     9fa:	50 40       	sbci	r21, 0x00	; 0
     9fc:	a9 f7       	brne	.-22     	; 0x9e8 <__mulsf3_pse+0x64>
     9fe:	9e 3f       	cpi	r25, 0xFE	; 254
     a00:	51 05       	cpc	r21, r1
     a02:	70 f0       	brcs	.+28     	; 0xa20 <__mulsf3_pse+0x9c>
     a04:	14 c0       	rjmp	.+40     	; 0xa2e <__fp_inf>
     a06:	5e c0       	rjmp	.+188    	; 0xac4 <__fp_szero>
     a08:	5f 3f       	cpi	r21, 0xFF	; 255
     a0a:	ec f3       	brlt	.-6      	; 0xa06 <__mulsf3_pse+0x82>
     a0c:	98 3e       	cpi	r25, 0xE8	; 232
     a0e:	dc f3       	brlt	.-10     	; 0xa06 <__mulsf3_pse+0x82>
     a10:	86 95       	lsr	r24
     a12:	77 95       	ror	r23
     a14:	67 95       	ror	r22
     a16:	b7 95       	ror	r27
     a18:	f7 95       	ror	r31
     a1a:	e7 95       	ror	r30
     a1c:	9f 5f       	subi	r25, 0xFF	; 255
     a1e:	c1 f7       	brne	.-16     	; 0xa10 <__mulsf3_pse+0x8c>
     a20:	fe 2b       	or	r31, r30
     a22:	88 0f       	add	r24, r24
     a24:	91 1d       	adc	r25, r1
     a26:	96 95       	lsr	r25
     a28:	87 95       	ror	r24
     a2a:	97 f9       	bld	r25, 7
     a2c:	08 95       	ret

00000a2e <__fp_inf>:
     a2e:	97 f9       	bld	r25, 7
     a30:	9f 67       	ori	r25, 0x7F	; 127
     a32:	80 e8       	ldi	r24, 0x80	; 128
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	08 95       	ret

00000a3a <__fp_nan>:
     a3a:	9f ef       	ldi	r25, 0xFF	; 255
     a3c:	80 ec       	ldi	r24, 0xC0	; 192
     a3e:	08 95       	ret

00000a40 <__fp_pscA>:
     a40:	00 24       	eor	r0, r0
     a42:	0a 94       	dec	r0
     a44:	16 16       	cp	r1, r22
     a46:	17 06       	cpc	r1, r23
     a48:	18 06       	cpc	r1, r24
     a4a:	09 06       	cpc	r0, r25
     a4c:	08 95       	ret

00000a4e <__fp_pscB>:
     a4e:	00 24       	eor	r0, r0
     a50:	0a 94       	dec	r0
     a52:	12 16       	cp	r1, r18
     a54:	13 06       	cpc	r1, r19
     a56:	14 06       	cpc	r1, r20
     a58:	05 06       	cpc	r0, r21
     a5a:	08 95       	ret

00000a5c <__fp_round>:
     a5c:	09 2e       	mov	r0, r25
     a5e:	03 94       	inc	r0
     a60:	00 0c       	add	r0, r0
     a62:	11 f4       	brne	.+4      	; 0xa68 <__fp_round+0xc>
     a64:	88 23       	and	r24, r24
     a66:	52 f0       	brmi	.+20     	; 0xa7c <__fp_round+0x20>
     a68:	bb 0f       	add	r27, r27
     a6a:	40 f4       	brcc	.+16     	; 0xa7c <__fp_round+0x20>
     a6c:	bf 2b       	or	r27, r31
     a6e:	11 f4       	brne	.+4      	; 0xa74 <__fp_round+0x18>
     a70:	60 ff       	sbrs	r22, 0
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__fp_round+0x20>
     a74:	6f 5f       	subi	r22, 0xFF	; 255
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	8f 4f       	sbci	r24, 0xFF	; 255
     a7a:	9f 4f       	sbci	r25, 0xFF	; 255
     a7c:	08 95       	ret

00000a7e <__fp_split3>:
     a7e:	57 fd       	sbrc	r21, 7
     a80:	90 58       	subi	r25, 0x80	; 128
     a82:	44 0f       	add	r20, r20
     a84:	55 1f       	adc	r21, r21
     a86:	59 f0       	breq	.+22     	; 0xa9e <__fp_splitA+0x10>
     a88:	5f 3f       	cpi	r21, 0xFF	; 255
     a8a:	71 f0       	breq	.+28     	; 0xaa8 <__fp_splitA+0x1a>
     a8c:	47 95       	ror	r20

00000a8e <__fp_splitA>:
     a8e:	88 0f       	add	r24, r24
     a90:	97 fb       	bst	r25, 7
     a92:	99 1f       	adc	r25, r25
     a94:	61 f0       	breq	.+24     	; 0xaae <__fp_splitA+0x20>
     a96:	9f 3f       	cpi	r25, 0xFF	; 255
     a98:	79 f0       	breq	.+30     	; 0xab8 <__fp_splitA+0x2a>
     a9a:	87 95       	ror	r24
     a9c:	08 95       	ret
     a9e:	12 16       	cp	r1, r18
     aa0:	13 06       	cpc	r1, r19
     aa2:	14 06       	cpc	r1, r20
     aa4:	55 1f       	adc	r21, r21
     aa6:	f2 cf       	rjmp	.-28     	; 0xa8c <__fp_split3+0xe>
     aa8:	46 95       	lsr	r20
     aaa:	f1 df       	rcall	.-30     	; 0xa8e <__fp_splitA>
     aac:	08 c0       	rjmp	.+16     	; 0xabe <__fp_splitA+0x30>
     aae:	16 16       	cp	r1, r22
     ab0:	17 06       	cpc	r1, r23
     ab2:	18 06       	cpc	r1, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	f1 cf       	rjmp	.-30     	; 0xa9a <__fp_splitA+0xc>
     ab8:	86 95       	lsr	r24
     aba:	71 05       	cpc	r23, r1
     abc:	61 05       	cpc	r22, r1
     abe:	08 94       	sec
     ac0:	08 95       	ret

00000ac2 <__fp_zero>:
     ac2:	e8 94       	clt

00000ac4 <__fp_szero>:
     ac4:	bb 27       	eor	r27, r27
     ac6:	66 27       	eor	r22, r22
     ac8:	77 27       	eor	r23, r23
     aca:	cb 01       	movw	r24, r22
     acc:	97 f9       	bld	r25, 7
     ace:	08 95       	ret

00000ad0 <vfprintf>:
     ad0:	2f 92       	push	r2
     ad2:	3f 92       	push	r3
     ad4:	4f 92       	push	r4
     ad6:	5f 92       	push	r5
     ad8:	6f 92       	push	r6
     ada:	7f 92       	push	r7
     adc:	8f 92       	push	r8
     ade:	9f 92       	push	r9
     ae0:	af 92       	push	r10
     ae2:	bf 92       	push	r11
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	62 97       	sbiw	r28, 0x12	; 18
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	7c 01       	movw	r14, r24
     b06:	1b 01       	movw	r2, r22
     b08:	6a 01       	movw	r12, r20
     b0a:	fc 01       	movw	r30, r24
     b0c:	17 82       	std	Z+7, r1	; 0x07
     b0e:	16 82       	std	Z+6, r1	; 0x06
     b10:	83 81       	ldd	r24, Z+3	; 0x03
     b12:	81 fd       	sbrc	r24, 1
     b14:	03 c0       	rjmp	.+6      	; 0xb1c <vfprintf+0x4c>
     b16:	6b c3       	rjmp	.+1750   	; 0x11ee <vfprintf+0x71e>
     b18:	65 01       	movw	r12, r10
     b1a:	05 c0       	rjmp	.+10     	; 0xb26 <vfprintf+0x56>
     b1c:	88 24       	eor	r8, r8
     b1e:	83 94       	inc	r8
     b20:	91 2c       	mov	r9, r1
     b22:	8c 0e       	add	r8, r28
     b24:	9d 1e       	adc	r9, r29
     b26:	f7 01       	movw	r30, r14
     b28:	93 81       	ldd	r25, Z+3	; 0x03
     b2a:	f1 01       	movw	r30, r2
     b2c:	93 fd       	sbrc	r25, 3
     b2e:	85 91       	lpm	r24, Z+
     b30:	93 ff       	sbrs	r25, 3
     b32:	81 91       	ld	r24, Z+
     b34:	1f 01       	movw	r2, r30
     b36:	88 23       	and	r24, r24
     b38:	09 f4       	brne	.+2      	; 0xb3c <vfprintf+0x6c>
     b3a:	55 c3       	rjmp	.+1706   	; 0x11e6 <vfprintf+0x716>
     b3c:	85 32       	cpi	r24, 0x25	; 37
     b3e:	39 f4       	brne	.+14     	; 0xb4e <vfprintf+0x7e>
     b40:	93 fd       	sbrc	r25, 3
     b42:	85 91       	lpm	r24, Z+
     b44:	93 ff       	sbrs	r25, 3
     b46:	81 91       	ld	r24, Z+
     b48:	1f 01       	movw	r2, r30
     b4a:	85 32       	cpi	r24, 0x25	; 37
     b4c:	31 f4       	brne	.+12     	; 0xb5a <vfprintf+0x8a>
     b4e:	b7 01       	movw	r22, r14
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     b56:	56 01       	movw	r10, r12
     b58:	df cf       	rjmp	.-66     	; 0xb18 <vfprintf+0x48>
     b5a:	71 2c       	mov	r7, r1
     b5c:	61 2c       	mov	r6, r1
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	20 32       	cpi	r18, 0x20	; 32
     b62:	a8 f4       	brcc	.+42     	; 0xb8e <vfprintf+0xbe>
     b64:	8b 32       	cpi	r24, 0x2B	; 43
     b66:	61 f0       	breq	.+24     	; 0xb80 <vfprintf+0xb0>
     b68:	28 f4       	brcc	.+10     	; 0xb74 <vfprintf+0xa4>
     b6a:	80 32       	cpi	r24, 0x20	; 32
     b6c:	51 f0       	breq	.+20     	; 0xb82 <vfprintf+0xb2>
     b6e:	83 32       	cpi	r24, 0x23	; 35
     b70:	71 f4       	brne	.+28     	; 0xb8e <vfprintf+0xbe>
     b72:	0b c0       	rjmp	.+22     	; 0xb8a <vfprintf+0xba>
     b74:	8d 32       	cpi	r24, 0x2D	; 45
     b76:	39 f0       	breq	.+14     	; 0xb86 <vfprintf+0xb6>
     b78:	80 33       	cpi	r24, 0x30	; 48
     b7a:	49 f4       	brne	.+18     	; 0xb8e <vfprintf+0xbe>
     b7c:	21 60       	ori	r18, 0x01	; 1
     b7e:	28 c0       	rjmp	.+80     	; 0xbd0 <vfprintf+0x100>
     b80:	22 60       	ori	r18, 0x02	; 2
     b82:	24 60       	ori	r18, 0x04	; 4
     b84:	25 c0       	rjmp	.+74     	; 0xbd0 <vfprintf+0x100>
     b86:	28 60       	ori	r18, 0x08	; 8
     b88:	23 c0       	rjmp	.+70     	; 0xbd0 <vfprintf+0x100>
     b8a:	20 61       	ori	r18, 0x10	; 16
     b8c:	21 c0       	rjmp	.+66     	; 0xbd0 <vfprintf+0x100>
     b8e:	27 fd       	sbrc	r18, 7
     b90:	27 c0       	rjmp	.+78     	; 0xbe0 <vfprintf+0x110>
     b92:	38 2f       	mov	r19, r24
     b94:	30 53       	subi	r19, 0x30	; 48
     b96:	3a 30       	cpi	r19, 0x0A	; 10
     b98:	78 f4       	brcc	.+30     	; 0xbb8 <vfprintf+0xe8>
     b9a:	26 ff       	sbrs	r18, 6
     b9c:	06 c0       	rjmp	.+12     	; 0xbaa <vfprintf+0xda>
     b9e:	fa e0       	ldi	r31, 0x0A	; 10
     ba0:	7f 9e       	mul	r7, r31
     ba2:	30 0d       	add	r19, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	73 2e       	mov	r7, r19
     ba8:	13 c0       	rjmp	.+38     	; 0xbd0 <vfprintf+0x100>
     baa:	4a e0       	ldi	r20, 0x0A	; 10
     bac:	64 9e       	mul	r6, r20
     bae:	30 0d       	add	r19, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	63 2e       	mov	r6, r19
     bb4:	20 62       	ori	r18, 0x20	; 32
     bb6:	0c c0       	rjmp	.+24     	; 0xbd0 <vfprintf+0x100>
     bb8:	8e 32       	cpi	r24, 0x2E	; 46
     bba:	21 f4       	brne	.+8      	; 0xbc4 <vfprintf+0xf4>
     bbc:	26 fd       	sbrc	r18, 6
     bbe:	13 c3       	rjmp	.+1574   	; 0x11e6 <vfprintf+0x716>
     bc0:	20 64       	ori	r18, 0x40	; 64
     bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <vfprintf+0x100>
     bc4:	8c 36       	cpi	r24, 0x6C	; 108
     bc6:	11 f4       	brne	.+4      	; 0xbcc <vfprintf+0xfc>
     bc8:	20 68       	ori	r18, 0x80	; 128
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <vfprintf+0x100>
     bcc:	88 36       	cpi	r24, 0x68	; 104
     bce:	41 f4       	brne	.+16     	; 0xbe0 <vfprintf+0x110>
     bd0:	f1 01       	movw	r30, r2
     bd2:	93 fd       	sbrc	r25, 3
     bd4:	85 91       	lpm	r24, Z+
     bd6:	93 ff       	sbrs	r25, 3
     bd8:	81 91       	ld	r24, Z+
     bda:	1f 01       	movw	r2, r30
     bdc:	81 11       	cpse	r24, r1
     bde:	c0 cf       	rjmp	.-128    	; 0xb60 <vfprintf+0x90>
     be0:	98 2f       	mov	r25, r24
     be2:	95 54       	subi	r25, 0x45	; 69
     be4:	93 30       	cpi	r25, 0x03	; 3
     be6:	18 f4       	brcc	.+6      	; 0xbee <vfprintf+0x11e>
     be8:	20 61       	ori	r18, 0x10	; 16
     bea:	80 5e       	subi	r24, 0xE0	; 224
     bec:	06 c0       	rjmp	.+12     	; 0xbfa <vfprintf+0x12a>
     bee:	98 2f       	mov	r25, r24
     bf0:	95 56       	subi	r25, 0x65	; 101
     bf2:	93 30       	cpi	r25, 0x03	; 3
     bf4:	08 f0       	brcs	.+2      	; 0xbf8 <vfprintf+0x128>
     bf6:	a4 c1       	rjmp	.+840    	; 0xf40 <vfprintf+0x470>
     bf8:	2f 7e       	andi	r18, 0xEF	; 239
     bfa:	26 fd       	sbrc	r18, 6
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <vfprintf+0x132>
     bfe:	16 e0       	ldi	r17, 0x06	; 6
     c00:	71 2e       	mov	r7, r17
     c02:	bf e3       	ldi	r27, 0x3F	; 63
     c04:	5b 2e       	mov	r5, r27
     c06:	52 22       	and	r5, r18
     c08:	85 36       	cpi	r24, 0x65	; 101
     c0a:	19 f4       	brne	.+6      	; 0xc12 <vfprintf+0x142>
     c0c:	f0 e4       	ldi	r31, 0x40	; 64
     c0e:	5f 2a       	or	r5, r31
     c10:	07 c0       	rjmp	.+14     	; 0xc20 <vfprintf+0x150>
     c12:	86 36       	cpi	r24, 0x66	; 102
     c14:	19 f4       	brne	.+6      	; 0xc1c <vfprintf+0x14c>
     c16:	40 e8       	ldi	r20, 0x80	; 128
     c18:	54 2a       	or	r5, r20
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <vfprintf+0x150>
     c1c:	71 10       	cpse	r7, r1
     c1e:	7a 94       	dec	r7
     c20:	57 fe       	sbrs	r5, 7
     c22:	07 c0       	rjmp	.+14     	; 0xc32 <vfprintf+0x162>
     c24:	5b e3       	ldi	r21, 0x3B	; 59
     c26:	57 15       	cp	r21, r7
     c28:	48 f0       	brcs	.+18     	; 0xc3c <vfprintf+0x16c>
     c2a:	47 2c       	mov	r4, r7
     c2c:	43 94       	inc	r4
     c2e:	27 e0       	ldi	r18, 0x07	; 7
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <vfprintf+0x17c>
     c32:	87 e0       	ldi	r24, 0x07	; 7
     c34:	87 15       	cp	r24, r7
     c36:	30 f0       	brcs	.+12     	; 0xc44 <vfprintf+0x174>
     c38:	27 2d       	mov	r18, r7
     c3a:	07 c0       	rjmp	.+14     	; 0xc4a <vfprintf+0x17a>
     c3c:	27 e0       	ldi	r18, 0x07	; 7
     c3e:	ac e3       	ldi	r26, 0x3C	; 60
     c40:	4a 2e       	mov	r4, r26
     c42:	04 c0       	rjmp	.+8      	; 0xc4c <vfprintf+0x17c>
     c44:	27 e0       	ldi	r18, 0x07	; 7
     c46:	f7 e0       	ldi	r31, 0x07	; 7
     c48:	7f 2e       	mov	r7, r31
     c4a:	41 2c       	mov	r4, r1
     c4c:	56 01       	movw	r10, r12
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	a9 0e       	add	r10, r25
     c52:	b1 1c       	adc	r11, r1
     c54:	f6 01       	movw	r30, r12
     c56:	60 81       	ld	r22, Z
     c58:	71 81       	ldd	r23, Z+1	; 0x01
     c5a:	82 81       	ldd	r24, Z+2	; 0x02
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	04 2d       	mov	r16, r4
     c60:	a4 01       	movw	r20, r8
     c62:	0e 94 3b 09 	call	0x1276	; 0x1276 <__ftoa_engine>
     c66:	8c 01       	movw	r16, r24
     c68:	49 81       	ldd	r20, Y+1	; 0x01
     c6a:	4c 87       	std	Y+12, r20	; 0x0c
     c6c:	40 ff       	sbrs	r20, 0
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <vfprintf+0x1a4>
     c70:	43 ff       	sbrs	r20, 3
     c72:	07 c0       	rjmp	.+14     	; 0xc82 <vfprintf+0x1b2>
     c74:	51 fc       	sbrc	r5, 1
     c76:	08 c0       	rjmp	.+16     	; 0xc88 <vfprintf+0x1b8>
     c78:	52 fe       	sbrs	r5, 2
     c7a:	09 c0       	rjmp	.+18     	; 0xc8e <vfprintf+0x1be>
     c7c:	e0 e2       	ldi	r30, 0x20	; 32
     c7e:	de 2e       	mov	r13, r30
     c80:	07 c0       	rjmp	.+14     	; 0xc90 <vfprintf+0x1c0>
     c82:	7d e2       	ldi	r23, 0x2D	; 45
     c84:	d7 2e       	mov	r13, r23
     c86:	04 c0       	rjmp	.+8      	; 0xc90 <vfprintf+0x1c0>
     c88:	6b e2       	ldi	r22, 0x2B	; 43
     c8a:	d6 2e       	mov	r13, r22
     c8c:	01 c0       	rjmp	.+2      	; 0xc90 <vfprintf+0x1c0>
     c8e:	d1 2c       	mov	r13, r1
     c90:	8c 85       	ldd	r24, Y+12	; 0x0c
     c92:	8c 70       	andi	r24, 0x0C	; 12
     c94:	a1 f1       	breq	.+104    	; 0xcfe <vfprintf+0x22e>
     c96:	dd 20       	and	r13, r13
     c98:	11 f0       	breq	.+4      	; 0xc9e <vfprintf+0x1ce>
     c9a:	84 e0       	ldi	r24, 0x04	; 4
     c9c:	01 c0       	rjmp	.+2      	; 0xca0 <vfprintf+0x1d0>
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	86 15       	cp	r24, r6
     ca2:	10 f0       	brcs	.+4      	; 0xca8 <vfprintf+0x1d8>
     ca4:	61 2c       	mov	r6, r1
     ca6:	0b c0       	rjmp	.+22     	; 0xcbe <vfprintf+0x1ee>
     ca8:	68 1a       	sub	r6, r24
     caa:	53 fc       	sbrc	r5, 3
     cac:	08 c0       	rjmp	.+16     	; 0xcbe <vfprintf+0x1ee>
     cae:	b7 01       	movw	r22, r14
     cb0:	80 e2       	ldi	r24, 0x20	; 32
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     cb8:	6a 94       	dec	r6
     cba:	c9 f7       	brne	.-14     	; 0xcae <vfprintf+0x1de>
     cbc:	f3 cf       	rjmp	.-26     	; 0xca4 <vfprintf+0x1d4>
     cbe:	dd 20       	and	r13, r13
     cc0:	29 f0       	breq	.+10     	; 0xccc <vfprintf+0x1fc>
     cc2:	b7 01       	movw	r22, r14
     cc4:	8d 2d       	mov	r24, r13
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     ccc:	5c 85       	ldd	r21, Y+12	; 0x0c
     cce:	53 fd       	sbrc	r21, 3
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <vfprintf+0x208>
     cd2:	0f ee       	ldi	r16, 0xEF	; 239
     cd4:	10 e0       	ldi	r17, 0x00	; 0
     cd6:	0c c0       	rjmp	.+24     	; 0xcf0 <vfprintf+0x220>
     cd8:	0b ee       	ldi	r16, 0xEB	; 235
     cda:	10 e0       	ldi	r17, 0x00	; 0
     cdc:	09 c0       	rjmp	.+18     	; 0xcf0 <vfprintf+0x220>
     cde:	51 10       	cpse	r5, r1
     ce0:	80 52       	subi	r24, 0x20	; 32
     ce2:	b7 01       	movw	r22, r14
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     cea:	0f 5f       	subi	r16, 0xFF	; 255
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <vfprintf+0x224>
     cf0:	80 e1       	ldi	r24, 0x10	; 16
     cf2:	58 22       	and	r5, r24
     cf4:	f8 01       	movw	r30, r16
     cf6:	84 91       	lpm	r24, Z
     cf8:	81 11       	cpse	r24, r1
     cfa:	f1 cf       	rjmp	.-30     	; 0xcde <vfprintf+0x20e>
     cfc:	71 c2       	rjmp	.+1250   	; 0x11e0 <vfprintf+0x710>
     cfe:	57 fe       	sbrs	r5, 7
     d00:	0e c0       	rjmp	.+28     	; 0xd1e <vfprintf+0x24e>
     d02:	40 0e       	add	r4, r16
     d04:	4c 85       	ldd	r20, Y+12	; 0x0c
     d06:	44 ff       	sbrs	r20, 4
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <vfprintf+0x242>
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	81 33       	cpi	r24, 0x31	; 49
     d0e:	09 f4       	brne	.+2      	; 0xd12 <vfprintf+0x242>
     d10:	4a 94       	dec	r4
     d12:	14 14       	cp	r1, r4
     d14:	4c f5       	brge	.+82     	; 0xd68 <vfprintf+0x298>
     d16:	58 e0       	ldi	r21, 0x08	; 8
     d18:	54 15       	cp	r21, r4
     d1a:	48 f1       	brcs	.+82     	; 0xd6e <vfprintf+0x29e>
     d1c:	2c c0       	rjmp	.+88     	; 0xd76 <vfprintf+0x2a6>
     d1e:	56 fc       	sbrc	r5, 6
     d20:	2a c0       	rjmp	.+84     	; 0xd76 <vfprintf+0x2a6>
     d22:	87 2d       	mov	r24, r7
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	80 17       	cp	r24, r16
     d28:	91 07       	cpc	r25, r17
     d2a:	44 f0       	brlt	.+16     	; 0xd3c <vfprintf+0x26c>
     d2c:	0c 3f       	cpi	r16, 0xFC	; 252
     d2e:	8f ef       	ldi	r24, 0xFF	; 255
     d30:	18 07       	cpc	r17, r24
     d32:	24 f0       	brlt	.+8      	; 0xd3c <vfprintf+0x26c>
     d34:	90 e8       	ldi	r25, 0x80	; 128
     d36:	59 2a       	or	r5, r25
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <vfprintf+0x26c>
     d3a:	7a 94       	dec	r7
     d3c:	77 20       	and	r7, r7
     d3e:	49 f0       	breq	.+18     	; 0xd52 <vfprintf+0x282>
     d40:	e2 e0       	ldi	r30, 0x02	; 2
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	ec 0f       	add	r30, r28
     d46:	fd 1f       	adc	r31, r29
     d48:	e7 0d       	add	r30, r7
     d4a:	f1 1d       	adc	r31, r1
     d4c:	80 81       	ld	r24, Z
     d4e:	80 33       	cpi	r24, 0x30	; 48
     d50:	a1 f3       	breq	.-24     	; 0xd3a <vfprintf+0x26a>
     d52:	57 fe       	sbrs	r5, 7
     d54:	10 c0       	rjmp	.+32     	; 0xd76 <vfprintf+0x2a6>
     d56:	47 2c       	mov	r4, r7
     d58:	43 94       	inc	r4
     d5a:	87 2d       	mov	r24, r7
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	08 17       	cp	r16, r24
     d60:	19 07       	cpc	r17, r25
     d62:	44 f4       	brge	.+16     	; 0xd74 <vfprintf+0x2a4>
     d64:	70 1a       	sub	r7, r16
     d66:	07 c0       	rjmp	.+14     	; 0xd76 <vfprintf+0x2a6>
     d68:	44 24       	eor	r4, r4
     d6a:	43 94       	inc	r4
     d6c:	04 c0       	rjmp	.+8      	; 0xd76 <vfprintf+0x2a6>
     d6e:	58 e0       	ldi	r21, 0x08	; 8
     d70:	45 2e       	mov	r4, r21
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <vfprintf+0x2a6>
     d74:	71 2c       	mov	r7, r1
     d76:	57 fe       	sbrs	r5, 7
     d78:	07 c0       	rjmp	.+14     	; 0xd88 <vfprintf+0x2b8>
     d7a:	10 16       	cp	r1, r16
     d7c:	11 06       	cpc	r1, r17
     d7e:	3c f4       	brge	.+14     	; 0xd8e <vfprintf+0x2be>
     d80:	98 01       	movw	r18, r16
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <vfprintf+0x2c2>
     d88:	25 e0       	ldi	r18, 0x05	; 5
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <vfprintf+0x2c2>
     d8e:	21 e0       	ldi	r18, 0x01	; 1
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	dd 20       	and	r13, r13
     d94:	11 f0       	breq	.+4      	; 0xd9a <vfprintf+0x2ca>
     d96:	2f 5f       	subi	r18, 0xFF	; 255
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
     d9a:	77 20       	and	r7, r7
     d9c:	31 f0       	breq	.+12     	; 0xdaa <vfprintf+0x2da>
     d9e:	47 2d       	mov	r20, r7
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	4f 5f       	subi	r20, 0xFF	; 255
     da4:	5f 4f       	sbci	r21, 0xFF	; 255
     da6:	24 0f       	add	r18, r20
     da8:	35 1f       	adc	r19, r21
     daa:	46 2d       	mov	r20, r6
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	24 17       	cp	r18, r20
     db0:	35 07       	cpc	r19, r21
     db2:	14 f4       	brge	.+4      	; 0xdb8 <vfprintf+0x2e8>
     db4:	62 1a       	sub	r6, r18
     db6:	01 c0       	rjmp	.+2      	; 0xdba <vfprintf+0x2ea>
     db8:	61 2c       	mov	r6, r1
     dba:	85 2d       	mov	r24, r5
     dbc:	89 70       	andi	r24, 0x09	; 9
     dbe:	49 f4       	brne	.+18     	; 0xdd2 <vfprintf+0x302>
     dc0:	06 c0       	rjmp	.+12     	; 0xdce <vfprintf+0x2fe>
     dc2:	b7 01       	movw	r22, r14
     dc4:	80 e2       	ldi	r24, 0x20	; 32
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     dcc:	6a 94       	dec	r6
     dce:	61 10       	cpse	r6, r1
     dd0:	f8 cf       	rjmp	.-16     	; 0xdc2 <vfprintf+0x2f2>
     dd2:	dd 20       	and	r13, r13
     dd4:	29 f0       	breq	.+10     	; 0xde0 <vfprintf+0x310>
     dd6:	b7 01       	movw	r22, r14
     dd8:	8d 2d       	mov	r24, r13
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     de0:	53 fc       	sbrc	r5, 3
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <vfprintf+0x326>
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <vfprintf+0x322>
     de6:	b7 01       	movw	r22, r14
     de8:	80 e3       	ldi	r24, 0x30	; 48
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     df0:	6a 94       	dec	r6
     df2:	61 10       	cpse	r6, r1
     df4:	f8 cf       	rjmp	.-16     	; 0xde6 <vfprintf+0x316>
     df6:	57 fe       	sbrs	r5, 7
     df8:	56 c0       	rjmp	.+172    	; 0xea6 <vfprintf+0x3d6>
     dfa:	68 01       	movw	r12, r16
     dfc:	17 ff       	sbrs	r17, 7
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0x334>
     e00:	c1 2c       	mov	r12, r1
     e02:	d1 2c       	mov	r13, r1
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	a8 01       	movw	r20, r16
     e0a:	44 19       	sub	r20, r4
     e0c:	51 09       	sbc	r21, r1
     e0e:	5e 87       	std	Y+14, r21	; 0x0e
     e10:	4d 87       	std	Y+13, r20	; 0x0d
     e12:	28 01       	movw	r4, r16
     e14:	4c 18       	sub	r4, r12
     e16:	5d 08       	sbc	r5, r13
     e18:	48 0c       	add	r4, r8
     e1a:	59 1c       	adc	r5, r9
     e1c:	87 2d       	mov	r24, r7
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	44 27       	eor	r20, r20
     e22:	55 27       	eor	r21, r21
     e24:	48 1b       	sub	r20, r24
     e26:	59 0b       	sbc	r21, r25
     e28:	58 8b       	std	Y+16, r21	; 0x10
     e2a:	4f 87       	std	Y+15, r20	; 0x0f
     e2c:	5f ef       	ldi	r21, 0xFF	; 255
     e2e:	c5 16       	cp	r12, r21
     e30:	d5 06       	cpc	r13, r21
     e32:	49 f4       	brne	.+18     	; 0xe46 <vfprintf+0x376>
     e34:	b7 01       	movw	r22, r14
     e36:	8e e2       	ldi	r24, 0x2E	; 46
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	2a 8b       	std	Y+18, r18	; 0x12
     e3c:	39 8b       	std	Y+17, r19	; 0x11
     e3e:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     e42:	39 89       	ldd	r19, Y+17	; 0x11
     e44:	2a 89       	ldd	r18, Y+18	; 0x12
     e46:	0c 15       	cp	r16, r12
     e48:	1d 05       	cpc	r17, r13
     e4a:	54 f0       	brlt	.+20     	; 0xe60 <vfprintf+0x390>
     e4c:	4d 85       	ldd	r20, Y+13	; 0x0d
     e4e:	5e 85       	ldd	r21, Y+14	; 0x0e
     e50:	4c 15       	cp	r20, r12
     e52:	5d 05       	cpc	r21, r13
     e54:	2c f4       	brge	.+10     	; 0xe60 <vfprintf+0x390>
     e56:	f2 01       	movw	r30, r4
     e58:	e2 0f       	add	r30, r18
     e5a:	f3 1f       	adc	r31, r19
     e5c:	81 81       	ldd	r24, Z+1	; 0x01
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <vfprintf+0x392>
     e60:	80 e3       	ldi	r24, 0x30	; 48
     e62:	51 e0       	ldi	r21, 0x01	; 1
     e64:	c5 1a       	sub	r12, r21
     e66:	d1 08       	sbc	r13, r1
     e68:	2f 5f       	subi	r18, 0xFF	; 255
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	4f 85       	ldd	r20, Y+15	; 0x0f
     e6e:	58 89       	ldd	r21, Y+16	; 0x10
     e70:	c4 16       	cp	r12, r20
     e72:	d5 06       	cpc	r13, r21
     e74:	4c f0       	brlt	.+18     	; 0xe88 <vfprintf+0x3b8>
     e76:	b7 01       	movw	r22, r14
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	2a 8b       	std	Y+18, r18	; 0x12
     e7c:	39 8b       	std	Y+17, r19	; 0x11
     e7e:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     e82:	2a 89       	ldd	r18, Y+18	; 0x12
     e84:	39 89       	ldd	r19, Y+17	; 0x11
     e86:	d2 cf       	rjmp	.-92     	; 0xe2c <vfprintf+0x35c>
     e88:	c0 16       	cp	r12, r16
     e8a:	d1 06       	cpc	r13, r17
     e8c:	49 f4       	brne	.+18     	; 0xea0 <vfprintf+0x3d0>
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	96 33       	cpi	r25, 0x36	; 54
     e92:	28 f4       	brcc	.+10     	; 0xe9e <vfprintf+0x3ce>
     e94:	95 33       	cpi	r25, 0x35	; 53
     e96:	21 f4       	brne	.+8      	; 0xea0 <vfprintf+0x3d0>
     e98:	5c 85       	ldd	r21, Y+12	; 0x0c
     e9a:	54 fd       	sbrc	r21, 4
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <vfprintf+0x3d0>
     e9e:	81 e3       	ldi	r24, 0x31	; 49
     ea0:	b7 01       	movw	r22, r14
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	4a c0       	rjmp	.+148    	; 0xf3a <vfprintf+0x46a>
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	81 33       	cpi	r24, 0x31	; 49
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <vfprintf+0x3e2>
     eac:	4c 85       	ldd	r20, Y+12	; 0x0c
     eae:	4f 7e       	andi	r20, 0xEF	; 239
     eb0:	4c 87       	std	Y+12, r20	; 0x0c
     eb2:	b7 01       	movw	r22, r14
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     eba:	71 10       	cpse	r7, r1
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <vfprintf+0x3f8>
     ebe:	54 fe       	sbrs	r5, 4
     ec0:	16 c0       	rjmp	.+44     	; 0xeee <vfprintf+0x41e>
     ec2:	85 e4       	ldi	r24, 0x45	; 69
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	15 c0       	rjmp	.+42     	; 0xef2 <vfprintf+0x422>
     ec8:	b7 01       	movw	r22, r14
     eca:	8e e2       	ldi	r24, 0x2E	; 46
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     ed2:	42 e0       	ldi	r20, 0x02	; 2
     ed4:	d4 2e       	mov	r13, r20
     ed6:	f4 01       	movw	r30, r8
     ed8:	ed 0d       	add	r30, r13
     eda:	f1 1d       	adc	r31, r1
     edc:	d3 94       	inc	r13
     ede:	b7 01       	movw	r22, r14
     ee0:	80 81       	ld	r24, Z
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     ee8:	7a 94       	dec	r7
     eea:	a9 f7       	brne	.-22     	; 0xed6 <vfprintf+0x406>
     eec:	e8 cf       	rjmp	.-48     	; 0xebe <vfprintf+0x3ee>
     eee:	85 e6       	ldi	r24, 0x65	; 101
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	b7 01       	movw	r22, r14
     ef4:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     ef8:	17 fd       	sbrc	r17, 7
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <vfprintf+0x438>
     efc:	01 15       	cp	r16, r1
     efe:	11 05       	cpc	r17, r1
     f00:	41 f4       	brne	.+16     	; 0xf12 <vfprintf+0x442>
     f02:	5c 85       	ldd	r21, Y+12	; 0x0c
     f04:	54 ff       	sbrs	r21, 4
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <vfprintf+0x442>
     f08:	11 95       	neg	r17
     f0a:	01 95       	neg	r16
     f0c:	11 09       	sbc	r17, r1
     f0e:	8d e2       	ldi	r24, 0x2D	; 45
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <vfprintf+0x444>
     f12:	8b e2       	ldi	r24, 0x2B	; 43
     f14:	b7 01       	movw	r22, r14
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     f1c:	80 e3       	ldi	r24, 0x30	; 48
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <vfprintf+0x456>
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	0a 50       	subi	r16, 0x0A	; 10
     f24:	11 09       	sbc	r17, r1
     f26:	0a 30       	cpi	r16, 0x0A	; 10
     f28:	11 05       	cpc	r17, r1
     f2a:	d4 f7       	brge	.-12     	; 0xf20 <vfprintf+0x450>
     f2c:	b7 01       	movw	r22, r14
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     f34:	b7 01       	movw	r22, r14
     f36:	c8 01       	movw	r24, r16
     f38:	c0 96       	adiw	r24, 0x30	; 48
     f3a:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     f3e:	50 c1       	rjmp	.+672    	; 0x11e0 <vfprintf+0x710>
     f40:	83 36       	cpi	r24, 0x63	; 99
     f42:	31 f0       	breq	.+12     	; 0xf50 <vfprintf+0x480>
     f44:	83 37       	cpi	r24, 0x73	; 115
     f46:	81 f0       	breq	.+32     	; 0xf68 <vfprintf+0x498>
     f48:	83 35       	cpi	r24, 0x53	; 83
     f4a:	09 f0       	breq	.+2      	; 0xf4e <vfprintf+0x47e>
     f4c:	5e c0       	rjmp	.+188    	; 0x100a <vfprintf+0x53a>
     f4e:	24 c0       	rjmp	.+72     	; 0xf98 <vfprintf+0x4c8>
     f50:	56 01       	movw	r10, r12
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	a8 0e       	add	r10, r24
     f56:	b1 1c       	adc	r11, r1
     f58:	f6 01       	movw	r30, r12
     f5a:	80 81       	ld	r24, Z
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	cc 24       	eor	r12, r12
     f60:	c3 94       	inc	r12
     f62:	d1 2c       	mov	r13, r1
     f64:	84 01       	movw	r16, r8
     f66:	14 c0       	rjmp	.+40     	; 0xf90 <vfprintf+0x4c0>
     f68:	56 01       	movw	r10, r12
     f6a:	f2 e0       	ldi	r31, 0x02	; 2
     f6c:	af 0e       	add	r10, r31
     f6e:	b1 1c       	adc	r11, r1
     f70:	f6 01       	movw	r30, r12
     f72:	00 81       	ld	r16, Z
     f74:	11 81       	ldd	r17, Z+1	; 0x01
     f76:	26 ff       	sbrs	r18, 6
     f78:	03 c0       	rjmp	.+6      	; 0xf80 <vfprintf+0x4b0>
     f7a:	67 2d       	mov	r22, r7
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <vfprintf+0x4b4>
     f80:	6f ef       	ldi	r22, 0xFF	; 255
     f82:	7f ef       	ldi	r23, 0xFF	; 255
     f84:	c8 01       	movw	r24, r16
     f86:	2a 8b       	std	Y+18, r18	; 0x12
     f88:	0e 94 25 0a 	call	0x144a	; 0x144a <strnlen>
     f8c:	6c 01       	movw	r12, r24
     f8e:	2a 89       	ldd	r18, Y+18	; 0x12
     f90:	9f e7       	ldi	r25, 0x7F	; 127
     f92:	59 2e       	mov	r5, r25
     f94:	52 22       	and	r5, r18
     f96:	17 c0       	rjmp	.+46     	; 0xfc6 <vfprintf+0x4f6>
     f98:	56 01       	movw	r10, r12
     f9a:	f2 e0       	ldi	r31, 0x02	; 2
     f9c:	af 0e       	add	r10, r31
     f9e:	b1 1c       	adc	r11, r1
     fa0:	f6 01       	movw	r30, r12
     fa2:	00 81       	ld	r16, Z
     fa4:	11 81       	ldd	r17, Z+1	; 0x01
     fa6:	26 ff       	sbrs	r18, 6
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <vfprintf+0x4e0>
     faa:	67 2d       	mov	r22, r7
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <vfprintf+0x4e4>
     fb0:	6f ef       	ldi	r22, 0xFF	; 255
     fb2:	7f ef       	ldi	r23, 0xFF	; 255
     fb4:	c8 01       	movw	r24, r16
     fb6:	2a 8b       	std	Y+18, r18	; 0x12
     fb8:	0e 94 13 0a 	call	0x1426	; 0x1426 <strnlen_P>
     fbc:	6c 01       	movw	r12, r24
     fbe:	2a 89       	ldd	r18, Y+18	; 0x12
     fc0:	80 e8       	ldi	r24, 0x80	; 128
     fc2:	58 2e       	mov	r5, r24
     fc4:	52 2a       	or	r5, r18
     fc6:	53 fc       	sbrc	r5, 3
     fc8:	1c c0       	rjmp	.+56     	; 0x1002 <vfprintf+0x532>
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <vfprintf+0x508>
     fcc:	b7 01       	movw	r22, r14
     fce:	80 e2       	ldi	r24, 0x20	; 32
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     fd6:	6a 94       	dec	r6
     fd8:	86 2d       	mov	r24, r6
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	c8 16       	cp	r12, r24
     fde:	d9 06       	cpc	r13, r25
     fe0:	a8 f3       	brcs	.-22     	; 0xfcc <vfprintf+0x4fc>
     fe2:	0f c0       	rjmp	.+30     	; 0x1002 <vfprintf+0x532>
     fe4:	f8 01       	movw	r30, r16
     fe6:	57 fc       	sbrc	r5, 7
     fe8:	85 91       	lpm	r24, Z+
     fea:	57 fe       	sbrs	r5, 7
     fec:	81 91       	ld	r24, Z+
     fee:	8f 01       	movw	r16, r30
     ff0:	b7 01       	movw	r22, r14
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
     ff8:	61 10       	cpse	r6, r1
     ffa:	6a 94       	dec	r6
     ffc:	f1 e0       	ldi	r31, 0x01	; 1
     ffe:	cf 1a       	sub	r12, r31
    1000:	d1 08       	sbc	r13, r1
    1002:	c1 14       	cp	r12, r1
    1004:	d1 04       	cpc	r13, r1
    1006:	71 f7       	brne	.-36     	; 0xfe4 <vfprintf+0x514>
    1008:	eb c0       	rjmp	.+470    	; 0x11e0 <vfprintf+0x710>
    100a:	84 36       	cpi	r24, 0x64	; 100
    100c:	11 f0       	breq	.+4      	; 0x1012 <vfprintf+0x542>
    100e:	89 36       	cpi	r24, 0x69	; 105
    1010:	51 f5       	brne	.+84     	; 0x1066 <vfprintf+0x596>
    1012:	56 01       	movw	r10, r12
    1014:	27 ff       	sbrs	r18, 7
    1016:	09 c0       	rjmp	.+18     	; 0x102a <vfprintf+0x55a>
    1018:	44 e0       	ldi	r20, 0x04	; 4
    101a:	a4 0e       	add	r10, r20
    101c:	b1 1c       	adc	r11, r1
    101e:	f6 01       	movw	r30, r12
    1020:	60 81       	ld	r22, Z
    1022:	71 81       	ldd	r23, Z+1	; 0x01
    1024:	82 81       	ldd	r24, Z+2	; 0x02
    1026:	93 81       	ldd	r25, Z+3	; 0x03
    1028:	0a c0       	rjmp	.+20     	; 0x103e <vfprintf+0x56e>
    102a:	f2 e0       	ldi	r31, 0x02	; 2
    102c:	af 0e       	add	r10, r31
    102e:	b1 1c       	adc	r11, r1
    1030:	f6 01       	movw	r30, r12
    1032:	60 81       	ld	r22, Z
    1034:	71 81       	ldd	r23, Z+1	; 0x01
    1036:	88 27       	eor	r24, r24
    1038:	77 fd       	sbrc	r23, 7
    103a:	80 95       	com	r24
    103c:	98 2f       	mov	r25, r24
    103e:	12 2f       	mov	r17, r18
    1040:	1f 76       	andi	r17, 0x6F	; 111
    1042:	97 ff       	sbrs	r25, 7
    1044:	08 c0       	rjmp	.+16     	; 0x1056 <vfprintf+0x586>
    1046:	90 95       	com	r25
    1048:	80 95       	com	r24
    104a:	70 95       	com	r23
    104c:	61 95       	neg	r22
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	8f 4f       	sbci	r24, 0xFF	; 255
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	10 68       	ori	r17, 0x80	; 128
    1056:	2a e0       	ldi	r18, 0x0A	; 10
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	a4 01       	movw	r20, r8
    105c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__ultoa_invert>
    1060:	d8 2e       	mov	r13, r24
    1062:	d8 18       	sub	r13, r8
    1064:	40 c0       	rjmp	.+128    	; 0x10e6 <vfprintf+0x616>
    1066:	12 2f       	mov	r17, r18
    1068:	85 37       	cpi	r24, 0x75	; 117
    106a:	21 f4       	brne	.+8      	; 0x1074 <vfprintf+0x5a4>
    106c:	1f 7e       	andi	r17, 0xEF	; 239
    106e:	2a e0       	ldi	r18, 0x0A	; 10
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	1f c0       	rjmp	.+62     	; 0x10b2 <vfprintf+0x5e2>
    1074:	19 7f       	andi	r17, 0xF9	; 249
    1076:	8f 36       	cpi	r24, 0x6F	; 111
    1078:	a1 f0       	breq	.+40     	; 0x10a2 <vfprintf+0x5d2>
    107a:	20 f4       	brcc	.+8      	; 0x1084 <vfprintf+0x5b4>
    107c:	88 35       	cpi	r24, 0x58	; 88
    107e:	09 f0       	breq	.+2      	; 0x1082 <vfprintf+0x5b2>
    1080:	b2 c0       	rjmp	.+356    	; 0x11e6 <vfprintf+0x716>
    1082:	0b c0       	rjmp	.+22     	; 0x109a <vfprintf+0x5ca>
    1084:	80 37       	cpi	r24, 0x70	; 112
    1086:	21 f0       	breq	.+8      	; 0x1090 <vfprintf+0x5c0>
    1088:	88 37       	cpi	r24, 0x78	; 120
    108a:	09 f0       	breq	.+2      	; 0x108e <vfprintf+0x5be>
    108c:	ac c0       	rjmp	.+344    	; 0x11e6 <vfprintf+0x716>
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <vfprintf+0x5c2>
    1090:	10 61       	ori	r17, 0x10	; 16
    1092:	14 ff       	sbrs	r17, 4
    1094:	09 c0       	rjmp	.+18     	; 0x10a8 <vfprintf+0x5d8>
    1096:	14 60       	ori	r17, 0x04	; 4
    1098:	07 c0       	rjmp	.+14     	; 0x10a8 <vfprintf+0x5d8>
    109a:	24 ff       	sbrs	r18, 4
    109c:	08 c0       	rjmp	.+16     	; 0x10ae <vfprintf+0x5de>
    109e:	16 60       	ori	r17, 0x06	; 6
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <vfprintf+0x5de>
    10a2:	28 e0       	ldi	r18, 0x08	; 8
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	05 c0       	rjmp	.+10     	; 0x10b2 <vfprintf+0x5e2>
    10a8:	20 e1       	ldi	r18, 0x10	; 16
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <vfprintf+0x5e2>
    10ae:	20 e1       	ldi	r18, 0x10	; 16
    10b0:	32 e0       	ldi	r19, 0x02	; 2
    10b2:	56 01       	movw	r10, r12
    10b4:	17 ff       	sbrs	r17, 7
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <vfprintf+0x5fa>
    10b8:	f4 e0       	ldi	r31, 0x04	; 4
    10ba:	af 0e       	add	r10, r31
    10bc:	b1 1c       	adc	r11, r1
    10be:	f6 01       	movw	r30, r12
    10c0:	60 81       	ld	r22, Z
    10c2:	71 81       	ldd	r23, Z+1	; 0x01
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	93 81       	ldd	r25, Z+3	; 0x03
    10c8:	08 c0       	rjmp	.+16     	; 0x10da <vfprintf+0x60a>
    10ca:	f2 e0       	ldi	r31, 0x02	; 2
    10cc:	af 0e       	add	r10, r31
    10ce:	b1 1c       	adc	r11, r1
    10d0:	f6 01       	movw	r30, r12
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a4 01       	movw	r20, r8
    10dc:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__ultoa_invert>
    10e0:	d8 2e       	mov	r13, r24
    10e2:	d8 18       	sub	r13, r8
    10e4:	1f 77       	andi	r17, 0x7F	; 127
    10e6:	16 ff       	sbrs	r17, 6
    10e8:	0b c0       	rjmp	.+22     	; 0x1100 <vfprintf+0x630>
    10ea:	21 2f       	mov	r18, r17
    10ec:	2e 7f       	andi	r18, 0xFE	; 254
    10ee:	d7 14       	cp	r13, r7
    10f0:	50 f4       	brcc	.+20     	; 0x1106 <vfprintf+0x636>
    10f2:	14 ff       	sbrs	r17, 4
    10f4:	0a c0       	rjmp	.+20     	; 0x110a <vfprintf+0x63a>
    10f6:	12 fd       	sbrc	r17, 2
    10f8:	08 c0       	rjmp	.+16     	; 0x110a <vfprintf+0x63a>
    10fa:	21 2f       	mov	r18, r17
    10fc:	2e 7e       	andi	r18, 0xEE	; 238
    10fe:	05 c0       	rjmp	.+10     	; 0x110a <vfprintf+0x63a>
    1100:	0d 2d       	mov	r16, r13
    1102:	21 2f       	mov	r18, r17
    1104:	03 c0       	rjmp	.+6      	; 0x110c <vfprintf+0x63c>
    1106:	0d 2d       	mov	r16, r13
    1108:	01 c0       	rjmp	.+2      	; 0x110c <vfprintf+0x63c>
    110a:	07 2d       	mov	r16, r7
    110c:	24 ff       	sbrs	r18, 4
    110e:	0c c0       	rjmp	.+24     	; 0x1128 <vfprintf+0x658>
    1110:	fe 01       	movw	r30, r28
    1112:	ed 0d       	add	r30, r13
    1114:	f1 1d       	adc	r31, r1
    1116:	80 81       	ld	r24, Z
    1118:	80 33       	cpi	r24, 0x30	; 48
    111a:	11 f4       	brne	.+4      	; 0x1120 <vfprintf+0x650>
    111c:	29 7e       	andi	r18, 0xE9	; 233
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <vfprintf+0x660>
    1120:	22 ff       	sbrs	r18, 2
    1122:	05 c0       	rjmp	.+10     	; 0x112e <vfprintf+0x65e>
    1124:	0e 5f       	subi	r16, 0xFE	; 254
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <vfprintf+0x660>
    1128:	82 2f       	mov	r24, r18
    112a:	86 78       	andi	r24, 0x86	; 134
    112c:	09 f0       	breq	.+2      	; 0x1130 <vfprintf+0x660>
    112e:	0f 5f       	subi	r16, 0xFF	; 255
    1130:	23 fd       	sbrc	r18, 3
    1132:	14 c0       	rjmp	.+40     	; 0x115c <vfprintf+0x68c>
    1134:	20 ff       	sbrs	r18, 0
    1136:	0f c0       	rjmp	.+30     	; 0x1156 <vfprintf+0x686>
    1138:	7d 2c       	mov	r7, r13
    113a:	06 15       	cp	r16, r6
    113c:	60 f4       	brcc	.+24     	; 0x1156 <vfprintf+0x686>
    113e:	76 0c       	add	r7, r6
    1140:	70 1a       	sub	r7, r16
    1142:	06 2d       	mov	r16, r6
    1144:	08 c0       	rjmp	.+16     	; 0x1156 <vfprintf+0x686>
    1146:	b7 01       	movw	r22, r14
    1148:	80 e2       	ldi	r24, 0x20	; 32
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	2a 8b       	std	Y+18, r18	; 0x12
    114e:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
    1152:	0f 5f       	subi	r16, 0xFF	; 255
    1154:	2a 89       	ldd	r18, Y+18	; 0x12
    1156:	06 15       	cp	r16, r6
    1158:	b0 f3       	brcs	.-20     	; 0x1146 <vfprintf+0x676>
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <vfprintf+0x694>
    115c:	06 15       	cp	r16, r6
    115e:	10 f4       	brcc	.+4      	; 0x1164 <vfprintf+0x694>
    1160:	60 1a       	sub	r6, r16
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <vfprintf+0x696>
    1164:	61 2c       	mov	r6, r1
    1166:	24 ff       	sbrs	r18, 4
    1168:	12 c0       	rjmp	.+36     	; 0x118e <vfprintf+0x6be>
    116a:	b7 01       	movw	r22, r14
    116c:	80 e3       	ldi	r24, 0x30	; 48
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	2a 8b       	std	Y+18, r18	; 0x12
    1172:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
    1176:	2a 89       	ldd	r18, Y+18	; 0x12
    1178:	22 ff       	sbrs	r18, 2
    117a:	1e c0       	rjmp	.+60     	; 0x11b8 <vfprintf+0x6e8>
    117c:	21 ff       	sbrs	r18, 1
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <vfprintf+0x6b6>
    1180:	88 e5       	ldi	r24, 0x58	; 88
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 c0       	rjmp	.+4      	; 0x118a <vfprintf+0x6ba>
    1186:	88 e7       	ldi	r24, 0x78	; 120
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	b7 01       	movw	r22, r14
    118c:	0c c0       	rjmp	.+24     	; 0x11a6 <vfprintf+0x6d6>
    118e:	82 2f       	mov	r24, r18
    1190:	86 78       	andi	r24, 0x86	; 134
    1192:	91 f0       	breq	.+36     	; 0x11b8 <vfprintf+0x6e8>
    1194:	21 fd       	sbrc	r18, 1
    1196:	02 c0       	rjmp	.+4      	; 0x119c <vfprintf+0x6cc>
    1198:	80 e2       	ldi	r24, 0x20	; 32
    119a:	01 c0       	rjmp	.+2      	; 0x119e <vfprintf+0x6ce>
    119c:	8b e2       	ldi	r24, 0x2B	; 43
    119e:	27 fd       	sbrc	r18, 7
    11a0:	8d e2       	ldi	r24, 0x2D	; 45
    11a2:	b7 01       	movw	r22, r14
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
    11aa:	06 c0       	rjmp	.+12     	; 0x11b8 <vfprintf+0x6e8>
    11ac:	b7 01       	movw	r22, r14
    11ae:	80 e3       	ldi	r24, 0x30	; 48
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
    11b6:	7a 94       	dec	r7
    11b8:	d7 14       	cp	r13, r7
    11ba:	c0 f3       	brcs	.-16     	; 0x11ac <vfprintf+0x6dc>
    11bc:	da 94       	dec	r13
    11be:	f4 01       	movw	r30, r8
    11c0:	ed 0d       	add	r30, r13
    11c2:	f1 1d       	adc	r31, r1
    11c4:	b7 01       	movw	r22, r14
    11c6:	80 81       	ld	r24, Z
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
    11ce:	d1 10       	cpse	r13, r1
    11d0:	f5 cf       	rjmp	.-22     	; 0x11bc <vfprintf+0x6ec>
    11d2:	06 c0       	rjmp	.+12     	; 0x11e0 <vfprintf+0x710>
    11d4:	b7 01       	movw	r22, r14
    11d6:	80 e2       	ldi	r24, 0x20	; 32
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
    11de:	6a 94       	dec	r6
    11e0:	61 10       	cpse	r6, r1
    11e2:	f8 cf       	rjmp	.-16     	; 0x11d4 <vfprintf+0x704>
    11e4:	99 cc       	rjmp	.-1742   	; 0xb18 <vfprintf+0x48>
    11e6:	f7 01       	movw	r30, r14
    11e8:	26 81       	ldd	r18, Z+6	; 0x06
    11ea:	37 81       	ldd	r19, Z+7	; 0x07
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <vfprintf+0x722>
    11ee:	2f ef       	ldi	r18, 0xFF	; 255
    11f0:	3f ef       	ldi	r19, 0xFF	; 255
    11f2:	c9 01       	movw	r24, r18
    11f4:	62 96       	adiw	r28, 0x12	; 18
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	ff 90       	pop	r15
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	bf 90       	pop	r11
    1212:	af 90       	pop	r10
    1214:	9f 90       	pop	r9
    1216:	8f 90       	pop	r8
    1218:	7f 90       	pop	r7
    121a:	6f 90       	pop	r6
    121c:	5f 90       	pop	r5
    121e:	4f 90       	pop	r4
    1220:	3f 90       	pop	r3
    1222:	2f 90       	pop	r2
    1224:	08 95       	ret

00001226 <__udivmodhi4>:
    1226:	aa 1b       	sub	r26, r26
    1228:	bb 1b       	sub	r27, r27
    122a:	51 e1       	ldi	r21, 0x11	; 17
    122c:	07 c0       	rjmp	.+14     	; 0x123c <__udivmodhi4_ep>

0000122e <__udivmodhi4_loop>:
    122e:	aa 1f       	adc	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	a6 17       	cp	r26, r22
    1234:	b7 07       	cpc	r27, r23
    1236:	10 f0       	brcs	.+4      	; 0x123c <__udivmodhi4_ep>
    1238:	a6 1b       	sub	r26, r22
    123a:	b7 0b       	sbc	r27, r23

0000123c <__udivmodhi4_ep>:
    123c:	88 1f       	adc	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	5a 95       	dec	r21
    1242:	a9 f7       	brne	.-22     	; 0x122e <__udivmodhi4_loop>
    1244:	80 95       	com	r24
    1246:	90 95       	com	r25
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	08 95       	ret

0000124e <__divmodhi4>:
    124e:	97 fb       	bst	r25, 7
    1250:	07 2e       	mov	r0, r23
    1252:	16 f4       	brtc	.+4      	; 0x1258 <__divmodhi4+0xa>
    1254:	00 94       	com	r0
    1256:	07 d0       	rcall	.+14     	; 0x1266 <__divmodhi4_neg1>
    1258:	77 fd       	sbrc	r23, 7
    125a:	09 d0       	rcall	.+18     	; 0x126e <__divmodhi4_neg2>
    125c:	0e 94 13 09 	call	0x1226	; 0x1226 <__udivmodhi4>
    1260:	07 fc       	sbrc	r0, 7
    1262:	05 d0       	rcall	.+10     	; 0x126e <__divmodhi4_neg2>
    1264:	3e f4       	brtc	.+14     	; 0x1274 <__divmodhi4_exit>

00001266 <__divmodhi4_neg1>:
    1266:	90 95       	com	r25
    1268:	81 95       	neg	r24
    126a:	9f 4f       	sbci	r25, 0xFF	; 255
    126c:	08 95       	ret

0000126e <__divmodhi4_neg2>:
    126e:	70 95       	com	r23
    1270:	61 95       	neg	r22
    1272:	7f 4f       	sbci	r23, 0xFF	; 255

00001274 <__divmodhi4_exit>:
    1274:	08 95       	ret

00001276 <__ftoa_engine>:
    1276:	28 30       	cpi	r18, 0x08	; 8
    1278:	08 f0       	brcs	.+2      	; 0x127c <__ftoa_engine+0x6>
    127a:	27 e0       	ldi	r18, 0x07	; 7
    127c:	33 27       	eor	r19, r19
    127e:	da 01       	movw	r26, r20
    1280:	99 0f       	add	r25, r25
    1282:	31 1d       	adc	r19, r1
    1284:	87 fd       	sbrc	r24, 7
    1286:	91 60       	ori	r25, 0x01	; 1
    1288:	00 96       	adiw	r24, 0x00	; 0
    128a:	61 05       	cpc	r22, r1
    128c:	71 05       	cpc	r23, r1
    128e:	39 f4       	brne	.+14     	; 0x129e <__ftoa_engine+0x28>
    1290:	32 60       	ori	r19, 0x02	; 2
    1292:	2e 5f       	subi	r18, 0xFE	; 254
    1294:	3d 93       	st	X+, r19
    1296:	30 e3       	ldi	r19, 0x30	; 48
    1298:	2a 95       	dec	r18
    129a:	e1 f7       	brne	.-8      	; 0x1294 <__ftoa_engine+0x1e>
    129c:	08 95       	ret
    129e:	9f 3f       	cpi	r25, 0xFF	; 255
    12a0:	30 f0       	brcs	.+12     	; 0x12ae <__ftoa_engine+0x38>
    12a2:	80 38       	cpi	r24, 0x80	; 128
    12a4:	71 05       	cpc	r23, r1
    12a6:	61 05       	cpc	r22, r1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <__ftoa_engine+0x36>
    12aa:	3c 5f       	subi	r19, 0xFC	; 252
    12ac:	3c 5f       	subi	r19, 0xFC	; 252
    12ae:	3d 93       	st	X+, r19
    12b0:	91 30       	cpi	r25, 0x01	; 1
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <__ftoa_engine+0x40>
    12b4:	80 68       	ori	r24, 0x80	; 128
    12b6:	91 1d       	adc	r25, r1
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	1f 93       	push	r17
    12be:	0f 93       	push	r16
    12c0:	ff 92       	push	r15
    12c2:	ef 92       	push	r14
    12c4:	19 2f       	mov	r17, r25
    12c6:	98 7f       	andi	r25, 0xF8	; 248
    12c8:	96 95       	lsr	r25
    12ca:	e9 2f       	mov	r30, r25
    12cc:	96 95       	lsr	r25
    12ce:	96 95       	lsr	r25
    12d0:	e9 0f       	add	r30, r25
    12d2:	ff 27       	eor	r31, r31
    12d4:	e3 5b       	subi	r30, 0xB3	; 179
    12d6:	fe 4f       	sbci	r31, 0xFE	; 254
    12d8:	99 27       	eor	r25, r25
    12da:	33 27       	eor	r19, r19
    12dc:	ee 24       	eor	r14, r14
    12de:	ff 24       	eor	r15, r15
    12e0:	a7 01       	movw	r20, r14
    12e2:	e7 01       	movw	r28, r14
    12e4:	05 90       	lpm	r0, Z+
    12e6:	08 94       	sec
    12e8:	07 94       	ror	r0
    12ea:	28 f4       	brcc	.+10     	; 0x12f6 <__ftoa_engine+0x80>
    12ec:	36 0f       	add	r19, r22
    12ee:	e7 1e       	adc	r14, r23
    12f0:	f8 1e       	adc	r15, r24
    12f2:	49 1f       	adc	r20, r25
    12f4:	51 1d       	adc	r21, r1
    12f6:	66 0f       	add	r22, r22
    12f8:	77 1f       	adc	r23, r23
    12fa:	88 1f       	adc	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	06 94       	lsr	r0
    1300:	a1 f7       	brne	.-24     	; 0x12ea <__ftoa_engine+0x74>
    1302:	05 90       	lpm	r0, Z+
    1304:	07 94       	ror	r0
    1306:	28 f4       	brcc	.+10     	; 0x1312 <__ftoa_engine+0x9c>
    1308:	e7 0e       	add	r14, r23
    130a:	f8 1e       	adc	r15, r24
    130c:	49 1f       	adc	r20, r25
    130e:	56 1f       	adc	r21, r22
    1310:	c1 1d       	adc	r28, r1
    1312:	77 0f       	add	r23, r23
    1314:	88 1f       	adc	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	66 1f       	adc	r22, r22
    131a:	06 94       	lsr	r0
    131c:	a1 f7       	brne	.-24     	; 0x1306 <__ftoa_engine+0x90>
    131e:	05 90       	lpm	r0, Z+
    1320:	07 94       	ror	r0
    1322:	28 f4       	brcc	.+10     	; 0x132e <__ftoa_engine+0xb8>
    1324:	f8 0e       	add	r15, r24
    1326:	49 1f       	adc	r20, r25
    1328:	56 1f       	adc	r21, r22
    132a:	c7 1f       	adc	r28, r23
    132c:	d1 1d       	adc	r29, r1
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	66 1f       	adc	r22, r22
    1334:	77 1f       	adc	r23, r23
    1336:	06 94       	lsr	r0
    1338:	a1 f7       	brne	.-24     	; 0x1322 <__ftoa_engine+0xac>
    133a:	05 90       	lpm	r0, Z+
    133c:	07 94       	ror	r0
    133e:	20 f4       	brcc	.+8      	; 0x1348 <__ftoa_engine+0xd2>
    1340:	49 0f       	add	r20, r25
    1342:	56 1f       	adc	r21, r22
    1344:	c7 1f       	adc	r28, r23
    1346:	d8 1f       	adc	r29, r24
    1348:	99 0f       	add	r25, r25
    134a:	66 1f       	adc	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	88 1f       	adc	r24, r24
    1350:	06 94       	lsr	r0
    1352:	a9 f7       	brne	.-22     	; 0x133e <__ftoa_engine+0xc8>
    1354:	84 91       	lpm	r24, Z
    1356:	10 95       	com	r17
    1358:	17 70       	andi	r17, 0x07	; 7
    135a:	41 f0       	breq	.+16     	; 0x136c <__ftoa_engine+0xf6>
    135c:	d6 95       	lsr	r29
    135e:	c7 95       	ror	r28
    1360:	57 95       	ror	r21
    1362:	47 95       	ror	r20
    1364:	f7 94       	ror	r15
    1366:	e7 94       	ror	r14
    1368:	1a 95       	dec	r17
    136a:	c1 f7       	brne	.-16     	; 0x135c <__ftoa_engine+0xe6>
    136c:	e3 ef       	ldi	r30, 0xF3	; 243
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	68 94       	set
    1372:	15 90       	lpm	r1, Z+
    1374:	15 91       	lpm	r17, Z+
    1376:	35 91       	lpm	r19, Z+
    1378:	65 91       	lpm	r22, Z+
    137a:	95 91       	lpm	r25, Z+
    137c:	05 90       	lpm	r0, Z+
    137e:	7f e2       	ldi	r23, 0x2F	; 47
    1380:	73 95       	inc	r23
    1382:	e1 18       	sub	r14, r1
    1384:	f1 0a       	sbc	r15, r17
    1386:	43 0b       	sbc	r20, r19
    1388:	56 0b       	sbc	r21, r22
    138a:	c9 0b       	sbc	r28, r25
    138c:	d0 09       	sbc	r29, r0
    138e:	c0 f7       	brcc	.-16     	; 0x1380 <__ftoa_engine+0x10a>
    1390:	e1 0c       	add	r14, r1
    1392:	f1 1e       	adc	r15, r17
    1394:	43 1f       	adc	r20, r19
    1396:	56 1f       	adc	r21, r22
    1398:	c9 1f       	adc	r28, r25
    139a:	d0 1d       	adc	r29, r0
    139c:	7e f4       	brtc	.+30     	; 0x13bc <__ftoa_engine+0x146>
    139e:	70 33       	cpi	r23, 0x30	; 48
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <__ftoa_engine+0x130>
    13a2:	8a 95       	dec	r24
    13a4:	e6 cf       	rjmp	.-52     	; 0x1372 <__ftoa_engine+0xfc>
    13a6:	e8 94       	clt
    13a8:	01 50       	subi	r16, 0x01	; 1
    13aa:	30 f0       	brcs	.+12     	; 0x13b8 <__ftoa_engine+0x142>
    13ac:	08 0f       	add	r16, r24
    13ae:	0a f4       	brpl	.+2      	; 0x13b2 <__ftoa_engine+0x13c>
    13b0:	00 27       	eor	r16, r16
    13b2:	02 17       	cp	r16, r18
    13b4:	08 f4       	brcc	.+2      	; 0x13b8 <__ftoa_engine+0x142>
    13b6:	20 2f       	mov	r18, r16
    13b8:	23 95       	inc	r18
    13ba:	02 2f       	mov	r16, r18
    13bc:	7a 33       	cpi	r23, 0x3A	; 58
    13be:	28 f0       	brcs	.+10     	; 0x13ca <__ftoa_engine+0x154>
    13c0:	79 e3       	ldi	r23, 0x39	; 57
    13c2:	7d 93       	st	X+, r23
    13c4:	2a 95       	dec	r18
    13c6:	e9 f7       	brne	.-6      	; 0x13c2 <__ftoa_engine+0x14c>
    13c8:	10 c0       	rjmp	.+32     	; 0x13ea <__ftoa_engine+0x174>
    13ca:	7d 93       	st	X+, r23
    13cc:	2a 95       	dec	r18
    13ce:	89 f6       	brne	.-94     	; 0x1372 <__ftoa_engine+0xfc>
    13d0:	06 94       	lsr	r0
    13d2:	97 95       	ror	r25
    13d4:	67 95       	ror	r22
    13d6:	37 95       	ror	r19
    13d8:	17 95       	ror	r17
    13da:	17 94       	ror	r1
    13dc:	e1 18       	sub	r14, r1
    13de:	f1 0a       	sbc	r15, r17
    13e0:	43 0b       	sbc	r20, r19
    13e2:	56 0b       	sbc	r21, r22
    13e4:	c9 0b       	sbc	r28, r25
    13e6:	d0 09       	sbc	r29, r0
    13e8:	98 f0       	brcs	.+38     	; 0x1410 <__ftoa_engine+0x19a>
    13ea:	23 95       	inc	r18
    13ec:	7e 91       	ld	r23, -X
    13ee:	73 95       	inc	r23
    13f0:	7a 33       	cpi	r23, 0x3A	; 58
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <__ftoa_engine+0x180>
    13f4:	70 e3       	ldi	r23, 0x30	; 48
    13f6:	7c 93       	st	X, r23
    13f8:	20 13       	cpse	r18, r16
    13fa:	b8 f7       	brcc	.-18     	; 0x13ea <__ftoa_engine+0x174>
    13fc:	7e 91       	ld	r23, -X
    13fe:	70 61       	ori	r23, 0x10	; 16
    1400:	7d 93       	st	X+, r23
    1402:	30 f0       	brcs	.+12     	; 0x1410 <__ftoa_engine+0x19a>
    1404:	83 95       	inc	r24
    1406:	71 e3       	ldi	r23, 0x31	; 49
    1408:	7d 93       	st	X+, r23
    140a:	70 e3       	ldi	r23, 0x30	; 48
    140c:	2a 95       	dec	r18
    140e:	e1 f7       	brne	.-8      	; 0x1408 <__ftoa_engine+0x192>
    1410:	11 24       	eor	r1, r1
    1412:	ef 90       	pop	r14
    1414:	ff 90       	pop	r15
    1416:	0f 91       	pop	r16
    1418:	1f 91       	pop	r17
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	99 27       	eor	r25, r25
    1420:	87 fd       	sbrc	r24, 7
    1422:	90 95       	com	r25
    1424:	08 95       	ret

00001426 <strnlen_P>:
    1426:	fc 01       	movw	r30, r24
    1428:	05 90       	lpm	r0, Z+
    142a:	61 50       	subi	r22, 0x01	; 1
    142c:	70 40       	sbci	r23, 0x00	; 0
    142e:	01 10       	cpse	r0, r1
    1430:	d8 f7       	brcc	.-10     	; 0x1428 <strnlen_P+0x2>
    1432:	80 95       	com	r24
    1434:	90 95       	com	r25
    1436:	8e 0f       	add	r24, r30
    1438:	9f 1f       	adc	r25, r31
    143a:	08 95       	ret

0000143c <strcpy>:
    143c:	fb 01       	movw	r30, r22
    143e:	dc 01       	movw	r26, r24
    1440:	01 90       	ld	r0, Z+
    1442:	0d 92       	st	X+, r0
    1444:	00 20       	and	r0, r0
    1446:	e1 f7       	brne	.-8      	; 0x1440 <strcpy+0x4>
    1448:	08 95       	ret

0000144a <strnlen>:
    144a:	fc 01       	movw	r30, r24
    144c:	61 50       	subi	r22, 0x01	; 1
    144e:	70 40       	sbci	r23, 0x00	; 0
    1450:	01 90       	ld	r0, Z+
    1452:	01 10       	cpse	r0, r1
    1454:	d8 f7       	brcc	.-10     	; 0x144c <strnlen+0x2>
    1456:	80 95       	com	r24
    1458:	90 95       	com	r25
    145a:	8e 0f       	add	r24, r30
    145c:	9f 1f       	adc	r25, r31
    145e:	08 95       	ret

00001460 <fputc>:
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	8c 01       	movw	r16, r24
    146a:	eb 01       	movw	r28, r22
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	81 fd       	sbrc	r24, 1
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <fputc+0x18>
    1472:	0f ef       	ldi	r16, 0xFF	; 255
    1474:	1f ef       	ldi	r17, 0xFF	; 255
    1476:	1a c0       	rjmp	.+52     	; 0x14ac <fputc+0x4c>
    1478:	82 ff       	sbrs	r24, 2
    147a:	0d c0       	rjmp	.+26     	; 0x1496 <fputc+0x36>
    147c:	2e 81       	ldd	r18, Y+6	; 0x06
    147e:	3f 81       	ldd	r19, Y+7	; 0x07
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	28 17       	cp	r18, r24
    1486:	39 07       	cpc	r19, r25
    1488:	64 f4       	brge	.+24     	; 0x14a2 <fputc+0x42>
    148a:	e8 81       	ld	r30, Y
    148c:	f9 81       	ldd	r31, Y+1	; 0x01
    148e:	01 93       	st	Z+, r16
    1490:	f9 83       	std	Y+1, r31	; 0x01
    1492:	e8 83       	st	Y, r30
    1494:	06 c0       	rjmp	.+12     	; 0x14a2 <fputc+0x42>
    1496:	e8 85       	ldd	r30, Y+8	; 0x08
    1498:	f9 85       	ldd	r31, Y+9	; 0x09
    149a:	80 2f       	mov	r24, r16
    149c:	09 95       	icall
    149e:	89 2b       	or	r24, r25
    14a0:	41 f7       	brne	.-48     	; 0x1472 <fputc+0x12>
    14a2:	8e 81       	ldd	r24, Y+6	; 0x06
    14a4:	9f 81       	ldd	r25, Y+7	; 0x07
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	9f 83       	std	Y+7, r25	; 0x07
    14aa:	8e 83       	std	Y+6, r24	; 0x06
    14ac:	c8 01       	movw	r24, r16
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	08 95       	ret

000014b8 <sprintf>:
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	2e 97       	sbiw	r28, 0x0e	; 14
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	0d 89       	ldd	r16, Y+21	; 0x15
    14d2:	1e 89       	ldd	r17, Y+22	; 0x16
    14d4:	86 e0       	ldi	r24, 0x06	; 6
    14d6:	8c 83       	std	Y+4, r24	; 0x04
    14d8:	1a 83       	std	Y+2, r17	; 0x02
    14da:	09 83       	std	Y+1, r16	; 0x01
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	9f e7       	ldi	r25, 0x7F	; 127
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	ce 01       	movw	r24, r28
    14e6:	49 96       	adiw	r24, 0x19	; 25
    14e8:	ac 01       	movw	r20, r24
    14ea:	6f 89       	ldd	r22, Y+23	; 0x17
    14ec:	78 8d       	ldd	r23, Y+24	; 0x18
    14ee:	ce 01       	movw	r24, r28
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	0e 94 68 05 	call	0xad0	; 0xad0 <vfprintf>
    14f6:	ef 81       	ldd	r30, Y+7	; 0x07
    14f8:	f8 85       	ldd	r31, Y+8	; 0x08
    14fa:	e0 0f       	add	r30, r16
    14fc:	f1 1f       	adc	r31, r17
    14fe:	10 82       	st	Z, r1
    1500:	2e 96       	adiw	r28, 0x0e	; 14
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	08 95       	ret

00001516 <__ultoa_invert>:
    1516:	fa 01       	movw	r30, r20
    1518:	aa 27       	eor	r26, r26
    151a:	28 30       	cpi	r18, 0x08	; 8
    151c:	51 f1       	breq	.+84     	; 0x1572 <__ultoa_invert+0x5c>
    151e:	20 31       	cpi	r18, 0x10	; 16
    1520:	81 f1       	breq	.+96     	; 0x1582 <__ultoa_invert+0x6c>
    1522:	e8 94       	clt
    1524:	6f 93       	push	r22
    1526:	6e 7f       	andi	r22, 0xFE	; 254
    1528:	6e 5f       	subi	r22, 0xFE	; 254
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	8f 4f       	sbci	r24, 0xFF	; 255
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	af 4f       	sbci	r26, 0xFF	; 255
    1532:	b1 e0       	ldi	r27, 0x01	; 1
    1534:	3e d0       	rcall	.+124    	; 0x15b2 <__ultoa_invert+0x9c>
    1536:	b4 e0       	ldi	r27, 0x04	; 4
    1538:	3c d0       	rcall	.+120    	; 0x15b2 <__ultoa_invert+0x9c>
    153a:	67 0f       	add	r22, r23
    153c:	78 1f       	adc	r23, r24
    153e:	89 1f       	adc	r24, r25
    1540:	9a 1f       	adc	r25, r26
    1542:	a1 1d       	adc	r26, r1
    1544:	68 0f       	add	r22, r24
    1546:	79 1f       	adc	r23, r25
    1548:	8a 1f       	adc	r24, r26
    154a:	91 1d       	adc	r25, r1
    154c:	a1 1d       	adc	r26, r1
    154e:	6a 0f       	add	r22, r26
    1550:	71 1d       	adc	r23, r1
    1552:	81 1d       	adc	r24, r1
    1554:	91 1d       	adc	r25, r1
    1556:	a1 1d       	adc	r26, r1
    1558:	20 d0       	rcall	.+64     	; 0x159a <__ultoa_invert+0x84>
    155a:	09 f4       	brne	.+2      	; 0x155e <__ultoa_invert+0x48>
    155c:	68 94       	set
    155e:	3f 91       	pop	r19
    1560:	2a e0       	ldi	r18, 0x0A	; 10
    1562:	26 9f       	mul	r18, r22
    1564:	11 24       	eor	r1, r1
    1566:	30 19       	sub	r19, r0
    1568:	30 5d       	subi	r19, 0xD0	; 208
    156a:	31 93       	st	Z+, r19
    156c:	de f6       	brtc	.-74     	; 0x1524 <__ultoa_invert+0xe>
    156e:	cf 01       	movw	r24, r30
    1570:	08 95       	ret
    1572:	46 2f       	mov	r20, r22
    1574:	47 70       	andi	r20, 0x07	; 7
    1576:	40 5d       	subi	r20, 0xD0	; 208
    1578:	41 93       	st	Z+, r20
    157a:	b3 e0       	ldi	r27, 0x03	; 3
    157c:	0f d0       	rcall	.+30     	; 0x159c <__ultoa_invert+0x86>
    157e:	c9 f7       	brne	.-14     	; 0x1572 <__ultoa_invert+0x5c>
    1580:	f6 cf       	rjmp	.-20     	; 0x156e <__ultoa_invert+0x58>
    1582:	46 2f       	mov	r20, r22
    1584:	4f 70       	andi	r20, 0x0F	; 15
    1586:	40 5d       	subi	r20, 0xD0	; 208
    1588:	4a 33       	cpi	r20, 0x3A	; 58
    158a:	18 f0       	brcs	.+6      	; 0x1592 <__ultoa_invert+0x7c>
    158c:	49 5d       	subi	r20, 0xD9	; 217
    158e:	31 fd       	sbrc	r19, 1
    1590:	40 52       	subi	r20, 0x20	; 32
    1592:	41 93       	st	Z+, r20
    1594:	02 d0       	rcall	.+4      	; 0x159a <__ultoa_invert+0x84>
    1596:	a9 f7       	brne	.-22     	; 0x1582 <__ultoa_invert+0x6c>
    1598:	ea cf       	rjmp	.-44     	; 0x156e <__ultoa_invert+0x58>
    159a:	b4 e0       	ldi	r27, 0x04	; 4
    159c:	a6 95       	lsr	r26
    159e:	97 95       	ror	r25
    15a0:	87 95       	ror	r24
    15a2:	77 95       	ror	r23
    15a4:	67 95       	ror	r22
    15a6:	ba 95       	dec	r27
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__ultoa_invert+0x86>
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	61 05       	cpc	r22, r1
    15ae:	71 05       	cpc	r23, r1
    15b0:	08 95       	ret
    15b2:	9b 01       	movw	r18, r22
    15b4:	ac 01       	movw	r20, r24
    15b6:	0a 2e       	mov	r0, r26
    15b8:	06 94       	lsr	r0
    15ba:	57 95       	ror	r21
    15bc:	47 95       	ror	r20
    15be:	37 95       	ror	r19
    15c0:	27 95       	ror	r18
    15c2:	ba 95       	dec	r27
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <__ultoa_invert+0xa2>
    15c6:	62 0f       	add	r22, r18
    15c8:	73 1f       	adc	r23, r19
    15ca:	84 1f       	adc	r24, r20
    15cc:	95 1f       	adc	r25, r21
    15ce:	a0 1d       	adc	r26, r0
    15d0:	08 95       	ret

000015d2 <_exit>:
    15d2:	f8 94       	cli

000015d4 <__stop_program>:
    15d4:	ff cf       	rjmp	.-2      	; 0x15d4 <__stop_program>
