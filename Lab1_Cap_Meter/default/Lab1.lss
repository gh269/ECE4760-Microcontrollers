
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001622  00001696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001622  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800114  00001636  000016aa  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000016aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000328  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b43  00000000  00000000  00001a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000032e  00000000  00000000  00002555  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009dc  00000000  00000000  00002883  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00003260  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000574  00000000  00000000  000037fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00003d70  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_12>
      34:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_13>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_16>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

0000009d <LCD_number>:
      9d:	43 61 70 61 63 69 74 61 6e 63 65 3d 00 00           Capacitance=..

000000ab <LcdCustomChar>:
      ab:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      bb:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      cb:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      db:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000eb <__c.1764>:
      eb:	6e 61 6e 00                                         nan.

000000ef <__c.1762>:
      ef:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ff:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10f:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1af:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1bf:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1cf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1df:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e4       	ldi	r29, 0x40	; 64
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	e2 e2       	ldi	r30, 0x22	; 34
     202:	f6 e1       	ldi	r31, 0x16	; 22
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	a4 31       	cpi	r26, 0x14	; 20
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	11 e0       	ldi	r17, 0x01	; 1
     216:	a4 e1       	ldi	r26, 0x14	; 20
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a7 33       	cpi	r26, 0x37	; 55
     220:	b1 07       	cpc	r27, r17
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 61 02 	call	0x4c2	; 0x4c2 <main>
     228:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <init_cap_measurement_analog_timer>:
const double constant = .0090895605;

//configures Analog Comparator and Timer1
//set it to full speed 
//clear TCNT1
void init_cap_measurement_analog_timer(){
     230:	10 92 80 00 	sts	0x0080, r1
	TCCR1A = 0;
	TCCR1B = 0;
     234:	e1 e8       	ldi	r30, 0x81	; 129
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	10 82       	st	Z, r1
	//full speed [ 16 MHz], capture on positive edge
	TCCR1B |= INPUT_CAPTURE_EDGE_SELECT + T0B_CS00;
     23a:	80 81       	ld	r24, Z
     23c:	81 64       	ori	r24, 0x41	; 65
     23e:	80 83       	st	Z, r24
	//turn on timer 1 interrupt-on-capture
	TIMSK1 = 0;
     240:	ef e6       	ldi	r30, 0x6F	; 111
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	10 82       	st	Z, r1
	TIMSK1 |= INTERRUPT_ON_CAPTURE ;
     246:	80 81       	ld	r24, Z
     248:	80 62       	ori	r24, 0x20	; 32
     24a:	80 83       	st	Z, r24

	//set analog comp to connect to timer capture input
	//with positive input reference voltage
	ACSR = 0;
     24c:	10 be       	out	0x30, r1	; 48
	ACSR |= ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     24e:	80 b7       	in	r24, 0x30	; 48
     250:	84 60       	ori	r24, 0x04	; 4
     252:	80 bf       	out	0x30, r24	; 48
	ACSR &= ~ANALOG_COMPARATOR_BANDGAP_SELECT;
     254:	80 b7       	in	r24, 0x30	; 48
     256:	8f 7b       	andi	r24, 0xBF	; 191
     258:	80 bf       	out	0x30, r24	; 48
	//set all ports to input
	DDRB = 0;
     25a:	14 b8       	out	0x04, r1	; 4
	DDRB &= ~(COMPARATOR_INPUT + COMPARATOR_REFERENCE);
     25c:	84 b1       	in	r24, 0x04	; 4
     25e:	83 7f       	andi	r24, 0xF3	; 243
     260:	84 b9       	out	0x04, r24	; 4
}
     262:	08 95       	ret

00000264 <init_cap_discharge_wait_timer>:

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
     264:	22 e0       	ldi	r18, 0x02	; 2
     266:	20 93 6f 00 	sts	0x006F, r18
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     26a:	8a e5       	ldi	r24, 0x5A	; 90
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 89 00 	sts	0x0089, r25
     272:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     276:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     27a:	10 92 80 00 	sts	0x0080, r1
	//TCCR1A |= CLEAR_ON_MATCH;
}
     27e:	08 95       	ret

00000280 <init_cap_measurements>:
	Drive PortB2 to zero by making it an output and wait long enough to discharge the capacitor through 100 ohms. Clearly, to dischage to zero volts with 1% accuracy, R2>100*(100ohms).
	Convert PortB2 to an input and start a timer. The capacitor will start to charge toward Vcc.
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
     280:	14 b8       	out	0x04, r1	; 4
	DDRB = 0;
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     282:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     284:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     286:	2a 98       	cbi	0x05, 2	; 5

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     288:	22 e0       	ldi	r18, 0x02	; 2
     28a:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     28e:	8a e5       	ldi	r24, 0x5A	; 90
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	90 93 89 00 	sts	0x0089, r25
     296:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     29a:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     29e:	10 92 80 00 	sts	0x0080, r1
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
	PORTB &= ~COMPARATOR_INPUT;
	//use Timer1.A to perform this delay and signal when we can continue measurements
	init_cap_discharge_wait_timer();
}
     2a2:	08 95       	ret

000002a4 <__vector_16>:

//1 ms timebase register
//Blinks LED 1/second
//refreshes LCD 1/200 ms
ISR (TIMER0_COMPA_vect){
     2a4:	1f 92       	push	r1
     2a6:	0f 92       	push	r0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	0f 92       	push	r0
     2ac:	11 24       	eor	r1, r1
     2ae:	8f 93       	push	r24
     2b0:	9f 93       	push	r25
	if( led_time_count > 0)
     2b2:	80 91 31 01 	lds	r24, 0x0131
     2b6:	90 91 32 01 	lds	r25, 0x0132
     2ba:	89 2b       	or	r24, r25
     2bc:	49 f0       	breq	.+18     	; 0x2d0 <__vector_16+0x2c>
		--led_time_count;
     2be:	80 91 31 01 	lds	r24, 0x0131
     2c2:	90 91 32 01 	lds	r25, 0x0132
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	90 93 32 01 	sts	0x0132, r25
     2cc:	80 93 31 01 	sts	0x0131, r24
	if( lcd_time_count > 0)
     2d0:	80 91 14 01 	lds	r24, 0x0114
     2d4:	90 91 15 01 	lds	r25, 0x0115
     2d8:	89 2b       	or	r24, r25
     2da:	49 f0       	breq	.+18     	; 0x2ee <__vector_16+0x4a>
		--lcd_time_count;
     2dc:	80 91 14 01 	lds	r24, 0x0114
     2e0:	90 91 15 01 	lds	r25, 0x0115
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	90 93 15 01 	sts	0x0115, r25
     2ea:	80 93 14 01 	sts	0x0114, r24

}
     2ee:	9f 91       	pop	r25
     2f0:	8f 91       	pop	r24
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <__vector_13>:
//Once this triggers even once, we know that we have waited long enough for a cap discharge
ISR (TIMER1_COMPA_vect){
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	8f 93       	push	r24
     308:	9f 93       	push	r25
	cap_discharged = TRUE;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	90 93 2b 01 	sts	0x012B, r25
     312:	80 93 2a 01 	sts	0x012A, r24
}
     316:	9f 91       	pop	r25
     318:	8f 91       	pop	r24
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_12>:
			  t
	C = ------------
		R2 * ln(0.5)

*/
ISR (TIMER1_CAPT_vect){
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	0b b6       	in	r0, 0x3b	; 59
     32e:	0f 92       	push	r0
     330:	11 24       	eor	r1, r1
     332:	8f 93       	push	r24
     334:	9f 93       	push	r25
     336:	ef 93       	push	r30
     338:	ff 93       	push	r31
	// read timer1 input capture register
    //ICR1 = 65000;
	charge_cycles = ICR1;
     33a:	e6 e8       	ldi	r30, 0x86	; 134
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	80 81       	ld	r24, Z
     340:	91 81       	ldd	r25, Z+1	; 0x01
     342:	90 93 29 01 	sts	0x0129, r25
     346:	80 93 28 01 	sts	0x0128, r24
	ICR1 = 0;
     34a:	11 82       	std	Z+1, r1	; 0x01
     34c:	10 82       	st	Z, r1
    // set the charged flag to true
    cap_charged = TRUE;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	90 93 36 01 	sts	0x0136, r25
     356:	80 93 35 01 	sts	0x0135, r24
}
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	9f 91       	pop	r25
     360:	8f 91       	pop	r24
     362:	0f 90       	pop	r0
     364:	0b be       	out	0x3b, r0	; 59
     366:	0f 90       	pop	r0
     368:	0f be       	out	0x3f, r0	; 63
     36a:	0f 90       	pop	r0
     36c:	1f 90       	pop	r1
     36e:	18 95       	reti

00000370 <toggle_led>:

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
     370:	8b b1       	in	r24, 0x0b	; 11
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	89 27       	eor	r24, r25
     376:	8b b9       	out	0x0b, r24	; 11
	PORTD ^= ONBOARD_LED;
}
     378:	08 95       	ret

0000037a <init_timer0A>:

//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
     37a:	82 e0       	ldi	r24, 0x02	; 2
     37c:	80 93 6e 00 	sts	0x006E, r24
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
	OCR0A = 249;
     380:	89 ef       	ldi	r24, 0xF9	; 249
     382:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     388:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     38a:	84 b5       	in	r24, 0x24	; 36
     38c:	82 60       	ori	r24, 0x02	; 2
     38e:	84 bd       	out	0x24, r24	; 36
}
     390:	08 95       	ret

00000392 <refresh_lcd>:
}


// writes contents of lcd_buffer to LCD every 200 mSec
// 
void refresh_lcd(void){
     392:	80 91 28 01 	lds	r24, 0x0128
     396:	90 91 29 01 	lds	r25, 0x0129
     39a:	8e 57       	subi	r24, 0x7E	; 126
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	26 e1       	ldi	r18, 0x16	; 22
     3a0:	31 e0       	ldi	r19, 0x01	; 1
     3a2:	86 35       	cpi	r24, 0x56	; 86
     3a4:	91 05       	cpc	r25, r1
     3a6:	e8 f0       	brcs	.+58     	; 0x3e2 <refresh_lcd+0x50>
  // increment time counter and format string 
  if ((charge_cycles - 126) > 85) {
   	sprintf(lcd_buffer,"%-.4f",capacitance);
     3a8:	80 91 2c 01 	lds	r24, 0x012C
     3ac:	90 91 2d 01 	lds	r25, 0x012D
     3b0:	a0 91 2e 01 	lds	r26, 0x012E
     3b4:	b0 91 2f 01 	lds	r27, 0x012F
     3b8:	bf 93       	push	r27
     3ba:	af 93       	push	r26
     3bc:	9f 93       	push	r25
     3be:	8f 93       	push	r24
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	3f 93       	push	r19
     3ca:	2f 93       	push	r18
     3cc:	0e 94 3f 09 	call	0x127e	; 0x127e <sprintf>
     3d0:	8d b7       	in	r24, 0x3d	; 61
     3d2:	9e b7       	in	r25, 0x3e	; 62
     3d4:	08 96       	adiw	r24, 0x08	; 8
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	9e bf       	out	0x3e, r25	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	8d bf       	out	0x3d, r24	; 61
     3e0:	05 c0       	rjmp	.+10     	; 0x3ec <refresh_lcd+0x5a>
    //sprintf(lcd_buffer,"%-u", charge_cycles);	 
  }
  else {
  	sprintf(lcd_buffer,"N/A     ");
     3e2:	66 e0       	ldi	r22, 0x06	; 6
     3e4:	71 e0       	ldi	r23, 0x01	; 1
     3e6:	c9 01       	movw	r24, r18
     3e8:	0e 94 01 09 	call	0x1202	; 0x1202 <strcpy>
  }               
  LCDGotoXY(0, 1);
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDGotoXY>
  	// display the capacitance 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     3f4:	a6 e1       	ldi	r26, 0x16	; 22
     3f6:	b1 e0       	ldi	r27, 0x01	; 1
     3f8:	fd 01       	movw	r30, r26
     3fa:	01 90       	ld	r0, Z+
     3fc:	00 20       	and	r0, r0
     3fe:	e9 f7       	brne	.-6      	; 0x3fa <refresh_lcd+0x68>
     400:	31 97       	sbiw	r30, 0x01	; 1
     402:	ea 1b       	sub	r30, r26
     404:	fb 0b       	sbc	r31, r27
     406:	6e 2f       	mov	r22, r30
     408:	cd 01       	movw	r24, r26
     40a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCDstring>
  // now move a char left and right
  
  
  LCDGotoXY(8,1);
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	88 e0       	ldi	r24, 0x08	; 8
     412:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDGotoXY>
  LCDsendChar('n');
     416:	8e e6       	ldi	r24, 0x6E	; 110
     418:	0e 94 0d 03 	call	0x61a	; 0x61a <LCDsendChar>
  LCDGotoXY(9,1);
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	89 e0       	ldi	r24, 0x09	; 9
     420:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDGotoXY>
  LCDsendChar('F');
     424:	86 e4       	ldi	r24, 0x46	; 70
     426:	0e 94 0d 03 	call	0x61a	; 0x61a <LCDsendChar>
  LCDGotoXY(anipos,1);	   //second line
  LCDsendChar('n');
  LCDGotoXY(anipos+1,1);
  LCDsendChar('F'); 
  */ 
}
     42a:	08 95       	ret

0000042c <init_lcd>:
	TCCR0A = 0;
	TCCR0A |= CLEAR_ON_MATCH;
}

// LCD setup
void init_lcd(void){
     42c:	0e 94 b2 03 	call	0x764	; 0x764 <LCDinit>
	LCDinit();	//initialize the display
	LCDcursorOFF();
     430:	0e 94 1a 04 	call	0x834	; 0x834 <LCDcursorOFF>
	LCDclr();				//clear the display
     434:	0e 94 4b 03 	call	0x696	; 0x696 <LCDclr>
	LCDGotoXY(0,0);
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDGotoXY>
	CopyStringtoLCD(LCD_number, 0, 0);
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8d e9       	ldi	r24, 0x9D	; 157
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 77 03 	call	0x6ee	; 0x6ee <CopyStringtoLCD>
}
     44c:	08 95       	ret

0000044e <initialize>:
  LCDGotoXY(anipos+1,1);
  LCDsendChar('F'); 
  */ 
}

void initialize(void){
     44e:	88 e0       	ldi	r24, 0x08	; 8
     450:	80 93 27 01 	sts	0x0127, r24
	anipos = 8;
	led_time_count = 0;
     454:	10 92 32 01 	sts	0x0132, r1
     458:	10 92 31 01 	sts	0x0131, r1
//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 249;
     462:	89 ef       	ldi	r24, 0xF9	; 249
     464:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     46a:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     46c:	84 b5       	in	r24, 0x24	; 36
     46e:	82 60       	ori	r24, 0x02	; 2
     470:	84 bd       	out	0x24, r24	; 36
void initialize(void){
	anipos = 8;
	led_time_count = 0;
	init_timer0A();

	DDRB = 0;
     472:	14 b8       	out	0x04, r1	; 4
	DDRD = 0;
     474:	1a b8       	out	0x0a, r1	; 10

	//Enable LED Port
	DDRD = ONBOARD_LED; //turn the LED to an output
     476:	84 e0       	ldi	r24, 0x04	; 4
     478:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; //turn off LED 
     47a:	8f ef       	ldi	r24, 0xFF	; 255
     47c:	8b b9       	out	0x0b, r24	; 11

	capacitance = 0;
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	a0 e0       	ldi	r26, 0x00	; 0
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	80 93 2c 01 	sts	0x012C, r24
     48a:	90 93 2d 01 	sts	0x012D, r25
     48e:	a0 93 2e 01 	sts	0x012E, r26
     492:	b0 93 2f 01 	sts	0x012F, r27
	charge_cycles = 0;
     496:	10 92 29 01 	sts	0x0129, r1
     49a:	10 92 28 01 	sts	0x0128, r1
	cap_discharged = FALSE;
     49e:	10 92 2b 01 	sts	0x012B, r1
     4a2:	10 92 2a 01 	sts	0x012A, r1
	begin_cap_measurement = FALSE;
     4a6:	10 92 34 01 	sts	0x0134, r1
     4aa:	10 92 33 01 	sts	0x0133, r1
	cap_charged = FALSE;
     4ae:	10 92 36 01 	sts	0x0136, r1
     4b2:	10 92 35 01 	sts	0x0135, r1

	init_lcd();
     4b6:	0e 94 16 02 	call	0x42c	; 0x42c <init_lcd>
	LCDclr();
     4ba:	0e 94 4b 03 	call	0x696	; 0x696 <LCDclr>
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting timers...\n\r");


	sei();
     4be:	78 94       	sei
}
     4c0:	08 95       	ret

000004c2 <main>:

int main(void){
     4c2:	af 92       	push	r10
     4c4:	bf 92       	push	r11
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
	initialize();
     4d6:	0e 94 27 02 	call	0x44e	; 0x44e <initialize>
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	8d e9       	ldi	r24, 0x9D	; 157
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 77 03 	call	0x6ee	; 0x6ee <CopyStringtoLCD>
	
	while(1){
		if( led_time_count == 0){
			led_time_count = LED_BLINK_PERIOD / 2;
     4e6:	34 ef       	ldi	r19, 0xF4	; 244
     4e8:	c3 2e       	mov	r12, r19
     4ea:	31 e0       	ldi	r19, 0x01	; 1
     4ec:	d3 2e       	mov	r13, r19
}

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     4ee:	24 e0       	ldi	r18, 0x04	; 4
     4f0:	a2 2e       	mov	r10, r18
			//cli();
			toggle_led();
			//sei();
		}
		if( lcd_time_count == 0){
			lcd_time_count = LCD_REFRESH_RATE;
     4f2:	98 ec       	ldi	r25, 0xC8	; 200
     4f4:	e9 2e       	mov	r14, r25
     4f6:	f1 2c       	mov	r15, r1

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	b8 2e       	mov	r11, r24
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     4fc:	0a e5       	ldi	r16, 0x5A	; 90
     4fe:	10 e0       	ldi	r17, 0x00	; 0
			sei();
		}
		if(cap_discharged && !begin_cap_measurement){
			//begin cap measurements
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     500:	c1 e0       	ldi	r28, 0x01	; 1
     502:	d0 e0       	ldi	r29, 0x00	; 0
int main(void){
	initialize();
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
	
	while(1){
		if( led_time_count == 0){
     504:	80 91 31 01 	lds	r24, 0x0131
     508:	90 91 32 01 	lds	r25, 0x0132
     50c:	89 2b       	or	r24, r25
     50e:	39 f4       	brne	.+14     	; 0x51e <main+0x5c>
			led_time_count = LED_BLINK_PERIOD / 2;
     510:	d0 92 32 01 	sts	0x0132, r13
     514:	c0 92 31 01 	sts	0x0131, r12
}

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     518:	8b b1       	in	r24, 0x0b	; 11
     51a:	8a 25       	eor	r24, r10
     51c:	8b b9       	out	0x0b, r24	; 11
			led_time_count = LED_BLINK_PERIOD / 2;
			//cli();
			toggle_led();
			//sei();
		}
		if( lcd_time_count == 0){
     51e:	80 91 14 01 	lds	r24, 0x0114
     522:	90 91 15 01 	lds	r25, 0x0115
     526:	89 2b       	or	r24, r25
     528:	41 f4       	brne	.+16     	; 0x53a <main+0x78>
			lcd_time_count = LCD_REFRESH_RATE;
     52a:	f0 92 15 01 	sts	0x0115, r15
     52e:	e0 92 14 01 	sts	0x0114, r14
			cli();
     532:	f8 94       	cli
			refresh_lcd();
     534:	0e 94 c9 01 	call	0x392	; 0x392 <refresh_lcd>
			sei();
     538:	78 94       	sei
			
		}
		if (!cap_discharged && !begin_cap_measurement && !cap_charged) {
     53a:	80 91 2a 01 	lds	r24, 0x012A
     53e:	90 91 2b 01 	lds	r25, 0x012B
     542:	89 2b       	or	r24, r25
     544:	e1 f4       	brne	.+56     	; 0x57e <main+0xbc>
     546:	80 91 33 01 	lds	r24, 0x0133
     54a:	90 91 34 01 	lds	r25, 0x0134
     54e:	89 2b       	or	r24, r25
     550:	b1 f4       	brne	.+44     	; 0x57e <main+0xbc>
     552:	80 91 35 01 	lds	r24, 0x0135
     556:	90 91 36 01 	lds	r25, 0x0136
     55a:	89 2b       	or	r24, r25
     55c:	81 f4       	brne	.+32     	; 0x57e <main+0xbc>
			cli();
     55e:	f8 94       	cli
	Convert PortB2 to an input and start a timer. The capacitor will start to charge toward Vcc.
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
	DDRB = 0;
     560:	14 b8       	out	0x04, r1	; 4
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     562:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     564:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     566:	2a 98       	cbi	0x05, 2	; 5

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     568:	b0 92 6f 00 	sts	0x006F, r11
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     56c:	10 93 89 00 	sts	0x0089, r17
     570:	00 93 88 00 	sts	0x0088, r16
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     574:	b0 92 81 00 	sts	0x0081, r11
	//turn on clear on match
	TCCR1A = 0;
     578:	10 92 80 00 	sts	0x0080, r1
			
		}
		if (!cap_discharged && !begin_cap_measurement && !cap_charged) {
			cli();
			init_cap_measurements();
			sei();
     57c:	78 94       	sei
		}
		if(cap_discharged && !begin_cap_measurement){
     57e:	80 91 2a 01 	lds	r24, 0x012A
     582:	90 91 2b 01 	lds	r25, 0x012B
     586:	89 2b       	or	r24, r25
     588:	61 f0       	breq	.+24     	; 0x5a2 <main+0xe0>
     58a:	80 91 33 01 	lds	r24, 0x0133
     58e:	90 91 34 01 	lds	r25, 0x0134
     592:	89 2b       	or	r24, r25
     594:	31 f4       	brne	.+12     	; 0x5a2 <main+0xe0>
			//begin cap measurements
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     596:	d0 93 34 01 	sts	0x0134, r29
     59a:	c0 93 33 01 	sts	0x0133, r28
			//initalize timer for cap measurement
			init_cap_measurement_analog_timer();
     59e:	0e 94 18 01 	call	0x230	; 0x230 <init_cap_measurement_analog_timer>
			
		}
		if(begin_cap_measurement && cap_charged){
     5a2:	80 91 33 01 	lds	r24, 0x0133
     5a6:	90 91 34 01 	lds	r25, 0x0134
     5aa:	89 2b       	or	r24, r25
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <main+0xee>
     5ae:	aa cf       	rjmp	.-172    	; 0x504 <main+0x42>
     5b0:	80 91 35 01 	lds	r24, 0x0135
     5b4:	90 91 36 01 	lds	r25, 0x0136
     5b8:	89 2b       	or	r24, r25
     5ba:	09 f4       	brne	.+2      	; 0x5be <main+0xfc>
     5bc:	a3 cf       	rjmp	.-186    	; 0x504 <main+0x42>
			cli();
     5be:	f8 94       	cli
			// Revert the flags
			cap_discharged = FALSE;
     5c0:	10 92 2b 01 	sts	0x012B, r1
     5c4:	10 92 2a 01 	sts	0x012A, r1
			begin_cap_measurement = FALSE;
     5c8:	10 92 34 01 	sts	0x0134, r1
     5cc:	10 92 33 01 	sts	0x0133, r1
			cap_charged = FALSE;
     5d0:	10 92 36 01 	sts	0x0136, r1
     5d4:	10 92 35 01 	sts	0x0135, r1
			
			// Turn off analog capture register
			ACSR &= ~ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     5d8:	80 b7       	in	r24, 0x30	; 48
     5da:	8b 7f       	andi	r24, 0xFB	; 251
     5dc:	80 bf       	out	0x30, r24	; 48
			TCCR1B &= ~INPUT_CAPTURE_EDGE_SELECT;
     5de:	80 91 81 00 	lds	r24, 0x0081
     5e2:	8f 7b       	andi	r24, 0xBF	; 191
     5e4:	80 93 81 00 	sts	0x0081, r24
			// Calculate the capacitance with the time elapsed. 
			// V(t) = Vo(1 - exp(-t/(R2*C))) becomes
			// C = -t / (R2 * ln(.5)) to find out when V(t) = .5 * Vo (R3 = R4)
			// (Due to ln(.5) being negative, the negative on the t is canceled out)
			// constant = time_per_cycle / (R2 * ln(.5)
			capacitance = (charge_cycles - 126) * constant;
     5e8:	60 91 28 01 	lds	r22, 0x0128
     5ec:	70 91 29 01 	lds	r23, 0x0129
     5f0:	6e 57       	subi	r22, 0x7E	; 126
     5f2:	70 40       	sbci	r23, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 c0 09 	call	0x1380	; 0x1380 <__floatunsisf>
     5fc:	21 e6       	ldi	r18, 0x61	; 97
     5fe:	3c ee       	ldi	r19, 0xEC	; 236
     600:	44 e1       	ldi	r20, 0x14	; 20
     602:	5c e3       	ldi	r21, 0x3C	; 60
     604:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__mulsf3>
     608:	60 93 2c 01 	sts	0x012C, r22
     60c:	70 93 2d 01 	sts	0x012D, r23
     610:	80 93 2e 01 	sts	0x012E, r24
     614:	90 93 2f 01 	sts	0x012F, r25
     618:	75 cf       	rjmp	.-278    	; 0x504 <main+0x42>

0000061a <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     61a:	28 2f       	mov	r18, r24
     61c:	20 7f       	andi	r18, 0xF0	; 240
     61e:	28 b9       	out	0x08, r18	; 8

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
	LCP|=1<<LCD_RS;
     620:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     622:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     624:	20 e4       	ldi	r18, 0x40	; 64
     626:	3f e1       	ldi	r19, 0x1F	; 31
     628:	f9 01       	movw	r30, r18
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     62e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     630:	40 98       	cbi	0x08, 0	; 8
     632:	f9 01       	movw	r30, r18
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	44 e0       	ldi	r20, 0x04	; 4
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	4a 95       	dec	r20
     642:	e1 f7       	brne	.-8      	; 0x63c <LCDsendChar+0x22>
     644:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     646:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     648:	42 9a       	sbi	0x08, 2	; 8
     64a:	c9 01       	movw	r24, r18
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     650:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     652:	40 98       	cbi	0x08, 0	; 8
     654:	c9 01       	movw	r24, r18
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     65a:	08 95       	ret

0000065c <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     65c:	28 2f       	mov	r18, r24
     65e:	20 7f       	andi	r18, 0xF0	; 240
     660:	28 b9       	out	0x08, r18	; 8
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
	LCP|=1<<LCD_E;		
     662:	42 9a       	sbi	0x08, 2	; 8
     664:	20 e4       	ldi	r18, 0x40	; 64
     666:	3f e1       	ldi	r19, 0x1F	; 31
     668:	f9 01       	movw	r30, r18
     66a:	31 97       	sbiw	r30, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     66e:	42 98       	cbi	0x08, 2	; 8
     670:	f9 01       	movw	r30, r18
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	54 e0       	ldi	r21, 0x04	; 4
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	5a 95       	dec	r21
     680:	e1 f7       	brne	.-8      	; 0x67a <LCDsendCommand+0x1e>
     682:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     684:	42 9a       	sbi	0x08, 2	; 8
     686:	c9 01       	movw	r24, r18
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     68c:	42 98       	cbi	0x08, 2	; 8
     68e:	c9 01       	movw	r24, r18
     690:	01 97       	sbiw	r24, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     694:	08 95       	ret

00000696 <LCDclr>:
	}

#endif
}			
void LCDclr(void)				//Clears LCD
{
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
	LCDsendCommand(1<<LCD_CLR);
}
     69c:	08 95       	ret

0000069e <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
	LCDsendCommand(1<<LCD_HOME);
}
     6a4:	08 95       	ret

000006a6 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     6b0:	00 97       	sbiw	r24, 0x00	; 0
     6b2:	49 f0       	breq	.+18     	; 0x6c6 <LCDstring+0x20>
     6b4:	ec 01       	movw	r28, r24
     6b6:	10 e0       	ldi	r17, 0x00	; 0
     6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     6ba:	89 91       	ld	r24, Y+
     6bc:	0e 94 0d 03 	call	0x61a	; 0x61a <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     6c0:	1f 5f       	subi	r17, 0xFF	; 255
     6c2:	10 17       	cp	r17, r16
     6c4:	d0 f3       	brcs	.-12     	; 0x6ba <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	08 95       	ret

000006d0 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
     6d0:	62 30       	cpi	r22, 0x02	; 2
     6d2:	31 f0       	breq	.+12     	; 0x6e0 <LCDGotoXY+0x10>
     6d4:	63 30       	cpi	r22, 0x03	; 3
     6d6:	31 f0       	breq	.+12     	; 0x6e4 <LCDGotoXY+0x14>
     6d8:	61 30       	cpi	r22, 0x01	; 1
     6da:	29 f4       	brne	.+10     	; 0x6e6 <LCDGotoXY+0x16>
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     6dc:	80 5c       	subi	r24, 0xC0	; 192
     6de:	03 c0       	rjmp	.+6      	; 0x6e6 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     6e0:	8c 5e       	subi	r24, 0xEC	; 236
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     6e4:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     6e6:	80 68       	ori	r24, 0x80	; 128
     6e8:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
	
}
     6ec:	08 95       	ret

000006ee <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	ec 01       	movw	r28, r24
     6f6:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     6f8:	64 2f       	mov	r22, r20
     6fa:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDGotoXY>
     6fe:	10 e0       	ldi	r17, 0x00	; 0
     700:	03 c0       	rjmp	.+6      	; 0x708 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     702:	0e 94 0d 03 	call	0x61a	; 0x61a <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     706:	1f 5f       	subi	r17, 0xFF	; 255
     708:	fe 01       	movw	r30, r28
     70a:	e1 0f       	add	r30, r17
     70c:	f1 1d       	adc	r31, r1
     70e:	84 91       	lpm	r24, Z+
     710:	88 23       	and	r24, r24
     712:	b9 f7       	brne	.-18     	; 0x702 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	08 95       	ret

0000071c <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	7c 01       	movw	r14, r24
     72a:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     72c:	11 0f       	add	r17, r17
     72e:	11 0f       	add	r17, r17
     730:	11 0f       	add	r17, r17
     732:	10 64       	ori	r17, 0x40	; 64
     734:	c0 e0       	ldi	r28, 0x00	; 0
     736:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     738:	f7 01       	movw	r30, r14
     73a:	ec 0f       	add	r30, r28
     73c:	fd 1f       	adc	r31, r29
     73e:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     740:	81 2f       	mov	r24, r17
     742:	8c 0f       	add	r24, r28
     744:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
		LCDsendChar(pcc);
     748:	80 2f       	mov	r24, r16
     74a:	0e 94 0d 03 	call	0x61a	; 0x61a <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     74e:	21 96       	adiw	r28, 0x01	; 1
     750:	c8 30       	cpi	r28, 0x08	; 8
     752:	d1 05       	cpc	r29, r1
     754:	89 f7       	brne	.-30     	; 0x738 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	08 95       	ret

00000764 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	80 e6       	ldi	r24, 0x60	; 96
     76c:	9a ee       	ldi	r25, 0xEA	; 234
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     772:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     774:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     776:	87 b1       	in	r24, 0x07	; 7
     778:	80 6f       	ori	r24, 0xF0	; 240
     77a:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     77c:	87 b1       	in	r24, 0x07	; 7
     77e:	87 60       	ori	r24, 0x07	; 7
     780:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     782:	80 e3       	ldi	r24, 0x30	; 48
     784:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     786:	42 9a       	sbi	0x08, 2	; 8
     788:	20 e4       	ldi	r18, 0x40	; 64
     78a:	3f e1       	ldi	r19, 0x1F	; 31
     78c:	f9 01       	movw	r30, r18
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     792:	42 98       	cbi	0x08, 2	; 8
     794:	f9 01       	movw	r30, r18
     796:	31 97       	sbiw	r30, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     79a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     79c:	42 9a       	sbi	0x08, 2	; 8
     79e:	c9 01       	movw	r24, r18
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     7a4:	42 98       	cbi	0x08, 2	; 8
     7a6:	c9 01       	movw	r24, r18
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     7ac:	80 e2       	ldi	r24, 0x20	; 32
     7ae:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     7b0:	42 9a       	sbi	0x08, 2	; 8
     7b2:	c9 01       	movw	r24, r18
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     7b8:	42 98       	cbi	0x08, 2	; 8
     7ba:	c9 01       	movw	r24, r18
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     7c0:	88 e2       	ldi	r24, 0x28	; 40
     7c2:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     7c6:	8c e0       	ldi	r24, 0x0C	; 12
     7c8:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
     7cc:	cb ea       	ldi	r28, 0xAB	; 171
     7ce:	d0 e0       	ldi	r29, 0x00	; 0
     7d0:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     7d2:	16 2f       	mov	r17, r22
     7d4:	1f 5f       	subi	r17, 0xFF	; 255
     7d6:	ce 01       	movw	r24, r28
     7d8:	0e 94 8e 03 	call	0x71c	; 0x71c <LCDdefinechar>
     7dc:	28 96       	adiw	r28, 0x08	; 8
     7de:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     7e0:	18 30       	cpi	r17, 0x08	; 8
     7e2:	b9 f7       	brne	.-18     	; 0x7d2 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	08 95       	ret

000007ec <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	08 2f       	mov	r16, r24
     7f2:	10 e0       	ldi	r17, 0x00	; 0
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     7f6:	8e e1       	ldi	r24, 0x1E	; 30
     7f8:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     7fc:	1f 5f       	subi	r17, 0xFF	; 255
     7fe:	10 17       	cp	r17, r16
     800:	d0 f3       	brcs	.-12     	; 0x7f6 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	08 95       	ret

00000808 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	08 2f       	mov	r16, r24
     80e:	10 e0       	ldi	r17, 0x00	; 0
     810:	04 c0       	rjmp	.+8      	; 0x81a <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     812:	88 e1       	ldi	r24, 0x18	; 24
     814:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     818:	1f 5f       	subi	r17, 0xFF	; 255
     81a:	10 17       	cp	r17, r16
     81c:	d0 f3       	brcs	.-12     	; 0x812 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
     824:	8e e0       	ldi	r24, 0x0E	; 14
     826:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
	LCDsendCommand(0x0E);
}
     82a:	08 95       	ret

0000082c <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
     82c:	8f e0       	ldi	r24, 0x0F	; 15
     82e:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
	LCDsendCommand(0x0F);
}
     832:	08 95       	ret

00000834 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
     834:	8c e0       	ldi	r24, 0x0C	; 12
     836:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
	LCDsendCommand(0x0C);
}
     83a:	08 95       	ret

0000083c <LCDblank>:
void LCDblank(void)		//blanks LCD
{
     83c:	88 e0       	ldi	r24, 0x08	; 8
     83e:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
	LCDsendCommand(0x08);
}
     842:	08 95       	ret

00000844 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
     844:	8c e0       	ldi	r24, 0x0C	; 12
     846:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
	LCDsendCommand(0x0C);
}
     84a:	08 95       	ret

0000084c <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	08 2f       	mov	r16, r24
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	04 c0       	rjmp	.+8      	; 0x85e <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     856:	80 e1       	ldi	r24, 0x10	; 16
     858:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     85c:	1f 5f       	subi	r17, 0xFF	; 255
     85e:	10 17       	cp	r17, r16
     860:	d0 f3       	brcs	.-12     	; 0x856 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	08 2f       	mov	r16, r24
     86e:	10 e0       	ldi	r17, 0x00	; 0
     870:	04 c0       	rjmp	.+8      	; 0x87a <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     872:	84 e1       	ldi	r24, 0x14	; 20
     874:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     878:	1f 5f       	subi	r17, 0xFF	; 255
     87a:	10 17       	cp	r17, r16
     87c:	d0 f3       	brcs	.-12     	; 0x872 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	08 95       	ret

00000884 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     894:	96 e0       	ldi	r25, 0x06	; 6
     896:	89 9f       	mul	r24, r25
     898:	c0 01       	movw	r24, r0
     89a:	11 24       	eor	r1, r1
     89c:	24 2f       	mov	r18, r20
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	ac 01       	movw	r20, r24
     8a2:	42 9f       	mul	r20, r18
     8a4:	c0 01       	movw	r24, r0
     8a6:	43 9f       	mul	r20, r19
     8a8:	90 0d       	add	r25, r0
     8aa:	52 9f       	mul	r21, r18
     8ac:	90 0d       	add	r25, r0
     8ae:	11 24       	eor	r1, r1
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 c5 0a 	call	0x158a	; 0x158a <__divmodhi4>
     8b6:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     8b8:	cb 01       	movw	r24, r22
     8ba:	66 e0       	ldi	r22, 0x06	; 6
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__udivmodhi4>
     8c2:	e8 2e       	mov	r14, r24
     8c4:	ff 24       	eor	r15, r15
     8c6:	00 e0       	ldi	r16, 0x00	; 0
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	12 c0       	rjmp	.+36     	; 0x8f0 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     8cc:	c8 01       	movw	r24, r16
     8ce:	05 96       	adiw	r24, 0x05	; 5
     8d0:	c8 17       	cp	r28, r24
     8d2:	d9 07       	cpc	r29, r25
     8d4:	10 f0       	brcs	.+4      	; 0x8da <LCDprogressBar+0x56>
     8d6:	85 e0       	ldi	r24, 0x05	; 5
     8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     8da:	c0 17       	cp	r28, r16
     8dc:	d1 07       	cpc	r29, r17
     8de:	10 f0       	brcs	.+4      	; 0x8e4 <LCDprogressBar+0x60>
     8e0:	8e 2d       	mov	r24, r14
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <LCDprogressBar+0x62>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     8e6:	0e 94 0d 03 	call	0x61a	; 0x61a <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     8ea:	f3 94       	inc	r15
     8ec:	0a 5f       	subi	r16, 0xFA	; 250
     8ee:	1f 4f       	sbci	r17, 0xFF	; 255
     8f0:	fd 14       	cp	r15, r13
     8f2:	60 f3       	brcs	.-40     	; 0x8cc <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	df 90       	pop	r13
     902:	08 95       	ret

00000904 <vfprintf>:
     904:	a3 e1       	ldi	r26, 0x13	; 19
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	e8 e8       	ldi	r30, 0x88	; 136
     90a:	f4 e0       	ldi	r31, 0x04	; 4
     90c:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__prologue_saves__>
     910:	3c 01       	movw	r6, r24
     912:	79 8b       	std	Y+17, r23	; 0x11
     914:	68 8b       	std	Y+16, r22	; 0x10
     916:	5a 01       	movw	r10, r20
     918:	fc 01       	movw	r30, r24
     91a:	17 82       	std	Z+7, r1	; 0x07
     91c:	16 82       	std	Z+6, r1	; 0x06
     91e:	83 81       	ldd	r24, Z+3	; 0x03
     920:	81 fd       	sbrc	r24, 1
     922:	03 c0       	rjmp	.+6      	; 0x92a <vfprintf+0x26>
     924:	6f ef       	ldi	r22, 0xFF	; 255
     926:	7f ef       	ldi	r23, 0xFF	; 255
     928:	84 c3       	rjmp	.+1800   	; 0x1032 <vfprintf+0x72e>
     92a:	7a e0       	ldi	r23, 0x0A	; 10
     92c:	47 2e       	mov	r4, r23
     92e:	9e 01       	movw	r18, r28
     930:	2f 5f       	subi	r18, 0xFF	; 255
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	3b 8b       	std	Y+19, r19	; 0x13
     936:	2a 8b       	std	Y+18, r18	; 0x12
     938:	f3 01       	movw	r30, r6
     93a:	23 81       	ldd	r18, Z+3	; 0x03
     93c:	e8 89       	ldd	r30, Y+16	; 0x10
     93e:	f9 89       	ldd	r31, Y+17	; 0x11
     940:	23 fd       	sbrc	r18, 3
     942:	85 91       	lpm	r24, Z+
     944:	23 ff       	sbrs	r18, 3
     946:	81 91       	ld	r24, Z+
     948:	f9 8b       	std	Y+17, r31	; 0x11
     94a:	e8 8b       	std	Y+16, r30	; 0x10
     94c:	88 23       	and	r24, r24
     94e:	09 f4       	brne	.+2      	; 0x952 <vfprintf+0x4e>
     950:	6d c3       	rjmp	.+1754   	; 0x102c <vfprintf+0x728>
     952:	85 32       	cpi	r24, 0x25	; 37
     954:	51 f4       	brne	.+20     	; 0x96a <vfprintf+0x66>
     956:	e8 89       	ldd	r30, Y+16	; 0x10
     958:	f9 89       	ldd	r31, Y+17	; 0x11
     95a:	23 fd       	sbrc	r18, 3
     95c:	85 91       	lpm	r24, Z+
     95e:	23 ff       	sbrs	r18, 3
     960:	81 91       	ld	r24, Z+
     962:	f9 8b       	std	Y+17, r31	; 0x11
     964:	e8 8b       	std	Y+16, r30	; 0x10
     966:	85 32       	cpi	r24, 0x25	; 37
     968:	29 f4       	brne	.+10     	; 0x974 <vfprintf+0x70>
     96a:	b3 01       	movw	r22, r6
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     972:	e2 cf       	rjmp	.-60     	; 0x938 <vfprintf+0x34>
     974:	98 2f       	mov	r25, r24
     976:	dd 24       	eor	r13, r13
     978:	55 24       	eor	r5, r5
     97a:	99 24       	eor	r9, r9
     97c:	ff e1       	ldi	r31, 0x1F	; 31
     97e:	fd 15       	cp	r31, r13
     980:	d0 f0       	brcs	.+52     	; 0x9b6 <vfprintf+0xb2>
     982:	9b 32       	cpi	r25, 0x2B	; 43
     984:	69 f0       	breq	.+26     	; 0x9a0 <vfprintf+0x9c>
     986:	9c 32       	cpi	r25, 0x2C	; 44
     988:	28 f4       	brcc	.+10     	; 0x994 <vfprintf+0x90>
     98a:	90 32       	cpi	r25, 0x20	; 32
     98c:	59 f0       	breq	.+22     	; 0x9a4 <vfprintf+0xa0>
     98e:	93 32       	cpi	r25, 0x23	; 35
     990:	91 f4       	brne	.+36     	; 0x9b6 <vfprintf+0xb2>
     992:	0e c0       	rjmp	.+28     	; 0x9b0 <vfprintf+0xac>
     994:	9d 32       	cpi	r25, 0x2D	; 45
     996:	49 f0       	breq	.+18     	; 0x9aa <vfprintf+0xa6>
     998:	90 33       	cpi	r25, 0x30	; 48
     99a:	69 f4       	brne	.+26     	; 0x9b6 <vfprintf+0xb2>
     99c:	31 e0       	ldi	r19, 0x01	; 1
     99e:	29 c0       	rjmp	.+82     	; 0x9f2 <vfprintf+0xee>
     9a0:	42 e0       	ldi	r20, 0x02	; 2
     9a2:	d4 2a       	or	r13, r20
     9a4:	54 e0       	ldi	r21, 0x04	; 4
     9a6:	d5 2a       	or	r13, r21
     9a8:	28 c0       	rjmp	.+80     	; 0x9fa <vfprintf+0xf6>
     9aa:	88 e0       	ldi	r24, 0x08	; 8
     9ac:	d8 2a       	or	r13, r24
     9ae:	25 c0       	rjmp	.+74     	; 0x9fa <vfprintf+0xf6>
     9b0:	90 e1       	ldi	r25, 0x10	; 16
     9b2:	d9 2a       	or	r13, r25
     9b4:	22 c0       	rjmp	.+68     	; 0x9fa <vfprintf+0xf6>
     9b6:	d7 fc       	sbrc	r13, 7
     9b8:	2b c0       	rjmp	.+86     	; 0xa10 <vfprintf+0x10c>
     9ba:	89 2f       	mov	r24, r25
     9bc:	80 53       	subi	r24, 0x30	; 48
     9be:	8a 30       	cpi	r24, 0x0A	; 10
     9c0:	70 f4       	brcc	.+28     	; 0x9de <vfprintf+0xda>
     9c2:	d6 fe       	sbrs	r13, 6
     9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <vfprintf+0xcc>
     9c6:	94 9c       	mul	r9, r4
     9c8:	90 2c       	mov	r9, r0
     9ca:	11 24       	eor	r1, r1
     9cc:	98 0e       	add	r9, r24
     9ce:	15 c0       	rjmp	.+42     	; 0x9fa <vfprintf+0xf6>
     9d0:	54 9c       	mul	r5, r4
     9d2:	50 2c       	mov	r5, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	58 0e       	add	r5, r24
     9d8:	e0 e2       	ldi	r30, 0x20	; 32
     9da:	de 2a       	or	r13, r30
     9dc:	0e c0       	rjmp	.+28     	; 0x9fa <vfprintf+0xf6>
     9de:	9e 32       	cpi	r25, 0x2E	; 46
     9e0:	29 f4       	brne	.+10     	; 0x9ec <vfprintf+0xe8>
     9e2:	d6 fc       	sbrc	r13, 6
     9e4:	23 c3       	rjmp	.+1606   	; 0x102c <vfprintf+0x728>
     9e6:	f0 e4       	ldi	r31, 0x40	; 64
     9e8:	df 2a       	or	r13, r31
     9ea:	07 c0       	rjmp	.+14     	; 0x9fa <vfprintf+0xf6>
     9ec:	9c 36       	cpi	r25, 0x6C	; 108
     9ee:	19 f4       	brne	.+6      	; 0x9f6 <vfprintf+0xf2>
     9f0:	30 e8       	ldi	r19, 0x80	; 128
     9f2:	d3 2a       	or	r13, r19
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <vfprintf+0xf6>
     9f6:	98 36       	cpi	r25, 0x68	; 104
     9f8:	59 f4       	brne	.+22     	; 0xa10 <vfprintf+0x10c>
     9fa:	e8 89       	ldd	r30, Y+16	; 0x10
     9fc:	f9 89       	ldd	r31, Y+17	; 0x11
     9fe:	23 fd       	sbrc	r18, 3
     a00:	95 91       	lpm	r25, Z+
     a02:	23 ff       	sbrs	r18, 3
     a04:	91 91       	ld	r25, Z+
     a06:	f9 8b       	std	Y+17, r31	; 0x11
     a08:	e8 8b       	std	Y+16, r30	; 0x10
     a0a:	99 23       	and	r25, r25
     a0c:	09 f0       	breq	.+2      	; 0xa10 <vfprintf+0x10c>
     a0e:	b6 cf       	rjmp	.-148    	; 0x97c <vfprintf+0x78>
     a10:	89 2f       	mov	r24, r25
     a12:	85 54       	subi	r24, 0x45	; 69
     a14:	83 30       	cpi	r24, 0x03	; 3
     a16:	20 f4       	brcc	.+8      	; 0xa20 <vfprintf+0x11c>
     a18:	8d 2d       	mov	r24, r13
     a1a:	80 61       	ori	r24, 0x10	; 16
     a1c:	90 5e       	subi	r25, 0xE0	; 224
     a1e:	07 c0       	rjmp	.+14     	; 0xa2e <vfprintf+0x12a>
     a20:	89 2f       	mov	r24, r25
     a22:	85 56       	subi	r24, 0x65	; 101
     a24:	83 30       	cpi	r24, 0x03	; 3
     a26:	08 f0       	brcs	.+2      	; 0xa2a <vfprintf+0x126>
     a28:	a9 c1       	rjmp	.+850    	; 0xd7c <vfprintf+0x478>
     a2a:	8d 2d       	mov	r24, r13
     a2c:	8f 7e       	andi	r24, 0xEF	; 239
     a2e:	86 fd       	sbrc	r24, 6
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <vfprintf+0x132>
     a32:	66 e0       	ldi	r22, 0x06	; 6
     a34:	96 2e       	mov	r9, r22
     a36:	5f e3       	ldi	r21, 0x3F	; 63
     a38:	f5 2e       	mov	r15, r21
     a3a:	f8 22       	and	r15, r24
     a3c:	95 36       	cpi	r25, 0x65	; 101
     a3e:	19 f4       	brne	.+6      	; 0xa46 <vfprintf+0x142>
     a40:	f0 e4       	ldi	r31, 0x40	; 64
     a42:	ff 2a       	or	r15, r31
     a44:	07 c0       	rjmp	.+14     	; 0xa54 <vfprintf+0x150>
     a46:	96 36       	cpi	r25, 0x66	; 102
     a48:	19 f4       	brne	.+6      	; 0xa50 <vfprintf+0x14c>
     a4a:	20 e8       	ldi	r18, 0x80	; 128
     a4c:	f2 2a       	or	r15, r18
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <vfprintf+0x150>
     a50:	91 10       	cpse	r9, r1
     a52:	9a 94       	dec	r9
     a54:	f7 fe       	sbrs	r15, 7
     a56:	0b c0       	rjmp	.+22     	; 0xa6e <vfprintf+0x16a>
     a58:	3b e3       	ldi	r19, 0x3B	; 59
     a5a:	39 15       	cp	r19, r9
     a5c:	20 f4       	brcc	.+8      	; 0xa66 <vfprintf+0x162>
     a5e:	27 e0       	ldi	r18, 0x07	; 7
     a60:	4c e3       	ldi	r20, 0x3C	; 60
     a62:	84 2e       	mov	r8, r20
     a64:	0e c0       	rjmp	.+28     	; 0xa82 <vfprintf+0x17e>
     a66:	89 2c       	mov	r8, r9
     a68:	83 94       	inc	r8
     a6a:	27 e0       	ldi	r18, 0x07	; 7
     a6c:	0a c0       	rjmp	.+20     	; 0xa82 <vfprintf+0x17e>
     a6e:	47 e0       	ldi	r20, 0x07	; 7
     a70:	49 15       	cp	r20, r9
     a72:	28 f4       	brcc	.+10     	; 0xa7e <vfprintf+0x17a>
     a74:	27 e0       	ldi	r18, 0x07	; 7
     a76:	88 24       	eor	r8, r8
     a78:	37 e0       	ldi	r19, 0x07	; 7
     a7a:	93 2e       	mov	r9, r19
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <vfprintf+0x17e>
     a7e:	29 2d       	mov	r18, r9
     a80:	88 24       	eor	r8, r8
     a82:	c5 01       	movw	r24, r10
     a84:	04 96       	adiw	r24, 0x04	; 4
     a86:	9d 87       	std	Y+13, r25	; 0x0d
     a88:	8c 87       	std	Y+12, r24	; 0x0c
     a8a:	f5 01       	movw	r30, r10
     a8c:	60 81       	ld	r22, Z
     a8e:	71 81       	ldd	r23, Z+1	; 0x01
     a90:	82 81       	ldd	r24, Z+2	; 0x02
     a92:	93 81       	ldd	r25, Z+3	; 0x03
     a94:	08 2d       	mov	r16, r8
     a96:	ae 01       	movw	r20, r28
     a98:	4f 5f       	subi	r20, 0xFF	; 255
     a9a:	5f 4f       	sbci	r21, 0xFF	; 255
     a9c:	0e 94 1e 08 	call	0x103c	; 0x103c <__ftoa_engine>
     aa0:	6c 01       	movw	r12, r24
     aa2:	09 81       	ldd	r16, Y+1	; 0x01
     aa4:	20 2f       	mov	r18, r16
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	3f 87       	std	Y+15, r19	; 0x0f
     aaa:	2e 87       	std	Y+14, r18	; 0x0e
     aac:	00 ff       	sbrs	r16, 0
     aae:	05 c0       	rjmp	.+10     	; 0xaba <vfprintf+0x1b6>
     ab0:	3e 85       	ldd	r19, Y+14	; 0x0e
     ab2:	33 fd       	sbrc	r19, 3
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0x1b6>
     ab6:	1d e2       	ldi	r17, 0x2D	; 45
     ab8:	09 c0       	rjmp	.+18     	; 0xacc <vfprintf+0x1c8>
     aba:	f1 fe       	sbrs	r15, 1
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <vfprintf+0x1be>
     abe:	1b e2       	ldi	r17, 0x2B	; 43
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <vfprintf+0x1c8>
     ac2:	f2 fc       	sbrc	r15, 2
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <vfprintf+0x1c6>
     ac6:	10 e0       	ldi	r17, 0x00	; 0
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <vfprintf+0x1c8>
     aca:	10 e2       	ldi	r17, 0x20	; 32
     acc:	8e 85       	ldd	r24, Y+14	; 0x0e
     ace:	9f 85       	ldd	r25, Y+15	; 0x0f
     ad0:	8c 70       	andi	r24, 0x0C	; 12
     ad2:	90 70       	andi	r25, 0x00	; 0
     ad4:	89 2b       	or	r24, r25
     ad6:	c1 f1       	breq	.+112    	; 0xb48 <vfprintf+0x244>
     ad8:	11 23       	and	r17, r17
     ada:	11 f4       	brne	.+4      	; 0xae0 <vfprintf+0x1dc>
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <vfprintf+0x1de>
     ae0:	84 e0       	ldi	r24, 0x04	; 4
     ae2:	85 15       	cp	r24, r5
     ae4:	10 f0       	brcs	.+4      	; 0xaea <vfprintf+0x1e6>
     ae6:	55 24       	eor	r5, r5
     ae8:	0a c0       	rjmp	.+20     	; 0xafe <vfprintf+0x1fa>
     aea:	58 1a       	sub	r5, r24
     aec:	f3 fc       	sbrc	r15, 3
     aee:	07 c0       	rjmp	.+14     	; 0xafe <vfprintf+0x1fa>
     af0:	b3 01       	movw	r22, r6
     af2:	80 e2       	ldi	r24, 0x20	; 32
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     afa:	5a 94       	dec	r5
     afc:	c9 f7       	brne	.-14     	; 0xaf0 <vfprintf+0x1ec>
     afe:	11 23       	and	r17, r17
     b00:	29 f0       	breq	.+10     	; 0xb0c <vfprintf+0x208>
     b02:	b3 01       	movw	r22, r6
     b04:	81 2f       	mov	r24, r17
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     b0c:	4e 85       	ldd	r20, Y+14	; 0x0e
     b0e:	43 ff       	sbrs	r20, 3
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <vfprintf+0x214>
     b12:	0b ee       	ldi	r16, 0xEB	; 235
     b14:	10 e0       	ldi	r17, 0x00	; 0
     b16:	0e c0       	rjmp	.+28     	; 0xb34 <vfprintf+0x230>
     b18:	0f ee       	ldi	r16, 0xEF	; 239
     b1a:	10 e0       	ldi	r17, 0x00	; 0
     b1c:	0b c0       	rjmp	.+22     	; 0xb34 <vfprintf+0x230>
     b1e:	e1 14       	cp	r14, r1
     b20:	f1 04       	cpc	r15, r1
     b22:	09 f0       	breq	.+2      	; 0xb26 <vfprintf+0x222>
     b24:	80 52       	subi	r24, 0x20	; 32
     b26:	b3 01       	movw	r22, r6
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     b2e:	0f 5f       	subi	r16, 0xFF	; 255
     b30:	1f 4f       	sbci	r17, 0xFF	; 255
     b32:	05 c0       	rjmp	.+10     	; 0xb3e <vfprintf+0x23a>
     b34:	ef 2c       	mov	r14, r15
     b36:	ff 24       	eor	r15, r15
     b38:	50 e1       	ldi	r21, 0x10	; 16
     b3a:	e5 22       	and	r14, r21
     b3c:	ff 24       	eor	r15, r15
     b3e:	f8 01       	movw	r30, r16
     b40:	84 91       	lpm	r24, Z+
     b42:	88 23       	and	r24, r24
     b44:	61 f7       	brne	.-40     	; 0xb1e <vfprintf+0x21a>
     b46:	17 c1       	rjmp	.+558    	; 0xd76 <vfprintf+0x472>
     b48:	f7 fe       	sbrs	r15, 7
     b4a:	13 c0       	rjmp	.+38     	; 0xb72 <vfprintf+0x26e>
     b4c:	8c 0c       	add	r8, r12
     b4e:	fe 85       	ldd	r31, Y+14	; 0x0e
     b50:	f4 ff       	sbrs	r31, 4
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <vfprintf+0x258>
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	81 33       	cpi	r24, 0x31	; 49
     b58:	09 f4       	brne	.+2      	; 0xb5c <vfprintf+0x258>
     b5a:	8a 94       	dec	r8
     b5c:	18 14       	cp	r1, r8
     b5e:	1c f0       	brlt	.+6      	; 0xb66 <vfprintf+0x262>
     b60:	88 24       	eor	r8, r8
     b62:	83 94       	inc	r8
     b64:	2d c0       	rjmp	.+90     	; 0xbc0 <vfprintf+0x2bc>
     b66:	28 e0       	ldi	r18, 0x08	; 8
     b68:	28 15       	cp	r18, r8
     b6a:	50 f5       	brcc	.+84     	; 0xbc0 <vfprintf+0x2bc>
     b6c:	98 e0       	ldi	r25, 0x08	; 8
     b6e:	89 2e       	mov	r8, r25
     b70:	27 c0       	rjmp	.+78     	; 0xbc0 <vfprintf+0x2bc>
     b72:	f6 fc       	sbrc	r15, 6
     b74:	25 c0       	rjmp	.+74     	; 0xbc0 <vfprintf+0x2bc>
     b76:	89 2d       	mov	r24, r9
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	8c 15       	cp	r24, r12
     b7c:	9d 05       	cpc	r25, r13
     b7e:	4c f0       	brlt	.+18     	; 0xb92 <vfprintf+0x28e>
     b80:	3c ef       	ldi	r19, 0xFC	; 252
     b82:	c3 16       	cp	r12, r19
     b84:	3f ef       	ldi	r19, 0xFF	; 255
     b86:	d3 06       	cpc	r13, r19
     b88:	24 f0       	brlt	.+8      	; 0xb92 <vfprintf+0x28e>
     b8a:	40 e8       	ldi	r20, 0x80	; 128
     b8c:	f4 2a       	or	r15, r20
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <vfprintf+0x28e>
     b90:	9a 94       	dec	r9
     b92:	99 20       	and	r9, r9
     b94:	49 f0       	breq	.+18     	; 0xba8 <vfprintf+0x2a4>
     b96:	e2 e0       	ldi	r30, 0x02	; 2
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ec 0f       	add	r30, r28
     b9c:	fd 1f       	adc	r31, r29
     b9e:	e9 0d       	add	r30, r9
     ba0:	f1 1d       	adc	r31, r1
     ba2:	80 81       	ld	r24, Z
     ba4:	80 33       	cpi	r24, 0x30	; 48
     ba6:	a1 f3       	breq	.-24     	; 0xb90 <vfprintf+0x28c>
     ba8:	f7 fe       	sbrs	r15, 7
     baa:	0a c0       	rjmp	.+20     	; 0xbc0 <vfprintf+0x2bc>
     bac:	89 2c       	mov	r8, r9
     bae:	83 94       	inc	r8
     bb0:	89 2d       	mov	r24, r9
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	c8 16       	cp	r12, r24
     bb6:	d9 06       	cpc	r13, r25
     bb8:	14 f0       	brlt	.+4      	; 0xbbe <vfprintf+0x2ba>
     bba:	99 24       	eor	r9, r9
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <vfprintf+0x2bc>
     bbe:	9c 18       	sub	r9, r12
     bc0:	f7 fc       	sbrc	r15, 7
     bc2:	03 c0       	rjmp	.+6      	; 0xbca <vfprintf+0x2c6>
     bc4:	25 e0       	ldi	r18, 0x05	; 5
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	09 c0       	rjmp	.+18     	; 0xbdc <vfprintf+0x2d8>
     bca:	1c 14       	cp	r1, r12
     bcc:	1d 04       	cpc	r1, r13
     bce:	1c f0       	brlt	.+6      	; 0xbd6 <vfprintf+0x2d2>
     bd0:	21 e0       	ldi	r18, 0x01	; 1
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <vfprintf+0x2d8>
     bd6:	96 01       	movw	r18, r12
     bd8:	2f 5f       	subi	r18, 0xFF	; 255
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	11 23       	and	r17, r17
     bde:	11 f0       	breq	.+4      	; 0xbe4 <vfprintf+0x2e0>
     be0:	2f 5f       	subi	r18, 0xFF	; 255
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	99 20       	and	r9, r9
     be6:	29 f0       	breq	.+10     	; 0xbf2 <vfprintf+0x2ee>
     be8:	89 2d       	mov	r24, r9
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	28 0f       	add	r18, r24
     bf0:	39 1f       	adc	r19, r25
     bf2:	85 2d       	mov	r24, r5
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	28 17       	cp	r18, r24
     bf8:	39 07       	cpc	r19, r25
     bfa:	14 f0       	brlt	.+4      	; 0xc00 <vfprintf+0x2fc>
     bfc:	55 24       	eor	r5, r5
     bfe:	01 c0       	rjmp	.+2      	; 0xc02 <vfprintf+0x2fe>
     c00:	52 1a       	sub	r5, r18
     c02:	af 2c       	mov	r10, r15
     c04:	bb 24       	eor	r11, r11
     c06:	c5 01       	movw	r24, r10
     c08:	89 70       	andi	r24, 0x09	; 9
     c0a:	90 70       	andi	r25, 0x00	; 0
     c0c:	89 2b       	or	r24, r25
     c0e:	39 f0       	breq	.+14     	; 0xc1e <vfprintf+0x31a>
     c10:	08 c0       	rjmp	.+16     	; 0xc22 <vfprintf+0x31e>
     c12:	b3 01       	movw	r22, r6
     c14:	80 e2       	ldi	r24, 0x20	; 32
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     c1c:	5a 94       	dec	r5
     c1e:	55 20       	and	r5, r5
     c20:	c1 f7       	brne	.-16     	; 0xc12 <vfprintf+0x30e>
     c22:	11 23       	and	r17, r17
     c24:	29 f0       	breq	.+10     	; 0xc30 <vfprintf+0x32c>
     c26:	b3 01       	movw	r22, r6
     c28:	81 2f       	mov	r24, r17
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     c30:	a3 fe       	sbrs	r10, 3
     c32:	07 c0       	rjmp	.+14     	; 0xc42 <vfprintf+0x33e>
     c34:	08 c0       	rjmp	.+16     	; 0xc46 <vfprintf+0x342>
     c36:	b3 01       	movw	r22, r6
     c38:	80 e3       	ldi	r24, 0x30	; 48
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     c40:	5a 94       	dec	r5
     c42:	55 20       	and	r5, r5
     c44:	c1 f7       	brne	.-16     	; 0xc36 <vfprintf+0x332>
     c46:	f7 fe       	sbrs	r15, 7
     c48:	48 c0       	rjmp	.+144    	; 0xcda <vfprintf+0x3d6>
     c4a:	86 01       	movw	r16, r12
     c4c:	d7 fe       	sbrs	r13, 7
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <vfprintf+0x350>
     c50:	00 e0       	ldi	r16, 0x00	; 0
     c52:	10 e0       	ldi	r17, 0x00	; 0
     c54:	76 01       	movw	r14, r12
     c56:	08 94       	sec
     c58:	e1 1c       	adc	r14, r1
     c5a:	f1 1c       	adc	r15, r1
     c5c:	e0 1a       	sub	r14, r16
     c5e:	f1 0a       	sbc	r15, r17
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	8c 0f       	add	r24, r28
     c66:	9d 1f       	adc	r25, r29
     c68:	e8 0e       	add	r14, r24
     c6a:	f9 1e       	adc	r15, r25
     c6c:	16 01       	movw	r2, r12
     c6e:	28 18       	sub	r2, r8
     c70:	31 08       	sbc	r3, r1
     c72:	89 2d       	mov	r24, r9
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	aa 24       	eor	r10, r10
     c78:	bb 24       	eor	r11, r11
     c7a:	a8 1a       	sub	r10, r24
     c7c:	b9 0a       	sbc	r11, r25
     c7e:	9f ef       	ldi	r25, 0xFF	; 255
     c80:	0f 3f       	cpi	r16, 0xFF	; 255
     c82:	19 07       	cpc	r17, r25
     c84:	29 f4       	brne	.+10     	; 0xc90 <vfprintf+0x38c>
     c86:	b3 01       	movw	r22, r6
     c88:	8e e2       	ldi	r24, 0x2E	; 46
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     c90:	c0 16       	cp	r12, r16
     c92:	d1 06       	cpc	r13, r17
     c94:	34 f0       	brlt	.+12     	; 0xca2 <vfprintf+0x39e>
     c96:	20 16       	cp	r2, r16
     c98:	31 06       	cpc	r3, r17
     c9a:	1c f4       	brge	.+6      	; 0xca2 <vfprintf+0x39e>
     c9c:	f7 01       	movw	r30, r14
     c9e:	80 81       	ld	r24, Z
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <vfprintf+0x3a0>
     ca2:	80 e3       	ldi	r24, 0x30	; 48
     ca4:	01 50       	subi	r16, 0x01	; 1
     ca6:	10 40       	sbci	r17, 0x00	; 0
     ca8:	08 94       	sec
     caa:	e1 1c       	adc	r14, r1
     cac:	f1 1c       	adc	r15, r1
     cae:	0a 15       	cp	r16, r10
     cb0:	1b 05       	cpc	r17, r11
     cb2:	2c f0       	brlt	.+10     	; 0xcbe <vfprintf+0x3ba>
     cb4:	b3 01       	movw	r22, r6
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     cbc:	e0 cf       	rjmp	.-64     	; 0xc7e <vfprintf+0x37a>
     cbe:	0c 15       	cp	r16, r12
     cc0:	1d 05       	cpc	r17, r13
     cc2:	41 f4       	brne	.+16     	; 0xcd4 <vfprintf+0x3d0>
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	96 33       	cpi	r25, 0x36	; 54
     cc8:	20 f4       	brcc	.+8      	; 0xcd2 <vfprintf+0x3ce>
     cca:	95 33       	cpi	r25, 0x35	; 53
     ccc:	19 f4       	brne	.+6      	; 0xcd4 <vfprintf+0x3d0>
     cce:	fe 85       	ldd	r31, Y+14	; 0x0e
     cd0:	f4 ff       	sbrs	r31, 4
     cd2:	81 e3       	ldi	r24, 0x31	; 49
     cd4:	b3 01       	movw	r22, r6
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	4c c0       	rjmp	.+152    	; 0xd72 <vfprintf+0x46e>
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	81 33       	cpi	r24, 0x31	; 49
     cde:	09 f0       	breq	.+2      	; 0xce2 <vfprintf+0x3de>
     ce0:	0f 7e       	andi	r16, 0xEF	; 239
     ce2:	b3 01       	movw	r22, r6
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     cea:	99 20       	and	r9, r9
     cec:	a1 f0       	breq	.+40     	; 0xd16 <vfprintf+0x412>
     cee:	b3 01       	movw	r22, r6
     cf0:	8e e2       	ldi	r24, 0x2E	; 46
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     cf8:	12 e0       	ldi	r17, 0x02	; 2
     cfa:	e1 e0       	ldi	r30, 0x01	; 1
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	ec 0f       	add	r30, r28
     d00:	fd 1f       	adc	r31, r29
     d02:	e1 0f       	add	r30, r17
     d04:	f1 1d       	adc	r31, r1
     d06:	1f 5f       	subi	r17, 0xFF	; 255
     d08:	b3 01       	movw	r22, r6
     d0a:	80 81       	ld	r24, Z
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     d12:	9a 94       	dec	r9
     d14:	91 f7       	brne	.-28     	; 0xcfa <vfprintf+0x3f6>
     d16:	a4 fc       	sbrc	r10, 4
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <vfprintf+0x41c>
     d1a:	85 e6       	ldi	r24, 0x65	; 101
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <vfprintf+0x420>
     d20:	85 e4       	ldi	r24, 0x45	; 69
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	b3 01       	movw	r22, r6
     d26:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     d2a:	d7 fc       	sbrc	r13, 7
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <vfprintf+0x434>
     d2e:	c1 14       	cp	r12, r1
     d30:	d1 04       	cpc	r13, r1
     d32:	41 f4       	brne	.+16     	; 0xd44 <vfprintf+0x440>
     d34:	04 ff       	sbrs	r16, 4
     d36:	06 c0       	rjmp	.+12     	; 0xd44 <vfprintf+0x440>
     d38:	d0 94       	com	r13
     d3a:	c1 94       	neg	r12
     d3c:	d1 08       	sbc	r13, r1
     d3e:	d3 94       	inc	r13
     d40:	8d e2       	ldi	r24, 0x2D	; 45
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <vfprintf+0x442>
     d44:	8b e2       	ldi	r24, 0x2B	; 43
     d46:	b3 01       	movw	r22, r6
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     d4e:	80 e3       	ldi	r24, 0x30	; 48
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <vfprintf+0x458>
     d52:	8f 5f       	subi	r24, 0xFF	; 255
     d54:	26 ef       	ldi	r18, 0xF6	; 246
     d56:	3f ef       	ldi	r19, 0xFF	; 255
     d58:	c2 0e       	add	r12, r18
     d5a:	d3 1e       	adc	r13, r19
     d5c:	3a e0       	ldi	r19, 0x0A	; 10
     d5e:	c3 16       	cp	r12, r19
     d60:	d1 04       	cpc	r13, r1
     d62:	bc f7       	brge	.-18     	; 0xd52 <vfprintf+0x44e>
     d64:	b3 01       	movw	r22, r6
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     d6c:	b3 01       	movw	r22, r6
     d6e:	c6 01       	movw	r24, r12
     d70:	c0 96       	adiw	r24, 0x30	; 48
     d72:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     d76:	ac 84       	ldd	r10, Y+12	; 0x0c
     d78:	bd 84       	ldd	r11, Y+13	; 0x0d
     d7a:	55 c1       	rjmp	.+682    	; 0x1026 <vfprintf+0x722>
     d7c:	93 36       	cpi	r25, 0x63	; 99
     d7e:	31 f0       	breq	.+12     	; 0xd8c <vfprintf+0x488>
     d80:	93 37       	cpi	r25, 0x73	; 115
     d82:	91 f0       	breq	.+36     	; 0xda8 <vfprintf+0x4a4>
     d84:	93 35       	cpi	r25, 0x53	; 83
     d86:	09 f0       	breq	.+2      	; 0xd8a <vfprintf+0x486>
     d88:	59 c0       	rjmp	.+178    	; 0xe3c <vfprintf+0x538>
     d8a:	23 c0       	rjmp	.+70     	; 0xdd2 <vfprintf+0x4ce>
     d8c:	f5 01       	movw	r30, r10
     d8e:	80 81       	ld	r24, Z
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	7e 01       	movw	r14, r28
     d94:	08 94       	sec
     d96:	e1 1c       	adc	r14, r1
     d98:	f1 1c       	adc	r15, r1
     d9a:	22 e0       	ldi	r18, 0x02	; 2
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a2 0e       	add	r10, r18
     da0:	b3 1e       	adc	r11, r19
     da2:	01 e0       	ldi	r16, 0x01	; 1
     da4:	10 e0       	ldi	r17, 0x00	; 0
     da6:	12 c0       	rjmp	.+36     	; 0xdcc <vfprintf+0x4c8>
     da8:	f5 01       	movw	r30, r10
     daa:	e0 80       	ld	r14, Z
     dac:	f1 80       	ldd	r15, Z+1	; 0x01
     dae:	d6 fc       	sbrc	r13, 6
     db0:	03 c0       	rjmp	.+6      	; 0xdb8 <vfprintf+0x4b4>
     db2:	6f ef       	ldi	r22, 0xFF	; 255
     db4:	7f ef       	ldi	r23, 0xFF	; 255
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <vfprintf+0x4b8>
     db8:	69 2d       	mov	r22, r9
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	22 e0       	ldi	r18, 0x02	; 2
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	a2 0e       	add	r10, r18
     dc2:	b3 1e       	adc	r11, r19
     dc4:	c7 01       	movw	r24, r14
     dc6:	0e 94 08 09 	call	0x1210	; 0x1210 <strnlen>
     dca:	8c 01       	movw	r16, r24
     dcc:	3f e7       	ldi	r19, 0x7F	; 127
     dce:	d3 22       	and	r13, r19
     dd0:	14 c0       	rjmp	.+40     	; 0xdfa <vfprintf+0x4f6>
     dd2:	f5 01       	movw	r30, r10
     dd4:	e0 80       	ld	r14, Z
     dd6:	f1 80       	ldd	r15, Z+1	; 0x01
     dd8:	d6 fc       	sbrc	r13, 6
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <vfprintf+0x4de>
     ddc:	6f ef       	ldi	r22, 0xFF	; 255
     dde:	7f ef       	ldi	r23, 0xFF	; 255
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <vfprintf+0x4e2>
     de2:	69 2d       	mov	r22, r9
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	22 e0       	ldi	r18, 0x02	; 2
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	a2 0e       	add	r10, r18
     dec:	b3 1e       	adc	r11, r19
     dee:	c7 01       	movw	r24, r14
     df0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <strnlen_P>
     df4:	8c 01       	movw	r16, r24
     df6:	30 e8       	ldi	r19, 0x80	; 128
     df8:	d3 2a       	or	r13, r19
     dfa:	d3 fe       	sbrs	r13, 3
     dfc:	07 c0       	rjmp	.+14     	; 0xe0c <vfprintf+0x508>
     dfe:	1a c0       	rjmp	.+52     	; 0xe34 <vfprintf+0x530>
     e00:	b3 01       	movw	r22, r6
     e02:	80 e2       	ldi	r24, 0x20	; 32
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     e0a:	5a 94       	dec	r5
     e0c:	85 2d       	mov	r24, r5
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	08 17       	cp	r16, r24
     e12:	19 07       	cpc	r17, r25
     e14:	a8 f3       	brcs	.-22     	; 0xe00 <vfprintf+0x4fc>
     e16:	0e c0       	rjmp	.+28     	; 0xe34 <vfprintf+0x530>
     e18:	f7 01       	movw	r30, r14
     e1a:	d7 fc       	sbrc	r13, 7
     e1c:	85 91       	lpm	r24, Z+
     e1e:	d7 fe       	sbrs	r13, 7
     e20:	81 91       	ld	r24, Z+
     e22:	7f 01       	movw	r14, r30
     e24:	b3 01       	movw	r22, r6
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     e2c:	51 10       	cpse	r5, r1
     e2e:	5a 94       	dec	r5
     e30:	01 50       	subi	r16, 0x01	; 1
     e32:	10 40       	sbci	r17, 0x00	; 0
     e34:	01 15       	cp	r16, r1
     e36:	11 05       	cpc	r17, r1
     e38:	79 f7       	brne	.-34     	; 0xe18 <vfprintf+0x514>
     e3a:	f5 c0       	rjmp	.+490    	; 0x1026 <vfprintf+0x722>
     e3c:	94 36       	cpi	r25, 0x64	; 100
     e3e:	11 f0       	breq	.+4      	; 0xe44 <vfprintf+0x540>
     e40:	99 36       	cpi	r25, 0x69	; 105
     e42:	89 f5       	brne	.+98     	; 0xea6 <vfprintf+0x5a2>
     e44:	d7 fe       	sbrs	r13, 7
     e46:	08 c0       	rjmp	.+16     	; 0xe58 <vfprintf+0x554>
     e48:	f5 01       	movw	r30, r10
     e4a:	e0 80       	ld	r14, Z
     e4c:	f1 80       	ldd	r15, Z+1	; 0x01
     e4e:	02 81       	ldd	r16, Z+2	; 0x02
     e50:	13 81       	ldd	r17, Z+3	; 0x03
     e52:	24 e0       	ldi	r18, 0x04	; 4
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	0a c0       	rjmp	.+20     	; 0xe6c <vfprintf+0x568>
     e58:	f5 01       	movw	r30, r10
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	7c 01       	movw	r14, r24
     e60:	00 27       	eor	r16, r16
     e62:	f7 fc       	sbrc	r15, 7
     e64:	00 95       	com	r16
     e66:	10 2f       	mov	r17, r16
     e68:	22 e0       	ldi	r18, 0x02	; 2
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	a2 0e       	add	r10, r18
     e6e:	b3 1e       	adc	r11, r19
     e70:	3f e6       	ldi	r19, 0x6F	; 111
     e72:	d3 22       	and	r13, r19
     e74:	17 ff       	sbrs	r17, 7
     e76:	0a c0       	rjmp	.+20     	; 0xe8c <vfprintf+0x588>
     e78:	10 95       	com	r17
     e7a:	00 95       	com	r16
     e7c:	f0 94       	com	r15
     e7e:	e0 94       	com	r14
     e80:	e1 1c       	adc	r14, r1
     e82:	f1 1c       	adc	r15, r1
     e84:	01 1d       	adc	r16, r1
     e86:	11 1d       	adc	r17, r1
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	d4 2a       	or	r13, r20
     e8c:	2a e0       	ldi	r18, 0x0A	; 10
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	ae 01       	movw	r20, r28
     e92:	4f 5f       	subi	r20, 0xFF	; 255
     e94:	5f 4f       	sbci	r21, 0xFF	; 255
     e96:	c8 01       	movw	r24, r16
     e98:	b7 01       	movw	r22, r14
     e9a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__ultoa_invert>
     e9e:	f8 2e       	mov	r15, r24
     ea0:	5a 89       	ldd	r21, Y+18	; 0x12
     ea2:	f5 1a       	sub	r15, r21
     ea4:	43 c0       	rjmp	.+134    	; 0xf2c <vfprintf+0x628>
     ea6:	95 37       	cpi	r25, 0x75	; 117
     ea8:	29 f4       	brne	.+10     	; 0xeb4 <vfprintf+0x5b0>
     eaa:	1d 2d       	mov	r17, r13
     eac:	1f 7e       	andi	r17, 0xEF	; 239
     eae:	2a e0       	ldi	r18, 0x0A	; 10
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	1d c0       	rjmp	.+58     	; 0xeee <vfprintf+0x5ea>
     eb4:	1d 2d       	mov	r17, r13
     eb6:	19 7f       	andi	r17, 0xF9	; 249
     eb8:	9f 36       	cpi	r25, 0x6F	; 111
     eba:	61 f0       	breq	.+24     	; 0xed4 <vfprintf+0x5d0>
     ebc:	90 37       	cpi	r25, 0x70	; 112
     ebe:	20 f4       	brcc	.+8      	; 0xec8 <vfprintf+0x5c4>
     ec0:	98 35       	cpi	r25, 0x58	; 88
     ec2:	09 f0       	breq	.+2      	; 0xec6 <vfprintf+0x5c2>
     ec4:	b3 c0       	rjmp	.+358    	; 0x102c <vfprintf+0x728>
     ec6:	0f c0       	rjmp	.+30     	; 0xee6 <vfprintf+0x5e2>
     ec8:	90 37       	cpi	r25, 0x70	; 112
     eca:	39 f0       	breq	.+14     	; 0xeda <vfprintf+0x5d6>
     ecc:	98 37       	cpi	r25, 0x78	; 120
     ece:	09 f0       	breq	.+2      	; 0xed2 <vfprintf+0x5ce>
     ed0:	ad c0       	rjmp	.+346    	; 0x102c <vfprintf+0x728>
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <vfprintf+0x5d8>
     ed4:	28 e0       	ldi	r18, 0x08	; 8
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	0a c0       	rjmp	.+20     	; 0xeee <vfprintf+0x5ea>
     eda:	10 61       	ori	r17, 0x10	; 16
     edc:	14 fd       	sbrc	r17, 4
     ede:	14 60       	ori	r17, 0x04	; 4
     ee0:	20 e1       	ldi	r18, 0x10	; 16
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <vfprintf+0x5ea>
     ee6:	14 fd       	sbrc	r17, 4
     ee8:	16 60       	ori	r17, 0x06	; 6
     eea:	20 e1       	ldi	r18, 0x10	; 16
     eec:	32 e0       	ldi	r19, 0x02	; 2
     eee:	17 ff       	sbrs	r17, 7
     ef0:	08 c0       	rjmp	.+16     	; 0xf02 <vfprintf+0x5fe>
     ef2:	f5 01       	movw	r30, r10
     ef4:	60 81       	ld	r22, Z
     ef6:	71 81       	ldd	r23, Z+1	; 0x01
     ef8:	82 81       	ldd	r24, Z+2	; 0x02
     efa:	93 81       	ldd	r25, Z+3	; 0x03
     efc:	44 e0       	ldi	r20, 0x04	; 4
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <vfprintf+0x60e>
     f02:	f5 01       	movw	r30, r10
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	bc 01       	movw	r22, r24
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	42 e0       	ldi	r20, 0x02	; 2
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	a4 0e       	add	r10, r20
     f14:	b5 1e       	adc	r11, r21
     f16:	ae 01       	movw	r20, r28
     f18:	4f 5f       	subi	r20, 0xFF	; 255
     f1a:	5f 4f       	sbci	r21, 0xFF	; 255
     f1c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__ultoa_invert>
     f20:	f8 2e       	mov	r15, r24
     f22:	5a 89       	ldd	r21, Y+18	; 0x12
     f24:	f5 1a       	sub	r15, r21
     f26:	8f e7       	ldi	r24, 0x7F	; 127
     f28:	d8 2e       	mov	r13, r24
     f2a:	d1 22       	and	r13, r17
     f2c:	d6 fe       	sbrs	r13, 6
     f2e:	0b c0       	rjmp	.+22     	; 0xf46 <vfprintf+0x642>
     f30:	8e ef       	ldi	r24, 0xFE	; 254
     f32:	d8 22       	and	r13, r24
     f34:	f9 14       	cp	r15, r9
     f36:	38 f4       	brcc	.+14     	; 0xf46 <vfprintf+0x642>
     f38:	d4 fe       	sbrs	r13, 4
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <vfprintf+0x646>
     f3c:	d2 fc       	sbrc	r13, 2
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <vfprintf+0x646>
     f40:	9f ee       	ldi	r25, 0xEF	; 239
     f42:	d9 22       	and	r13, r25
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <vfprintf+0x646>
     f46:	1f 2d       	mov	r17, r15
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <vfprintf+0x648>
     f4a:	19 2d       	mov	r17, r9
     f4c:	d4 fe       	sbrs	r13, 4
     f4e:	0d c0       	rjmp	.+26     	; 0xf6a <vfprintf+0x666>
     f50:	fe 01       	movw	r30, r28
     f52:	ef 0d       	add	r30, r15
     f54:	f1 1d       	adc	r31, r1
     f56:	80 81       	ld	r24, Z
     f58:	80 33       	cpi	r24, 0x30	; 48
     f5a:	19 f4       	brne	.+6      	; 0xf62 <vfprintf+0x65e>
     f5c:	e9 ee       	ldi	r30, 0xE9	; 233
     f5e:	de 22       	and	r13, r30
     f60:	08 c0       	rjmp	.+16     	; 0xf72 <vfprintf+0x66e>
     f62:	1f 5f       	subi	r17, 0xFF	; 255
     f64:	d2 fe       	sbrs	r13, 2
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <vfprintf+0x66e>
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <vfprintf+0x66c>
     f6a:	8d 2d       	mov	r24, r13
     f6c:	86 78       	andi	r24, 0x86	; 134
     f6e:	09 f0       	breq	.+2      	; 0xf72 <vfprintf+0x66e>
     f70:	1f 5f       	subi	r17, 0xFF	; 255
     f72:	0d 2d       	mov	r16, r13
     f74:	d3 fc       	sbrc	r13, 3
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <vfprintf+0x69c>
     f78:	d0 fe       	sbrs	r13, 0
     f7a:	0f c0       	rjmp	.+30     	; 0xf9a <vfprintf+0x696>
     f7c:	15 15       	cp	r17, r5
     f7e:	10 f0       	brcs	.+4      	; 0xf84 <vfprintf+0x680>
     f80:	9f 2c       	mov	r9, r15
     f82:	0b c0       	rjmp	.+22     	; 0xf9a <vfprintf+0x696>
     f84:	9f 2c       	mov	r9, r15
     f86:	95 0c       	add	r9, r5
     f88:	91 1a       	sub	r9, r17
     f8a:	15 2d       	mov	r17, r5
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <vfprintf+0x696>
     f8e:	b3 01       	movw	r22, r6
     f90:	80 e2       	ldi	r24, 0x20	; 32
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     f98:	1f 5f       	subi	r17, 0xFF	; 255
     f9a:	15 15       	cp	r17, r5
     f9c:	c0 f3       	brcs	.-16     	; 0xf8e <vfprintf+0x68a>
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <vfprintf+0x6a4>
     fa0:	15 15       	cp	r17, r5
     fa2:	10 f4       	brcc	.+4      	; 0xfa8 <vfprintf+0x6a4>
     fa4:	51 1a       	sub	r5, r17
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <vfprintf+0x6a6>
     fa8:	55 24       	eor	r5, r5
     faa:	04 ff       	sbrs	r16, 4
     fac:	10 c0       	rjmp	.+32     	; 0xfce <vfprintf+0x6ca>
     fae:	b3 01       	movw	r22, r6
     fb0:	80 e3       	ldi	r24, 0x30	; 48
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     fb8:	02 ff       	sbrs	r16, 2
     fba:	1e c0       	rjmp	.+60     	; 0xff8 <vfprintf+0x6f4>
     fbc:	01 fd       	sbrc	r16, 1
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <vfprintf+0x6c2>
     fc0:	88 e7       	ldi	r24, 0x78	; 120
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <vfprintf+0x6c6>
     fc6:	88 e5       	ldi	r24, 0x58	; 88
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	b3 01       	movw	r22, r6
     fcc:	0c c0       	rjmp	.+24     	; 0xfe6 <vfprintf+0x6e2>
     fce:	80 2f       	mov	r24, r16
     fd0:	86 78       	andi	r24, 0x86	; 134
     fd2:	91 f0       	breq	.+36     	; 0xff8 <vfprintf+0x6f4>
     fd4:	01 ff       	sbrs	r16, 1
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <vfprintf+0x6d8>
     fd8:	8b e2       	ldi	r24, 0x2B	; 43
     fda:	01 c0       	rjmp	.+2      	; 0xfde <vfprintf+0x6da>
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	d7 fc       	sbrc	r13, 7
     fe0:	8d e2       	ldi	r24, 0x2D	; 45
     fe2:	b3 01       	movw	r22, r6
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     fea:	06 c0       	rjmp	.+12     	; 0xff8 <vfprintf+0x6f4>
     fec:	b3 01       	movw	r22, r6
     fee:	80 e3       	ldi	r24, 0x30	; 48
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     ff6:	9a 94       	dec	r9
     ff8:	f9 14       	cp	r15, r9
     ffa:	c0 f3       	brcs	.-16     	; 0xfec <vfprintf+0x6e8>
     ffc:	fa 94       	dec	r15
     ffe:	e1 e0       	ldi	r30, 0x01	; 1
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	ec 0f       	add	r30, r28
    1004:	fd 1f       	adc	r31, r29
    1006:	ef 0d       	add	r30, r15
    1008:	f1 1d       	adc	r31, r1
    100a:	b3 01       	movw	r22, r6
    100c:	80 81       	ld	r24, Z
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
    1014:	ff 20       	and	r15, r15
    1016:	91 f7       	brne	.-28     	; 0xffc <vfprintf+0x6f8>
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <vfprintf+0x722>
    101a:	b3 01       	movw	r22, r6
    101c:	80 e2       	ldi	r24, 0x20	; 32
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
    1024:	5a 94       	dec	r5
    1026:	55 20       	and	r5, r5
    1028:	c1 f7       	brne	.-16     	; 0x101a <vfprintf+0x716>
    102a:	86 cc       	rjmp	.-1780   	; 0x938 <vfprintf+0x34>
    102c:	f3 01       	movw	r30, r6
    102e:	66 81       	ldd	r22, Z+6	; 0x06
    1030:	77 81       	ldd	r23, Z+7	; 0x07
    1032:	cb 01       	movw	r24, r22
    1034:	63 96       	adiw	r28, 0x13	; 19
    1036:	e2 e1       	ldi	r30, 0x12	; 18
    1038:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__epilogue_restores__>

0000103c <__ftoa_engine>:
    103c:	28 30       	cpi	r18, 0x08	; 8
    103e:	08 f0       	brcs	.+2      	; 0x1042 <__ftoa_engine+0x6>
    1040:	27 e0       	ldi	r18, 0x07	; 7
    1042:	33 27       	eor	r19, r19
    1044:	da 01       	movw	r26, r20
    1046:	99 0f       	add	r25, r25
    1048:	31 1d       	adc	r19, r1
    104a:	87 fd       	sbrc	r24, 7
    104c:	91 60       	ori	r25, 0x01	; 1
    104e:	00 96       	adiw	r24, 0x00	; 0
    1050:	61 05       	cpc	r22, r1
    1052:	71 05       	cpc	r23, r1
    1054:	39 f4       	brne	.+14     	; 0x1064 <__ftoa_engine+0x28>
    1056:	32 60       	ori	r19, 0x02	; 2
    1058:	2e 5f       	subi	r18, 0xFE	; 254
    105a:	3d 93       	st	X+, r19
    105c:	30 e3       	ldi	r19, 0x30	; 48
    105e:	2a 95       	dec	r18
    1060:	e1 f7       	brne	.-8      	; 0x105a <__ftoa_engine+0x1e>
    1062:	08 95       	ret
    1064:	9f 3f       	cpi	r25, 0xFF	; 255
    1066:	30 f0       	brcs	.+12     	; 0x1074 <__ftoa_engine+0x38>
    1068:	80 38       	cpi	r24, 0x80	; 128
    106a:	71 05       	cpc	r23, r1
    106c:	61 05       	cpc	r22, r1
    106e:	09 f0       	breq	.+2      	; 0x1072 <__ftoa_engine+0x36>
    1070:	3c 5f       	subi	r19, 0xFC	; 252
    1072:	3c 5f       	subi	r19, 0xFC	; 252
    1074:	3d 93       	st	X+, r19
    1076:	91 30       	cpi	r25, 0x01	; 1
    1078:	08 f0       	brcs	.+2      	; 0x107c <__ftoa_engine+0x40>
    107a:	80 68       	ori	r24, 0x80	; 128
    107c:	91 1d       	adc	r25, r1
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	1f 93       	push	r17
    1084:	0f 93       	push	r16
    1086:	ff 92       	push	r15
    1088:	ef 92       	push	r14
    108a:	19 2f       	mov	r17, r25
    108c:	98 7f       	andi	r25, 0xF8	; 248
    108e:	96 95       	lsr	r25
    1090:	e9 2f       	mov	r30, r25
    1092:	96 95       	lsr	r25
    1094:	96 95       	lsr	r25
    1096:	e9 0f       	add	r30, r25
    1098:	ff 27       	eor	r31, r31
    109a:	e3 5b       	subi	r30, 0xB3	; 179
    109c:	fe 4f       	sbci	r31, 0xFE	; 254
    109e:	99 27       	eor	r25, r25
    10a0:	33 27       	eor	r19, r19
    10a2:	ee 24       	eor	r14, r14
    10a4:	ff 24       	eor	r15, r15
    10a6:	a7 01       	movw	r20, r14
    10a8:	e7 01       	movw	r28, r14
    10aa:	05 90       	lpm	r0, Z+
    10ac:	08 94       	sec
    10ae:	07 94       	ror	r0
    10b0:	28 f4       	brcc	.+10     	; 0x10bc <__ftoa_engine+0x80>
    10b2:	36 0f       	add	r19, r22
    10b4:	e7 1e       	adc	r14, r23
    10b6:	f8 1e       	adc	r15, r24
    10b8:	49 1f       	adc	r20, r25
    10ba:	51 1d       	adc	r21, r1
    10bc:	66 0f       	add	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	06 94       	lsr	r0
    10c6:	a1 f7       	brne	.-24     	; 0x10b0 <__ftoa_engine+0x74>
    10c8:	05 90       	lpm	r0, Z+
    10ca:	07 94       	ror	r0
    10cc:	28 f4       	brcc	.+10     	; 0x10d8 <__ftoa_engine+0x9c>
    10ce:	e7 0e       	add	r14, r23
    10d0:	f8 1e       	adc	r15, r24
    10d2:	49 1f       	adc	r20, r25
    10d4:	56 1f       	adc	r21, r22
    10d6:	c1 1d       	adc	r28, r1
    10d8:	77 0f       	add	r23, r23
    10da:	88 1f       	adc	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	66 1f       	adc	r22, r22
    10e0:	06 94       	lsr	r0
    10e2:	a1 f7       	brne	.-24     	; 0x10cc <__ftoa_engine+0x90>
    10e4:	05 90       	lpm	r0, Z+
    10e6:	07 94       	ror	r0
    10e8:	28 f4       	brcc	.+10     	; 0x10f4 <__ftoa_engine+0xb8>
    10ea:	f8 0e       	add	r15, r24
    10ec:	49 1f       	adc	r20, r25
    10ee:	56 1f       	adc	r21, r22
    10f0:	c7 1f       	adc	r28, r23
    10f2:	d1 1d       	adc	r29, r1
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	66 1f       	adc	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	06 94       	lsr	r0
    10fe:	a1 f7       	brne	.-24     	; 0x10e8 <__ftoa_engine+0xac>
    1100:	05 90       	lpm	r0, Z+
    1102:	07 94       	ror	r0
    1104:	20 f4       	brcc	.+8      	; 0x110e <__ftoa_engine+0xd2>
    1106:	49 0f       	add	r20, r25
    1108:	56 1f       	adc	r21, r22
    110a:	c7 1f       	adc	r28, r23
    110c:	d8 1f       	adc	r29, r24
    110e:	99 0f       	add	r25, r25
    1110:	66 1f       	adc	r22, r22
    1112:	77 1f       	adc	r23, r23
    1114:	88 1f       	adc	r24, r24
    1116:	06 94       	lsr	r0
    1118:	a9 f7       	brne	.-22     	; 0x1104 <__ftoa_engine+0xc8>
    111a:	84 91       	lpm	r24, Z+
    111c:	10 95       	com	r17
    111e:	17 70       	andi	r17, 0x07	; 7
    1120:	41 f0       	breq	.+16     	; 0x1132 <__ftoa_engine+0xf6>
    1122:	d6 95       	lsr	r29
    1124:	c7 95       	ror	r28
    1126:	57 95       	ror	r21
    1128:	47 95       	ror	r20
    112a:	f7 94       	ror	r15
    112c:	e7 94       	ror	r14
    112e:	1a 95       	dec	r17
    1130:	c1 f7       	brne	.-16     	; 0x1122 <__ftoa_engine+0xe6>
    1132:	e3 ef       	ldi	r30, 0xF3	; 243
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	68 94       	set
    1138:	15 90       	lpm	r1, Z+
    113a:	15 91       	lpm	r17, Z+
    113c:	35 91       	lpm	r19, Z+
    113e:	65 91       	lpm	r22, Z+
    1140:	95 91       	lpm	r25, Z+
    1142:	05 90       	lpm	r0, Z+
    1144:	7f e2       	ldi	r23, 0x2F	; 47
    1146:	73 95       	inc	r23
    1148:	e1 18       	sub	r14, r1
    114a:	f1 0a       	sbc	r15, r17
    114c:	43 0b       	sbc	r20, r19
    114e:	56 0b       	sbc	r21, r22
    1150:	c9 0b       	sbc	r28, r25
    1152:	d0 09       	sbc	r29, r0
    1154:	c0 f7       	brcc	.-16     	; 0x1146 <__ftoa_engine+0x10a>
    1156:	e1 0c       	add	r14, r1
    1158:	f1 1e       	adc	r15, r17
    115a:	43 1f       	adc	r20, r19
    115c:	56 1f       	adc	r21, r22
    115e:	c9 1f       	adc	r28, r25
    1160:	d0 1d       	adc	r29, r0
    1162:	7e f4       	brtc	.+30     	; 0x1182 <__ftoa_engine+0x146>
    1164:	70 33       	cpi	r23, 0x30	; 48
    1166:	11 f4       	brne	.+4      	; 0x116c <__ftoa_engine+0x130>
    1168:	8a 95       	dec	r24
    116a:	e6 cf       	rjmp	.-52     	; 0x1138 <__ftoa_engine+0xfc>
    116c:	e8 94       	clt
    116e:	01 50       	subi	r16, 0x01	; 1
    1170:	30 f0       	brcs	.+12     	; 0x117e <__ftoa_engine+0x142>
    1172:	08 0f       	add	r16, r24
    1174:	0a f4       	brpl	.+2      	; 0x1178 <__ftoa_engine+0x13c>
    1176:	00 27       	eor	r16, r16
    1178:	02 17       	cp	r16, r18
    117a:	08 f4       	brcc	.+2      	; 0x117e <__ftoa_engine+0x142>
    117c:	20 2f       	mov	r18, r16
    117e:	23 95       	inc	r18
    1180:	02 2f       	mov	r16, r18
    1182:	7a 33       	cpi	r23, 0x3A	; 58
    1184:	28 f0       	brcs	.+10     	; 0x1190 <__ftoa_engine+0x154>
    1186:	79 e3       	ldi	r23, 0x39	; 57
    1188:	7d 93       	st	X+, r23
    118a:	2a 95       	dec	r18
    118c:	e9 f7       	brne	.-6      	; 0x1188 <__ftoa_engine+0x14c>
    118e:	10 c0       	rjmp	.+32     	; 0x11b0 <__ftoa_engine+0x174>
    1190:	7d 93       	st	X+, r23
    1192:	2a 95       	dec	r18
    1194:	89 f6       	brne	.-94     	; 0x1138 <__ftoa_engine+0xfc>
    1196:	06 94       	lsr	r0
    1198:	97 95       	ror	r25
    119a:	67 95       	ror	r22
    119c:	37 95       	ror	r19
    119e:	17 95       	ror	r17
    11a0:	17 94       	ror	r1
    11a2:	e1 18       	sub	r14, r1
    11a4:	f1 0a       	sbc	r15, r17
    11a6:	43 0b       	sbc	r20, r19
    11a8:	56 0b       	sbc	r21, r22
    11aa:	c9 0b       	sbc	r28, r25
    11ac:	d0 09       	sbc	r29, r0
    11ae:	98 f0       	brcs	.+38     	; 0x11d6 <__ftoa_engine+0x19a>
    11b0:	23 95       	inc	r18
    11b2:	7e 91       	ld	r23, -X
    11b4:	73 95       	inc	r23
    11b6:	7a 33       	cpi	r23, 0x3A	; 58
    11b8:	08 f0       	brcs	.+2      	; 0x11bc <__ftoa_engine+0x180>
    11ba:	70 e3       	ldi	r23, 0x30	; 48
    11bc:	7c 93       	st	X, r23
    11be:	20 13       	cpse	r18, r16
    11c0:	b8 f7       	brcc	.-18     	; 0x11b0 <__ftoa_engine+0x174>
    11c2:	7e 91       	ld	r23, -X
    11c4:	70 61       	ori	r23, 0x10	; 16
    11c6:	7d 93       	st	X+, r23
    11c8:	30 f0       	brcs	.+12     	; 0x11d6 <__ftoa_engine+0x19a>
    11ca:	83 95       	inc	r24
    11cc:	71 e3       	ldi	r23, 0x31	; 49
    11ce:	7d 93       	st	X+, r23
    11d0:	70 e3       	ldi	r23, 0x30	; 48
    11d2:	2a 95       	dec	r18
    11d4:	e1 f7       	brne	.-8      	; 0x11ce <__ftoa_engine+0x192>
    11d6:	11 24       	eor	r1, r1
    11d8:	ef 90       	pop	r14
    11da:	ff 90       	pop	r15
    11dc:	0f 91       	pop	r16
    11de:	1f 91       	pop	r17
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	99 27       	eor	r25, r25
    11e6:	87 fd       	sbrc	r24, 7
    11e8:	90 95       	com	r25
    11ea:	08 95       	ret

000011ec <strnlen_P>:
    11ec:	fc 01       	movw	r30, r24
    11ee:	05 90       	lpm	r0, Z+
    11f0:	61 50       	subi	r22, 0x01	; 1
    11f2:	70 40       	sbci	r23, 0x00	; 0
    11f4:	01 10       	cpse	r0, r1
    11f6:	d8 f7       	brcc	.-10     	; 0x11ee <strnlen_P+0x2>
    11f8:	80 95       	com	r24
    11fa:	90 95       	com	r25
    11fc:	8e 0f       	add	r24, r30
    11fe:	9f 1f       	adc	r25, r31
    1200:	08 95       	ret

00001202 <strcpy>:
    1202:	fb 01       	movw	r30, r22
    1204:	dc 01       	movw	r26, r24
    1206:	01 90       	ld	r0, Z+
    1208:	0d 92       	st	X+, r0
    120a:	00 20       	and	r0, r0
    120c:	e1 f7       	brne	.-8      	; 0x1206 <strcpy+0x4>
    120e:	08 95       	ret

00001210 <strnlen>:
    1210:	fc 01       	movw	r30, r24
    1212:	61 50       	subi	r22, 0x01	; 1
    1214:	70 40       	sbci	r23, 0x00	; 0
    1216:	01 90       	ld	r0, Z+
    1218:	01 10       	cpse	r0, r1
    121a:	d8 f7       	brcc	.-10     	; 0x1212 <strnlen+0x2>
    121c:	80 95       	com	r24
    121e:	90 95       	com	r25
    1220:	8e 0f       	add	r24, r30
    1222:	9f 1f       	adc	r25, r31
    1224:	08 95       	ret

00001226 <fputc>:
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	8c 01       	movw	r16, r24
    1230:	eb 01       	movw	r28, r22
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	81 ff       	sbrs	r24, 1
    1236:	1b c0       	rjmp	.+54     	; 0x126e <fputc+0x48>
    1238:	82 ff       	sbrs	r24, 2
    123a:	0d c0       	rjmp	.+26     	; 0x1256 <fputc+0x30>
    123c:	2e 81       	ldd	r18, Y+6	; 0x06
    123e:	3f 81       	ldd	r19, Y+7	; 0x07
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	28 17       	cp	r18, r24
    1246:	39 07       	cpc	r19, r25
    1248:	64 f4       	brge	.+24     	; 0x1262 <fputc+0x3c>
    124a:	e8 81       	ld	r30, Y
    124c:	f9 81       	ldd	r31, Y+1	; 0x01
    124e:	01 93       	st	Z+, r16
    1250:	f9 83       	std	Y+1, r31	; 0x01
    1252:	e8 83       	st	Y, r30
    1254:	06 c0       	rjmp	.+12     	; 0x1262 <fputc+0x3c>
    1256:	e8 85       	ldd	r30, Y+8	; 0x08
    1258:	f9 85       	ldd	r31, Y+9	; 0x09
    125a:	80 2f       	mov	r24, r16
    125c:	09 95       	icall
    125e:	89 2b       	or	r24, r25
    1260:	31 f4       	brne	.+12     	; 0x126e <fputc+0x48>
    1262:	8e 81       	ldd	r24, Y+6	; 0x06
    1264:	9f 81       	ldd	r25, Y+7	; 0x07
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	9f 83       	std	Y+7, r25	; 0x07
    126a:	8e 83       	std	Y+6, r24	; 0x06
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <fputc+0x4c>
    126e:	0f ef       	ldi	r16, 0xFF	; 255
    1270:	1f ef       	ldi	r17, 0xFF	; 255
    1272:	c8 01       	movw	r24, r16
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <sprintf>:
    127e:	ae e0       	ldi	r26, 0x0E	; 14
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e4       	ldi	r30, 0x45	; 69
    1284:	f9 e0       	ldi	r31, 0x09	; 9
    1286:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__prologue_saves__+0x1c>
    128a:	0d 89       	ldd	r16, Y+21	; 0x15
    128c:	1e 89       	ldd	r17, Y+22	; 0x16
    128e:	86 e0       	ldi	r24, 0x06	; 6
    1290:	8c 83       	std	Y+4, r24	; 0x04
    1292:	1a 83       	std	Y+2, r17	; 0x02
    1294:	09 83       	std	Y+1, r16	; 0x01
    1296:	8f ef       	ldi	r24, 0xFF	; 255
    1298:	9f e7       	ldi	r25, 0x7F	; 127
    129a:	9e 83       	std	Y+6, r25	; 0x06
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	ce 01       	movw	r24, r28
    12a0:	49 96       	adiw	r24, 0x19	; 25
    12a2:	ac 01       	movw	r20, r24
    12a4:	6f 89       	ldd	r22, Y+23	; 0x17
    12a6:	78 8d       	ldd	r23, Y+24	; 0x18
    12a8:	ce 01       	movw	r24, r28
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	0e 94 82 04 	call	0x904	; 0x904 <vfprintf>
    12b0:	2f 81       	ldd	r18, Y+7	; 0x07
    12b2:	38 85       	ldd	r19, Y+8	; 0x08
    12b4:	02 0f       	add	r16, r18
    12b6:	13 1f       	adc	r17, r19
    12b8:	f8 01       	movw	r30, r16
    12ba:	10 82       	st	Z, r1
    12bc:	2e 96       	adiw	r28, 0x0e	; 14
    12be:	e4 e0       	ldi	r30, 0x04	; 4
    12c0:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__epilogue_restores__+0x1c>

000012c4 <__ultoa_invert>:
    12c4:	fa 01       	movw	r30, r20
    12c6:	aa 27       	eor	r26, r26
    12c8:	28 30       	cpi	r18, 0x08	; 8
    12ca:	51 f1       	breq	.+84     	; 0x1320 <__ultoa_invert+0x5c>
    12cc:	20 31       	cpi	r18, 0x10	; 16
    12ce:	81 f1       	breq	.+96     	; 0x1330 <__ultoa_invert+0x6c>
    12d0:	e8 94       	clt
    12d2:	6f 93       	push	r22
    12d4:	6e 7f       	andi	r22, 0xFE	; 254
    12d6:	6e 5f       	subi	r22, 0xFE	; 254
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	8f 4f       	sbci	r24, 0xFF	; 255
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	af 4f       	sbci	r26, 0xFF	; 255
    12e0:	b1 e0       	ldi	r27, 0x01	; 1
    12e2:	3e d0       	rcall	.+124    	; 0x1360 <__ultoa_invert+0x9c>
    12e4:	b4 e0       	ldi	r27, 0x04	; 4
    12e6:	3c d0       	rcall	.+120    	; 0x1360 <__ultoa_invert+0x9c>
    12e8:	67 0f       	add	r22, r23
    12ea:	78 1f       	adc	r23, r24
    12ec:	89 1f       	adc	r24, r25
    12ee:	9a 1f       	adc	r25, r26
    12f0:	a1 1d       	adc	r26, r1
    12f2:	68 0f       	add	r22, r24
    12f4:	79 1f       	adc	r23, r25
    12f6:	8a 1f       	adc	r24, r26
    12f8:	91 1d       	adc	r25, r1
    12fa:	a1 1d       	adc	r26, r1
    12fc:	6a 0f       	add	r22, r26
    12fe:	71 1d       	adc	r23, r1
    1300:	81 1d       	adc	r24, r1
    1302:	91 1d       	adc	r25, r1
    1304:	a1 1d       	adc	r26, r1
    1306:	20 d0       	rcall	.+64     	; 0x1348 <__ultoa_invert+0x84>
    1308:	09 f4       	brne	.+2      	; 0x130c <__ultoa_invert+0x48>
    130a:	68 94       	set
    130c:	3f 91       	pop	r19
    130e:	2a e0       	ldi	r18, 0x0A	; 10
    1310:	26 9f       	mul	r18, r22
    1312:	11 24       	eor	r1, r1
    1314:	30 19       	sub	r19, r0
    1316:	30 5d       	subi	r19, 0xD0	; 208
    1318:	31 93       	st	Z+, r19
    131a:	de f6       	brtc	.-74     	; 0x12d2 <__ultoa_invert+0xe>
    131c:	cf 01       	movw	r24, r30
    131e:	08 95       	ret
    1320:	46 2f       	mov	r20, r22
    1322:	47 70       	andi	r20, 0x07	; 7
    1324:	40 5d       	subi	r20, 0xD0	; 208
    1326:	41 93       	st	Z+, r20
    1328:	b3 e0       	ldi	r27, 0x03	; 3
    132a:	0f d0       	rcall	.+30     	; 0x134a <__ultoa_invert+0x86>
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__ultoa_invert+0x5c>
    132e:	f6 cf       	rjmp	.-20     	; 0x131c <__ultoa_invert+0x58>
    1330:	46 2f       	mov	r20, r22
    1332:	4f 70       	andi	r20, 0x0F	; 15
    1334:	40 5d       	subi	r20, 0xD0	; 208
    1336:	4a 33       	cpi	r20, 0x3A	; 58
    1338:	18 f0       	brcs	.+6      	; 0x1340 <__ultoa_invert+0x7c>
    133a:	49 5d       	subi	r20, 0xD9	; 217
    133c:	31 fd       	sbrc	r19, 1
    133e:	40 52       	subi	r20, 0x20	; 32
    1340:	41 93       	st	Z+, r20
    1342:	02 d0       	rcall	.+4      	; 0x1348 <__ultoa_invert+0x84>
    1344:	a9 f7       	brne	.-22     	; 0x1330 <__ultoa_invert+0x6c>
    1346:	ea cf       	rjmp	.-44     	; 0x131c <__ultoa_invert+0x58>
    1348:	b4 e0       	ldi	r27, 0x04	; 4
    134a:	a6 95       	lsr	r26
    134c:	97 95       	ror	r25
    134e:	87 95       	ror	r24
    1350:	77 95       	ror	r23
    1352:	67 95       	ror	r22
    1354:	ba 95       	dec	r27
    1356:	c9 f7       	brne	.-14     	; 0x134a <__ultoa_invert+0x86>
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	61 05       	cpc	r22, r1
    135c:	71 05       	cpc	r23, r1
    135e:	08 95       	ret
    1360:	9b 01       	movw	r18, r22
    1362:	ac 01       	movw	r20, r24
    1364:	0a 2e       	mov	r0, r26
    1366:	06 94       	lsr	r0
    1368:	57 95       	ror	r21
    136a:	47 95       	ror	r20
    136c:	37 95       	ror	r19
    136e:	27 95       	ror	r18
    1370:	ba 95       	dec	r27
    1372:	c9 f7       	brne	.-14     	; 0x1366 <__ultoa_invert+0xa2>
    1374:	62 0f       	add	r22, r18
    1376:	73 1f       	adc	r23, r19
    1378:	84 1f       	adc	r24, r20
    137a:	95 1f       	adc	r25, r21
    137c:	a0 1d       	adc	r26, r0
    137e:	08 95       	ret

00001380 <__floatunsisf>:
    1380:	e8 94       	clt
    1382:	09 c0       	rjmp	.+18     	; 0x1396 <__floatsisf+0x12>

00001384 <__floatsisf>:
    1384:	97 fb       	bst	r25, 7
    1386:	3e f4       	brtc	.+14     	; 0x1396 <__floatsisf+0x12>
    1388:	90 95       	com	r25
    138a:	80 95       	com	r24
    138c:	70 95       	com	r23
    138e:	61 95       	neg	r22
    1390:	7f 4f       	sbci	r23, 0xFF	; 255
    1392:	8f 4f       	sbci	r24, 0xFF	; 255
    1394:	9f 4f       	sbci	r25, 0xFF	; 255
    1396:	99 23       	and	r25, r25
    1398:	a9 f0       	breq	.+42     	; 0x13c4 <__floatsisf+0x40>
    139a:	f9 2f       	mov	r31, r25
    139c:	96 e9       	ldi	r25, 0x96	; 150
    139e:	bb 27       	eor	r27, r27
    13a0:	93 95       	inc	r25
    13a2:	f6 95       	lsr	r31
    13a4:	87 95       	ror	r24
    13a6:	77 95       	ror	r23
    13a8:	67 95       	ror	r22
    13aa:	b7 95       	ror	r27
    13ac:	f1 11       	cpse	r31, r1
    13ae:	f8 cf       	rjmp	.-16     	; 0x13a0 <__floatsisf+0x1c>
    13b0:	fa f4       	brpl	.+62     	; 0x13f0 <__floatsisf+0x6c>
    13b2:	bb 0f       	add	r27, r27
    13b4:	11 f4       	brne	.+4      	; 0x13ba <__floatsisf+0x36>
    13b6:	60 ff       	sbrs	r22, 0
    13b8:	1b c0       	rjmp	.+54     	; 0x13f0 <__floatsisf+0x6c>
    13ba:	6f 5f       	subi	r22, 0xFF	; 255
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255
    13be:	8f 4f       	sbci	r24, 0xFF	; 255
    13c0:	9f 4f       	sbci	r25, 0xFF	; 255
    13c2:	16 c0       	rjmp	.+44     	; 0x13f0 <__floatsisf+0x6c>
    13c4:	88 23       	and	r24, r24
    13c6:	11 f0       	breq	.+4      	; 0x13cc <__floatsisf+0x48>
    13c8:	96 e9       	ldi	r25, 0x96	; 150
    13ca:	11 c0       	rjmp	.+34     	; 0x13ee <__floatsisf+0x6a>
    13cc:	77 23       	and	r23, r23
    13ce:	21 f0       	breq	.+8      	; 0x13d8 <__floatsisf+0x54>
    13d0:	9e e8       	ldi	r25, 0x8E	; 142
    13d2:	87 2f       	mov	r24, r23
    13d4:	76 2f       	mov	r23, r22
    13d6:	05 c0       	rjmp	.+10     	; 0x13e2 <__floatsisf+0x5e>
    13d8:	66 23       	and	r22, r22
    13da:	71 f0       	breq	.+28     	; 0x13f8 <__floatsisf+0x74>
    13dc:	96 e8       	ldi	r25, 0x86	; 134
    13de:	86 2f       	mov	r24, r22
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	2a f0       	brmi	.+10     	; 0x13f0 <__floatsisf+0x6c>
    13e6:	9a 95       	dec	r25
    13e8:	66 0f       	add	r22, r22
    13ea:	77 1f       	adc	r23, r23
    13ec:	88 1f       	adc	r24, r24
    13ee:	da f7       	brpl	.-10     	; 0x13e6 <__floatsisf+0x62>
    13f0:	88 0f       	add	r24, r24
    13f2:	96 95       	lsr	r25
    13f4:	87 95       	ror	r24
    13f6:	97 f9       	bld	r25, 7
    13f8:	08 95       	ret

000013fa <__mulsf3>:
    13fa:	0b d0       	rcall	.+22     	; 0x1412 <__mulsf3x>
    13fc:	78 c0       	rjmp	.+240    	; 0x14ee <__fp_round>
    13fe:	69 d0       	rcall	.+210    	; 0x14d2 <__fp_pscA>
    1400:	28 f0       	brcs	.+10     	; 0x140c <__mulsf3+0x12>
    1402:	6e d0       	rcall	.+220    	; 0x14e0 <__fp_pscB>
    1404:	18 f0       	brcs	.+6      	; 0x140c <__mulsf3+0x12>
    1406:	95 23       	and	r25, r21
    1408:	09 f0       	breq	.+2      	; 0x140c <__mulsf3+0x12>
    140a:	5a c0       	rjmp	.+180    	; 0x14c0 <__fp_inf>
    140c:	5f c0       	rjmp	.+190    	; 0x14cc <__fp_nan>
    140e:	11 24       	eor	r1, r1
    1410:	a2 c0       	rjmp	.+324    	; 0x1556 <__fp_szero>

00001412 <__mulsf3x>:
    1412:	7e d0       	rcall	.+252    	; 0x1510 <__fp_split3>
    1414:	a0 f3       	brcs	.-24     	; 0x13fe <__mulsf3+0x4>

00001416 <__mulsf3_pse>:
    1416:	95 9f       	mul	r25, r21
    1418:	d1 f3       	breq	.-12     	; 0x140e <__mulsf3+0x14>
    141a:	95 0f       	add	r25, r21
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	55 1f       	adc	r21, r21
    1420:	62 9f       	mul	r22, r18
    1422:	f0 01       	movw	r30, r0
    1424:	72 9f       	mul	r23, r18
    1426:	bb 27       	eor	r27, r27
    1428:	f0 0d       	add	r31, r0
    142a:	b1 1d       	adc	r27, r1
    142c:	63 9f       	mul	r22, r19
    142e:	aa 27       	eor	r26, r26
    1430:	f0 0d       	add	r31, r0
    1432:	b1 1d       	adc	r27, r1
    1434:	aa 1f       	adc	r26, r26
    1436:	64 9f       	mul	r22, r20
    1438:	66 27       	eor	r22, r22
    143a:	b0 0d       	add	r27, r0
    143c:	a1 1d       	adc	r26, r1
    143e:	66 1f       	adc	r22, r22
    1440:	82 9f       	mul	r24, r18
    1442:	22 27       	eor	r18, r18
    1444:	b0 0d       	add	r27, r0
    1446:	a1 1d       	adc	r26, r1
    1448:	62 1f       	adc	r22, r18
    144a:	73 9f       	mul	r23, r19
    144c:	b0 0d       	add	r27, r0
    144e:	a1 1d       	adc	r26, r1
    1450:	62 1f       	adc	r22, r18
    1452:	83 9f       	mul	r24, r19
    1454:	a0 0d       	add	r26, r0
    1456:	61 1d       	adc	r22, r1
    1458:	22 1f       	adc	r18, r18
    145a:	74 9f       	mul	r23, r20
    145c:	33 27       	eor	r19, r19
    145e:	a0 0d       	add	r26, r0
    1460:	61 1d       	adc	r22, r1
    1462:	23 1f       	adc	r18, r19
    1464:	84 9f       	mul	r24, r20
    1466:	60 0d       	add	r22, r0
    1468:	21 1d       	adc	r18, r1
    146a:	82 2f       	mov	r24, r18
    146c:	76 2f       	mov	r23, r22
    146e:	6a 2f       	mov	r22, r26
    1470:	11 24       	eor	r1, r1
    1472:	9f 57       	subi	r25, 0x7F	; 127
    1474:	50 40       	sbci	r21, 0x00	; 0
    1476:	8a f0       	brmi	.+34     	; 0x149a <__mulsf3_pse+0x84>
    1478:	e1 f0       	breq	.+56     	; 0x14b2 <__mulsf3_pse+0x9c>
    147a:	88 23       	and	r24, r24
    147c:	4a f0       	brmi	.+18     	; 0x1490 <__mulsf3_pse+0x7a>
    147e:	ee 0f       	add	r30, r30
    1480:	ff 1f       	adc	r31, r31
    1482:	bb 1f       	adc	r27, r27
    1484:	66 1f       	adc	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	91 50       	subi	r25, 0x01	; 1
    148c:	50 40       	sbci	r21, 0x00	; 0
    148e:	a9 f7       	brne	.-22     	; 0x147a <__mulsf3_pse+0x64>
    1490:	9e 3f       	cpi	r25, 0xFE	; 254
    1492:	51 05       	cpc	r21, r1
    1494:	70 f0       	brcs	.+28     	; 0x14b2 <__mulsf3_pse+0x9c>
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <__fp_inf>
    1498:	5e c0       	rjmp	.+188    	; 0x1556 <__fp_szero>
    149a:	5f 3f       	cpi	r21, 0xFF	; 255
    149c:	ec f3       	brlt	.-6      	; 0x1498 <__mulsf3_pse+0x82>
    149e:	98 3e       	cpi	r25, 0xE8	; 232
    14a0:	dc f3       	brlt	.-10     	; 0x1498 <__mulsf3_pse+0x82>
    14a2:	86 95       	lsr	r24
    14a4:	77 95       	ror	r23
    14a6:	67 95       	ror	r22
    14a8:	b7 95       	ror	r27
    14aa:	f7 95       	ror	r31
    14ac:	e7 95       	ror	r30
    14ae:	9f 5f       	subi	r25, 0xFF	; 255
    14b0:	c1 f7       	brne	.-16     	; 0x14a2 <__mulsf3_pse+0x8c>
    14b2:	fe 2b       	or	r31, r30
    14b4:	88 0f       	add	r24, r24
    14b6:	91 1d       	adc	r25, r1
    14b8:	96 95       	lsr	r25
    14ba:	87 95       	ror	r24
    14bc:	97 f9       	bld	r25, 7
    14be:	08 95       	ret

000014c0 <__fp_inf>:
    14c0:	97 f9       	bld	r25, 7
    14c2:	9f 67       	ori	r25, 0x7F	; 127
    14c4:	80 e8       	ldi	r24, 0x80	; 128
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	08 95       	ret

000014cc <__fp_nan>:
    14cc:	9f ef       	ldi	r25, 0xFF	; 255
    14ce:	80 ec       	ldi	r24, 0xC0	; 192
    14d0:	08 95       	ret

000014d2 <__fp_pscA>:
    14d2:	00 24       	eor	r0, r0
    14d4:	0a 94       	dec	r0
    14d6:	16 16       	cp	r1, r22
    14d8:	17 06       	cpc	r1, r23
    14da:	18 06       	cpc	r1, r24
    14dc:	09 06       	cpc	r0, r25
    14de:	08 95       	ret

000014e0 <__fp_pscB>:
    14e0:	00 24       	eor	r0, r0
    14e2:	0a 94       	dec	r0
    14e4:	12 16       	cp	r1, r18
    14e6:	13 06       	cpc	r1, r19
    14e8:	14 06       	cpc	r1, r20
    14ea:	05 06       	cpc	r0, r21
    14ec:	08 95       	ret

000014ee <__fp_round>:
    14ee:	09 2e       	mov	r0, r25
    14f0:	03 94       	inc	r0
    14f2:	00 0c       	add	r0, r0
    14f4:	11 f4       	brne	.+4      	; 0x14fa <__fp_round+0xc>
    14f6:	88 23       	and	r24, r24
    14f8:	52 f0       	brmi	.+20     	; 0x150e <__fp_round+0x20>
    14fa:	bb 0f       	add	r27, r27
    14fc:	40 f4       	brcc	.+16     	; 0x150e <__fp_round+0x20>
    14fe:	bf 2b       	or	r27, r31
    1500:	11 f4       	brne	.+4      	; 0x1506 <__fp_round+0x18>
    1502:	60 ff       	sbrs	r22, 0
    1504:	04 c0       	rjmp	.+8      	; 0x150e <__fp_round+0x20>
    1506:	6f 5f       	subi	r22, 0xFF	; 255
    1508:	7f 4f       	sbci	r23, 0xFF	; 255
    150a:	8f 4f       	sbci	r24, 0xFF	; 255
    150c:	9f 4f       	sbci	r25, 0xFF	; 255
    150e:	08 95       	ret

00001510 <__fp_split3>:
    1510:	57 fd       	sbrc	r21, 7
    1512:	90 58       	subi	r25, 0x80	; 128
    1514:	44 0f       	add	r20, r20
    1516:	55 1f       	adc	r21, r21
    1518:	59 f0       	breq	.+22     	; 0x1530 <__fp_splitA+0x10>
    151a:	5f 3f       	cpi	r21, 0xFF	; 255
    151c:	71 f0       	breq	.+28     	; 0x153a <__fp_splitA+0x1a>
    151e:	47 95       	ror	r20

00001520 <__fp_splitA>:
    1520:	88 0f       	add	r24, r24
    1522:	97 fb       	bst	r25, 7
    1524:	99 1f       	adc	r25, r25
    1526:	61 f0       	breq	.+24     	; 0x1540 <__fp_splitA+0x20>
    1528:	9f 3f       	cpi	r25, 0xFF	; 255
    152a:	79 f0       	breq	.+30     	; 0x154a <__fp_splitA+0x2a>
    152c:	87 95       	ror	r24
    152e:	08 95       	ret
    1530:	12 16       	cp	r1, r18
    1532:	13 06       	cpc	r1, r19
    1534:	14 06       	cpc	r1, r20
    1536:	55 1f       	adc	r21, r21
    1538:	f2 cf       	rjmp	.-28     	; 0x151e <__fp_split3+0xe>
    153a:	46 95       	lsr	r20
    153c:	f1 df       	rcall	.-30     	; 0x1520 <__fp_splitA>
    153e:	08 c0       	rjmp	.+16     	; 0x1550 <__fp_splitA+0x30>
    1540:	16 16       	cp	r1, r22
    1542:	17 06       	cpc	r1, r23
    1544:	18 06       	cpc	r1, r24
    1546:	99 1f       	adc	r25, r25
    1548:	f1 cf       	rjmp	.-30     	; 0x152c <__fp_splitA+0xc>
    154a:	86 95       	lsr	r24
    154c:	71 05       	cpc	r23, r1
    154e:	61 05       	cpc	r22, r1
    1550:	08 94       	sec
    1552:	08 95       	ret

00001554 <__fp_zero>:
    1554:	e8 94       	clt

00001556 <__fp_szero>:
    1556:	bb 27       	eor	r27, r27
    1558:	66 27       	eor	r22, r22
    155a:	77 27       	eor	r23, r23
    155c:	cb 01       	movw	r24, r22
    155e:	97 f9       	bld	r25, 7
    1560:	08 95       	ret

00001562 <__udivmodhi4>:
    1562:	aa 1b       	sub	r26, r26
    1564:	bb 1b       	sub	r27, r27
    1566:	51 e1       	ldi	r21, 0x11	; 17
    1568:	07 c0       	rjmp	.+14     	; 0x1578 <__udivmodhi4_ep>

0000156a <__udivmodhi4_loop>:
    156a:	aa 1f       	adc	r26, r26
    156c:	bb 1f       	adc	r27, r27
    156e:	a6 17       	cp	r26, r22
    1570:	b7 07       	cpc	r27, r23
    1572:	10 f0       	brcs	.+4      	; 0x1578 <__udivmodhi4_ep>
    1574:	a6 1b       	sub	r26, r22
    1576:	b7 0b       	sbc	r27, r23

00001578 <__udivmodhi4_ep>:
    1578:	88 1f       	adc	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	5a 95       	dec	r21
    157e:	a9 f7       	brne	.-22     	; 0x156a <__udivmodhi4_loop>
    1580:	80 95       	com	r24
    1582:	90 95       	com	r25
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	08 95       	ret

0000158a <__divmodhi4>:
    158a:	97 fb       	bst	r25, 7
    158c:	09 2e       	mov	r0, r25
    158e:	07 26       	eor	r0, r23
    1590:	0a d0       	rcall	.+20     	; 0x15a6 <__divmodhi4_neg1>
    1592:	77 fd       	sbrc	r23, 7
    1594:	04 d0       	rcall	.+8      	; 0x159e <__divmodhi4_neg2>
    1596:	e5 df       	rcall	.-54     	; 0x1562 <__udivmodhi4>
    1598:	06 d0       	rcall	.+12     	; 0x15a6 <__divmodhi4_neg1>
    159a:	00 20       	and	r0, r0
    159c:	1a f4       	brpl	.+6      	; 0x15a4 <__divmodhi4_exit>

0000159e <__divmodhi4_neg2>:
    159e:	70 95       	com	r23
    15a0:	61 95       	neg	r22
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255

000015a4 <__divmodhi4_exit>:
    15a4:	08 95       	ret

000015a6 <__divmodhi4_neg1>:
    15a6:	f6 f7       	brtc	.-4      	; 0x15a4 <__divmodhi4_exit>
    15a8:	90 95       	com	r25
    15aa:	81 95       	neg	r24
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	08 95       	ret

000015b0 <__prologue_saves__>:
    15b0:	2f 92       	push	r2
    15b2:	3f 92       	push	r3
    15b4:	4f 92       	push	r4
    15b6:	5f 92       	push	r5
    15b8:	6f 92       	push	r6
    15ba:	7f 92       	push	r7
    15bc:	8f 92       	push	r8
    15be:	9f 92       	push	r9
    15c0:	af 92       	push	r10
    15c2:	bf 92       	push	r11
    15c4:	cf 92       	push	r12
    15c6:	df 92       	push	r13
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	ca 1b       	sub	r28, r26
    15da:	db 0b       	sbc	r29, r27
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	09 94       	ijmp

000015e8 <__epilogue_restores__>:
    15e8:	2a 88       	ldd	r2, Y+18	; 0x12
    15ea:	39 88       	ldd	r3, Y+17	; 0x11
    15ec:	48 88       	ldd	r4, Y+16	; 0x10
    15ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    15f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    15f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    15f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    15f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    15f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    15fa:	b9 84       	ldd	r11, Y+9	; 0x09
    15fc:	c8 84       	ldd	r12, Y+8	; 0x08
    15fe:	df 80       	ldd	r13, Y+7	; 0x07
    1600:	ee 80       	ldd	r14, Y+6	; 0x06
    1602:	fd 80       	ldd	r15, Y+5	; 0x05
    1604:	0c 81       	ldd	r16, Y+4	; 0x04
    1606:	1b 81       	ldd	r17, Y+3	; 0x03
    1608:	aa 81       	ldd	r26, Y+2	; 0x02
    160a:	b9 81       	ldd	r27, Y+1	; 0x01
    160c:	ce 0f       	add	r28, r30
    160e:	d1 1d       	adc	r29, r1
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	ed 01       	movw	r28, r26
    161c:	08 95       	ret

0000161e <_exit>:
    161e:	f8 94       	cli

00001620 <__stop_program>:
    1620:	ff cf       	rjmp	.-2      	; 0x1620 <__stop_program>
