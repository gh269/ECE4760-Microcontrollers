
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000017fa  0000188e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007b  00800110  00800110  0000189e  2**0
                  ALLOC
  3 .stab         00002424  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000701  00000000  00000000  00003cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000043c5  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  000043f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000221e  00000000  00000000  000044f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bae  00000000  00000000  00006712  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000eb3  00000000  00000000  000072c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004ec  00000000  00000000  00008174  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006a4  00000000  00000000  00008660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001771  00000000  00000000  00008d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  0000a475  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_12>
      34:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_13>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_16>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_number>:
      cc:	43 61 70 61 63 69 74 61 6e 63 65 3d 00 00           Capacitance=..

000000da <LCD_initialize>:
      da:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000eb <__c.2006>:
      eb:	6e 61 6e 00                                         nan.

000000ef <__c.2004>:
      ef:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ff:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10f:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11f:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12f:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13f:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1af:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1bf:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1cf:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1df:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e4       	ldi	r29, 0x40	; 64
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	ea ef       	ldi	r30, 0xFA	; 250
     202:	f7 e1       	ldi	r31, 0x17	; 23
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	a0 31       	cpi	r26, 0x10	; 16
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	a0 e1       	ldi	r26, 0x10	; 16
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	ab 38       	cpi	r26, 0x8B	; 139
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 d6 04 	call	0x9ac	; 0x9ac <main>
     228:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     230:	98 2f       	mov	r25, r24
     232:	90 7f       	andi	r25, 0xF0	; 240
     234:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_RS;
     236:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     238:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23a:	ef e3       	ldi	r30, 0x3F	; 63
     23c:	ff e1       	ldi	r31, 0x1F	; 31
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <LCDsendChar+0xe>
     242:	00 c0       	rjmp	.+0      	; 0x244 <LCDsendChar+0x14>
     244:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     246:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     248:	40 98       	cbi	0x08, 0	; 8
     24a:	ef e3       	ldi	r30, 0x3F	; 63
     24c:	ff e1       	ldi	r31, 0x1F	; 31
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <LCDsendChar+0x1e>
     252:	00 c0       	rjmp	.+0      	; 0x254 <LCDsendChar+0x24>
     254:	00 00       	nop
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     256:	f0 e1       	ldi	r31, 0x10	; 16
     258:	8f 9f       	mul	r24, r31
     25a:	c0 01       	movw	r24, r0
     25c:	11 24       	eor	r1, r1
     25e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     260:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     262:	42 9a       	sbi	0x08, 2	; 8
     264:	8f e3       	ldi	r24, 0x3F	; 63
     266:	9f e1       	ldi	r25, 0x1F	; 31
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <LCDsendChar+0x38>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <LCDsendChar+0x3e>
     26e:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     270:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     272:	40 98       	cbi	0x08, 0	; 8
     274:	ef e3       	ldi	r30, 0x3F	; 63
     276:	ff e1       	ldi	r31, 0x1F	; 31
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <LCDsendChar+0x48>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <LCDsendChar+0x4e>
     27e:	00 00       	nop
     280:	08 95       	ret

00000282 <LCDsendCommand>:
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     282:	98 2f       	mov	r25, r24
     284:	90 7f       	andi	r25, 0xF0	; 240
     286:	98 b9       	out	0x08, r25	; 8
	LCP|=1<<LCD_E;		
     288:	42 9a       	sbi	0x08, 2	; 8
     28a:	ef e3       	ldi	r30, 0x3F	; 63
     28c:	ff e1       	ldi	r31, 0x1F	; 31
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <LCDsendCommand+0xc>
     292:	00 c0       	rjmp	.+0      	; 0x294 <LCDsendCommand+0x12>
     294:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     296:	42 98       	cbi	0x08, 2	; 8
     298:	ef e3       	ldi	r30, 0x3F	; 63
     29a:	ff e1       	ldi	r31, 0x1F	; 31
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <LCDsendCommand+0x1a>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCDsendCommand+0x20>
     2a2:	00 00       	nop
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     2a4:	f0 e1       	ldi	r31, 0x10	; 16
     2a6:	8f 9f       	mul	r24, r31
     2a8:	c0 01       	movw	r24, r0
     2aa:	11 24       	eor	r1, r1
     2ac:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     2ae:	42 9a       	sbi	0x08, 2	; 8
     2b0:	8f e3       	ldi	r24, 0x3F	; 63
     2b2:	9f e1       	ldi	r25, 0x1F	; 31
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCDsendCommand+0x32>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCDsendCommand+0x38>
     2ba:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     2bc:	42 98       	cbi	0x08, 2	; 8
     2be:	ef e3       	ldi	r30, 0x3F	; 63
     2c0:	ff e1       	ldi	r31, 0x1F	; 31
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCDsendCommand+0x40>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCDsendCommand+0x46>
     2c8:	00 00       	nop
     2ca:	08 95       	ret

000002cc <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000002d2 <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000002d8 <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	1f 92       	push	r1
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	71 f0       	breq	.+28     	; 0x308 <LCDstring+0x30>
     2ec:	18 2f       	mov	r17, r24
     2ee:	7c 01       	movw	r14, r24
     2f0:	07 c0       	rjmp	.+14     	; 0x300 <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     2f2:	f7 01       	movw	r30, r14
     2f4:	81 91       	ld	r24, Z+
     2f6:	7f 01       	movw	r14, r30
     2f8:	69 83       	std	Y+1, r22	; 0x01
     2fa:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
     2fe:	69 81       	ldd	r22, Y+1	; 0x01

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     300:	8e 2d       	mov	r24, r14
     302:	81 1b       	sub	r24, r17
     304:	86 17       	cp	r24, r22
     306:	a8 f3       	brcs	.-22     	; 0x2f2 <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     308:	0f 90       	pop	r0
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	08 95       	ret

00000316 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     316:	62 30       	cpi	r22, 0x02	; 2
     318:	31 f0       	breq	.+12     	; 0x326 <LCDGotoXY+0x10>
     31a:	63 30       	cpi	r22, 0x03	; 3
     31c:	31 f0       	breq	.+12     	; 0x32a <LCDGotoXY+0x14>
     31e:	61 30       	cpi	r22, 0x01	; 1
     320:	29 f4       	brne	.+10     	; 0x32c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     322:	80 5c       	subi	r24, 0xC0	; 192
     324:	03 c0       	rjmp	.+6      	; 0x32c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     326:	8c 5e       	subi	r24, 0xEC	; 236
     328:	01 c0       	rjmp	.+2      	; 0x32c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     32a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     32c:	80 68       	ori	r24, 0x80	; 128
     32e:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

00000332 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	ec 01       	movw	r28, r24
     33a:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     33c:	64 2f       	mov	r22, r20
     33e:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	03 c0       	rjmp	.+6      	; 0x34c <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     346:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     34a:	1f 5f       	subi	r17, 0xFF	; 255
     34c:	fe 01       	movw	r30, r28
     34e:	e1 0f       	add	r30, r17
     350:	f1 1d       	adc	r31, r1
     352:	84 91       	lpm	r24, Z
     354:	81 11       	cpse	r24, r1
     356:	f7 cf       	rjmp	.-18     	; 0x346 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	08 95       	ret

00000360 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     36e:	88 e0       	ldi	r24, 0x08	; 8
     370:	68 9f       	mul	r22, r24
     372:	b0 01       	movw	r22, r0
     374:	11 24       	eor	r1, r1
     376:	80 e4       	ldi	r24, 0x40	; 64
     378:	e8 2e       	mov	r14, r24
     37a:	e6 2a       	or	r14, r22
	for (i=0; i<8; i++){
     37c:	c0 e0       	ldi	r28, 0x00	; 0
     37e:	d0 e0       	ldi	r29, 0x00	; 0
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     380:	f8 01       	movw	r30, r16
     382:	ec 0f       	add	r30, r28
     384:	fd 1f       	adc	r31, r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     386:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
     388:	8c 2f       	mov	r24, r28
     38a:	8e 0d       	add	r24, r14
     38c:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendChar(pcc);
     390:	8f 2d       	mov	r24, r15
     392:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     396:	21 96       	adiw	r28, 0x01	; 1
     398:	c8 30       	cpi	r28, 0x08	; 8
     39a:	d1 05       	cpc	r29, r1
     39c:	89 f7       	brne	.-30     	; 0x380 <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	08 95       	ret

000003ac <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	8f e5       	ldi	r24, 0x5F	; 95
     3b4:	9a ee       	ldi	r25, 0xEA	; 234
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <LCDinit+0xa>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCDinit+0x10>
     3bc:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     3be:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     3c0:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     3c2:	87 b1       	in	r24, 0x07	; 7
     3c4:	80 6f       	ori	r24, 0xF0	; 240
     3c6:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     3c8:	87 b1       	in	r24, 0x07	; 7
     3ca:	87 60       	ori	r24, 0x07	; 7
     3cc:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     3ce:	80 e3       	ldi	r24, 0x30	; 48
     3d0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     3d2:	42 9a       	sbi	0x08, 2	; 8
     3d4:	ef e3       	ldi	r30, 0x3F	; 63
     3d6:	ff e1       	ldi	r31, 0x1F	; 31
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCDinit+0x2c>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <LCDinit+0x32>
     3de:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     3e0:	42 98       	cbi	0x08, 2	; 8
     3e2:	ef e3       	ldi	r30, 0x3F	; 63
     3e4:	ff e1       	ldi	r31, 0x1F	; 31
     3e6:	31 97       	sbiw	r30, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCDinit+0x3a>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCDinit+0x40>
     3ec:	00 00       	nop
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     3ee:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     3f0:	42 9a       	sbi	0x08, 2	; 8
     3f2:	8f e3       	ldi	r24, 0x3F	; 63
     3f4:	9f e1       	ldi	r25, 0x1F	; 31
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCDinit+0x4a>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCDinit+0x50>
     3fc:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     3fe:	42 98       	cbi	0x08, 2	; 8
     400:	ef e3       	ldi	r30, 0x3F	; 63
     402:	ff e1       	ldi	r31, 0x1F	; 31
     404:	31 97       	sbiw	r30, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <LCDinit+0x58>
     408:	00 c0       	rjmp	.+0      	; 0x40a <LCDinit+0x5e>
     40a:	00 00       	nop
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     40c:	80 e2       	ldi	r24, 0x20	; 32
     40e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     410:	42 9a       	sbi	0x08, 2	; 8
     412:	8f e3       	ldi	r24, 0x3F	; 63
     414:	9f e1       	ldi	r25, 0x1F	; 31
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <LCDinit+0x6a>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <LCDinit+0x70>
     41c:	00 00       	nop
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     41e:	42 98       	cbi	0x08, 2	; 8
     420:	ef e3       	ldi	r30, 0x3F	; 63
     422:	ff e1       	ldi	r31, 0x1F	; 31
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <LCDinit+0x78>
     428:	00 c0       	rjmp	.+0      	; 0x42a <LCDinit+0x7e>
     42a:	00 00       	nop
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     42c:	88 e2       	ldi	r24, 0x28	; 40
     42e:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     432:	8c e0       	ldi	r24, 0x0C	; 12
     434:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
     438:	cc e8       	ldi	r28, 0x8C	; 140
     43a:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     43c:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     43e:	16 2f       	mov	r17, r22
     440:	1f 5f       	subi	r17, 0xFF	; 255
     442:	ce 01       	movw	r24, r28
     444:	0e 94 b0 01 	call	0x360	; 0x360 <LCDdefinechar>
     448:	28 96       	adiw	r28, 0x08	; 8
     44a:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     44c:	18 30       	cpi	r17, 0x08	; 8
     44e:	b9 f7       	brne	.-18     	; 0x43e <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	08 95       	ret

00000458 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     45e:	c0 e0       	ldi	r28, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
     462:	8e e1       	ldi	r24, 0x1E	; 30
     464:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     468:	cf 5f       	subi	r28, 0xFF	; 255
     46a:	cd 13       	cpse	r28, r29
     46c:	fa cf       	rjmp	.-12     	; 0x462 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     47a:	c0 e0       	ldi	r28, 0x00	; 0
     47c:	04 c0       	rjmp	.+8      	; 0x486 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
     47e:	88 e1       	ldi	r24, 0x18	; 24
     480:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     484:	cf 5f       	subi	r28, 0xFF	; 255
     486:	cd 13       	cpse	r28, r29
     488:	fa cf       	rjmp	.-12     	; 0x47e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     490:	8e e0       	ldi	r24, 0x0E	; 14
     492:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

00000496 <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     496:	8f e0       	ldi	r24, 0x0F	; 15
     498:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

0000049c <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     49c:	8c e0       	ldi	r24, 0x0C	; 12
     49e:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004a2 <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     4a2:	88 e0       	ldi	r24, 0x08	; 8
     4a4:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004a8 <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     4a8:	8c e0       	ldi	r24, 0x0C	; 12
     4aa:	0c 94 41 01 	jmp	0x282	; 0x282 <LCDsendCommand>

000004ae <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     4b4:	c0 e0       	ldi	r28, 0x00	; 0
     4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
     4b8:	80 e1       	ldi	r24, 0x10	; 16
     4ba:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     4be:	cf 5f       	subi	r28, 0xFF	; 255
     4c0:	cd 13       	cpse	r28, r29
     4c2:	fa cf       	rjmp	.-12     	; 0x4b8 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     4d0:	c0 e0       	ldi	r28, 0x00	; 0
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
     4d4:	84 e1       	ldi	r24, 0x14	; 20
     4d6:	0e 94 41 01 	call	0x282	; 0x282 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     4da:	cf 5f       	subi	r28, 0xFF	; 255
     4dc:	cd 13       	cpse	r28, r29
     4de:	fa cf       	rjmp	.-12     	; 0x4d4 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	1f 92       	push	r1
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     4fc:	56 e0       	ldi	r21, 0x06	; 6
     4fe:	45 9f       	mul	r20, r21
     500:	90 01       	movw	r18, r0
     502:	11 24       	eor	r1, r1
     504:	e8 2f       	mov	r30, r24
     506:	e2 9f       	mul	r30, r18
     508:	c0 01       	movw	r24, r0
     50a:	e3 9f       	mul	r30, r19
     50c:	90 0d       	add	r25, r0
     50e:	11 24       	eor	r1, r1
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	0e 94 15 0a 	call	0x142a	; 0x142a <__divmodhi4>
     516:	8b 01       	movw	r16, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     518:	cb 01       	movw	r24, r22
     51a:	66 e0       	ldi	r22, 0x06	; 6
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	0e 94 01 0a 	call	0x1402	; 0x1402 <__udivmodhi4>
     522:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     524:	c1 2c       	mov	r12, r1
     526:	d1 2c       	mov	r13, r1
     528:	f1 2c       	mov	r15, r1
     52a:	16 c0       	rjmp	.+44     	; 0x558 <LCDprogressBar+0x72>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     52c:	96 01       	movw	r18, r12
     52e:	2b 5f       	subi	r18, 0xFB	; 251
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	02 17       	cp	r16, r18
     534:	13 07       	cpc	r17, r19
     536:	28 f4       	brcc	.+10     	; 0x542 <LCDprogressBar+0x5c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     538:	0c 15       	cp	r16, r12
     53a:	1d 05       	cpc	r17, r13
     53c:	20 f0       	brcs	.+8      	; 0x546 <LCDprogressBar+0x60>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     53e:	8e 2d       	mov	r24, r14
     540:	03 c0       	rjmp	.+6      	; 0x548 <LCDprogressBar+0x62>
			}
		}
		else
		{
			// this is a full block
			c = 5;
     542:	85 e0       	ldi	r24, 0x05	; 5
     544:	01 c0       	rjmp	.+2      	; 0x548 <LCDprogressBar+0x62>
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
     546:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     548:	49 83       	std	Y+1, r20	; 0x01
     54a:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     54e:	f3 94       	inc	r15
     550:	f6 e0       	ldi	r31, 0x06	; 6
     552:	cf 0e       	add	r12, r31
     554:	d1 1c       	adc	r13, r1
     556:	49 81       	ldd	r20, Y+1	; 0x01
     558:	f4 12       	cpse	r15, r20
     55a:	e8 cf       	rjmp	.-48     	; 0x52c <LCDprogressBar+0x46>
		
		// write character to display
		LCDsendChar(c);
	}

}
     55c:	0f 90       	pop	r0
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret

00000570 <init_cap_measurement_analog_timer>:

//configures Analog Comparator and Timer1
//set it to full speed 
//clear TCNT1
void init_cap_measurement_analog_timer(){
	TCCR1B = 0;
     570:	e1 e8       	ldi	r30, 0x81	; 129
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	10 82       	st	Z, r1
	//full speed [ 16 MHz], capture on positive edge
	TCCR1B |= INPUT_CAPTURE_EDGE_SELECT + T0B_CS00;
     576:	80 81       	ld	r24, Z
     578:	81 64       	ori	r24, 0x41	; 65
     57a:	80 83       	st	Z, r24
	//turn on timer 1 interrupt-on-capture
	TIMSK1 = 0;
     57c:	ef e6       	ldi	r30, 0x6F	; 111
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	10 82       	st	Z, r1
	TIMSK1 |= INTERRUPT_ON_CAPTURE ;
     582:	80 81       	ld	r24, Z
     584:	80 62       	ori	r24, 0x20	; 32
     586:	80 83       	st	Z, r24

	//set analog comp to connect to timer capture input
	//with positive input reference voltage
	ACSR = 0;
     588:	10 be       	out	0x30, r1	; 48
	ACSR |= ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     58a:	80 b7       	in	r24, 0x30	; 48
     58c:	84 60       	ori	r24, 0x04	; 4
     58e:	80 bf       	out	0x30, r24	; 48
	ACSR &= ~ANALOG_COMPARATOR_BANDGAP_SELECT;
     590:	80 b7       	in	r24, 0x30	; 48
     592:	8f 7b       	andi	r24, 0xBF	; 191
     594:	80 bf       	out	0x30, r24	; 48
	//set all ports to input
	DDRB = 0;
     596:	14 b8       	out	0x04, r1	; 4
	DDRB &= ~(COMPARATOR_INPUT + COMPARATOR_REFERENCE);
     598:	84 b1       	in	r24, 0x04	; 4
     59a:	83 7f       	andi	r24, 0xF3	; 243
     59c:	84 b9       	out	0x04, r24	; 4
     59e:	08 95       	ret

000005a0 <init_cap_discharge_wait_timer>:

//Uses Timer1.A to wait 
//sets Timer1.A into a 1 MHz frequency 
void init_cap_discharge_wait_timer(){
	// Output capture/compare on OCR1A IE
	TIMSK1 = OUTPUT_COMPARE_A1_MATCH_INTERRUPT_ENABLE;
     5a0:	22 e0       	ldi	r18, 0x02	; 2
     5a2:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 2 * CAP_DISCHARGE_PERIOD;
     5a6:	8a e5       	ldi	r24, 0x5A	; 90
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	90 93 89 00 	sts	0x0089, r25
     5ae:	80 93 88 00 	sts	0x0088, r24
	//CS1 sets prescaler to div by 8 - clock 
	// 16 MHz				2 MHz
	// -------  = 2 MHz;  ------------------   = CAP_DISCHARGE period
	//    8                2 * CAP_DISCHARGE
	TCCR1B = T0B_CS01;
     5b2:	20 93 81 00 	sts	0x0081, r18
	//turn on clear on match
	TCCR1A = 0;
     5b6:	e0 e8       	ldi	r30, 0x80	; 128
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	10 82       	st	Z, r1
	TCCR1A |= CLEAR_ON_MATCH;
     5bc:	80 81       	ld	r24, Z
     5be:	82 60       	ori	r24, 0x02	; 2
     5c0:	80 83       	st	Z, r24
     5c2:	08 95       	ret

000005c4 <init_cap_measurements>:
	Convert PortB2 to an input and start a timer. The capacitor will start to charge toward Vcc.
	Detect when the voltage at PortB2 is greater than than the voltage at PortB3. That is, you will have to record when the comparator changes state. You could do this by polling the ACO bit of the ACSR and stopping the clock when ACO changes state, but a much better way to do it is to use the timer1 input capture function set up to be triggered by the comparator. Using input capture gives better timing accuracy and more dynamic range.
	Repeat
*/
void init_cap_measurements(void){
	DDRB = 0;
     5c4:	14 b8       	out	0x04, r1	; 4
	//set B3 to an input
	//make the reference an input to the Analog Comparator
	DDRB &= ~COMPARATOR_REFERENCE;
     5c6:	23 98       	cbi	0x04, 3	; 4
	//Drive B2 to 0 by making it an output and waiting long enough to discharge the cap
	DDRB |= COMPARATOR_INPUT;
     5c8:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~COMPARATOR_INPUT;
     5ca:	2a 98       	cbi	0x05, 2	; 5
	//use Timer1.A to perform this delay and signal when we can continue measurements
	init_cap_discharge_wait_timer();
     5cc:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <init_cap_discharge_wait_timer>

000005d0 <__vector_16>:
}

//1 ms timebase register
//Blinks LED 1/second
//refreshes LCD 1/200 ms
ISR (TIMER0_COMPA_vect){
     5d0:	1f 92       	push	r1
     5d2:	0f 92       	push	r0
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	0f 92       	push	r0
     5d8:	11 24       	eor	r1, r1
     5da:	8f 93       	push	r24
     5dc:	9f 93       	push	r25
	if( led_time_count > 0)
     5de:	80 91 7f 01 	lds	r24, 0x017F
     5e2:	90 91 80 01 	lds	r25, 0x0180
     5e6:	89 2b       	or	r24, r25
     5e8:	49 f0       	breq	.+18     	; 0x5fc <__vector_16+0x2c>
		--led_time_count;
     5ea:	80 91 7f 01 	lds	r24, 0x017F
     5ee:	90 91 80 01 	lds	r25, 0x0180
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	90 93 80 01 	sts	0x0180, r25
     5f8:	80 93 7f 01 	sts	0x017F, r24
	if( lcd_time_count > 0)
     5fc:	80 91 62 01 	lds	r24, 0x0162
     600:	90 91 63 01 	lds	r25, 0x0163
     604:	89 2b       	or	r24, r25
     606:	49 f0       	breq	.+18     	; 0x61a <__vector_16+0x4a>
		--lcd_time_count;
     608:	80 91 62 01 	lds	r24, 0x0162
     60c:	90 91 63 01 	lds	r25, 0x0163
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	90 93 63 01 	sts	0x0163, r25
     616:	80 93 62 01 	sts	0x0162, r24

}
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <__vector_13>:
//Once this triggers even once, we know that we have waited long enough for a cap discharge
ISR (TIMER1_COMPA_vect){
     628:	1f 92       	push	r1
     62a:	0f 92       	push	r0
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	0f 92       	push	r0
     630:	11 24       	eor	r1, r1
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
	cap_discharged = TRUE;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	90 93 79 01 	sts	0x0179, r25
     63e:	80 93 78 01 	sts	0x0178, r24
}
     642:	9f 91       	pop	r25
     644:	8f 91       	pop	r24
     646:	0f 90       	pop	r0
     648:	0f be       	out	0x3f, r0	; 63
     64a:	0f 90       	pop	r0
     64c:	1f 90       	pop	r1
     64e:	18 95       	reti

00000650 <__vector_12>:
			  t
	C = ------------
		R2 * ln(0.5)

*/
ISR (TIMER1_CAPT_vect){
     650:	1f 92       	push	r1
     652:	0f 92       	push	r0
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	0f 92       	push	r0
     658:	11 24       	eor	r1, r1
     65a:	0b b6       	in	r0, 0x3b	; 59
     65c:	0f 92       	push	r0
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	ef 93       	push	r30
     664:	ff 93       	push	r31
	// read timer1 input capture register
    //ICR1 = 65000;
	charge_cycles = ICR1;
     666:	e6 e8       	ldi	r30, 0x86	; 134
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	80 81       	ld	r24, Z
     66c:	91 81       	ldd	r25, Z+1	; 0x01
     66e:	90 93 77 01 	sts	0x0177, r25
     672:	80 93 76 01 	sts	0x0176, r24
	ICR1 = 0;
     676:	11 82       	std	Z+1, r1	; 0x01
     678:	10 82       	st	Z, r1
    // set the charged flag to true
    cap_charged = TRUE;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	90 93 84 01 	sts	0x0184, r25
     682:	80 93 83 01 	sts	0x0183, r24
}
     686:	ff 91       	pop	r31
     688:	ef 91       	pop	r30
     68a:	9f 91       	pop	r25
     68c:	8f 91       	pop	r24
     68e:	0f 90       	pop	r0
     690:	0b be       	out	0x3b, r0	; 59
     692:	0f 90       	pop	r0
     694:	0f be       	out	0x3f, r0	; 63
     696:	0f 90       	pop	r0
     698:	1f 90       	pop	r1
     69a:	18 95       	reti

0000069c <toggle_led>:

//
//Blinks the ONBOARD_LED D.2
void toggle_led(void){
	PORTD ^= ONBOARD_LED;
     69c:	8b b1       	in	r24, 0x0b	; 11
     69e:	94 e0       	ldi	r25, 0x04	; 4
     6a0:	89 27       	eor	r24, r25
     6a2:	8b b9       	out	0x0b, r24	; 11
     6a4:	08 95       	ret

000006a6 <init_timer0A>:
//setup timer 0 for a 1 ms timebase
// triggers the ISR on TIMER0_COMPA_vect
// on TCNT0 = OCR0A
void init_timer0A(void){
	// Output capture/compare on OCR0A IE
	TIMSK0 = OUTPUT_COMPARE_A0_MATCH_INTERRUPT_ENABLE;
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 249;
     6ac:	89 ef       	ldi	r24, 0xF9	; 249
     6ae:	87 bd       	out	0x27, r24	; 39
	//T0BCS01 + T0BCS00 sets clk divider 64
	// 16 MHz 				250 KHz
	// ------  = 256 KHz;  ---------  = 1 KHz  = 1ms period
	//   64					OCR0A=249
	TCCR0B = T0B_CS01 + T0B_CS00;
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	85 bd       	out	0x25, r24	; 37
	//turn on clear-on-match - timer A ISR will clear TCNT0 on match
	TCCR0A = 0;
     6b4:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= CLEAR_ON_MATCH;
     6b6:	84 b5       	in	r24, 0x24	; 36
     6b8:	82 60       	ori	r24, 0x02	; 2
     6ba:	84 bd       	out	0x24, r24	; 36
     6bc:	08 95       	ret

000006be <init_lcd>:
}

// LCD setup
void init_lcd(void){
	LCDinit();	//initialize the display
     6be:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCDinit>
	LCDcursorOFF();
     6c2:	0e 94 4e 02 	call	0x49c	; 0x49c <LCDcursorOFF>
	LCDclr();				//clear the display
     6c6:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDclr>
	LCDGotoXY(0,0);
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
	CopyStringtoLCD(LCD_number, 0, 0);
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	8c ec       	ldi	r24, 0xCC	; 204
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0c 94 99 01 	jmp	0x332	; 0x332 <CopyStringtoLCD>

000006de <refresh_lcd>:
}


// writes contents of lcd_buffer to LCD every 200 mSec
// 
void refresh_lcd(void){
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
  // increment time counter and format string 
  //if (charge_cycles > 100) {
    //sprintf(lcd_buffer,"%-.4f",capacitance);
    sprintf(lcd_buffer,"%-u", charge_cycles);	 
     6e2:	80 91 76 01 	lds	r24, 0x0176
     6e6:	90 91 77 01 	lds	r25, 0x0177
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	c4 e6       	ldi	r28, 0x64	; 100
     6f8:	d1 e0       	ldi	r29, 0x01	; 1
     6fa:	df 93       	push	r29
     6fc:	cf 93       	push	r28
     6fe:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <sprintf>
  //}
  //else {
  //	sprintf(lcd_buffer,"N/A     ");
  //}               
  LCDGotoXY(0, 1);
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  	// display the capacitance 
  LCDstring(lcd_buffer, strlen(lcd_buffer));	
     70a:	fe 01       	movw	r30, r28
     70c:	01 90       	ld	r0, Z+
     70e:	00 20       	and	r0, r0
     710:	e9 f7       	brne	.-6      	; 0x70c <refresh_lcd+0x2e>
     712:	bf 01       	movw	r22, r30
     714:	61 50       	subi	r22, 0x01	; 1
     716:	71 09       	sbc	r23, r1
     718:	6c 1b       	sub	r22, r28
     71a:	7d 0b       	sbc	r23, r29
     71c:	ce 01       	movw	r24, r28
     71e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCDstring>
  // now move a char left and right
  
  LCDGotoXY(anipos,1);	   //second line
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	80 91 75 01 	lds	r24, 0x0175
     728:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  LCDsendChar(' '); 
     72c:	80 e2       	ldi	r24, 0x20	; 32
     72e:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendChar>
      	
  if (anipos>=15) dir=-1;   // check boundaries
     732:	90 91 75 01 	lds	r25, 0x0175
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	9f 30       	cpi	r25, 0x0F	; 15
     744:	10 f0       	brcs	.+4      	; 0x74a <refresh_lcd+0x6c>
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	03 c0       	rjmp	.+6      	; 0x750 <refresh_lcd+0x72>
  if (anipos<=8 ) dir=1;
     74a:	99 30       	cpi	r25, 0x09	; 9
     74c:	18 f4       	brcc	.+6      	; 0x754 <refresh_lcd+0x76>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 7e 01 	sts	0x017E, r24
  anipos=anipos+dir;
     754:	80 91 7e 01 	lds	r24, 0x017E
     758:	89 0f       	add	r24, r25
     75a:	80 93 75 01 	sts	0x0175, r24
  LCDGotoXY(anipos,1);	   //second line
     75e:	61 e0       	ldi	r22, 0x01	; 1
     760:	0e 94 8b 01 	call	0x316	; 0x316 <LCDGotoXY>
  LCDsendChar('o');
     764:	8f e6       	ldi	r24, 0x6F	; 111
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
      	
  if (anipos>=15) dir=-1;   // check boundaries
  if (anipos<=8 ) dir=1;
  anipos=anipos+dir;
  LCDGotoXY(anipos,1);	   //second line
  LCDsendChar('o');
     76a:	0c 94 18 01 	jmp	0x230	; 0x230 <LCDsendChar>

0000076e <initialize>:
}

void initialize(void){
	anipos = 8;
     76e:	88 e0       	ldi	r24, 0x08	; 8
     770:	80 93 75 01 	sts	0x0175, r24
	led_time_count = 0;
     774:	10 92 80 01 	sts	0x0180, r1
     778:	10 92 7f 01 	sts	0x017F, r1
	init_timer0A();
     77c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <init_timer0A>

	DDRB = 0;
     780:	14 b8       	out	0x04, r1	; 4
	DDRD = 0;
     782:	1a b8       	out	0x0a, r1	; 10

	//Enable LED Port
	DDRD = ONBOARD_LED; //turn the LED to an output
     784:	84 e0       	ldi	r24, 0x04	; 4
     786:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; //turn off LED 
     788:	8f ef       	ldi	r24, 0xFF	; 255
     78a:	8b b9       	out	0x0b, r24	; 11

	capacitance = 0;
     78c:	10 92 7a 01 	sts	0x017A, r1
     790:	10 92 7b 01 	sts	0x017B, r1
     794:	10 92 7c 01 	sts	0x017C, r1
     798:	10 92 7d 01 	sts	0x017D, r1
	charge_cycles = 0;
     79c:	10 92 77 01 	sts	0x0177, r1
     7a0:	10 92 76 01 	sts	0x0176, r1
	cap_discharged = FALSE;
     7a4:	10 92 79 01 	sts	0x0179, r1
     7a8:	10 92 78 01 	sts	0x0178, r1
	begin_cap_measurement = FALSE;
     7ac:	10 92 82 01 	sts	0x0182, r1
     7b0:	10 92 81 01 	sts	0x0181, r1
	cap_charged = FALSE;
     7b4:	10 92 84 01 	sts	0x0184, r1
     7b8:	10 92 83 01 	sts	0x0183, r1

	init_lcd();
     7bc:	0e 94 5f 03 	call	0x6be	; 0x6be <init_lcd>
	LCDclr();
     7c0:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDclr>
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting timers...\n\r");


	sei();
     7c4:	78 94       	sei
     7c6:	08 95       	ret

000007c8 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     7c8:	87 e6       	ldi	r24, 0x67	; 103
     7ca:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     7ce:	88 e1       	ldi	r24, 0x18	; 24
     7d0:	80 93 c1 00 	sts	0x00C1, r24
     7d4:	08 95       	ret

000007d6 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     7d6:	cf 93       	push	r28
     7d8:	c8 2f       	mov	r28, r24

  if (c == '\a')
     7da:	87 30       	cpi	r24, 0x07	; 7
     7dc:	49 f4       	brne	.+18     	; 0x7f0 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     7de:	60 91 89 01 	lds	r22, 0x0189
     7e2:	70 91 8a 01 	lds	r23, 0x018A
     7e6:	88 e0       	ldi	r24, 0x08	; 8
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 43 0b 	call	0x1686	; 0x1686 <fputs>
     7ee:	0b c0       	rjmp	.+22     	; 0x806 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     7f0:	8a 30       	cpi	r24, 0x0A	; 10
     7f2:	19 f4       	brne	.+6      	; 0x7fa <uart_putchar+0x24>
    uart_putchar('\r', stream);
     7f4:	8d e0       	ldi	r24, 0x0D	; 13
     7f6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     7fa:	80 91 c0 00 	lds	r24, 0x00C0
     7fe:	85 ff       	sbrs	r24, 5
     800:	fc cf       	rjmp	.-8      	; 0x7fa <uart_putchar+0x24>
  UDR0 = c;
     802:	c0 93 c6 00 	sts	0x00C6, r28

  return 0;
}
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	8c 01       	movw	r16, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     81c:	80 91 10 01 	lds	r24, 0x0110
     820:	90 91 11 01 	lds	r25, 0x0111
     824:	89 2b       	or	r24, r25
     826:	09 f0       	breq	.+2      	; 0x82a <uart_getchar+0x1c>
     828:	a1 c0       	rjmp	.+322    	; 0x96c <uart_getchar+0x15e>
     82a:	c2 e1       	ldi	r28, 0x12	; 18
     82c:	d1 e0       	ldi	r29, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     82e:	80 91 c0 00 	lds	r24, 0x00C0
     832:	87 ff       	sbrs	r24, 7
     834:	fc cf       	rjmp	.-8      	; 0x82e <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     836:	80 91 c0 00 	lds	r24, 0x00C0
     83a:	84 fd       	sbrc	r24, 4
     83c:	aa c0       	rjmp	.+340    	; 0x992 <uart_getchar+0x184>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     83e:	80 91 c0 00 	lds	r24, 0x00C0
     842:	83 fd       	sbrc	r24, 3
     844:	a9 c0       	rjmp	.+338    	; 0x998 <uart_getchar+0x18a>
	  return _FDEV_ERR;
	c = UDR0;
     846:	80 91 c6 00 	lds	r24, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     84a:	8d 30       	cpi	r24, 0x0D	; 13
     84c:	61 f4       	brne	.+24     	; 0x866 <uart_getchar+0x58>
	  c = '\n';
	if (c == '\n')
	  {
	    *cp = c;
     84e:	8a e0       	ldi	r24, 0x0A	; 10
     850:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
     852:	b8 01       	movw	r22, r16
     854:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
	    rxp = b;
     858:	82 e1       	ldi	r24, 0x12	; 18
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	90 93 11 01 	sts	0x0111, r25
     860:	80 93 10 01 	sts	0x0110, r24
	    break;
     864:	83 c0       	rjmp	.+262    	; 0x96c <uart_getchar+0x15e>
	  return _FDEV_ERR;
	c = UDR0;
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
	  c = '\n';
	if (c == '\n')
     866:	8a 30       	cpi	r24, 0x0A	; 10
     868:	91 f3       	breq	.-28     	; 0x84e <uart_getchar+0x40>
	    *cp = c;
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
     86a:	89 30       	cpi	r24, 0x09	; 9
     86c:	09 f4       	brne	.+2      	; 0x870 <uart_getchar+0x62>
	  c = ' ';
     86e:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     870:	98 2f       	mov	r25, r24
     872:	90 52       	subi	r25, 0x20	; 32
     874:	9f 35       	cpi	r25, 0x5F	; 95
     876:	10 f0       	brcs	.+4      	; 0x87c <uart_getchar+0x6e>
     878:	80 3a       	cpi	r24, 0xA0	; 160
     87a:	90 f0       	brcs	.+36     	; 0x8a0 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	c1 36       	cpi	r28, 0x61	; 97
     880:	d9 07       	cpc	r29, r25
     882:	49 f4       	brne	.+18     	; 0x896 <uart_getchar+0x88>
uart_putchar(char c, FILE *stream)
{

  if (c == '\a')
    {
      fputs("*ring*\n", stderr);
     884:	60 91 89 01 	lds	r22, 0x0189
     888:	70 91 8a 01 	lds	r23, 0x018A
     88c:	88 e0       	ldi	r24, 0x08	; 8
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 43 0b 	call	0x1686	; 0x1686 <fputs>
     894:	cc cf       	rjmp	.-104    	; 0x82e <uart_getchar+0x20>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
     896:	89 93       	st	Y+, r24
		uart_putchar(c, stream);
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
     89e:	c7 cf       	rjmp	.-114    	; 0x82e <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     8a0:	82 31       	cpi	r24, 0x12	; 18
     8a2:	29 f1       	breq	.+74     	; 0x8ee <uart_getchar+0xe0>
     8a4:	38 f4       	brcc	.+14     	; 0x8b4 <uart_getchar+0xa6>
     8a6:	83 30       	cpi	r24, 0x03	; 3
     8a8:	09 f4       	brne	.+2      	; 0x8ac <uart_getchar+0x9e>
     8aa:	76 c0       	rjmp	.+236    	; 0x998 <uart_getchar+0x18a>
     8ac:	88 30       	cpi	r24, 0x08	; 8
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <uart_getchar+0xa4>
     8b0:	be cf       	rjmp	.-132    	; 0x82e <uart_getchar+0x20>
     8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <uart_getchar+0xb8>
     8b4:	87 31       	cpi	r24, 0x17	; 23
     8b6:	09 f4       	brne	.+2      	; 0x8ba <uart_getchar+0xac>
     8b8:	4d c0       	rjmp	.+154    	; 0x954 <uart_getchar+0x146>
     8ba:	8f 37       	cpi	r24, 0x7F	; 127
     8bc:	21 f0       	breq	.+8      	; 0x8c6 <uart_getchar+0xb8>
     8be:	85 31       	cpi	r24, 0x15	; 21
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <uart_getchar+0xb6>
     8c2:	b5 cf       	rjmp	.-150    	; 0x82e <uart_getchar+0x20>
     8c4:	34 c0       	rjmp	.+104    	; 0x92e <uart_getchar+0x120>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     8c6:	e1 e0       	ldi	r30, 0x01	; 1
     8c8:	c2 31       	cpi	r28, 0x12	; 18
     8ca:	de 07       	cpc	r29, r30
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <uart_getchar+0xc2>
     8ce:	08 f4       	brcc	.+2      	; 0x8d2 <uart_getchar+0xc4>
     8d0:	ae cf       	rjmp	.-164    	; 0x82e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     8d2:	b8 01       	movw	r22, r16
     8d4:	88 e0       	ldi	r24, 0x08	; 8
     8d6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
		uart_putchar(' ', stream);
     8da:	b8 01       	movw	r22, r16
     8dc:	80 e2       	ldi	r24, 0x20	; 32
     8de:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
		uart_putchar('\b', stream);
     8e2:	b8 01       	movw	r22, r16
     8e4:	88 e0       	ldi	r24, 0x08	; 8
     8e6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
		cp--;
     8ea:	21 97       	sbiw	r28, 0x01	; 1
     8ec:	a0 cf       	rjmp	.-192    	; 0x82e <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     8ee:	b8 01       	movw	r22, r16
     8f0:	8d e0       	ldi	r24, 0x0D	; 13
     8f2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     8f6:	82 e1       	ldi	r24, 0x12	; 18
     8f8:	e8 2e       	mov	r14, r24
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	f8 2e       	mov	r15, r24
     8fe:	06 c0       	rjmp	.+12     	; 0x90c <uart_getchar+0xfe>
	      uart_putchar(*cp2, stream);
     900:	b8 01       	movw	r22, r16
     902:	f7 01       	movw	r30, r14
     904:	81 91       	ld	r24, Z+
     906:	7f 01       	movw	r14, r30
     908:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     90c:	ec 16       	cp	r14, r28
     90e:	fd 06       	cpc	r15, r29
     910:	b8 f3       	brcs	.-18     	; 0x900 <uart_getchar+0xf2>
     912:	8d cf       	rjmp	.-230    	; 0x82e <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     914:	b8 01       	movw	r22, r16
     916:	88 e0       	ldi	r24, 0x08	; 8
     918:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
		uart_putchar(' ', stream);
     91c:	b8 01       	movw	r22, r16
     91e:	80 e2       	ldi	r24, 0x20	; 32
     920:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
		uart_putchar('\b', stream);
     924:	b8 01       	movw	r22, r16
     926:	88 e0       	ldi	r24, 0x08	; 8
     928:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
		cp--;
     92c:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	c2 31       	cpi	r28, 0x12	; 18
     932:	df 07       	cpc	r29, r31
     934:	09 f0       	breq	.+2      	; 0x938 <uart_getchar+0x12a>
     936:	70 f7       	brcc	.-36     	; 0x914 <uart_getchar+0x106>
     938:	7a cf       	rjmp	.-268    	; 0x82e <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     93a:	b8 01       	movw	r22, r16
     93c:	88 e0       	ldi	r24, 0x08	; 8
     93e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
		uart_putchar(' ', stream);
     942:	b8 01       	movw	r22, r16
     944:	80 e2       	ldi	r24, 0x20	; 32
     946:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
		uart_putchar('\b', stream);
     94a:	b8 01       	movw	r22, r16
     94c:	88 e0       	ldi	r24, 0x08	; 8
     94e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uart_putchar>
		cp--;
     952:	e7 01       	movw	r28, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	c2 31       	cpi	r28, 0x12	; 18
     958:	d8 07       	cpc	r29, r24
     95a:	09 f0       	breq	.+2      	; 0x95e <uart_getchar+0x150>
     95c:	08 f4       	brcc	.+2      	; 0x960 <uart_getchar+0x152>
     95e:	67 cf       	rjmp	.-306    	; 0x82e <uart_getchar+0x20>
     960:	fe 01       	movw	r30, r28
     962:	82 91       	ld	r24, -Z
     964:	7f 01       	movw	r14, r30
     966:	80 32       	cpi	r24, 0x20	; 32
     968:	41 f7       	brne	.-48     	; 0x93a <uart_getchar+0x12c>
     96a:	61 cf       	rjmp	.-318    	; 0x82e <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     96c:	e0 91 10 01 	lds	r30, 0x0110
     970:	f0 91 11 01 	lds	r31, 0x0111
     974:	20 81       	ld	r18, Z
  if (c == '\n')
     976:	2a 30       	cpi	r18, 0x0A	; 10
     978:	31 f0       	breq	.+12     	; 0x986 <uart_getchar+0x178>
	      }
	    break;
	  }
      }

  c = *rxp++;
     97a:	31 96       	adiw	r30, 0x01	; 1
     97c:	f0 93 11 01 	sts	0x0111, r31
     980:	e0 93 10 01 	sts	0x0110, r30
     984:	04 c0       	rjmp	.+8      	; 0x98e <uart_getchar+0x180>
  if (c == '\n')
    rxp = 0;
     986:	10 92 11 01 	sts	0x0111, r1
     98a:	10 92 10 01 	sts	0x0110, r1

  return c;
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	05 c0       	rjmp	.+10     	; 0x99c <uart_getchar+0x18e>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     992:	2e ef       	ldi	r18, 0xFE	; 254
     994:	3f ef       	ldi	r19, 0xFF	; 255
     996:	02 c0       	rjmp	.+4      	; 0x99c <uart_getchar+0x18e>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     998:	2f ef       	ldi	r18, 0xFF	; 255
     99a:	3f ef       	ldi	r19, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     99c:	c9 01       	movw	r24, r18
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	08 95       	ret

000009ac <main>:
}

int main(void){
	initialize();
     9ac:	0e 94 b7 03 	call	0x76e	; 0x76e <initialize>
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	8c ec       	ldi	r24, 0xCC	; 204
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 99 01 	call	0x332	; 0x332 <CopyStringtoLCD>
	
	while(1){
		if( led_time_count == 0){
			led_time_count = LED_BLINK_PERIOD / 2;
     9bc:	c4 ef       	ldi	r28, 0xF4	; 244
     9be:	d1 e0       	ldi	r29, 0x01	; 1
			toggle_led();
		}
		if( lcd_time_count == 0){
			lcd_time_count = LCD_REFRESH_RATE;
     9c0:	08 ec       	ldi	r16, 0xC8	; 200
     9c2:	10 e0       	ldi	r17, 0x00	; 0
		}
		if(cap_discharged && !begin_cap_measurement){
			cli();
			//begin cap measurements
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     9c4:	ee 24       	eor	r14, r14
     9c6:	e3 94       	inc	r14
     9c8:	f1 2c       	mov	r15, r1
int main(void){
	initialize();
	CopyStringtoLCD(LCD_number, 0, 0);//start at char=0 line=0
	
	while(1){
		if( led_time_count == 0){
     9ca:	80 91 7f 01 	lds	r24, 0x017F
     9ce:	90 91 80 01 	lds	r25, 0x0180
     9d2:	89 2b       	or	r24, r25
     9d4:	31 f4       	brne	.+12     	; 0x9e2 <main+0x36>
			led_time_count = LED_BLINK_PERIOD / 2;
     9d6:	d0 93 80 01 	sts	0x0180, r29
     9da:	c0 93 7f 01 	sts	0x017F, r28
			toggle_led();
     9de:	0e 94 4e 03 	call	0x69c	; 0x69c <toggle_led>
		}
		if( lcd_time_count == 0){
     9e2:	80 91 62 01 	lds	r24, 0x0162
     9e6:	90 91 63 01 	lds	r25, 0x0163
     9ea:	89 2b       	or	r24, r25
     9ec:	31 f4       	brne	.+12     	; 0x9fa <main+0x4e>
			lcd_time_count = LCD_REFRESH_RATE;
     9ee:	10 93 63 01 	sts	0x0163, r17
     9f2:	00 93 62 01 	sts	0x0162, r16
			refresh_lcd();
     9f6:	0e 94 6f 03 	call	0x6de	; 0x6de <refresh_lcd>
		}
		if (!cap_discharged && !begin_cap_measurement && !cap_charged) {
     9fa:	80 91 78 01 	lds	r24, 0x0178
     9fe:	90 91 79 01 	lds	r25, 0x0179
     a02:	89 2b       	or	r24, r25
     a04:	81 f4       	brne	.+32     	; 0xa26 <main+0x7a>
     a06:	80 91 81 01 	lds	r24, 0x0181
     a0a:	90 91 82 01 	lds	r25, 0x0182
     a0e:	89 2b       	or	r24, r25
     a10:	51 f4       	brne	.+20     	; 0xa26 <main+0x7a>
     a12:	80 91 83 01 	lds	r24, 0x0183
     a16:	90 91 84 01 	lds	r25, 0x0184
     a1a:	89 2b       	or	r24, r25
     a1c:	21 f4       	brne	.+8      	; 0xa26 <main+0x7a>
			cli();
     a1e:	f8 94       	cli
			init_cap_measurements();
     a20:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <init_cap_measurements>
			sei();
     a24:	78 94       	sei
		}
		if(cap_discharged && !begin_cap_measurement){
     a26:	80 91 78 01 	lds	r24, 0x0178
     a2a:	90 91 79 01 	lds	r25, 0x0179
     a2e:	89 2b       	or	r24, r25
     a30:	71 f0       	breq	.+28     	; 0xa4e <main+0xa2>
     a32:	80 91 81 01 	lds	r24, 0x0181
     a36:	90 91 82 01 	lds	r25, 0x0182
     a3a:	89 2b       	or	r24, r25
     a3c:	41 f4       	brne	.+16     	; 0xa4e <main+0xa2>
			cli();
     a3e:	f8 94       	cli
			//begin cap measurements
			//mark that we can start cap measurement
			begin_cap_measurement = TRUE;
     a40:	f0 92 82 01 	sts	0x0182, r15
     a44:	e0 92 81 01 	sts	0x0181, r14
			//initalize timer for cap measurement
			init_cap_measurement_analog_timer();
     a48:	0e 94 b8 02 	call	0x570	; 0x570 <init_cap_measurement_analog_timer>
			sei();
     a4c:	78 94       	sei
		}
		if(begin_cap_measurement && cap_charged){
     a4e:	80 91 81 01 	lds	r24, 0x0181
     a52:	90 91 82 01 	lds	r25, 0x0182
     a56:	89 2b       	or	r24, r25
     a58:	09 f4       	brne	.+2      	; 0xa5c <main+0xb0>
     a5a:	b7 cf       	rjmp	.-146    	; 0x9ca <main+0x1e>
     a5c:	80 91 83 01 	lds	r24, 0x0183
     a60:	90 91 84 01 	lds	r25, 0x0184
     a64:	89 2b       	or	r24, r25
     a66:	09 f4       	brne	.+2      	; 0xa6a <main+0xbe>
     a68:	b0 cf       	rjmp	.-160    	; 0x9ca <main+0x1e>
			cli();
     a6a:	f8 94       	cli
			// Revert the flags
			cap_discharged = FALSE;
     a6c:	10 92 79 01 	sts	0x0179, r1
     a70:	10 92 78 01 	sts	0x0178, r1
			begin_cap_measurement = FALSE;
     a74:	10 92 82 01 	sts	0x0182, r1
     a78:	10 92 81 01 	sts	0x0181, r1
			cap_charged = FALSE;
     a7c:	10 92 84 01 	sts	0x0184, r1
     a80:	10 92 83 01 	sts	0x0183, r1
			
			// Turn off analog capture register
			ACSR &= ~ANALOG_COMPARATOR_INPUT_CAPTURE_ENABLE;
     a84:	80 b7       	in	r24, 0x30	; 48
     a86:	8b 7f       	andi	r24, 0xFB	; 251
     a88:	80 bf       	out	0x30, r24	; 48
			TCCR1B &= ~INPUT_CAPTURE_EDGE_SELECT;
     a8a:	80 91 81 00 	lds	r24, 0x0081
     a8e:	8f 7b       	andi	r24, 0xBF	; 191
     a90:	80 93 81 00 	sts	0x0081, r24
			// Calculate the capacitance with the time elapsed. 
			// V(t) = Vo(1 - exp(-t/(R2*C))) becomes
			// C = -t / (R2 * ln(.5)) to find out when V(t) = .5 * Vo (R3 = R4)
			// (Due to ln(.5) being negative, the negative on the t is canceled out)
			// constant = time_per_cycle / (R2 * ln(.5)
			capacitance = (charge_cycles - 125) * constant;
     a94:	60 91 76 01 	lds	r22, 0x0176
     a98:	70 91 77 01 	lds	r23, 0x0177
     a9c:	6d 57       	subi	r22, 0x7D	; 125
     a9e:	71 09       	sbc	r23, r1
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 65 05 	call	0xaca	; 0xaca <__floatunsisf>
     aa8:	23 e6       	ldi	r18, 0x63	; 99
     aaa:	3b eb       	ldi	r19, 0xBB	; 187
     aac:	43 e1       	ldi	r20, 0x13	; 19
     aae:	5c e3       	ldi	r21, 0x3C	; 60
     ab0:	0e 94 a2 05 	call	0xb44	; 0xb44 <__mulsf3>
     ab4:	ab 01       	movw	r20, r22
     ab6:	bc 01       	movw	r22, r24
     ab8:	40 93 7a 01 	sts	0x017A, r20
     abc:	50 93 7b 01 	sts	0x017B, r21
     ac0:	60 93 7c 01 	sts	0x017C, r22
     ac4:	70 93 7d 01 	sts	0x017D, r23
     ac8:	80 cf       	rjmp	.-256    	; 0x9ca <main+0x1e>

00000aca <__floatunsisf>:
     aca:	e8 94       	clt
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__floatsisf+0x12>

00000ace <__floatsisf>:
     ace:	97 fb       	bst	r25, 7
     ad0:	3e f4       	brtc	.+14     	; 0xae0 <__floatsisf+0x12>
     ad2:	90 95       	com	r25
     ad4:	80 95       	com	r24
     ad6:	70 95       	com	r23
     ad8:	61 95       	neg	r22
     ada:	7f 4f       	sbci	r23, 0xFF	; 255
     adc:	8f 4f       	sbci	r24, 0xFF	; 255
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	99 23       	and	r25, r25
     ae2:	a9 f0       	breq	.+42     	; 0xb0e <__floatsisf+0x40>
     ae4:	f9 2f       	mov	r31, r25
     ae6:	96 e9       	ldi	r25, 0x96	; 150
     ae8:	bb 27       	eor	r27, r27
     aea:	93 95       	inc	r25
     aec:	f6 95       	lsr	r31
     aee:	87 95       	ror	r24
     af0:	77 95       	ror	r23
     af2:	67 95       	ror	r22
     af4:	b7 95       	ror	r27
     af6:	f1 11       	cpse	r31, r1
     af8:	f8 cf       	rjmp	.-16     	; 0xaea <__floatsisf+0x1c>
     afa:	fa f4       	brpl	.+62     	; 0xb3a <__floatsisf+0x6c>
     afc:	bb 0f       	add	r27, r27
     afe:	11 f4       	brne	.+4      	; 0xb04 <__floatsisf+0x36>
     b00:	60 ff       	sbrs	r22, 0
     b02:	1b c0       	rjmp	.+54     	; 0xb3a <__floatsisf+0x6c>
     b04:	6f 5f       	subi	r22, 0xFF	; 255
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	8f 4f       	sbci	r24, 0xFF	; 255
     b0a:	9f 4f       	sbci	r25, 0xFF	; 255
     b0c:	16 c0       	rjmp	.+44     	; 0xb3a <__floatsisf+0x6c>
     b0e:	88 23       	and	r24, r24
     b10:	11 f0       	breq	.+4      	; 0xb16 <__floatsisf+0x48>
     b12:	96 e9       	ldi	r25, 0x96	; 150
     b14:	11 c0       	rjmp	.+34     	; 0xb38 <__floatsisf+0x6a>
     b16:	77 23       	and	r23, r23
     b18:	21 f0       	breq	.+8      	; 0xb22 <__floatsisf+0x54>
     b1a:	9e e8       	ldi	r25, 0x8E	; 142
     b1c:	87 2f       	mov	r24, r23
     b1e:	76 2f       	mov	r23, r22
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__floatsisf+0x5e>
     b22:	66 23       	and	r22, r22
     b24:	71 f0       	breq	.+28     	; 0xb42 <__floatsisf+0x74>
     b26:	96 e8       	ldi	r25, 0x86	; 134
     b28:	86 2f       	mov	r24, r22
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	2a f0       	brmi	.+10     	; 0xb3a <__floatsisf+0x6c>
     b30:	9a 95       	dec	r25
     b32:	66 0f       	add	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	88 1f       	adc	r24, r24
     b38:	da f7       	brpl	.-10     	; 0xb30 <__floatsisf+0x62>
     b3a:	88 0f       	add	r24, r24
     b3c:	96 95       	lsr	r25
     b3e:	87 95       	ror	r24
     b40:	97 f9       	bld	r25, 7
     b42:	08 95       	ret

00000b44 <__mulsf3>:
     b44:	0b d0       	rcall	.+22     	; 0xb5c <__mulsf3x>
     b46:	78 c0       	rjmp	.+240    	; 0xc38 <__fp_round>
     b48:	69 d0       	rcall	.+210    	; 0xc1c <__fp_pscA>
     b4a:	28 f0       	brcs	.+10     	; 0xb56 <__mulsf3+0x12>
     b4c:	6e d0       	rcall	.+220    	; 0xc2a <__fp_pscB>
     b4e:	18 f0       	brcs	.+6      	; 0xb56 <__mulsf3+0x12>
     b50:	95 23       	and	r25, r21
     b52:	09 f0       	breq	.+2      	; 0xb56 <__mulsf3+0x12>
     b54:	5a c0       	rjmp	.+180    	; 0xc0a <__fp_inf>
     b56:	5f c0       	rjmp	.+190    	; 0xc16 <__fp_nan>
     b58:	11 24       	eor	r1, r1
     b5a:	a2 c0       	rjmp	.+324    	; 0xca0 <__fp_szero>

00000b5c <__mulsf3x>:
     b5c:	7e d0       	rcall	.+252    	; 0xc5a <__fp_split3>
     b5e:	a0 f3       	brcs	.-24     	; 0xb48 <__mulsf3+0x4>

00000b60 <__mulsf3_pse>:
     b60:	95 9f       	mul	r25, r21
     b62:	d1 f3       	breq	.-12     	; 0xb58 <__mulsf3+0x14>
     b64:	95 0f       	add	r25, r21
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	55 1f       	adc	r21, r21
     b6a:	62 9f       	mul	r22, r18
     b6c:	f0 01       	movw	r30, r0
     b6e:	72 9f       	mul	r23, r18
     b70:	bb 27       	eor	r27, r27
     b72:	f0 0d       	add	r31, r0
     b74:	b1 1d       	adc	r27, r1
     b76:	63 9f       	mul	r22, r19
     b78:	aa 27       	eor	r26, r26
     b7a:	f0 0d       	add	r31, r0
     b7c:	b1 1d       	adc	r27, r1
     b7e:	aa 1f       	adc	r26, r26
     b80:	64 9f       	mul	r22, r20
     b82:	66 27       	eor	r22, r22
     b84:	b0 0d       	add	r27, r0
     b86:	a1 1d       	adc	r26, r1
     b88:	66 1f       	adc	r22, r22
     b8a:	82 9f       	mul	r24, r18
     b8c:	22 27       	eor	r18, r18
     b8e:	b0 0d       	add	r27, r0
     b90:	a1 1d       	adc	r26, r1
     b92:	62 1f       	adc	r22, r18
     b94:	73 9f       	mul	r23, r19
     b96:	b0 0d       	add	r27, r0
     b98:	a1 1d       	adc	r26, r1
     b9a:	62 1f       	adc	r22, r18
     b9c:	83 9f       	mul	r24, r19
     b9e:	a0 0d       	add	r26, r0
     ba0:	61 1d       	adc	r22, r1
     ba2:	22 1f       	adc	r18, r18
     ba4:	74 9f       	mul	r23, r20
     ba6:	33 27       	eor	r19, r19
     ba8:	a0 0d       	add	r26, r0
     baa:	61 1d       	adc	r22, r1
     bac:	23 1f       	adc	r18, r19
     bae:	84 9f       	mul	r24, r20
     bb0:	60 0d       	add	r22, r0
     bb2:	21 1d       	adc	r18, r1
     bb4:	82 2f       	mov	r24, r18
     bb6:	76 2f       	mov	r23, r22
     bb8:	6a 2f       	mov	r22, r26
     bba:	11 24       	eor	r1, r1
     bbc:	9f 57       	subi	r25, 0x7F	; 127
     bbe:	50 40       	sbci	r21, 0x00	; 0
     bc0:	8a f0       	brmi	.+34     	; 0xbe4 <__mulsf3_pse+0x84>
     bc2:	e1 f0       	breq	.+56     	; 0xbfc <__mulsf3_pse+0x9c>
     bc4:	88 23       	and	r24, r24
     bc6:	4a f0       	brmi	.+18     	; 0xbda <__mulsf3_pse+0x7a>
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	bb 1f       	adc	r27, r27
     bce:	66 1f       	adc	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	88 1f       	adc	r24, r24
     bd4:	91 50       	subi	r25, 0x01	; 1
     bd6:	50 40       	sbci	r21, 0x00	; 0
     bd8:	a9 f7       	brne	.-22     	; 0xbc4 <__mulsf3_pse+0x64>
     bda:	9e 3f       	cpi	r25, 0xFE	; 254
     bdc:	51 05       	cpc	r21, r1
     bde:	70 f0       	brcs	.+28     	; 0xbfc <__mulsf3_pse+0x9c>
     be0:	14 c0       	rjmp	.+40     	; 0xc0a <__fp_inf>
     be2:	5e c0       	rjmp	.+188    	; 0xca0 <__fp_szero>
     be4:	5f 3f       	cpi	r21, 0xFF	; 255
     be6:	ec f3       	brlt	.-6      	; 0xbe2 <__mulsf3_pse+0x82>
     be8:	98 3e       	cpi	r25, 0xE8	; 232
     bea:	dc f3       	brlt	.-10     	; 0xbe2 <__mulsf3_pse+0x82>
     bec:	86 95       	lsr	r24
     bee:	77 95       	ror	r23
     bf0:	67 95       	ror	r22
     bf2:	b7 95       	ror	r27
     bf4:	f7 95       	ror	r31
     bf6:	e7 95       	ror	r30
     bf8:	9f 5f       	subi	r25, 0xFF	; 255
     bfa:	c1 f7       	brne	.-16     	; 0xbec <__mulsf3_pse+0x8c>
     bfc:	fe 2b       	or	r31, r30
     bfe:	88 0f       	add	r24, r24
     c00:	91 1d       	adc	r25, r1
     c02:	96 95       	lsr	r25
     c04:	87 95       	ror	r24
     c06:	97 f9       	bld	r25, 7
     c08:	08 95       	ret

00000c0a <__fp_inf>:
     c0a:	97 f9       	bld	r25, 7
     c0c:	9f 67       	ori	r25, 0x7F	; 127
     c0e:	80 e8       	ldi	r24, 0x80	; 128
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	08 95       	ret

00000c16 <__fp_nan>:
     c16:	9f ef       	ldi	r25, 0xFF	; 255
     c18:	80 ec       	ldi	r24, 0xC0	; 192
     c1a:	08 95       	ret

00000c1c <__fp_pscA>:
     c1c:	00 24       	eor	r0, r0
     c1e:	0a 94       	dec	r0
     c20:	16 16       	cp	r1, r22
     c22:	17 06       	cpc	r1, r23
     c24:	18 06       	cpc	r1, r24
     c26:	09 06       	cpc	r0, r25
     c28:	08 95       	ret

00000c2a <__fp_pscB>:
     c2a:	00 24       	eor	r0, r0
     c2c:	0a 94       	dec	r0
     c2e:	12 16       	cp	r1, r18
     c30:	13 06       	cpc	r1, r19
     c32:	14 06       	cpc	r1, r20
     c34:	05 06       	cpc	r0, r21
     c36:	08 95       	ret

00000c38 <__fp_round>:
     c38:	09 2e       	mov	r0, r25
     c3a:	03 94       	inc	r0
     c3c:	00 0c       	add	r0, r0
     c3e:	11 f4       	brne	.+4      	; 0xc44 <__fp_round+0xc>
     c40:	88 23       	and	r24, r24
     c42:	52 f0       	brmi	.+20     	; 0xc58 <__fp_round+0x20>
     c44:	bb 0f       	add	r27, r27
     c46:	40 f4       	brcc	.+16     	; 0xc58 <__fp_round+0x20>
     c48:	bf 2b       	or	r27, r31
     c4a:	11 f4       	brne	.+4      	; 0xc50 <__fp_round+0x18>
     c4c:	60 ff       	sbrs	r22, 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__fp_round+0x20>
     c50:	6f 5f       	subi	r22, 0xFF	; 255
     c52:	7f 4f       	sbci	r23, 0xFF	; 255
     c54:	8f 4f       	sbci	r24, 0xFF	; 255
     c56:	9f 4f       	sbci	r25, 0xFF	; 255
     c58:	08 95       	ret

00000c5a <__fp_split3>:
     c5a:	57 fd       	sbrc	r21, 7
     c5c:	90 58       	subi	r25, 0x80	; 128
     c5e:	44 0f       	add	r20, r20
     c60:	55 1f       	adc	r21, r21
     c62:	59 f0       	breq	.+22     	; 0xc7a <__fp_splitA+0x10>
     c64:	5f 3f       	cpi	r21, 0xFF	; 255
     c66:	71 f0       	breq	.+28     	; 0xc84 <__fp_splitA+0x1a>
     c68:	47 95       	ror	r20

00000c6a <__fp_splitA>:
     c6a:	88 0f       	add	r24, r24
     c6c:	97 fb       	bst	r25, 7
     c6e:	99 1f       	adc	r25, r25
     c70:	61 f0       	breq	.+24     	; 0xc8a <__fp_splitA+0x20>
     c72:	9f 3f       	cpi	r25, 0xFF	; 255
     c74:	79 f0       	breq	.+30     	; 0xc94 <__fp_splitA+0x2a>
     c76:	87 95       	ror	r24
     c78:	08 95       	ret
     c7a:	12 16       	cp	r1, r18
     c7c:	13 06       	cpc	r1, r19
     c7e:	14 06       	cpc	r1, r20
     c80:	55 1f       	adc	r21, r21
     c82:	f2 cf       	rjmp	.-28     	; 0xc68 <__fp_split3+0xe>
     c84:	46 95       	lsr	r20
     c86:	f1 df       	rcall	.-30     	; 0xc6a <__fp_splitA>
     c88:	08 c0       	rjmp	.+16     	; 0xc9a <__fp_splitA+0x30>
     c8a:	16 16       	cp	r1, r22
     c8c:	17 06       	cpc	r1, r23
     c8e:	18 06       	cpc	r1, r24
     c90:	99 1f       	adc	r25, r25
     c92:	f1 cf       	rjmp	.-30     	; 0xc76 <__fp_splitA+0xc>
     c94:	86 95       	lsr	r24
     c96:	71 05       	cpc	r23, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	08 94       	sec
     c9c:	08 95       	ret

00000c9e <__fp_zero>:
     c9e:	e8 94       	clt

00000ca0 <__fp_szero>:
     ca0:	bb 27       	eor	r27, r27
     ca2:	66 27       	eor	r22, r22
     ca4:	77 27       	eor	r23, r23
     ca6:	cb 01       	movw	r24, r22
     ca8:	97 f9       	bld	r25, 7
     caa:	08 95       	ret

00000cac <vfprintf>:
     cac:	2f 92       	push	r2
     cae:	3f 92       	push	r3
     cb0:	4f 92       	push	r4
     cb2:	5f 92       	push	r5
     cb4:	6f 92       	push	r6
     cb6:	7f 92       	push	r7
     cb8:	8f 92       	push	r8
     cba:	9f 92       	push	r9
     cbc:	af 92       	push	r10
     cbe:	bf 92       	push	r11
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	62 97       	sbiw	r28, 0x12	; 18
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	7c 01       	movw	r14, r24
     ce2:	1b 01       	movw	r2, r22
     ce4:	6a 01       	movw	r12, r20
     ce6:	fc 01       	movw	r30, r24
     ce8:	17 82       	std	Z+7, r1	; 0x07
     cea:	16 82       	std	Z+6, r1	; 0x06
     cec:	83 81       	ldd	r24, Z+3	; 0x03
     cee:	81 fd       	sbrc	r24, 1
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <vfprintf+0x4c>
     cf2:	6b c3       	rjmp	.+1750   	; 0x13ca <vfprintf+0x71e>
     cf4:	65 01       	movw	r12, r10
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <vfprintf+0x56>
     cf8:	88 24       	eor	r8, r8
     cfa:	83 94       	inc	r8
     cfc:	91 2c       	mov	r9, r1
     cfe:	8c 0e       	add	r8, r28
     d00:	9d 1e       	adc	r9, r29
     d02:	f7 01       	movw	r30, r14
     d04:	93 81       	ldd	r25, Z+3	; 0x03
     d06:	f1 01       	movw	r30, r2
     d08:	93 fd       	sbrc	r25, 3
     d0a:	85 91       	lpm	r24, Z+
     d0c:	93 ff       	sbrs	r25, 3
     d0e:	81 91       	ld	r24, Z+
     d10:	1f 01       	movw	r2, r30
     d12:	88 23       	and	r24, r24
     d14:	09 f4       	brne	.+2      	; 0xd18 <vfprintf+0x6c>
     d16:	55 c3       	rjmp	.+1706   	; 0x13c2 <vfprintf+0x716>
     d18:	85 32       	cpi	r24, 0x25	; 37
     d1a:	39 f4       	brne	.+14     	; 0xd2a <vfprintf+0x7e>
     d1c:	93 fd       	sbrc	r25, 3
     d1e:	85 91       	lpm	r24, Z+
     d20:	93 ff       	sbrs	r25, 3
     d22:	81 91       	ld	r24, Z+
     d24:	1f 01       	movw	r2, r30
     d26:	85 32       	cpi	r24, 0x25	; 37
     d28:	31 f4       	brne	.+12     	; 0xd36 <vfprintf+0x8a>
     d2a:	b7 01       	movw	r22, r14
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
     d32:	56 01       	movw	r10, r12
     d34:	df cf       	rjmp	.-66     	; 0xcf4 <vfprintf+0x48>
     d36:	71 2c       	mov	r7, r1
     d38:	61 2c       	mov	r6, r1
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	20 32       	cpi	r18, 0x20	; 32
     d3e:	a8 f4       	brcc	.+42     	; 0xd6a <vfprintf+0xbe>
     d40:	8b 32       	cpi	r24, 0x2B	; 43
     d42:	61 f0       	breq	.+24     	; 0xd5c <vfprintf+0xb0>
     d44:	28 f4       	brcc	.+10     	; 0xd50 <vfprintf+0xa4>
     d46:	80 32       	cpi	r24, 0x20	; 32
     d48:	51 f0       	breq	.+20     	; 0xd5e <vfprintf+0xb2>
     d4a:	83 32       	cpi	r24, 0x23	; 35
     d4c:	71 f4       	brne	.+28     	; 0xd6a <vfprintf+0xbe>
     d4e:	0b c0       	rjmp	.+22     	; 0xd66 <vfprintf+0xba>
     d50:	8d 32       	cpi	r24, 0x2D	; 45
     d52:	39 f0       	breq	.+14     	; 0xd62 <vfprintf+0xb6>
     d54:	80 33       	cpi	r24, 0x30	; 48
     d56:	49 f4       	brne	.+18     	; 0xd6a <vfprintf+0xbe>
     d58:	21 60       	ori	r18, 0x01	; 1
     d5a:	28 c0       	rjmp	.+80     	; 0xdac <vfprintf+0x100>
     d5c:	22 60       	ori	r18, 0x02	; 2
     d5e:	24 60       	ori	r18, 0x04	; 4
     d60:	25 c0       	rjmp	.+74     	; 0xdac <vfprintf+0x100>
     d62:	28 60       	ori	r18, 0x08	; 8
     d64:	23 c0       	rjmp	.+70     	; 0xdac <vfprintf+0x100>
     d66:	20 61       	ori	r18, 0x10	; 16
     d68:	21 c0       	rjmp	.+66     	; 0xdac <vfprintf+0x100>
     d6a:	27 fd       	sbrc	r18, 7
     d6c:	27 c0       	rjmp	.+78     	; 0xdbc <vfprintf+0x110>
     d6e:	38 2f       	mov	r19, r24
     d70:	30 53       	subi	r19, 0x30	; 48
     d72:	3a 30       	cpi	r19, 0x0A	; 10
     d74:	78 f4       	brcc	.+30     	; 0xd94 <vfprintf+0xe8>
     d76:	26 ff       	sbrs	r18, 6
     d78:	06 c0       	rjmp	.+12     	; 0xd86 <vfprintf+0xda>
     d7a:	fa e0       	ldi	r31, 0x0A	; 10
     d7c:	7f 9e       	mul	r7, r31
     d7e:	30 0d       	add	r19, r0
     d80:	11 24       	eor	r1, r1
     d82:	73 2e       	mov	r7, r19
     d84:	13 c0       	rjmp	.+38     	; 0xdac <vfprintf+0x100>
     d86:	4a e0       	ldi	r20, 0x0A	; 10
     d88:	64 9e       	mul	r6, r20
     d8a:	30 0d       	add	r19, r0
     d8c:	11 24       	eor	r1, r1
     d8e:	63 2e       	mov	r6, r19
     d90:	20 62       	ori	r18, 0x20	; 32
     d92:	0c c0       	rjmp	.+24     	; 0xdac <vfprintf+0x100>
     d94:	8e 32       	cpi	r24, 0x2E	; 46
     d96:	21 f4       	brne	.+8      	; 0xda0 <vfprintf+0xf4>
     d98:	26 fd       	sbrc	r18, 6
     d9a:	13 c3       	rjmp	.+1574   	; 0x13c2 <vfprintf+0x716>
     d9c:	20 64       	ori	r18, 0x40	; 64
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <vfprintf+0x100>
     da0:	8c 36       	cpi	r24, 0x6C	; 108
     da2:	11 f4       	brne	.+4      	; 0xda8 <vfprintf+0xfc>
     da4:	20 68       	ori	r18, 0x80	; 128
     da6:	02 c0       	rjmp	.+4      	; 0xdac <vfprintf+0x100>
     da8:	88 36       	cpi	r24, 0x68	; 104
     daa:	41 f4       	brne	.+16     	; 0xdbc <vfprintf+0x110>
     dac:	f1 01       	movw	r30, r2
     dae:	93 fd       	sbrc	r25, 3
     db0:	85 91       	lpm	r24, Z+
     db2:	93 ff       	sbrs	r25, 3
     db4:	81 91       	ld	r24, Z+
     db6:	1f 01       	movw	r2, r30
     db8:	81 11       	cpse	r24, r1
     dba:	c0 cf       	rjmp	.-128    	; 0xd3c <vfprintf+0x90>
     dbc:	98 2f       	mov	r25, r24
     dbe:	95 54       	subi	r25, 0x45	; 69
     dc0:	93 30       	cpi	r25, 0x03	; 3
     dc2:	18 f4       	brcc	.+6      	; 0xdca <vfprintf+0x11e>
     dc4:	20 61       	ori	r18, 0x10	; 16
     dc6:	80 5e       	subi	r24, 0xE0	; 224
     dc8:	06 c0       	rjmp	.+12     	; 0xdd6 <vfprintf+0x12a>
     dca:	98 2f       	mov	r25, r24
     dcc:	95 56       	subi	r25, 0x65	; 101
     dce:	93 30       	cpi	r25, 0x03	; 3
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <vfprintf+0x128>
     dd2:	a4 c1       	rjmp	.+840    	; 0x111c <vfprintf+0x470>
     dd4:	2f 7e       	andi	r18, 0xEF	; 239
     dd6:	26 fd       	sbrc	r18, 6
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <vfprintf+0x132>
     dda:	16 e0       	ldi	r17, 0x06	; 6
     ddc:	71 2e       	mov	r7, r17
     dde:	bf e3       	ldi	r27, 0x3F	; 63
     de0:	5b 2e       	mov	r5, r27
     de2:	52 22       	and	r5, r18
     de4:	85 36       	cpi	r24, 0x65	; 101
     de6:	19 f4       	brne	.+6      	; 0xdee <vfprintf+0x142>
     de8:	f0 e4       	ldi	r31, 0x40	; 64
     dea:	5f 2a       	or	r5, r31
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <vfprintf+0x150>
     dee:	86 36       	cpi	r24, 0x66	; 102
     df0:	19 f4       	brne	.+6      	; 0xdf8 <vfprintf+0x14c>
     df2:	40 e8       	ldi	r20, 0x80	; 128
     df4:	54 2a       	or	r5, r20
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <vfprintf+0x150>
     df8:	71 10       	cpse	r7, r1
     dfa:	7a 94       	dec	r7
     dfc:	57 fe       	sbrs	r5, 7
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <vfprintf+0x162>
     e00:	5b e3       	ldi	r21, 0x3B	; 59
     e02:	57 15       	cp	r21, r7
     e04:	48 f0       	brcs	.+18     	; 0xe18 <vfprintf+0x16c>
     e06:	47 2c       	mov	r4, r7
     e08:	43 94       	inc	r4
     e0a:	27 e0       	ldi	r18, 0x07	; 7
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <vfprintf+0x17c>
     e0e:	87 e0       	ldi	r24, 0x07	; 7
     e10:	87 15       	cp	r24, r7
     e12:	30 f0       	brcs	.+12     	; 0xe20 <vfprintf+0x174>
     e14:	27 2d       	mov	r18, r7
     e16:	07 c0       	rjmp	.+14     	; 0xe26 <vfprintf+0x17a>
     e18:	27 e0       	ldi	r18, 0x07	; 7
     e1a:	ac e3       	ldi	r26, 0x3C	; 60
     e1c:	4a 2e       	mov	r4, r26
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <vfprintf+0x17c>
     e20:	27 e0       	ldi	r18, 0x07	; 7
     e22:	f7 e0       	ldi	r31, 0x07	; 7
     e24:	7f 2e       	mov	r7, r31
     e26:	41 2c       	mov	r4, r1
     e28:	56 01       	movw	r10, r12
     e2a:	94 e0       	ldi	r25, 0x04	; 4
     e2c:	a9 0e       	add	r10, r25
     e2e:	b1 1c       	adc	r11, r1
     e30:	f6 01       	movw	r30, r12
     e32:	60 81       	ld	r22, Z
     e34:	71 81       	ldd	r23, Z+1	; 0x01
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	04 2d       	mov	r16, r4
     e3c:	a4 01       	movw	r20, r8
     e3e:	0e 94 29 0a 	call	0x1452	; 0x1452 <__ftoa_engine>
     e42:	8c 01       	movw	r16, r24
     e44:	49 81       	ldd	r20, Y+1	; 0x01
     e46:	4c 87       	std	Y+12, r20	; 0x0c
     e48:	40 ff       	sbrs	r20, 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x1a4>
     e4c:	43 ff       	sbrs	r20, 3
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <vfprintf+0x1b2>
     e50:	51 fc       	sbrc	r5, 1
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <vfprintf+0x1b8>
     e54:	52 fe       	sbrs	r5, 2
     e56:	09 c0       	rjmp	.+18     	; 0xe6a <vfprintf+0x1be>
     e58:	e0 e2       	ldi	r30, 0x20	; 32
     e5a:	de 2e       	mov	r13, r30
     e5c:	07 c0       	rjmp	.+14     	; 0xe6c <vfprintf+0x1c0>
     e5e:	7d e2       	ldi	r23, 0x2D	; 45
     e60:	d7 2e       	mov	r13, r23
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <vfprintf+0x1c0>
     e64:	6b e2       	ldi	r22, 0x2B	; 43
     e66:	d6 2e       	mov	r13, r22
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <vfprintf+0x1c0>
     e6a:	d1 2c       	mov	r13, r1
     e6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e6e:	8c 70       	andi	r24, 0x0C	; 12
     e70:	a1 f1       	breq	.+104    	; 0xeda <vfprintf+0x22e>
     e72:	dd 20       	and	r13, r13
     e74:	11 f0       	breq	.+4      	; 0xe7a <vfprintf+0x1ce>
     e76:	84 e0       	ldi	r24, 0x04	; 4
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <vfprintf+0x1d0>
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	86 15       	cp	r24, r6
     e7e:	10 f0       	brcs	.+4      	; 0xe84 <vfprintf+0x1d8>
     e80:	61 2c       	mov	r6, r1
     e82:	0b c0       	rjmp	.+22     	; 0xe9a <vfprintf+0x1ee>
     e84:	68 1a       	sub	r6, r24
     e86:	53 fc       	sbrc	r5, 3
     e88:	08 c0       	rjmp	.+16     	; 0xe9a <vfprintf+0x1ee>
     e8a:	b7 01       	movw	r22, r14
     e8c:	80 e2       	ldi	r24, 0x20	; 32
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
     e94:	6a 94       	dec	r6
     e96:	c9 f7       	brne	.-14     	; 0xe8a <vfprintf+0x1de>
     e98:	f3 cf       	rjmp	.-26     	; 0xe80 <vfprintf+0x1d4>
     e9a:	dd 20       	and	r13, r13
     e9c:	29 f0       	breq	.+10     	; 0xea8 <vfprintf+0x1fc>
     e9e:	b7 01       	movw	r22, r14
     ea0:	8d 2d       	mov	r24, r13
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
     ea8:	5c 85       	ldd	r21, Y+12	; 0x0c
     eaa:	53 fd       	sbrc	r21, 3
     eac:	03 c0       	rjmp	.+6      	; 0xeb4 <vfprintf+0x208>
     eae:	0f ee       	ldi	r16, 0xEF	; 239
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	0c c0       	rjmp	.+24     	; 0xecc <vfprintf+0x220>
     eb4:	0b ee       	ldi	r16, 0xEB	; 235
     eb6:	10 e0       	ldi	r17, 0x00	; 0
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <vfprintf+0x220>
     eba:	51 10       	cpse	r5, r1
     ebc:	80 52       	subi	r24, 0x20	; 32
     ebe:	b7 01       	movw	r22, r14
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
     ec6:	0f 5f       	subi	r16, 0xFF	; 255
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <vfprintf+0x224>
     ecc:	80 e1       	ldi	r24, 0x10	; 16
     ece:	58 22       	and	r5, r24
     ed0:	f8 01       	movw	r30, r16
     ed2:	84 91       	lpm	r24, Z
     ed4:	81 11       	cpse	r24, r1
     ed6:	f1 cf       	rjmp	.-30     	; 0xeba <vfprintf+0x20e>
     ed8:	71 c2       	rjmp	.+1250   	; 0x13bc <vfprintf+0x710>
     eda:	57 fe       	sbrs	r5, 7
     edc:	0e c0       	rjmp	.+28     	; 0xefa <vfprintf+0x24e>
     ede:	40 0e       	add	r4, r16
     ee0:	4c 85       	ldd	r20, Y+12	; 0x0c
     ee2:	44 ff       	sbrs	r20, 4
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <vfprintf+0x242>
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	81 33       	cpi	r24, 0x31	; 49
     eea:	09 f4       	brne	.+2      	; 0xeee <vfprintf+0x242>
     eec:	4a 94       	dec	r4
     eee:	14 14       	cp	r1, r4
     ef0:	4c f5       	brge	.+82     	; 0xf44 <vfprintf+0x298>
     ef2:	58 e0       	ldi	r21, 0x08	; 8
     ef4:	54 15       	cp	r21, r4
     ef6:	48 f1       	brcs	.+82     	; 0xf4a <vfprintf+0x29e>
     ef8:	2c c0       	rjmp	.+88     	; 0xf52 <vfprintf+0x2a6>
     efa:	56 fc       	sbrc	r5, 6
     efc:	2a c0       	rjmp	.+84     	; 0xf52 <vfprintf+0x2a6>
     efe:	87 2d       	mov	r24, r7
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	80 17       	cp	r24, r16
     f04:	91 07       	cpc	r25, r17
     f06:	44 f0       	brlt	.+16     	; 0xf18 <vfprintf+0x26c>
     f08:	0c 3f       	cpi	r16, 0xFC	; 252
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	18 07       	cpc	r17, r24
     f0e:	24 f0       	brlt	.+8      	; 0xf18 <vfprintf+0x26c>
     f10:	90 e8       	ldi	r25, 0x80	; 128
     f12:	59 2a       	or	r5, r25
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <vfprintf+0x26c>
     f16:	7a 94       	dec	r7
     f18:	77 20       	and	r7, r7
     f1a:	49 f0       	breq	.+18     	; 0xf2e <vfprintf+0x282>
     f1c:	e2 e0       	ldi	r30, 0x02	; 2
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	ec 0f       	add	r30, r28
     f22:	fd 1f       	adc	r31, r29
     f24:	e7 0d       	add	r30, r7
     f26:	f1 1d       	adc	r31, r1
     f28:	80 81       	ld	r24, Z
     f2a:	80 33       	cpi	r24, 0x30	; 48
     f2c:	a1 f3       	breq	.-24     	; 0xf16 <vfprintf+0x26a>
     f2e:	57 fe       	sbrs	r5, 7
     f30:	10 c0       	rjmp	.+32     	; 0xf52 <vfprintf+0x2a6>
     f32:	47 2c       	mov	r4, r7
     f34:	43 94       	inc	r4
     f36:	87 2d       	mov	r24, r7
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	08 17       	cp	r16, r24
     f3c:	19 07       	cpc	r17, r25
     f3e:	44 f4       	brge	.+16     	; 0xf50 <vfprintf+0x2a4>
     f40:	70 1a       	sub	r7, r16
     f42:	07 c0       	rjmp	.+14     	; 0xf52 <vfprintf+0x2a6>
     f44:	44 24       	eor	r4, r4
     f46:	43 94       	inc	r4
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <vfprintf+0x2a6>
     f4a:	58 e0       	ldi	r21, 0x08	; 8
     f4c:	45 2e       	mov	r4, r21
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <vfprintf+0x2a6>
     f50:	71 2c       	mov	r7, r1
     f52:	57 fe       	sbrs	r5, 7
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <vfprintf+0x2b8>
     f56:	10 16       	cp	r1, r16
     f58:	11 06       	cpc	r1, r17
     f5a:	3c f4       	brge	.+14     	; 0xf6a <vfprintf+0x2be>
     f5c:	98 01       	movw	r18, r16
     f5e:	2f 5f       	subi	r18, 0xFF	; 255
     f60:	3f 4f       	sbci	r19, 0xFF	; 255
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <vfprintf+0x2c2>
     f64:	25 e0       	ldi	r18, 0x05	; 5
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <vfprintf+0x2c2>
     f6a:	21 e0       	ldi	r18, 0x01	; 1
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	dd 20       	and	r13, r13
     f70:	11 f0       	breq	.+4      	; 0xf76 <vfprintf+0x2ca>
     f72:	2f 5f       	subi	r18, 0xFF	; 255
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	77 20       	and	r7, r7
     f78:	31 f0       	breq	.+12     	; 0xf86 <vfprintf+0x2da>
     f7a:	47 2d       	mov	r20, r7
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	4f 5f       	subi	r20, 0xFF	; 255
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	24 0f       	add	r18, r20
     f84:	35 1f       	adc	r19, r21
     f86:	46 2d       	mov	r20, r6
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	24 17       	cp	r18, r20
     f8c:	35 07       	cpc	r19, r21
     f8e:	14 f4       	brge	.+4      	; 0xf94 <vfprintf+0x2e8>
     f90:	62 1a       	sub	r6, r18
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <vfprintf+0x2ea>
     f94:	61 2c       	mov	r6, r1
     f96:	85 2d       	mov	r24, r5
     f98:	89 70       	andi	r24, 0x09	; 9
     f9a:	49 f4       	brne	.+18     	; 0xfae <vfprintf+0x302>
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <vfprintf+0x2fe>
     f9e:	b7 01       	movw	r22, r14
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
     fa8:	6a 94       	dec	r6
     faa:	61 10       	cpse	r6, r1
     fac:	f8 cf       	rjmp	.-16     	; 0xf9e <vfprintf+0x2f2>
     fae:	dd 20       	and	r13, r13
     fb0:	29 f0       	breq	.+10     	; 0xfbc <vfprintf+0x310>
     fb2:	b7 01       	movw	r22, r14
     fb4:	8d 2d       	mov	r24, r13
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
     fbc:	53 fc       	sbrc	r5, 3
     fbe:	09 c0       	rjmp	.+18     	; 0xfd2 <vfprintf+0x326>
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <vfprintf+0x322>
     fc2:	b7 01       	movw	r22, r14
     fc4:	80 e3       	ldi	r24, 0x30	; 48
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
     fcc:	6a 94       	dec	r6
     fce:	61 10       	cpse	r6, r1
     fd0:	f8 cf       	rjmp	.-16     	; 0xfc2 <vfprintf+0x316>
     fd2:	57 fe       	sbrs	r5, 7
     fd4:	56 c0       	rjmp	.+172    	; 0x1082 <vfprintf+0x3d6>
     fd6:	68 01       	movw	r12, r16
     fd8:	17 ff       	sbrs	r17, 7
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <vfprintf+0x334>
     fdc:	c1 2c       	mov	r12, r1
     fde:	d1 2c       	mov	r13, r1
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	a8 01       	movw	r20, r16
     fe6:	44 19       	sub	r20, r4
     fe8:	51 09       	sbc	r21, r1
     fea:	5e 87       	std	Y+14, r21	; 0x0e
     fec:	4d 87       	std	Y+13, r20	; 0x0d
     fee:	28 01       	movw	r4, r16
     ff0:	4c 18       	sub	r4, r12
     ff2:	5d 08       	sbc	r5, r13
     ff4:	48 0c       	add	r4, r8
     ff6:	59 1c       	adc	r5, r9
     ff8:	87 2d       	mov	r24, r7
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	44 27       	eor	r20, r20
     ffe:	55 27       	eor	r21, r21
    1000:	48 1b       	sub	r20, r24
    1002:	59 0b       	sbc	r21, r25
    1004:	58 8b       	std	Y+16, r21	; 0x10
    1006:	4f 87       	std	Y+15, r20	; 0x0f
    1008:	5f ef       	ldi	r21, 0xFF	; 255
    100a:	c5 16       	cp	r12, r21
    100c:	d5 06       	cpc	r13, r21
    100e:	49 f4       	brne	.+18     	; 0x1022 <vfprintf+0x376>
    1010:	b7 01       	movw	r22, r14
    1012:	8e e2       	ldi	r24, 0x2E	; 46
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	2a 8b       	std	Y+18, r18	; 0x12
    1018:	39 8b       	std	Y+17, r19	; 0x11
    101a:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    101e:	39 89       	ldd	r19, Y+17	; 0x11
    1020:	2a 89       	ldd	r18, Y+18	; 0x12
    1022:	0c 15       	cp	r16, r12
    1024:	1d 05       	cpc	r17, r13
    1026:	54 f0       	brlt	.+20     	; 0x103c <vfprintf+0x390>
    1028:	4d 85       	ldd	r20, Y+13	; 0x0d
    102a:	5e 85       	ldd	r21, Y+14	; 0x0e
    102c:	4c 15       	cp	r20, r12
    102e:	5d 05       	cpc	r21, r13
    1030:	2c f4       	brge	.+10     	; 0x103c <vfprintf+0x390>
    1032:	f2 01       	movw	r30, r4
    1034:	e2 0f       	add	r30, r18
    1036:	f3 1f       	adc	r31, r19
    1038:	81 81       	ldd	r24, Z+1	; 0x01
    103a:	01 c0       	rjmp	.+2      	; 0x103e <vfprintf+0x392>
    103c:	80 e3       	ldi	r24, 0x30	; 48
    103e:	51 e0       	ldi	r21, 0x01	; 1
    1040:	c5 1a       	sub	r12, r21
    1042:	d1 08       	sbc	r13, r1
    1044:	2f 5f       	subi	r18, 0xFF	; 255
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	4f 85       	ldd	r20, Y+15	; 0x0f
    104a:	58 89       	ldd	r21, Y+16	; 0x10
    104c:	c4 16       	cp	r12, r20
    104e:	d5 06       	cpc	r13, r21
    1050:	4c f0       	brlt	.+18     	; 0x1064 <vfprintf+0x3b8>
    1052:	b7 01       	movw	r22, r14
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	2a 8b       	std	Y+18, r18	; 0x12
    1058:	39 8b       	std	Y+17, r19	; 0x11
    105a:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    105e:	2a 89       	ldd	r18, Y+18	; 0x12
    1060:	39 89       	ldd	r19, Y+17	; 0x11
    1062:	d2 cf       	rjmp	.-92     	; 0x1008 <vfprintf+0x35c>
    1064:	c0 16       	cp	r12, r16
    1066:	d1 06       	cpc	r13, r17
    1068:	49 f4       	brne	.+18     	; 0x107c <vfprintf+0x3d0>
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	96 33       	cpi	r25, 0x36	; 54
    106e:	28 f4       	brcc	.+10     	; 0x107a <vfprintf+0x3ce>
    1070:	95 33       	cpi	r25, 0x35	; 53
    1072:	21 f4       	brne	.+8      	; 0x107c <vfprintf+0x3d0>
    1074:	5c 85       	ldd	r21, Y+12	; 0x0c
    1076:	54 fd       	sbrc	r21, 4
    1078:	01 c0       	rjmp	.+2      	; 0x107c <vfprintf+0x3d0>
    107a:	81 e3       	ldi	r24, 0x31	; 49
    107c:	b7 01       	movw	r22, r14
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	4a c0       	rjmp	.+148    	; 0x1116 <vfprintf+0x46a>
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	81 33       	cpi	r24, 0x31	; 49
    1086:	19 f0       	breq	.+6      	; 0x108e <vfprintf+0x3e2>
    1088:	4c 85       	ldd	r20, Y+12	; 0x0c
    108a:	4f 7e       	andi	r20, 0xEF	; 239
    108c:	4c 87       	std	Y+12, r20	; 0x0c
    108e:	b7 01       	movw	r22, r14
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    1096:	71 10       	cpse	r7, r1
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <vfprintf+0x3f8>
    109a:	54 fe       	sbrs	r5, 4
    109c:	16 c0       	rjmp	.+44     	; 0x10ca <vfprintf+0x41e>
    109e:	85 e4       	ldi	r24, 0x45	; 69
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	15 c0       	rjmp	.+42     	; 0x10ce <vfprintf+0x422>
    10a4:	b7 01       	movw	r22, r14
    10a6:	8e e2       	ldi	r24, 0x2E	; 46
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    10ae:	42 e0       	ldi	r20, 0x02	; 2
    10b0:	d4 2e       	mov	r13, r20
    10b2:	f4 01       	movw	r30, r8
    10b4:	ed 0d       	add	r30, r13
    10b6:	f1 1d       	adc	r31, r1
    10b8:	d3 94       	inc	r13
    10ba:	b7 01       	movw	r22, r14
    10bc:	80 81       	ld	r24, Z
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    10c4:	7a 94       	dec	r7
    10c6:	a9 f7       	brne	.-22     	; 0x10b2 <vfprintf+0x406>
    10c8:	e8 cf       	rjmp	.-48     	; 0x109a <vfprintf+0x3ee>
    10ca:	85 e6       	ldi	r24, 0x65	; 101
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	b7 01       	movw	r22, r14
    10d0:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    10d4:	17 fd       	sbrc	r17, 7
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <vfprintf+0x438>
    10d8:	01 15       	cp	r16, r1
    10da:	11 05       	cpc	r17, r1
    10dc:	41 f4       	brne	.+16     	; 0x10ee <vfprintf+0x442>
    10de:	5c 85       	ldd	r21, Y+12	; 0x0c
    10e0:	54 ff       	sbrs	r21, 4
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <vfprintf+0x442>
    10e4:	11 95       	neg	r17
    10e6:	01 95       	neg	r16
    10e8:	11 09       	sbc	r17, r1
    10ea:	8d e2       	ldi	r24, 0x2D	; 45
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <vfprintf+0x444>
    10ee:	8b e2       	ldi	r24, 0x2B	; 43
    10f0:	b7 01       	movw	r22, r14
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    10f8:	80 e3       	ldi	r24, 0x30	; 48
    10fa:	03 c0       	rjmp	.+6      	; 0x1102 <vfprintf+0x456>
    10fc:	8f 5f       	subi	r24, 0xFF	; 255
    10fe:	0a 50       	subi	r16, 0x0A	; 10
    1100:	11 09       	sbc	r17, r1
    1102:	0a 30       	cpi	r16, 0x0A	; 10
    1104:	11 05       	cpc	r17, r1
    1106:	d4 f7       	brge	.-12     	; 0x10fc <vfprintf+0x450>
    1108:	b7 01       	movw	r22, r14
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    1110:	b7 01       	movw	r22, r14
    1112:	c8 01       	movw	r24, r16
    1114:	c0 96       	adiw	r24, 0x30	; 48
    1116:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    111a:	50 c1       	rjmp	.+672    	; 0x13bc <vfprintf+0x710>
    111c:	83 36       	cpi	r24, 0x63	; 99
    111e:	31 f0       	breq	.+12     	; 0x112c <vfprintf+0x480>
    1120:	83 37       	cpi	r24, 0x73	; 115
    1122:	81 f0       	breq	.+32     	; 0x1144 <vfprintf+0x498>
    1124:	83 35       	cpi	r24, 0x53	; 83
    1126:	09 f0       	breq	.+2      	; 0x112a <vfprintf+0x47e>
    1128:	5e c0       	rjmp	.+188    	; 0x11e6 <vfprintf+0x53a>
    112a:	24 c0       	rjmp	.+72     	; 0x1174 <vfprintf+0x4c8>
    112c:	56 01       	movw	r10, r12
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	a8 0e       	add	r10, r24
    1132:	b1 1c       	adc	r11, r1
    1134:	f6 01       	movw	r30, r12
    1136:	80 81       	ld	r24, Z
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	cc 24       	eor	r12, r12
    113c:	c3 94       	inc	r12
    113e:	d1 2c       	mov	r13, r1
    1140:	84 01       	movw	r16, r8
    1142:	14 c0       	rjmp	.+40     	; 0x116c <vfprintf+0x4c0>
    1144:	56 01       	movw	r10, r12
    1146:	f2 e0       	ldi	r31, 0x02	; 2
    1148:	af 0e       	add	r10, r31
    114a:	b1 1c       	adc	r11, r1
    114c:	f6 01       	movw	r30, r12
    114e:	00 81       	ld	r16, Z
    1150:	11 81       	ldd	r17, Z+1	; 0x01
    1152:	26 ff       	sbrs	r18, 6
    1154:	03 c0       	rjmp	.+6      	; 0x115c <vfprintf+0x4b0>
    1156:	67 2d       	mov	r22, r7
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <vfprintf+0x4b4>
    115c:	6f ef       	ldi	r22, 0xFF	; 255
    115e:	7f ef       	ldi	r23, 0xFF	; 255
    1160:	c8 01       	movw	r24, r16
    1162:	2a 8b       	std	Y+18, r18	; 0x12
    1164:	0e 94 0c 0b 	call	0x1618	; 0x1618 <strnlen>
    1168:	6c 01       	movw	r12, r24
    116a:	2a 89       	ldd	r18, Y+18	; 0x12
    116c:	9f e7       	ldi	r25, 0x7F	; 127
    116e:	59 2e       	mov	r5, r25
    1170:	52 22       	and	r5, r18
    1172:	17 c0       	rjmp	.+46     	; 0x11a2 <vfprintf+0x4f6>
    1174:	56 01       	movw	r10, r12
    1176:	f2 e0       	ldi	r31, 0x02	; 2
    1178:	af 0e       	add	r10, r31
    117a:	b1 1c       	adc	r11, r1
    117c:	f6 01       	movw	r30, r12
    117e:	00 81       	ld	r16, Z
    1180:	11 81       	ldd	r17, Z+1	; 0x01
    1182:	26 ff       	sbrs	r18, 6
    1184:	03 c0       	rjmp	.+6      	; 0x118c <vfprintf+0x4e0>
    1186:	67 2d       	mov	r22, r7
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <vfprintf+0x4e4>
    118c:	6f ef       	ldi	r22, 0xFF	; 255
    118e:	7f ef       	ldi	r23, 0xFF	; 255
    1190:	c8 01       	movw	r24, r16
    1192:	2a 8b       	std	Y+18, r18	; 0x12
    1194:	0e 94 01 0b 	call	0x1602	; 0x1602 <strnlen_P>
    1198:	6c 01       	movw	r12, r24
    119a:	2a 89       	ldd	r18, Y+18	; 0x12
    119c:	80 e8       	ldi	r24, 0x80	; 128
    119e:	58 2e       	mov	r5, r24
    11a0:	52 2a       	or	r5, r18
    11a2:	53 fc       	sbrc	r5, 3
    11a4:	1c c0       	rjmp	.+56     	; 0x11de <vfprintf+0x532>
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <vfprintf+0x508>
    11a8:	b7 01       	movw	r22, r14
    11aa:	80 e2       	ldi	r24, 0x20	; 32
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    11b2:	6a 94       	dec	r6
    11b4:	86 2d       	mov	r24, r6
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	c8 16       	cp	r12, r24
    11ba:	d9 06       	cpc	r13, r25
    11bc:	a8 f3       	brcs	.-22     	; 0x11a8 <vfprintf+0x4fc>
    11be:	0f c0       	rjmp	.+30     	; 0x11de <vfprintf+0x532>
    11c0:	f8 01       	movw	r30, r16
    11c2:	57 fc       	sbrc	r5, 7
    11c4:	85 91       	lpm	r24, Z+
    11c6:	57 fe       	sbrs	r5, 7
    11c8:	81 91       	ld	r24, Z+
    11ca:	8f 01       	movw	r16, r30
    11cc:	b7 01       	movw	r22, r14
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    11d4:	61 10       	cpse	r6, r1
    11d6:	6a 94       	dec	r6
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	cf 1a       	sub	r12, r31
    11dc:	d1 08       	sbc	r13, r1
    11de:	c1 14       	cp	r12, r1
    11e0:	d1 04       	cpc	r13, r1
    11e2:	71 f7       	brne	.-36     	; 0x11c0 <vfprintf+0x514>
    11e4:	eb c0       	rjmp	.+470    	; 0x13bc <vfprintf+0x710>
    11e6:	84 36       	cpi	r24, 0x64	; 100
    11e8:	11 f0       	breq	.+4      	; 0x11ee <vfprintf+0x542>
    11ea:	89 36       	cpi	r24, 0x69	; 105
    11ec:	51 f5       	brne	.+84     	; 0x1242 <vfprintf+0x596>
    11ee:	56 01       	movw	r10, r12
    11f0:	27 ff       	sbrs	r18, 7
    11f2:	09 c0       	rjmp	.+18     	; 0x1206 <vfprintf+0x55a>
    11f4:	44 e0       	ldi	r20, 0x04	; 4
    11f6:	a4 0e       	add	r10, r20
    11f8:	b1 1c       	adc	r11, r1
    11fa:	f6 01       	movw	r30, r12
    11fc:	60 81       	ld	r22, Z
    11fe:	71 81       	ldd	r23, Z+1	; 0x01
    1200:	82 81       	ldd	r24, Z+2	; 0x02
    1202:	93 81       	ldd	r25, Z+3	; 0x03
    1204:	0a c0       	rjmp	.+20     	; 0x121a <vfprintf+0x56e>
    1206:	f2 e0       	ldi	r31, 0x02	; 2
    1208:	af 0e       	add	r10, r31
    120a:	b1 1c       	adc	r11, r1
    120c:	f6 01       	movw	r30, r12
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	88 27       	eor	r24, r24
    1214:	77 fd       	sbrc	r23, 7
    1216:	80 95       	com	r24
    1218:	98 2f       	mov	r25, r24
    121a:	12 2f       	mov	r17, r18
    121c:	1f 76       	andi	r17, 0x6F	; 111
    121e:	97 ff       	sbrs	r25, 7
    1220:	08 c0       	rjmp	.+16     	; 0x1232 <vfprintf+0x586>
    1222:	90 95       	com	r25
    1224:	80 95       	com	r24
    1226:	70 95       	com	r23
    1228:	61 95       	neg	r22
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	10 68       	ori	r17, 0x80	; 128
    1232:	2a e0       	ldi	r18, 0x0A	; 10
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	a4 01       	movw	r20, r8
    1238:	0e 94 9d 0b 	call	0x173a	; 0x173a <__ultoa_invert>
    123c:	d8 2e       	mov	r13, r24
    123e:	d8 18       	sub	r13, r8
    1240:	40 c0       	rjmp	.+128    	; 0x12c2 <vfprintf+0x616>
    1242:	12 2f       	mov	r17, r18
    1244:	85 37       	cpi	r24, 0x75	; 117
    1246:	21 f4       	brne	.+8      	; 0x1250 <vfprintf+0x5a4>
    1248:	1f 7e       	andi	r17, 0xEF	; 239
    124a:	2a e0       	ldi	r18, 0x0A	; 10
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	1f c0       	rjmp	.+62     	; 0x128e <vfprintf+0x5e2>
    1250:	19 7f       	andi	r17, 0xF9	; 249
    1252:	8f 36       	cpi	r24, 0x6F	; 111
    1254:	a1 f0       	breq	.+40     	; 0x127e <vfprintf+0x5d2>
    1256:	20 f4       	brcc	.+8      	; 0x1260 <vfprintf+0x5b4>
    1258:	88 35       	cpi	r24, 0x58	; 88
    125a:	09 f0       	breq	.+2      	; 0x125e <vfprintf+0x5b2>
    125c:	b2 c0       	rjmp	.+356    	; 0x13c2 <vfprintf+0x716>
    125e:	0b c0       	rjmp	.+22     	; 0x1276 <vfprintf+0x5ca>
    1260:	80 37       	cpi	r24, 0x70	; 112
    1262:	21 f0       	breq	.+8      	; 0x126c <vfprintf+0x5c0>
    1264:	88 37       	cpi	r24, 0x78	; 120
    1266:	09 f0       	breq	.+2      	; 0x126a <vfprintf+0x5be>
    1268:	ac c0       	rjmp	.+344    	; 0x13c2 <vfprintf+0x716>
    126a:	01 c0       	rjmp	.+2      	; 0x126e <vfprintf+0x5c2>
    126c:	10 61       	ori	r17, 0x10	; 16
    126e:	14 ff       	sbrs	r17, 4
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <vfprintf+0x5d8>
    1272:	14 60       	ori	r17, 0x04	; 4
    1274:	07 c0       	rjmp	.+14     	; 0x1284 <vfprintf+0x5d8>
    1276:	24 ff       	sbrs	r18, 4
    1278:	08 c0       	rjmp	.+16     	; 0x128a <vfprintf+0x5de>
    127a:	16 60       	ori	r17, 0x06	; 6
    127c:	06 c0       	rjmp	.+12     	; 0x128a <vfprintf+0x5de>
    127e:	28 e0       	ldi	r18, 0x08	; 8
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	05 c0       	rjmp	.+10     	; 0x128e <vfprintf+0x5e2>
    1284:	20 e1       	ldi	r18, 0x10	; 16
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	02 c0       	rjmp	.+4      	; 0x128e <vfprintf+0x5e2>
    128a:	20 e1       	ldi	r18, 0x10	; 16
    128c:	32 e0       	ldi	r19, 0x02	; 2
    128e:	56 01       	movw	r10, r12
    1290:	17 ff       	sbrs	r17, 7
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <vfprintf+0x5fa>
    1294:	f4 e0       	ldi	r31, 0x04	; 4
    1296:	af 0e       	add	r10, r31
    1298:	b1 1c       	adc	r11, r1
    129a:	f6 01       	movw	r30, r12
    129c:	60 81       	ld	r22, Z
    129e:	71 81       	ldd	r23, Z+1	; 0x01
    12a0:	82 81       	ldd	r24, Z+2	; 0x02
    12a2:	93 81       	ldd	r25, Z+3	; 0x03
    12a4:	08 c0       	rjmp	.+16     	; 0x12b6 <vfprintf+0x60a>
    12a6:	f2 e0       	ldi	r31, 0x02	; 2
    12a8:	af 0e       	add	r10, r31
    12aa:	b1 1c       	adc	r11, r1
    12ac:	f6 01       	movw	r30, r12
    12ae:	60 81       	ld	r22, Z
    12b0:	71 81       	ldd	r23, Z+1	; 0x01
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a4 01       	movw	r20, r8
    12b8:	0e 94 9d 0b 	call	0x173a	; 0x173a <__ultoa_invert>
    12bc:	d8 2e       	mov	r13, r24
    12be:	d8 18       	sub	r13, r8
    12c0:	1f 77       	andi	r17, 0x7F	; 127
    12c2:	16 ff       	sbrs	r17, 6
    12c4:	0b c0       	rjmp	.+22     	; 0x12dc <vfprintf+0x630>
    12c6:	21 2f       	mov	r18, r17
    12c8:	2e 7f       	andi	r18, 0xFE	; 254
    12ca:	d7 14       	cp	r13, r7
    12cc:	50 f4       	brcc	.+20     	; 0x12e2 <vfprintf+0x636>
    12ce:	14 ff       	sbrs	r17, 4
    12d0:	0a c0       	rjmp	.+20     	; 0x12e6 <vfprintf+0x63a>
    12d2:	12 fd       	sbrc	r17, 2
    12d4:	08 c0       	rjmp	.+16     	; 0x12e6 <vfprintf+0x63a>
    12d6:	21 2f       	mov	r18, r17
    12d8:	2e 7e       	andi	r18, 0xEE	; 238
    12da:	05 c0       	rjmp	.+10     	; 0x12e6 <vfprintf+0x63a>
    12dc:	0d 2d       	mov	r16, r13
    12de:	21 2f       	mov	r18, r17
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <vfprintf+0x63c>
    12e2:	0d 2d       	mov	r16, r13
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <vfprintf+0x63c>
    12e6:	07 2d       	mov	r16, r7
    12e8:	24 ff       	sbrs	r18, 4
    12ea:	0c c0       	rjmp	.+24     	; 0x1304 <vfprintf+0x658>
    12ec:	fe 01       	movw	r30, r28
    12ee:	ed 0d       	add	r30, r13
    12f0:	f1 1d       	adc	r31, r1
    12f2:	80 81       	ld	r24, Z
    12f4:	80 33       	cpi	r24, 0x30	; 48
    12f6:	11 f4       	brne	.+4      	; 0x12fc <vfprintf+0x650>
    12f8:	29 7e       	andi	r18, 0xE9	; 233
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <vfprintf+0x660>
    12fc:	22 ff       	sbrs	r18, 2
    12fe:	05 c0       	rjmp	.+10     	; 0x130a <vfprintf+0x65e>
    1300:	0e 5f       	subi	r16, 0xFE	; 254
    1302:	04 c0       	rjmp	.+8      	; 0x130c <vfprintf+0x660>
    1304:	82 2f       	mov	r24, r18
    1306:	86 78       	andi	r24, 0x86	; 134
    1308:	09 f0       	breq	.+2      	; 0x130c <vfprintf+0x660>
    130a:	0f 5f       	subi	r16, 0xFF	; 255
    130c:	23 fd       	sbrc	r18, 3
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <vfprintf+0x68c>
    1310:	20 ff       	sbrs	r18, 0
    1312:	0f c0       	rjmp	.+30     	; 0x1332 <vfprintf+0x686>
    1314:	7d 2c       	mov	r7, r13
    1316:	06 15       	cp	r16, r6
    1318:	60 f4       	brcc	.+24     	; 0x1332 <vfprintf+0x686>
    131a:	76 0c       	add	r7, r6
    131c:	70 1a       	sub	r7, r16
    131e:	06 2d       	mov	r16, r6
    1320:	08 c0       	rjmp	.+16     	; 0x1332 <vfprintf+0x686>
    1322:	b7 01       	movw	r22, r14
    1324:	80 e2       	ldi	r24, 0x20	; 32
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	2a 8b       	std	Y+18, r18	; 0x12
    132a:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    132e:	0f 5f       	subi	r16, 0xFF	; 255
    1330:	2a 89       	ldd	r18, Y+18	; 0x12
    1332:	06 15       	cp	r16, r6
    1334:	b0 f3       	brcs	.-20     	; 0x1322 <vfprintf+0x676>
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <vfprintf+0x694>
    1338:	06 15       	cp	r16, r6
    133a:	10 f4       	brcc	.+4      	; 0x1340 <vfprintf+0x694>
    133c:	60 1a       	sub	r6, r16
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <vfprintf+0x696>
    1340:	61 2c       	mov	r6, r1
    1342:	24 ff       	sbrs	r18, 4
    1344:	12 c0       	rjmp	.+36     	; 0x136a <vfprintf+0x6be>
    1346:	b7 01       	movw	r22, r14
    1348:	80 e3       	ldi	r24, 0x30	; 48
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	2a 8b       	std	Y+18, r18	; 0x12
    134e:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    1352:	2a 89       	ldd	r18, Y+18	; 0x12
    1354:	22 ff       	sbrs	r18, 2
    1356:	1e c0       	rjmp	.+60     	; 0x1394 <vfprintf+0x6e8>
    1358:	21 ff       	sbrs	r18, 1
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <vfprintf+0x6b6>
    135c:	88 e5       	ldi	r24, 0x58	; 88
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <vfprintf+0x6ba>
    1362:	88 e7       	ldi	r24, 0x78	; 120
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	b7 01       	movw	r22, r14
    1368:	0c c0       	rjmp	.+24     	; 0x1382 <vfprintf+0x6d6>
    136a:	82 2f       	mov	r24, r18
    136c:	86 78       	andi	r24, 0x86	; 134
    136e:	91 f0       	breq	.+36     	; 0x1394 <vfprintf+0x6e8>
    1370:	21 fd       	sbrc	r18, 1
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <vfprintf+0x6cc>
    1374:	80 e2       	ldi	r24, 0x20	; 32
    1376:	01 c0       	rjmp	.+2      	; 0x137a <vfprintf+0x6ce>
    1378:	8b e2       	ldi	r24, 0x2B	; 43
    137a:	27 fd       	sbrc	r18, 7
    137c:	8d e2       	ldi	r24, 0x2D	; 45
    137e:	b7 01       	movw	r22, r14
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <vfprintf+0x6e8>
    1388:	b7 01       	movw	r22, r14
    138a:	80 e3       	ldi	r24, 0x30	; 48
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    1392:	7a 94       	dec	r7
    1394:	d7 14       	cp	r13, r7
    1396:	c0 f3       	brcs	.-16     	; 0x1388 <vfprintf+0x6dc>
    1398:	da 94       	dec	r13
    139a:	f4 01       	movw	r30, r8
    139c:	ed 0d       	add	r30, r13
    139e:	f1 1d       	adc	r31, r1
    13a0:	b7 01       	movw	r22, r14
    13a2:	80 81       	ld	r24, Z
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    13aa:	d1 10       	cpse	r13, r1
    13ac:	f5 cf       	rjmp	.-22     	; 0x1398 <vfprintf+0x6ec>
    13ae:	06 c0       	rjmp	.+12     	; 0x13bc <vfprintf+0x710>
    13b0:	b7 01       	movw	r22, r14
    13b2:	80 e2       	ldi	r24, 0x20	; 32
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 17 0b 	call	0x162e	; 0x162e <fputc>
    13ba:	6a 94       	dec	r6
    13bc:	61 10       	cpse	r6, r1
    13be:	f8 cf       	rjmp	.-16     	; 0x13b0 <vfprintf+0x704>
    13c0:	99 cc       	rjmp	.-1742   	; 0xcf4 <vfprintf+0x48>
    13c2:	f7 01       	movw	r30, r14
    13c4:	26 81       	ldd	r18, Z+6	; 0x06
    13c6:	37 81       	ldd	r19, Z+7	; 0x07
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <vfprintf+0x722>
    13ca:	2f ef       	ldi	r18, 0xFF	; 255
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
    13ce:	c9 01       	movw	r24, r18
    13d0:	62 96       	adiw	r28, 0x12	; 18
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	bf 90       	pop	r11
    13ee:	af 90       	pop	r10
    13f0:	9f 90       	pop	r9
    13f2:	8f 90       	pop	r8
    13f4:	7f 90       	pop	r7
    13f6:	6f 90       	pop	r6
    13f8:	5f 90       	pop	r5
    13fa:	4f 90       	pop	r4
    13fc:	3f 90       	pop	r3
    13fe:	2f 90       	pop	r2
    1400:	08 95       	ret

00001402 <__udivmodhi4>:
    1402:	aa 1b       	sub	r26, r26
    1404:	bb 1b       	sub	r27, r27
    1406:	51 e1       	ldi	r21, 0x11	; 17
    1408:	07 c0       	rjmp	.+14     	; 0x1418 <__udivmodhi4_ep>

0000140a <__udivmodhi4_loop>:
    140a:	aa 1f       	adc	r26, r26
    140c:	bb 1f       	adc	r27, r27
    140e:	a6 17       	cp	r26, r22
    1410:	b7 07       	cpc	r27, r23
    1412:	10 f0       	brcs	.+4      	; 0x1418 <__udivmodhi4_ep>
    1414:	a6 1b       	sub	r26, r22
    1416:	b7 0b       	sbc	r27, r23

00001418 <__udivmodhi4_ep>:
    1418:	88 1f       	adc	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	5a 95       	dec	r21
    141e:	a9 f7       	brne	.-22     	; 0x140a <__udivmodhi4_loop>
    1420:	80 95       	com	r24
    1422:	90 95       	com	r25
    1424:	bc 01       	movw	r22, r24
    1426:	cd 01       	movw	r24, r26
    1428:	08 95       	ret

0000142a <__divmodhi4>:
    142a:	97 fb       	bst	r25, 7
    142c:	07 2e       	mov	r0, r23
    142e:	16 f4       	brtc	.+4      	; 0x1434 <__divmodhi4+0xa>
    1430:	00 94       	com	r0
    1432:	07 d0       	rcall	.+14     	; 0x1442 <__divmodhi4_neg1>
    1434:	77 fd       	sbrc	r23, 7
    1436:	09 d0       	rcall	.+18     	; 0x144a <__divmodhi4_neg2>
    1438:	0e 94 01 0a 	call	0x1402	; 0x1402 <__udivmodhi4>
    143c:	07 fc       	sbrc	r0, 7
    143e:	05 d0       	rcall	.+10     	; 0x144a <__divmodhi4_neg2>
    1440:	3e f4       	brtc	.+14     	; 0x1450 <__divmodhi4_exit>

00001442 <__divmodhi4_neg1>:
    1442:	90 95       	com	r25
    1444:	81 95       	neg	r24
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	08 95       	ret

0000144a <__divmodhi4_neg2>:
    144a:	70 95       	com	r23
    144c:	61 95       	neg	r22
    144e:	7f 4f       	sbci	r23, 0xFF	; 255

00001450 <__divmodhi4_exit>:
    1450:	08 95       	ret

00001452 <__ftoa_engine>:
    1452:	28 30       	cpi	r18, 0x08	; 8
    1454:	08 f0       	brcs	.+2      	; 0x1458 <__ftoa_engine+0x6>
    1456:	27 e0       	ldi	r18, 0x07	; 7
    1458:	33 27       	eor	r19, r19
    145a:	da 01       	movw	r26, r20
    145c:	99 0f       	add	r25, r25
    145e:	31 1d       	adc	r19, r1
    1460:	87 fd       	sbrc	r24, 7
    1462:	91 60       	ori	r25, 0x01	; 1
    1464:	00 96       	adiw	r24, 0x00	; 0
    1466:	61 05       	cpc	r22, r1
    1468:	71 05       	cpc	r23, r1
    146a:	39 f4       	brne	.+14     	; 0x147a <__ftoa_engine+0x28>
    146c:	32 60       	ori	r19, 0x02	; 2
    146e:	2e 5f       	subi	r18, 0xFE	; 254
    1470:	3d 93       	st	X+, r19
    1472:	30 e3       	ldi	r19, 0x30	; 48
    1474:	2a 95       	dec	r18
    1476:	e1 f7       	brne	.-8      	; 0x1470 <__ftoa_engine+0x1e>
    1478:	08 95       	ret
    147a:	9f 3f       	cpi	r25, 0xFF	; 255
    147c:	30 f0       	brcs	.+12     	; 0x148a <__ftoa_engine+0x38>
    147e:	80 38       	cpi	r24, 0x80	; 128
    1480:	71 05       	cpc	r23, r1
    1482:	61 05       	cpc	r22, r1
    1484:	09 f0       	breq	.+2      	; 0x1488 <__ftoa_engine+0x36>
    1486:	3c 5f       	subi	r19, 0xFC	; 252
    1488:	3c 5f       	subi	r19, 0xFC	; 252
    148a:	3d 93       	st	X+, r19
    148c:	91 30       	cpi	r25, 0x01	; 1
    148e:	08 f0       	brcs	.+2      	; 0x1492 <__ftoa_engine+0x40>
    1490:	80 68       	ori	r24, 0x80	; 128
    1492:	91 1d       	adc	r25, r1
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	1f 93       	push	r17
    149a:	0f 93       	push	r16
    149c:	ff 92       	push	r15
    149e:	ef 92       	push	r14
    14a0:	19 2f       	mov	r17, r25
    14a2:	98 7f       	andi	r25, 0xF8	; 248
    14a4:	96 95       	lsr	r25
    14a6:	e9 2f       	mov	r30, r25
    14a8:	96 95       	lsr	r25
    14aa:	96 95       	lsr	r25
    14ac:	e9 0f       	add	r30, r25
    14ae:	ff 27       	eor	r31, r31
    14b0:	e3 5b       	subi	r30, 0xB3	; 179
    14b2:	fe 4f       	sbci	r31, 0xFE	; 254
    14b4:	99 27       	eor	r25, r25
    14b6:	33 27       	eor	r19, r19
    14b8:	ee 24       	eor	r14, r14
    14ba:	ff 24       	eor	r15, r15
    14bc:	a7 01       	movw	r20, r14
    14be:	e7 01       	movw	r28, r14
    14c0:	05 90       	lpm	r0, Z+
    14c2:	08 94       	sec
    14c4:	07 94       	ror	r0
    14c6:	28 f4       	brcc	.+10     	; 0x14d2 <__ftoa_engine+0x80>
    14c8:	36 0f       	add	r19, r22
    14ca:	e7 1e       	adc	r14, r23
    14cc:	f8 1e       	adc	r15, r24
    14ce:	49 1f       	adc	r20, r25
    14d0:	51 1d       	adc	r21, r1
    14d2:	66 0f       	add	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	06 94       	lsr	r0
    14dc:	a1 f7       	brne	.-24     	; 0x14c6 <__ftoa_engine+0x74>
    14de:	05 90       	lpm	r0, Z+
    14e0:	07 94       	ror	r0
    14e2:	28 f4       	brcc	.+10     	; 0x14ee <__ftoa_engine+0x9c>
    14e4:	e7 0e       	add	r14, r23
    14e6:	f8 1e       	adc	r15, r24
    14e8:	49 1f       	adc	r20, r25
    14ea:	56 1f       	adc	r21, r22
    14ec:	c1 1d       	adc	r28, r1
    14ee:	77 0f       	add	r23, r23
    14f0:	88 1f       	adc	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	66 1f       	adc	r22, r22
    14f6:	06 94       	lsr	r0
    14f8:	a1 f7       	brne	.-24     	; 0x14e2 <__ftoa_engine+0x90>
    14fa:	05 90       	lpm	r0, Z+
    14fc:	07 94       	ror	r0
    14fe:	28 f4       	brcc	.+10     	; 0x150a <__ftoa_engine+0xb8>
    1500:	f8 0e       	add	r15, r24
    1502:	49 1f       	adc	r20, r25
    1504:	56 1f       	adc	r21, r22
    1506:	c7 1f       	adc	r28, r23
    1508:	d1 1d       	adc	r29, r1
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	66 1f       	adc	r22, r22
    1510:	77 1f       	adc	r23, r23
    1512:	06 94       	lsr	r0
    1514:	a1 f7       	brne	.-24     	; 0x14fe <__ftoa_engine+0xac>
    1516:	05 90       	lpm	r0, Z+
    1518:	07 94       	ror	r0
    151a:	20 f4       	brcc	.+8      	; 0x1524 <__ftoa_engine+0xd2>
    151c:	49 0f       	add	r20, r25
    151e:	56 1f       	adc	r21, r22
    1520:	c7 1f       	adc	r28, r23
    1522:	d8 1f       	adc	r29, r24
    1524:	99 0f       	add	r25, r25
    1526:	66 1f       	adc	r22, r22
    1528:	77 1f       	adc	r23, r23
    152a:	88 1f       	adc	r24, r24
    152c:	06 94       	lsr	r0
    152e:	a9 f7       	brne	.-22     	; 0x151a <__ftoa_engine+0xc8>
    1530:	84 91       	lpm	r24, Z
    1532:	10 95       	com	r17
    1534:	17 70       	andi	r17, 0x07	; 7
    1536:	41 f0       	breq	.+16     	; 0x1548 <__ftoa_engine+0xf6>
    1538:	d6 95       	lsr	r29
    153a:	c7 95       	ror	r28
    153c:	57 95       	ror	r21
    153e:	47 95       	ror	r20
    1540:	f7 94       	ror	r15
    1542:	e7 94       	ror	r14
    1544:	1a 95       	dec	r17
    1546:	c1 f7       	brne	.-16     	; 0x1538 <__ftoa_engine+0xe6>
    1548:	e3 ef       	ldi	r30, 0xF3	; 243
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	68 94       	set
    154e:	15 90       	lpm	r1, Z+
    1550:	15 91       	lpm	r17, Z+
    1552:	35 91       	lpm	r19, Z+
    1554:	65 91       	lpm	r22, Z+
    1556:	95 91       	lpm	r25, Z+
    1558:	05 90       	lpm	r0, Z+
    155a:	7f e2       	ldi	r23, 0x2F	; 47
    155c:	73 95       	inc	r23
    155e:	e1 18       	sub	r14, r1
    1560:	f1 0a       	sbc	r15, r17
    1562:	43 0b       	sbc	r20, r19
    1564:	56 0b       	sbc	r21, r22
    1566:	c9 0b       	sbc	r28, r25
    1568:	d0 09       	sbc	r29, r0
    156a:	c0 f7       	brcc	.-16     	; 0x155c <__ftoa_engine+0x10a>
    156c:	e1 0c       	add	r14, r1
    156e:	f1 1e       	adc	r15, r17
    1570:	43 1f       	adc	r20, r19
    1572:	56 1f       	adc	r21, r22
    1574:	c9 1f       	adc	r28, r25
    1576:	d0 1d       	adc	r29, r0
    1578:	7e f4       	brtc	.+30     	; 0x1598 <__ftoa_engine+0x146>
    157a:	70 33       	cpi	r23, 0x30	; 48
    157c:	11 f4       	brne	.+4      	; 0x1582 <__ftoa_engine+0x130>
    157e:	8a 95       	dec	r24
    1580:	e6 cf       	rjmp	.-52     	; 0x154e <__ftoa_engine+0xfc>
    1582:	e8 94       	clt
    1584:	01 50       	subi	r16, 0x01	; 1
    1586:	30 f0       	brcs	.+12     	; 0x1594 <__ftoa_engine+0x142>
    1588:	08 0f       	add	r16, r24
    158a:	0a f4       	brpl	.+2      	; 0x158e <__ftoa_engine+0x13c>
    158c:	00 27       	eor	r16, r16
    158e:	02 17       	cp	r16, r18
    1590:	08 f4       	brcc	.+2      	; 0x1594 <__ftoa_engine+0x142>
    1592:	20 2f       	mov	r18, r16
    1594:	23 95       	inc	r18
    1596:	02 2f       	mov	r16, r18
    1598:	7a 33       	cpi	r23, 0x3A	; 58
    159a:	28 f0       	brcs	.+10     	; 0x15a6 <__ftoa_engine+0x154>
    159c:	79 e3       	ldi	r23, 0x39	; 57
    159e:	7d 93       	st	X+, r23
    15a0:	2a 95       	dec	r18
    15a2:	e9 f7       	brne	.-6      	; 0x159e <__ftoa_engine+0x14c>
    15a4:	10 c0       	rjmp	.+32     	; 0x15c6 <__ftoa_engine+0x174>
    15a6:	7d 93       	st	X+, r23
    15a8:	2a 95       	dec	r18
    15aa:	89 f6       	brne	.-94     	; 0x154e <__ftoa_engine+0xfc>
    15ac:	06 94       	lsr	r0
    15ae:	97 95       	ror	r25
    15b0:	67 95       	ror	r22
    15b2:	37 95       	ror	r19
    15b4:	17 95       	ror	r17
    15b6:	17 94       	ror	r1
    15b8:	e1 18       	sub	r14, r1
    15ba:	f1 0a       	sbc	r15, r17
    15bc:	43 0b       	sbc	r20, r19
    15be:	56 0b       	sbc	r21, r22
    15c0:	c9 0b       	sbc	r28, r25
    15c2:	d0 09       	sbc	r29, r0
    15c4:	98 f0       	brcs	.+38     	; 0x15ec <__ftoa_engine+0x19a>
    15c6:	23 95       	inc	r18
    15c8:	7e 91       	ld	r23, -X
    15ca:	73 95       	inc	r23
    15cc:	7a 33       	cpi	r23, 0x3A	; 58
    15ce:	08 f0       	brcs	.+2      	; 0x15d2 <__ftoa_engine+0x180>
    15d0:	70 e3       	ldi	r23, 0x30	; 48
    15d2:	7c 93       	st	X, r23
    15d4:	20 13       	cpse	r18, r16
    15d6:	b8 f7       	brcc	.-18     	; 0x15c6 <__ftoa_engine+0x174>
    15d8:	7e 91       	ld	r23, -X
    15da:	70 61       	ori	r23, 0x10	; 16
    15dc:	7d 93       	st	X+, r23
    15de:	30 f0       	brcs	.+12     	; 0x15ec <__ftoa_engine+0x19a>
    15e0:	83 95       	inc	r24
    15e2:	71 e3       	ldi	r23, 0x31	; 49
    15e4:	7d 93       	st	X+, r23
    15e6:	70 e3       	ldi	r23, 0x30	; 48
    15e8:	2a 95       	dec	r18
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <__ftoa_engine+0x192>
    15ec:	11 24       	eor	r1, r1
    15ee:	ef 90       	pop	r14
    15f0:	ff 90       	pop	r15
    15f2:	0f 91       	pop	r16
    15f4:	1f 91       	pop	r17
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	99 27       	eor	r25, r25
    15fc:	87 fd       	sbrc	r24, 7
    15fe:	90 95       	com	r25
    1600:	08 95       	ret

00001602 <strnlen_P>:
    1602:	fc 01       	movw	r30, r24
    1604:	05 90       	lpm	r0, Z+
    1606:	61 50       	subi	r22, 0x01	; 1
    1608:	70 40       	sbci	r23, 0x00	; 0
    160a:	01 10       	cpse	r0, r1
    160c:	d8 f7       	brcc	.-10     	; 0x1604 <strnlen_P+0x2>
    160e:	80 95       	com	r24
    1610:	90 95       	com	r25
    1612:	8e 0f       	add	r24, r30
    1614:	9f 1f       	adc	r25, r31
    1616:	08 95       	ret

00001618 <strnlen>:
    1618:	fc 01       	movw	r30, r24
    161a:	61 50       	subi	r22, 0x01	; 1
    161c:	70 40       	sbci	r23, 0x00	; 0
    161e:	01 90       	ld	r0, Z+
    1620:	01 10       	cpse	r0, r1
    1622:	d8 f7       	brcc	.-10     	; 0x161a <strnlen+0x2>
    1624:	80 95       	com	r24
    1626:	90 95       	com	r25
    1628:	8e 0f       	add	r24, r30
    162a:	9f 1f       	adc	r25, r31
    162c:	08 95       	ret

0000162e <fputc>:
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	8c 01       	movw	r16, r24
    1638:	eb 01       	movw	r28, r22
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	81 fd       	sbrc	r24, 1
    163e:	03 c0       	rjmp	.+6      	; 0x1646 <fputc+0x18>
    1640:	0f ef       	ldi	r16, 0xFF	; 255
    1642:	1f ef       	ldi	r17, 0xFF	; 255
    1644:	1a c0       	rjmp	.+52     	; 0x167a <fputc+0x4c>
    1646:	82 ff       	sbrs	r24, 2
    1648:	0d c0       	rjmp	.+26     	; 0x1664 <fputc+0x36>
    164a:	2e 81       	ldd	r18, Y+6	; 0x06
    164c:	3f 81       	ldd	r19, Y+7	; 0x07
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	9d 81       	ldd	r25, Y+5	; 0x05
    1652:	28 17       	cp	r18, r24
    1654:	39 07       	cpc	r19, r25
    1656:	64 f4       	brge	.+24     	; 0x1670 <fputc+0x42>
    1658:	e8 81       	ld	r30, Y
    165a:	f9 81       	ldd	r31, Y+1	; 0x01
    165c:	01 93       	st	Z+, r16
    165e:	f9 83       	std	Y+1, r31	; 0x01
    1660:	e8 83       	st	Y, r30
    1662:	06 c0       	rjmp	.+12     	; 0x1670 <fputc+0x42>
    1664:	e8 85       	ldd	r30, Y+8	; 0x08
    1666:	f9 85       	ldd	r31, Y+9	; 0x09
    1668:	80 2f       	mov	r24, r16
    166a:	09 95       	icall
    166c:	89 2b       	or	r24, r25
    166e:	41 f7       	brne	.-48     	; 0x1640 <fputc+0x12>
    1670:	8e 81       	ldd	r24, Y+6	; 0x06
    1672:	9f 81       	ldd	r25, Y+7	; 0x07
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	9f 83       	std	Y+7, r25	; 0x07
    1678:	8e 83       	std	Y+6, r24	; 0x06
    167a:	c8 01       	movw	r24, r16
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	08 95       	ret

00001686 <fputs>:
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	7c 01       	movw	r14, r24
    1694:	8b 01       	movw	r16, r22
    1696:	db 01       	movw	r26, r22
    1698:	13 96       	adiw	r26, 0x03	; 3
    169a:	8c 91       	ld	r24, X
    169c:	81 ff       	sbrs	r24, 1
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <fputs+0x42>
    16a0:	c0 e0       	ldi	r28, 0x00	; 0
    16a2:	d0 e0       	ldi	r29, 0x00	; 0
    16a4:	0b c0       	rjmp	.+22     	; 0x16bc <fputs+0x36>
    16a6:	d8 01       	movw	r26, r16
    16a8:	18 96       	adiw	r26, 0x08	; 8
    16aa:	ed 91       	ld	r30, X+
    16ac:	fc 91       	ld	r31, X
    16ae:	19 97       	sbiw	r26, 0x09	; 9
    16b0:	b8 01       	movw	r22, r16
    16b2:	09 95       	icall
    16b4:	89 2b       	or	r24, r25
    16b6:	11 f0       	breq	.+4      	; 0x16bc <fputs+0x36>
    16b8:	cf ef       	ldi	r28, 0xFF	; 255
    16ba:	df ef       	ldi	r29, 0xFF	; 255
    16bc:	f7 01       	movw	r30, r14
    16be:	81 91       	ld	r24, Z+
    16c0:	7f 01       	movw	r14, r30
    16c2:	81 11       	cpse	r24, r1
    16c4:	f0 cf       	rjmp	.-32     	; 0x16a6 <fputs+0x20>
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <fputs+0x46>
    16c8:	cf ef       	ldi	r28, 0xFF	; 255
    16ca:	df ef       	ldi	r29, 0xFF	; 255
    16cc:	ce 01       	movw	r24, r28
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	08 95       	ret

000016dc <sprintf>:
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	2e 97       	sbiw	r28, 0x0e	; 14
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	0d 89       	ldd	r16, Y+21	; 0x15
    16f6:	1e 89       	ldd	r17, Y+22	; 0x16
    16f8:	86 e0       	ldi	r24, 0x06	; 6
    16fa:	8c 83       	std	Y+4, r24	; 0x04
    16fc:	1a 83       	std	Y+2, r17	; 0x02
    16fe:	09 83       	std	Y+1, r16	; 0x01
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	9f e7       	ldi	r25, 0x7F	; 127
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
    1708:	ce 01       	movw	r24, r28
    170a:	49 96       	adiw	r24, 0x19	; 25
    170c:	ac 01       	movw	r20, r24
    170e:	6f 89       	ldd	r22, Y+23	; 0x17
    1710:	78 8d       	ldd	r23, Y+24	; 0x18
    1712:	ce 01       	movw	r24, r28
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	0e 94 56 06 	call	0xcac	; 0xcac <vfprintf>
    171a:	ef 81       	ldd	r30, Y+7	; 0x07
    171c:	f8 85       	ldd	r31, Y+8	; 0x08
    171e:	e0 0f       	add	r30, r16
    1720:	f1 1f       	adc	r31, r17
    1722:	10 82       	st	Z, r1
    1724:	2e 96       	adiw	r28, 0x0e	; 14
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	08 95       	ret

0000173a <__ultoa_invert>:
    173a:	fa 01       	movw	r30, r20
    173c:	aa 27       	eor	r26, r26
    173e:	28 30       	cpi	r18, 0x08	; 8
    1740:	51 f1       	breq	.+84     	; 0x1796 <__ultoa_invert+0x5c>
    1742:	20 31       	cpi	r18, 0x10	; 16
    1744:	81 f1       	breq	.+96     	; 0x17a6 <__ultoa_invert+0x6c>
    1746:	e8 94       	clt
    1748:	6f 93       	push	r22
    174a:	6e 7f       	andi	r22, 0xFE	; 254
    174c:	6e 5f       	subi	r22, 0xFE	; 254
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	8f 4f       	sbci	r24, 0xFF	; 255
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	af 4f       	sbci	r26, 0xFF	; 255
    1756:	b1 e0       	ldi	r27, 0x01	; 1
    1758:	3e d0       	rcall	.+124    	; 0x17d6 <__ultoa_invert+0x9c>
    175a:	b4 e0       	ldi	r27, 0x04	; 4
    175c:	3c d0       	rcall	.+120    	; 0x17d6 <__ultoa_invert+0x9c>
    175e:	67 0f       	add	r22, r23
    1760:	78 1f       	adc	r23, r24
    1762:	89 1f       	adc	r24, r25
    1764:	9a 1f       	adc	r25, r26
    1766:	a1 1d       	adc	r26, r1
    1768:	68 0f       	add	r22, r24
    176a:	79 1f       	adc	r23, r25
    176c:	8a 1f       	adc	r24, r26
    176e:	91 1d       	adc	r25, r1
    1770:	a1 1d       	adc	r26, r1
    1772:	6a 0f       	add	r22, r26
    1774:	71 1d       	adc	r23, r1
    1776:	81 1d       	adc	r24, r1
    1778:	91 1d       	adc	r25, r1
    177a:	a1 1d       	adc	r26, r1
    177c:	20 d0       	rcall	.+64     	; 0x17be <__ultoa_invert+0x84>
    177e:	09 f4       	brne	.+2      	; 0x1782 <__ultoa_invert+0x48>
    1780:	68 94       	set
    1782:	3f 91       	pop	r19
    1784:	2a e0       	ldi	r18, 0x0A	; 10
    1786:	26 9f       	mul	r18, r22
    1788:	11 24       	eor	r1, r1
    178a:	30 19       	sub	r19, r0
    178c:	30 5d       	subi	r19, 0xD0	; 208
    178e:	31 93       	st	Z+, r19
    1790:	de f6       	brtc	.-74     	; 0x1748 <__ultoa_invert+0xe>
    1792:	cf 01       	movw	r24, r30
    1794:	08 95       	ret
    1796:	46 2f       	mov	r20, r22
    1798:	47 70       	andi	r20, 0x07	; 7
    179a:	40 5d       	subi	r20, 0xD0	; 208
    179c:	41 93       	st	Z+, r20
    179e:	b3 e0       	ldi	r27, 0x03	; 3
    17a0:	0f d0       	rcall	.+30     	; 0x17c0 <__ultoa_invert+0x86>
    17a2:	c9 f7       	brne	.-14     	; 0x1796 <__ultoa_invert+0x5c>
    17a4:	f6 cf       	rjmp	.-20     	; 0x1792 <__ultoa_invert+0x58>
    17a6:	46 2f       	mov	r20, r22
    17a8:	4f 70       	andi	r20, 0x0F	; 15
    17aa:	40 5d       	subi	r20, 0xD0	; 208
    17ac:	4a 33       	cpi	r20, 0x3A	; 58
    17ae:	18 f0       	brcs	.+6      	; 0x17b6 <__ultoa_invert+0x7c>
    17b0:	49 5d       	subi	r20, 0xD9	; 217
    17b2:	31 fd       	sbrc	r19, 1
    17b4:	40 52       	subi	r20, 0x20	; 32
    17b6:	41 93       	st	Z+, r20
    17b8:	02 d0       	rcall	.+4      	; 0x17be <__ultoa_invert+0x84>
    17ba:	a9 f7       	brne	.-22     	; 0x17a6 <__ultoa_invert+0x6c>
    17bc:	ea cf       	rjmp	.-44     	; 0x1792 <__ultoa_invert+0x58>
    17be:	b4 e0       	ldi	r27, 0x04	; 4
    17c0:	a6 95       	lsr	r26
    17c2:	97 95       	ror	r25
    17c4:	87 95       	ror	r24
    17c6:	77 95       	ror	r23
    17c8:	67 95       	ror	r22
    17ca:	ba 95       	dec	r27
    17cc:	c9 f7       	brne	.-14     	; 0x17c0 <__ultoa_invert+0x86>
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	61 05       	cpc	r22, r1
    17d2:	71 05       	cpc	r23, r1
    17d4:	08 95       	ret
    17d6:	9b 01       	movw	r18, r22
    17d8:	ac 01       	movw	r20, r24
    17da:	0a 2e       	mov	r0, r26
    17dc:	06 94       	lsr	r0
    17de:	57 95       	ror	r21
    17e0:	47 95       	ror	r20
    17e2:	37 95       	ror	r19
    17e4:	27 95       	ror	r18
    17e6:	ba 95       	dec	r27
    17e8:	c9 f7       	brne	.-14     	; 0x17dc <__ultoa_invert+0xa2>
    17ea:	62 0f       	add	r22, r18
    17ec:	73 1f       	adc	r23, r19
    17ee:	84 1f       	adc	r24, r20
    17f0:	95 1f       	adc	r25, r21
    17f2:	a0 1d       	adc	r26, r0
    17f4:	08 95       	ret

000017f6 <_exit>:
    17f6:	f8 94       	cli

000017f8 <__stop_program>:
    17f8:	ff cf       	rjmp	.-2      	; 0x17f8 <__stop_program>
