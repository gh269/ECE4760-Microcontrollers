
Lab3_IR_Lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  000013ac  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  00800180  00800180  000014c0  2**0
                  ALLOC
  3 .stab         00000da4  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000273  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000024d7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00002506  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ea6  00000000  00000000  000025e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b11  00000000  00000000  0000448c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e1e  00000000  00000000  00004f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000524  00000000  00000000  00005dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000769  00000000  00000000  000062e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000019a6  00000000  00000000  00006a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000083ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_28>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ea       	ldi	r30, 0xAC	; 172
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 38       	cpi	r26, 0x80	; 128
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a0 e8       	ldi	r26, 0x80	; 128
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 38       	cpi	r26, 0x86	; 134
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 4c 06 	call	0xc98	; 0xc98 <main>
      c6:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <uart_putchar>:
  	tx_out++;
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
  }
}

int uart_putchar(char c, FILE *stream) {
      ce:	cf 93       	push	r28
      d0:	c8 2f       	mov	r28, r24
  if (c == '\n') uart_putchar('\r', stream);
      d2:	8a 30       	cpi	r24, 0x0A	; 10
      d4:	19 f4       	brne	.+6      	; 0xdc <uart_putchar+0xe>
      d6:	8d e0       	ldi	r24, 0x0D	; 13
      d8:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
  char i = tx_in;
      dc:	20 91 4a 02 	lds	r18, 0x024A
      e0:	30 91 4b 02 	lds	r19, 0x024B
  i++;
      e4:	2f 5f       	subi	r18, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
      e6:	28 3c       	cpi	r18, 0xC8	; 200
      e8:	09 f4       	brne	.+2      	; 0xec <uart_putchar+0x1e>
      ea:	20 e0       	ldi	r18, 0x00	; 0
  tx_buff[tx_in] = c;
      ec:	e0 91 4a 02 	lds	r30, 0x024A
      f0:	f0 91 4b 02 	lds	r31, 0x024B
      f4:	e0 58       	subi	r30, 0x80	; 128
      f6:	fe 4f       	sbci	r31, 0xFE	; 254
      f8:	c0 83       	st	Z, r28
  while( i == tx_out);		// until at least one byte free
      fa:	82 2f       	mov	r24, r18
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	20 91 48 02 	lds	r18, 0x0248
     102:	30 91 49 02 	lds	r19, 0x0249
     106:	82 17       	cp	r24, r18
     108:	93 07       	cpc	r25, r19
     10a:	c9 f3       	breq	.-14     	; 0xfe <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     10c:	90 93 4b 02 	sts	0x024B, r25
     110:	80 93 4a 02 	sts	0x024A, r24
  UCSR1B |= (1 << UDRIE1);  // enable TX interrupt
     114:	80 91 c9 00 	lds	r24, 0x00C9
     118:	80 62       	ori	r24, 0x20	; 32
     11a:	80 93 c9 00 	sts	0x00C9, r24
  return 0;
 }
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	cf 91       	pop	r28
     124:	08 95       	ret

00000126 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR1A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR1L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR1L = (F_CPU / (16UL * UART_BAUD)) - 1;
     126:	87 e6       	ldi	r24, 0x67	; 103
     128:	80 93 cc 00 	sts	0x00CC, r24
#endif
  UCSR1B = _BV(TXEN1) | _BV(RXEN1); /* tx/rx enable */
     12c:	e9 ec       	ldi	r30, 0xC9	; 201
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	88 e1       	ldi	r24, 0x18	; 24
     132:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     134:	10 92 4b 02 	sts	0x024B, r1
     138:	10 92 4a 02 	sts	0x024A, r1
  tx_out = 0;
     13c:	10 92 49 02 	sts	0x0249, r1
     140:	10 92 48 02 	sts	0x0248, r1

  //enable receive ISR -- added for TRT
  UCSR1B |= (1<<RXCIE1) ;
     144:	80 81       	ld	r24, Z
     146:	80 68       	ori	r24, 0x80	; 128
     148:	80 83       	st	Z, r24
     14a:	08 95       	ret

0000014c <__vector_29>:
}



ISR( USART1_UDRE_vect )
{
     14c:	1f 92       	push	r1
     14e:	0f 92       	push	r0
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	0f 92       	push	r0
     154:	11 24       	eor	r1, r1
     156:	0b b6       	in	r0, 0x3b	; 59
     158:	0f 92       	push	r0
     15a:	2f 93       	push	r18
     15c:	3f 93       	push	r19
     15e:	8f 93       	push	r24
     160:	9f 93       	push	r25
     162:	ef 93       	push	r30
     164:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     166:	20 91 4a 02 	lds	r18, 0x024A
     16a:	30 91 4b 02 	lds	r19, 0x024B
     16e:	80 91 48 02 	lds	r24, 0x0248
     172:	90 91 49 02 	lds	r25, 0x0249
     176:	28 17       	cp	r18, r24
     178:	39 07       	cpc	r19, r25
     17a:	31 f4       	brne	.+12     	; 0x188 <__vector_29+0x3c>
    UCSR1B &= ~(1 << UDRIE1);	// disable TX interrupt
     17c:	80 91 c9 00 	lds	r24, 0x00C9
     180:	8f 7d       	andi	r24, 0xDF	; 223
     182:	80 93 c9 00 	sts	0x00C9, r24
     186:	1d c0       	rjmp	.+58     	; 0x1c2 <__vector_29+0x76>
    //return;
  }
  else {
  	UDR1 = tx_buff[tx_out];
     188:	e0 91 48 02 	lds	r30, 0x0248
     18c:	f0 91 49 02 	lds	r31, 0x0249
     190:	e0 58       	subi	r30, 0x80	; 128
     192:	fe 4f       	sbci	r31, 0xFE	; 254
     194:	80 81       	ld	r24, Z
     196:	80 93 ce 00 	sts	0x00CE, r24
  	tx_out++;
     19a:	80 91 48 02 	lds	r24, 0x0248
     19e:	90 91 49 02 	lds	r25, 0x0249
     1a2:	01 96       	adiw	r24, 0x01	; 1
     1a4:	90 93 49 02 	sts	0x0249, r25
     1a8:	80 93 48 02 	sts	0x0248, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     1ac:	80 91 48 02 	lds	r24, 0x0248
     1b0:	90 91 49 02 	lds	r25, 0x0249
     1b4:	88 3c       	cpi	r24, 0xC8	; 200
     1b6:	91 05       	cpc	r25, r1
     1b8:	21 f4       	brne	.+8      	; 0x1c2 <__vector_29+0x76>
     1ba:	10 92 49 02 	sts	0x0249, r1
     1be:	10 92 48 02 	sts	0x0248, r1
  }
}
     1c2:	ff 91       	pop	r31
     1c4:	ef 91       	pop	r30
     1c6:	9f 91       	pop	r25
     1c8:	8f 91       	pop	r24
     1ca:	3f 91       	pop	r19
     1cc:	2f 91       	pop	r18
     1ce:	0f 90       	pop	r0
     1d0:	0b be       	out	0x3b, r0	; 59
     1d2:	0f 90       	pop	r0
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	0f 90       	pop	r0
     1d8:	1f 90       	pop	r1
     1da:	18 95       	reti

000001dc <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     1dc:	1f 92       	push	r1
     1de:	0f 92       	push	r0
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	0f 92       	push	r0
     1e4:	11 24       	eor	r1, r1
     1e6:	0b b6       	in	r0, 0x3b	; 59
     1e8:	0f 92       	push	r0
     1ea:	6f 92       	push	r6
     1ec:	7f 92       	push	r7
     1ee:	8f 92       	push	r8
     1f0:	9f 92       	push	r9
     1f2:	af 92       	push	r10
     1f4:	bf 92       	push	r11
     1f6:	cf 92       	push	r12
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	2f 93       	push	r18
     204:	3f 93       	push	r19
     206:	4f 93       	push	r20
     208:	5f 93       	push	r21
     20a:	6f 93       	push	r22
     20c:	7f 93       	push	r23
     20e:	8f 93       	push	r24
     210:	9f 93       	push	r25
     212:	af 93       	push	r26
     214:	bf 93       	push	r27
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	ef 93       	push	r30
     21c:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
  
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     21e:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     222:	c0 91 f9 02 	lds	r28, 0x02F9
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     226:	b0 9b       	sbis	0x16, 0	; 22
     228:	14 c0       	rjmp	.+40     	; 0x252 <__vector_13+0x76>
    ++kernel.cycles;
     22a:	80 91 30 03 	lds	r24, 0x0330
     22e:	90 91 31 03 	lds	r25, 0x0331
     232:	a0 91 32 03 	lds	r26, 0x0332
     236:	b0 91 33 03 	lds	r27, 0x0333
     23a:	01 96       	adiw	r24, 0x01	; 1
     23c:	a1 1d       	adc	r26, r1
     23e:	b1 1d       	adc	r27, r1
     240:	80 93 30 03 	sts	0x0330, r24
     244:	90 93 31 03 	sts	0x0331, r25
     248:	a0 93 32 03 	sts	0x0332, r26
     24c:	b0 93 33 03 	sts	0x0333, r27
    TIFR1 |= (1<<TOV1) ;
     250:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     252:	20 91 84 00 	lds	r18, 0x0084
     256:	30 91 85 00 	lds	r19, 0x0085
     25a:	80 91 30 03 	lds	r24, 0x0330
     25e:	90 91 31 03 	lds	r25, 0x0331
     262:	a0 91 32 03 	lds	r26, 0x0332
     266:	b0 91 33 03 	lds	r27, 0x0333
     26a:	dc 01       	movw	r26, r24
     26c:	99 27       	eor	r25, r25
     26e:	88 27       	eor	r24, r24
     270:	82 0f       	add	r24, r18
     272:	93 1f       	adc	r25, r19
     274:	a1 1d       	adc	r26, r1
     276:	b1 1d       	adc	r27, r1

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     278:	70 90 f8 02 	lds	r7, 0x02F8
  uint32_t nextHit;
  int32_t timeleft;
  
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
     27c:	cc 24       	eor	r12, r12
     27e:	ca 94       	dec	r12
     280:	dc 2c       	mov	r13, r12
     282:	ec 2c       	mov	r14, r12
     284:	6f e7       	ldi	r22, 0x7F	; 127
     286:	f6 2e       	mov	r15, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     288:	11 e0       	ldi	r17, 0x01	; 1
  
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
  running = 0;
     28a:	d0 e0       	ldi	r29, 0x00	; 0
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     28c:	0b e0       	ldi	r16, 0x0B	; 11
    if (t->state == TIMEQ) {
      if (t->release <= now) {
  t->state = READYQ;
     28e:	66 24       	eor	r6, r6
     290:	63 94       	inc	r6

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     292:	32 c0       	rjmp	.+100    	; 0x2f8 <__vector_13+0x11c>
    t = &kernel.tasks[i];
     294:	01 9f       	mul	r16, r17
     296:	f0 01       	movw	r30, r0
     298:	11 24       	eor	r1, r1
     29a:	e6 50       	subi	r30, 0x06	; 6
     29c:	fd 4f       	sbci	r31, 0xFD	; 253
    if (t->state == TIMEQ) {
     29e:	22 85       	ldd	r18, Z+10	; 0x0a
     2a0:	22 30       	cpi	r18, 0x02	; 2
     2a2:	91 f4       	brne	.+36     	; 0x2c8 <__vector_13+0xec>
      if (t->release <= now) {
     2a4:	42 81       	ldd	r20, Z+2	; 0x02
     2a6:	53 81       	ldd	r21, Z+3	; 0x03
     2a8:	64 81       	ldd	r22, Z+4	; 0x04
     2aa:	75 81       	ldd	r23, Z+5	; 0x05
     2ac:	84 17       	cp	r24, r20
     2ae:	95 07       	cpc	r25, r21
     2b0:	a6 07       	cpc	r26, r22
     2b2:	b7 07       	cpc	r27, r23
     2b4:	10 f0       	brcs	.+4      	; 0x2ba <__vector_13+0xde>
  t->state = READYQ;
     2b6:	62 86       	std	Z+10, r6	; 0x0a
     2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <__vector_13+0xec>
     2ba:	4c 15       	cp	r20, r12
     2bc:	5d 05       	cpc	r21, r13
     2be:	6e 05       	cpc	r22, r14
     2c0:	7f 05       	cpc	r23, r15
     2c2:	10 f4       	brcc	.+4      	; 0x2c8 <__vector_13+0xec>
     2c4:	6a 01       	movw	r12, r20
     2c6:	7b 01       	movw	r14, r22
      } else if (t->release < nextHit) {
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     2c8:	22 85       	ldd	r18, Z+10	; 0x0a
     2ca:	21 30       	cpi	r18, 0x01	; 1
     2cc:	a1 f4       	brne	.+40     	; 0x2f6 <__vector_13+0x11a>
      if (t->deadline < kernel.tasks[running].deadline) {
     2ce:	0d 9f       	mul	r16, r29
     2d0:	90 01       	movw	r18, r0
     2d2:	11 24       	eor	r1, r1
     2d4:	28 50       	subi	r18, 0x08	; 8
     2d6:	3d 4f       	sbci	r19, 0xFD	; 253
     2d8:	86 80       	ldd	r8, Z+6	; 0x06
     2da:	97 80       	ldd	r9, Z+7	; 0x07
     2dc:	a0 84       	ldd	r10, Z+8	; 0x08
     2de:	b1 84       	ldd	r11, Z+9	; 0x09
     2e0:	f9 01       	movw	r30, r18
     2e2:	40 85       	ldd	r20, Z+8	; 0x08
     2e4:	51 85       	ldd	r21, Z+9	; 0x09
     2e6:	62 85       	ldd	r22, Z+10	; 0x0a
     2e8:	73 85       	ldd	r23, Z+11	; 0x0b
     2ea:	84 16       	cp	r8, r20
     2ec:	95 06       	cpc	r9, r21
     2ee:	a6 06       	cpc	r10, r22
     2f0:	b7 06       	cpc	r11, r23
     2f2:	08 f4       	brcc	.+2      	; 0x2f6 <__vector_13+0x11a>
     2f4:	d1 2f       	mov	r29, r17

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     2f6:	1f 5f       	subi	r17, 0xFF	; 255
     2f8:	71 16       	cp	r7, r17
     2fa:	60 f6       	brcc	.-104    	; 0x294 <__vector_13+0xb8>
      if (t->deadline < kernel.tasks[running].deadline) {
  running = i;
      }
    }
  }
  fprintf(stdout, "Old: %u New: %u\n\r", oldrunning, running);
     2fc:	ad 2e       	mov	r10, r29
     2fe:	b1 2c       	mov	r11, r1
     300:	8c 2e       	mov	r8, r28
     302:	91 2c       	mov	r9, r1
     304:	1f 92       	push	r1
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	cf 93       	push	r28
     30c:	8e e0       	ldi	r24, 0x0E	; 14
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	9f 93       	push	r25
     312:	8f 93       	push	r24
     314:	80 91 83 03 	lds	r24, 0x0383
     318:	8f 93       	push	r24
     31a:	80 91 82 03 	lds	r24, 0x0382
     31e:	8f 93       	push	r24
     320:	0e 94 c5 06 	call	0xd8a	; 0xd8a <fprintf>
  if (running != oldrunning) { // perform context switch?
     324:	2d b7       	in	r18, 0x3d	; 61
     326:	3e b7       	in	r19, 0x3e	; 62
     328:	28 5f       	subi	r18, 0xF8	; 248
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	3e bf       	out	0x3e, r19	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	2d bf       	out	0x3d, r18	; 61
     336:	dc 17       	cp	r29, r28
     338:	c9 f0       	breq	.+50     	; 0x36c <__vector_13+0x190>

    // store old context
    t = &kernel.tasks[oldrunning];
     33a:	8b e0       	ldi	r24, 0x0B	; 11
     33c:	88 9d       	mul	r24, r8
     33e:	f0 01       	movw	r30, r0
     340:	89 9d       	mul	r24, r9
     342:	f0 0d       	add	r31, r0
     344:	11 24       	eor	r1, r1
     346:	e6 50       	subi	r30, 0x06	; 6
     348:	fd 4f       	sbci	r31, 0xFD	; 253
    t->spl = SPL;
     34a:	9d b7       	in	r25, 0x3d	; 61
     34c:	90 83       	st	Z, r25
    t->sph = SPH;
     34e:	9e b7       	in	r25, 0x3e	; 62
     350:	91 83       	std	Z+1, r25	; 0x01

    // load new context
    t = &kernel.tasks[running];
     352:	8a 9d       	mul	r24, r10
     354:	f0 01       	movw	r30, r0
     356:	8b 9d       	mul	r24, r11
     358:	f0 0d       	add	r31, r0
     35a:	11 24       	eor	r1, r1
     35c:	e6 50       	subi	r30, 0x06	; 6
     35e:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     360:	81 81       	ldd	r24, Z+1	; 0x01
     362:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     364:	80 81       	ld	r24, Z
     366:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     368:	d0 93 f9 02 	sts	0x02F9, r29

  }

  kernel.nextHit = nextHit;  
     36c:	c0 92 34 03 	sts	0x0334, r12
     370:	d0 92 35 03 	sts	0x0335, r13
     374:	e0 92 36 03 	sts	0x0336, r14
     378:	f0 92 37 03 	sts	0x0337, r15

  now = (kernel.cycles << 16) + TCNT1;
     37c:	20 91 84 00 	lds	r18, 0x0084
     380:	30 91 85 00 	lds	r19, 0x0085
     384:	80 91 30 03 	lds	r24, 0x0330
     388:	90 91 31 03 	lds	r25, 0x0331
     38c:	a0 91 32 03 	lds	r26, 0x0332
     390:	b0 91 33 03 	lds	r27, 0x0333
     394:	dc 01       	movw	r26, r24
     396:	99 27       	eor	r25, r25
     398:	88 27       	eor	r24, r24
     39a:	82 0f       	add	r24, r18
     39c:	93 1f       	adc	r25, r19
     39e:	a1 1d       	adc	r26, r1
     3a0:	b1 1d       	adc	r27, r1
  timeleft = (int32_t)nextHit - (int32_t)now;
     3a2:	c8 1a       	sub	r12, r24
     3a4:	d9 0a       	sbc	r13, r25
     3a6:	ea 0a       	sbc	r14, r26
     3a8:	fb 0a       	sbc	r15, r27
  if (timeleft < 4) {
     3aa:	34 e0       	ldi	r19, 0x04	; 4
     3ac:	c3 16       	cp	r12, r19
     3ae:	d1 04       	cpc	r13, r1
     3b0:	e1 04       	cpc	r14, r1
     3b2:	f1 04       	cpc	r15, r1
     3b4:	2c f4       	brge	.+10     	; 0x3c0 <__vector_13+0x1e4>
    timeleft = 4;
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	c8 2e       	mov	r12, r24
     3ba:	d1 2c       	mov	r13, r1
     3bc:	e1 2c       	mov	r14, r1
     3be:	f1 2c       	mov	r15, r1
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     3c0:	80 91 84 00 	lds	r24, 0x0084
     3c4:	90 91 85 00 	lds	r25, 0x0085
     3c8:	a7 01       	movw	r20, r14
     3ca:	96 01       	movw	r18, r12
     3cc:	28 0f       	add	r18, r24
     3ce:	39 1f       	adc	r19, r25
     3d0:	41 1d       	adc	r20, r1
     3d2:	51 1d       	adc	r21, r1
     3d4:	da 01       	movw	r26, r20
     3d6:	c9 01       	movw	r24, r18
     3d8:	00 97       	sbiw	r24, 0x00	; 0
     3da:	a1 40       	sbci	r26, 0x01	; 1
     3dc:	b1 05       	cpc	r27, r1
     3de:	38 f4       	brcc	.+14     	; 0x3ee <__vector_13+0x212>
    OCR1A = TCNT1 + timeleft;
     3e0:	80 91 84 00 	lds	r24, 0x0084
     3e4:	90 91 85 00 	lds	r25, 0x0085
     3e8:	8c 0d       	add	r24, r12
     3ea:	9d 1d       	adc	r25, r13
     3ec:	0e c0       	rjmp	.+28     	; 0x40a <__vector_13+0x22e>
  } else if (TCNT1 < 65536 - 4) {
     3ee:	80 91 84 00 	lds	r24, 0x0084
     3f2:	90 91 85 00 	lds	r25, 0x0085
     3f6:	8c 3f       	cpi	r24, 0xFC	; 252
     3f8:	9f 4f       	sbci	r25, 0xFF	; 255
     3fa:	28 f4       	brcc	.+10     	; 0x406 <__vector_13+0x22a>
    OCR1A = 0x0000;
     3fc:	10 92 89 00 	sts	0x0089, r1
     400:	10 92 88 00 	sts	0x0088, r1
     404:	06 c0       	rjmp	.+12     	; 0x412 <__vector_13+0x236>
  } else {
    OCR1A = 4;
     406:	84 e0       	ldi	r24, 0x04	; 4
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	90 93 89 00 	sts	0x0089, r25
     40e:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	80 93 6f 00 	sts	0x006F, r24
}
     418:	ff 91       	pop	r31
     41a:	ef 91       	pop	r30
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	bf 91       	pop	r27
     422:	af 91       	pop	r26
     424:	9f 91       	pop	r25
     426:	8f 91       	pop	r24
     428:	7f 91       	pop	r23
     42a:	6f 91       	pop	r22
     42c:	5f 91       	pop	r21
     42e:	4f 91       	pop	r20
     430:	3f 91       	pop	r19
     432:	2f 91       	pop	r18
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	bf 90       	pop	r11
     442:	af 90       	pop	r10
     444:	9f 90       	pop	r9
     446:	8f 90       	pop	r8
     448:	7f 90       	pop	r7
     44a:	6f 90       	pop	r6
     44c:	0f 90       	pop	r0
     44e:	0b be       	out	0x3b, r0	; 59
     450:	0f 90       	pop	r0
     452:	0f be       	out	0x3f, r0	; 63
     454:	0f 90       	pop	r0
     456:	1f 90       	pop	r1
     458:	18 95       	reti

0000045a <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     45a:	10 92 85 00 	sts	0x0085, r1
     45e:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     462:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     466:	25 e0       	ldi	r18, 0x05	; 5
     468:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     46c:	22 e0       	ldi	r18, 0x02	; 2
     46e:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     472:	2f ef       	ldi	r18, 0xFF	; 255
     474:	30 e4       	ldi	r19, 0x40	; 64
     476:	28 1b       	sub	r18, r24
     478:	39 0b       	sbc	r19, r25
     47a:	30 93 2f 03 	sts	0x032F, r19
     47e:	20 93 2e 03 	sts	0x032E, r18
  kernel.nbrOfTasks = 0;
     482:	10 92 f8 02 	sts	0x02F8, r1
  kernel.running = 0;
     486:	10 92 f9 02 	sts	0x02F9, r1

  kernel.cycles = 0x0000;
     48a:	10 92 30 03 	sts	0x0330, r1
     48e:	10 92 31 03 	sts	0x0331, r1
     492:	10 92 32 03 	sts	0x0332, r1
     496:	10 92 33 03 	sts	0x0333, r1
  kernel.nextHit = 0x7FFFFFFF;
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	9f ef       	ldi	r25, 0xFF	; 255
     49e:	af ef       	ldi	r26, 0xFF	; 255
     4a0:	bf e7       	ldi	r27, 0x7F	; 127
     4a2:	80 93 34 03 	sts	0x0334, r24
     4a6:	90 93 35 03 	sts	0x0335, r25
     4aa:	a0 93 36 03 	sts	0x0336, r26
     4ae:	b0 93 37 03 	sts	0x0337, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     4b2:	80 93 00 03 	sts	0x0300, r24
     4b6:	90 93 01 03 	sts	0x0301, r25
     4ba:	a0 93 02 03 	sts	0x0302, r26
     4be:	b0 93 03 03 	sts	0x0303, r27
  kernel.tasks[0].release = 0x00000000;
     4c2:	10 92 fc 02 	sts	0x02FC, r1
     4c6:	10 92 fd 02 	sts	0x02FD, r1
     4ca:	10 92 fe 02 	sts	0x02FE, r1
     4ce:	10 92 ff 02 	sts	0x02FF, r1

  sei(); /* set enabled interrupts */
     4d2:	78 94       	sei
     4d4:	08 95       	ret

000004d6 <trtCreateTask>:
}


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     4e2:	f8 94       	cli

  ++kernel.nbrOfTasks;
     4e4:	e0 91 f8 02 	lds	r30, 0x02F8
     4e8:	ef 5f       	subi	r30, 0xFF	; 255
     4ea:	e0 93 f8 02 	sts	0x02F8, r30

  sp = kernel.memptr;
     4ee:	e0 91 2e 03 	lds	r30, 0x032E
     4f2:	f0 91 2f 03 	lds	r31, 0x032F
  kernel.memptr -= stacksize;  // decrease free mem ptr
     4f6:	df 01       	movw	r26, r30
     4f8:	a6 1b       	sub	r26, r22
     4fa:	b7 0b       	sbc	r27, r23
     4fc:	b0 93 2f 03 	sts	0x032F, r27
     500:	a0 93 2e 03 	sts	0x032E, r26

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     504:	80 83       	st	Z, r24
  *sp-- = hi8(fun);       // store PC(hi)
     506:	df 01       	movw	r26, r30
     508:	9e 93       	st	-X, r25

  sei(); /* set enabled interrupts */
}


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     50a:	cf 01       	movw	r24, r30
     50c:	4b 97       	sbiw	r24, 0x1b	; 27

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     50e:	1e 92       	st	-X, r1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     510:	a8 17       	cp	r26, r24
     512:	b9 07       	cpc	r27, r25
     514:	e1 f7       	brne	.-8      	; 0x50e <trtCreateTask+0x38>
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     516:	df 01       	movw	r26, r30
     518:	5c 97       	sbiw	r26, 0x1c	; 28
     51a:	cc 92       	st	X, r12
  *sp-- = hi8(args);
     51c:	df 01       	movw	r26, r30
     51e:	5d 97       	sbiw	r26, 0x1d	; 29
     520:	dc 92       	st	X, r13

  sei(); /* set enabled interrupts */
}


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     522:	cf 01       	movw	r24, r30
     524:	83 97       	sbiw	r24, 0x23	; 35
  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
    *sp-- = 0x00;         // store r26-r31
     526:	1e 92       	st	-X, r1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     528:	a8 17       	cp	r26, r24
     52a:	b9 07       	cpc	r27, r25
     52c:	e1 f7       	brne	.-8      	; 0x526 <trtCreateTask+0x50>
     52e:	b4 97       	sbiw	r30, 0x24	; 36
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     530:	a0 91 f8 02 	lds	r26, 0x02F8
     534:	8b e0       	ldi	r24, 0x0B	; 11
     536:	a8 9f       	mul	r26, r24
     538:	d0 01       	movw	r26, r0
     53a:	11 24       	eor	r1, r1
     53c:	a6 50       	subi	r26, 0x06	; 6
     53e:	bd 4f       	sbci	r27, 0xFD	; 253
  ///*
  t->release = release;
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	2d 93       	st	X+, r18
     544:	3d 93       	st	X+, r19
     546:	4d 93       	st	X+, r20
     548:	5c 93       	st	X, r21
     54a:	15 97       	sbiw	r26, 0x05	; 5
  t->deadline = deadline;
     54c:	16 96       	adiw	r26, 0x06	; 6
     54e:	ed 92       	st	X+, r14
     550:	fd 92       	st	X+, r15
     552:	0d 93       	st	X+, r16
     554:	1c 93       	st	X, r17
     556:	19 97       	sbiw	r26, 0x09	; 9
  t->state = TIMEQ;
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	1a 96       	adiw	r26, 0x0a	; 10
     55c:	8c 93       	st	X, r24
     55e:	1a 97       	sbiw	r26, 0x0a	; 10
  //*/
  t->spl = lo8(sp);       // store stack pointer
     560:	ec 93       	st	X, r30
  t->sph = hi8(sp);
     562:	11 96       	adiw	r26, 0x01	; 1
     564:	fc 93       	st	X, r31
  

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();

}
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
  t->spl = lo8(sp);       // store stack pointer
  t->sph = hi8(sp);
  

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     572:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_13>

00000576 <trtCreateSemaphore>:

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     576:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     578:	e8 2f       	mov	r30, r24
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	e8 50       	subi	r30, 0x08	; 8
     57e:	fd 4f       	sbci	r31, 0xFD	; 253
     580:	65 a7       	std	Z+45, r22	; 0x2d
  
  sei(); // set enabled interrupts;
     582:	78 94       	sei
     584:	08 95       	ret

00000586 <trtWait>:
void trtWait(uint8_t semnbr) {

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     586:	20 91 f9 02 	lds	r18, 0x02F9

  cli(); // disable interrupts
     58a:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     58c:	e8 2f       	mov	r30, r24
     58e:	f0 e0       	ldi	r31, 0x00	; 0
  if ((*s) > 0) {
     590:	e9 50       	subi	r30, 0x09	; 9
     592:	fd 4f       	sbci	r31, 0xFD	; 253
     594:	96 a5       	ldd	r25, Z+46	; 0x2e
     596:	99 23       	and	r25, r25
     598:	19 f0       	breq	.+6      	; 0x5a0 <trtWait+0x1a>
    (*s)--;
     59a:	91 50       	subi	r25, 0x01	; 1
     59c:	96 a7       	std	Z+46, r25	; 0x2e
     59e:	0a c0       	rjmp	.+20     	; 0x5b4 <trtWait+0x2e>
void trtWait(uint8_t semnbr) {

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     5a0:	9b e0       	ldi	r25, 0x0B	; 11
     5a2:	29 9f       	mul	r18, r25
     5a4:	f0 01       	movw	r30, r0
     5a6:	11 24       	eor	r1, r1
  s = &kernel.semaphores[semnbr-1];
  if ((*s) > 0) {
    (*s)--;
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     5a8:	e6 50       	subi	r30, 0x06	; 6
     5aa:	fd 4f       	sbci	r31, 0xFD	; 253
     5ac:	8e 5f       	subi	r24, 0xFE	; 254
     5ae:	82 87       	std	Z+10, r24	; 0x0a
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__vector_13>
  }

  sei(); // reenable interrupts
     5b4:	78 94       	sei
     5b6:	08 95       	ret

000005b8 <trtSignal>:
}

void trtSignal(uint8_t semnbr) {
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     5c2:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     5c4:	f0 91 f8 02 	lds	r31, 0x02F8
void trtSignal(uint8_t semnbr) {

  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;
     5c8:	e0 e0       	ldi	r30, 0x00	; 0

void trtSignal(uint8_t semnbr) {

  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
     5ca:	4f ef       	ldi	r20, 0xFF	; 255
     5cc:	5f ef       	ldi	r21, 0xFF	; 255
     5ce:	ba 01       	movw	r22, r20
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     5d0:	91 e0       	ldi	r25, 0x01	; 1
    t = &kernel.tasks[i];
     5d2:	ab e0       	ldi	r26, 0x0B	; 11
     5d4:	fa 2e       	mov	r15, r26
    if (t->state == (semnbr + WAIT_OFFSET)) {
     5d6:	c8 2f       	mov	r28, r24
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
     5da:	22 96       	adiw	r28, 0x02	; 2
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     5dc:	1b c0       	rjmp	.+54     	; 0x614 <trtSignal+0x5c>
    t = &kernel.tasks[i];
     5de:	f9 9e       	mul	r15, r25
     5e0:	d0 01       	movw	r26, r0
     5e2:	11 24       	eor	r1, r1
     5e4:	a6 50       	subi	r26, 0x06	; 6
     5e6:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     5e8:	1a 96       	adiw	r26, 0x0a	; 10
     5ea:	2c 91       	ld	r18, X
     5ec:	1a 97       	sbiw	r26, 0x0a	; 10
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	2c 17       	cp	r18, r28
     5f2:	3d 07       	cpc	r19, r29
     5f4:	71 f4       	brne	.+28     	; 0x612 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     5f6:	16 96       	adiw	r26, 0x06	; 6
     5f8:	0d 91       	ld	r16, X+
     5fa:	1d 91       	ld	r17, X+
     5fc:	2d 91       	ld	r18, X+
     5fe:	3c 91       	ld	r19, X
     600:	19 97       	sbiw	r26, 0x09	; 9
     602:	40 17       	cp	r20, r16
     604:	51 07       	cpc	r21, r17
     606:	62 07       	cpc	r22, r18
     608:	73 07       	cpc	r23, r19
     60a:	18 f0       	brcs	.+6      	; 0x612 <trtSignal+0x5a>
     60c:	e9 2f       	mov	r30, r25
     60e:	b9 01       	movw	r22, r18
     610:	a8 01       	movw	r20, r16
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     612:	9f 5f       	subi	r25, 0xFF	; 255
     614:	f9 17       	cp	r31, r25
     616:	18 f7       	brcc	.-58     	; 0x5de <trtSignal+0x26>
  minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     618:	e1 11       	cpse	r30, r1
     61a:	08 c0       	rjmp	.+16     	; 0x62c <trtSignal+0x74>
    kernel.semaphores[semnbr-1]++;
     61c:	e8 2f       	mov	r30, r24
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	e9 50       	subi	r30, 0x09	; 9
     622:	fd 4f       	sbci	r31, 0xFD	; 253
     624:	86 a5       	ldd	r24, Z+46	; 0x2e
     626:	8f 5f       	subi	r24, 0xFF	; 255
     628:	86 a7       	std	Z+46, r24	; 0x2e
     62a:	0a c0       	rjmp	.+20     	; 0x640 <trtSignal+0x88>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     62c:	8b e0       	ldi	r24, 0x0B	; 11
     62e:	e8 9f       	mul	r30, r24
     630:	f0 01       	movw	r30, r0
     632:	11 24       	eor	r1, r1
     634:	e8 50       	subi	r30, 0x08	; 8
     636:	fd 4f       	sbci	r31, 0xFD	; 253
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     63c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__vector_13>
  }

  sei(); // reenable interrupts
     640:	78 94       	sei
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	08 95       	ret

0000064e <uart_getchar>:
}
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	8c 01       	movw	r16, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     65c:	80 91 4c 02 	lds	r24, 0x024C
     660:	90 91 4d 02 	lds	r25, 0x024D
     664:	89 2b       	or	r24, r25
     666:	09 f0       	breq	.+2      	; 0x66a <uart_getchar+0x1c>
     668:	9e c0       	rjmp	.+316    	; 0x7a6 <uart_getchar+0x158>
     66a:	ce e4       	ldi	r28, 0x4E	; 78
     66c:	d2 e0       	ldi	r29, 0x02	; 2
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 c3 02 	call	0x586	; 0x586 <trtWait>
	if (UCSR1A & _BV(FE1))
     676:	80 91 c8 00 	lds	r24, 0x00C8
     67a:	84 fd       	sbrc	r24, 4
     67c:	a7 c0       	rjmp	.+334    	; 0x7cc <uart_getchar+0x17e>
	  return _FDEV_EOF;
	if (UCSR1A & _BV(DOR1))
     67e:	80 91 c8 00 	lds	r24, 0x00C8
     682:	83 fd       	sbrc	r24, 3
     684:	a6 c0       	rjmp	.+332    	; 0x7d2 <uart_getchar+0x184>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     686:	80 91 3d 03 	lds	r24, 0x033D

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     68a:	8d 30       	cpi	r24, 0x0D	; 13
     68c:	81 f4       	brne	.+32     	; 0x6ae <uart_getchar+0x60>
	  c = '\n';
	if (c == '\n')
	  {
	    *cp = c;
     68e:	8a e0       	ldi	r24, 0x0A	; 10
     690:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
     692:	b8 01       	movw	r22, r16
     694:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
	    rxp = b;
     698:	8e e4       	ldi	r24, 0x4E	; 78
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	90 93 4d 02 	sts	0x024D, r25
     6a0:	80 93 4c 02 	sts	0x024C, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <trtSignal>
	    break;
     6ac:	7c c0       	rjmp	.+248    	; 0x7a6 <uart_getchar+0x158>
	  c = trt_rx_c ; //c = UDR0; -- CHANGED

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
	  c = '\n';
	if (c == '\n')
     6ae:	8a 30       	cpi	r24, 0x0A	; 10
     6b0:	71 f3       	breq	.-36     	; 0x68e <uart_getchar+0x40>
	    rxp = b;
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
	    break;
	  }
	else if (c == '\t')
     6b2:	89 30       	cpi	r24, 0x09	; 9
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <uart_getchar+0x6a>
	  c = ' ';
     6b6:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     6b8:	98 2f       	mov	r25, r24
     6ba:	90 52       	subi	r25, 0x20	; 32
     6bc:	9f 35       	cpi	r25, 0x5F	; 95
     6be:	10 f0       	brcs	.+4      	; 0x6c4 <uart_getchar+0x76>
     6c0:	80 3a       	cpi	r24, 0xA0	; 160
     6c2:	60 f0       	brcs	.+24     	; 0x6dc <uart_getchar+0x8e>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	cd 39       	cpi	r28, 0x9D	; 157
     6c8:	d9 07       	cpc	r29, r25
     6ca:	19 f4       	brne	.+6      	; 0x6d2 <uart_getchar+0x84>
	      uart_putchar('\a', stream);
     6cc:	b8 01       	movw	r22, r16
     6ce:	87 e0       	ldi	r24, 0x07	; 7
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <uart_getchar+0x88>
	    else
	      {
		*cp++ = c;
     6d2:	89 93       	st	Y+, r24
		uart_putchar(c, stream);
     6d4:	b8 01       	movw	r22, r16
     6d6:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
     6da:	c9 cf       	rjmp	.-110    	; 0x66e <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     6dc:	82 31       	cpi	r24, 0x12	; 18
     6de:	21 f1       	breq	.+72     	; 0x728 <uart_getchar+0xda>
     6e0:	30 f4       	brcc	.+12     	; 0x6ee <uart_getchar+0xa0>
     6e2:	83 30       	cpi	r24, 0x03	; 3
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <uart_getchar+0x9a>
     6e6:	75 c0       	rjmp	.+234    	; 0x7d2 <uart_getchar+0x184>
     6e8:	88 30       	cpi	r24, 0x08	; 8
     6ea:	09 f6       	brne	.-126    	; 0x66e <uart_getchar+0x20>
     6ec:	09 c0       	rjmp	.+18     	; 0x700 <uart_getchar+0xb2>
     6ee:	87 31       	cpi	r24, 0x17	; 23
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <uart_getchar+0xa6>
     6f2:	4d c0       	rjmp	.+154    	; 0x78e <uart_getchar+0x140>
     6f4:	8f 37       	cpi	r24, 0x7F	; 127
     6f6:	21 f0       	breq	.+8      	; 0x700 <uart_getchar+0xb2>
     6f8:	85 31       	cpi	r24, 0x15	; 21
     6fa:	09 f0       	breq	.+2      	; 0x6fe <uart_getchar+0xb0>
     6fc:	b8 cf       	rjmp	.-144    	; 0x66e <uart_getchar+0x20>
     6fe:	34 c0       	rjmp	.+104    	; 0x768 <uart_getchar+0x11a>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     700:	e2 e0       	ldi	r30, 0x02	; 2
     702:	ce 34       	cpi	r28, 0x4E	; 78
     704:	de 07       	cpc	r29, r30
     706:	09 f0       	breq	.+2      	; 0x70a <uart_getchar+0xbc>
     708:	08 f4       	brcc	.+2      	; 0x70c <uart_getchar+0xbe>
     70a:	b1 cf       	rjmp	.-158    	; 0x66e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     70c:	b8 01       	movw	r22, r16
     70e:	88 e0       	ldi	r24, 0x08	; 8
     710:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
		uart_putchar(' ', stream);
     714:	b8 01       	movw	r22, r16
     716:	80 e2       	ldi	r24, 0x20	; 32
     718:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
		uart_putchar('\b', stream);
     71c:	b8 01       	movw	r22, r16
     71e:	88 e0       	ldi	r24, 0x08	; 8
     720:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
		cp--;
     724:	21 97       	sbiw	r28, 0x01	; 1
     726:	a3 cf       	rjmp	.-186    	; 0x66e <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     728:	b8 01       	movw	r22, r16
     72a:	8d e0       	ldi	r24, 0x0D	; 13
     72c:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     730:	be e4       	ldi	r27, 0x4E	; 78
     732:	eb 2e       	mov	r14, r27
     734:	b2 e0       	ldi	r27, 0x02	; 2
     736:	fb 2e       	mov	r15, r27
     738:	06 c0       	rjmp	.+12     	; 0x746 <uart_getchar+0xf8>
	      uart_putchar(*cp2, stream);
     73a:	b8 01       	movw	r22, r16
     73c:	f7 01       	movw	r30, r14
     73e:	81 91       	ld	r24, Z+
     740:	7f 01       	movw	r14, r30
     742:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     746:	ec 16       	cp	r14, r28
     748:	fd 06       	cpc	r15, r29
     74a:	b8 f3       	brcs	.-18     	; 0x73a <uart_getchar+0xec>
     74c:	90 cf       	rjmp	.-224    	; 0x66e <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     74e:	b8 01       	movw	r22, r16
     750:	88 e0       	ldi	r24, 0x08	; 8
     752:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
		uart_putchar(' ', stream);
     756:	b8 01       	movw	r22, r16
     758:	80 e2       	ldi	r24, 0x20	; 32
     75a:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
		uart_putchar('\b', stream);
     75e:	b8 01       	movw	r22, r16
     760:	88 e0       	ldi	r24, 0x08	; 8
     762:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
		cp--;
     766:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     768:	f2 e0       	ldi	r31, 0x02	; 2
     76a:	ce 34       	cpi	r28, 0x4E	; 78
     76c:	df 07       	cpc	r29, r31
     76e:	09 f0       	breq	.+2      	; 0x772 <uart_getchar+0x124>
     770:	70 f7       	brcc	.-36     	; 0x74e <uart_getchar+0x100>
     772:	7d cf       	rjmp	.-262    	; 0x66e <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     774:	b8 01       	movw	r22, r16
     776:	88 e0       	ldi	r24, 0x08	; 8
     778:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
		uart_putchar(' ', stream);
     77c:	b8 01       	movw	r22, r16
     77e:	80 e2       	ldi	r24, 0x20	; 32
     780:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
		uart_putchar('\b', stream);
     784:	b8 01       	movw	r22, r16
     786:	88 e0       	ldi	r24, 0x08	; 8
     788:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
		cp--;
     78c:	e7 01       	movw	r28, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	ce 34       	cpi	r28, 0x4E	; 78
     792:	d8 07       	cpc	r29, r24
     794:	09 f0       	breq	.+2      	; 0x798 <uart_getchar+0x14a>
     796:	08 f4       	brcc	.+2      	; 0x79a <uart_getchar+0x14c>
     798:	6a cf       	rjmp	.-300    	; 0x66e <uart_getchar+0x20>
     79a:	fe 01       	movw	r30, r28
     79c:	82 91       	ld	r24, -Z
     79e:	7f 01       	movw	r14, r30
     7a0:	80 32       	cpi	r24, 0x20	; 32
     7a2:	41 f7       	brne	.-48     	; 0x774 <uart_getchar+0x126>
     7a4:	64 cf       	rjmp	.-312    	; 0x66e <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     7a6:	e0 91 4c 02 	lds	r30, 0x024C
     7aa:	f0 91 4d 02 	lds	r31, 0x024D
     7ae:	20 81       	ld	r18, Z
  if (c == '\n')
     7b0:	2a 30       	cpi	r18, 0x0A	; 10
     7b2:	31 f0       	breq	.+12     	; 0x7c0 <uart_getchar+0x172>
	      }
	    break;
	  }
      }

  c = *rxp++;
     7b4:	31 96       	adiw	r30, 0x01	; 1
     7b6:	f0 93 4d 02 	sts	0x024D, r31
     7ba:	e0 93 4c 02 	sts	0x024C, r30
     7be:	04 c0       	rjmp	.+8      	; 0x7c8 <uart_getchar+0x17a>
  if (c == '\n')
    rxp = 0;
     7c0:	10 92 4d 02 	sts	0x024D, r1
     7c4:	10 92 4c 02 	sts	0x024C, r1

  return c;
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <uart_getchar+0x188>
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
	if (UCSR1A & _BV(FE1))
	  return _FDEV_EOF;
     7cc:	2e ef       	ldi	r18, 0xFE	; 254
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <uart_getchar+0x188>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     7d2:	2f ef       	ldi	r18, 0xFF	; 255
     7d4:	3f ef       	ldi	r19, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     7d6:	c9 01       	movw	r24, r18
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	08 95       	ret

000007e6 <__vector_28>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART1_RX_vect) {
     7e6:	1f 92       	push	r1
     7e8:	0f 92       	push	r0
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	0f 92       	push	r0
     7ee:	11 24       	eor	r1, r1
     7f0:	0b b6       	in	r0, 0x3b	; 59
     7f2:	0f 92       	push	r0
     7f4:	2f 93       	push	r18
     7f6:	3f 93       	push	r19
     7f8:	4f 93       	push	r20
     7fa:	5f 93       	push	r21
     7fc:	6f 93       	push	r22
     7fe:	7f 93       	push	r23
     800:	8f 93       	push	r24
     802:	9f 93       	push	r25
     804:	af 93       	push	r26
     806:	bf 93       	push	r27
     808:	ef 93       	push	r30
     80a:	ff 93       	push	r31
	trt_rx_c = UDR1;
     80c:	80 91 ce 00 	lds	r24, 0x00CE
     810:	80 93 3d 03 	sts	0x033D, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <trtSignal>
}
     81c:	ff 91       	pop	r31
     81e:	ef 91       	pop	r30
     820:	bf 91       	pop	r27
     822:	af 91       	pop	r26
     824:	9f 91       	pop	r25
     826:	8f 91       	pop	r24
     828:	7f 91       	pop	r23
     82a:	6f 91       	pop	r22
     82c:	5f 91       	pop	r21
     82e:	4f 91       	pop	r20
     830:	3f 91       	pop	r19
     832:	2f 91       	pop	r18
     834:	0f 90       	pop	r0
     836:	0b be       	out	0x3b, r0	; 59
     838:	0f 90       	pop	r0
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	0f 90       	pop	r0
     83e:	1f 90       	pop	r1
     840:	18 95       	reti

00000842 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     846:	80 91 84 00 	lds	r24, 0x0084
     84a:	90 91 85 00 	lds	r25, 0x0085
     84e:	00 91 30 03 	lds	r16, 0x0330
     852:	10 91 31 03 	lds	r17, 0x0331
     856:	20 91 32 03 	lds	r18, 0x0332
     85a:	30 91 33 03 	lds	r19, 0x0333
     85e:	98 01       	movw	r18, r16
     860:	11 27       	eor	r17, r17
     862:	00 27       	eor	r16, r16
     864:	08 0f       	add	r16, r24
     866:	19 1f       	adc	r17, r25
     868:	21 1d       	adc	r18, r1
     86a:	31 1d       	adc	r19, r1
}
     86c:	b8 01       	movw	r22, r16
     86e:	c9 01       	movw	r24, r18
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     876:	e0 91 f9 02 	lds	r30, 0x02F9
     87a:	ab e0       	ldi	r26, 0x0B	; 11
     87c:	ea 9f       	mul	r30, r26
     87e:	f0 01       	movw	r30, r0
     880:	11 24       	eor	r1, r1
     882:	e6 50       	subi	r30, 0x06	; 6
     884:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     886:	f8 94       	cli

  t->state = TIMEQ;
     888:	a2 e0       	ldi	r26, 0x02	; 2
     88a:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     88c:	62 83       	std	Z+2, r22	; 0x02
     88e:	73 83       	std	Z+3, r23	; 0x03
     890:	84 83       	std	Z+4, r24	; 0x04
     892:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     894:	26 83       	std	Z+6, r18	; 0x06
     896:	37 83       	std	Z+7, r19	; 0x07
     898:	40 87       	std	Z+8, r20	; 0x08
     89a:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     89c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_13>

000008a0 <IR_lock>:
}

// --- define task 2  ----------------------------------------
void IR_lock(void* args) {
	//trtWait(SEM_UART);
	fprintf(&uart_str, "Made it to IR_lock task!");
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	71 e0       	ldi	r23, 0x01	; 1
     8a4:	80 e2       	ldi	r24, 0x20	; 32
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputs>
					key_state = IDLE;
			}
		}
		*/
		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
     8ac:	0e 94 21 04 	call	0x842	; 0x842 <trtCurrentTime>
     8b0:	6b 01       	movw	r12, r22
     8b2:	7c 01       	movw	r14, r24
	    dead = trtCurrentTime() + SECONDS2TICKS(0.2);
     8b4:	0e 94 21 04 	call	0x842	; 0x842 <trtCurrentTime>
     8b8:	9b 01       	movw	r18, r22
     8ba:	ac 01       	movw	r20, r24
     8bc:	2b 5c       	subi	r18, 0xCB	; 203
     8be:	33 4f       	sbci	r19, 0xF3	; 243
     8c0:	4f 4f       	sbci	r20, 0xFF	; 255
     8c2:	5f 4f       	sbci	r21, 0xFF	; 255
					key_state = IDLE;
			}
		}
		*/
		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
     8c4:	c7 01       	movw	r24, r14
     8c6:	b6 01       	movw	r22, r12
     8c8:	66 5e       	subi	r22, 0xE6	; 230
     8ca:	79 4f       	sbci	r23, 0xF9	; 249
     8cc:	8f 4f       	sbci	r24, 0xFF	; 255
     8ce:	9f 4f       	sbci	r25, 0xFF	; 255
	    dead = trtCurrentTime() + SECONDS2TICKS(0.2);
	    trtSleepUntil(rel, dead);
     8d0:	0e 94 3b 04 	call	0x876	; 0x876 <trtSleepUntil>
     8d4:	eb cf       	rjmp	.-42     	; 0x8ac <IR_lock+0xc>

000008d6 <IR_key>:
					key_state = IDLE;
			}
		}
		*/
		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
     8d6:	0e 94 21 04 	call	0x842	; 0x842 <trtCurrentTime>
     8da:	6b 01       	movw	r12, r22
     8dc:	7c 01       	movw	r14, r24
	    dead = trtCurrentTime() + SECONDS2TICKS(0.2);
     8de:	0e 94 21 04 	call	0x842	; 0x842 <trtCurrentTime>
     8e2:	9b 01       	movw	r18, r22
     8e4:	ac 01       	movw	r20, r24
     8e6:	2b 5c       	subi	r18, 0xCB	; 203
     8e8:	33 4f       	sbci	r19, 0xF3	; 243
     8ea:	4f 4f       	sbci	r20, 0xFF	; 255
     8ec:	5f 4f       	sbci	r21, 0xFF	; 255
					key_state = IDLE;
			}
		}
		*/
		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
     8ee:	c7 01       	movw	r24, r14
     8f0:	b6 01       	movw	r22, r12
     8f2:	66 5e       	subi	r22, 0xE6	; 230
     8f4:	79 4f       	sbci	r23, 0xF9	; 249
     8f6:	8f 4f       	sbci	r24, 0xFF	; 255
     8f8:	9f 4f       	sbci	r25, 0xFF	; 255
	    dead = trtCurrentTime() + SECONDS2TICKS(0.2);
	    trtSleepUntil(rel, dead);
     8fa:	0e 94 3b 04 	call	0x876	; 0x876 <trtSleepUntil>
     8fe:	eb cf       	rjmp	.-42     	; 0x8d6 <IR_key>

00000900 <trtGetRelease>:
}


uint32_t trtGetRelease(void) {
  return kernel.tasks[kernel.running].release;
     900:	e0 91 f9 02 	lds	r30, 0x02F9
     904:	8b e0       	ldi	r24, 0x0B	; 11
     906:	e8 9f       	mul	r30, r24
     908:	f0 01       	movw	r30, r0
     90a:	11 24       	eor	r1, r1
     90c:	e8 50       	subi	r30, 0x08	; 8
     90e:	fd 4f       	sbci	r31, 0xFD	; 253
     910:	df 01       	movw	r26, r30
     912:	14 96       	adiw	r26, 0x04	; 4
     914:	64 81       	ldd	r22, Z+4	; 0x04
     916:	11 96       	adiw	r26, 0x01	; 1
     918:	7c 91       	ld	r23, X
     91a:	11 97       	sbiw	r26, 0x01	; 1
}
     91c:	12 96       	adiw	r26, 0x02	; 2
     91e:	8c 91       	ld	r24, X
     920:	12 97       	sbiw	r26, 0x02	; 2
     922:	13 96       	adiw	r26, 0x03	; 3
     924:	9c 91       	ld	r25, X
     926:	08 95       	ret

00000928 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
  return kernel.tasks[kernel.running].deadline;
     928:	e0 91 f9 02 	lds	r30, 0x02F9
     92c:	8b e0       	ldi	r24, 0x0B	; 11
     92e:	e8 9f       	mul	r30, r24
     930:	f0 01       	movw	r30, r0
     932:	11 24       	eor	r1, r1
     934:	e8 50       	subi	r30, 0x08	; 8
     936:	fd 4f       	sbci	r31, 0xFD	; 253
     938:	df 01       	movw	r26, r30
     93a:	18 96       	adiw	r26, 0x08	; 8
     93c:	60 85       	ldd	r22, Z+8	; 0x08
     93e:	11 96       	adiw	r26, 0x01	; 1
     940:	7c 91       	ld	r23, X
     942:	11 97       	sbiw	r26, 0x01	; 1
}
     944:	12 96       	adiw	r26, 0x02	; 2
     946:	8c 91       	ld	r24, X
     948:	12 97       	sbiw	r26, 0x02	; 2
     94a:	13 96       	adiw	r26, 0x03	; 3
     94c:	9c 91       	ld	r25, X
     94e:	08 95       	ret

00000950 <trtTerminate>:

void trtTerminate(void) {

  cli();
     950:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     952:	e0 91 f9 02 	lds	r30, 0x02F9
     956:	8b e0       	ldi	r24, 0x0B	; 11
     958:	e8 9f       	mul	r30, r24
     95a:	f0 01       	movw	r30, r0
     95c:	11 24       	eor	r1, r1
     95e:	e8 50       	subi	r30, 0x08	; 8
     960:	fd 4f       	sbci	r31, 0xFD	; 253
     962:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     964:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_13>

00000968 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     968:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     96a:	e8 2f       	mov	r30, r24
     96c:	f0 e0       	ldi	r31, 0x00	; 0
  temp = *s ;
     96e:	e9 50       	subi	r30, 0x09	; 9
     970:	fd 4f       	sbci	r31, 0xFD	; 253
     972:	86 a5       	ldd	r24, Z+46	; 0x2e
  if ((*s) > 0) {
     974:	88 23       	and	r24, r24
     976:	19 f0       	breq	.+6      	; 0x97e <trtAccept+0x16>
    (*s)--;
     978:	98 2f       	mov	r25, r24
     97a:	91 50       	subi	r25, 0x01	; 1
     97c:	96 a7       	std	Z+46, r25	; 0x2e
  } 
  sei(); // reenable interrupts
     97e:	78 94       	sei
  return temp ;
}
     980:	08 95       	ret

00000982 <__vector_16>:
// increments task timers
// Full duplex transmit/receive
// sends ir character (if ready)
// receives ir char (if valid)
// builds ir receive buffer
ISR (TIMER0_COMPA_vect) {
     982:	1f 92       	push	r1
     984:	0f 92       	push	r0
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	0f 92       	push	r0
     98a:	11 24       	eor	r1, r1
     98c:	0b b6       	in	r0, 0x3b	; 59
     98e:	0f 92       	push	r0
     990:	8f 93       	push	r24
     992:	9f 93       	push	r25
     994:	ef 93       	push	r30
     996:	ff 93       	push	r31
	unsigned char c ;
	    
	//**********************
  	// send an ir char if tx is ready and still char in buffer to send
	// and USART is ready
	if (ir_tx_ready ){ //&& ir_tx_buffer[ir_tx_count]>0
     998:	80 91 e4 02 	lds	r24, 0x02E4
     99c:	88 23       	and	r24, r24
     99e:	01 f1       	breq	.+64     	; 0x9e0 <__vector_16+0x5e>
		if (UCSR0A & (1<<UDRE0)) UDR0 = ir_tx_buffer[ir_tx_count++];
     9a0:	80 91 c0 00 	lds	r24, 0x00C0
     9a4:	85 ff       	sbrs	r24, 5
     9a6:	0c c0       	rjmp	.+24     	; 0x9c0 <__vector_16+0x3e>
     9a8:	80 91 3c 03 	lds	r24, 0x033C
     9ac:	e8 2f       	mov	r30, r24
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	ee 55       	subi	r30, 0x5E	; 94
     9b2:	fd 4f       	sbci	r31, 0xFD	; 253
     9b4:	90 81       	ld	r25, Z
     9b6:	90 93 c6 00 	sts	0x00C6, r25
     9ba:	8f 5f       	subi	r24, 0xFF	; 255
     9bc:	80 93 3c 03 	sts	0x033C, r24
		if (ir_tx_buffer[ir_tx_count]==0x00) ir_tx_ready = 0 ; //}of buffer
     9c0:	e0 91 3c 03 	lds	r30, 0x033C
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	ee 55       	subi	r30, 0x5E	; 94
     9c8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ca:	80 81       	ld	r24, Z
     9cc:	81 11       	cpse	r24, r1
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <__vector_16+0x52>
     9d0:	10 92 e4 02 	sts	0x02E4, r1
		if (ir_tx_count >= buffer_size) ir_tx_ready = 0; // buffer overrun
     9d4:	80 91 3c 03 	lds	r24, 0x033C
     9d8:	80 34       	cpi	r24, 0x40	; 64
     9da:	10 f0       	brcs	.+4      	; 0x9e0 <__vector_16+0x5e>
     9dc:	10 92 e4 02 	sts	0x02E4, r1
	}
	
	//**********************
  	// recv an ir char if data ready 
  	// otherwise set c to null 
	if (UCSR0A & (1<<RXC0) ) {
     9e0:	80 91 c0 00 	lds	r24, 0x00C0
     9e4:	87 ff       	sbrs	r24, 7
     9e6:	2b c0       	rjmp	.+86     	; 0xa3e <__vector_16+0xbc>
		c = UDR0 ; // valid char 
     9e8:	80 91 c6 00 	lds	r24, 0x00C6
	else c = 0 ; // nonvalid

	//**********************
	// append character to the received string
	// if character is valid and we expect a string
	if (c>0) { //&& (ir_rx_ready==0)) {
     9ec:	88 23       	and	r24, r24
     9ee:	39 f1       	breq	.+78     	; 0xa3e <__vector_16+0xbc>

		if (c == start_token) { // restart the string
     9f0:	83 32       	cpi	r24, 0x23	; 35
     9f2:	19 f4       	brne	.+6      	; 0x9fa <__vector_16+0x78>
			ir_rx_count = 0 ;
     9f4:	10 92 3b 03 	sts	0x033B, r1
     9f8:	22 c0       	rjmp	.+68     	; 0xa3e <__vector_16+0xbc>
		}

		else if (c == end_token){ //}the string
     9fa:	85 32       	cpi	r24, 0x25	; 37
     9fc:	51 f4       	brne	.+20     	; 0xa12 <__vector_16+0x90>
			ir_rx_buffer[ir_rx_count] = 0x00 ;
     9fe:	e0 91 3b 03 	lds	r30, 0x033B
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	e2 5c       	subi	r30, 0xC2	; 194
     a06:	fc 4f       	sbci	r31, 0xFC	; 252
     a08:	10 82       	st	Z, r1
			ir_rx_ready = 1 ;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 e5 02 	sts	0x02E5, r24
     a10:	16 c0       	rjmp	.+44     	; 0xa3e <__vector_16+0xbc>
		}

		else { // add to string and check for buffer overrun
			ir_rx_buffer[ir_rx_count++] = c ;
     a12:	90 91 3b 03 	lds	r25, 0x033B
     a16:	e9 2f       	mov	r30, r25
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	e2 5c       	subi	r30, 0xC2	; 194
     a1c:	fc 4f       	sbci	r31, 0xFC	; 252
     a1e:	80 83       	st	Z, r24
     a20:	9f 5f       	subi	r25, 0xFF	; 255
     a22:	90 93 3b 03 	sts	0x033B, r25
			if (ir_rx_count >= buffer_size) { // buffer overrun
     a26:	80 91 3b 03 	lds	r24, 0x033B
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	40 f0       	brcs	.+16     	; 0xa3e <__vector_16+0xbc>
				ir_rx_ready = 2;
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	80 93 e5 02 	sts	0x02E5, r24
				ir_rx_buffer[buffer_size-1] = 0x00 ;
     a34:	10 92 7d 03 	sts	0x037D, r1
				ir_rx_count = buffer_size -1 ; //???
     a38:	8f e3       	ldi	r24, 0x3F	; 63
     a3a:	80 93 3b 03 	sts	0x033B, r24
			}
		}

	} //}if c>0
} 
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	9f 91       	pop	r25
     a44:	8f 91       	pop	r24
     a46:	0f 90       	pop	r0
     a48:	0b be       	out	0x3b, r0	; 59
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <ir_send_packet>:

//**********************************************************
// IR send
// Input transmitter id and string packet payload
void ir_send_packet(char tx_id, char ir_data[])
{
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
	char ir_tx_ck_sum, ir_tx_ck_sum1, ir_tx_ck_sum2 ;
	char i ;
	
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
     a58:	fb 01       	movw	r30, r22
     a5a:	01 90       	ld	r0, Z+
     a5c:	00 20       	and	r0, r0
     a5e:	e9 f7       	brne	.-6      	; 0xa5a <ir_send_packet+0x6>
     a60:	31 97       	sbiw	r30, 0x01	; 1
     a62:	e6 1b       	sub	r30, r22
     a64:	f7 0b       	sbc	r31, r23
     a66:	40 e0       	ldi	r20, 0x00	; 0
{
	char ir_tx_ck_sum, ir_tx_ck_sum1, ir_tx_ck_sum2 ;
	char i ;
	
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
     a68:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0; i<strlen(ir_data); i++)
     a6a:	06 c0       	rjmp	.+12     	; 0xa78 <ir_send_packet+0x24>
		ir_tx_ck_sum ^= ir_data[i] ;
     a6c:	db 01       	movw	r26, r22
     a6e:	a2 0f       	add	r26, r18
     a70:	b3 1f       	adc	r27, r19
     a72:	2c 91       	ld	r18, X
     a74:	92 27       	eor	r25, r18
	char ir_tx_ck_sum, ir_tx_ck_sum1, ir_tx_ck_sum2 ;
	char i ;
	
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
     a76:	4f 5f       	subi	r20, 0xFF	; 255
     a78:	24 2f       	mov	r18, r20
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	2e 17       	cp	r18, r30
     a7e:	3f 07       	cpc	r19, r31
     a80:	a8 f3       	brcs	.-22     	; 0xa6c <ir_send_packet+0x18>
	// chop the check sum into two 1/2 bytes and add a bit
	ir_tx_ck_sum1 = 0x10 + (ir_tx_ck_sum & 0x0f) ;
	ir_tx_ck_sum2 = 0x10 + ((ir_tx_ck_sum>>4) & 0x0f) ;

	// format send string
  	sprintf(ir_tx_buffer,"%c%c%s%c%c%c", 
     a82:	1f 92       	push	r1
     a84:	25 e2       	ldi	r18, 0x25	; 37
     a86:	2f 93       	push	r18
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
		ir_tx_ck_sum ^= ir_data[i] ;
	// chop the check sum into two 1/2 bytes and add a bit
	ir_tx_ck_sum1 = 0x10 + (ir_tx_ck_sum & 0x0f) ;
	ir_tx_ck_sum2 = 0x10 + ((ir_tx_ck_sum>>4) & 0x0f) ;
     a88:	29 2f       	mov	r18, r25
     a8a:	22 95       	swap	r18
     a8c:	2f 70       	andi	r18, 0x0F	; 15
     a8e:	20 5f       	subi	r18, 0xF0	; 240

	// format send string
  	sprintf(ir_tx_buffer,"%c%c%s%c%c%c", 
     a90:	1f 92       	push	r1
     a92:	2f 93       	push	r18
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
		ir_tx_ck_sum ^= ir_data[i] ;
	// chop the check sum into two 1/2 bytes and add a bit
	ir_tx_ck_sum1 = 0x10 + (ir_tx_ck_sum & 0x0f) ;
     a94:	9f 70       	andi	r25, 0x0F	; 15
     a96:	90 5f       	subi	r25, 0xF0	; 240
	ir_tx_ck_sum2 = 0x10 + ((ir_tx_ck_sum>>4) & 0x0f) ;

	// format send string
  	sprintf(ir_tx_buffer,"%c%c%s%c%c%c", 
     a98:	1f 92       	push	r1
     a9a:	9f 93       	push	r25
     a9c:	7f 93       	push	r23
     a9e:	6f 93       	push	r22
     aa0:	1f 92       	push	r1
     aa2:	8f 93       	push	r24
     aa4:	1f 92       	push	r1
     aa6:	83 e2       	ldi	r24, 0x23	; 35
     aa8:	8f 93       	push	r24
     aaa:	89 e3       	ldi	r24, 0x39	; 57
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	9f 93       	push	r25
     ab0:	8f 93       	push	r24
     ab2:	82 ea       	ldi	r24, 0xA2	; 162
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	0e 94 00 07 	call	0xe00	; 0xe00 <sprintf>
		start_token, tx_id, ir_data, ir_tx_ck_sum1, ir_tx_ck_sum2, end_token );
  	ir_tx_count = 0 ;
     abe:	10 92 3c 03 	sts	0x033C, r1
  	ir_tx_ready = 1 ;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	80 93 e4 02 	sts	0x02E4, r24

	tx_send_time =  trtCurrentTime();
     ac8:	0e 94 21 04 	call	0x842	; 0x842 <trtCurrentTime>
     acc:	60 93 f4 02 	sts	0x02F4, r22
     ad0:	70 93 f5 02 	sts	0x02F5, r23
     ad4:	80 93 f6 02 	sts	0x02F6, r24
     ad8:	90 93 f7 02 	sts	0x02F7, r25

	// wait 
	while (ir_tx_ready && (trtCurrentTime() < tx_send_time + ir_tx_timeout)) {};
     adc:	8d b7       	in	r24, 0x3d	; 61
     ade:	9e b7       	in	r25, 0x3e	; 62
     ae0:	40 96       	adiw	r24, 0x10	; 16
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	9e bf       	out	0x3e, r25	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	8d bf       	out	0x3d, r24	; 61
     aec:	80 91 e4 02 	lds	r24, 0x02E4
     af0:	88 23       	and	r24, r24
     af2:	99 f0       	breq	.+38     	; 0xb1a <ir_send_packet+0xc6>
     af4:	0e 94 21 04 	call	0x842	; 0x842 <trtCurrentTime>
     af8:	00 91 f4 02 	lds	r16, 0x02F4
     afc:	10 91 f5 02 	lds	r17, 0x02F5
     b00:	20 91 f6 02 	lds	r18, 0x02F6
     b04:	30 91 f7 02 	lds	r19, 0x02F7
     b08:	0c 59       	subi	r16, 0x9C	; 156
     b0a:	1f 4f       	sbci	r17, 0xFF	; 255
     b0c:	2f 4f       	sbci	r18, 0xFF	; 255
     b0e:	3f 4f       	sbci	r19, 0xFF	; 255
     b10:	60 17       	cp	r22, r16
     b12:	71 07       	cpc	r23, r17
     b14:	82 07       	cpc	r24, r18
     b16:	93 07       	cpc	r25, r19
     b18:	48 f3       	brcs	.-46     	; 0xaec <ir_send_packet+0x98>
	
}
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	08 95       	ret

00000b20 <ir_rec_packet>:
// IR Receive
// input expected transmitter id
// returns zero if payload is valid and returns payload
// 1 means no data; 2 means buffer overrun; 3 means bad tx id; 4 means bad checksum
char ir_rec_packet(char tx_id, char ir_data[])
{
     b20:	28 2f       	mov	r18, r24
     b22:	cb 01       	movw	r24, r22
	char rx_status = 0;
	char ir_rx_ck_sum, ir_rx_ck_sum_ref;
	char i ;
	char buf_len ;

	buf_len = (char)strlen(ir_rx_buffer) ;
     b24:	ee e3       	ldi	r30, 0x3E	; 62
     b26:	f3 e0       	ldi	r31, 0x03	; 3
     b28:	01 90       	ld	r0, Z+
     b2a:	00 20       	and	r0, r0
     b2c:	e9 f7       	brne	.-6      	; 0xb28 <ir_rec_packet+0x8>
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	ee 53       	subi	r30, 0x3E	; 62
     b32:	f3 40       	sbci	r31, 0x03	; 3
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) {rx_status = 2; return rx_status;} // buffer overrun
     b34:	30 91 e5 02 	lds	r19, 0x02E5
     b38:	32 30       	cpi	r19, 0x02	; 2
     b3a:	09 f4       	brne	.+2      	; 0xb3e <ir_rec_packet+0x1e>
     b3c:	3f c0       	rjmp	.+126    	; 0xbbc <ir_rec_packet+0x9c>
	if (ir_rx_ready == 0) {rx_status = 1; return rx_status;} // no data -- timeout
     b3e:	30 91 e5 02 	lds	r19, 0x02E5
     b42:	33 23       	and	r19, r19
     b44:	09 f4       	brne	.+2      	; 0xb48 <ir_rec_packet+0x28>
     b46:	3e c0       	rjmp	.+124    	; 0xbc4 <ir_rec_packet+0xa4>
	if (ir_rx_buffer[0] != tx_id) {rx_status = 3; return rx_status;} // bad transmitter id
     b48:	30 91 3e 03 	lds	r19, 0x033E
     b4c:	32 13       	cpse	r19, r18
     b4e:	38 c0       	rjmp	.+112    	; 0xbc0 <ir_rec_packet+0xa0>
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data
     b50:	20 91 e5 02 	lds	r18, 0x02E5
     b54:	21 30       	cpi	r18, 0x01	; 1
     b56:	b1 f5       	brne	.+108    	; 0xbc4 <ir_rec_packet+0xa4>
     b58:	71 e0       	ldi	r23, 0x01	; 1
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <ir_rec_packet+0x48>

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
     b5e:	a2 5c       	subi	r26, 0xC2	; 194
     b60:	bc 4f       	sbci	r27, 0xFC	; 252
     b62:	2c 91       	ld	r18, X
     b64:	62 27       	eor	r22, r18
	if (ir_rx_buffer[0] != tx_id) {rx_status = 3; return rx_status;} // bad transmitter id
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
     b66:	7f 5f       	subi	r23, 0xFF	; 255
     b68:	a7 2f       	mov	r26, r23
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	2e 2f       	mov	r18, r30
     b6e:	e0 34       	cpi	r30, 0x40	; 64
     b70:	08 f0       	brcs	.+2      	; 0xb74 <ir_rec_packet+0x54>
     b72:	2f e3       	ldi	r18, 0x3F	; 63
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	a9 01       	movw	r20, r18
     b78:	42 50       	subi	r20, 0x02	; 2
     b7a:	51 09       	sbc	r21, r1
     b7c:	a4 17       	cp	r26, r20
     b7e:	b5 07       	cpc	r27, r21
     b80:	74 f3       	brlt	.-36     	; 0xb5e <ir_rec_packet+0x3e>
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
     b82:	fa 01       	movw	r30, r20
     b84:	e2 5c       	subi	r30, 0xC2	; 194
     b86:	fc 4f       	sbci	r31, 0xFC	; 252
     b88:	40 81       	ld	r20, Z
		 (ir_rx_buffer[buf_len-1]<<4) ;
     b8a:	d9 01       	movw	r26, r18
     b8c:	a3 5c       	subi	r26, 0xC3	; 195
     b8e:	bc 4f       	sbci	r27, 0xFC	; 252
     b90:	2c 91       	ld	r18, X
	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
     b92:	4f 70       	andi	r20, 0x0F	; 15
     b94:	30 e1       	ldi	r19, 0x10	; 16
     b96:	23 9f       	mul	r18, r19
     b98:	40 0d       	add	r20, r0
     b9a:	11 24       	eor	r1, r1
		 (ir_rx_buffer[buf_len-1]<<4) ;

    if (ir_rx_ck_sum_ref != ir_rx_ck_sum) 
     b9c:	46 13       	cpse	r20, r22
     b9e:	14 c0       	rjmp	.+40     	; 0xbc8 <ir_rec_packet+0xa8>
		{rx_status = 4; return rx_status;}  // bad check sum

	// set up the valid data return stuff
	ir_rx_buffer[0] = ' '; // strip the transmit id
     ba0:	20 e2       	ldi	r18, 0x20	; 32
     ba2:	20 93 3e 03 	sts	0x033E, r18
	ir_rx_buffer[buf_len-2] = 0x00; // strip the check sum and trailer
     ba6:	10 82       	st	Z, r1
	ir_rx_ready = 0 ;
     ba8:	10 92 e5 02 	sts	0x02E5, r1
	//trim initial space using ir_rx_buffer+1
	strlcpy(ir_data, ir_rx_buffer+1, buffer_size) ; 
     bac:	40 e4       	ldi	r20, 0x40	; 64
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	6f e3       	ldi	r22, 0x3F	; 63
     bb2:	73 e0       	ldi	r23, 0x03	; 3
     bb4:	0e 94 b1 06 	call	0xd62	; 0xd62 <strlcpy>

	return rx_status ;
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	08 95       	ret

	buf_len = (char)strlen(ir_rx_buffer) ;
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) {rx_status = 2; return rx_status;} // buffer overrun
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	08 95       	ret
	if (ir_rx_ready == 0) {rx_status = 1; return rx_status;} // no data -- timeout
	if (ir_rx_buffer[0] != tx_id) {rx_status = 3; return rx_status;} // bad transmitter id
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	08 95       	ret
	buf_len = (char)strlen(ir_rx_buffer) ;
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) {rx_status = 2; return rx_status;} // buffer overrun
	if (ir_rx_ready == 0) {rx_status = 1; return rx_status;} // no data -- timeout
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	08 95       	ret
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
		 (ir_rx_buffer[buf_len-1]<<4) ;

    if (ir_rx_ck_sum_ref != ir_rx_ck_sum) 
		{rx_status = 4; return rx_status;}  // bad check sum
     bc8:	84 e0       	ldi	r24, 0x04	; 4
	ir_rx_ready = 0 ;
	//trim initial space using ir_rx_buffer+1
	strlcpy(ir_data, ir_rx_buffer+1, buffer_size) ; 

	return rx_status ;
}
     bca:	08 95       	ret

00000bcc <initialize_IR>:
//Set it all up
void initialize_IR(void)
{
  //********************    
  //set up timer 0 for 1 mSec timebase 
  TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	80 93 6e 00 	sts	0x006E, r24
  OCR0A = 249 ;//
     bd2:	99 ef       	ldi	r25, 0xF9	; 249
     bd4:	97 bd       	out	0x27, r25	; 39
  //set prescalar to divide by 64 (4 microsec/tick)
  TCCR0B= 3; //;	
     bd6:	93 e0       	ldi	r25, 0x03	; 3
     bd8:	95 bd       	out	0x25, r25	; 37
  // turn on clear-on-match
  TCCR0A= (1<<WGM01) ;
     bda:	84 bd       	out	0x24, r24	; 36
  // IR carrier generator
  // set up timer 2 for square wave with NO ISR
  // 56000 Hz => 1/2 cycle 8.928 microsec = 143 cycles
  // Connect D7 thru resistor to (+)IR_LED(-) to TXD:: D7--/\/\--|>|----TXD
  //
  OCR2A = 142 ; //143 cycles/half-period
     bdc:	8e e8       	ldi	r24, 0x8E	; 142
     bde:	80 93 b3 00 	sts	0x00B3, r24
  //  count at full rate
  TCCR2B =  1;	
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 93 b1 00 	sts	0x00B1, r24
  // set to toggle OC2A, clear on match,
  TCCR2A = (1<<COM2A0) | (1<<WGM21) ;
     be8:	82 e4       	ldi	r24, 0x42	; 66
     bea:	80 93 b0 00 	sts	0x00B0, r24
  // PORT D.7 is OC2A
  DDRD = (1<<PIND7) ;	
     bee:	80 e8       	ldi	r24, 0x80	; 128
     bf0:	8a b9       	out	0x0a, r24	; 10
  //********************
  //init UART0 for IR comm
  UBRR0L = (F_CPU / (16UL * IR_UART_BAUD)) - 1;
     bf2:	8f ec       	ldi	r24, 0xCF	; 207
     bf4:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     bf8:	88 e1       	ldi	r24, 0x18	; 24
     bfa:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1<<UCSZ01) | (1<<USBS0) ; // 7 bit | 2 stop bits
     bfe:	8c e0       	ldi	r24, 0x0C	; 12
     c00:	80 93 c2 00 	sts	0x00C2, r24

  //init UART1 for PC comm
  UBRR1L = (F_CPU / (16UL * PC_UART_BAUD)) - 1;
     c04:	87 e6       	ldi	r24, 0x67	; 103
     c06:	80 93 cc 00 	sts	0x00CC, r24
  UCSR1B = _BV(TXEN1) ; //| _BV(RXEN1); /* tx/rx enable */
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	80 93 c9 00 	sts	0x00C9, r24
  fprintf(stdout,"\n\r...Starting IR comm ...\n\r");
     c10:	60 91 82 03 	lds	r22, 0x0382
     c14:	70 91 83 03 	lds	r23, 0x0383
     c18:	86 e4       	ldi	r24, 0x46	; 70
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputs>
  
  //********************
  //crank up the ISRs
  sei();
     c20:	78 94       	sei
     c22:	08 95       	ret

00000c24 <read_switches>:
//recieved time used to prevent man in the middle attacks
char* challenge_time_string; 

// Synchronized task to read the switches
void read_switches() {
	trtWait(SEM_SHARED);
     c24:	86 e0       	ldi	r24, 0x06	; 6
     c26:	0e 94 c3 02 	call	0x586	; 0x586 <trtWait>
	// Read the switches & decide to set the lock on or off
	// Read switch 0 to select test or normal mode
	if (~PINB & 0x01) {
     c2a:	18 99       	sbic	0x03, 0	; 3
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <read_switches+0x1a>
		mode = NORMAL;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	80 93 ea 02 	sts	0x02EA, r24
		// Read switch 1 to select key or lock functionality
		if (~PINB & 0x02) function = fKEY;
     c34:	19 9b       	sbis	0x03, 1	; 3
     c36:	06 c0       	rjmp	.+12     	; 0xc44 <read_switches+0x20>
		else function = fLOCK;
     c38:	10 92 eb 02 	sts	0x02EB, r1
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <read_switches+0x24>
	}
	else {
		mode = TEST;
     c3e:	10 92 ea 02 	sts	0x02EA, r1
		function = fBOTH;
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	80 93 eb 02 	sts	0x02EB, r24
	}
		// Read switch 2 to select authorized or unauthorized
	authorization = ~PINB & 0x04 ? AUTHORIZED : UNAUTHORIZED;
     c48:	1a 99       	sbic	0x03, 2	; 3
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <read_switches+0x2c>
     c4c:	8e e3       	ldi	r24, 0x3E	; 62
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <read_switches+0x2e>
     c50:	8c e3       	ldi	r24, 0x3C	; 60
     c52:	80 93 3a 03 	sts	0x033A, r24
	fprintf(stdout, "%c %c %c", mode, function, authorization);
     c56:	1f 92       	push	r1
     c58:	8f 93       	push	r24
     c5a:	80 91 eb 02 	lds	r24, 0x02EB
     c5e:	1f 92       	push	r1
     c60:	8f 93       	push	r24
     c62:	80 91 ea 02 	lds	r24, 0x02EA
     c66:	1f 92       	push	r1
     c68:	8f 93       	push	r24
     c6a:	82 e6       	ldi	r24, 0x62	; 98
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	9f 93       	push	r25
     c70:	8f 93       	push	r24
     c72:	80 91 83 03 	lds	r24, 0x0383
     c76:	8f 93       	push	r24
     c78:	80 91 82 03 	lds	r24, 0x0382
     c7c:	8f 93       	push	r24
     c7e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <fprintf>
	trtSignal(SEM_SHARED);
     c82:	8d b7       	in	r24, 0x3d	; 61
     c84:	9e b7       	in	r25, 0x3e	; 62
     c86:	0a 96       	adiw	r24, 0x0a	; 10
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	9e bf       	out	0x3e, r25	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	8d bf       	out	0x3d, r24	; 61
     c92:	86 e0       	ldi	r24, 0x06	; 6
     c94:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <trtSignal>

00000c98 <main>:
}

// --- Main Program ----------------------------------
int main(void) {

  DDRC = 0x01;    	// led connections
     c98:	c1 e0       	ldi	r28, 0x01	; 1
     c9a:	c7 b9       	out	0x07, r28	; 7
  PORTC = 0x00;
     c9c:	18 b8       	out	0x08, r1	; 8
  DDRB = 0x00; 		// switch connections
     c9e:	14 b8       	out	0x04, r1	; 4
  PORTB = 0xff; 	// pullup on
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	85 b9       	out	0x05, r24	; 5

  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     ca4:	0e 94 93 00 	call	0x126	; 0x126 <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	90 93 85 03 	sts	0x0385, r25
     cb0:	80 93 84 03 	sts	0x0384, r24
     cb4:	90 93 81 03 	sts	0x0381, r25
     cb8:	80 93 80 03 	sts	0x0380, r24
     cbc:	90 93 83 03 	sts	0x0383, r25
     cc0:	80 93 82 03 	sts	0x0382, r24
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
     cc4:	bc 01       	movw	r22, r24
     cc6:	8b e6       	ldi	r24, 0x6B	; 107
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputs>

  initialize_IR();
     cce:	0e 94 e6 05 	call	0xbcc	; 0xbcc <initialize_IR>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     cd2:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     cd4:	10 92 26 03 	sts	0x0326, r1
  
  sei(); // set enabled interrupts;
     cd8:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     cda:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     cdc:	10 92 27 03 	sts	0x0327, r1
  
  sei(); // set enabled interrupts;
     ce0:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     ce2:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     ce4:	c0 93 28 03 	sts	0x0328, r28
  
  sei(); // set enabled interrupts;
     ce8:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     cea:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     cec:	c0 93 29 03 	sts	0x0329, r28
  
  sei(); // set enabled interrupts;
     cf0:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     cf2:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     cf4:	10 92 2a 03 	sts	0x032A, r1
  
  sei(); // set enabled interrupts;
     cf8:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     cfa:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     cfc:	c0 93 2b 03 	sts	0x032B, r28
  
  sei(); // set enabled interrupts;
     d00:	78 94       	sei
  
  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variable

  // --- create tasks  ----------------
  trtCreateTask(IR_lock, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.2), &(args[0]));
     d02:	5e e9       	ldi	r21, 0x9E	; 158
     d04:	c5 2e       	mov	r12, r21
     d06:	52 e0       	ldi	r21, 0x02	; 2
     d08:	d5 2e       	mov	r13, r21
     d0a:	15 e3       	ldi	r17, 0x35	; 53
     d0c:	e1 2e       	mov	r14, r17
     d0e:	1c e0       	ldi	r17, 0x0C	; 12
     d10:	f1 2e       	mov	r15, r17
     d12:	00 e0       	ldi	r16, 0x00	; 0
     d14:	10 e0       	ldi	r17, 0x00	; 0
     d16:	2a e1       	ldi	r18, 0x1A	; 26
     d18:	36 e0       	ldi	r19, 0x06	; 6
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	68 ee       	ldi	r22, 0xE8	; 232
     d20:	73 e0       	ldi	r23, 0x03	; 3
     d22:	80 e5       	ldi	r24, 0x50	; 80
     d24:	94 e0       	ldi	r25, 0x04	; 4
     d26:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <trtCreateTask>
  trtCreateTask(IR_key, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.2), &(args[1]));
     d2a:	70 ea       	ldi	r23, 0xA0	; 160
     d2c:	c7 2e       	mov	r12, r23
     d2e:	72 e0       	ldi	r23, 0x02	; 2
     d30:	d7 2e       	mov	r13, r23
     d32:	2a e1       	ldi	r18, 0x1A	; 26
     d34:	36 e0       	ldi	r19, 0x06	; 6
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	68 ee       	ldi	r22, 0xE8	; 232
     d3c:	73 e0       	ldi	r23, 0x03	; 3
     d3e:	8b e6       	ldi	r24, 0x6B	; 107
     d40:	94 e0       	ldi	r25, 0x04	; 4
     d42:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <trtCreateTask>

  // --- Idle task --------------------------------------
  // For debugging, blink an LED
  // For production, you would probably comment out the body of the WHILE
  while (1) {
  	PORTC = PORTC ^ 0x01 ;
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	88 b1       	in	r24, 0x08	; 8
     d4a:	89 27       	eor	r24, r25
     d4c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d4e:	2f ef       	ldi	r18, 0xFF	; 255
     d50:	39 e6       	ldi	r19, 0x69	; 105
     d52:	88 e1       	ldi	r24, 0x18	; 24
     d54:	21 50       	subi	r18, 0x01	; 1
     d56:	30 40       	sbci	r19, 0x00	; 0
     d58:	80 40       	sbci	r24, 0x00	; 0
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <main+0xbc>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <main+0xc6>
     d5e:	00 00       	nop
     d60:	f3 cf       	rjmp	.-26     	; 0xd48 <main+0xb0>

00000d62 <strlcpy>:
     d62:	dc 01       	movw	r26, r24
     d64:	fb 01       	movw	r30, r22
     d66:	41 50       	subi	r20, 0x01	; 1
     d68:	50 40       	sbci	r21, 0x00	; 0
     d6a:	58 f0       	brcs	.+22     	; 0xd82 <strlcpy+0x20>
     d6c:	49 f0       	breq	.+18     	; 0xd80 <strlcpy+0x1e>
     d6e:	01 90       	ld	r0, Z+
     d70:	0d 92       	st	X+, r0
     d72:	00 20       	and	r0, r0
     d74:	c1 f7       	brne	.-16     	; 0xd66 <strlcpy+0x4>
     d76:	e6 1b       	sub	r30, r22
     d78:	f7 0b       	sbc	r31, r23
     d7a:	31 97       	sbiw	r30, 0x01	; 1
     d7c:	cf 01       	movw	r24, r30
     d7e:	08 95       	ret
     d80:	1c 92       	st	X, r1
     d82:	01 90       	ld	r0, Z+
     d84:	00 20       	and	r0, r0
     d86:	e9 f7       	brne	.-6      	; 0xd82 <strlcpy+0x20>
     d88:	f6 cf       	rjmp	.-20     	; 0xd76 <strlcpy+0x14>

00000d8a <fprintf>:
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	ce 01       	movw	r24, r28
     d94:	09 96       	adiw	r24, 0x09	; 9
     d96:	ac 01       	movw	r20, r24
     d98:	6f 81       	ldd	r22, Y+7	; 0x07
     d9a:	78 85       	ldd	r23, Y+8	; 0x08
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	0e 94 2f 07 	call	0xe5e	; 0xe5e <vfprintf>
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <fputs>:
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	7c 01       	movw	r14, r24
     db8:	8b 01       	movw	r16, r22
     dba:	db 01       	movw	r26, r22
     dbc:	13 96       	adiw	r26, 0x03	; 3
     dbe:	8c 91       	ld	r24, X
     dc0:	81 ff       	sbrs	r24, 1
     dc2:	14 c0       	rjmp	.+40     	; 0xdec <fputs+0x42>
     dc4:	c0 e0       	ldi	r28, 0x00	; 0
     dc6:	d0 e0       	ldi	r29, 0x00	; 0
     dc8:	0b c0       	rjmp	.+22     	; 0xde0 <fputs+0x36>
     dca:	d8 01       	movw	r26, r16
     dcc:	18 96       	adiw	r26, 0x08	; 8
     dce:	ed 91       	ld	r30, X+
     dd0:	fc 91       	ld	r31, X
     dd2:	19 97       	sbiw	r26, 0x09	; 9
     dd4:	b8 01       	movw	r22, r16
     dd6:	09 95       	icall
     dd8:	89 2b       	or	r24, r25
     dda:	11 f0       	breq	.+4      	; 0xde0 <fputs+0x36>
     ddc:	cf ef       	ldi	r28, 0xFF	; 255
     dde:	df ef       	ldi	r29, 0xFF	; 255
     de0:	f7 01       	movw	r30, r14
     de2:	81 91       	ld	r24, Z+
     de4:	7f 01       	movw	r14, r30
     de6:	81 11       	cpse	r24, r1
     de8:	f0 cf       	rjmp	.-32     	; 0xdca <fputs+0x20>
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <fputs+0x46>
     dec:	cf ef       	ldi	r28, 0xFF	; 255
     dee:	df ef       	ldi	r29, 0xFF	; 255
     df0:	ce 01       	movw	r24, r28
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	08 95       	ret

00000e00 <sprintf>:
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	2e 97       	sbiw	r28, 0x0e	; 14
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	0d 89       	ldd	r16, Y+21	; 0x15
     e1a:	1e 89       	ldd	r17, Y+22	; 0x16
     e1c:	86 e0       	ldi	r24, 0x06	; 6
     e1e:	8c 83       	std	Y+4, r24	; 0x04
     e20:	1a 83       	std	Y+2, r17	; 0x02
     e22:	09 83       	std	Y+1, r16	; 0x01
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	9f e7       	ldi	r25, 0x7F	; 127
     e28:	9e 83       	std	Y+6, r25	; 0x06
     e2a:	8d 83       	std	Y+5, r24	; 0x05
     e2c:	ce 01       	movw	r24, r28
     e2e:	49 96       	adiw	r24, 0x19	; 25
     e30:	ac 01       	movw	r20, r24
     e32:	6f 89       	ldd	r22, Y+23	; 0x17
     e34:	78 8d       	ldd	r23, Y+24	; 0x18
     e36:	ce 01       	movw	r24, r28
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <vfprintf>
     e3e:	ef 81       	ldd	r30, Y+7	; 0x07
     e40:	f8 85       	ldd	r31, Y+8	; 0x08
     e42:	e0 0f       	add	r30, r16
     e44:	f1 1f       	adc	r31, r17
     e46:	10 82       	st	Z, r1
     e48:	2e 96       	adiw	r28, 0x0e	; 14
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	08 95       	ret

00000e5e <vfprintf>:
     e5e:	2f 92       	push	r2
     e60:	3f 92       	push	r3
     e62:	4f 92       	push	r4
     e64:	5f 92       	push	r5
     e66:	6f 92       	push	r6
     e68:	7f 92       	push	r7
     e6a:	8f 92       	push	r8
     e6c:	9f 92       	push	r9
     e6e:	af 92       	push	r10
     e70:	bf 92       	push	r11
     e72:	cf 92       	push	r12
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	2c 97       	sbiw	r28, 0x0c	; 12
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	7c 01       	movw	r14, r24
     e94:	6b 01       	movw	r12, r22
     e96:	8a 01       	movw	r16, r20
     e98:	fc 01       	movw	r30, r24
     e9a:	17 82       	std	Z+7, r1	; 0x07
     e9c:	16 82       	std	Z+6, r1	; 0x06
     e9e:	83 81       	ldd	r24, Z+3	; 0x03
     ea0:	81 ff       	sbrs	r24, 1
     ea2:	c6 c1       	rjmp	.+908    	; 0x1230 <vfprintf+0x3d2>
     ea4:	88 24       	eor	r8, r8
     ea6:	83 94       	inc	r8
     ea8:	91 2c       	mov	r9, r1
     eaa:	8c 0e       	add	r8, r28
     eac:	9d 1e       	adc	r9, r29
     eae:	f7 01       	movw	r30, r14
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	f6 01       	movw	r30, r12
     eb4:	93 fd       	sbrc	r25, 3
     eb6:	85 91       	lpm	r24, Z+
     eb8:	93 ff       	sbrs	r25, 3
     eba:	81 91       	ld	r24, Z+
     ebc:	6f 01       	movw	r12, r30
     ebe:	88 23       	and	r24, r24
     ec0:	09 f4       	brne	.+2      	; 0xec4 <vfprintf+0x66>
     ec2:	b2 c1       	rjmp	.+868    	; 0x1228 <vfprintf+0x3ca>
     ec4:	85 32       	cpi	r24, 0x25	; 37
     ec6:	39 f4       	brne	.+14     	; 0xed6 <vfprintf+0x78>
     ec8:	93 fd       	sbrc	r25, 3
     eca:	85 91       	lpm	r24, Z+
     ecc:	93 ff       	sbrs	r25, 3
     ece:	81 91       	ld	r24, Z+
     ed0:	6f 01       	movw	r12, r30
     ed2:	85 32       	cpi	r24, 0x25	; 37
     ed4:	29 f4       	brne	.+10     	; 0xee0 <vfprintf+0x82>
     ed6:	b7 01       	movw	r22, r14
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 4a 09 	call	0x1294	; 0x1294 <fputc>
     ede:	e7 cf       	rjmp	.-50     	; 0xeae <vfprintf+0x50>
     ee0:	51 2c       	mov	r5, r1
     ee2:	31 2c       	mov	r3, r1
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	20 32       	cpi	r18, 0x20	; 32
     ee8:	a8 f4       	brcc	.+42     	; 0xf14 <vfprintf+0xb6>
     eea:	8b 32       	cpi	r24, 0x2B	; 43
     eec:	61 f0       	breq	.+24     	; 0xf06 <vfprintf+0xa8>
     eee:	28 f4       	brcc	.+10     	; 0xefa <vfprintf+0x9c>
     ef0:	80 32       	cpi	r24, 0x20	; 32
     ef2:	51 f0       	breq	.+20     	; 0xf08 <vfprintf+0xaa>
     ef4:	83 32       	cpi	r24, 0x23	; 35
     ef6:	71 f4       	brne	.+28     	; 0xf14 <vfprintf+0xb6>
     ef8:	0b c0       	rjmp	.+22     	; 0xf10 <vfprintf+0xb2>
     efa:	8d 32       	cpi	r24, 0x2D	; 45
     efc:	39 f0       	breq	.+14     	; 0xf0c <vfprintf+0xae>
     efe:	80 33       	cpi	r24, 0x30	; 48
     f00:	49 f4       	brne	.+18     	; 0xf14 <vfprintf+0xb6>
     f02:	21 60       	ori	r18, 0x01	; 1
     f04:	28 c0       	rjmp	.+80     	; 0xf56 <vfprintf+0xf8>
     f06:	22 60       	ori	r18, 0x02	; 2
     f08:	24 60       	ori	r18, 0x04	; 4
     f0a:	25 c0       	rjmp	.+74     	; 0xf56 <vfprintf+0xf8>
     f0c:	28 60       	ori	r18, 0x08	; 8
     f0e:	23 c0       	rjmp	.+70     	; 0xf56 <vfprintf+0xf8>
     f10:	20 61       	ori	r18, 0x10	; 16
     f12:	21 c0       	rjmp	.+66     	; 0xf56 <vfprintf+0xf8>
     f14:	27 fd       	sbrc	r18, 7
     f16:	27 c0       	rjmp	.+78     	; 0xf66 <vfprintf+0x108>
     f18:	38 2f       	mov	r19, r24
     f1a:	30 53       	subi	r19, 0x30	; 48
     f1c:	3a 30       	cpi	r19, 0x0A	; 10
     f1e:	78 f4       	brcc	.+30     	; 0xf3e <vfprintf+0xe0>
     f20:	26 ff       	sbrs	r18, 6
     f22:	06 c0       	rjmp	.+12     	; 0xf30 <vfprintf+0xd2>
     f24:	fa e0       	ldi	r31, 0x0A	; 10
     f26:	5f 9e       	mul	r5, r31
     f28:	30 0d       	add	r19, r0
     f2a:	11 24       	eor	r1, r1
     f2c:	53 2e       	mov	r5, r19
     f2e:	13 c0       	rjmp	.+38     	; 0xf56 <vfprintf+0xf8>
     f30:	8a e0       	ldi	r24, 0x0A	; 10
     f32:	38 9e       	mul	r3, r24
     f34:	30 0d       	add	r19, r0
     f36:	11 24       	eor	r1, r1
     f38:	33 2e       	mov	r3, r19
     f3a:	20 62       	ori	r18, 0x20	; 32
     f3c:	0c c0       	rjmp	.+24     	; 0xf56 <vfprintf+0xf8>
     f3e:	8e 32       	cpi	r24, 0x2E	; 46
     f40:	21 f4       	brne	.+8      	; 0xf4a <vfprintf+0xec>
     f42:	26 fd       	sbrc	r18, 6
     f44:	71 c1       	rjmp	.+738    	; 0x1228 <vfprintf+0x3ca>
     f46:	20 64       	ori	r18, 0x40	; 64
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <vfprintf+0xf8>
     f4a:	8c 36       	cpi	r24, 0x6C	; 108
     f4c:	11 f4       	brne	.+4      	; 0xf52 <vfprintf+0xf4>
     f4e:	20 68       	ori	r18, 0x80	; 128
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <vfprintf+0xf8>
     f52:	88 36       	cpi	r24, 0x68	; 104
     f54:	41 f4       	brne	.+16     	; 0xf66 <vfprintf+0x108>
     f56:	f6 01       	movw	r30, r12
     f58:	93 fd       	sbrc	r25, 3
     f5a:	85 91       	lpm	r24, Z+
     f5c:	93 ff       	sbrs	r25, 3
     f5e:	81 91       	ld	r24, Z+
     f60:	6f 01       	movw	r12, r30
     f62:	81 11       	cpse	r24, r1
     f64:	c0 cf       	rjmp	.-128    	; 0xee6 <vfprintf+0x88>
     f66:	98 2f       	mov	r25, r24
     f68:	95 54       	subi	r25, 0x45	; 69
     f6a:	93 30       	cpi	r25, 0x03	; 3
     f6c:	18 f0       	brcs	.+6      	; 0xf74 <vfprintf+0x116>
     f6e:	90 52       	subi	r25, 0x20	; 32
     f70:	93 30       	cpi	r25, 0x03	; 3
     f72:	28 f4       	brcc	.+10     	; 0xf7e <vfprintf+0x120>
     f74:	0c 5f       	subi	r16, 0xFC	; 252
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
     f78:	ff e3       	ldi	r31, 0x3F	; 63
     f7a:	f9 83       	std	Y+1, r31	; 0x01
     f7c:	0d c0       	rjmp	.+26     	; 0xf98 <vfprintf+0x13a>
     f7e:	83 36       	cpi	r24, 0x63	; 99
     f80:	31 f0       	breq	.+12     	; 0xf8e <vfprintf+0x130>
     f82:	83 37       	cpi	r24, 0x73	; 115
     f84:	71 f0       	breq	.+28     	; 0xfa2 <vfprintf+0x144>
     f86:	83 35       	cpi	r24, 0x53	; 83
     f88:	09 f0       	breq	.+2      	; 0xf8c <vfprintf+0x12e>
     f8a:	5e c0       	rjmp	.+188    	; 0x1048 <vfprintf+0x1ea>
     f8c:	23 c0       	rjmp	.+70     	; 0xfd4 <vfprintf+0x176>
     f8e:	f8 01       	movw	r30, r16
     f90:	80 81       	ld	r24, Z
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	0e 5f       	subi	r16, 0xFE	; 254
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	44 24       	eor	r4, r4
     f9a:	43 94       	inc	r4
     f9c:	51 2c       	mov	r5, r1
     f9e:	54 01       	movw	r10, r8
     fa0:	15 c0       	rjmp	.+42     	; 0xfcc <vfprintf+0x16e>
     fa2:	38 01       	movw	r6, r16
     fa4:	f2 e0       	ldi	r31, 0x02	; 2
     fa6:	6f 0e       	add	r6, r31
     fa8:	71 1c       	adc	r7, r1
     faa:	f8 01       	movw	r30, r16
     fac:	a0 80       	ld	r10, Z
     fae:	b1 80       	ldd	r11, Z+1	; 0x01
     fb0:	26 ff       	sbrs	r18, 6
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <vfprintf+0x15c>
     fb4:	65 2d       	mov	r22, r5
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <vfprintf+0x160>
     fba:	6f ef       	ldi	r22, 0xFF	; 255
     fbc:	7f ef       	ldi	r23, 0xFF	; 255
     fbe:	c5 01       	movw	r24, r10
     fc0:	2c 87       	std	Y+12, r18	; 0x0c
     fc2:	0e 94 3f 09 	call	0x127e	; 0x127e <strnlen>
     fc6:	2c 01       	movw	r4, r24
     fc8:	83 01       	movw	r16, r6
     fca:	2c 85       	ldd	r18, Y+12	; 0x0c
     fcc:	6f e7       	ldi	r22, 0x7F	; 127
     fce:	26 2e       	mov	r2, r22
     fd0:	22 22       	and	r2, r18
     fd2:	18 c0       	rjmp	.+48     	; 0x1004 <vfprintf+0x1a6>
     fd4:	38 01       	movw	r6, r16
     fd6:	f2 e0       	ldi	r31, 0x02	; 2
     fd8:	6f 0e       	add	r6, r31
     fda:	71 1c       	adc	r7, r1
     fdc:	f8 01       	movw	r30, r16
     fde:	a0 80       	ld	r10, Z
     fe0:	b1 80       	ldd	r11, Z+1	; 0x01
     fe2:	26 ff       	sbrs	r18, 6
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <vfprintf+0x18e>
     fe6:	65 2d       	mov	r22, r5
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <vfprintf+0x192>
     fec:	6f ef       	ldi	r22, 0xFF	; 255
     fee:	7f ef       	ldi	r23, 0xFF	; 255
     ff0:	c5 01       	movw	r24, r10
     ff2:	2c 87       	std	Y+12, r18	; 0x0c
     ff4:	0e 94 34 09 	call	0x1268	; 0x1268 <strnlen_P>
     ff8:	2c 01       	movw	r4, r24
     ffa:	2c 85       	ldd	r18, Y+12	; 0x0c
     ffc:	50 e8       	ldi	r21, 0x80	; 128
     ffe:	25 2e       	mov	r2, r21
    1000:	22 2a       	or	r2, r18
    1002:	83 01       	movw	r16, r6
    1004:	23 fc       	sbrc	r2, 3
    1006:	1c c0       	rjmp	.+56     	; 0x1040 <vfprintf+0x1e2>
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <vfprintf+0x1b8>
    100a:	b7 01       	movw	r22, r14
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 4a 09 	call	0x1294	; 0x1294 <fputc>
    1014:	3a 94       	dec	r3
    1016:	83 2d       	mov	r24, r3
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	48 16       	cp	r4, r24
    101c:	59 06       	cpc	r5, r25
    101e:	a8 f3       	brcs	.-22     	; 0x100a <vfprintf+0x1ac>
    1020:	0f c0       	rjmp	.+30     	; 0x1040 <vfprintf+0x1e2>
    1022:	f5 01       	movw	r30, r10
    1024:	27 fc       	sbrc	r2, 7
    1026:	85 91       	lpm	r24, Z+
    1028:	27 fe       	sbrs	r2, 7
    102a:	81 91       	ld	r24, Z+
    102c:	5f 01       	movw	r10, r30
    102e:	b7 01       	movw	r22, r14
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 4a 09 	call	0x1294	; 0x1294 <fputc>
    1036:	31 10       	cpse	r3, r1
    1038:	3a 94       	dec	r3
    103a:	f1 e0       	ldi	r31, 0x01	; 1
    103c:	4f 1a       	sub	r4, r31
    103e:	51 08       	sbc	r5, r1
    1040:	41 14       	cp	r4, r1
    1042:	51 04       	cpc	r5, r1
    1044:	71 f7       	brne	.-36     	; 0x1022 <vfprintf+0x1c4>
    1046:	ed c0       	rjmp	.+474    	; 0x1222 <vfprintf+0x3c4>
    1048:	84 36       	cpi	r24, 0x64	; 100
    104a:	11 f0       	breq	.+4      	; 0x1050 <vfprintf+0x1f2>
    104c:	89 36       	cpi	r24, 0x69	; 105
    104e:	41 f5       	brne	.+80     	; 0x10a0 <vfprintf+0x242>
    1050:	f8 01       	movw	r30, r16
    1052:	27 ff       	sbrs	r18, 7
    1054:	07 c0       	rjmp	.+14     	; 0x1064 <vfprintf+0x206>
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	0c 5f       	subi	r16, 0xFC	; 252
    1060:	1f 4f       	sbci	r17, 0xFF	; 255
    1062:	08 c0       	rjmp	.+16     	; 0x1074 <vfprintf+0x216>
    1064:	60 81       	ld	r22, Z
    1066:	71 81       	ldd	r23, Z+1	; 0x01
    1068:	88 27       	eor	r24, r24
    106a:	77 fd       	sbrc	r23, 7
    106c:	80 95       	com	r24
    106e:	98 2f       	mov	r25, r24
    1070:	0e 5f       	subi	r16, 0xFE	; 254
    1072:	1f 4f       	sbci	r17, 0xFF	; 255
    1074:	4f e6       	ldi	r20, 0x6F	; 111
    1076:	b4 2e       	mov	r11, r20
    1078:	b2 22       	and	r11, r18
    107a:	97 ff       	sbrs	r25, 7
    107c:	09 c0       	rjmp	.+18     	; 0x1090 <vfprintf+0x232>
    107e:	90 95       	com	r25
    1080:	80 95       	com	r24
    1082:	70 95       	com	r23
    1084:	61 95       	neg	r22
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	8f 4f       	sbci	r24, 0xFF	; 255
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	f0 e8       	ldi	r31, 0x80	; 128
    108e:	bf 2a       	or	r11, r31
    1090:	2a e0       	ldi	r18, 0x0A	; 10
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	a4 01       	movw	r20, r8
    1096:	0e 94 76 09 	call	0x12ec	; 0x12ec <__ultoa_invert>
    109a:	a8 2e       	mov	r10, r24
    109c:	a8 18       	sub	r10, r8
    109e:	43 c0       	rjmp	.+134    	; 0x1126 <vfprintf+0x2c8>
    10a0:	85 37       	cpi	r24, 0x75	; 117
    10a2:	31 f4       	brne	.+12     	; 0x10b0 <vfprintf+0x252>
    10a4:	3f ee       	ldi	r19, 0xEF	; 239
    10a6:	b3 2e       	mov	r11, r19
    10a8:	b2 22       	and	r11, r18
    10aa:	2a e0       	ldi	r18, 0x0A	; 10
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	24 c0       	rjmp	.+72     	; 0x10f8 <vfprintf+0x29a>
    10b0:	99 ef       	ldi	r25, 0xF9	; 249
    10b2:	b9 2e       	mov	r11, r25
    10b4:	b2 22       	and	r11, r18
    10b6:	8f 36       	cpi	r24, 0x6F	; 111
    10b8:	b9 f0       	breq	.+46     	; 0x10e8 <vfprintf+0x28a>
    10ba:	20 f4       	brcc	.+8      	; 0x10c4 <vfprintf+0x266>
    10bc:	88 35       	cpi	r24, 0x58	; 88
    10be:	09 f0       	breq	.+2      	; 0x10c2 <vfprintf+0x264>
    10c0:	b3 c0       	rjmp	.+358    	; 0x1228 <vfprintf+0x3ca>
    10c2:	0d c0       	rjmp	.+26     	; 0x10de <vfprintf+0x280>
    10c4:	80 37       	cpi	r24, 0x70	; 112
    10c6:	21 f0       	breq	.+8      	; 0x10d0 <vfprintf+0x272>
    10c8:	88 37       	cpi	r24, 0x78	; 120
    10ca:	09 f0       	breq	.+2      	; 0x10ce <vfprintf+0x270>
    10cc:	ad c0       	rjmp	.+346    	; 0x1228 <vfprintf+0x3ca>
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <vfprintf+0x276>
    10d0:	20 e1       	ldi	r18, 0x10	; 16
    10d2:	b2 2a       	or	r11, r18
    10d4:	b4 fe       	sbrs	r11, 4
    10d6:	0b c0       	rjmp	.+22     	; 0x10ee <vfprintf+0x290>
    10d8:	84 e0       	ldi	r24, 0x04	; 4
    10da:	b8 2a       	or	r11, r24
    10dc:	08 c0       	rjmp	.+16     	; 0x10ee <vfprintf+0x290>
    10de:	24 ff       	sbrs	r18, 4
    10e0:	09 c0       	rjmp	.+18     	; 0x10f4 <vfprintf+0x296>
    10e2:	e6 e0       	ldi	r30, 0x06	; 6
    10e4:	be 2a       	or	r11, r30
    10e6:	06 c0       	rjmp	.+12     	; 0x10f4 <vfprintf+0x296>
    10e8:	28 e0       	ldi	r18, 0x08	; 8
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <vfprintf+0x29a>
    10ee:	20 e1       	ldi	r18, 0x10	; 16
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <vfprintf+0x29a>
    10f4:	20 e1       	ldi	r18, 0x10	; 16
    10f6:	32 e0       	ldi	r19, 0x02	; 2
    10f8:	f8 01       	movw	r30, r16
    10fa:	b7 fe       	sbrs	r11, 7
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <vfprintf+0x2ae>
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	0c 5f       	subi	r16, 0xFC	; 252
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	06 c0       	rjmp	.+12     	; 0x1118 <vfprintf+0x2ba>
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 5f       	subi	r16, 0xFE	; 254
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	a4 01       	movw	r20, r8
    111a:	0e 94 76 09 	call	0x12ec	; 0x12ec <__ultoa_invert>
    111e:	a8 2e       	mov	r10, r24
    1120:	a8 18       	sub	r10, r8
    1122:	ff e7       	ldi	r31, 0x7F	; 127
    1124:	bf 22       	and	r11, r31
    1126:	b6 fe       	sbrs	r11, 6
    1128:	0b c0       	rjmp	.+22     	; 0x1140 <vfprintf+0x2e2>
    112a:	2b 2d       	mov	r18, r11
    112c:	2e 7f       	andi	r18, 0xFE	; 254
    112e:	a5 14       	cp	r10, r5
    1130:	50 f4       	brcc	.+20     	; 0x1146 <vfprintf+0x2e8>
    1132:	b4 fe       	sbrs	r11, 4
    1134:	0a c0       	rjmp	.+20     	; 0x114a <vfprintf+0x2ec>
    1136:	b2 fc       	sbrc	r11, 2
    1138:	08 c0       	rjmp	.+16     	; 0x114a <vfprintf+0x2ec>
    113a:	2b 2d       	mov	r18, r11
    113c:	2e 7e       	andi	r18, 0xEE	; 238
    113e:	05 c0       	rjmp	.+10     	; 0x114a <vfprintf+0x2ec>
    1140:	7a 2c       	mov	r7, r10
    1142:	2b 2d       	mov	r18, r11
    1144:	03 c0       	rjmp	.+6      	; 0x114c <vfprintf+0x2ee>
    1146:	7a 2c       	mov	r7, r10
    1148:	01 c0       	rjmp	.+2      	; 0x114c <vfprintf+0x2ee>
    114a:	75 2c       	mov	r7, r5
    114c:	24 ff       	sbrs	r18, 4
    114e:	0d c0       	rjmp	.+26     	; 0x116a <vfprintf+0x30c>
    1150:	fe 01       	movw	r30, r28
    1152:	ea 0d       	add	r30, r10
    1154:	f1 1d       	adc	r31, r1
    1156:	80 81       	ld	r24, Z
    1158:	80 33       	cpi	r24, 0x30	; 48
    115a:	11 f4       	brne	.+4      	; 0x1160 <vfprintf+0x302>
    115c:	29 7e       	andi	r18, 0xE9	; 233
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <vfprintf+0x314>
    1160:	22 ff       	sbrs	r18, 2
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <vfprintf+0x312>
    1164:	73 94       	inc	r7
    1166:	73 94       	inc	r7
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <vfprintf+0x314>
    116a:	82 2f       	mov	r24, r18
    116c:	86 78       	andi	r24, 0x86	; 134
    116e:	09 f0       	breq	.+2      	; 0x1172 <vfprintf+0x314>
    1170:	73 94       	inc	r7
    1172:	23 fd       	sbrc	r18, 3
    1174:	14 c0       	rjmp	.+40     	; 0x119e <vfprintf+0x340>
    1176:	20 ff       	sbrs	r18, 0
    1178:	0f c0       	rjmp	.+30     	; 0x1198 <vfprintf+0x33a>
    117a:	5a 2c       	mov	r5, r10
    117c:	73 14       	cp	r7, r3
    117e:	60 f4       	brcc	.+24     	; 0x1198 <vfprintf+0x33a>
    1180:	53 0c       	add	r5, r3
    1182:	57 18       	sub	r5, r7
    1184:	73 2c       	mov	r7, r3
    1186:	08 c0       	rjmp	.+16     	; 0x1198 <vfprintf+0x33a>
    1188:	b7 01       	movw	r22, r14
    118a:	80 e2       	ldi	r24, 0x20	; 32
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	2c 87       	std	Y+12, r18	; 0x0c
    1190:	0e 94 4a 09 	call	0x1294	; 0x1294 <fputc>
    1194:	73 94       	inc	r7
    1196:	2c 85       	ldd	r18, Y+12	; 0x0c
    1198:	73 14       	cp	r7, r3
    119a:	b0 f3       	brcs	.-20     	; 0x1188 <vfprintf+0x32a>
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <vfprintf+0x348>
    119e:	73 14       	cp	r7, r3
    11a0:	10 f4       	brcc	.+4      	; 0x11a6 <vfprintf+0x348>
    11a2:	37 18       	sub	r3, r7
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <vfprintf+0x34a>
    11a6:	31 2c       	mov	r3, r1
    11a8:	24 ff       	sbrs	r18, 4
    11aa:	12 c0       	rjmp	.+36     	; 0x11d0 <vfprintf+0x372>
    11ac:	b7 01       	movw	r22, r14
    11ae:	80 e3       	ldi	r24, 0x30	; 48
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	2c 87       	std	Y+12, r18	; 0x0c
    11b4:	0e 94 4a 09 	call	0x1294	; 0x1294 <fputc>
    11b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    11ba:	22 ff       	sbrs	r18, 2
    11bc:	1e c0       	rjmp	.+60     	; 0x11fa <vfprintf+0x39c>
    11be:	21 ff       	sbrs	r18, 1
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <vfprintf+0x36a>
    11c2:	88 e5       	ldi	r24, 0x58	; 88
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <vfprintf+0x36e>
    11c8:	88 e7       	ldi	r24, 0x78	; 120
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	b7 01       	movw	r22, r14
    11ce:	0c c0       	rjmp	.+24     	; 0x11e8 <vfprintf+0x38a>
    11d0:	82 2f       	mov	r24, r18
    11d2:	86 78       	andi	r24, 0x86	; 134
    11d4:	91 f0       	breq	.+36     	; 0x11fa <vfprintf+0x39c>
    11d6:	21 fd       	sbrc	r18, 1
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <vfprintf+0x380>
    11da:	80 e2       	ldi	r24, 0x20	; 32
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <vfprintf+0x382>
    11de:	8b e2       	ldi	r24, 0x2B	; 43
    11e0:	27 fd       	sbrc	r18, 7
    11e2:	8d e2       	ldi	r24, 0x2D	; 45
    11e4:	b7 01       	movw	r22, r14
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 4a 09 	call	0x1294	; 0x1294 <fputc>
    11ec:	06 c0       	rjmp	.+12     	; 0x11fa <vfprintf+0x39c>
    11ee:	b7 01       	movw	r22, r14
    11f0:	80 e3       	ldi	r24, 0x30	; 48
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 4a 09 	call	0x1294	; 0x1294 <fputc>
    11f8:	5a 94       	dec	r5
    11fa:	a5 14       	cp	r10, r5
    11fc:	c0 f3       	brcs	.-16     	; 0x11ee <vfprintf+0x390>
    11fe:	aa 94       	dec	r10
    1200:	f4 01       	movw	r30, r8
    1202:	ea 0d       	add	r30, r10
    1204:	f1 1d       	adc	r31, r1
    1206:	b7 01       	movw	r22, r14
    1208:	80 81       	ld	r24, Z
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 4a 09 	call	0x1294	; 0x1294 <fputc>
    1210:	a1 10       	cpse	r10, r1
    1212:	f5 cf       	rjmp	.-22     	; 0x11fe <vfprintf+0x3a0>
    1214:	06 c0       	rjmp	.+12     	; 0x1222 <vfprintf+0x3c4>
    1216:	b7 01       	movw	r22, r14
    1218:	80 e2       	ldi	r24, 0x20	; 32
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 4a 09 	call	0x1294	; 0x1294 <fputc>
    1220:	3a 94       	dec	r3
    1222:	31 10       	cpse	r3, r1
    1224:	f8 cf       	rjmp	.-16     	; 0x1216 <vfprintf+0x3b8>
    1226:	43 ce       	rjmp	.-890    	; 0xeae <vfprintf+0x50>
    1228:	f7 01       	movw	r30, r14
    122a:	26 81       	ldd	r18, Z+6	; 0x06
    122c:	37 81       	ldd	r19, Z+7	; 0x07
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <vfprintf+0x3d6>
    1230:	2f ef       	ldi	r18, 0xFF	; 255
    1232:	3f ef       	ldi	r19, 0xFF	; 255
    1234:	c9 01       	movw	r24, r18
    1236:	2c 96       	adiw	r28, 0x0c	; 12
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
    1252:	bf 90       	pop	r11
    1254:	af 90       	pop	r10
    1256:	9f 90       	pop	r9
    1258:	8f 90       	pop	r8
    125a:	7f 90       	pop	r7
    125c:	6f 90       	pop	r6
    125e:	5f 90       	pop	r5
    1260:	4f 90       	pop	r4
    1262:	3f 90       	pop	r3
    1264:	2f 90       	pop	r2
    1266:	08 95       	ret

00001268 <strnlen_P>:
    1268:	fc 01       	movw	r30, r24
    126a:	05 90       	lpm	r0, Z+
    126c:	61 50       	subi	r22, 0x01	; 1
    126e:	70 40       	sbci	r23, 0x00	; 0
    1270:	01 10       	cpse	r0, r1
    1272:	d8 f7       	brcc	.-10     	; 0x126a <strnlen_P+0x2>
    1274:	80 95       	com	r24
    1276:	90 95       	com	r25
    1278:	8e 0f       	add	r24, r30
    127a:	9f 1f       	adc	r25, r31
    127c:	08 95       	ret

0000127e <strnlen>:
    127e:	fc 01       	movw	r30, r24
    1280:	61 50       	subi	r22, 0x01	; 1
    1282:	70 40       	sbci	r23, 0x00	; 0
    1284:	01 90       	ld	r0, Z+
    1286:	01 10       	cpse	r0, r1
    1288:	d8 f7       	brcc	.-10     	; 0x1280 <strnlen+0x2>
    128a:	80 95       	com	r24
    128c:	90 95       	com	r25
    128e:	8e 0f       	add	r24, r30
    1290:	9f 1f       	adc	r25, r31
    1292:	08 95       	ret

00001294 <fputc>:
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	8c 01       	movw	r16, r24
    129e:	eb 01       	movw	r28, r22
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	81 fd       	sbrc	r24, 1
    12a4:	03 c0       	rjmp	.+6      	; 0x12ac <fputc+0x18>
    12a6:	0f ef       	ldi	r16, 0xFF	; 255
    12a8:	1f ef       	ldi	r17, 0xFF	; 255
    12aa:	1a c0       	rjmp	.+52     	; 0x12e0 <fputc+0x4c>
    12ac:	82 ff       	sbrs	r24, 2
    12ae:	0d c0       	rjmp	.+26     	; 0x12ca <fputc+0x36>
    12b0:	2e 81       	ldd	r18, Y+6	; 0x06
    12b2:	3f 81       	ldd	r19, Y+7	; 0x07
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	28 17       	cp	r18, r24
    12ba:	39 07       	cpc	r19, r25
    12bc:	64 f4       	brge	.+24     	; 0x12d6 <fputc+0x42>
    12be:	e8 81       	ld	r30, Y
    12c0:	f9 81       	ldd	r31, Y+1	; 0x01
    12c2:	01 93       	st	Z+, r16
    12c4:	f9 83       	std	Y+1, r31	; 0x01
    12c6:	e8 83       	st	Y, r30
    12c8:	06 c0       	rjmp	.+12     	; 0x12d6 <fputc+0x42>
    12ca:	e8 85       	ldd	r30, Y+8	; 0x08
    12cc:	f9 85       	ldd	r31, Y+9	; 0x09
    12ce:	80 2f       	mov	r24, r16
    12d0:	09 95       	icall
    12d2:	89 2b       	or	r24, r25
    12d4:	41 f7       	brne	.-48     	; 0x12a6 <fputc+0x12>
    12d6:	8e 81       	ldd	r24, Y+6	; 0x06
    12d8:	9f 81       	ldd	r25, Y+7	; 0x07
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	9f 83       	std	Y+7, r25	; 0x07
    12de:	8e 83       	std	Y+6, r24	; 0x06
    12e0:	c8 01       	movw	r24, r16
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	08 95       	ret

000012ec <__ultoa_invert>:
    12ec:	fa 01       	movw	r30, r20
    12ee:	aa 27       	eor	r26, r26
    12f0:	28 30       	cpi	r18, 0x08	; 8
    12f2:	51 f1       	breq	.+84     	; 0x1348 <__ultoa_invert+0x5c>
    12f4:	20 31       	cpi	r18, 0x10	; 16
    12f6:	81 f1       	breq	.+96     	; 0x1358 <__ultoa_invert+0x6c>
    12f8:	e8 94       	clt
    12fa:	6f 93       	push	r22
    12fc:	6e 7f       	andi	r22, 0xFE	; 254
    12fe:	6e 5f       	subi	r22, 0xFE	; 254
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	af 4f       	sbci	r26, 0xFF	; 255
    1308:	b1 e0       	ldi	r27, 0x01	; 1
    130a:	3e d0       	rcall	.+124    	; 0x1388 <__ultoa_invert+0x9c>
    130c:	b4 e0       	ldi	r27, 0x04	; 4
    130e:	3c d0       	rcall	.+120    	; 0x1388 <__ultoa_invert+0x9c>
    1310:	67 0f       	add	r22, r23
    1312:	78 1f       	adc	r23, r24
    1314:	89 1f       	adc	r24, r25
    1316:	9a 1f       	adc	r25, r26
    1318:	a1 1d       	adc	r26, r1
    131a:	68 0f       	add	r22, r24
    131c:	79 1f       	adc	r23, r25
    131e:	8a 1f       	adc	r24, r26
    1320:	91 1d       	adc	r25, r1
    1322:	a1 1d       	adc	r26, r1
    1324:	6a 0f       	add	r22, r26
    1326:	71 1d       	adc	r23, r1
    1328:	81 1d       	adc	r24, r1
    132a:	91 1d       	adc	r25, r1
    132c:	a1 1d       	adc	r26, r1
    132e:	20 d0       	rcall	.+64     	; 0x1370 <__ultoa_invert+0x84>
    1330:	09 f4       	brne	.+2      	; 0x1334 <__ultoa_invert+0x48>
    1332:	68 94       	set
    1334:	3f 91       	pop	r19
    1336:	2a e0       	ldi	r18, 0x0A	; 10
    1338:	26 9f       	mul	r18, r22
    133a:	11 24       	eor	r1, r1
    133c:	30 19       	sub	r19, r0
    133e:	30 5d       	subi	r19, 0xD0	; 208
    1340:	31 93       	st	Z+, r19
    1342:	de f6       	brtc	.-74     	; 0x12fa <__ultoa_invert+0xe>
    1344:	cf 01       	movw	r24, r30
    1346:	08 95       	ret
    1348:	46 2f       	mov	r20, r22
    134a:	47 70       	andi	r20, 0x07	; 7
    134c:	40 5d       	subi	r20, 0xD0	; 208
    134e:	41 93       	st	Z+, r20
    1350:	b3 e0       	ldi	r27, 0x03	; 3
    1352:	0f d0       	rcall	.+30     	; 0x1372 <__ultoa_invert+0x86>
    1354:	c9 f7       	brne	.-14     	; 0x1348 <__ultoa_invert+0x5c>
    1356:	f6 cf       	rjmp	.-20     	; 0x1344 <__ultoa_invert+0x58>
    1358:	46 2f       	mov	r20, r22
    135a:	4f 70       	andi	r20, 0x0F	; 15
    135c:	40 5d       	subi	r20, 0xD0	; 208
    135e:	4a 33       	cpi	r20, 0x3A	; 58
    1360:	18 f0       	brcs	.+6      	; 0x1368 <__ultoa_invert+0x7c>
    1362:	49 5d       	subi	r20, 0xD9	; 217
    1364:	31 fd       	sbrc	r19, 1
    1366:	40 52       	subi	r20, 0x20	; 32
    1368:	41 93       	st	Z+, r20
    136a:	02 d0       	rcall	.+4      	; 0x1370 <__ultoa_invert+0x84>
    136c:	a9 f7       	brne	.-22     	; 0x1358 <__ultoa_invert+0x6c>
    136e:	ea cf       	rjmp	.-44     	; 0x1344 <__ultoa_invert+0x58>
    1370:	b4 e0       	ldi	r27, 0x04	; 4
    1372:	a6 95       	lsr	r26
    1374:	97 95       	ror	r25
    1376:	87 95       	ror	r24
    1378:	77 95       	ror	r23
    137a:	67 95       	ror	r22
    137c:	ba 95       	dec	r27
    137e:	c9 f7       	brne	.-14     	; 0x1372 <__ultoa_invert+0x86>
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	61 05       	cpc	r22, r1
    1384:	71 05       	cpc	r23, r1
    1386:	08 95       	ret
    1388:	9b 01       	movw	r18, r22
    138a:	ac 01       	movw	r20, r24
    138c:	0a 2e       	mov	r0, r26
    138e:	06 94       	lsr	r0
    1390:	57 95       	ror	r21
    1392:	47 95       	ror	r20
    1394:	37 95       	ror	r19
    1396:	27 95       	ror	r18
    1398:	ba 95       	dec	r27
    139a:	c9 f7       	brne	.-14     	; 0x138e <__ultoa_invert+0xa2>
    139c:	62 0f       	add	r22, r18
    139e:	73 1f       	adc	r23, r19
    13a0:	84 1f       	adc	r24, r20
    13a2:	95 1f       	adc	r25, r21
    13a4:	a0 1d       	adc	r26, r0
    13a6:	08 95       	ret

000013a8 <_exit>:
    13a8:	f8 94       	cli

000013aa <__stop_program>:
    13aa:	ff cf       	rjmp	.-2      	; 0x13aa <__stop_program>
