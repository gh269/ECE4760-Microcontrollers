
Lab3_IR_Lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000158c  00001620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000158c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  00800154  00800154  00001674  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002fd  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c08  00000000  00000000  00001991  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000349  00000000  00000000  00002599  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b6a  00000000  00000000  000028e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  0000344c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000451  00000000  00000000  000035ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c6  00000000  00000000  00003a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00004203  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 c4 04 	jmp	0x988	; 0x988 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 cc 03 	jmp	0x798	; 0x798 <__vector_28>
      74:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e8       	ldi	r30, 0x8C	; 140
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 35       	cpi	r26, 0x54	; 84
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a4 e5       	ldi	r26, 0x54	; 84
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 35       	cpi	r26, 0x5A	; 90
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 5b 05 	call	0xab6	; 0xab6 <main>
      c6:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
      ce:	1f 92       	push	r1
      d0:	0f 92       	push	r0
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	0f 92       	push	r0
      d6:	0b b6       	in	r0, 0x3b	; 59
      d8:	0f 92       	push	r0
      da:	11 24       	eor	r1, r1
      dc:	2f 92       	push	r2
      de:	3f 92       	push	r3
      e0:	4f 92       	push	r4
      e2:	5f 92       	push	r5
      e4:	6f 92       	push	r6
      e6:	7f 92       	push	r7
      e8:	8f 92       	push	r8
      ea:	9f 92       	push	r9
      ec:	af 92       	push	r10
      ee:	bf 92       	push	r11
      f0:	cf 92       	push	r12
      f2:	df 92       	push	r13
      f4:	ef 92       	push	r14
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	2f 93       	push	r18
      fe:	3f 93       	push	r19
     100:	4f 93       	push	r20
     102:	5f 93       	push	r21
     104:	6f 93       	push	r22
     106:	7f 93       	push	r23
     108:	8f 93       	push	r24
     10a:	9f 93       	push	r25
     10c:	af 93       	push	r26
     10e:	bf 93       	push	r27
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	ef 93       	push	r30
     116:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
  
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     118:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     11c:	50 90 cd 02 	lds	r5, 0x02CD
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     120:	b0 9b       	sbis	0x16, 0	; 22
     122:	14 c0       	rjmp	.+40     	; 0x14c <__vector_13+0x7e>
    ++kernel.cycles;
     124:	80 91 04 03 	lds	r24, 0x0304
     128:	90 91 05 03 	lds	r25, 0x0305
     12c:	a0 91 06 03 	lds	r26, 0x0306
     130:	b0 91 07 03 	lds	r27, 0x0307
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	a1 1d       	adc	r26, r1
     138:	b1 1d       	adc	r27, r1
     13a:	80 93 04 03 	sts	0x0304, r24
     13e:	90 93 05 03 	sts	0x0305, r25
     142:	a0 93 06 03 	sts	0x0306, r26
     146:	b0 93 07 03 	sts	0x0307, r27
    TIFR1 |= (1<<TOV1) ;
     14a:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     14c:	80 91 84 00 	lds	r24, 0x0084
     150:	90 91 85 00 	lds	r25, 0x0085
     154:	3c 01       	movw	r6, r24
     156:	88 24       	eor	r8, r8
     158:	99 24       	eor	r9, r9
     15a:	80 91 04 03 	lds	r24, 0x0304
     15e:	90 91 05 03 	lds	r25, 0x0305
     162:	a0 91 06 03 	lds	r26, 0x0306
     166:	b0 91 07 03 	lds	r27, 0x0307
     16a:	dc 01       	movw	r26, r24
     16c:	99 27       	eor	r25, r25
     16e:	88 27       	eor	r24, r24
     170:	68 0e       	add	r6, r24
     172:	79 1e       	adc	r7, r25
     174:	8a 1e       	adc	r8, r26
     176:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     178:	40 90 cc 02 	lds	r4, 0x02CC
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	ff ef       	ldi	r31, 0xFF	; 255
     182:	af 2e       	mov	r10, r31
     184:	ff ef       	ldi	r31, 0xFF	; 255
     186:	bf 2e       	mov	r11, r31
     188:	ff ef       	ldi	r31, 0xFF	; 255
     18a:	cf 2e       	mov	r12, r31
     18c:	ff e7       	ldi	r31, 0x7F	; 127
     18e:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     190:	eb e0       	ldi	r30, 0x0B	; 11
     192:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
  t->state = READYQ;
     194:	33 24       	eor	r3, r3
     196:	33 94       	inc	r3
      } else if (t->release < nextHit) {
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     198:	cb e0       	ldi	r28, 0x0B	; 11
     19a:	d0 e0       	ldi	r29, 0x00	; 0
     19c:	43 c0       	rjmp	.+134    	; 0x224 <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     19e:	62 9d       	mul	r22, r2
     1a0:	d0 01       	movw	r26, r0
     1a2:	11 24       	eor	r1, r1
     1a4:	a2 53       	subi	r26, 0x32	; 50
     1a6:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     1a8:	1a 96       	adiw	r26, 0x0a	; 10
     1aa:	8c 91       	ld	r24, X
     1ac:	1a 97       	sbiw	r26, 0x0a	; 10
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	a1 f4       	brne	.+40     	; 0x1da <__vector_13+0x10c>
      if (t->release <= now) {
     1b2:	12 96       	adiw	r26, 0x02	; 2
     1b4:	ed 90       	ld	r14, X+
     1b6:	fd 90       	ld	r15, X+
     1b8:	0d 91       	ld	r16, X+
     1ba:	1c 91       	ld	r17, X
     1bc:	15 97       	sbiw	r26, 0x05	; 5
     1be:	6e 14       	cp	r6, r14
     1c0:	7f 04       	cpc	r7, r15
     1c2:	80 06       	cpc	r8, r16
     1c4:	91 06       	cpc	r9, r17
     1c6:	20 f0       	brcs	.+8      	; 0x1d0 <__vector_13+0x102>
  t->state = READYQ;
     1c8:	1a 96       	adiw	r26, 0x0a	; 10
     1ca:	3c 92       	st	X, r3
     1cc:	1a 97       	sbiw	r26, 0x0a	; 10
     1ce:	05 c0       	rjmp	.+10     	; 0x1da <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     1d0:	ea 14       	cp	r14, r10
     1d2:	fb 04       	cpc	r15, r11
     1d4:	0c 05       	cpc	r16, r12
     1d6:	1d 05       	cpc	r17, r13
     1d8:	10 f0       	brcs	.+4      	; 0x1de <__vector_13+0x110>
     1da:	86 01       	movw	r16, r12
     1dc:	75 01       	movw	r14, r10
  nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     1de:	1a 96       	adiw	r26, 0x0a	; 10
     1e0:	8c 91       	ld	r24, X
     1e2:	1a 97       	sbiw	r26, 0x0a	; 10
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	d9 f4       	brne	.+54     	; 0x21e <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     1e8:	87 2f       	mov	r24, r23
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	8c 9f       	mul	r24, r28
     1ee:	f0 01       	movw	r30, r0
     1f0:	8d 9f       	mul	r24, r29
     1f2:	f0 0d       	add	r31, r0
     1f4:	9c 9f       	mul	r25, r28
     1f6:	f0 0d       	add	r31, r0
     1f8:	11 24       	eor	r1, r1
     1fa:	e4 53       	subi	r30, 0x34	; 52
     1fc:	fd 4f       	sbci	r31, 0xFD	; 253
     1fe:	16 96       	adiw	r26, 0x06	; 6
     200:	2d 91       	ld	r18, X+
     202:	3d 91       	ld	r19, X+
     204:	4d 91       	ld	r20, X+
     206:	5c 91       	ld	r21, X
     208:	19 97       	sbiw	r26, 0x09	; 9
     20a:	80 85       	ldd	r24, Z+8	; 0x08
     20c:	91 85       	ldd	r25, Z+9	; 0x09
     20e:	a2 85       	ldd	r26, Z+10	; 0x0a
     210:	b3 85       	ldd	r27, Z+11	; 0x0b
     212:	28 17       	cp	r18, r24
     214:	39 07       	cpc	r19, r25
     216:	4a 07       	cpc	r20, r26
     218:	5b 07       	cpc	r21, r27
     21a:	08 f4       	brcc	.+2      	; 0x21e <__vector_13+0x150>
     21c:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     21e:	6f 5f       	subi	r22, 0xFF	; 255
     220:	57 01       	movw	r10, r14
     222:	68 01       	movw	r12, r16
     224:	46 16       	cp	r4, r22
     226:	08 f0       	brcs	.+2      	; 0x22a <__vector_13+0x15c>
     228:	ba cf       	rjmp	.-140    	; 0x19e <__vector_13+0xd0>
    }
  }
  //fprintf(stdout, "Old: %u New: %u\n\r", oldrunning, running);
  //fprintf(stdout, "NumTasks: %u\n\r", kernel.nbrOfTasks);
  //fprintf(stdout, "Current time: %lu\n\r", (unsigned long) trtCurrentTime());
  if (running != oldrunning) { // perform context switch?
     22a:	75 15       	cp	r23, r5
     22c:	b1 f0       	breq	.+44     	; 0x25a <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     22e:	eb e0       	ldi	r30, 0x0B	; 11
     230:	5e 9e       	mul	r5, r30
     232:	d0 01       	movw	r26, r0
     234:	11 24       	eor	r1, r1
     236:	a2 53       	subi	r26, 0x32	; 50
     238:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     23a:	8d b7       	in	r24, 0x3d	; 61
     23c:	8c 93       	st	X, r24
    t->sph = SPH;
     23e:	8e b7       	in	r24, 0x3e	; 62
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     244:	7e 9f       	mul	r23, r30
     246:	f0 01       	movw	r30, r0
     248:	11 24       	eor	r1, r1
     24a:	e2 53       	subi	r30, 0x32	; 50
     24c:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     24e:	81 81       	ldd	r24, Z+1	; 0x01
     250:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     252:	80 81       	ld	r24, Z
     254:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     256:	70 93 cd 02 	sts	0x02CD, r23

  }

  kernel.nextHit = nextHit;  
     25a:	a0 92 08 03 	sts	0x0308, r10
     25e:	b0 92 09 03 	sts	0x0309, r11
     262:	c0 92 0a 03 	sts	0x030A, r12
     266:	d0 92 0b 03 	sts	0x030B, r13

  now = (kernel.cycles << 16) + TCNT1;
     26a:	20 91 84 00 	lds	r18, 0x0084
     26e:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	80 91 04 03 	lds	r24, 0x0304
     27a:	90 91 05 03 	lds	r25, 0x0305
     27e:	a0 91 06 03 	lds	r26, 0x0306
     282:	b0 91 07 03 	lds	r27, 0x0307
     286:	dc 01       	movw	r26, r24
     288:	99 27       	eor	r25, r25
     28a:	88 27       	eor	r24, r24
     28c:	28 0f       	add	r18, r24
     28e:	39 1f       	adc	r19, r25
     290:	4a 1f       	adc	r20, r26
     292:	5b 1f       	adc	r21, r27
     294:	d6 01       	movw	r26, r12
     296:	c5 01       	movw	r24, r10
     298:	82 1b       	sub	r24, r18
     29a:	93 0b       	sbc	r25, r19
     29c:	a4 0b       	sbc	r26, r20
     29e:	b5 0b       	sbc	r27, r21
     2a0:	9c 01       	movw	r18, r24
     2a2:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     2a4:	84 30       	cpi	r24, 0x04	; 4
     2a6:	91 05       	cpc	r25, r1
     2a8:	a1 05       	cpc	r26, r1
     2aa:	b1 05       	cpc	r27, r1
     2ac:	24 f4       	brge	.+8      	; 0x2b6 <__vector_13+0x1e8>
     2ae:	24 e0       	ldi	r18, 0x04	; 4
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     2b6:	80 91 84 00 	lds	r24, 0x0084
     2ba:	90 91 85 00 	lds	r25, 0x0085
     2be:	a0 e0       	ldi	r26, 0x00	; 0
     2c0:	b0 e0       	ldi	r27, 0x00	; 0
     2c2:	82 0f       	add	r24, r18
     2c4:	93 1f       	adc	r25, r19
     2c6:	a4 1f       	adc	r26, r20
     2c8:	b5 1f       	adc	r27, r21
     2ca:	80 50       	subi	r24, 0x00	; 0
     2cc:	90 40       	sbci	r25, 0x00	; 0
     2ce:	a1 40       	sbci	r26, 0x01	; 1
     2d0:	b0 40       	sbci	r27, 0x00	; 0
     2d2:	38 f4       	brcc	.+14     	; 0x2e2 <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     2d4:	80 91 84 00 	lds	r24, 0x0084
     2d8:	90 91 85 00 	lds	r25, 0x0085
     2dc:	82 0f       	add	r24, r18
     2de:	93 1f       	adc	r25, r19
     2e0:	0e c0       	rjmp	.+28     	; 0x2fe <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     2e2:	80 91 84 00 	lds	r24, 0x0084
     2e6:	90 91 85 00 	lds	r25, 0x0085
     2ea:	8c 5f       	subi	r24, 0xFC	; 252
     2ec:	9f 4f       	sbci	r25, 0xFF	; 255
     2ee:	28 f4       	brcc	.+10     	; 0x2fa <__vector_13+0x22c>
    OCR1A = 0x0000;
     2f0:	10 92 89 00 	sts	0x0089, r1
     2f4:	10 92 88 00 	sts	0x0088, r1
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <__vector_13+0x238>
  } else {
    OCR1A = 4;
     2fa:	84 e0       	ldi	r24, 0x04	; 4
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 89 00 	sts	0x0089, r25
     302:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	80 93 6f 00 	sts	0x006F, r24
}
     30c:	ff 91       	pop	r31
     30e:	ef 91       	pop	r30
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	bf 91       	pop	r27
     316:	af 91       	pop	r26
     318:	9f 91       	pop	r25
     31a:	8f 91       	pop	r24
     31c:	7f 91       	pop	r23
     31e:	6f 91       	pop	r22
     320:	5f 91       	pop	r21
     322:	4f 91       	pop	r20
     324:	3f 91       	pop	r19
     326:	2f 91       	pop	r18
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
     32c:	ff 90       	pop	r15
     32e:	ef 90       	pop	r14
     330:	df 90       	pop	r13
     332:	cf 90       	pop	r12
     334:	bf 90       	pop	r11
     336:	af 90       	pop	r10
     338:	9f 90       	pop	r9
     33a:	8f 90       	pop	r8
     33c:	7f 90       	pop	r7
     33e:	6f 90       	pop	r6
     340:	5f 90       	pop	r5
     342:	4f 90       	pop	r4
     344:	3f 90       	pop	r3
     346:	2f 90       	pop	r2
     348:	0f 90       	pop	r0
     34a:	0b be       	out	0x3b, r0	; 59
     34c:	0f 90       	pop	r0
     34e:	0f be       	out	0x3f, r0	; 63
     350:	0f 90       	pop	r0
     352:	1f 90       	pop	r1
     354:	18 95       	reti

00000356 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     356:	10 92 85 00 	sts	0x0085, r1
     35a:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     35e:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     362:	25 e0       	ldi	r18, 0x05	; 5
     364:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     368:	22 e0       	ldi	r18, 0x02	; 2
     36a:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     36e:	2f ef       	ldi	r18, 0xFF	; 255
     370:	30 e4       	ldi	r19, 0x40	; 64
     372:	28 1b       	sub	r18, r24
     374:	39 0b       	sbc	r19, r25
     376:	30 93 03 03 	sts	0x0303, r19
     37a:	20 93 02 03 	sts	0x0302, r18
  kernel.nbrOfTasks = 0;
     37e:	10 92 cc 02 	sts	0x02CC, r1
  kernel.running = 0;
     382:	10 92 cd 02 	sts	0x02CD, r1

  kernel.cycles = 0x0000;
     386:	10 92 04 03 	sts	0x0304, r1
     38a:	10 92 05 03 	sts	0x0305, r1
     38e:	10 92 06 03 	sts	0x0306, r1
     392:	10 92 07 03 	sts	0x0307, r1
  kernel.nextHit = 0x7FFFFFFF;
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	9f ef       	ldi	r25, 0xFF	; 255
     39a:	af ef       	ldi	r26, 0xFF	; 255
     39c:	bf e7       	ldi	r27, 0x7F	; 127
     39e:	80 93 08 03 	sts	0x0308, r24
     3a2:	90 93 09 03 	sts	0x0309, r25
     3a6:	a0 93 0a 03 	sts	0x030A, r26
     3aa:	b0 93 0b 03 	sts	0x030B, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     3ae:	80 93 d4 02 	sts	0x02D4, r24
     3b2:	90 93 d5 02 	sts	0x02D5, r25
     3b6:	a0 93 d6 02 	sts	0x02D6, r26
     3ba:	b0 93 d7 02 	sts	0x02D7, r27
  kernel.tasks[0].release = 0x00000000;
     3be:	10 92 d0 02 	sts	0x02D0, r1
     3c2:	10 92 d1 02 	sts	0x02D1, r1
     3c6:	10 92 d2 02 	sts	0x02D2, r1
     3ca:	10 92 d3 02 	sts	0x02D3, r1

  sei(); /* set enabled interrupts */
     3ce:	78 94       	sei
}
     3d0:	08 95       	ret

000003d2 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     3d2:	8f 92       	push	r8
     3d4:	9f 92       	push	r9
     3d6:	af 92       	push	r10
     3d8:	bf 92       	push	r11
     3da:	cf 92       	push	r12
     3dc:	df 92       	push	r13
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	49 01       	movw	r8, r18
     3ec:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     3ee:	f8 94       	cli

  ++kernel.nbrOfTasks;
     3f0:	20 91 cc 02 	lds	r18, 0x02CC
     3f4:	2f 5f       	subi	r18, 0xFF	; 255
     3f6:	20 93 cc 02 	sts	0x02CC, r18

  sp = kernel.memptr;
     3fa:	c0 91 02 03 	lds	r28, 0x0302
     3fe:	d0 91 03 03 	lds	r29, 0x0303
  kernel.memptr -= stacksize;  // decrease free mem ptr
     402:	9e 01       	movw	r18, r28
     404:	26 1b       	sub	r18, r22
     406:	37 0b       	sbc	r19, r23
     408:	30 93 03 03 	sts	0x0303, r19
     40c:	20 93 02 03 	sts	0x0302, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     410:	88 83       	st	Y, r24
     412:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     414:	92 93       	st	-Z, r25
     416:	31 97       	sbiw	r30, 0x01	; 1
     418:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     41a:	ce 01       	movw	r24, r28
     41c:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     41e:	1c 92       	st	X, r1
     420:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     422:	a8 17       	cp	r26, r24
     424:	b9 07       	cpc	r27, r25
     426:	d9 f7       	brne	.-10     	; 0x41e <trtCreateTask+0x4c>
     428:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     42a:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     42c:	d2 92       	st	-Z, r13
     42e:	31 97       	sbiw	r30, 0x01	; 1
     430:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     432:	9e 01       	movw	r18, r28
     434:	24 52       	subi	r18, 0x24	; 36
     436:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     438:	1c 92       	st	X, r1
     43a:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     43c:	a2 17       	cp	r26, r18
     43e:	b3 07       	cpc	r27, r19
     440:	d9 f7       	brne	.-10     	; 0x438 <trtCreateTask+0x66>
     442:	9f 01       	movw	r18, r30
     444:	26 50       	subi	r18, 0x06	; 6
     446:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     448:	e0 91 cc 02 	lds	r30, 0x02CC
     44c:	8b e0       	ldi	r24, 0x0B	; 11
     44e:	e8 9f       	mul	r30, r24
     450:	f0 01       	movw	r30, r0
     452:	11 24       	eor	r1, r1
     454:	e2 53       	subi	r30, 0x32	; 50
     456:	fd 4f       	sbci	r31, 0xFD	; 253
  ///*
  t->release = release;
     458:	82 82       	std	Z+2, r8	; 0x02
     45a:	93 82       	std	Z+3, r9	; 0x03
     45c:	a4 82       	std	Z+4, r10	; 0x04
     45e:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     460:	e6 82       	std	Z+6, r14	; 0x06
     462:	f7 82       	std	Z+7, r15	; 0x07
     464:	00 87       	std	Z+8, r16	; 0x08
     466:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	82 87       	std	Z+10, r24	; 0x0a
  //*/
  t->spl = lo8(sp);       // store stack pointer
     46c:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     46e:	31 83       	std	Z+1, r19	; 0x01
  

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     470:	0e 94 67 00 	call	0xce	; 0xce <__vector_13>

}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	df 90       	pop	r13
     482:	cf 90       	pop	r12
     484:	bf 90       	pop	r11
     486:	af 90       	pop	r10
     488:	9f 90       	pop	r9
     48a:	8f 90       	pop	r8
     48c:	08 95       	ret

0000048e <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     48e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     490:	ec ec       	ldi	r30, 0xCC	; 204
     492:	f2 e0       	ldi	r31, 0x02	; 2
     494:	e8 0f       	add	r30, r24
     496:	f1 1d       	adc	r31, r1
     498:	65 a7       	std	Z+45, r22	; 0x2d
  
  sei(); // set enabled interrupts;
     49a:	78 94       	sei
}
     49c:	08 95       	ret

0000049e <trtWait>:

void trtWait(uint8_t semnbr) {
     49e:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     4a0:	20 91 cd 02 	lds	r18, 0x02CD

  cli(); // disable interrupts
     4a4:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     4a6:	e8 2f       	mov	r30, r24
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	e7 50       	subi	r30, 0x07	; 7
     4ac:	fd 4f       	sbci	r31, 0xFD	; 253
  if ((*s) > 0) {
     4ae:	80 81       	ld	r24, Z
     4b0:	88 23       	and	r24, r24
     4b2:	19 f0       	breq	.+6      	; 0x4ba <trtWait+0x1c>
    (*s)--;
     4b4:	81 50       	subi	r24, 0x01	; 1
     4b6:	80 83       	st	Z, r24
     4b8:	10 c0       	rjmp	.+32     	; 0x4da <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	8b e0       	ldi	r24, 0x0B	; 11
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	28 9f       	mul	r18, r24
     4c2:	f0 01       	movw	r30, r0
     4c4:	29 9f       	mul	r18, r25
     4c6:	f0 0d       	add	r31, r0
     4c8:	38 9f       	mul	r19, r24
     4ca:	f0 0d       	add	r31, r0
     4cc:	11 24       	eor	r1, r1
     4ce:	e2 53       	subi	r30, 0x32	; 50
     4d0:	fd 4f       	sbci	r31, 0xFD	; 253
     4d2:	4e 5f       	subi	r20, 0xFE	; 254
     4d4:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     4d6:	0e 94 67 00 	call	0xce	; 0xce <__vector_13>
  }

  sei(); // reenable interrupts
     4da:	78 94       	sei
}
     4dc:	08 95       	ret

000004de <trtSignal>:

void trtSignal(uint8_t semnbr) {
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     4e6:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     4e8:	00 91 cc 02 	lds	r16, 0x02CC
     4ec:	e1 e0       	ldi	r30, 0x01	; 1
     4ee:	4f ef       	ldi	r20, 0xFF	; 255
     4f0:	5f ef       	ldi	r21, 0xFF	; 255
     4f2:	6f ef       	ldi	r22, 0xFF	; 255
     4f4:	7f ef       	ldi	r23, 0xFF	; 255
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     4f8:	8b e0       	ldi	r24, 0x0B	; 11
     4fa:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     4fc:	21 2f       	mov	r18, r17
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	2e 5f       	subi	r18, 0xFE	; 254
     502:	3f 4f       	sbci	r19, 0xFF	; 255
     504:	1e c0       	rjmp	.+60     	; 0x542 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     506:	ef 9d       	mul	r30, r15
     508:	d0 01       	movw	r26, r0
     50a:	11 24       	eor	r1, r1
     50c:	a2 53       	subi	r26, 0x32	; 50
     50e:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     510:	1a 96       	adiw	r26, 0x0a	; 10
     512:	8c 91       	ld	r24, X
     514:	1a 97       	sbiw	r26, 0x0a	; 10
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	82 17       	cp	r24, r18
     51a:	93 07       	cpc	r25, r19
     51c:	69 f4       	brne	.+26     	; 0x538 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     51e:	16 96       	adiw	r26, 0x06	; 6
     520:	8d 91       	ld	r24, X+
     522:	9d 91       	ld	r25, X+
     524:	0d 90       	ld	r0, X+
     526:	bc 91       	ld	r27, X
     528:	a0 2d       	mov	r26, r0
     52a:	48 17       	cp	r20, r24
     52c:	59 07       	cpc	r21, r25
     52e:	6a 07       	cpc	r22, r26
     530:	7b 07       	cpc	r23, r27
     532:	10 f0       	brcs	.+4      	; 0x538 <trtSignal+0x5a>
     534:	fe 2f       	mov	r31, r30
     536:	02 c0       	rjmp	.+4      	; 0x53c <trtSignal+0x5e>
     538:	db 01       	movw	r26, r22
     53a:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     53c:	ef 5f       	subi	r30, 0xFF	; 255
     53e:	ac 01       	movw	r20, r24
     540:	bd 01       	movw	r22, r26
     542:	0e 17       	cp	r16, r30
     544:	00 f7       	brcc	.-64     	; 0x506 <trtSignal+0x28>
  minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     546:	ff 23       	and	r31, r31
     548:	41 f4       	brne	.+16     	; 0x55a <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     54a:	e1 2f       	mov	r30, r17
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	e5 53       	subi	r30, 0x35	; 53
     550:	fd 4f       	sbci	r31, 0xFD	; 253
     552:	86 a5       	ldd	r24, Z+46	; 0x2e
     554:	8f 5f       	subi	r24, 0xFF	; 255
     556:	86 a7       	std	Z+46, r24	; 0x2e
     558:	11 c0       	rjmp	.+34     	; 0x57c <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     55a:	2f 2f       	mov	r18, r31
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	8b e0       	ldi	r24, 0x0B	; 11
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	28 9f       	mul	r18, r24
     564:	f0 01       	movw	r30, r0
     566:	29 9f       	mul	r18, r25
     568:	f0 0d       	add	r31, r0
     56a:	38 9f       	mul	r19, r24
     56c:	f0 0d       	add	r31, r0
     56e:	11 24       	eor	r1, r1
     570:	e4 53       	subi	r30, 0x34	; 52
     572:	fd 4f       	sbci	r31, 0xFD	; 253
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     578:	0e 94 67 00 	call	0xce	; 0xce <__vector_13>
  }

  sei(); // reenable interrupts
     57c:	78 94       	sei
}
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	08 95       	ret

00000586 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     586:	20 91 84 00 	lds	r18, 0x0084
     58a:	30 91 85 00 	lds	r19, 0x0085
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	80 91 04 03 	lds	r24, 0x0304
     596:	90 91 05 03 	lds	r25, 0x0305
     59a:	a0 91 06 03 	lds	r26, 0x0306
     59e:	b0 91 07 03 	lds	r27, 0x0307
     5a2:	dc 01       	movw	r26, r24
     5a4:	99 27       	eor	r25, r25
     5a6:	88 27       	eor	r24, r24
     5a8:	28 0f       	add	r18, r24
     5aa:	39 1f       	adc	r19, r25
     5ac:	4a 1f       	adc	r20, r26
     5ae:	5b 1f       	adc	r21, r27
}
     5b0:	b9 01       	movw	r22, r18
     5b2:	ca 01       	movw	r24, r20
     5b4:	08 95       	ret

000005b6 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     5b6:	e0 91 cd 02 	lds	r30, 0x02CD
     5ba:	ab e0       	ldi	r26, 0x0B	; 11
     5bc:	ea 9f       	mul	r30, r26
     5be:	f0 01       	movw	r30, r0
     5c0:	11 24       	eor	r1, r1
     5c2:	e2 53       	subi	r30, 0x32	; 50
     5c4:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     5c6:	f8 94       	cli

  t->state = TIMEQ;
     5c8:	a2 e0       	ldi	r26, 0x02	; 2
     5ca:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     5cc:	62 83       	std	Z+2, r22	; 0x02
     5ce:	73 83       	std	Z+3, r23	; 0x03
     5d0:	84 83       	std	Z+4, r24	; 0x04
     5d2:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     5d4:	26 83       	std	Z+6, r18	; 0x06
     5d6:	37 83       	std	Z+7, r19	; 0x07
     5d8:	40 87       	std	Z+8, r20	; 0x08
     5da:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5dc:	0e 94 67 00 	call	0xce	; 0xce <__vector_13>
}
     5e0:	08 95       	ret

000005e2 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     5e2:	80 91 cd 02 	lds	r24, 0x02CD
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	2b e0       	ldi	r18, 0x0B	; 11
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	82 9f       	mul	r24, r18
     5ee:	f0 01       	movw	r30, r0
     5f0:	83 9f       	mul	r24, r19
     5f2:	f0 0d       	add	r31, r0
     5f4:	92 9f       	mul	r25, r18
     5f6:	f0 0d       	add	r31, r0
     5f8:	11 24       	eor	r1, r1
     5fa:	e4 53       	subi	r30, 0x34	; 52
     5fc:	fd 4f       	sbci	r31, 0xFD	; 253
     5fe:	df 01       	movw	r26, r30
     600:	14 96       	adiw	r26, 0x04	; 4
     602:	64 81       	ldd	r22, Z+4	; 0x04
     604:	11 96       	adiw	r26, 0x01	; 1
     606:	7c 91       	ld	r23, X
     608:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     60a:	12 96       	adiw	r26, 0x02	; 2
     60c:	8c 91       	ld	r24, X
     60e:	12 97       	sbiw	r26, 0x02	; 2
     610:	13 96       	adiw	r26, 0x03	; 3
     612:	9c 91       	ld	r25, X
     614:	08 95       	ret

00000616 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     616:	80 91 cd 02 	lds	r24, 0x02CD
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	2b e0       	ldi	r18, 0x0B	; 11
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	82 9f       	mul	r24, r18
     622:	f0 01       	movw	r30, r0
     624:	83 9f       	mul	r24, r19
     626:	f0 0d       	add	r31, r0
     628:	92 9f       	mul	r25, r18
     62a:	f0 0d       	add	r31, r0
     62c:	11 24       	eor	r1, r1
     62e:	e4 53       	subi	r30, 0x34	; 52
     630:	fd 4f       	sbci	r31, 0xFD	; 253
     632:	df 01       	movw	r26, r30
     634:	18 96       	adiw	r26, 0x08	; 8
     636:	60 85       	ldd	r22, Z+8	; 0x08
     638:	11 96       	adiw	r26, 0x01	; 1
     63a:	7c 91       	ld	r23, X
     63c:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     63e:	12 96       	adiw	r26, 0x02	; 2
     640:	8c 91       	ld	r24, X
     642:	12 97       	sbiw	r26, 0x02	; 2
     644:	13 96       	adiw	r26, 0x03	; 3
     646:	9c 91       	ld	r25, X
     648:	08 95       	ret

0000064a <trtTerminate>:

void trtTerminate(void) {

  cli();
     64a:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     64c:	80 91 cd 02 	lds	r24, 0x02CD
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	2b e0       	ldi	r18, 0x0B	; 11
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	82 9f       	mul	r24, r18
     658:	f0 01       	movw	r30, r0
     65a:	83 9f       	mul	r24, r19
     65c:	f0 0d       	add	r31, r0
     65e:	92 9f       	mul	r25, r18
     660:	f0 0d       	add	r31, r0
     662:	11 24       	eor	r1, r1
     664:	e4 53       	subi	r30, 0x34	; 52
     666:	fd 4f       	sbci	r31, 0xFD	; 253
     668:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     66a:	0e 94 67 00 	call	0xce	; 0xce <__vector_13>
}
     66e:	08 95       	ret

00000670 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     670:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     672:	e8 2f       	mov	r30, r24
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	e7 50       	subi	r30, 0x07	; 7
     678:	fd 4f       	sbci	r31, 0xFD	; 253
  temp = *s ;
     67a:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     67c:	88 23       	and	r24, r24
     67e:	19 f0       	breq	.+6      	; 0x686 <trtAccept+0x16>
    (*s)--;
     680:	81 50       	subi	r24, 0x01	; 1
     682:	80 83       	st	Z, r24
     684:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     686:	78 94       	sei
  return temp ;
}
     688:	08 95       	ret

0000068a <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR1A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR1L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR1L = (F_CPU / (16UL * UART_BAUD)) - 1;
     68a:	87 e6       	ldi	r24, 0x67	; 103
     68c:	80 93 cc 00 	sts	0x00CC, r24
#endif
  UCSR1B = _BV(TXEN1) | _BV(RXEN1); /* tx/rx enable */
     690:	e9 ec       	ldi	r30, 0xC9	; 201
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	88 e1       	ldi	r24, 0x18	; 24
     696:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     698:	10 92 a7 01 	sts	0x01A7, r1
     69c:	10 92 a6 01 	sts	0x01A6, r1
  tx_out = 0;
     6a0:	10 92 a9 01 	sts	0x01A9, r1
     6a4:	10 92 a8 01 	sts	0x01A8, r1

  //enable receive ISR -- added for TRT
  UCSR1B |= (1<<RXCIE1) ;
     6a8:	80 81       	ld	r24, Z
     6aa:	80 68       	ori	r24, 0x80	; 128
     6ac:	80 83       	st	Z, r24
}
     6ae:	08 95       	ret

000006b0 <__vector_29>:



ISR( USART1_UDRE_vect )
{
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	0b b6       	in	r0, 0x3b	; 59
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	8f 93       	push	r24
     6c4:	9f 93       	push	r25
     6c6:	ef 93       	push	r30
     6c8:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     6ca:	20 91 a6 01 	lds	r18, 0x01A6
     6ce:	30 91 a7 01 	lds	r19, 0x01A7
     6d2:	80 91 a8 01 	lds	r24, 0x01A8
     6d6:	90 91 a9 01 	lds	r25, 0x01A9
     6da:	28 17       	cp	r18, r24
     6dc:	39 07       	cpc	r19, r25
     6de:	31 f4       	brne	.+12     	; 0x6ec <__vector_29+0x3c>
    UCSR1B &= ~(1 << UDRIE1);	// disable TX interrupt
     6e0:	80 91 c9 00 	lds	r24, 0x00C9
     6e4:	8f 7d       	andi	r24, 0xDF	; 223
     6e6:	80 93 c9 00 	sts	0x00C9, r24
     6ea:	1d c0       	rjmp	.+58     	; 0x726 <__vector_29+0x76>
    //return;
  }
  else {
  	UDR1 = tx_buff[tx_out];
     6ec:	e0 91 a8 01 	lds	r30, 0x01A8
     6f0:	f0 91 a9 01 	lds	r31, 0x01A9
     6f4:	e6 55       	subi	r30, 0x56	; 86
     6f6:	fe 4f       	sbci	r31, 0xFE	; 254
     6f8:	80 81       	ld	r24, Z
     6fa:	80 93 ce 00 	sts	0x00CE, r24
  	tx_out++;
     6fe:	80 91 a8 01 	lds	r24, 0x01A8
     702:	90 91 a9 01 	lds	r25, 0x01A9
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	90 93 a9 01 	sts	0x01A9, r25
     70c:	80 93 a8 01 	sts	0x01A8, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     710:	80 91 a8 01 	lds	r24, 0x01A8
     714:	90 91 a9 01 	lds	r25, 0x01A9
     718:	88 3c       	cpi	r24, 0xC8	; 200
     71a:	91 05       	cpc	r25, r1
     71c:	21 f4       	brne	.+8      	; 0x726 <__vector_29+0x76>
     71e:	10 92 a9 01 	sts	0x01A9, r1
     722:	10 92 a8 01 	sts	0x01A8, r1
  }
}
     726:	ff 91       	pop	r31
     728:	ef 91       	pop	r30
     72a:	9f 91       	pop	r25
     72c:	8f 91       	pop	r24
     72e:	3f 91       	pop	r19
     730:	2f 91       	pop	r18
     732:	0f 90       	pop	r0
     734:	0b be       	out	0x3b, r0	; 59
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     740:	1f 93       	push	r17
     742:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     744:	8a 30       	cpi	r24, 0x0A	; 10
     746:	19 f4       	brne	.+6      	; 0x74e <uart_putchar+0xe>
     748:	8d e0       	ldi	r24, 0x0D	; 13
     74a:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
  char i = tx_in;
     74e:	80 91 a6 01 	lds	r24, 0x01A6
     752:	90 91 a7 01 	lds	r25, 0x01A7
  i++;
     756:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     758:	88 3c       	cpi	r24, 0xC8	; 200
     75a:	09 f4       	brne	.+2      	; 0x75e <uart_putchar+0x1e>
     75c:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     75e:	e0 91 a6 01 	lds	r30, 0x01A6
     762:	f0 91 a7 01 	lds	r31, 0x01A7
     766:	e6 55       	subi	r30, 0x56	; 86
     768:	fe 4f       	sbci	r31, 0xFE	; 254
     76a:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     76c:	28 2f       	mov	r18, r24
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	80 91 a8 01 	lds	r24, 0x01A8
     774:	90 91 a9 01 	lds	r25, 0x01A9
     778:	28 17       	cp	r18, r24
     77a:	39 07       	cpc	r19, r25
     77c:	c9 f3       	breq	.-14     	; 0x770 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     77e:	30 93 a7 01 	sts	0x01A7, r19
     782:	20 93 a6 01 	sts	0x01A6, r18
  UCSR1B |= (1 << UDRIE1);  // enable TX interrupt
     786:	80 91 c9 00 	lds	r24, 0x00C9
     78a:	80 62       	ori	r24, 0x20	; 32
     78c:	80 93 c9 00 	sts	0x00C9, r24
  return 0;
 }
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	1f 91       	pop	r17
     796:	08 95       	ret

00000798 <__vector_28>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART1_RX_vect) {
     798:	1f 92       	push	r1
     79a:	0f 92       	push	r0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	0f 92       	push	r0
     7a0:	0b b6       	in	r0, 0x3b	; 59
     7a2:	0f 92       	push	r0
     7a4:	11 24       	eor	r1, r1
     7a6:	2f 93       	push	r18
     7a8:	3f 93       	push	r19
     7aa:	4f 93       	push	r20
     7ac:	5f 93       	push	r21
     7ae:	6f 93       	push	r22
     7b0:	7f 93       	push	r23
     7b2:	8f 93       	push	r24
     7b4:	9f 93       	push	r25
     7b6:	af 93       	push	r26
     7b8:	bf 93       	push	r27
     7ba:	ef 93       	push	r30
     7bc:	ff 93       	push	r31
	trt_rx_c = UDR1;
     7be:	80 91 ce 00 	lds	r24, 0x00CE
     7c2:	80 93 11 03 	sts	0x0311, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	0e 94 6f 02 	call	0x4de	; 0x4de <trtSignal>
}
     7cc:	ff 91       	pop	r31
     7ce:	ef 91       	pop	r30
     7d0:	bf 91       	pop	r27
     7d2:	af 91       	pop	r26
     7d4:	9f 91       	pop	r25
     7d6:	8f 91       	pop	r24
     7d8:	7f 91       	pop	r23
     7da:	6f 91       	pop	r22
     7dc:	5f 91       	pop	r21
     7de:	4f 91       	pop	r20
     7e0:	3f 91       	pop	r19
     7e2:	2f 91       	pop	r18
     7e4:	0f 90       	pop	r0
     7e6:	0b be       	out	0x3b, r0	; 59
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     800:	80 91 54 01 	lds	r24, 0x0154
     804:	90 91 55 01 	lds	r25, 0x0155
     808:	89 2b       	or	r24, r25
     80a:	09 f0       	breq	.+2      	; 0x80e <uart_getchar+0x1c>
     80c:	a1 c0       	rjmp	.+322    	; 0x950 <uart_getchar+0x15e>
     80e:	06 e5       	ldi	r16, 0x56	; 86
     810:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 4f 02 	call	0x49e	; 0x49e <trtWait>
	if (UCSR1A & _BV(FE1))
     818:	80 91 c8 00 	lds	r24, 0x00C8
     81c:	84 ff       	sbrs	r24, 4
     81e:	03 c0       	rjmp	.+6      	; 0x826 <uart_getchar+0x34>
     820:	2e ef       	ldi	r18, 0xFE	; 254
     822:	3f ef       	ldi	r19, 0xFF	; 255
     824:	a9 c0       	rjmp	.+338    	; 0x978 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR1A & _BV(DOR1))
     826:	80 91 c8 00 	lds	r24, 0x00C8
     82a:	83 fd       	sbrc	r24, 3
     82c:	a3 c0       	rjmp	.+326    	; 0x974 <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     82e:	90 91 11 03 	lds	r25, 0x0311

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     832:	9d 30       	cpi	r25, 0x0D	; 13
     834:	11 f0       	breq	.+4      	; 0x83a <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     836:	9a 30       	cpi	r25, 0x0A	; 10
     838:	81 f4       	brne	.+32     	; 0x85a <uart_getchar+0x68>
	  {
	    *cp = c;
     83a:	8a e0       	ldi	r24, 0x0A	; 10
     83c:	f8 01       	movw	r30, r16
     83e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     840:	b7 01       	movw	r22, r14
     842:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
	    rxp = b;
     846:	86 e5       	ldi	r24, 0x56	; 86
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	90 93 55 01 	sts	0x0155, r25
     84e:	80 93 54 01 	sts	0x0154, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	0e 94 6f 02 	call	0x4de	; 0x4de <trtSignal>
     858:	7b c0       	rjmp	.+246    	; 0x950 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     85a:	99 30       	cpi	r25, 0x09	; 9
     85c:	09 f4       	brne	.+2      	; 0x860 <uart_getchar+0x6e>
     85e:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     860:	89 2f       	mov	r24, r25
     862:	80 52       	subi	r24, 0x20	; 32
     864:	8f 35       	cpi	r24, 0x5F	; 95
     866:	10 f0       	brcs	.+4      	; 0x86c <uart_getchar+0x7a>
     868:	90 3a       	cpi	r25, 0xA0	; 160
     86a:	70 f0       	brcs	.+28     	; 0x888 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	05 3a       	cpi	r16, 0xA5	; 165
     870:	1f 07       	cpc	r17, r31
     872:	11 f4       	brne	.+4      	; 0x878 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     874:	87 e0       	ldi	r24, 0x07	; 7
     876:	04 c0       	rjmp	.+8      	; 0x880 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     878:	f8 01       	movw	r30, r16
     87a:	91 93       	st	Z+, r25
     87c:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     87e:	89 2f       	mov	r24, r25
     880:	b7 01       	movw	r22, r14
     882:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
     886:	c5 cf       	rjmp	.-118    	; 0x812 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     888:	92 31       	cpi	r25, 0x12	; 18
     88a:	39 f1       	breq	.+78     	; 0x8da <uart_getchar+0xe8>
     88c:	93 31       	cpi	r25, 0x13	; 19
     88e:	38 f4       	brcc	.+14     	; 0x89e <uart_getchar+0xac>
     890:	93 30       	cpi	r25, 0x03	; 3
     892:	09 f4       	brne	.+2      	; 0x896 <uart_getchar+0xa4>
     894:	6f c0       	rjmp	.+222    	; 0x974 <uart_getchar+0x182>
     896:	98 30       	cpi	r25, 0x08	; 8
     898:	09 f0       	breq	.+2      	; 0x89c <uart_getchar+0xaa>
     89a:	bb cf       	rjmp	.-138    	; 0x812 <uart_getchar+0x20>
     89c:	09 c0       	rjmp	.+18     	; 0x8b0 <uart_getchar+0xbe>
     89e:	97 31       	cpi	r25, 0x17	; 23
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <uart_getchar+0xb2>
     8a2:	4b c0       	rjmp	.+150    	; 0x93a <uart_getchar+0x148>
     8a4:	9f 37       	cpi	r25, 0x7F	; 127
     8a6:	21 f0       	breq	.+8      	; 0x8b0 <uart_getchar+0xbe>
     8a8:	95 31       	cpi	r25, 0x15	; 21
     8aa:	09 f0       	breq	.+2      	; 0x8ae <uart_getchar+0xbc>
     8ac:	b2 cf       	rjmp	.-156    	; 0x812 <uart_getchar+0x20>
     8ae:	32 c0       	rjmp	.+100    	; 0x914 <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     8b0:	f1 e0       	ldi	r31, 0x01	; 1
     8b2:	06 35       	cpi	r16, 0x56	; 86
     8b4:	1f 07       	cpc	r17, r31
     8b6:	09 f0       	breq	.+2      	; 0x8ba <uart_getchar+0xc8>
     8b8:	08 f4       	brcc	.+2      	; 0x8bc <uart_getchar+0xca>
     8ba:	ab cf       	rjmp	.-170    	; 0x812 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     8bc:	88 e0       	ldi	r24, 0x08	; 8
     8be:	b7 01       	movw	r22, r14
     8c0:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
		uart_putchar(' ', stream);
     8c4:	80 e2       	ldi	r24, 0x20	; 32
     8c6:	b7 01       	movw	r22, r14
     8c8:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
		uart_putchar('\b', stream);
     8cc:	88 e0       	ldi	r24, 0x08	; 8
     8ce:	b7 01       	movw	r22, r14
     8d0:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
		cp--;
     8d4:	01 50       	subi	r16, 0x01	; 1
     8d6:	10 40       	sbci	r17, 0x00	; 0
     8d8:	9c cf       	rjmp	.-200    	; 0x812 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     8da:	8d e0       	ldi	r24, 0x0D	; 13
     8dc:	b7 01       	movw	r22, r14
     8de:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
     8e2:	c6 e5       	ldi	r28, 0x56	; 86
     8e4:	d1 e0       	ldi	r29, 0x01	; 1
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     8e8:	89 91       	ld	r24, Y+
     8ea:	b7 01       	movw	r22, r14
     8ec:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     8f0:	c0 17       	cp	r28, r16
     8f2:	d1 07       	cpc	r29, r17
     8f4:	c8 f3       	brcs	.-14     	; 0x8e8 <uart_getchar+0xf6>
     8f6:	8d cf       	rjmp	.-230    	; 0x812 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     8f8:	88 e0       	ldi	r24, 0x08	; 8
     8fa:	b7 01       	movw	r22, r14
     8fc:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
		uart_putchar(' ', stream);
     900:	80 e2       	ldi	r24, 0x20	; 32
     902:	b7 01       	movw	r22, r14
     904:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
		uart_putchar('\b', stream);
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	b7 01       	movw	r22, r14
     90c:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
		cp--;
     910:	01 50       	subi	r16, 0x01	; 1
     912:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	06 35       	cpi	r16, 0x56	; 86
     918:	18 07       	cpc	r17, r24
     91a:	09 f0       	breq	.+2      	; 0x91e <uart_getchar+0x12c>
     91c:	68 f7       	brcc	.-38     	; 0x8f8 <uart_getchar+0x106>
     91e:	79 cf       	rjmp	.-270    	; 0x812 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     920:	88 e0       	ldi	r24, 0x08	; 8
     922:	b7 01       	movw	r22, r14
     924:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
		uart_putchar(' ', stream);
     928:	80 e2       	ldi	r24, 0x20	; 32
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
		uart_putchar('\b', stream);
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	b7 01       	movw	r22, r14
     934:	0e 94 a0 03 	call	0x740	; 0x740 <uart_putchar>
     938:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     93a:	e1 e0       	ldi	r30, 0x01	; 1
     93c:	06 35       	cpi	r16, 0x56	; 86
     93e:	1e 07       	cpc	r17, r30
     940:	09 f0       	breq	.+2      	; 0x944 <uart_getchar+0x152>
     942:	08 f4       	brcc	.+2      	; 0x946 <uart_getchar+0x154>
     944:	66 cf       	rjmp	.-308    	; 0x812 <uart_getchar+0x20>
     946:	e8 01       	movw	r28, r16
     948:	8a 91       	ld	r24, -Y
     94a:	80 32       	cpi	r24, 0x20	; 32
     94c:	49 f7       	brne	.-46     	; 0x920 <uart_getchar+0x12e>
     94e:	61 cf       	rjmp	.-318    	; 0x812 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     950:	e0 91 54 01 	lds	r30, 0x0154
     954:	f0 91 55 01 	lds	r31, 0x0155
     958:	81 91       	ld	r24, Z+
     95a:	f0 93 55 01 	sts	0x0155, r31
     95e:	e0 93 54 01 	sts	0x0154, r30
  if (c == '\n')
     962:	8a 30       	cpi	r24, 0x0A	; 10
     964:	21 f4       	brne	.+8      	; 0x96e <uart_getchar+0x17c>
    rxp = 0;
     966:	10 92 55 01 	sts	0x0155, r1
     96a:	10 92 54 01 	sts	0x0154, r1

  return c;
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	02 c0       	rjmp	.+4      	; 0x978 <uart_getchar+0x186>
     974:	2f ef       	ldi	r18, 0xFF	; 255
     976:	3f ef       	ldi	r19, 0xFF	; 255
}
     978:	c9 01       	movw	r24, r18
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	08 95       	ret

00000988 <__vector_16>:
// increments task timers
// Full duplex transmit/receive
// sends ir character (if ready)
// receives ir char (if valid)
// builds ir receive buffer
ISR (TIMER0_COMPA_vect) {
     988:	1f 92       	push	r1
     98a:	0f 92       	push	r0
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	0f 92       	push	r0
     990:	0b b6       	in	r0, 0x3b	; 59
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	ef 93       	push	r30
     99c:	ff 93       	push	r31
	unsigned char c ;
	    
	//**********************
  	// send an ir char if tx is ready and still char in buffer to send
	// and USART is ready
	if (ir_tx_ready ){ //&& ir_tx_buffer[ir_tx_count]>0
     99e:	80 91 b8 02 	lds	r24, 0x02B8
     9a2:	88 23       	and	r24, r24
     9a4:	01 f1       	breq	.+64     	; 0x9e6 <__vector_16+0x5e>
		if (UCSR1A & (1<<UDRE1)) UDR1 = ir_tx_buffer[ir_tx_count++];
     9a6:	80 91 c8 00 	lds	r24, 0x00C8
     9aa:	85 ff       	sbrs	r24, 5
     9ac:	0c c0       	rjmp	.+24     	; 0x9c6 <__vector_16+0x3e>
     9ae:	80 91 10 03 	lds	r24, 0x0310
     9b2:	e8 2f       	mov	r30, r24
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	ea 58       	subi	r30, 0x8A	; 138
     9b8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ba:	90 81       	ld	r25, Z
     9bc:	90 93 ce 00 	sts	0x00CE, r25
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	80 93 10 03 	sts	0x0310, r24
		if (ir_tx_buffer[ir_tx_count]==0x00) ir_tx_ready = 0 ; //}of buffer
     9c6:	e0 91 10 03 	lds	r30, 0x0310
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	ea 58       	subi	r30, 0x8A	; 138
     9ce:	fd 4f       	sbci	r31, 0xFD	; 253
     9d0:	80 81       	ld	r24, Z
     9d2:	88 23       	and	r24, r24
     9d4:	11 f4       	brne	.+4      	; 0x9da <__vector_16+0x52>
     9d6:	10 92 b8 02 	sts	0x02B8, r1
		if (ir_tx_count >= buffer_size) ir_tx_ready = 0; // buffer overrun
     9da:	80 91 10 03 	lds	r24, 0x0310
     9de:	80 34       	cpi	r24, 0x40	; 64
     9e0:	10 f0       	brcs	.+4      	; 0x9e6 <__vector_16+0x5e>
     9e2:	10 92 b8 02 	sts	0x02B8, r1
	}
	
	//**********************
  	// recv an ir char if data ready 
  	// otherwise set c to null 
	if (UCSR1A & (1<<RXC1) ) {
     9e6:	80 91 c8 00 	lds	r24, 0x00C8
     9ea:	87 ff       	sbrs	r24, 7
     9ec:	2b c0       	rjmp	.+86     	; 0xa44 <__vector_16+0xbc>
		c = UDR1 ; // valid char 
     9ee:	90 91 ce 00 	lds	r25, 0x00CE
	else c = 0 ; // nonvalid

	//**********************
	// append character to the received string
	// if character is valid and we expect a string
	if (c>0) { //&& (ir_rx_ready==0)) {
     9f2:	99 23       	and	r25, r25
     9f4:	39 f1       	breq	.+78     	; 0xa44 <__vector_16+0xbc>

		if (c == start_token) { // restart the string
     9f6:	93 32       	cpi	r25, 0x23	; 35
     9f8:	19 f4       	brne	.+6      	; 0xa00 <__vector_16+0x78>
			ir_rx_count = 0 ;
     9fa:	10 92 0f 03 	sts	0x030F, r1
     9fe:	22 c0       	rjmp	.+68     	; 0xa44 <__vector_16+0xbc>
		}

		else if (c == end_token){ //}the string
     a00:	95 32       	cpi	r25, 0x25	; 37
     a02:	51 f4       	brne	.+20     	; 0xa18 <__vector_16+0x90>
			ir_rx_buffer[ir_rx_count] = 0x00 ;
     a04:	e0 91 0f 03 	lds	r30, 0x030F
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	ee 5e       	subi	r30, 0xEE	; 238
     a0c:	fc 4f       	sbci	r31, 0xFC	; 252
     a0e:	10 82       	st	Z, r1
			ir_rx_ready = 1 ;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	80 93 b9 02 	sts	0x02B9, r24
     a16:	16 c0       	rjmp	.+44     	; 0xa44 <__vector_16+0xbc>
		}

		else { // add to string and check for buffer overrun
			ir_rx_buffer[ir_rx_count++] = c ;
     a18:	80 91 0f 03 	lds	r24, 0x030F
     a1c:	e8 2f       	mov	r30, r24
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	ee 5e       	subi	r30, 0xEE	; 238
     a22:	fc 4f       	sbci	r31, 0xFC	; 252
     a24:	90 83       	st	Z, r25
     a26:	8f 5f       	subi	r24, 0xFF	; 255
     a28:	80 93 0f 03 	sts	0x030F, r24
			if (ir_rx_count >= buffer_size) { // buffer overrun
     a2c:	80 91 0f 03 	lds	r24, 0x030F
     a30:	80 34       	cpi	r24, 0x40	; 64
     a32:	40 f0       	brcs	.+16     	; 0xa44 <__vector_16+0xbc>
				ir_rx_ready = 2;
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	80 93 b9 02 	sts	0x02B9, r24
				ir_rx_buffer[buffer_size-1] = 0x00 ;
     a3a:	10 92 51 03 	sts	0x0351, r1
				ir_rx_count = buffer_size -1 ; //???
     a3e:	8f e3       	ldi	r24, 0x3F	; 63
     a40:	80 93 0f 03 	sts	0x030F, r24
			}
		}

	} //}if c>0
} 
     a44:	ff 91       	pop	r31
     a46:	ef 91       	pop	r30
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	0f 90       	pop	r0
     a4e:	0b be       	out	0x3b, r0	; 59
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <IR_key>:
	fprintf(stdout, "%c %c %c", mode, function, authorization);
	trtSignal(SEM_SHARED);
}

// --- define task 1  ----------------------------------------
void IR_key(void* args) {
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     a62:	20 91 04 03 	lds	r18, 0x0304
     a66:	30 91 05 03 	lds	r19, 0x0305
     a6a:	40 91 06 03 	lds	r20, 0x0306
     a6e:	50 91 07 03 	lds	r21, 0x0307
     a72:	a9 01       	movw	r20, r18
     a74:	33 27       	eor	r19, r19
     a76:	22 27       	eor	r18, r18
     a78:	60 91 84 00 	lds	r22, 0x0084
     a7c:	70 91 85 00 	lds	r23, 0x0085
		}
		*/
		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.2);
	    trtSleepUntil(rel, dead);
     a80:	e0 90 84 00 	lds	r14, 0x0084
     a84:	f0 90 85 00 	lds	r15, 0x0085
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	62 0f       	add	r22, r18
     a8e:	73 1f       	adc	r23, r19
     a90:	84 1f       	adc	r24, r20
     a92:	95 1f       	adc	r25, r21
     a94:	66 5e       	subi	r22, 0xE6	; 230
     a96:	79 4f       	sbci	r23, 0xF9	; 249
     a98:	8f 4f       	sbci	r24, 0xFF	; 255
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	00 e0       	ldi	r16, 0x00	; 0
     a9e:	10 e0       	ldi	r17, 0x00	; 0
     aa0:	2e 0d       	add	r18, r14
     aa2:	3f 1d       	adc	r19, r15
     aa4:	40 1f       	adc	r20, r16
     aa6:	51 1f       	adc	r21, r17
     aa8:	2b 5c       	subi	r18, 0xCB	; 203
     aaa:	33 4f       	sbci	r19, 0xF3	; 243
     aac:	4f 4f       	sbci	r20, 0xFF	; 255
     aae:	5f 4f       	sbci	r21, 0xFF	; 255
     ab0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <trtSleepUntil>
     ab4:	d6 cf       	rjmp	.-84     	; 0xa62 <IR_key+0x8>

00000ab6 <main>:
	    trtSleepUntil(rel, dead);
	}
}

// --- Main Program ----------------------------------
int main(void) {
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
  DDRC = 0x01;    	// led connections
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	87 b9       	out	0x07, r24	; 7
  PORTC = 0x00;
     ac6:	18 b8       	out	0x08, r1	; 8
  DDRB = 0x00; 		// switch connections
     ac8:	14 b8       	out	0x04, r1	; 4
  PORTB = 0xff; 	// pullup on
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	85 b9       	out	0x05, r24	; 5
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     ace:	0e 94 45 03 	call	0x68a	; 0x68a <trt_uart_init>
  stdout = stdin = stderr = &uart0;
     ad2:	66 e4       	ldi	r22, 0x46	; 70
     ad4:	71 e0       	ldi	r23, 0x01	; 1
     ad6:	70 93 59 03 	sts	0x0359, r23
     ada:	60 93 58 03 	sts	0x0358, r22
     ade:	70 93 55 03 	sts	0x0355, r23
     ae2:	60 93 54 03 	sts	0x0354, r22
     ae6:	70 93 57 03 	sts	0x0357, r23
     aea:	60 93 56 03 	sts	0x0356, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 72 07 	call	0xee4	; 0xee4 <fputs>
    // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
     af6:	80 e5       	ldi	r24, 0x50	; 80
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 ab 01 	call	0x356	; 0x356 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     afe:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     b00:	10 92 fa 02 	sts	0x02FA, r1
  
  sei(); // set enabled interrupts;
     b04:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     b06:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     b08:	10 92 fb 02 	sts	0x02FB, r1
  
  sei(); // set enabled interrupts;
     b0c:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     b0e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	80 93 fd 02 	sts	0x02FD, r24
  
  sei(); // set enabled interrupts;
     b16:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     b18:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     b1a:	10 92 fe 02 	sts	0x02FE, r1
  
  sei(); // set enabled interrupts;
     b1e:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     b20:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     b22:	80 93 ff 02 	sts	0x02FF, r24
  
  sei(); // set enabled interrupts;
     b26:	78 94       	sei
  
  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variable

  // --- create tasks  ----------------
  trtCreateTask(IR_lock, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.2), &(args[0]));
     b28:	8e ee       	ldi	r24, 0xEE	; 238
     b2a:	95 e0       	ldi	r25, 0x05	; 5
     b2c:	68 ee       	ldi	r22, 0xE8	; 232
     b2e:	73 e0       	ldi	r23, 0x03	; 3
     b30:	2a e1       	ldi	r18, 0x1A	; 26
     b32:	36 e0       	ldi	r19, 0x06	; 6
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	a5 e3       	ldi	r26, 0x35	; 53
     b3a:	ea 2e       	mov	r14, r26
     b3c:	ac e0       	ldi	r26, 0x0C	; 12
     b3e:	fa 2e       	mov	r15, r26
     b40:	01 2d       	mov	r16, r1
     b42:	11 2d       	mov	r17, r1
     b44:	f2 e7       	ldi	r31, 0x72	; 114
     b46:	cf 2e       	mov	r12, r31
     b48:	f2 e0       	ldi	r31, 0x02	; 2
     b4a:	df 2e       	mov	r13, r31
     b4c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <trtCreateTask>
  trtCreateTask(IR_key, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.2), &(args[1]));
     b50:	8d e2       	ldi	r24, 0x2D	; 45
     b52:	95 e0       	ldi	r25, 0x05	; 5
     b54:	68 ee       	ldi	r22, 0xE8	; 232
     b56:	73 e0       	ldi	r23, 0x03	; 3
     b58:	2a e1       	ldi	r18, 0x1A	; 26
     b5a:	36 e0       	ldi	r19, 0x06	; 6
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	e4 e7       	ldi	r30, 0x74	; 116
     b62:	ce 2e       	mov	r12, r30
     b64:	e2 e0       	ldi	r30, 0x02	; 2
     b66:	de 2e       	mov	r13, r30
     b68:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <trtCreateTask>

  // --- Idle task --------------------------------------
  // For debugging, blink an LED
  // For production, you would probably comment out the body of the WHILE
  while (1) {
  	PORTC = PORTC ^ 0x01 ;
     b6c:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b6e:	20 e9       	ldi	r18, 0x90	; 144
     b70:	31 e0       	ldi	r19, 0x01	; 1
     b72:	88 b1       	in	r24, 0x08	; 8
     b74:	84 27       	eor	r24, r20
     b76:	88 b9       	out	0x08, r24	; 8
     b78:	88 ee       	ldi	r24, 0xE8	; 232
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	f9 01       	movw	r30, r18
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <main+0xc8>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b84:	d9 f7       	brne	.-10     	; 0xb7c <main+0xc6>
     b86:	f5 cf       	rjmp	.-22     	; 0xb72 <main+0xbc>

00000b88 <initialize_IR>:
//Set it all up
void initialize_IR(void)
{
  //********************    
  //set up timer 0 for 1 mSec timebase 
  TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	90 93 6e 00 	sts	0x006E, r25
  OCR0A = 249 ;//
     b8e:	89 ef       	ldi	r24, 0xF9	; 249
     b90:	87 bd       	out	0x27, r24	; 39
  //set prescalar to divide by 64 (4 microsec/tick)
  TCCR0B= 3; //;	
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	85 bd       	out	0x25, r24	; 37
  // turn on clear-on-match
  TCCR0A= (1<<WGM01) ;
     b96:	94 bd       	out	0x24, r25	; 36
  // IR carrier generator
  // set up timer 2 for square wave with NO ISR
  // 56000 Hz => 1/2 cycle 8.928 microsec = 143 cycles
  // Connect D7 thru resistor to (+)IR_LED(-) to TXD:: D7--/\/\--|>|----TXD
  //
  OCR2A = 142 ; //143 cycles/half-period
     b98:	8e e8       	ldi	r24, 0x8E	; 142
     b9a:	80 93 b3 00 	sts	0x00B3, r24
  //  count at full rate
  TCCR2B =  1;	
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 b1 00 	sts	0x00B1, r24
  // set to toggle OC2A, clear on match,
  TCCR2A = (1<<COM2A0) | (1<<WGM21) ;
     ba4:	82 e4       	ldi	r24, 0x42	; 66
     ba6:	80 93 b0 00 	sts	0x00B0, r24
  // PORT D.7 is OC2A
  DDRD = (1<<PIND7) ;	
     baa:	80 e8       	ldi	r24, 0x80	; 128
     bac:	8a b9       	out	0x0a, r24	; 10
  //********************
  //init UART1 for IR comm
  UBRR1L = (F_CPU / (16UL * IR_UART_BAUD)) - 1;
     bae:	8f ec       	ldi	r24, 0xCF	; 207
     bb0:	80 93 cc 00 	sts	0x00CC, r24
  UCSR1B = _BV(TXEN1) | _BV(RXEN1); /* tx/rx enable */
     bb4:	88 e1       	ldi	r24, 0x18	; 24
     bb6:	80 93 c9 00 	sts	0x00C9, r24
  UCSR1C = (1<<UCSZ11) | (1<<USBS1) ; // 7 bit | 2 stop bits
     bba:	8c e0       	ldi	r24, 0x0C	; 12
     bbc:	80 93 ca 00 	sts	0x00CA, r24

  //init UART0 for PC comm
  UBRR0L = (F_CPU / (16UL * PC_UART_BAUD)) - 1;
     bc0:	87 e6       	ldi	r24, 0x67	; 103
     bc2:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B = _BV(TXEN0) ; //| _BV(RXEN1); /* tx/rx enable */
     bc6:	88 e0       	ldi	r24, 0x08	; 8
     bc8:	80 93 c1 00 	sts	0x00C1, r24
  fprintf(&uart0,"\n\r...Starting IR comm ...\n\r");
     bcc:	84 e1       	ldi	r24, 0x14	; 20
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	66 e4       	ldi	r22, 0x46	; 70
     bd2:	71 e0       	ldi	r23, 0x01	; 1
     bd4:	0e 94 72 07 	call	0xee4	; 0xee4 <fputs>
  
  //********************
  //crank up the ISRs
  sei();
     bd8:	78 94       	sei
}  
     bda:	08 95       	ret

00000bdc <IR_lock>:
	    trtSleepUntil(rel, dead);
	}
}

// --- define task 2  ----------------------------------------
void IR_lock(void* args) {
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
	uint32_t rel, dead;
	initialize_IR();
     be4:	0e 94 c4 05 	call	0xb88	; 0xb88 <initialize_IR>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     be8:	20 91 04 03 	lds	r18, 0x0304
     bec:	30 91 05 03 	lds	r19, 0x0305
     bf0:	40 91 06 03 	lds	r20, 0x0306
     bf4:	50 91 07 03 	lds	r21, 0x0307
     bf8:	a9 01       	movw	r20, r18
     bfa:	33 27       	eor	r19, r19
     bfc:	22 27       	eor	r18, r18
     bfe:	60 91 84 00 	lds	r22, 0x0084
     c02:	70 91 85 00 	lds	r23, 0x0085
		}
		*/
		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.2);
	    trtSleepUntil(rel, dead);
     c06:	e0 90 84 00 	lds	r14, 0x0084
     c0a:	f0 90 85 00 	lds	r15, 0x0085
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	62 0f       	add	r22, r18
     c14:	73 1f       	adc	r23, r19
     c16:	84 1f       	adc	r24, r20
     c18:	95 1f       	adc	r25, r21
     c1a:	66 5e       	subi	r22, 0xE6	; 230
     c1c:	79 4f       	sbci	r23, 0xF9	; 249
     c1e:	8f 4f       	sbci	r24, 0xFF	; 255
     c20:	9f 4f       	sbci	r25, 0xFF	; 255
     c22:	00 e0       	ldi	r16, 0x00	; 0
     c24:	10 e0       	ldi	r17, 0x00	; 0
     c26:	2e 0d       	add	r18, r14
     c28:	3f 1d       	adc	r19, r15
     c2a:	40 1f       	adc	r20, r16
     c2c:	51 1f       	adc	r21, r17
     c2e:	2b 5c       	subi	r18, 0xCB	; 203
     c30:	33 4f       	sbci	r19, 0xF3	; 243
     c32:	4f 4f       	sbci	r20, 0xFF	; 255
     c34:	5f 4f       	sbci	r21, 0xFF	; 255
     c36:	0e 94 db 02 	call	0x5b6	; 0x5b6 <trtSleepUntil>
     c3a:	d6 cf       	rjmp	.-84     	; 0xbe8 <IR_lock+0xc>

00000c3c <read_switches>:
/********************************************************************/
// 							FSM Tasks
/********************************************************************/
// Synchronized task to read the switches
void read_switches() {
	trtWait(SEM_SHARED);
     c3c:	86 e0       	ldi	r24, 0x06	; 6
     c3e:	0e 94 4f 02 	call	0x49e	; 0x49e <trtWait>
	// Read the switches & decide to set the lock on or off
	// Read switch 0 to select test or normal mode
	if (~PINB & 0x01) {
     c42:	18 99       	sbic	0x03, 0	; 3
     c44:	08 c0       	rjmp	.+16     	; 0xc56 <read_switches+0x1a>
		mode = NORMAL;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 be 02 	sts	0x02BE, r24
		// Read switch 1 to select key or lock functionality
		if (~PINB & 0x02) function = fKEY;
     c4c:	19 9b       	sbis	0x03, 1	; 3
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <read_switches+0x20>
		else function = fLOCK;
     c50:	10 92 bf 02 	sts	0x02BF, r1
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <read_switches+0x24>
	}
	else {
		mode = TEST;
     c56:	10 92 be 02 	sts	0x02BE, r1
		function = fBOTH;
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	80 93 bf 02 	sts	0x02BF, r24
	}
		// Read switch 2 to select authorized or unauthorized
	authorization = ~PINB & 0x04 ? AUTHORIZED : UNAUTHORIZED;
     c60:	1a 9b       	sbis	0x03, 2	; 3
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <read_switches+0x2c>
     c64:	2c e3       	ldi	r18, 0x3C	; 60
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <read_switches+0x2e>
     c68:	2e e3       	ldi	r18, 0x3E	; 62
     c6a:	20 93 0e 03 	sts	0x030E, r18
	fprintf(stdout, "%c %c %c", mode, function, authorization);
     c6e:	8d b7       	in	r24, 0x3d	; 61
     c70:	9e b7       	in	r25, 0x3e	; 62
     c72:	0a 97       	sbiw	r24, 0x0a	; 10
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	9e bf       	out	0x3e, r25	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	8d bf       	out	0x3d, r24	; 61
     c7e:	ed b7       	in	r30, 0x3d	; 61
     c80:	fe b7       	in	r31, 0x3e	; 62
     c82:	31 96       	adiw	r30, 0x01	; 1
     c84:	80 91 56 03 	lds	r24, 0x0356
     c88:	90 91 57 03 	lds	r25, 0x0357
     c8c:	ad b7       	in	r26, 0x3d	; 61
     c8e:	be b7       	in	r27, 0x3e	; 62
     c90:	12 96       	adiw	r26, 0x02	; 2
     c92:	9c 93       	st	X, r25
     c94:	8e 93       	st	-X, r24
     c96:	11 97       	sbiw	r26, 0x01	; 1
     c98:	80 e3       	ldi	r24, 0x30	; 48
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	93 83       	std	Z+3, r25	; 0x03
     c9e:	82 83       	std	Z+2, r24	; 0x02
     ca0:	80 91 be 02 	lds	r24, 0x02BE
     ca4:	84 83       	std	Z+4, r24	; 0x04
     ca6:	15 82       	std	Z+5, r1	; 0x05
     ca8:	80 91 bf 02 	lds	r24, 0x02BF
     cac:	86 83       	std	Z+6, r24	; 0x06
     cae:	17 82       	std	Z+7, r1	; 0x07
     cb0:	20 87       	std	Z+8, r18	; 0x08
     cb2:	11 86       	std	Z+9, r1	; 0x09
     cb4:	0e 94 61 07 	call	0xec2	; 0xec2 <fprintf>
	trtSignal(SEM_SHARED);
     cb8:	8d b7       	in	r24, 0x3d	; 61
     cba:	9e b7       	in	r25, 0x3e	; 62
     cbc:	0a 96       	adiw	r24, 0x0a	; 10
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	9e bf       	out	0x3e, r25	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	8d bf       	out	0x3d, r24	; 61
     cc8:	86 e0       	ldi	r24, 0x06	; 6
     cca:	0e 94 6f 02 	call	0x4de	; 0x4de <trtSignal>
}
     cce:	08 95       	ret

00000cd0 <ir_rec_packet>:
// IR Receive
// input expected transmitter id
// returns zero if payload is valid and returns payload
// 1 means no data; 2 means buffer overrun; 3 means bad tx id; 4 means bad checksum
char ir_rec_packet(char tx_id, char ir_data[])
{
     cd0:	98 2f       	mov	r25, r24
	char rx_status = 0;
	char ir_rx_ck_sum, ir_rx_ck_sum_ref;
	char i ;
	char buf_len ;

	buf_len = (char)strlen(ir_rx_buffer) ;
     cd2:	e2 e1       	ldi	r30, 0x12	; 18
     cd4:	f3 e0       	ldi	r31, 0x03	; 3
     cd6:	01 90       	ld	r0, Z+
     cd8:	00 20       	and	r0, r0
     cda:	e9 f7       	brne	.-6      	; 0xcd6 <ir_rec_packet+0x6>
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	e2 51       	subi	r30, 0x12	; 18
     ce0:	f3 40       	sbci	r31, 0x03	; 3
     ce2:	e0 34       	cpi	r30, 0x40	; 64
     ce4:	08 f0       	brcs	.+2      	; 0xce8 <ir_rec_packet+0x18>
     ce6:	ef e3       	ldi	r30, 0x3F	; 63
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) {rx_status = 2; return rx_status;} // buffer overrun
     ce8:	80 91 b9 02 	lds	r24, 0x02B9
     cec:	82 30       	cpi	r24, 0x02	; 2
     cee:	f1 f1       	breq	.+124    	; 0xd6c <ir_rec_packet+0x9c>
	if (ir_rx_ready == 0) {rx_status = 1; return rx_status;} // no data -- timeout
     cf0:	80 91 b9 02 	lds	r24, 0x02B9
     cf4:	88 23       	and	r24, r24
     cf6:	c9 f1       	breq	.+114    	; 0xd6a <ir_rec_packet+0x9a>
	if (ir_rx_buffer[0] != tx_id) {rx_status = 3; return rx_status;} // bad transmitter id
     cf8:	80 91 12 03 	lds	r24, 0x0312
     cfc:	89 17       	cp	r24, r25
     cfe:	11 f0       	breq	.+4      	; 0xd04 <ir_rec_packet+0x34>
     d00:	83 e0       	ldi	r24, 0x03	; 3
     d02:	08 95       	ret
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data
     d04:	80 91 b9 02 	lds	r24, 0x02B9
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	79 f5       	brne	.+94     	; 0xd6a <ir_rec_packet+0x9a>
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	21 e0       	ldi	r18, 0x01	; 1

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	af 01       	movw	r20, r30
     d14:	42 50       	subi	r20, 0x02	; 2
     d16:	50 40       	sbci	r21, 0x00	; 0
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <ir_rec_packet+0x54>
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
     d1a:	ae 5e       	subi	r26, 0xEE	; 238
     d1c:	bc 4f       	sbci	r27, 0xFC	; 252
     d1e:	8c 91       	ld	r24, X
     d20:	38 27       	eor	r19, r24
	if (ir_rx_buffer[0] != tx_id) {rx_status = 3; return rx_status;} // bad transmitter id
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
     d22:	2f 5f       	subi	r18, 0xFF	; 255
     d24:	a2 2f       	mov	r26, r18
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	a4 17       	cp	r26, r20
     d2a:	b5 07       	cpc	r27, r21
     d2c:	b4 f3       	brlt	.-20     	; 0xd1a <ir_rec_packet+0x4a>
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
     d2e:	da 01       	movw	r26, r20
     d30:	ae 5e       	subi	r26, 0xEE	; 238
     d32:	bc 4f       	sbci	r27, 0xFC	; 252
     d34:	9c 91       	ld	r25, X
     d36:	ef 5e       	subi	r30, 0xEF	; 239
     d38:	fc 4f       	sbci	r31, 0xFC	; 252
     d3a:	80 81       	ld	r24, Z
		 (ir_rx_buffer[buf_len-1]<<4) ;

    if (ir_rx_ck_sum_ref != ir_rx_ck_sum) 
     d3c:	82 95       	swap	r24
     d3e:	80 7f       	andi	r24, 0xF0	; 240
     d40:	9f 70       	andi	r25, 0x0F	; 15
     d42:	89 0f       	add	r24, r25
     d44:	83 17       	cp	r24, r19
     d46:	11 f0       	breq	.+4      	; 0xd4c <ir_rec_packet+0x7c>
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	08 95       	ret
		{rx_status = 4; return rx_status;}  // bad check sum

	// set up the valid data return stuff
	ir_rx_buffer[0] = ' '; // strip the transmit id
     d4c:	80 e2       	ldi	r24, 0x20	; 32
     d4e:	80 93 12 03 	sts	0x0312, r24
	ir_rx_buffer[buf_len-2] = 0x00; // strip the check sum and trailer
     d52:	1c 92       	st	X, r1
	ir_rx_ready = 0 ;
     d54:	10 92 b9 02 	sts	0x02B9, r1
	//trim initial space using ir_rx_buffer+1
	strlcpy(ir_data, ir_rx_buffer+1, buffer_size) ; 
     d58:	cb 01       	movw	r24, r22
     d5a:	63 e1       	ldi	r22, 0x13	; 19
     d5c:	73 e0       	ldi	r23, 0x03	; 3
     d5e:	40 e4       	ldi	r20, 0x40	; 64
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	0e 94 4d 07 	call	0xe9a	; 0xe9a <strlcpy>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	08 95       	ret

	return rx_status ;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
}
     d6c:	08 95       	ret

00000d6e <ir_send_packet>:

//**********************************************************
// IR send
// Input transmitter id and string packet payload
void ir_send_packet(char tx_id, char ir_data[])
{
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	38 2f       	mov	r19, r24
	char ir_tx_ck_sum, ir_tx_ck_sum1, ir_tx_ck_sum2 ;
	char i ;
	
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
     d78:	db 01       	movw	r26, r22
     d7a:	0d 90       	ld	r0, X+
     d7c:	00 20       	and	r0, r0
     d7e:	e9 f7       	brne	.-6      	; 0xd7a <ir_send_packet+0xc>
     d80:	11 97       	sbiw	r26, 0x01	; 1
     d82:	a6 1b       	sub	r26, r22
     d84:	b7 0b       	sbc	r27, r23
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <ir_send_packet+0x28>
		ir_tx_ck_sum ^= ir_data[i] ;
     d8c:	e6 0f       	add	r30, r22
     d8e:	f7 1f       	adc	r31, r23
     d90:	80 81       	ld	r24, Z
     d92:	28 27       	eor	r18, r24
	char ir_tx_ck_sum, ir_tx_ck_sum1, ir_tx_ck_sum2 ;
	char i ;
	
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
     d94:	9f 5f       	subi	r25, 0xFF	; 255
     d96:	e9 2f       	mov	r30, r25
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	ea 17       	cp	r30, r26
     d9c:	fb 07       	cpc	r31, r27
     d9e:	b0 f3       	brcs	.-20     	; 0xd8c <ir_send_packet+0x1e>
	// chop the check sum into two 1/2 bytes and add a bit
	ir_tx_ck_sum1 = 0x10 + (ir_tx_ck_sum & 0x0f) ;
	ir_tx_ck_sum2 = 0x10 + ((ir_tx_ck_sum>>4) & 0x0f) ;

	// format send string
  	sprintf(ir_tx_buffer,"%c%c%s%c%c%c", 
     da0:	8d b7       	in	r24, 0x3d	; 61
     da2:	9e b7       	in	r25, 0x3e	; 62
     da4:	40 97       	sbiw	r24, 0x10	; 16
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	9e bf       	out	0x3e, r25	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	8d bf       	out	0x3d, r24	; 61
     db0:	ed b7       	in	r30, 0x3d	; 61
     db2:	fe b7       	in	r31, 0x3e	; 62
     db4:	31 96       	adiw	r30, 0x01	; 1
     db6:	86 e7       	ldi	r24, 0x76	; 118
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	ad b7       	in	r26, 0x3d	; 61
     dbc:	be b7       	in	r27, 0x3e	; 62
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	9c 93       	st	X, r25
     dc2:	8e 93       	st	-X, r24
     dc4:	11 97       	sbiw	r26, 0x01	; 1
     dc6:	89 e3       	ldi	r24, 0x39	; 57
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	93 83       	std	Z+3, r25	; 0x03
     dcc:	82 83       	std	Z+2, r24	; 0x02
     dce:	83 e2       	ldi	r24, 0x23	; 35
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	95 83       	std	Z+5, r25	; 0x05
     dd4:	84 83       	std	Z+4, r24	; 0x04
     dd6:	36 83       	std	Z+6, r19	; 0x06
     dd8:	17 82       	std	Z+7, r1	; 0x07
     dda:	71 87       	std	Z+9, r23	; 0x09
     ddc:	60 87       	std	Z+8, r22	; 0x08
     dde:	82 2f       	mov	r24, r18
     de0:	8f 70       	andi	r24, 0x0F	; 15
     de2:	80 5f       	subi	r24, 0xF0	; 240
     de4:	82 87       	std	Z+10, r24	; 0x0a
     de6:	13 86       	std	Z+11, r1	; 0x0b
     de8:	22 95       	swap	r18
     dea:	2f 70       	andi	r18, 0x0F	; 15
     dec:	20 5f       	subi	r18, 0xF0	; 240
     dee:	24 87       	std	Z+12, r18	; 0x0c
     df0:	15 86       	std	Z+13, r1	; 0x0d
     df2:	85 e2       	ldi	r24, 0x25	; 37
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	97 87       	std	Z+15, r25	; 0x0f
     df8:	86 87       	std	Z+14, r24	; 0x0e
     dfa:	0e 94 ab 07 	call	0xf56	; 0xf56 <sprintf>
		start_token, tx_id, ir_data, ir_tx_ck_sum1, ir_tx_ck_sum2, end_token );
  	ir_tx_count = 0 ;
     dfe:	10 92 10 03 	sts	0x0310, r1
  	ir_tx_ready = 1 ;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	80 93 b8 02 	sts	0x02B8, r24
     e08:	80 91 04 03 	lds	r24, 0x0304
     e0c:	90 91 05 03 	lds	r25, 0x0305
     e10:	a0 91 06 03 	lds	r26, 0x0306
     e14:	b0 91 07 03 	lds	r27, 0x0307
     e18:	8c 01       	movw	r16, r24
     e1a:	ff 24       	eor	r15, r15
     e1c:	ee 24       	eor	r14, r14
     e1e:	80 91 84 00 	lds	r24, 0x0084
     e22:	90 91 85 00 	lds	r25, 0x0085
     e26:	a0 e0       	ldi	r26, 0x00	; 0
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	8e 0d       	add	r24, r14
     e2c:	9f 1d       	adc	r25, r15
     e2e:	a0 1f       	adc	r26, r16
     e30:	b1 1f       	adc	r27, r17

	tx_send_time =  trtCurrentTime();
     e32:	80 93 c8 02 	sts	0x02C8, r24
     e36:	90 93 c9 02 	sts	0x02C9, r25
     e3a:	a0 93 ca 02 	sts	0x02CA, r26
     e3e:	b0 93 cb 02 	sts	0x02CB, r27
     e42:	8d b7       	in	r24, 0x3d	; 61
     e44:	9e b7       	in	r25, 0x3e	; 62
     e46:	40 96       	adiw	r24, 0x10	; 16
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	9e bf       	out	0x3e, r25	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	8d bf       	out	0x3d, r24	; 61

	// wait 
	while (ir_tx_ready && (trtCurrentTime() < tx_send_time + ir_tx_timeout)) {};
     e52:	80 91 b8 02 	lds	r24, 0x02B8
     e56:	88 23       	and	r24, r24
     e58:	d9 f0       	breq	.+54     	; 0xe90 <ir_send_packet+0x122>
     e5a:	80 91 84 00 	lds	r24, 0x0084
     e5e:	90 91 85 00 	lds	r25, 0x0085
     e62:	20 91 c8 02 	lds	r18, 0x02C8
     e66:	30 91 c9 02 	lds	r19, 0x02C9
     e6a:	40 91 ca 02 	lds	r20, 0x02CA
     e6e:	50 91 cb 02 	lds	r21, 0x02CB
     e72:	a0 e0       	ldi	r26, 0x00	; 0
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	8e 0d       	add	r24, r14
     e78:	9f 1d       	adc	r25, r15
     e7a:	a0 1f       	adc	r26, r16
     e7c:	b1 1f       	adc	r27, r17
     e7e:	2c 59       	subi	r18, 0x9C	; 156
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	4f 4f       	sbci	r20, 0xFF	; 255
     e84:	5f 4f       	sbci	r21, 0xFF	; 255
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	a4 07       	cpc	r26, r20
     e8c:	b5 07       	cpc	r27, r21
     e8e:	08 f3       	brcs	.-62     	; 0xe52 <ir_send_packet+0xe4>
	
}
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	08 95       	ret

00000e9a <strlcpy>:
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	41 50       	subi	r20, 0x01	; 1
     ea0:	50 40       	sbci	r21, 0x00	; 0
     ea2:	58 f0       	brcs	.+22     	; 0xeba <strlcpy+0x20>
     ea4:	49 f0       	breq	.+18     	; 0xeb8 <strlcpy+0x1e>
     ea6:	01 90       	ld	r0, Z+
     ea8:	0d 92       	st	X+, r0
     eaa:	00 20       	and	r0, r0
     eac:	c1 f7       	brne	.-16     	; 0xe9e <strlcpy+0x4>
     eae:	e6 1b       	sub	r30, r22
     eb0:	f7 0b       	sbc	r31, r23
     eb2:	31 97       	sbiw	r30, 0x01	; 1
     eb4:	cf 01       	movw	r24, r30
     eb6:	08 95       	ret
     eb8:	1c 92       	st	X, r1
     eba:	01 90       	ld	r0, Z+
     ebc:	00 20       	and	r0, r0
     ebe:	e9 f7       	brne	.-6      	; 0xeba <strlcpy+0x20>
     ec0:	f6 cf       	rjmp	.-20     	; 0xeae <strlcpy+0x14>

00000ec2 <fprintf>:
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9e 01       	movw	r18, r28
     ecc:	27 5f       	subi	r18, 0xF7	; 247
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	a9 01       	movw	r20, r18
     eda:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <vfprintf>
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <fputs>:
     ee4:	ef 92       	push	r14
     ee6:	ff 92       	push	r15
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	7c 01       	movw	r14, r24
     ef2:	8b 01       	movw	r16, r22
     ef4:	db 01       	movw	r26, r22
     ef6:	13 96       	adiw	r26, 0x03	; 3
     ef8:	8c 91       	ld	r24, X
     efa:	81 fd       	sbrc	r24, 1
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <fputs+0x20>
     efe:	cf ef       	ldi	r28, 0xFF	; 255
     f00:	df ef       	ldi	r29, 0xFF	; 255
     f02:	13 c0       	rjmp	.+38     	; 0xf2a <fputs+0x46>
     f04:	c0 e0       	ldi	r28, 0x00	; 0
     f06:	d0 e0       	ldi	r29, 0x00	; 0
     f08:	0b c0       	rjmp	.+22     	; 0xf20 <fputs+0x3c>
     f0a:	d8 01       	movw	r26, r16
     f0c:	18 96       	adiw	r26, 0x08	; 8
     f0e:	ed 91       	ld	r30, X+
     f10:	fc 91       	ld	r31, X
     f12:	19 97       	sbiw	r26, 0x09	; 9
     f14:	b8 01       	movw	r22, r16
     f16:	09 95       	icall
     f18:	89 2b       	or	r24, r25
     f1a:	11 f0       	breq	.+4      	; 0xf20 <fputs+0x3c>
     f1c:	cf ef       	ldi	r28, 0xFF	; 255
     f1e:	df ef       	ldi	r29, 0xFF	; 255
     f20:	f7 01       	movw	r30, r14
     f22:	81 91       	ld	r24, Z+
     f24:	7f 01       	movw	r14, r30
     f26:	88 23       	and	r24, r24
     f28:	81 f7       	brne	.-32     	; 0xf0a <fputs+0x26>
     f2a:	ce 01       	movw	r24, r28
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	08 95       	ret

00000f3a <getchar>:
     f3a:	80 91 54 03 	lds	r24, 0x0354
     f3e:	90 91 55 03 	lds	r25, 0x0355
     f42:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <fgetc>
     f46:	08 95       	ret

00000f48 <putchar>:
     f48:	60 91 56 03 	lds	r22, 0x0356
     f4c:	70 91 57 03 	lds	r23, 0x0357
     f50:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
     f54:	08 95       	ret

00000f56 <sprintf>:
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	2e 97       	sbiw	r28, 0x0e	; 14
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	0d 89       	ldd	r16, Y+21	; 0x15
     f70:	1e 89       	ldd	r17, Y+22	; 0x16
     f72:	86 e0       	ldi	r24, 0x06	; 6
     f74:	8c 83       	std	Y+4, r24	; 0x04
     f76:	1a 83       	std	Y+2, r17	; 0x02
     f78:	09 83       	std	Y+1, r16	; 0x01
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	9f e7       	ldi	r25, 0x7F	; 127
     f7e:	9e 83       	std	Y+6, r25	; 0x06
     f80:	8d 83       	std	Y+5, r24	; 0x05
     f82:	9e 01       	movw	r18, r28
     f84:	27 5e       	subi	r18, 0xE7	; 231
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	ce 01       	movw	r24, r28
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	6f 89       	ldd	r22, Y+23	; 0x17
     f8e:	78 8d       	ldd	r23, Y+24	; 0x18
     f90:	a9 01       	movw	r20, r18
     f92:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <vfprintf>
     f96:	2f 81       	ldd	r18, Y+7	; 0x07
     f98:	38 85       	ldd	r19, Y+8	; 0x08
     f9a:	02 0f       	add	r16, r18
     f9c:	13 1f       	adc	r17, r19
     f9e:	f8 01       	movw	r30, r16
     fa0:	10 82       	st	Z, r1
     fa2:	2e 96       	adiw	r28, 0x0e	; 14
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	08 95       	ret

00000fb8 <vfprintf>:
     fb8:	2f 92       	push	r2
     fba:	3f 92       	push	r3
     fbc:	4f 92       	push	r4
     fbe:	5f 92       	push	r5
     fc0:	6f 92       	push	r6
     fc2:	7f 92       	push	r7
     fc4:	8f 92       	push	r8
     fc6:	9f 92       	push	r9
     fc8:	af 92       	push	r10
     fca:	bf 92       	push	r11
     fcc:	cf 92       	push	r12
     fce:	df 92       	push	r13
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	2b 97       	sbiw	r28, 0x0b	; 11
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	3c 01       	movw	r6, r24
     fee:	2b 01       	movw	r4, r22
     ff0:	5a 01       	movw	r10, r20
     ff2:	fc 01       	movw	r30, r24
     ff4:	17 82       	std	Z+7, r1	; 0x07
     ff6:	16 82       	std	Z+6, r1	; 0x06
     ff8:	83 81       	ldd	r24, Z+3	; 0x03
     ffa:	81 fd       	sbrc	r24, 1
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <vfprintf+0x4c>
     ffe:	6f ef       	ldi	r22, 0xFF	; 255
    1000:	7f ef       	ldi	r23, 0xFF	; 255
    1002:	c6 c1       	rjmp	.+908    	; 0x1390 <vfprintf+0x3d8>
    1004:	9a e0       	ldi	r25, 0x0A	; 10
    1006:	89 2e       	mov	r8, r25
    1008:	1e 01       	movw	r2, r28
    100a:	08 94       	sec
    100c:	21 1c       	adc	r2, r1
    100e:	31 1c       	adc	r3, r1
    1010:	f3 01       	movw	r30, r6
    1012:	23 81       	ldd	r18, Z+3	; 0x03
    1014:	f2 01       	movw	r30, r4
    1016:	23 fd       	sbrc	r18, 3
    1018:	85 91       	lpm	r24, Z+
    101a:	23 ff       	sbrs	r18, 3
    101c:	81 91       	ld	r24, Z+
    101e:	2f 01       	movw	r4, r30
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <vfprintf+0x6e>
    1024:	b2 c1       	rjmp	.+868    	; 0x138a <vfprintf+0x3d2>
    1026:	85 32       	cpi	r24, 0x25	; 37
    1028:	39 f4       	brne	.+14     	; 0x1038 <vfprintf+0x80>
    102a:	23 fd       	sbrc	r18, 3
    102c:	85 91       	lpm	r24, Z+
    102e:	23 ff       	sbrs	r18, 3
    1030:	81 91       	ld	r24, Z+
    1032:	2f 01       	movw	r4, r30
    1034:	85 32       	cpi	r24, 0x25	; 37
    1036:	29 f4       	brne	.+10     	; 0x1042 <vfprintf+0x8a>
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	b3 01       	movw	r22, r6
    103c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    1040:	e7 cf       	rjmp	.-50     	; 0x1010 <vfprintf+0x58>
    1042:	98 2f       	mov	r25, r24
    1044:	ff 24       	eor	r15, r15
    1046:	ee 24       	eor	r14, r14
    1048:	99 24       	eor	r9, r9
    104a:	ff e1       	ldi	r31, 0x1F	; 31
    104c:	ff 15       	cp	r31, r15
    104e:	d0 f0       	brcs	.+52     	; 0x1084 <vfprintf+0xcc>
    1050:	9b 32       	cpi	r25, 0x2B	; 43
    1052:	69 f0       	breq	.+26     	; 0x106e <vfprintf+0xb6>
    1054:	9c 32       	cpi	r25, 0x2C	; 44
    1056:	28 f4       	brcc	.+10     	; 0x1062 <vfprintf+0xaa>
    1058:	90 32       	cpi	r25, 0x20	; 32
    105a:	59 f0       	breq	.+22     	; 0x1072 <vfprintf+0xba>
    105c:	93 32       	cpi	r25, 0x23	; 35
    105e:	91 f4       	brne	.+36     	; 0x1084 <vfprintf+0xcc>
    1060:	0e c0       	rjmp	.+28     	; 0x107e <vfprintf+0xc6>
    1062:	9d 32       	cpi	r25, 0x2D	; 45
    1064:	49 f0       	breq	.+18     	; 0x1078 <vfprintf+0xc0>
    1066:	90 33       	cpi	r25, 0x30	; 48
    1068:	69 f4       	brne	.+26     	; 0x1084 <vfprintf+0xcc>
    106a:	41 e0       	ldi	r20, 0x01	; 1
    106c:	24 c0       	rjmp	.+72     	; 0x10b6 <vfprintf+0xfe>
    106e:	52 e0       	ldi	r21, 0x02	; 2
    1070:	f5 2a       	or	r15, r21
    1072:	84 e0       	ldi	r24, 0x04	; 4
    1074:	f8 2a       	or	r15, r24
    1076:	28 c0       	rjmp	.+80     	; 0x10c8 <vfprintf+0x110>
    1078:	98 e0       	ldi	r25, 0x08	; 8
    107a:	f9 2a       	or	r15, r25
    107c:	25 c0       	rjmp	.+74     	; 0x10c8 <vfprintf+0x110>
    107e:	e0 e1       	ldi	r30, 0x10	; 16
    1080:	fe 2a       	or	r15, r30
    1082:	22 c0       	rjmp	.+68     	; 0x10c8 <vfprintf+0x110>
    1084:	f7 fc       	sbrc	r15, 7
    1086:	29 c0       	rjmp	.+82     	; 0x10da <vfprintf+0x122>
    1088:	89 2f       	mov	r24, r25
    108a:	80 53       	subi	r24, 0x30	; 48
    108c:	8a 30       	cpi	r24, 0x0A	; 10
    108e:	70 f4       	brcc	.+28     	; 0x10ac <vfprintf+0xf4>
    1090:	f6 fe       	sbrs	r15, 6
    1092:	05 c0       	rjmp	.+10     	; 0x109e <vfprintf+0xe6>
    1094:	98 9c       	mul	r9, r8
    1096:	90 2c       	mov	r9, r0
    1098:	11 24       	eor	r1, r1
    109a:	98 0e       	add	r9, r24
    109c:	15 c0       	rjmp	.+42     	; 0x10c8 <vfprintf+0x110>
    109e:	e8 9c       	mul	r14, r8
    10a0:	e0 2c       	mov	r14, r0
    10a2:	11 24       	eor	r1, r1
    10a4:	e8 0e       	add	r14, r24
    10a6:	f0 e2       	ldi	r31, 0x20	; 32
    10a8:	ff 2a       	or	r15, r31
    10aa:	0e c0       	rjmp	.+28     	; 0x10c8 <vfprintf+0x110>
    10ac:	9e 32       	cpi	r25, 0x2E	; 46
    10ae:	29 f4       	brne	.+10     	; 0x10ba <vfprintf+0x102>
    10b0:	f6 fc       	sbrc	r15, 6
    10b2:	6b c1       	rjmp	.+726    	; 0x138a <vfprintf+0x3d2>
    10b4:	40 e4       	ldi	r20, 0x40	; 64
    10b6:	f4 2a       	or	r15, r20
    10b8:	07 c0       	rjmp	.+14     	; 0x10c8 <vfprintf+0x110>
    10ba:	9c 36       	cpi	r25, 0x6C	; 108
    10bc:	19 f4       	brne	.+6      	; 0x10c4 <vfprintf+0x10c>
    10be:	50 e8       	ldi	r21, 0x80	; 128
    10c0:	f5 2a       	or	r15, r21
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <vfprintf+0x110>
    10c4:	98 36       	cpi	r25, 0x68	; 104
    10c6:	49 f4       	brne	.+18     	; 0x10da <vfprintf+0x122>
    10c8:	f2 01       	movw	r30, r4
    10ca:	23 fd       	sbrc	r18, 3
    10cc:	95 91       	lpm	r25, Z+
    10ce:	23 ff       	sbrs	r18, 3
    10d0:	91 91       	ld	r25, Z+
    10d2:	2f 01       	movw	r4, r30
    10d4:	99 23       	and	r25, r25
    10d6:	09 f0       	breq	.+2      	; 0x10da <vfprintf+0x122>
    10d8:	b8 cf       	rjmp	.-144    	; 0x104a <vfprintf+0x92>
    10da:	89 2f       	mov	r24, r25
    10dc:	85 54       	subi	r24, 0x45	; 69
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	18 f0       	brcs	.+6      	; 0x10e8 <vfprintf+0x130>
    10e2:	80 52       	subi	r24, 0x20	; 32
    10e4:	83 30       	cpi	r24, 0x03	; 3
    10e6:	38 f4       	brcc	.+14     	; 0x10f6 <vfprintf+0x13e>
    10e8:	44 e0       	ldi	r20, 0x04	; 4
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	a4 0e       	add	r10, r20
    10ee:	b5 1e       	adc	r11, r21
    10f0:	5f e3       	ldi	r21, 0x3F	; 63
    10f2:	59 83       	std	Y+1, r21	; 0x01
    10f4:	0f c0       	rjmp	.+30     	; 0x1114 <vfprintf+0x15c>
    10f6:	93 36       	cpi	r25, 0x63	; 99
    10f8:	31 f0       	breq	.+12     	; 0x1106 <vfprintf+0x14e>
    10fa:	93 37       	cpi	r25, 0x73	; 115
    10fc:	79 f0       	breq	.+30     	; 0x111c <vfprintf+0x164>
    10fe:	93 35       	cpi	r25, 0x53	; 83
    1100:	09 f0       	breq	.+2      	; 0x1104 <vfprintf+0x14c>
    1102:	56 c0       	rjmp	.+172    	; 0x11b0 <vfprintf+0x1f8>
    1104:	20 c0       	rjmp	.+64     	; 0x1146 <vfprintf+0x18e>
    1106:	f5 01       	movw	r30, r10
    1108:	80 81       	ld	r24, Z
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	42 e0       	ldi	r20, 0x02	; 2
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	a4 0e       	add	r10, r20
    1112:	b5 1e       	adc	r11, r21
    1114:	61 01       	movw	r12, r2
    1116:	01 e0       	ldi	r16, 0x01	; 1
    1118:	10 e0       	ldi	r17, 0x00	; 0
    111a:	12 c0       	rjmp	.+36     	; 0x1140 <vfprintf+0x188>
    111c:	f5 01       	movw	r30, r10
    111e:	c0 80       	ld	r12, Z
    1120:	d1 80       	ldd	r13, Z+1	; 0x01
    1122:	f6 fc       	sbrc	r15, 6
    1124:	03 c0       	rjmp	.+6      	; 0x112c <vfprintf+0x174>
    1126:	6f ef       	ldi	r22, 0xFF	; 255
    1128:	7f ef       	ldi	r23, 0xFF	; 255
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <vfprintf+0x178>
    112c:	69 2d       	mov	r22, r9
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	42 e0       	ldi	r20, 0x02	; 2
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	a4 0e       	add	r10, r20
    1136:	b5 1e       	adc	r11, r21
    1138:	c6 01       	movw	r24, r12
    113a:	0e 94 ed 09 	call	0x13da	; 0x13da <strnlen>
    113e:	8c 01       	movw	r16, r24
    1140:	5f e7       	ldi	r21, 0x7F	; 127
    1142:	f5 22       	and	r15, r21
    1144:	14 c0       	rjmp	.+40     	; 0x116e <vfprintf+0x1b6>
    1146:	f5 01       	movw	r30, r10
    1148:	c0 80       	ld	r12, Z
    114a:	d1 80       	ldd	r13, Z+1	; 0x01
    114c:	f6 fc       	sbrc	r15, 6
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <vfprintf+0x19e>
    1150:	6f ef       	ldi	r22, 0xFF	; 255
    1152:	7f ef       	ldi	r23, 0xFF	; 255
    1154:	02 c0       	rjmp	.+4      	; 0x115a <vfprintf+0x1a2>
    1156:	69 2d       	mov	r22, r9
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	42 e0       	ldi	r20, 0x02	; 2
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	a4 0e       	add	r10, r20
    1160:	b5 1e       	adc	r11, r21
    1162:	c6 01       	movw	r24, r12
    1164:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <strnlen_P>
    1168:	8c 01       	movw	r16, r24
    116a:	50 e8       	ldi	r21, 0x80	; 128
    116c:	f5 2a       	or	r15, r21
    116e:	f3 fe       	sbrs	r15, 3
    1170:	07 c0       	rjmp	.+14     	; 0x1180 <vfprintf+0x1c8>
    1172:	1a c0       	rjmp	.+52     	; 0x11a8 <vfprintf+0x1f0>
    1174:	80 e2       	ldi	r24, 0x20	; 32
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	b3 01       	movw	r22, r6
    117a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    117e:	ea 94       	dec	r14
    1180:	8e 2d       	mov	r24, r14
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	08 17       	cp	r16, r24
    1186:	19 07       	cpc	r17, r25
    1188:	a8 f3       	brcs	.-22     	; 0x1174 <vfprintf+0x1bc>
    118a:	0e c0       	rjmp	.+28     	; 0x11a8 <vfprintf+0x1f0>
    118c:	f6 01       	movw	r30, r12
    118e:	f7 fc       	sbrc	r15, 7
    1190:	85 91       	lpm	r24, Z+
    1192:	f7 fe       	sbrs	r15, 7
    1194:	81 91       	ld	r24, Z+
    1196:	6f 01       	movw	r12, r30
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	b3 01       	movw	r22, r6
    119c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    11a0:	e1 10       	cpse	r14, r1
    11a2:	ea 94       	dec	r14
    11a4:	01 50       	subi	r16, 0x01	; 1
    11a6:	10 40       	sbci	r17, 0x00	; 0
    11a8:	01 15       	cp	r16, r1
    11aa:	11 05       	cpc	r17, r1
    11ac:	79 f7       	brne	.-34     	; 0x118c <vfprintf+0x1d4>
    11ae:	ea c0       	rjmp	.+468    	; 0x1384 <vfprintf+0x3cc>
    11b0:	94 36       	cpi	r25, 0x64	; 100
    11b2:	11 f0       	breq	.+4      	; 0x11b8 <vfprintf+0x200>
    11b4:	99 36       	cpi	r25, 0x69	; 105
    11b6:	69 f5       	brne	.+90     	; 0x1212 <vfprintf+0x25a>
    11b8:	f7 fe       	sbrs	r15, 7
    11ba:	08 c0       	rjmp	.+16     	; 0x11cc <vfprintf+0x214>
    11bc:	f5 01       	movw	r30, r10
    11be:	20 81       	ld	r18, Z
    11c0:	31 81       	ldd	r19, Z+1	; 0x01
    11c2:	42 81       	ldd	r20, Z+2	; 0x02
    11c4:	53 81       	ldd	r21, Z+3	; 0x03
    11c6:	84 e0       	ldi	r24, 0x04	; 4
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0a c0       	rjmp	.+20     	; 0x11e0 <vfprintf+0x228>
    11cc:	f5 01       	movw	r30, r10
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	9c 01       	movw	r18, r24
    11d4:	44 27       	eor	r20, r20
    11d6:	37 fd       	sbrc	r19, 7
    11d8:	40 95       	com	r20
    11da:	54 2f       	mov	r21, r20
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a8 0e       	add	r10, r24
    11e2:	b9 1e       	adc	r11, r25
    11e4:	9f e6       	ldi	r25, 0x6F	; 111
    11e6:	f9 22       	and	r15, r25
    11e8:	57 ff       	sbrs	r21, 7
    11ea:	09 c0       	rjmp	.+18     	; 0x11fe <vfprintf+0x246>
    11ec:	50 95       	com	r21
    11ee:	40 95       	com	r20
    11f0:	30 95       	com	r19
    11f2:	21 95       	neg	r18
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	4f 4f       	sbci	r20, 0xFF	; 255
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255
    11fa:	e0 e8       	ldi	r30, 0x80	; 128
    11fc:	fe 2a       	or	r15, r30
    11fe:	ca 01       	movw	r24, r20
    1200:	b9 01       	movw	r22, r18
    1202:	a1 01       	movw	r20, r2
    1204:	2a e0       	ldi	r18, 0x0A	; 10
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__ultoa_invert>
    120c:	d8 2e       	mov	r13, r24
    120e:	d2 18       	sub	r13, r2
    1210:	40 c0       	rjmp	.+128    	; 0x1292 <vfprintf+0x2da>
    1212:	95 37       	cpi	r25, 0x75	; 117
    1214:	29 f4       	brne	.+10     	; 0x1220 <vfprintf+0x268>
    1216:	1f 2d       	mov	r17, r15
    1218:	1f 7e       	andi	r17, 0xEF	; 239
    121a:	2a e0       	ldi	r18, 0x0A	; 10
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	1d c0       	rjmp	.+58     	; 0x125a <vfprintf+0x2a2>
    1220:	1f 2d       	mov	r17, r15
    1222:	19 7f       	andi	r17, 0xF9	; 249
    1224:	9f 36       	cpi	r25, 0x6F	; 111
    1226:	61 f0       	breq	.+24     	; 0x1240 <vfprintf+0x288>
    1228:	90 37       	cpi	r25, 0x70	; 112
    122a:	20 f4       	brcc	.+8      	; 0x1234 <vfprintf+0x27c>
    122c:	98 35       	cpi	r25, 0x58	; 88
    122e:	09 f0       	breq	.+2      	; 0x1232 <vfprintf+0x27a>
    1230:	ac c0       	rjmp	.+344    	; 0x138a <vfprintf+0x3d2>
    1232:	0f c0       	rjmp	.+30     	; 0x1252 <vfprintf+0x29a>
    1234:	90 37       	cpi	r25, 0x70	; 112
    1236:	39 f0       	breq	.+14     	; 0x1246 <vfprintf+0x28e>
    1238:	98 37       	cpi	r25, 0x78	; 120
    123a:	09 f0       	breq	.+2      	; 0x123e <vfprintf+0x286>
    123c:	a6 c0       	rjmp	.+332    	; 0x138a <vfprintf+0x3d2>
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <vfprintf+0x290>
    1240:	28 e0       	ldi	r18, 0x08	; 8
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	0a c0       	rjmp	.+20     	; 0x125a <vfprintf+0x2a2>
    1246:	10 61       	ori	r17, 0x10	; 16
    1248:	14 fd       	sbrc	r17, 4
    124a:	14 60       	ori	r17, 0x04	; 4
    124c:	20 e1       	ldi	r18, 0x10	; 16
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	04 c0       	rjmp	.+8      	; 0x125a <vfprintf+0x2a2>
    1252:	14 fd       	sbrc	r17, 4
    1254:	16 60       	ori	r17, 0x06	; 6
    1256:	20 e1       	ldi	r18, 0x10	; 16
    1258:	32 e0       	ldi	r19, 0x02	; 2
    125a:	17 ff       	sbrs	r17, 7
    125c:	08 c0       	rjmp	.+16     	; 0x126e <vfprintf+0x2b6>
    125e:	f5 01       	movw	r30, r10
    1260:	60 81       	ld	r22, Z
    1262:	71 81       	ldd	r23, Z+1	; 0x01
    1264:	82 81       	ldd	r24, Z+2	; 0x02
    1266:	93 81       	ldd	r25, Z+3	; 0x03
    1268:	44 e0       	ldi	r20, 0x04	; 4
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	08 c0       	rjmp	.+16     	; 0x127e <vfprintf+0x2c6>
    126e:	f5 01       	movw	r30, r10
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	bc 01       	movw	r22, r24
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	42 e0       	ldi	r20, 0x02	; 2
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	a4 0e       	add	r10, r20
    1280:	b5 1e       	adc	r11, r21
    1282:	a1 01       	movw	r20, r2
    1284:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__ultoa_invert>
    1288:	d8 2e       	mov	r13, r24
    128a:	d2 18       	sub	r13, r2
    128c:	8f e7       	ldi	r24, 0x7F	; 127
    128e:	f8 2e       	mov	r15, r24
    1290:	f1 22       	and	r15, r17
    1292:	f6 fe       	sbrs	r15, 6
    1294:	0b c0       	rjmp	.+22     	; 0x12ac <vfprintf+0x2f4>
    1296:	5e ef       	ldi	r21, 0xFE	; 254
    1298:	f5 22       	and	r15, r21
    129a:	d9 14       	cp	r13, r9
    129c:	38 f4       	brcc	.+14     	; 0x12ac <vfprintf+0x2f4>
    129e:	f4 fe       	sbrs	r15, 4
    12a0:	07 c0       	rjmp	.+14     	; 0x12b0 <vfprintf+0x2f8>
    12a2:	f2 fc       	sbrc	r15, 2
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <vfprintf+0x2f8>
    12a6:	8f ee       	ldi	r24, 0xEF	; 239
    12a8:	f8 22       	and	r15, r24
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <vfprintf+0x2f8>
    12ac:	1d 2d       	mov	r17, r13
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <vfprintf+0x2fa>
    12b0:	19 2d       	mov	r17, r9
    12b2:	f4 fe       	sbrs	r15, 4
    12b4:	0d c0       	rjmp	.+26     	; 0x12d0 <vfprintf+0x318>
    12b6:	fe 01       	movw	r30, r28
    12b8:	ed 0d       	add	r30, r13
    12ba:	f1 1d       	adc	r31, r1
    12bc:	80 81       	ld	r24, Z
    12be:	80 33       	cpi	r24, 0x30	; 48
    12c0:	19 f4       	brne	.+6      	; 0x12c8 <vfprintf+0x310>
    12c2:	99 ee       	ldi	r25, 0xE9	; 233
    12c4:	f9 22       	and	r15, r25
    12c6:	08 c0       	rjmp	.+16     	; 0x12d8 <vfprintf+0x320>
    12c8:	1f 5f       	subi	r17, 0xFF	; 255
    12ca:	f2 fe       	sbrs	r15, 2
    12cc:	05 c0       	rjmp	.+10     	; 0x12d8 <vfprintf+0x320>
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <vfprintf+0x31e>
    12d0:	8f 2d       	mov	r24, r15
    12d2:	86 78       	andi	r24, 0x86	; 134
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <vfprintf+0x320>
    12d6:	1f 5f       	subi	r17, 0xFF	; 255
    12d8:	0f 2d       	mov	r16, r15
    12da:	f3 fc       	sbrc	r15, 3
    12dc:	14 c0       	rjmp	.+40     	; 0x1306 <vfprintf+0x34e>
    12de:	f0 fe       	sbrs	r15, 0
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <vfprintf+0x348>
    12e2:	1e 15       	cp	r17, r14
    12e4:	10 f0       	brcs	.+4      	; 0x12ea <vfprintf+0x332>
    12e6:	9d 2c       	mov	r9, r13
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <vfprintf+0x348>
    12ea:	9d 2c       	mov	r9, r13
    12ec:	9e 0c       	add	r9, r14
    12ee:	91 1a       	sub	r9, r17
    12f0:	1e 2d       	mov	r17, r14
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <vfprintf+0x348>
    12f4:	80 e2       	ldi	r24, 0x20	; 32
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	b3 01       	movw	r22, r6
    12fa:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    12fe:	1f 5f       	subi	r17, 0xFF	; 255
    1300:	1e 15       	cp	r17, r14
    1302:	c0 f3       	brcs	.-16     	; 0x12f4 <vfprintf+0x33c>
    1304:	04 c0       	rjmp	.+8      	; 0x130e <vfprintf+0x356>
    1306:	1e 15       	cp	r17, r14
    1308:	10 f4       	brcc	.+4      	; 0x130e <vfprintf+0x356>
    130a:	e1 1a       	sub	r14, r17
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <vfprintf+0x358>
    130e:	ee 24       	eor	r14, r14
    1310:	04 ff       	sbrs	r16, 4
    1312:	0f c0       	rjmp	.+30     	; 0x1332 <vfprintf+0x37a>
    1314:	80 e3       	ldi	r24, 0x30	; 48
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	b3 01       	movw	r22, r6
    131a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    131e:	02 ff       	sbrs	r16, 2
    1320:	1d c0       	rjmp	.+58     	; 0x135c <vfprintf+0x3a4>
    1322:	01 fd       	sbrc	r16, 1
    1324:	03 c0       	rjmp	.+6      	; 0x132c <vfprintf+0x374>
    1326:	88 e7       	ldi	r24, 0x78	; 120
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e c0       	rjmp	.+28     	; 0x1348 <vfprintf+0x390>
    132c:	88 e5       	ldi	r24, 0x58	; 88
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0b c0       	rjmp	.+22     	; 0x1348 <vfprintf+0x390>
    1332:	80 2f       	mov	r24, r16
    1334:	86 78       	andi	r24, 0x86	; 134
    1336:	91 f0       	breq	.+36     	; 0x135c <vfprintf+0x3a4>
    1338:	01 ff       	sbrs	r16, 1
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <vfprintf+0x388>
    133c:	8b e2       	ldi	r24, 0x2B	; 43
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <vfprintf+0x38a>
    1340:	80 e2       	ldi	r24, 0x20	; 32
    1342:	f7 fc       	sbrc	r15, 7
    1344:	8d e2       	ldi	r24, 0x2D	; 45
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	b3 01       	movw	r22, r6
    134a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    134e:	06 c0       	rjmp	.+12     	; 0x135c <vfprintf+0x3a4>
    1350:	80 e3       	ldi	r24, 0x30	; 48
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	b3 01       	movw	r22, r6
    1356:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    135a:	9a 94       	dec	r9
    135c:	d9 14       	cp	r13, r9
    135e:	c0 f3       	brcs	.-16     	; 0x1350 <vfprintf+0x398>
    1360:	da 94       	dec	r13
    1362:	f1 01       	movw	r30, r2
    1364:	ed 0d       	add	r30, r13
    1366:	f1 1d       	adc	r31, r1
    1368:	80 81       	ld	r24, Z
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	b3 01       	movw	r22, r6
    136e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    1372:	dd 20       	and	r13, r13
    1374:	a9 f7       	brne	.-22     	; 0x1360 <vfprintf+0x3a8>
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <vfprintf+0x3cc>
    1378:	80 e2       	ldi	r24, 0x20	; 32
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	b3 01       	movw	r22, r6
    137e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    1382:	ea 94       	dec	r14
    1384:	ee 20       	and	r14, r14
    1386:	c1 f7       	brne	.-16     	; 0x1378 <vfprintf+0x3c0>
    1388:	43 ce       	rjmp	.-890    	; 0x1010 <vfprintf+0x58>
    138a:	f3 01       	movw	r30, r6
    138c:	66 81       	ldd	r22, Z+6	; 0x06
    138e:	77 81       	ldd	r23, Z+7	; 0x07
    1390:	cb 01       	movw	r24, r22
    1392:	2b 96       	adiw	r28, 0x0b	; 11
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	9f 90       	pop	r9
    13b4:	8f 90       	pop	r8
    13b6:	7f 90       	pop	r7
    13b8:	6f 90       	pop	r6
    13ba:	5f 90       	pop	r5
    13bc:	4f 90       	pop	r4
    13be:	3f 90       	pop	r3
    13c0:	2f 90       	pop	r2
    13c2:	08 95       	ret

000013c4 <strnlen_P>:
    13c4:	fc 01       	movw	r30, r24
    13c6:	05 90       	lpm	r0, Z+
    13c8:	61 50       	subi	r22, 0x01	; 1
    13ca:	70 40       	sbci	r23, 0x00	; 0
    13cc:	01 10       	cpse	r0, r1
    13ce:	d8 f7       	brcc	.-10     	; 0x13c6 <strnlen_P+0x2>
    13d0:	80 95       	com	r24
    13d2:	90 95       	com	r25
    13d4:	8e 0f       	add	r24, r30
    13d6:	9f 1f       	adc	r25, r31
    13d8:	08 95       	ret

000013da <strnlen>:
    13da:	fc 01       	movw	r30, r24
    13dc:	61 50       	subi	r22, 0x01	; 1
    13de:	70 40       	sbci	r23, 0x00	; 0
    13e0:	01 90       	ld	r0, Z+
    13e2:	01 10       	cpse	r0, r1
    13e4:	d8 f7       	brcc	.-10     	; 0x13dc <strnlen+0x2>
    13e6:	80 95       	com	r24
    13e8:	90 95       	com	r25
    13ea:	8e 0f       	add	r24, r30
    13ec:	9f 1f       	adc	r25, r31
    13ee:	08 95       	ret

000013f0 <fgetc>:
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	ec 01       	movw	r28, r24
    13f6:	4b 81       	ldd	r20, Y+3	; 0x03
    13f8:	40 ff       	sbrs	r20, 0
    13fa:	1a c0       	rjmp	.+52     	; 0x1430 <fgetc+0x40>
    13fc:	46 ff       	sbrs	r20, 6
    13fe:	0a c0       	rjmp	.+20     	; 0x1414 <fgetc+0x24>
    1400:	4f 7b       	andi	r20, 0xBF	; 191
    1402:	4b 83       	std	Y+3, r20	; 0x03
    1404:	8e 81       	ldd	r24, Y+6	; 0x06
    1406:	9f 81       	ldd	r25, Y+7	; 0x07
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	9f 83       	std	Y+7, r25	; 0x07
    140c:	8e 83       	std	Y+6, r24	; 0x06
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	2b c0       	rjmp	.+86     	; 0x146a <fgetc+0x7a>
    1414:	42 ff       	sbrs	r20, 2
    1416:	13 c0       	rjmp	.+38     	; 0x143e <fgetc+0x4e>
    1418:	e8 81       	ld	r30, Y
    141a:	f9 81       	ldd	r31, Y+1	; 0x01
    141c:	80 81       	ld	r24, Z
    141e:	28 2f       	mov	r18, r24
    1420:	33 27       	eor	r19, r19
    1422:	27 fd       	sbrc	r18, 7
    1424:	30 95       	com	r19
    1426:	21 15       	cp	r18, r1
    1428:	31 05       	cpc	r19, r1
    142a:	29 f4       	brne	.+10     	; 0x1436 <fgetc+0x46>
    142c:	40 62       	ori	r20, 0x20	; 32
    142e:	4b 83       	std	Y+3, r20	; 0x03
    1430:	2f ef       	ldi	r18, 0xFF	; 255
    1432:	3f ef       	ldi	r19, 0xFF	; 255
    1434:	1b c0       	rjmp	.+54     	; 0x146c <fgetc+0x7c>
    1436:	31 96       	adiw	r30, 0x01	; 1
    1438:	f9 83       	std	Y+1, r31	; 0x01
    143a:	e8 83       	st	Y, r30
    143c:	11 c0       	rjmp	.+34     	; 0x1460 <fgetc+0x70>
    143e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1440:	fb 85       	ldd	r31, Y+11	; 0x0b
    1442:	ce 01       	movw	r24, r28
    1444:	09 95       	icall
    1446:	9c 01       	movw	r18, r24
    1448:	97 ff       	sbrs	r25, 7
    144a:	0a c0       	rjmp	.+20     	; 0x1460 <fgetc+0x70>
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	2f 5f       	subi	r18, 0xFF	; 255
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	11 f0       	breq	.+4      	; 0x1458 <fgetc+0x68>
    1454:	80 e2       	ldi	r24, 0x20	; 32
    1456:	01 c0       	rjmp	.+2      	; 0x145a <fgetc+0x6a>
    1458:	80 e1       	ldi	r24, 0x10	; 16
    145a:	89 2b       	or	r24, r25
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	e8 cf       	rjmp	.-48     	; 0x1430 <fgetc+0x40>
    1460:	8e 81       	ldd	r24, Y+6	; 0x06
    1462:	9f 81       	ldd	r25, Y+7	; 0x07
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	9f 83       	std	Y+7, r25	; 0x07
    1468:	8e 83       	std	Y+6, r24	; 0x06
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	c9 01       	movw	r24, r18
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <fputc>:
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	8c 01       	movw	r16, r24
    147e:	eb 01       	movw	r28, r22
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	81 ff       	sbrs	r24, 1
    1484:	1b c0       	rjmp	.+54     	; 0x14bc <fputc+0x48>
    1486:	82 ff       	sbrs	r24, 2
    1488:	0d c0       	rjmp	.+26     	; 0x14a4 <fputc+0x30>
    148a:	2e 81       	ldd	r18, Y+6	; 0x06
    148c:	3f 81       	ldd	r19, Y+7	; 0x07
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	28 17       	cp	r18, r24
    1494:	39 07       	cpc	r19, r25
    1496:	64 f4       	brge	.+24     	; 0x14b0 <fputc+0x3c>
    1498:	e8 81       	ld	r30, Y
    149a:	f9 81       	ldd	r31, Y+1	; 0x01
    149c:	01 93       	st	Z+, r16
    149e:	f9 83       	std	Y+1, r31	; 0x01
    14a0:	e8 83       	st	Y, r30
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <fputc+0x3c>
    14a4:	e8 85       	ldd	r30, Y+8	; 0x08
    14a6:	f9 85       	ldd	r31, Y+9	; 0x09
    14a8:	80 2f       	mov	r24, r16
    14aa:	09 95       	icall
    14ac:	89 2b       	or	r24, r25
    14ae:	31 f4       	brne	.+12     	; 0x14bc <fputc+0x48>
    14b0:	8e 81       	ldd	r24, Y+6	; 0x06
    14b2:	9f 81       	ldd	r25, Y+7	; 0x07
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	9f 83       	std	Y+7, r25	; 0x07
    14b8:	8e 83       	std	Y+6, r24	; 0x06
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <fputc+0x4c>
    14bc:	0f ef       	ldi	r16, 0xFF	; 255
    14be:	1f ef       	ldi	r17, 0xFF	; 255
    14c0:	c8 01       	movw	r24, r16
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	08 95       	ret

000014cc <__ultoa_invert>:
    14cc:	fa 01       	movw	r30, r20
    14ce:	aa 27       	eor	r26, r26
    14d0:	28 30       	cpi	r18, 0x08	; 8
    14d2:	51 f1       	breq	.+84     	; 0x1528 <__ultoa_invert+0x5c>
    14d4:	20 31       	cpi	r18, 0x10	; 16
    14d6:	81 f1       	breq	.+96     	; 0x1538 <__ultoa_invert+0x6c>
    14d8:	e8 94       	clt
    14da:	6f 93       	push	r22
    14dc:	6e 7f       	andi	r22, 0xFE	; 254
    14de:	6e 5f       	subi	r22, 0xFE	; 254
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	8f 4f       	sbci	r24, 0xFF	; 255
    14e4:	9f 4f       	sbci	r25, 0xFF	; 255
    14e6:	af 4f       	sbci	r26, 0xFF	; 255
    14e8:	b1 e0       	ldi	r27, 0x01	; 1
    14ea:	3e d0       	rcall	.+124    	; 0x1568 <__ultoa_invert+0x9c>
    14ec:	b4 e0       	ldi	r27, 0x04	; 4
    14ee:	3c d0       	rcall	.+120    	; 0x1568 <__ultoa_invert+0x9c>
    14f0:	67 0f       	add	r22, r23
    14f2:	78 1f       	adc	r23, r24
    14f4:	89 1f       	adc	r24, r25
    14f6:	9a 1f       	adc	r25, r26
    14f8:	a1 1d       	adc	r26, r1
    14fa:	68 0f       	add	r22, r24
    14fc:	79 1f       	adc	r23, r25
    14fe:	8a 1f       	adc	r24, r26
    1500:	91 1d       	adc	r25, r1
    1502:	a1 1d       	adc	r26, r1
    1504:	6a 0f       	add	r22, r26
    1506:	71 1d       	adc	r23, r1
    1508:	81 1d       	adc	r24, r1
    150a:	91 1d       	adc	r25, r1
    150c:	a1 1d       	adc	r26, r1
    150e:	20 d0       	rcall	.+64     	; 0x1550 <__ultoa_invert+0x84>
    1510:	09 f4       	brne	.+2      	; 0x1514 <__ultoa_invert+0x48>
    1512:	68 94       	set
    1514:	3f 91       	pop	r19
    1516:	2a e0       	ldi	r18, 0x0A	; 10
    1518:	26 9f       	mul	r18, r22
    151a:	11 24       	eor	r1, r1
    151c:	30 19       	sub	r19, r0
    151e:	30 5d       	subi	r19, 0xD0	; 208
    1520:	31 93       	st	Z+, r19
    1522:	de f6       	brtc	.-74     	; 0x14da <__ultoa_invert+0xe>
    1524:	cf 01       	movw	r24, r30
    1526:	08 95       	ret
    1528:	46 2f       	mov	r20, r22
    152a:	47 70       	andi	r20, 0x07	; 7
    152c:	40 5d       	subi	r20, 0xD0	; 208
    152e:	41 93       	st	Z+, r20
    1530:	b3 e0       	ldi	r27, 0x03	; 3
    1532:	0f d0       	rcall	.+30     	; 0x1552 <__ultoa_invert+0x86>
    1534:	c9 f7       	brne	.-14     	; 0x1528 <__ultoa_invert+0x5c>
    1536:	f6 cf       	rjmp	.-20     	; 0x1524 <__ultoa_invert+0x58>
    1538:	46 2f       	mov	r20, r22
    153a:	4f 70       	andi	r20, 0x0F	; 15
    153c:	40 5d       	subi	r20, 0xD0	; 208
    153e:	4a 33       	cpi	r20, 0x3A	; 58
    1540:	18 f0       	brcs	.+6      	; 0x1548 <__ultoa_invert+0x7c>
    1542:	49 5d       	subi	r20, 0xD9	; 217
    1544:	31 fd       	sbrc	r19, 1
    1546:	40 52       	subi	r20, 0x20	; 32
    1548:	41 93       	st	Z+, r20
    154a:	02 d0       	rcall	.+4      	; 0x1550 <__ultoa_invert+0x84>
    154c:	a9 f7       	brne	.-22     	; 0x1538 <__ultoa_invert+0x6c>
    154e:	ea cf       	rjmp	.-44     	; 0x1524 <__ultoa_invert+0x58>
    1550:	b4 e0       	ldi	r27, 0x04	; 4
    1552:	a6 95       	lsr	r26
    1554:	97 95       	ror	r25
    1556:	87 95       	ror	r24
    1558:	77 95       	ror	r23
    155a:	67 95       	ror	r22
    155c:	ba 95       	dec	r27
    155e:	c9 f7       	brne	.-14     	; 0x1552 <__ultoa_invert+0x86>
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	61 05       	cpc	r22, r1
    1564:	71 05       	cpc	r23, r1
    1566:	08 95       	ret
    1568:	9b 01       	movw	r18, r22
    156a:	ac 01       	movw	r20, r24
    156c:	0a 2e       	mov	r0, r26
    156e:	06 94       	lsr	r0
    1570:	57 95       	ror	r21
    1572:	47 95       	ror	r20
    1574:	37 95       	ror	r19
    1576:	27 95       	ror	r18
    1578:	ba 95       	dec	r27
    157a:	c9 f7       	brne	.-14     	; 0x156e <__ultoa_invert+0xa2>
    157c:	62 0f       	add	r22, r18
    157e:	73 1f       	adc	r23, r19
    1580:	84 1f       	adc	r24, r20
    1582:	95 1f       	adc	r25, r21
    1584:	a0 1d       	adc	r26, r0
    1586:	08 95       	ret

00001588 <_exit>:
    1588:	f8 94       	cli

0000158a <__stop_program>:
    158a:	ff cf       	rjmp	.-2      	; 0x158a <__stop_program>
