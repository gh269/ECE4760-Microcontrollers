
Lab3_Ngai.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00001560  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f3  0080019c  0080019c  00001690  2**0
                  ALLOC
  3 .stab         00000eac  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  0000253c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002897  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c8  00000000  00000000  000028c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d1a  00000000  00000000  0000298e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a49  00000000  00000000  000046a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d2d  00000000  00000000  000050f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000558  00000000  00000000  00005e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000738  00000000  00000000  00006378  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001aea  00000000  00000000  00006ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000859a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 31 03 	jmp	0x662	; 0x662 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e6       	ldi	r30, 0x60	; 96
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 39       	cpi	r26, 0x9C	; 156
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	ac e9       	ldi	r26, 0x9C	; 156
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 38       	cpi	r26, 0x8F	; 143
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 2b 07 	call	0xe56	; 0xe56 <main>
      c6:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <putchar_uart1>:
// uses uart 1
void putchar_uart1(char c)
{
  //if (c == '\n')
  //  uart_putchar('\r', stream);
  loop_until_bit_is_set(UCSR1A, UDRE1);
      ce:	90 91 c8 00 	lds	r25, 0x00C8
      d2:	95 ff       	sbrs	r25, 5
      d4:	fc cf       	rjmp	.-8      	; 0xce <putchar_uart1>
  UDR1 = c;
      d6:	80 93 ce 00 	sts	0x00CE, r24
      da:	08 95       	ret

000000dc <getchar_uart1>:
// -- getchar ---
// users uart 1 -- very basic input
char getchar_uart1(void)
{
  uint8_t c;
  loop_until_bit_is_set(UCSR1A, RXC1);
      dc:	80 91 c8 00 	lds	r24, 0x00C8
      e0:	87 ff       	sbrs	r24, 7
      e2:	fc cf       	rjmp	.-8      	; 0xdc <getchar_uart1>
  return c = UDR1;
      e4:	80 91 ce 00 	lds	r24, 0x00CE
}
      e8:	08 95       	ret

000000ea <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
      ea:	1f 92       	push	r1
      ec:	0f 92       	push	r0
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	0f 92       	push	r0
      f2:	11 24       	eor	r1, r1
      f4:	0b b6       	in	r0, 0x3b	; 59
      f6:	0f 92       	push	r0
      f8:	6f 92       	push	r6
      fa:	7f 92       	push	r7
      fc:	8f 92       	push	r8
      fe:	9f 92       	push	r9
     100:	af 92       	push	r10
     102:	bf 92       	push	r11
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	4f 93       	push	r20
     116:	5f 93       	push	r21
     118:	6f 93       	push	r22
     11a:	7f 93       	push	r23
     11c:	8f 93       	push	r24
     11e:	9f 93       	push	r25
     120:	af 93       	push	r26
     122:	bf 93       	push	r27
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	ef 93       	push	r30
     12a:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     12c:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     130:	b0 90 00 03 	lds	r11, 0x0300
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     134:	b0 9b       	sbis	0x16, 0	; 22
     136:	14 c0       	rjmp	.+40     	; 0x160 <__vector_13+0x76>
    ++kernel.cycles;
     138:	80 91 41 03 	lds	r24, 0x0341
     13c:	90 91 42 03 	lds	r25, 0x0342
     140:	a0 91 43 03 	lds	r26, 0x0343
     144:	b0 91 44 03 	lds	r27, 0x0344
     148:	01 96       	adiw	r24, 0x01	; 1
     14a:	a1 1d       	adc	r26, r1
     14c:	b1 1d       	adc	r27, r1
     14e:	80 93 41 03 	sts	0x0341, r24
     152:	90 93 42 03 	sts	0x0342, r25
     156:	a0 93 43 03 	sts	0x0343, r26
     15a:	b0 93 44 03 	sts	0x0344, r27
    TIFR1 |= (1<<TOV1) ;
     15e:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     160:	80 91 84 00 	lds	r24, 0x0084
     164:	90 91 85 00 	lds	r25, 0x0085
     168:	40 91 41 03 	lds	r20, 0x0341
     16c:	50 91 42 03 	lds	r21, 0x0342
     170:	60 91 43 03 	lds	r22, 0x0343
     174:	70 91 44 03 	lds	r23, 0x0344
     178:	ba 01       	movw	r22, r20
     17a:	55 27       	eor	r21, r21
     17c:	44 27       	eor	r20, r20
     17e:	48 0f       	add	r20, r24
     180:	59 1f       	adc	r21, r25
     182:	61 1d       	adc	r22, r1
     184:	71 1d       	adc	r23, r1

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     186:	70 90 ff 02 	lds	r7, 0x02FF
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
     18a:	8f ef       	ldi	r24, 0xFF	; 255
     18c:	9f ef       	ldi	r25, 0xFF	; 255
     18e:	af ef       	ldi	r26, 0xFF	; 255
     190:	bf e7       	ldi	r27, 0x7F	; 127

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     192:	99 24       	eor	r9, r9
     194:	93 94       	inc	r9
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
  running = 0;
     196:	a1 2c       	mov	r10, r1
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     198:	cb e0       	ldi	r28, 0x0B	; 11
     19a:	8c 2e       	mov	r8, r28
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     19c:	66 24       	eor	r6, r6
     19e:	63 94       	inc	r6

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     1a0:	31 c0       	rjmp	.+98     	; 0x204 <__vector_13+0x11a>
    t = &kernel.tasks[i];
     1a2:	89 9c       	mul	r8, r9
     1a4:	f0 01       	movw	r30, r0
     1a6:	11 24       	eor	r1, r1
     1a8:	ef 5f       	subi	r30, 0xFF	; 255
     1aa:	fc 4f       	sbci	r31, 0xFC	; 252
    if (t->state == TIMEQ) {
     1ac:	22 85       	ldd	r18, Z+10	; 0x0a
     1ae:	22 30       	cpi	r18, 0x02	; 2
     1b0:	91 f4       	brne	.+36     	; 0x1d6 <__vector_13+0xec>
      if (t->release <= now) {
     1b2:	02 81       	ldd	r16, Z+2	; 0x02
     1b4:	13 81       	ldd	r17, Z+3	; 0x03
     1b6:	24 81       	ldd	r18, Z+4	; 0x04
     1b8:	35 81       	ldd	r19, Z+5	; 0x05
     1ba:	40 17       	cp	r20, r16
     1bc:	51 07       	cpc	r21, r17
     1be:	62 07       	cpc	r22, r18
     1c0:	73 07       	cpc	r23, r19
     1c2:	10 f0       	brcs	.+4      	; 0x1c8 <__vector_13+0xde>
	t->state = READYQ;
     1c4:	62 86       	std	Z+10, r6	; 0x0a
     1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <__vector_13+0xec>
     1c8:	08 17       	cp	r16, r24
     1ca:	19 07       	cpc	r17, r25
     1cc:	2a 07       	cpc	r18, r26
     1ce:	3b 07       	cpc	r19, r27
     1d0:	10 f4       	brcc	.+4      	; 0x1d6 <__vector_13+0xec>
     1d2:	d9 01       	movw	r26, r18
     1d4:	c8 01       	movw	r24, r16
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     1d6:	22 85       	ldd	r18, Z+10	; 0x0a
     1d8:	21 30       	cpi	r18, 0x01	; 1
     1da:	99 f4       	brne	.+38     	; 0x202 <__vector_13+0x118>
      if (t->deadline < kernel.tasks[running].deadline) {
     1dc:	8a 9c       	mul	r8, r10
     1de:	e0 01       	movw	r28, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	c1 50       	subi	r28, 0x01	; 1
     1e4:	dd 4f       	sbci	r29, 0xFD	; 253
     1e6:	c6 80       	ldd	r12, Z+6	; 0x06
     1e8:	d7 80       	ldd	r13, Z+7	; 0x07
     1ea:	e0 84       	ldd	r14, Z+8	; 0x08
     1ec:	f1 84       	ldd	r15, Z+9	; 0x09
     1ee:	08 85       	ldd	r16, Y+8	; 0x08
     1f0:	19 85       	ldd	r17, Y+9	; 0x09
     1f2:	2a 85       	ldd	r18, Y+10	; 0x0a
     1f4:	3b 85       	ldd	r19, Y+11	; 0x0b
     1f6:	c0 16       	cp	r12, r16
     1f8:	d1 06       	cpc	r13, r17
     1fa:	e2 06       	cpc	r14, r18
     1fc:	f3 06       	cpc	r15, r19
     1fe:	08 f4       	brcc	.+2      	; 0x202 <__vector_13+0x118>
     200:	a9 2c       	mov	r10, r9

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     202:	93 94       	inc	r9
     204:	79 14       	cp	r7, r9
     206:	68 f6       	brcc	.-102    	; 0x1a2 <__vector_13+0xb8>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     208:	ab 14       	cp	r10, r11
     20a:	a9 f0       	breq	.+42     	; 0x236 <__vector_13+0x14c>

    // store old context
    t = &kernel.tasks[oldrunning];
     20c:	eb e0       	ldi	r30, 0x0B	; 11
     20e:	eb 9d       	mul	r30, r11
     210:	e0 01       	movw	r28, r0
     212:	11 24       	eor	r1, r1
     214:	cf 5f       	subi	r28, 0xFF	; 255
     216:	dc 4f       	sbci	r29, 0xFC	; 252
    t->spl = SPL;
     218:	2d b7       	in	r18, 0x3d	; 61
     21a:	28 83       	st	Y, r18
    t->sph = SPH;
     21c:	2e b7       	in	r18, 0x3e	; 62
     21e:	29 83       	std	Y+1, r18	; 0x01

    // load new context
    t = &kernel.tasks[running];
     220:	ea 9d       	mul	r30, r10
     222:	f0 01       	movw	r30, r0
     224:	11 24       	eor	r1, r1
     226:	ef 5f       	subi	r30, 0xFF	; 255
     228:	fc 4f       	sbci	r31, 0xFC	; 252
    SPH = t->sph;
     22a:	21 81       	ldd	r18, Z+1	; 0x01
     22c:	2e bf       	out	0x3e, r18	; 62
    SPL = t->spl;
     22e:	20 81       	ld	r18, Z
     230:	2d bf       	out	0x3d, r18	; 61

    kernel.running = running;
     232:	a0 92 00 03 	sts	0x0300, r10

  }

  kernel.nextHit = nextHit;  
     236:	80 93 45 03 	sts	0x0345, r24
     23a:	90 93 46 03 	sts	0x0346, r25
     23e:	a0 93 47 03 	sts	0x0347, r26
     242:	b0 93 48 03 	sts	0x0348, r27

  now = (kernel.cycles << 16) + TCNT1;
     246:	20 91 84 00 	lds	r18, 0x0084
     24a:	30 91 85 00 	lds	r19, 0x0085
     24e:	40 91 41 03 	lds	r20, 0x0341
     252:	50 91 42 03 	lds	r21, 0x0342
     256:	60 91 43 03 	lds	r22, 0x0343
     25a:	70 91 44 03 	lds	r23, 0x0344
     25e:	ba 01       	movw	r22, r20
     260:	55 27       	eor	r21, r21
     262:	44 27       	eor	r20, r20
     264:	42 0f       	add	r20, r18
     266:	53 1f       	adc	r21, r19
     268:	61 1d       	adc	r22, r1
     26a:	71 1d       	adc	r23, r1
  timeleft = (int32_t)nextHit - (int32_t)now;
     26c:	84 1b       	sub	r24, r20
     26e:	95 0b       	sbc	r25, r21
     270:	a6 0b       	sbc	r26, r22
     272:	b7 0b       	sbc	r27, r23
  if (timeleft < 4) {
     274:	84 30       	cpi	r24, 0x04	; 4
     276:	91 05       	cpc	r25, r1
     278:	a1 05       	cpc	r26, r1
     27a:	b1 05       	cpc	r27, r1
     27c:	24 f4       	brge	.+8      	; 0x286 <__vector_13+0x19c>
    timeleft = 4;
     27e:	84 e0       	ldi	r24, 0x04	; 4
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	a0 e0       	ldi	r26, 0x00	; 0
     284:	b0 e0       	ldi	r27, 0x00	; 0
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     286:	20 91 84 00 	lds	r18, 0x0084
     28a:	30 91 85 00 	lds	r19, 0x0085
     28e:	ac 01       	movw	r20, r24
     290:	bd 01       	movw	r22, r26
     292:	42 0f       	add	r20, r18
     294:	53 1f       	adc	r21, r19
     296:	61 1d       	adc	r22, r1
     298:	71 1d       	adc	r23, r1
     29a:	41 15       	cp	r20, r1
     29c:	51 05       	cpc	r21, r1
     29e:	61 40       	sbci	r22, 0x01	; 1
     2a0:	71 05       	cpc	r23, r1
     2a2:	58 f4       	brcc	.+22     	; 0x2ba <__vector_13+0x1d0>
    OCR1A = TCNT1 + timeleft;
     2a4:	20 91 84 00 	lds	r18, 0x0084
     2a8:	30 91 85 00 	lds	r19, 0x0085
     2ac:	28 0f       	add	r18, r24
     2ae:	39 1f       	adc	r19, r25
     2b0:	30 93 89 00 	sts	0x0089, r19
     2b4:	20 93 88 00 	sts	0x0088, r18
     2b8:	12 c0       	rjmp	.+36     	; 0x2de <__vector_13+0x1f4>
  } else if (TCNT1 < 65536 - 4) {
     2ba:	80 91 84 00 	lds	r24, 0x0084
     2be:	90 91 85 00 	lds	r25, 0x0085
     2c2:	8c 3f       	cpi	r24, 0xFC	; 252
     2c4:	9f 4f       	sbci	r25, 0xFF	; 255
     2c6:	28 f4       	brcc	.+10     	; 0x2d2 <__vector_13+0x1e8>
    OCR1A = 0x0000;
     2c8:	10 92 89 00 	sts	0x0089, r1
     2cc:	10 92 88 00 	sts	0x0088, r1
     2d0:	06 c0       	rjmp	.+12     	; 0x2de <__vector_13+0x1f4>
  } else {
    OCR1A = 4;
     2d2:	84 e0       	ldi	r24, 0x04	; 4
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	90 93 89 00 	sts	0x0089, r25
     2da:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	80 93 6f 00 	sts	0x006F, r24
}
     2e4:	ff 91       	pop	r31
     2e6:	ef 91       	pop	r30
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	bf 91       	pop	r27
     2ee:	af 91       	pop	r26
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	7f 91       	pop	r23
     2f6:	6f 91       	pop	r22
     2f8:	5f 91       	pop	r21
     2fa:	4f 91       	pop	r20
     2fc:	3f 91       	pop	r19
     2fe:	2f 91       	pop	r18
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	7f 90       	pop	r7
     316:	6f 90       	pop	r6
     318:	0f 90       	pop	r0
     31a:	0b be       	out	0x3b, r0	; 59
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     326:	10 92 85 00 	sts	0x0085, r1
     32a:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     32e:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     332:	25 e0       	ldi	r18, 0x05	; 5
     334:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     338:	22 e0       	ldi	r18, 0x02	; 2
     33a:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     33e:	2f ef       	ldi	r18, 0xFF	; 255
     340:	30 e4       	ldi	r19, 0x40	; 64
     342:	28 1b       	sub	r18, r24
     344:	39 0b       	sbc	r19, r25
     346:	30 93 40 03 	sts	0x0340, r19
     34a:	20 93 3f 03 	sts	0x033F, r18
  kernel.nbrOfTasks = 0;
     34e:	10 92 ff 02 	sts	0x02FF, r1
  kernel.running = 0;
     352:	10 92 00 03 	sts	0x0300, r1

  kernel.cycles = 0x0000;
     356:	10 92 41 03 	sts	0x0341, r1
     35a:	10 92 42 03 	sts	0x0342, r1
     35e:	10 92 43 03 	sts	0x0343, r1
     362:	10 92 44 03 	sts	0x0344, r1
  kernel.nextHit = 0x7FFFFFFF;
     366:	8f ef       	ldi	r24, 0xFF	; 255
     368:	9f ef       	ldi	r25, 0xFF	; 255
     36a:	af ef       	ldi	r26, 0xFF	; 255
     36c:	bf e7       	ldi	r27, 0x7F	; 127
     36e:	80 93 45 03 	sts	0x0345, r24
     372:	90 93 46 03 	sts	0x0346, r25
     376:	a0 93 47 03 	sts	0x0347, r26
     37a:	b0 93 48 03 	sts	0x0348, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     37e:	80 93 07 03 	sts	0x0307, r24
     382:	90 93 08 03 	sts	0x0308, r25
     386:	a0 93 09 03 	sts	0x0309, r26
     38a:	b0 93 0a 03 	sts	0x030A, r27
  kernel.tasks[0].release = 0x00000000;
     38e:	10 92 03 03 	sts	0x0303, r1
     392:	10 92 04 03 	sts	0x0304, r1
     396:	10 92 05 03 	sts	0x0305, r1
     39a:	10 92 06 03 	sts	0x0306, r1

  sei(); /* set enabled interrupts */
     39e:	78 94       	sei
     3a0:	08 95       	ret

000003a2 <trtCreateTask>:
}


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     3ae:	f8 94       	cli

  ++kernel.nbrOfTasks;
     3b0:	e0 91 ff 02 	lds	r30, 0x02FF
     3b4:	ef 5f       	subi	r30, 0xFF	; 255
     3b6:	e0 93 ff 02 	sts	0x02FF, r30

  sp = kernel.memptr;
     3ba:	e0 91 3f 03 	lds	r30, 0x033F
     3be:	f0 91 40 03 	lds	r31, 0x0340
  kernel.memptr -= stacksize;  // decrease free mem ptr
     3c2:	df 01       	movw	r26, r30
     3c4:	a6 1b       	sub	r26, r22
     3c6:	b7 0b       	sbc	r27, r23
     3c8:	b0 93 40 03 	sts	0x0340, r27
     3cc:	a0 93 3f 03 	sts	0x033F, r26

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     3d0:	80 83       	st	Z, r24
  *sp-- = hi8(fun);       // store PC(hi)
     3d2:	df 01       	movw	r26, r30
     3d4:	9e 93       	st	-X, r25

  sei(); /* set enabled interrupts */
}


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     3d6:	cf 01       	movw	r24, r30
     3d8:	4b 97       	sbiw	r24, 0x1b	; 27

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     3da:	1e 92       	st	-X, r1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     3dc:	a8 17       	cp	r26, r24
     3de:	b9 07       	cpc	r27, r25
     3e0:	e1 f7       	brne	.-8      	; 0x3da <trtCreateTask+0x38>
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     3e2:	df 01       	movw	r26, r30
     3e4:	5c 97       	sbiw	r26, 0x1c	; 28
     3e6:	cc 92       	st	X, r12
  *sp-- = hi8(args);
     3e8:	df 01       	movw	r26, r30
     3ea:	5d 97       	sbiw	r26, 0x1d	; 29
     3ec:	dc 92       	st	X, r13

  sei(); /* set enabled interrupts */
}


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     3ee:	cf 01       	movw	r24, r30
     3f0:	83 97       	sbiw	r24, 0x23	; 35
  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
    *sp-- = 0x00;         // store r26-r31
     3f2:	1e 92       	st	-X, r1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     3f4:	a8 17       	cp	r26, r24
     3f6:	b9 07       	cpc	r27, r25
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <trtCreateTask+0x50>
     3fa:	b4 97       	sbiw	r30, 0x24	; 36
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     3fc:	a0 91 ff 02 	lds	r26, 0x02FF
     400:	8b e0       	ldi	r24, 0x0B	; 11
     402:	a8 9f       	mul	r26, r24
     404:	d0 01       	movw	r26, r0
     406:	11 24       	eor	r1, r1
     408:	af 5f       	subi	r26, 0xFF	; 255
     40a:	bc 4f       	sbci	r27, 0xFC	; 252

  t->release = release;
     40c:	12 96       	adiw	r26, 0x02	; 2
     40e:	2d 93       	st	X+, r18
     410:	3d 93       	st	X+, r19
     412:	4d 93       	st	X+, r20
     414:	5c 93       	st	X, r21
     416:	15 97       	sbiw	r26, 0x05	; 5
  t->deadline = deadline;
     418:	16 96       	adiw	r26, 0x06	; 6
     41a:	ed 92       	st	X+, r14
     41c:	fd 92       	st	X+, r15
     41e:	0d 93       	st	X+, r16
     420:	1c 93       	st	X, r17
     422:	19 97       	sbiw	r26, 0x09	; 9
  t->state = TIMEQ;
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	1a 96       	adiw	r26, 0x0a	; 10
     428:	8c 93       	st	X, r24
     42a:	1a 97       	sbiw	r26, 0x0a	; 10

  t->spl = lo8(sp);       // store stack pointer
     42c:	ec 93       	st	X, r30
  t->sph = hi8(sp);
     42e:	11 96       	adiw	r26, 0x01	; 1
     430:	fc 93       	st	X, r31
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();

}
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	cf 90       	pop	r12

  t->spl = lo8(sp);       // store stack pointer
  t->sph = hi8(sp);
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     43e:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_13>

00000442 <trtCreateSemaphore>:

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     442:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     444:	e8 2f       	mov	r30, r24
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	e1 50       	subi	r30, 0x01	; 1
     44a:	fd 4f       	sbci	r31, 0xFD	; 253
     44c:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     44e:	78 94       	sei
     450:	08 95       	ret

00000452 <trtWait>:
void trtWait(uint8_t semnbr) {

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     452:	20 91 00 03 	lds	r18, 0x0300

  cli(); // disable interrupts
     456:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     458:	e8 2f       	mov	r30, r24
     45a:	f0 e0       	ldi	r31, 0x00	; 0
  if ((*s) > 0) {
     45c:	e2 50       	subi	r30, 0x02	; 2
     45e:	fd 4f       	sbci	r31, 0xFD	; 253
     460:	91 ad       	ldd	r25, Z+57	; 0x39
     462:	99 23       	and	r25, r25
     464:	19 f0       	breq	.+6      	; 0x46c <trtWait+0x1a>
    (*s)--;
     466:	91 50       	subi	r25, 0x01	; 1
     468:	91 af       	std	Z+57, r25	; 0x39
     46a:	0a c0       	rjmp	.+20     	; 0x480 <trtWait+0x2e>
void trtWait(uint8_t semnbr) {

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     46c:	9b e0       	ldi	r25, 0x0B	; 11
     46e:	29 9f       	mul	r18, r25
     470:	f0 01       	movw	r30, r0
     472:	11 24       	eor	r1, r1
  s = &kernel.semaphores[semnbr-1];
  if ((*s) > 0) {
    (*s)--;
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     474:	ef 5f       	subi	r30, 0xFF	; 255
     476:	fc 4f       	sbci	r31, 0xFC	; 252
     478:	8e 5f       	subi	r24, 0xFE	; 254
     47a:	82 87       	std	Z+10, r24	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     47c:	0e 94 75 00 	call	0xea	; 0xea <__vector_13>
  }

  sei(); // reenable interrupts
     480:	78 94       	sei
     482:	08 95       	ret

00000484 <trtSignal>:
}

void trtSignal(uint8_t semnbr) {
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     48e:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     490:	f0 91 ff 02 	lds	r31, 0x02FF
void trtSignal(uint8_t semnbr) {

  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;
     494:	e0 e0       	ldi	r30, 0x00	; 0

void trtSignal(uint8_t semnbr) {

  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
     496:	4f ef       	ldi	r20, 0xFF	; 255
     498:	5f ef       	ldi	r21, 0xFF	; 255
     49a:	ba 01       	movw	r22, r20
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     49c:	91 e0       	ldi	r25, 0x01	; 1
    t = &kernel.tasks[i];
     49e:	db e0       	ldi	r29, 0x0B	; 11
     4a0:	fd 2e       	mov	r15, r29
    if (t->state == (semnbr + WAIT_OFFSET)) {
     4a2:	c8 2f       	mov	r28, r24
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
     4a6:	22 96       	adiw	r28, 0x02	; 2
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <trtSignal+0x5c>
    t = &kernel.tasks[i];
     4aa:	f9 9e       	mul	r15, r25
     4ac:	d0 01       	movw	r26, r0
     4ae:	11 24       	eor	r1, r1
     4b0:	af 5f       	subi	r26, 0xFF	; 255
     4b2:	bc 4f       	sbci	r27, 0xFC	; 252
    if (t->state == (semnbr + WAIT_OFFSET)) {
     4b4:	1a 96       	adiw	r26, 0x0a	; 10
     4b6:	2c 91       	ld	r18, X
     4b8:	1a 97       	sbiw	r26, 0x0a	; 10
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	2c 17       	cp	r18, r28
     4be:	3d 07       	cpc	r19, r29
     4c0:	71 f4       	brne	.+28     	; 0x4de <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     4c2:	16 96       	adiw	r26, 0x06	; 6
     4c4:	0d 91       	ld	r16, X+
     4c6:	1d 91       	ld	r17, X+
     4c8:	2d 91       	ld	r18, X+
     4ca:	3c 91       	ld	r19, X
     4cc:	19 97       	sbiw	r26, 0x09	; 9
     4ce:	40 17       	cp	r20, r16
     4d0:	51 07       	cpc	r21, r17
     4d2:	62 07       	cpc	r22, r18
     4d4:	73 07       	cpc	r23, r19
     4d6:	18 f0       	brcs	.+6      	; 0x4de <trtSignal+0x5a>
     4d8:	e9 2f       	mov	r30, r25
     4da:	b9 01       	movw	r22, r18
     4dc:	a8 01       	movw	r20, r16
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     4de:	9f 5f       	subi	r25, 0xFF	; 255
     4e0:	f9 17       	cp	r31, r25
     4e2:	18 f7       	brcc	.-58     	; 0x4aa <trtSignal+0x26>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     4e4:	e1 11       	cpse	r30, r1
     4e6:	08 c0       	rjmp	.+16     	; 0x4f8 <trtSignal+0x74>
    kernel.semaphores[semnbr-1]++;
     4e8:	e8 2f       	mov	r30, r24
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	e2 50       	subi	r30, 0x02	; 2
     4ee:	fd 4f       	sbci	r31, 0xFD	; 253
     4f0:	81 ad       	ldd	r24, Z+57	; 0x39
     4f2:	8f 5f       	subi	r24, 0xFF	; 255
     4f4:	81 af       	std	Z+57, r24	; 0x39
     4f6:	0a c0       	rjmp	.+20     	; 0x50c <trtSignal+0x88>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     4f8:	8b e0       	ldi	r24, 0x0B	; 11
     4fa:	e8 9f       	mul	r30, r24
     4fc:	f0 01       	movw	r30, r0
     4fe:	11 24       	eor	r1, r1
     500:	e1 50       	subi	r30, 0x01	; 1
     502:	fd 4f       	sbci	r31, 0xFD	; 253
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     508:	0e 94 75 00 	call	0xea	; 0xea <__vector_13>
  }

  sei(); // reenable interrupts
     50c:	78 94       	sei
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	08 95       	ret

0000051a <trtCurrentTime>:

uint32_t trtCurrentTime(void) {
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     51e:	80 91 84 00 	lds	r24, 0x0084
     522:	90 91 85 00 	lds	r25, 0x0085
     526:	00 91 41 03 	lds	r16, 0x0341
     52a:	10 91 42 03 	lds	r17, 0x0342
     52e:	20 91 43 03 	lds	r18, 0x0343
     532:	30 91 44 03 	lds	r19, 0x0344
     536:	98 01       	movw	r18, r16
     538:	11 27       	eor	r17, r17
     53a:	00 27       	eor	r16, r16
     53c:	08 0f       	add	r16, r24
     53e:	19 1f       	adc	r17, r25
     540:	21 1d       	adc	r18, r1
     542:	31 1d       	adc	r19, r1
}
     544:	b8 01       	movw	r22, r16
     546:	c9 01       	movw	r24, r18
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	08 95       	ret

0000054e <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     54e:	e0 91 00 03 	lds	r30, 0x0300
     552:	ab e0       	ldi	r26, 0x0B	; 11
     554:	ea 9f       	mul	r30, r26
     556:	f0 01       	movw	r30, r0
     558:	11 24       	eor	r1, r1
     55a:	ef 5f       	subi	r30, 0xFF	; 255
     55c:	fc 4f       	sbci	r31, 0xFC	; 252

  cli(); // turn off interrupts
     55e:	f8 94       	cli

  t->state = TIMEQ;
     560:	a2 e0       	ldi	r26, 0x02	; 2
     562:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     564:	62 83       	std	Z+2, r22	; 0x02
     566:	73 83       	std	Z+3, r23	; 0x03
     568:	84 83       	std	Z+4, r24	; 0x04
     56a:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     56c:	26 83       	std	Z+6, r18	; 0x06
     56e:	37 83       	std	Z+7, r19	; 0x07
     570:	40 87       	std	Z+8, r20	; 0x08
     572:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     574:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_13>

00000578 <blink_led>:
begin

uint32_t rel, dead;

while(1){
	PORTB ^= 0x10;
     578:	50 e1       	ldi	r21, 0x10	; 16
     57a:	b5 2e       	mov	r11, r21
	  //fprintf(&uart1, "%s\n\r", byte_to_binary(PINA));
	  fprintf(&uart1, "%d,%d\n\r", KeyState,LockState);
     57c:	00 e1       	ldi	r16, 0x10	; 16
     57e:	11 e0       	ldi	r17, 0x01	; 1
     580:	c0 e0       	ldi	r28, 0x00	; 0
     582:	d1 e0       	ldi	r29, 0x01	; 1
begin

uint32_t rel, dead;

while(1){
	PORTB ^= 0x10;
     584:	85 b1       	in	r24, 0x05	; 5
     586:	8b 25       	eor	r24, r11
     588:	85 b9       	out	0x05, r24	; 5
	  //fprintf(&uart1, "%s\n\r", byte_to_binary(PINA));
	  fprintf(&uart1, "%d,%d\n\r", KeyState,LockState);
     58a:	80 91 0e 01 	lds	r24, 0x010E
     58e:	1f 92       	push	r1
     590:	8f 93       	push	r24
     592:	80 91 0f 01 	lds	r24, 0x010F
     596:	1f 92       	push	r1
     598:	8f 93       	push	r24
     59a:	1f 93       	push	r17
     59c:	0f 93       	push	r16
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fprintf>
	  rel = trtCurrentTime() + SECONDS2TICKS(1);
     5a6:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     5aa:	6b 01       	movw	r12, r22
     5ac:	7c 01       	movw	r14, r24
	  //set new deadline
	  dead = trtCurrentTime() + SECONDS2TICKS(2);
     5ae:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     5b2:	9b 01       	movw	r18, r22
     5b4:	ac 01       	movw	r20, r24
     5b6:	2e 5e       	subi	r18, 0xEE	; 238
     5b8:	35 48       	sbci	r19, 0x85	; 133
     5ba:	4f 4f       	sbci	r20, 0xFF	; 255
     5bc:	5f 4f       	sbci	r21, 0xFF	; 255

while(1){
	PORTB ^= 0x10;
	  //fprintf(&uart1, "%s\n\r", byte_to_binary(PINA));
	  fprintf(&uart1, "%d,%d\n\r", KeyState,LockState);
	  rel = trtCurrentTime() + SECONDS2TICKS(1);
     5be:	c7 01       	movw	r24, r14
     5c0:	b6 01       	movw	r22, r12
     5c2:	67 5f       	subi	r22, 0xF7	; 247
     5c4:	72 4c       	sbci	r23, 0xC2	; 194
     5c6:	8f 4f       	sbci	r24, 0xFF	; 255
     5c8:	9f 4f       	sbci	r25, 0xFF	; 255
	  //set new deadline
	  dead = trtCurrentTime() + SECONDS2TICKS(2);

	  //sleep
      trtSleepUntil(rel, dead);
     5ca:	0e 94 a7 02 	call	0x54e	; 0x54e <trtSleepUntil>
     5ce:	8d b7       	in	r24, 0x3d	; 61
     5d0:	9e b7       	in	r25, 0x3e	; 62
     5d2:	08 96       	adiw	r24, 0x08	; 8
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	9e bf       	out	0x3e, r25	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	8d bf       	out	0x3d, r24	; 61
     5de:	d2 cf       	rjmp	.-92     	; 0x584 <blink_led+0xc>

000005e0 <trtGetRelease>:
}


uint32_t trtGetRelease(void) {
  return kernel.tasks[kernel.running].release;
     5e0:	e0 91 00 03 	lds	r30, 0x0300
     5e4:	8b e0       	ldi	r24, 0x0B	; 11
     5e6:	e8 9f       	mul	r30, r24
     5e8:	f0 01       	movw	r30, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	e1 50       	subi	r30, 0x01	; 1
     5ee:	fd 4f       	sbci	r31, 0xFD	; 253
     5f0:	df 01       	movw	r26, r30
     5f2:	14 96       	adiw	r26, 0x04	; 4
     5f4:	64 81       	ldd	r22, Z+4	; 0x04
     5f6:	11 96       	adiw	r26, 0x01	; 1
     5f8:	7c 91       	ld	r23, X
     5fa:	11 97       	sbiw	r26, 0x01	; 1
}
     5fc:	12 96       	adiw	r26, 0x02	; 2
     5fe:	8c 91       	ld	r24, X
     600:	12 97       	sbiw	r26, 0x02	; 2
     602:	13 96       	adiw	r26, 0x03	; 3
     604:	9c 91       	ld	r25, X
     606:	08 95       	ret

00000608 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
  return kernel.tasks[kernel.running].deadline;
     608:	e0 91 00 03 	lds	r30, 0x0300
     60c:	8b e0       	ldi	r24, 0x0B	; 11
     60e:	e8 9f       	mul	r30, r24
     610:	f0 01       	movw	r30, r0
     612:	11 24       	eor	r1, r1
     614:	e1 50       	subi	r30, 0x01	; 1
     616:	fd 4f       	sbci	r31, 0xFD	; 253
     618:	df 01       	movw	r26, r30
     61a:	18 96       	adiw	r26, 0x08	; 8
     61c:	60 85       	ldd	r22, Z+8	; 0x08
     61e:	11 96       	adiw	r26, 0x01	; 1
     620:	7c 91       	ld	r23, X
     622:	11 97       	sbiw	r26, 0x01	; 1
}
     624:	12 96       	adiw	r26, 0x02	; 2
     626:	8c 91       	ld	r24, X
     628:	12 97       	sbiw	r26, 0x02	; 2
     62a:	13 96       	adiw	r26, 0x03	; 3
     62c:	9c 91       	ld	r25, X
     62e:	08 95       	ret

00000630 <trtTerminate>:

void trtTerminate(void) {

  cli();
     630:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     632:	e0 91 00 03 	lds	r30, 0x0300
     636:	8b e0       	ldi	r24, 0x0B	; 11
     638:	e8 9f       	mul	r30, r24
     63a:	f0 01       	movw	r30, r0
     63c:	11 24       	eor	r1, r1
     63e:	e1 50       	subi	r30, 0x01	; 1
     640:	fd 4f       	sbci	r31, 0xFD	; 253
     642:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     644:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_13>

00000648 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     648:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     64a:	e8 2f       	mov	r30, r24
     64c:	f0 e0       	ldi	r31, 0x00	; 0
  temp = *s ;
     64e:	e2 50       	subi	r30, 0x02	; 2
     650:	fd 4f       	sbci	r31, 0xFD	; 253
     652:	81 ad       	ldd	r24, Z+57	; 0x39
  if ((*s) > 0) {
     654:	88 23       	and	r24, r24
     656:	19 f0       	breq	.+6      	; 0x65e <trtAccept+0x16>
    (*s)--;
     658:	98 2f       	mov	r25, r24
     65a:	91 50       	subi	r25, 0x01	; 1
     65c:	91 af       	std	Z+57, r25	; 0x39
  } 
  sei(); // reenable interrupts
     65e:	78 94       	sei
  return temp ;
}
     660:	08 95       	ret

00000662 <__vector_16>:
// Full duplex transmit/receive
// sends ir character (if ready)
// receives ir char (if valid)
// builds ir receive buffer
ISR(TIMER0_COMPA_vect) 
begin  
     662:	1f 92       	push	r1
     664:	0f 92       	push	r0
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
     66c:	0b b6       	in	r0, 0x3b	; 59
     66e:	0f 92       	push	r0
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	af 93       	push	r26
     676:	bf 93       	push	r27
     678:	ef 93       	push	r30
     67a:	ff 93       	push	r31
	unsigned char c ;
	    
  	//Decrement the time if not already zero
  	if (time1>0) --time1;
     67c:	80 91 f5 02 	lds	r24, 0x02F5
     680:	90 91 f6 02 	lds	r25, 0x02F6
     684:	89 2b       	or	r24, r25
     686:	49 f0       	breq	.+18     	; 0x69a <__vector_16+0x38>
     688:	80 91 f5 02 	lds	r24, 0x02F5
     68c:	90 91 f6 02 	lds	r25, 0x02F6
     690:	01 97       	sbiw	r24, 0x01	; 1
     692:	90 93 f6 02 	sts	0x02F6, r25
     696:	80 93 f5 02 	sts	0x02F5, r24
	if (time2>0) --time2;
     69a:	80 91 4d 03 	lds	r24, 0x034D
     69e:	90 91 4e 03 	lds	r25, 0x034E
     6a2:	89 2b       	or	r24, r25
     6a4:	49 f0       	breq	.+18     	; 0x6b8 <__vector_16+0x56>
     6a6:	80 91 4d 03 	lds	r24, 0x034D
     6aa:	90 91 4e 03 	lds	r25, 0x034E
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	90 93 4e 03 	sts	0x034E, r25
     6b4:	80 93 4d 03 	sts	0x034D, r24
  	time++ ; // running cpu time
     6b8:	80 91 f7 02 	lds	r24, 0x02F7
     6bc:	90 91 f8 02 	lds	r25, 0x02F8
     6c0:	a0 91 f9 02 	lds	r26, 0x02F9
     6c4:	b0 91 fa 02 	lds	r27, 0x02FA
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	a1 1d       	adc	r26, r1
     6cc:	b1 1d       	adc	r27, r1
     6ce:	80 93 f7 02 	sts	0x02F7, r24
     6d2:	90 93 f8 02 	sts	0x02F8, r25
     6d6:	a0 93 f9 02 	sts	0x02F9, r26
     6da:	b0 93 fa 02 	sts	0x02FA, r27
	
	//**********************
  	// send an ir char if tx is ready and still char in buffer to send
	// and USART is ready
	if (ir_tx_ready ){ //&& ir_tx_buffer[ir_tx_count]>0
     6de:	80 91 ed 01 	lds	r24, 0x01ED
     6e2:	88 23       	and	r24, r24
     6e4:	01 f1       	breq	.+64     	; 0x726 <__vector_16+0xc4>
		if (UCSR0A & (1<<UDRE0)) UDR0 = ir_tx_buffer[ir_tx_count++];
     6e6:	80 91 c0 00 	lds	r24, 0x00C0
     6ea:	85 ff       	sbrs	r24, 5
     6ec:	0c c0       	rjmp	.+24     	; 0x706 <__vector_16+0xa4>
     6ee:	80 91 4c 03 	lds	r24, 0x034C
     6f2:	e8 2f       	mov	r30, r24
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	e3 55       	subi	r30, 0x53	; 83
     6f8:	fe 4f       	sbci	r31, 0xFE	; 254
     6fa:	90 81       	ld	r25, Z
     6fc:	90 93 c6 00 	sts	0x00C6, r25
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	80 93 4c 03 	sts	0x034C, r24
		if (ir_tx_buffer[ir_tx_count]==0x00) ir_tx_ready = 0 ; // end of buffer
     706:	e0 91 4c 03 	lds	r30, 0x034C
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	e3 55       	subi	r30, 0x53	; 83
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	80 81       	ld	r24, Z
     712:	81 11       	cpse	r24, r1
     714:	02 c0       	rjmp	.+4      	; 0x71a <__vector_16+0xb8>
     716:	10 92 ed 01 	sts	0x01ED, r1
		if (ir_tx_count >= buffer_size) ir_tx_ready = 0; // buffer overrun
     71a:	80 91 4c 03 	lds	r24, 0x034C
     71e:	80 34       	cpi	r24, 0x40	; 64
     720:	10 f0       	brcs	.+4      	; 0x726 <__vector_16+0xc4>
     722:	10 92 ed 01 	sts	0x01ED, r1
	}
	
	//**********************
  	// recv an ir char if data ready 
  	// otherwise set c to null 
	if (UCSR0A & (1<<RXC0) ) {
     726:	80 91 c0 00 	lds	r24, 0x00C0
     72a:	87 ff       	sbrs	r24, 7
     72c:	2b c0       	rjmp	.+86     	; 0x784 <__vector_16+0x122>
		c = UDR0 ; // valid char 
     72e:	80 91 c6 00 	lds	r24, 0x00C6
	else c = 0 ; // nonvalid

	//**********************
	// append character to the received string
	// if character is valid and we expect a string
	if (c>0) { //&& (ir_rx_ready==0)) {
     732:	88 23       	and	r24, r24
     734:	39 f1       	breq	.+78     	; 0x784 <__vector_16+0x122>

		if (c == start_token) { // restart the string
     736:	83 32       	cpi	r24, 0x23	; 35
     738:	19 f4       	brne	.+6      	; 0x740 <__vector_16+0xde>
			ir_rx_count = 0 ;
     73a:	10 92 4b 03 	sts	0x034B, r1
     73e:	22 c0       	rjmp	.+68     	; 0x784 <__vector_16+0x122>
		}

		else if (c == end_token){ // end the string
     740:	85 32       	cpi	r24, 0x25	; 37
     742:	51 f4       	brne	.+20     	; 0x758 <__vector_16+0xf6>
			ir_rx_buffer[ir_rx_count] = 0x00 ;
     744:	e0 91 4b 03 	lds	r30, 0x034B
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	e1 5b       	subi	r30, 0xB1	; 177
     74c:	fc 4f       	sbci	r31, 0xFC	; 252
     74e:	10 82       	st	Z, r1
			ir_rx_ready = 1 ;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 ee 01 	sts	0x01EE, r24
     756:	16 c0       	rjmp	.+44     	; 0x784 <__vector_16+0x122>
		}

		else { // add to string and check for buffer overrun
			ir_rx_buffer[ir_rx_count++] = c ;
     758:	90 91 4b 03 	lds	r25, 0x034B
     75c:	e9 2f       	mov	r30, r25
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	e1 5b       	subi	r30, 0xB1	; 177
     762:	fc 4f       	sbci	r31, 0xFC	; 252
     764:	80 83       	st	Z, r24
     766:	9f 5f       	subi	r25, 0xFF	; 255
     768:	90 93 4b 03 	sts	0x034B, r25
			if (ir_rx_count >= buffer_size) { // buffer overrun
     76c:	80 91 4b 03 	lds	r24, 0x034B
     770:	80 34       	cpi	r24, 0x40	; 64
     772:	40 f0       	brcs	.+16     	; 0x784 <__vector_16+0x122>
				ir_rx_ready = 2;
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	80 93 ee 01 	sts	0x01EE, r24
				ir_rx_buffer[buffer_size-1] = 0x00 ;
     77a:	10 92 8e 03 	sts	0x038E, r1
				ir_rx_count = buffer_size -1 ; //???
     77e:	8f e3       	ldi	r24, 0x3F	; 63
     780:	80 93 4b 03 	sts	0x034B, r24
			}
		}

	} // end if c>0
	
end  
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	bf 91       	pop	r27
     78a:	af 91       	pop	r26
     78c:	9f 91       	pop	r25
     78e:	8f 91       	pop	r24
     790:	0f 90       	pop	r0
     792:	0b be       	out	0x3b, r0	; 59
     794:	0f 90       	pop	r0
     796:	0f be       	out	0x3f, r0	; 63
     798:	0f 90       	pop	r0
     79a:	1f 90       	pop	r1
     79c:	18 95       	reti

0000079e <ir_send_packet>:
	char ir_tx_ck_sum, ir_tx_ck_sum1, ir_tx_ck_sum2 ;
	char i ;
	
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
     79e:	fb 01       	movw	r30, r22
     7a0:	01 90       	ld	r0, Z+
     7a2:	00 20       	and	r0, r0
     7a4:	e9 f7       	brne	.-6      	; 0x7a0 <ir_send_packet+0x2>
     7a6:	31 97       	sbiw	r30, 0x01	; 1
     7a8:	e6 1b       	sub	r30, r22
     7aa:	f7 0b       	sbc	r31, r23
     7ac:	40 e0       	ldi	r20, 0x00	; 0
begin
	char ir_tx_ck_sum, ir_tx_ck_sum1, ir_tx_ck_sum2 ;
	char i ;
	
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
     7ae:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0; i<strlen(ir_data); i++)
     7b0:	06 c0       	rjmp	.+12     	; 0x7be <ir_send_packet+0x20>
		ir_tx_ck_sum ^= ir_data[i] ;
     7b2:	db 01       	movw	r26, r22
     7b4:	a2 0f       	add	r26, r18
     7b6:	b3 1f       	adc	r27, r19
     7b8:	2c 91       	ld	r18, X
     7ba:	92 27       	eor	r25, r18
	char ir_tx_ck_sum, ir_tx_ck_sum1, ir_tx_ck_sum2 ;
	char i ;
	
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
     7bc:	4f 5f       	subi	r20, 0xFF	; 255
     7be:	24 2f       	mov	r18, r20
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	2e 17       	cp	r18, r30
     7c4:	3f 07       	cpc	r19, r31
     7c6:	a8 f3       	brcs	.-22     	; 0x7b2 <ir_send_packet+0x14>
	// chop the check sum into two 1/2 bytes and add a bit
	ir_tx_ck_sum1 = 0x10 + (ir_tx_ck_sum & 0x0f) ;
	ir_tx_ck_sum2 = 0x10 + ((ir_tx_ck_sum>>4) & 0x0f) ;

	// format send string
  	sprintf(ir_tx_buffer,"%c%c%s%c%c%c", 
     7c8:	1f 92       	push	r1
     7ca:	25 e2       	ldi	r18, 0x25	; 37
     7cc:	2f 93       	push	r18
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
		ir_tx_ck_sum ^= ir_data[i] ;
	// chop the check sum into two 1/2 bytes and add a bit
	ir_tx_ck_sum1 = 0x10 + (ir_tx_ck_sum & 0x0f) ;
	ir_tx_ck_sum2 = 0x10 + ((ir_tx_ck_sum>>4) & 0x0f) ;
     7ce:	29 2f       	mov	r18, r25
     7d0:	22 95       	swap	r18
     7d2:	2f 70       	andi	r18, 0x0F	; 15
     7d4:	20 5f       	subi	r18, 0xF0	; 240

	// format send string
  	sprintf(ir_tx_buffer,"%c%c%s%c%c%c", 
     7d6:	1f 92       	push	r1
     7d8:	2f 93       	push	r18
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
		ir_tx_ck_sum ^= ir_data[i] ;
	// chop the check sum into two 1/2 bytes and add a bit
	ir_tx_ck_sum1 = 0x10 + (ir_tx_ck_sum & 0x0f) ;
     7da:	9f 70       	andi	r25, 0x0F	; 15
     7dc:	90 5f       	subi	r25, 0xF0	; 240
	ir_tx_ck_sum2 = 0x10 + ((ir_tx_ck_sum>>4) & 0x0f) ;

	// format send string
  	sprintf(ir_tx_buffer,"%c%c%s%c%c%c", 
     7de:	1f 92       	push	r1
     7e0:	9f 93       	push	r25
     7e2:	7f 93       	push	r23
     7e4:	6f 93       	push	r22
     7e6:	1f 92       	push	r1
     7e8:	8f 93       	push	r24
     7ea:	1f 92       	push	r1
     7ec:	83 e2       	ldi	r24, 0x23	; 35
     7ee:	8f 93       	push	r24
     7f0:	88 e1       	ldi	r24, 0x18	; 24
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	8d ea       	ldi	r24, 0xAD	; 173
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	0e 94 da 07 	call	0xfb4	; 0xfb4 <sprintf>
		start_token, tx_id, ir_data, ir_tx_ck_sum1, ir_tx_ck_sum2, end_token );
  	ir_tx_count = 0 ;
     804:	10 92 4c 03 	sts	0x034C, r1
  	ir_tx_ready = 1 ;
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 ed 01 	sts	0x01ED, r24

	tx_send_time = time ;
     80e:	80 91 f7 02 	lds	r24, 0x02F7
     812:	90 91 f8 02 	lds	r25, 0x02F8
     816:	a0 91 f9 02 	lds	r26, 0x02F9
     81a:	b0 91 fa 02 	lds	r27, 0x02FA
     81e:	80 93 fb 02 	sts	0x02FB, r24
     822:	90 93 fc 02 	sts	0x02FC, r25
     826:	a0 93 fd 02 	sts	0x02FD, r26
     82a:	b0 93 fe 02 	sts	0x02FE, r27
	// wait 
	while (ir_tx_ready && (time < tx_send_time + ir_tx_timeout)) {};
     82e:	8d b7       	in	r24, 0x3d	; 61
     830:	9e b7       	in	r25, 0x3e	; 62
     832:	40 96       	adiw	r24, 0x10	; 16
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	9e bf       	out	0x3e, r25	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	8d bf       	out	0x3d, r24	; 61
     83e:	80 91 ed 01 	lds	r24, 0x01ED
     842:	88 23       	and	r24, r24
     844:	c9 f0       	breq	.+50     	; 0x878 <ir_send_packet+0xda>
     846:	40 91 f7 02 	lds	r20, 0x02F7
     84a:	50 91 f8 02 	lds	r21, 0x02F8
     84e:	60 91 f9 02 	lds	r22, 0x02F9
     852:	70 91 fa 02 	lds	r23, 0x02FA
     856:	80 91 fb 02 	lds	r24, 0x02FB
     85a:	90 91 fc 02 	lds	r25, 0x02FC
     85e:	a0 91 fd 02 	lds	r26, 0x02FD
     862:	b0 91 fe 02 	lds	r27, 0x02FE
     866:	8c 59       	subi	r24, 0x9C	; 156
     868:	9f 4f       	sbci	r25, 0xFF	; 255
     86a:	af 4f       	sbci	r26, 0xFF	; 255
     86c:	bf 4f       	sbci	r27, 0xFF	; 255
     86e:	48 17       	cp	r20, r24
     870:	59 07       	cpc	r21, r25
     872:	6a 07       	cpc	r22, r26
     874:	7b 07       	cpc	r23, r27
     876:	18 f3       	brcs	.-58     	; 0x83e <ir_send_packet+0xa0>
     878:	08 95       	ret

0000087a <ir_rec_packet>:
// IR Receive
// input expected transmitter id
// returns zero if payload is valid and returns payload
// 1 means no data; 2 means buffer overrun; 3 means bad tx id; 4 means bad checksum
char ir_rec_packet(char tx_id, char ir_data[])
begin
     87a:	28 2f       	mov	r18, r24
     87c:	cb 01       	movw	r24, r22
	char rx_status = 0;
	char ir_rx_ck_sum, ir_rx_ck_sum_ref;
	char i ;
	char buf_len ;

	buf_len = (char)strlen(ir_rx_buffer) ;
     87e:	ef e4       	ldi	r30, 0x4F	; 79
     880:	f3 e0       	ldi	r31, 0x03	; 3
     882:	01 90       	ld	r0, Z+
     884:	00 20       	and	r0, r0
     886:	e9 f7       	brne	.-6      	; 0x882 <ir_rec_packet+0x8>
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	ef 54       	subi	r30, 0x4F	; 79
     88c:	f3 40       	sbci	r31, 0x03	; 3
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) {rx_status = 2; return rx_status;} // buffer overrun
     88e:	30 91 ee 01 	lds	r19, 0x01EE
     892:	32 30       	cpi	r19, 0x02	; 2
     894:	09 f4       	brne	.+2      	; 0x898 <ir_rec_packet+0x1e>
     896:	3f c0       	rjmp	.+126    	; 0x916 <ir_rec_packet+0x9c>
	if (ir_rx_ready == 0) {rx_status = 1; return rx_status;} // no data -- timeout
     898:	30 91 ee 01 	lds	r19, 0x01EE
     89c:	33 23       	and	r19, r19
     89e:	09 f4       	brne	.+2      	; 0x8a2 <ir_rec_packet+0x28>
     8a0:	3e c0       	rjmp	.+124    	; 0x91e <ir_rec_packet+0xa4>
	if (ir_rx_buffer[0] != tx_id) {rx_status = 3; return rx_status;} // bad transmitter id
     8a2:	30 91 4f 03 	lds	r19, 0x034F
     8a6:	32 13       	cpse	r19, r18
     8a8:	38 c0       	rjmp	.+112    	; 0x91a <ir_rec_packet+0xa0>
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data
     8aa:	20 91 ee 01 	lds	r18, 0x01EE
     8ae:	21 30       	cpi	r18, 0x01	; 1
     8b0:	b1 f5       	brne	.+108    	; 0x91e <ir_rec_packet+0xa4>
     8b2:	71 e0       	ldi	r23, 0x01	; 1
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <ir_rec_packet+0x48>

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
     8b8:	a1 5b       	subi	r26, 0xB1	; 177
     8ba:	bc 4f       	sbci	r27, 0xFC	; 252
     8bc:	2c 91       	ld	r18, X
     8be:	62 27       	eor	r22, r18
	if (ir_rx_buffer[0] != tx_id) {rx_status = 3; return rx_status;} // bad transmitter id
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
     8c0:	7f 5f       	subi	r23, 0xFF	; 255
     8c2:	a7 2f       	mov	r26, r23
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	2e 2f       	mov	r18, r30
     8c8:	e0 34       	cpi	r30, 0x40	; 64
     8ca:	08 f0       	brcs	.+2      	; 0x8ce <ir_rec_packet+0x54>
     8cc:	2f e3       	ldi	r18, 0x3F	; 63
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	a9 01       	movw	r20, r18
     8d2:	42 50       	subi	r20, 0x02	; 2
     8d4:	51 09       	sbc	r21, r1
     8d6:	a4 17       	cp	r26, r20
     8d8:	b5 07       	cpc	r27, r21
     8da:	74 f3       	brlt	.-36     	; 0x8b8 <ir_rec_packet+0x3e>
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
     8dc:	fa 01       	movw	r30, r20
     8de:	e1 5b       	subi	r30, 0xB1	; 177
     8e0:	fc 4f       	sbci	r31, 0xFC	; 252
     8e2:	40 81       	ld	r20, Z
		 (ir_rx_buffer[buf_len-1]<<4) ;
     8e4:	d9 01       	movw	r26, r18
     8e6:	a2 5b       	subi	r26, 0xB2	; 178
     8e8:	bc 4f       	sbci	r27, 0xFC	; 252
     8ea:	2c 91       	ld	r18, X
	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
     8ec:	4f 70       	andi	r20, 0x0F	; 15
     8ee:	30 e1       	ldi	r19, 0x10	; 16
     8f0:	23 9f       	mul	r18, r19
     8f2:	40 0d       	add	r20, r0
     8f4:	11 24       	eor	r1, r1
		 (ir_rx_buffer[buf_len-1]<<4) ;

    if (ir_rx_ck_sum_ref != ir_rx_ck_sum) 
     8f6:	46 13       	cpse	r20, r22
     8f8:	14 c0       	rjmp	.+40     	; 0x922 <ir_rec_packet+0xa8>
		{rx_status = 4; return rx_status;}  // bad check sum

	// set up the valid data return stuff
	ir_rx_buffer[0] = ' '; // strip the transmit id
     8fa:	20 e2       	ldi	r18, 0x20	; 32
     8fc:	20 93 4f 03 	sts	0x034F, r18
	ir_rx_buffer[buf_len-2] = 0x00; // strip the check sum and trailer
     900:	10 82       	st	Z, r1
	ir_rx_ready = 0 ;
     902:	10 92 ee 01 	sts	0x01EE, r1
	//trim initial space using ir_rx_buffer+1
	strlcpy(ir_data, ir_rx_buffer+1, buffer_size) ; 
     906:	40 e4       	ldi	r20, 0x40	; 64
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	60 e5       	ldi	r22, 0x50	; 80
     90c:	73 e0       	ldi	r23, 0x03	; 3
     90e:	0e 94 8b 07 	call	0xf16	; 0xf16 <strlcpy>

	return rx_status ;
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	08 95       	ret

	buf_len = (char)strlen(ir_rx_buffer) ;
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) {rx_status = 2; return rx_status;} // buffer overrun
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	08 95       	ret
	if (ir_rx_ready == 0) {rx_status = 1; return rx_status;} // no data -- timeout
	if (ir_rx_buffer[0] != tx_id) {rx_status = 3; return rx_status;} // bad transmitter id
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	08 95       	ret
	buf_len = (char)strlen(ir_rx_buffer) ;
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) {rx_status = 2; return rx_status;} // buffer overrun
	if (ir_rx_ready == 0) {rx_status = 1; return rx_status;} // no data -- timeout
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	08 95       	ret
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
		 (ir_rx_buffer[buf_len-1]<<4) ;

    if (ir_rx_ck_sum_ref != ir_rx_ck_sum) 
		{rx_status = 4; return rx_status;}  // bad check sum
     922:	84 e0       	ldi	r24, 0x04	; 4
	ir_rx_ready = 0 ;
	//trim initial space using ir_rx_buffer+1
	strlcpy(ir_data, ir_rx_buffer+1, buffer_size) ; 

	return rx_status ;
end
     924:	08 95       	ret

00000926 <keyTask>:
        trtWait(SEM_IR_transmit) ;
  		//send message
        sprintf(key_ir_tx_data,"r"); //
    	// send payload from tx_id
  		ir_send_packet(tx_id, key_ir_tx_data);
		fprintf(&uart1, "K send: %s\n\r", key_ir_tx_data);
     926:	07 e2       	ldi	r16, 0x27	; 39
     928:	11 e0       	ldi	r17, 0x01	; 1
     92a:	c0 e0       	ldi	r28, 0x00	; 0
     92c:	d1 e0       	ldi	r29, 0x01	; 1
  		//signal semaphore to send

        trtSignal(SEM_IR_transmit) ;

  		KeyState = ChallengeState;
     92e:	63 e0       	ldi	r22, 0x03	; 3
     930:	d6 2e       	mov	r13, r22
  		//signal semaphore to receive
      trtWait(SEM_IR_recv) ;
  		//check if packet is valid
      if (rec_status == 0)
        begin
		KeyState = ResponseState;
     932:	74 e0       	ldi	r23, 0x04	; 4
     934:	c7 2e       	mov	r12, r23
		fprintf(&uart1, "K recv: %d%s\n\r", rec_status, key_ir_rx_data);
     936:	e4 e3       	ldi	r30, 0x34	; 52
     938:	ee 2e       	mov	r14, r30
     93a:	e1 e0       	ldi	r30, 0x01	; 1
     93c:	fe 2e       	mov	r15, r30
  
  char challenge_buffer[buffer_size] ;
  
  while(1){
  
	switch(KeyState)
     93e:	80 91 0f 01 	lds	r24, 0x010F
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	69 f0       	breq	.+26     	; 0x960 <keyTask+0x3a>
     946:	83 30       	cpi	r24, 0x03	; 3
     948:	79 f1       	breq	.+94     	; 0x9a8 <keyTask+0x82>
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	09 f0       	breq	.+2      	; 0x950 <keyTask+0x2a>
     94e:	50 c0       	rjmp	.+160    	; 0x9f0 <keyTask+0xca>
	begin
	  case IdleState:
	  	//testmode or normalmode
		if(!(PINA & 0x01) || !(PINA & 0x04)) KeyState = RequestState;
     950:	00 9b       	sbis	0x00, 0	; 0
     952:	02 c0       	rjmp	.+4      	; 0x958 <keyTask+0x32>
     954:	02 99       	sbic	0x00, 2	; 0
     956:	4c c0       	rjmp	.+152    	; 0x9f0 <keyTask+0xca>
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	80 93 0f 01 	sts	0x010F, r24
     95e:	48 c0       	rjmp	.+144    	; 0x9f0 <keyTask+0xca>
		break;
		
	  case RequestState:
  		//format 'R' to send
  		//acquire semaphore to send
        trtWait(SEM_IR_transmit) ;
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	0e 94 29 02 	call	0x452	; 0x452 <trtWait>
  		//send message
        sprintf(key_ir_tx_data,"r"); //
     966:	65 e2       	ldi	r22, 0x25	; 37
     968:	71 e0       	ldi	r23, 0x01	; 1
     96a:	85 e7       	ldi	r24, 0x75	; 117
     96c:	92 e0       	ldi	r25, 0x02	; 2
     96e:	0e 94 84 07 	call	0xf08	; 0xf08 <strcpy>
    	// send payload from tx_id
  		ir_send_packet(tx_id, key_ir_tx_data);
     972:	65 e7       	ldi	r22, 0x75	; 117
     974:	72 e0       	ldi	r23, 0x02	; 2
     976:	8b e4       	ldi	r24, 0x4B	; 75
     978:	0e 94 cf 03 	call	0x79e	; 0x79e <ir_send_packet>
		fprintf(&uart1, "K send: %s\n\r", key_ir_tx_data);
     97c:	85 e7       	ldi	r24, 0x75	; 117
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	9f 93       	push	r25
     982:	8f 93       	push	r24
     984:	1f 93       	push	r17
     986:	0f 93       	push	r16
     988:	df 93       	push	r29
     98a:	cf 93       	push	r28
     98c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fprintf>
  		//signal semaphore to send

        trtSignal(SEM_IR_transmit) ;
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	0e 94 42 02 	call	0x484	; 0x484 <trtSignal>

  		KeyState = ChallengeState;
     996:	d0 92 0f 01 	sts	0x010F, r13
		  break;
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	24 c0       	rjmp	.+72     	; 0x9f0 <keyTask+0xca>

	  case ChallengeState:
  	  //wait for semaphore to receive
      trtWait(SEM_IR_recv) ;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	0e 94 29 02 	call	0x452	; 0x452 <trtWait>
  		//receive packet
      rec_status = ir_rec_packet(tx_id, key_ir_rx_data) ;
     9ae:	6f e2       	ldi	r22, 0x2F	; 47
     9b0:	72 e0       	ldi	r23, 0x02	; 2
     9b2:	8b e4       	ldi	r24, 0x4B	; 75
     9b4:	0e 94 3d 04 	call	0x87a	; 0x87a <ir_rec_packet>
     9b8:	b8 2e       	mov	r11, r24
  		//signal semaphore to receive
      trtWait(SEM_IR_recv) ;
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	0e 94 29 02 	call	0x452	; 0x452 <trtWait>
  		//check if packet is valid
      if (rec_status == 0)
     9c0:	b1 10       	cpse	r11, r1
     9c2:	16 c0       	rjmp	.+44     	; 0x9f0 <keyTask+0xca>
        begin
		KeyState = ResponseState;
     9c4:	c0 92 0f 01 	sts	0x010F, r12
		fprintf(&uart1, "K recv: %d%s\n\r", rec_status, key_ir_rx_data);
     9c8:	8f e2       	ldi	r24, 0x2F	; 47
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	9f 93       	push	r25
     9ce:	8f 93       	push	r24
     9d0:	1f 92       	push	r1
     9d2:	1f 92       	push	r1
     9d4:	ff 92       	push	r15
     9d6:	ef 92       	push	r14
     9d8:	df 93       	push	r29
     9da:	cf 93       	push	r28
     9dc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fprintf>
     9e0:	8d b7       	in	r24, 0x3d	; 61
     9e2:	9e b7       	in	r25, 0x3e	; 62
     9e4:	08 96       	adiw	r24, 0x08	; 8
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	9e bf       	out	0x3e, r25	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	8d bf       	out	0x3d, r24	; 61
  		break;
	end

	//get current time
	//set new release time
    rel = trtCurrentTime() + SECONDS2TICKS(1);
     9f0:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     9f4:	4b 01       	movw	r8, r22
     9f6:	5c 01       	movw	r10, r24
	//set new deadline
	dead = trtCurrentTime() + SECONDS2TICKS(2);
     9f8:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     9fc:	9b 01       	movw	r18, r22
     9fe:	ac 01       	movw	r20, r24
     a00:	2e 5e       	subi	r18, 0xEE	; 238
     a02:	35 48       	sbci	r19, 0x85	; 133
     a04:	4f 4f       	sbci	r20, 0xFF	; 255
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
  		break;
	end

	//get current time
	//set new release time
    rel = trtCurrentTime() + SECONDS2TICKS(1);
     a08:	c5 01       	movw	r24, r10
     a0a:	b4 01       	movw	r22, r8
     a0c:	67 5f       	subi	r22, 0xF7	; 247
     a0e:	72 4c       	sbci	r23, 0xC2	; 194
     a10:	8f 4f       	sbci	r24, 0xFF	; 255
     a12:	9f 4f       	sbci	r25, 0xFF	; 255
	//set new deadline
	dead = trtCurrentTime() + SECONDS2TICKS(2);
	//sleep
    trtSleepUntil(rel, dead);
     a14:	0e 94 a7 02 	call	0x54e	; 0x54e <trtSleepUntil>
	}
     a18:	92 cf       	rjmp	.-220    	; 0x93e <keyTask+0x18>

00000a1a <lockTask>:
			//signal semaphore to receive
			trtSignal(SEM_IR_recv);
			if ( rec_status == 0 && lock_ir_rx_data[0] == 'r')
			  begin 
			//if (valid packet + payload 'R'){
 			  LockState = ChallengeState;
     a1a:	f3 e0       	ldi	r31, 0x03	; 3
     a1c:	9f 2e       	mov	r9, r31
		    
			  fprintf(&uart1, "L recv: %d%s\n\r", rec_status, lock_ir_rx_data);
     a1e:	a3 e4       	ldi	r26, 0x43	; 67
     a20:	ea 2e       	mov	r14, r26
     a22:	a1 e0       	ldi	r26, 0x01	; 1
     a24:	fa 2e       	mov	r15, r26
     a26:	c0 e0       	ldi	r28, 0x00	; 0
     a28:	d1 e0       	ldi	r29, 0x01	; 1
	  case ChallengeState:
    	//acquire semaphore to send
  		trtWait(SEM_IR_transmit) ;
  		//send message
  		// transmit current time
  		sprintf(lock_ir_tx_data,"%ld", trtCurrentTime()); 
     a2a:	b2 e5       	ldi	r27, 0x52	; 82
     a2c:	cb 2e       	mov	r12, r27
     a2e:	b1 e0       	ldi	r27, 0x01	; 1
     a30:	db 2e       	mov	r13, r27
     a32:	05 eb       	ldi	r16, 0xB5	; 181
     a34:	12 e0       	ldi	r17, 0x02	; 2
  		// send payload from tx_id
  		ir_send_packet(tx_id, lock_ir_tx_data);
  		fprintf(&uart1, "L send: %s\n\r", lock_ir_tx_data);
     a36:	86 e5       	ldi	r24, 0x56	; 86
     a38:	a8 2e       	mov	r10, r24
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	b8 2e       	mov	r11, r24
  		//signal semaphore to send
  		trtWait(SEM_IR_transmit);
  		
  		LockState = ResponseState;
     a3e:	94 e0       	ldi	r25, 0x04	; 4
     a40:	89 2e       	mov	r8, r25
  char rec_status = 0 ;
  //char lock_ir_rx_data[buffer_size]  ;
  
  while(1){

  switch(LockState)
     a42:	80 91 0e 01 	lds	r24, 0x010E
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	21 f0       	breq	.+8      	; 0xa52 <lockTask+0x38>
     a4a:	83 30       	cpi	r24, 0x03	; 3
     a4c:	09 f0       	breq	.+2      	; 0xa50 <lockTask+0x36>
     a4e:	57 c0       	rjmp	.+174    	; 0xafe <lockTask+0xe4>
     a50:	2d c0       	rjmp	.+90     	; 0xaac <lockTask+0x92>
	begin
	  case IdleState:
	    begin
		    //acquire semaphore to receive
			trtWait(SEM_IR_recv) ;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	0e 94 29 02 	call	0x452	; 0x452 <trtWait>
			//receive packet
			rec_status = ir_rec_packet( 'K' , lock_ir_rx_data ); 
     a58:	6f ee       	ldi	r22, 0xEF	; 239
     a5a:	71 e0       	ldi	r23, 0x01	; 1
     a5c:	8b e4       	ldi	r24, 0x4B	; 75
     a5e:	0e 94 3d 04 	call	0x87a	; 0x87a <ir_rec_packet>
     a62:	78 2e       	mov	r7, r24
			//signal semaphore to receive
			trtSignal(SEM_IR_recv);
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	0e 94 42 02 	call	0x484	; 0x484 <trtSignal>
			if ( rec_status == 0 && lock_ir_rx_data[0] == 'r')
     a6a:	71 10       	cpse	r7, r1
     a6c:	1b c0       	rjmp	.+54     	; 0xaa4 <lockTask+0x8a>
     a6e:	8f ee       	ldi	r24, 0xEF	; 239
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	20 91 ef 01 	lds	r18, 0x01EF
     a76:	22 37       	cpi	r18, 0x72	; 114
     a78:	a9 f4       	brne	.+42     	; 0xaa4 <lockTask+0x8a>
			  begin 
			//if (valid packet + payload 'R'){
 			  LockState = ChallengeState;
     a7a:	90 92 0e 01 	sts	0x010E, r9
		    
			  fprintf(&uart1, "L recv: %d%s\n\r", rec_status, lock_ir_rx_data);
     a7e:	9f 93       	push	r25
     a80:	8f 93       	push	r24
     a82:	1f 92       	push	r1
     a84:	1f 92       	push	r1
     a86:	ff 92       	push	r15
     a88:	ef 92       	push	r14
     a8a:	df 93       	push	r29
     a8c:	cf 93       	push	r28
     a8e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fprintf>
     a92:	8d b7       	in	r24, 0x3d	; 61
     a94:	9e b7       	in	r25, 0x3e	; 62
     a96:	08 96       	adiw	r24, 0x08	; 8
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	9e bf       	out	0x3e, r25	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	8d bf       	out	0x3d, r24	; 61
     aa2:	2d c0       	rjmp	.+90     	; 0xafe <lockTask+0xe4>
			  end
			else
			  begin
			  LockState = IdleState;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	80 93 0e 01 	sts	0x010E, r24
     aaa:	29 c0       	rjmp	.+82     	; 0xafe <lockTask+0xe4>
		  end
  		break;
		
	  case ChallengeState:
    	//acquire semaphore to send
  		trtWait(SEM_IR_transmit) ;
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	0e 94 29 02 	call	0x452	; 0x452 <trtWait>
  		//send message
  		// transmit current time
  		sprintf(lock_ir_tx_data,"%ld", trtCurrentTime()); 
     ab2:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	7f 93       	push	r23
     abc:	6f 93       	push	r22
     abe:	df 92       	push	r13
     ac0:	cf 92       	push	r12
     ac2:	1f 93       	push	r17
     ac4:	0f 93       	push	r16
     ac6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <sprintf>
  		// send payload from tx_id
  		ir_send_packet(tx_id, lock_ir_tx_data);
     aca:	65 eb       	ldi	r22, 0xB5	; 181
     acc:	72 e0       	ldi	r23, 0x02	; 2
     ace:	8c e4       	ldi	r24, 0x4C	; 76
     ad0:	0e 94 cf 03 	call	0x79e	; 0x79e <ir_send_packet>
  		fprintf(&uart1, "L send: %s\n\r", lock_ir_tx_data);
     ad4:	1f 93       	push	r17
     ad6:	0f 93       	push	r16
     ad8:	bf 92       	push	r11
     ada:	af 92       	push	r10
     adc:	df 93       	push	r29
     ade:	cf 93       	push	r28
     ae0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fprintf>
  		//signal semaphore to send
  		trtWait(SEM_IR_transmit);
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	0e 94 29 02 	call	0x452	; 0x452 <trtWait>
  		
  		LockState = ResponseState;
     aea:	80 92 0e 01 	sts	0x010E, r8
  		//timeout counter starts
      //timeout = trtCurrentTime();
  		break;
     aee:	8d b7       	in	r24, 0x3d	; 61
     af0:	9e b7       	in	r25, 0x3e	; 62
     af2:	0e 96       	adiw	r24, 0x0e	; 14
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	9e bf       	out	0x3e, r25	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	8d bf       	out	0x3d, r24	; 61
  		break;
	end
	
	//get current time
	//set new release time
    rel = trtCurrentTime() + SECONDS2TICKS(1);
     afe:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     b02:	2b 01       	movw	r4, r22
     b04:	3c 01       	movw	r6, r24
	//set new deadline
	dead = trtCurrentTime() + SECONDS2TICKS(2);
     b06:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     b0a:	9b 01       	movw	r18, r22
     b0c:	ac 01       	movw	r20, r24
     b0e:	2e 5e       	subi	r18, 0xEE	; 238
     b10:	35 48       	sbci	r19, 0x85	; 133
     b12:	4f 4f       	sbci	r20, 0xFF	; 255
     b14:	5f 4f       	sbci	r21, 0xFF	; 255
  		break;
	end
	
	//get current time
	//set new release time
    rel = trtCurrentTime() + SECONDS2TICKS(1);
     b16:	c3 01       	movw	r24, r6
     b18:	b2 01       	movw	r22, r4
     b1a:	67 5f       	subi	r22, 0xF7	; 247
     b1c:	72 4c       	sbci	r23, 0xC2	; 194
     b1e:	8f 4f       	sbci	r24, 0xFF	; 255
     b20:	9f 4f       	sbci	r25, 0xFF	; 255
	//set new deadline
	dead = trtCurrentTime() + SECONDS2TICKS(2);
	//sleep
    trtSleepUntil(rel, dead);
     b22:	0e 94 a7 02 	call	0x54e	; 0x54e <trtSleepUntil>
  }
     b26:	8d cf       	rjmp	.-230    	; 0xa42 <lockTask+0x28>

00000b28 <ir_rec_any_packet>:
// IR Receive ANY transmitter
// 
// returns tx_id (>0x30) if payload is valid and returns payload
// return==1 means no data; 2 means buffer overrun; 4 means bad checksum
char ir_rec_any_packet(char ir_data[])
begin
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
	char rx_status = 0;
	char ir_rx_ck_sum, ir_rx_ck_sum_ref;
	char i ;
	char buf_len ;

	buf_len = (char)strlen(ir_rx_buffer) ;
     b2c:	ef e4       	ldi	r30, 0x4F	; 79
     b2e:	f3 e0       	ldi	r31, 0x03	; 3
     b30:	01 90       	ld	r0, Z+
     b32:	00 20       	and	r0, r0
     b34:	e9 f7       	brne	.-6      	; 0xb30 <ir_rec_any_packet+0x8>
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	ef 54       	subi	r30, 0x4F	; 79
     b3a:	f3 40       	sbci	r31, 0x03	; 3
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) return 2 ; // buffer overrun
     b3c:	20 91 ee 01 	lds	r18, 0x01EE
     b40:	22 30       	cpi	r18, 0x02	; 2
     b42:	e1 f1       	breq	.+120    	; 0xbbc <ir_rec_any_packet+0x94>
	if (ir_rx_ready == 0) return 1 ; // no data -- timeout
     b44:	20 91 ee 01 	lds	r18, 0x01EE
     b48:	22 23       	and	r18, r18
     b4a:	d1 f1       	breq	.+116    	; 0xbc0 <ir_rec_any_packet+0x98>
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data
     b4c:	20 91 ee 01 	lds	r18, 0x01EE
     b50:	21 30       	cpi	r18, 0x01	; 1
     b52:	b1 f5       	brne	.+108    	; 0xbc0 <ir_rec_any_packet+0x98>
     b54:	f1 e0       	ldi	r31, 0x01	; 1
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	06 c0       	rjmp	.+12     	; 0xb66 <ir_rec_any_packet+0x3e>
	// if (ir_rx_buffer[0] != tx_id) return 3 ; // bad transmitter id

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
     b5a:	eb 01       	movw	r28, r22
     b5c:	c1 5b       	subi	r28, 0xB1	; 177
     b5e:	dc 4f       	sbci	r29, 0xFC	; 252
     b60:	28 81       	ld	r18, Y
     b62:	a2 27       	eor	r26, r18
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data
	// if (ir_rx_buffer[0] != tx_id) return 3 ; // bad transmitter id

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
     b64:	ff 5f       	subi	r31, 0xFF	; 255
     b66:	6f 2f       	mov	r22, r31
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	2e 2f       	mov	r18, r30
     b6c:	e0 34       	cpi	r30, 0x40	; 64
     b6e:	08 f0       	brcs	.+2      	; 0xb72 <ir_rec_any_packet+0x4a>
     b70:	2f e3       	ldi	r18, 0x3F	; 63
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	a9 01       	movw	r20, r18
     b76:	42 50       	subi	r20, 0x02	; 2
     b78:	51 09       	sbc	r21, r1
     b7a:	64 17       	cp	r22, r20
     b7c:	75 07       	cpc	r23, r21
     b7e:	6c f3       	brlt	.-38     	; 0xb5a <ir_rec_any_packet+0x32>
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
     b80:	fa 01       	movw	r30, r20
     b82:	e1 5b       	subi	r30, 0xB1	; 177
     b84:	fc 4f       	sbci	r31, 0xFC	; 252
     b86:	40 81       	ld	r20, Z
		 (ir_rx_buffer[buf_len-1]<<4) ;
     b88:	e9 01       	movw	r28, r18
     b8a:	c2 5b       	subi	r28, 0xB2	; 178
     b8c:	dc 4f       	sbci	r29, 0xFC	; 252
     b8e:	28 81       	ld	r18, Y
	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
     b90:	4f 70       	andi	r20, 0x0F	; 15
     b92:	30 e1       	ldi	r19, 0x10	; 16
     b94:	23 9f       	mul	r18, r19
     b96:	40 0d       	add	r20, r0
     b98:	11 24       	eor	r1, r1
		 (ir_rx_buffer[buf_len-1]<<4) ;

	if (ir_rx_ck_sum_ref != ir_rx_ck_sum) return 4 ; // bad check sum
     b9a:	4a 13       	cpse	r20, r26
     b9c:	13 c0       	rjmp	.+38     	; 0xbc4 <ir_rec_any_packet+0x9c>

	// set up the valid return stuff
	// if no errors, then return transmitter ID
	if (rx_status == 0) rx_status = ir_rx_buffer[0] ;
     b9e:	c0 91 4f 03 	lds	r28, 0x034F
	ir_rx_buffer[0] = ' '; // strip the transmit id from string
     ba2:	20 e2       	ldi	r18, 0x20	; 32
     ba4:	20 93 4f 03 	sts	0x034F, r18
	ir_rx_buffer[buf_len-2] = 0x00; // strip the check sum and trailer
     ba8:	10 82       	st	Z, r1
	ir_rx_ready = 0 ;
     baa:	10 92 ee 01 	sts	0x01EE, r1
	//trim initial space using ir_rx_buffer+1
	strlcpy(ir_data, ir_rx_buffer+1, buffer_size) ;
     bae:	40 e4       	ldi	r20, 0x40	; 64
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	60 e5       	ldi	r22, 0x50	; 80
     bb4:	73 e0       	ldi	r23, 0x03	; 3
     bb6:	0e 94 8b 07 	call	0xf16	; 0xf16 <strlcpy>

	return rx_status ;
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <ir_rec_any_packet+0x9e>

	buf_len = (char)strlen(ir_rx_buffer) ;
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) return 2 ; // buffer overrun
     bbc:	c2 e0       	ldi	r28, 0x02	; 2
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <ir_rec_any_packet+0x9e>
	if (ir_rx_ready == 0) return 1 ; // no data -- timeout
     bc0:	c1 e0       	ldi	r28, 0x01	; 1
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <ir_rec_any_packet+0x9e>
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
		 (ir_rx_buffer[buf_len-1]<<4) ;

	if (ir_rx_ck_sum_ref != ir_rx_ck_sum) return 4 ; // bad check sum
     bc4:	c4 e0       	ldi	r28, 0x04	; 4
	ir_rx_ready = 0 ;
	//trim initial space using ir_rx_buffer+1
	strlcpy(ir_data, ir_rx_buffer+1, buffer_size) ;

	return rx_status ;
end
     bc6:	8c 2f       	mov	r24, r28
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <byte_to_binary>:
  end

end  
  
const char *byte_to_binary(int x)
{
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	7c 01       	movw	r14, r24
    static char b[9];
    b[0] = '\0';
     bdc:	10 92 9c 01 	sts	0x019C, r1
     be0:	08 e0       	ldi	r16, 0x08	; 8
     be2:	10 e0       	ldi	r17, 0x00	; 0

    int z;
    for (z = 128; z > 0; z >>= 1)
     be4:	c0 e8       	ldi	r28, 0x80	; 128
     be6:	d0 e0       	ldi	r29, 0x00	; 0
    {
        strcat(b, ((x & z) == z) ? "1" : "0");
     be8:	ce 01       	movw	r24, r28
     bea:	8e 21       	and	r24, r14
     bec:	9f 21       	and	r25, r15
     bee:	8c 17       	cp	r24, r28
     bf0:	9d 07       	cpc	r25, r29
     bf2:	19 f4       	brne	.+6      	; 0xbfa <byte_to_binary+0x2c>
     bf4:	63 e6       	ldi	r22, 0x63	; 99
     bf6:	71 e0       	ldi	r23, 0x01	; 1
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <byte_to_binary+0x30>
     bfa:	65 e6       	ldi	r22, 0x65	; 101
     bfc:	71 e0       	ldi	r23, 0x01	; 1
     bfe:	8c e9       	ldi	r24, 0x9C	; 156
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 79 07 	call	0xef2	; 0xef2 <strcat>
{
    static char b[9];
    b[0] = '\0';

    int z;
    for (z = 128; z > 0; z >>= 1)
     c06:	d5 95       	asr	r29
     c08:	c7 95       	ror	r28
     c0a:	01 50       	subi	r16, 0x01	; 1
     c0c:	11 09       	sbc	r17, r1
     c0e:	61 f7       	brne	.-40     	; 0xbe8 <byte_to_binary+0x1a>
    {
        strcat(b, ((x & z) == z) ? "1" : "0");
    }

    return b;
}
     c10:	8c e9       	ldi	r24, 0x9C	; 156
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	08 95       	ret

00000c22 <send_task>:
end

//**********************************************************          
// send something
void send_task(void) 
begin  
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	c0 54       	subi	r28, 0x40	; 64
     c2c:	d1 09       	sbc	r29, r1
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
	uint32_t rel, dead;

	while(1)
	begin
	// transmit
	sprintf(ir_tx_data,"%ld, %d, %d", time, task_count, error_count); //
     c38:	37 e6       	ldi	r19, 0x67	; 103
     c3a:	e3 2e       	mov	r14, r19
     c3c:	31 e0       	ldi	r19, 0x01	; 1
     c3e:	f3 2e       	mov	r15, r19
     c40:	8e 01       	movw	r16, r28
     c42:	0f 5f       	subi	r16, 0xFF	; 255
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	80 91 f7 02 	lds	r24, 0x02F7
     c4a:	90 91 f8 02 	lds	r25, 0x02F8
     c4e:	a0 91 f9 02 	lds	r26, 0x02F9
     c52:	b0 91 fa 02 	lds	r27, 0x02FA
     c56:	20 91 70 02 	lds	r18, 0x0270
     c5a:	2f 93       	push	r18
     c5c:	20 91 6f 02 	lds	r18, 0x026F
     c60:	2f 93       	push	r18
     c62:	20 91 4a 03 	lds	r18, 0x034A
     c66:	2f 93       	push	r18
     c68:	20 91 49 03 	lds	r18, 0x0349
     c6c:	2f 93       	push	r18
     c6e:	bf 93       	push	r27
     c70:	af 93       	push	r26
     c72:	9f 93       	push	r25
     c74:	8f 93       	push	r24
     c76:	ff 92       	push	r15
     c78:	ef 92       	push	r14
     c7a:	1f 93       	push	r17
     c7c:	0f 93       	push	r16
     c7e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <sprintf>
	// send payload from tx_id
	ir_send_packet(tx_id, ir_tx_data);
     c82:	b8 01       	movw	r22, r16
     c84:	84 e5       	ldi	r24, 0x54	; 84
     c86:	0e 94 cf 03 	call	0x79e	; 0x79e <ir_send_packet>

	rel = trtCurrentTime() + SECONDS2TICKS(0.1);
     c8a:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     c8e:	4b 01       	movw	r8, r22
     c90:	5c 01       	movw	r10, r24
	//set new deadline
	dead = trtCurrentTime() + SECONDS2TICKS(0.2);
     c92:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     c96:	9b 01       	movw	r18, r22
     c98:	ac 01       	movw	r20, r24
     c9a:	2b 5c       	subi	r18, 0xCB	; 203
     c9c:	33 4f       	sbci	r19, 0xF3	; 243
     c9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
	// transmit
	sprintf(ir_tx_data,"%ld, %d, %d", time, task_count, error_count); //
	// send payload from tx_id
	ir_send_packet(tx_id, ir_tx_data);

	rel = trtCurrentTime() + SECONDS2TICKS(0.1);
     ca2:	c5 01       	movw	r24, r10
     ca4:	b4 01       	movw	r22, r8
     ca6:	66 5e       	subi	r22, 0xE6	; 230
     ca8:	79 4f       	sbci	r23, 0xF9	; 249
     caa:	8f 4f       	sbci	r24, 0xFF	; 255
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
	//set new deadline
	dead = trtCurrentTime() + SECONDS2TICKS(0.2);
	//sleep
    trtSleepUntil(rel, dead);	  
     cae:	0e 94 a7 02 	call	0x54e	; 0x54e <trtSleepUntil>
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	c4 cf       	rjmp	.-120    	; 0xc46 <send_task+0x24>

00000cbe <recv_task>:
end  	

//**********************************************************          
// receive it back
void recv_task(void) 
begin  
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	c0 54       	subi	r28, 0x40	; 64
     cc8:	d1 09       	sbc	r29, r1
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
	uint32_t rel, dead;

	while(1)
	  begin
	  // receive
	  rx_status = ir_rec_packet(rx_id, ir_rx_data) ;
     cd4:	8e 01       	movw	r16, r28
     cd6:	0f 5f       	subi	r16, 0xFF	; 255
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
	  if (!rx_status) {
		//ir_rx_data[6] = 0;
		fprintf(&uart1, "PAYLOAD=%s\n\r", ir_rx_data);
	  }
	  else {
		fprintf(&uart1, "%d%s\n\r", rx_status, ir_rx_data);
     cda:	4c e3       	ldi	r20, 0x3C	; 60
     cdc:	c4 2e       	mov	r12, r20
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	d4 2e       	mov	r13, r20
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	e5 2e       	mov	r14, r21
     ce6:	51 e0       	ldi	r21, 0x01	; 1
     ce8:	f5 2e       	mov	r15, r21
	  begin
	  // receive
	  rx_status = ir_rec_packet(rx_id, ir_rx_data) ;
	  if (!rx_status) {
		//ir_rx_data[6] = 0;
		fprintf(&uart1, "PAYLOAD=%s\n\r", ir_rx_data);
     cea:	63 e7       	ldi	r22, 0x73	; 115
     cec:	a6 2e       	mov	r10, r22
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	b6 2e       	mov	r11, r22
	uint32_t rel, dead;

	while(1)
	  begin
	  // receive
	  rx_status = ir_rec_packet(rx_id, ir_rx_data) ;
     cf2:	b8 01       	movw	r22, r16
     cf4:	84 e5       	ldi	r24, 0x54	; 84
     cf6:	0e 94 3d 04 	call	0x87a	; 0x87a <ir_rec_packet>
	  if (!rx_status) {
     cfa:	81 11       	cpse	r24, r1
     cfc:	0f c0       	rjmp	.+30     	; 0xd1c <recv_task+0x5e>
		//ir_rx_data[6] = 0;
		fprintf(&uart1, "PAYLOAD=%s\n\r", ir_rx_data);
     cfe:	1f 93       	push	r17
     d00:	0f 93       	push	r16
     d02:	bf 92       	push	r11
     d04:	af 92       	push	r10
     d06:	ff 92       	push	r15
     d08:	ef 92       	push	r14
     d0a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fprintf>
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	18 c0       	rjmp	.+48     	; 0xd4c <recv_task+0x8e>
	  }
	  else {
		fprintf(&uart1, "%d%s\n\r", rx_status, ir_rx_data);
     d1c:	1f 93       	push	r17
     d1e:	0f 93       	push	r16
     d20:	1f 92       	push	r1
     d22:	8f 93       	push	r24
     d24:	df 92       	push	r13
     d26:	cf 92       	push	r12
     d28:	ff 92       	push	r15
     d2a:	ef 92       	push	r14
     d2c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fprintf>
		error_count++ ;
     d30:	80 91 6f 02 	lds	r24, 0x026F
     d34:	90 91 70 02 	lds	r25, 0x0270
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	90 93 70 02 	sts	0x0270, r25
     d3e:	80 93 6f 02 	sts	0x026F, r24
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
	  }
	  task_count++;
     d4c:	80 91 49 03 	lds	r24, 0x0349
     d50:	90 91 4a 03 	lds	r25, 0x034A
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	90 93 4a 03 	sts	0x034A, r25
     d5a:	80 93 49 03 	sts	0x0349, r24
	  
	  rel = trtCurrentTime() + SECONDS2TICKS(0.1);
     d5e:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     d62:	2b 01       	movw	r4, r22
     d64:	3c 01       	movw	r6, r24
	  //set new deadline
	  dead = trtCurrentTime() + SECONDS2TICKS(0.2);
     d66:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     d6a:	9b 01       	movw	r18, r22
     d6c:	ac 01       	movw	r20, r24
     d6e:	2b 5c       	subi	r18, 0xCB	; 203
     d70:	33 4f       	sbci	r19, 0xF3	; 243
     d72:	4f 4f       	sbci	r20, 0xFF	; 255
     d74:	5f 4f       	sbci	r21, 0xFF	; 255
		fprintf(&uart1, "%d%s\n\r", rx_status, ir_rx_data);
		error_count++ ;
	  }
	  task_count++;
	  
	  rel = trtCurrentTime() + SECONDS2TICKS(0.1);
     d76:	c3 01       	movw	r24, r6
     d78:	b2 01       	movw	r22, r4
     d7a:	66 5e       	subi	r22, 0xE6	; 230
     d7c:	79 4f       	sbci	r23, 0xF9	; 249
     d7e:	8f 4f       	sbci	r24, 0xFF	; 255
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
	  //set new deadline
	  dead = trtCurrentTime() + SECONDS2TICKS(0.2);
	  //sleep
      trtSleepUntil(rel, dead);	  
     d82:	0e 94 a7 02 	call	0x54e	; 0x54e <trtSleepUntil>

	  end
     d86:	b5 cf       	rjmp	.-150    	; 0xcf2 <recv_task+0x34>

00000d88 <recv_any_task>:


//**********************************************************          
// receive it back
void recv_any_task(void) 
begin  
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	c0 54       	subi	r28, 0x40	; 64
     d92:	d1 09       	sbc	r29, r1
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
	uint32_t rel, dead;

	while(1)
	begin
	// receive
	rx_status = ir_rec_any_packet(ir_rx_data) ;
     d9e:	ce 01       	movw	r24, r28
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	0e 94 94 05 	call	0xb28	; 0xb28 <ir_rec_any_packet>
	if (rx_status>=0x30) {
     da6:	80 33       	cpi	r24, 0x30	; 48
     da8:	48 f4       	brcc	.+18     	; 0xdbc <recv_any_task+0x34>
		//fprintf(&uart1, "TX_ID=%c\n\r", rx_status); // transmitter number
		//fprintf(&uart1, "PAYLOAD=%s\n\r", ir_rx_data);// payload
	}
	else {
		//fprintf(&uart1, "%d%s\n\r", rx_status, ir_rx_data);
		error_count++ ;
     daa:	80 91 6f 02 	lds	r24, 0x026F
     dae:	90 91 70 02 	lds	r25, 0x0270
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	90 93 70 02 	sts	0x0270, r25
     db8:	80 93 6f 02 	sts	0x026F, r24
	}
	task_count++;
     dbc:	80 91 49 03 	lds	r24, 0x0349
     dc0:	90 91 4a 03 	lds	r25, 0x034A
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	90 93 4a 03 	sts	0x034A, r25
     dca:	80 93 49 03 	sts	0x0349, r24

	rel = trtCurrentTime() + SECONDS2TICKS(0.1);
     dce:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     dd2:	6b 01       	movw	r12, r22
     dd4:	7c 01       	movw	r14, r24
	//set new deadline
	dead = trtCurrentTime() + SECONDS2TICKS(0.2);
     dd6:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     dda:	9b 01       	movw	r18, r22
     ddc:	ac 01       	movw	r20, r24
     dde:	2b 5c       	subi	r18, 0xCB	; 203
     de0:	33 4f       	sbci	r19, 0xF3	; 243
     de2:	4f 4f       	sbci	r20, 0xFF	; 255
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
		//fprintf(&uart1, "%d%s\n\r", rx_status, ir_rx_data);
		error_count++ ;
	}
	task_count++;

	rel = trtCurrentTime() + SECONDS2TICKS(0.1);
     de6:	c7 01       	movw	r24, r14
     de8:	b6 01       	movw	r22, r12
     dea:	66 5e       	subi	r22, 0xE6	; 230
     dec:	79 4f       	sbci	r23, 0xF9	; 249
     dee:	8f 4f       	sbci	r24, 0xFF	; 255
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
	//set new deadline
	dead = trtCurrentTime() + SECONDS2TICKS(0.2);
	//sleep
    trtSleepUntil(rel, dead);
     df2:	0e 94 a7 02 	call	0x54e	; 0x54e <trtSleepUntil>

	end
     df6:	d3 cf       	rjmp	.-90     	; 0xd9e <recv_any_task+0x16>

00000df8 <initialize>:
//Set it all up
void initialize(void)
begin
  //********************    
  //set up timer 0 for 1 mSec timebase 
  TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	80 93 6e 00 	sts	0x006E, r24
  OCR0A = 249 ;//
     dfe:	99 ef       	ldi	r25, 0xF9	; 249
     e00:	97 bd       	out	0x27, r25	; 39
  //set prescalar to divide by 64 (4 microsec/tick)
  TCCR0B= 3; //;	
     e02:	93 e0       	ldi	r25, 0x03	; 3
     e04:	95 bd       	out	0x25, r25	; 37
  // turn on clear-on-match
  TCCR0A= (1<<WGM01) ;
     e06:	84 bd       	out	0x24, r24	; 36
  // IR carrier generator
  // set up timer 2 for square wave with NO ISR
  // 56000 Hz => 1/2 cycle 8.928 microsec = 143 cycles
  // Connect D7 thru resistor to (+)IR_LED(-) to TXD:: D7--/\/\--|>|----TXD
  //
  OCR2A = 142 ; //143 cycles/half-period
     e08:	8e e8       	ldi	r24, 0x8E	; 142
     e0a:	80 93 b3 00 	sts	0x00B3, r24
  //  count at full rate
  TCCR2B =  1;	
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	80 93 b1 00 	sts	0x00B1, r24
  // set to toggle OC2A, clear on match,
  TCCR2A = (1<<COM2A0) | (1<<WGM21) ;
     e14:	82 e4       	ldi	r24, 0x42	; 66
     e16:	80 93 b0 00 	sts	0x00B0, r24
  // PORT D.7 is OC2A
  DDRD = (1<<PIND7) ;	
     e1a:	80 e8       	ldi	r24, 0x80	; 128
     e1c:	8a b9       	out	0x0a, r24	; 10
  //********************


  //PORT A for leds
  DDRB = 0x11;
     e1e:	81 e1       	ldi	r24, 0x11	; 17
     e20:	84 b9       	out	0x04, r24	; 4
  //PORT B for inputs 
  DDRA = 0x00;
     e22:	11 b8       	out	0x01, r1	; 1
  PORTA = 0xff;  
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	82 b9       	out	0x02, r24	; 2


  //init UART0 for IR comm
  UBRR0L = (F_CPU / (16UL * IR_UART_BAUD)) - 1;
     e28:	8f ec       	ldi	r24, 0xCF	; 207
     e2a:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     e2e:	88 e1       	ldi	r24, 0x18	; 24
     e30:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1<<UCSZ01) | (1<<USBS0) ; // 7 bit | 2 stop bits
     e34:	8c e0       	ldi	r24, 0x0C	; 12
     e36:	80 93 c2 00 	sts	0x00C2, r24

  //init UART1 for PC comm
  UBRR1L = (F_CPU / (16UL * PC_UART_BAUD)) - 1;
     e3a:	87 e6       	ldi	r24, 0x67	; 103
     e3c:	80 93 cc 00 	sts	0x00CC, r24
  UCSR1B = _BV(TXEN1) ; //| _BV(RXEN1); /* tx/rx enable */
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	80 93 c9 00 	sts	0x00C9, r24
  fprintf(&uart1,"\n\r...Starting IR comm ...\n\r");
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	71 e0       	ldi	r23, 0x01	; 1
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 af 07 	call	0xf5e	; 0xf5e <fputs>
  
  //********************
  //crank up the ISRs
  sei();
     e52:	78 94       	sei
     e54:	08 95       	ret

00000e56 <main>:

//**********************************************************       
//Entry point and task scheduler loop
int main(void)
begin  
  initialize();
     e56:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <initialize>
  
  //stdout = stdin = stderr = &uart_str;
  //fprintf(stdout,"\n\r TRT 09feb09\n\r\n\r");

  // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
     e5a:	80 e5       	ldi	r24, 0x50	; 80
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 93 01 	call	0x326	; 0x326 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     e62:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	80 93 38 03 	sts	0x0338, r24
  
  sei(); // set enabled interrupts;
     e6a:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     e6c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     e6e:	80 93 39 03 	sts	0x0339, r24
  
  sei(); // set enabled interrupts;
     e72:	78 94       	sei
  //trtCreateSemaphore(SEM_TX_WAIT, 1) ; // message send interlock
  //trtCreateSemaphore(SEM_RX_WAIT, 0) ; // message receive interlock

 // --- creat tasks  ----------------
    //trtCreateTask(send_task, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.3), &(args[0]));
    trtCreateTask(blink_led, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.3), &(args[0]));
     e74:	75 ea       	ldi	r23, 0xA5	; 165
     e76:	c7 2e       	mov	r12, r23
     e78:	71 e0       	ldi	r23, 0x01	; 1
     e7a:	d7 2e       	mov	r13, r23
     e7c:	1f e4       	ldi	r17, 0x4F	; 79
     e7e:	e1 2e       	mov	r14, r17
     e80:	12 e1       	ldi	r17, 0x12	; 18
     e82:	f1 2e       	mov	r15, r17
     e84:	00 e0       	ldi	r16, 0x00	; 0
     e86:	10 e0       	ldi	r17, 0x00	; 0
     e88:	2a e1       	ldi	r18, 0x1A	; 26
     e8a:	36 e0       	ldi	r19, 0x06	; 6
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	68 ee       	ldi	r22, 0xE8	; 232
     e92:	73 e0       	ldi	r23, 0x03	; 3
     e94:	8c eb       	ldi	r24, 0xBC	; 188
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <trtCreateTask>
	//trtCreateTask(recv_any_task, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.2), &(args[1]));
	trtCreateTask(keyTask, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.3), &(args[0]));
     e9c:	2a e1       	ldi	r18, 0x1A	; 26
     e9e:	36 e0       	ldi	r19, 0x06	; 6
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	68 ee       	ldi	r22, 0xE8	; 232
     ea6:	73 e0       	ldi	r23, 0x03	; 3
     ea8:	83 e9       	ldi	r24, 0x93	; 147
     eaa:	94 e0       	ldi	r25, 0x04	; 4
     eac:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <trtCreateTask>
    trtCreateTask(lockTask, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.3), &(args[0]));
     eb0:	2a e1       	ldi	r18, 0x1A	; 26
     eb2:	36 e0       	ldi	r19, 0x06	; 6
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	68 ee       	ldi	r22, 0xE8	; 232
     eba:	73 e0       	ldi	r23, 0x03	; 3
     ebc:	8d e0       	ldi	r24, 0x0D	; 13
     ebe:	95 e0       	ldi	r25, 0x05	; 5
     ec0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <trtCreateTask>

  // main task scheduler loop 
  while(1)
  begin 
	_delay_ms(500);
	PORTB ^= 0x01;
     ec4:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ec6:	2f e9       	ldi	r18, 0x9F	; 159
     ec8:	36 e8       	ldi	r19, 0x86	; 134
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	21 50       	subi	r18, 0x01	; 1
     ece:	30 40       	sbci	r19, 0x00	; 0
     ed0:	80 40       	sbci	r24, 0x00	; 0
     ed2:	e1 f7       	brne	.-8      	; 0xecc <main+0x76>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <main+0x80>
     ed6:	00 00       	nop
     ed8:	85 b1       	in	r24, 0x05	; 5
     eda:	89 27       	eor	r24, r25
     edc:	85 b9       	out	0x05, r24	; 5
     ede:	2f e9       	ldi	r18, 0x9F	; 159
     ee0:	36 e8       	ldi	r19, 0x86	; 134
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	21 50       	subi	r18, 0x01	; 1
     ee6:	30 40       	sbci	r19, 0x00	; 0
     ee8:	80 40       	sbci	r24, 0x00	; 0
     eea:	e1 f7       	brne	.-8      	; 0xee4 <main+0x8e>
     eec:	00 c0       	rjmp	.+0      	; 0xeee <main+0x98>
     eee:	00 00       	nop
     ef0:	ea cf       	rjmp	.-44     	; 0xec6 <main+0x70>

00000ef2 <strcat>:
     ef2:	fb 01       	movw	r30, r22
     ef4:	dc 01       	movw	r26, r24
     ef6:	0d 90       	ld	r0, X+
     ef8:	00 20       	and	r0, r0
     efa:	e9 f7       	brne	.-6      	; 0xef6 <strcat+0x4>
     efc:	11 97       	sbiw	r26, 0x01	; 1
     efe:	01 90       	ld	r0, Z+
     f00:	0d 92       	st	X+, r0
     f02:	00 20       	and	r0, r0
     f04:	e1 f7       	brne	.-8      	; 0xefe <strcat+0xc>
     f06:	08 95       	ret

00000f08 <strcpy>:
     f08:	fb 01       	movw	r30, r22
     f0a:	dc 01       	movw	r26, r24
     f0c:	01 90       	ld	r0, Z+
     f0e:	0d 92       	st	X+, r0
     f10:	00 20       	and	r0, r0
     f12:	e1 f7       	brne	.-8      	; 0xf0c <strcpy+0x4>
     f14:	08 95       	ret

00000f16 <strlcpy>:
     f16:	dc 01       	movw	r26, r24
     f18:	fb 01       	movw	r30, r22
     f1a:	41 50       	subi	r20, 0x01	; 1
     f1c:	50 40       	sbci	r21, 0x00	; 0
     f1e:	58 f0       	brcs	.+22     	; 0xf36 <strlcpy+0x20>
     f20:	49 f0       	breq	.+18     	; 0xf34 <strlcpy+0x1e>
     f22:	01 90       	ld	r0, Z+
     f24:	0d 92       	st	X+, r0
     f26:	00 20       	and	r0, r0
     f28:	c1 f7       	brne	.-16     	; 0xf1a <strlcpy+0x4>
     f2a:	e6 1b       	sub	r30, r22
     f2c:	f7 0b       	sbc	r31, r23
     f2e:	31 97       	sbiw	r30, 0x01	; 1
     f30:	cf 01       	movw	r24, r30
     f32:	08 95       	ret
     f34:	1c 92       	st	X, r1
     f36:	01 90       	ld	r0, Z+
     f38:	00 20       	and	r0, r0
     f3a:	e9 f7       	brne	.-6      	; 0xf36 <strlcpy+0x20>
     f3c:	f6 cf       	rjmp	.-20     	; 0xf2a <strlcpy+0x14>

00000f3e <fprintf>:
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	ce 01       	movw	r24, r28
     f48:	09 96       	adiw	r24, 0x09	; 9
     f4a:	ac 01       	movw	r20, r24
     f4c:	6f 81       	ldd	r22, Y+7	; 0x07
     f4e:	78 85       	ldd	r23, Y+8	; 0x08
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	0e 94 09 08 	call	0x1012	; 0x1012 <vfprintf>
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <fputs>:
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	7c 01       	movw	r14, r24
     f6c:	8b 01       	movw	r16, r22
     f6e:	db 01       	movw	r26, r22
     f70:	13 96       	adiw	r26, 0x03	; 3
     f72:	8c 91       	ld	r24, X
     f74:	81 ff       	sbrs	r24, 1
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <fputs+0x42>
     f78:	c0 e0       	ldi	r28, 0x00	; 0
     f7a:	d0 e0       	ldi	r29, 0x00	; 0
     f7c:	0b c0       	rjmp	.+22     	; 0xf94 <fputs+0x36>
     f7e:	d8 01       	movw	r26, r16
     f80:	18 96       	adiw	r26, 0x08	; 8
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
     f86:	19 97       	sbiw	r26, 0x09	; 9
     f88:	b8 01       	movw	r22, r16
     f8a:	09 95       	icall
     f8c:	89 2b       	or	r24, r25
     f8e:	11 f0       	breq	.+4      	; 0xf94 <fputs+0x36>
     f90:	cf ef       	ldi	r28, 0xFF	; 255
     f92:	df ef       	ldi	r29, 0xFF	; 255
     f94:	f7 01       	movw	r30, r14
     f96:	81 91       	ld	r24, Z+
     f98:	7f 01       	movw	r14, r30
     f9a:	81 11       	cpse	r24, r1
     f9c:	f0 cf       	rjmp	.-32     	; 0xf7e <fputs+0x20>
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <fputs+0x46>
     fa0:	cf ef       	ldi	r28, 0xFF	; 255
     fa2:	df ef       	ldi	r29, 0xFF	; 255
     fa4:	ce 01       	movw	r24, r28
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	08 95       	ret

00000fb4 <sprintf>:
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	2e 97       	sbiw	r28, 0x0e	; 14
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	0d 89       	ldd	r16, Y+21	; 0x15
     fce:	1e 89       	ldd	r17, Y+22	; 0x16
     fd0:	86 e0       	ldi	r24, 0x06	; 6
     fd2:	8c 83       	std	Y+4, r24	; 0x04
     fd4:	1a 83       	std	Y+2, r17	; 0x02
     fd6:	09 83       	std	Y+1, r16	; 0x01
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	9f e7       	ldi	r25, 0x7F	; 127
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	ce 01       	movw	r24, r28
     fe2:	49 96       	adiw	r24, 0x19	; 25
     fe4:	ac 01       	movw	r20, r24
     fe6:	6f 89       	ldd	r22, Y+23	; 0x17
     fe8:	78 8d       	ldd	r23, Y+24	; 0x18
     fea:	ce 01       	movw	r24, r28
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	0e 94 09 08 	call	0x1012	; 0x1012 <vfprintf>
     ff2:	ef 81       	ldd	r30, Y+7	; 0x07
     ff4:	f8 85       	ldd	r31, Y+8	; 0x08
     ff6:	e0 0f       	add	r30, r16
     ff8:	f1 1f       	adc	r31, r17
     ffa:	10 82       	st	Z, r1
     ffc:	2e 96       	adiw	r28, 0x0e	; 14
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	08 95       	ret

00001012 <vfprintf>:
    1012:	2f 92       	push	r2
    1014:	3f 92       	push	r3
    1016:	4f 92       	push	r4
    1018:	5f 92       	push	r5
    101a:	6f 92       	push	r6
    101c:	7f 92       	push	r7
    101e:	8f 92       	push	r8
    1020:	9f 92       	push	r9
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	2c 97       	sbiw	r28, 0x0c	; 12
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	7c 01       	movw	r14, r24
    1048:	6b 01       	movw	r12, r22
    104a:	8a 01       	movw	r16, r20
    104c:	fc 01       	movw	r30, r24
    104e:	17 82       	std	Z+7, r1	; 0x07
    1050:	16 82       	std	Z+6, r1	; 0x06
    1052:	83 81       	ldd	r24, Z+3	; 0x03
    1054:	81 ff       	sbrs	r24, 1
    1056:	c6 c1       	rjmp	.+908    	; 0x13e4 <vfprintf+0x3d2>
    1058:	88 24       	eor	r8, r8
    105a:	83 94       	inc	r8
    105c:	91 2c       	mov	r9, r1
    105e:	8c 0e       	add	r8, r28
    1060:	9d 1e       	adc	r9, r29
    1062:	f7 01       	movw	r30, r14
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	f6 01       	movw	r30, r12
    1068:	93 fd       	sbrc	r25, 3
    106a:	85 91       	lpm	r24, Z+
    106c:	93 ff       	sbrs	r25, 3
    106e:	81 91       	ld	r24, Z+
    1070:	6f 01       	movw	r12, r30
    1072:	88 23       	and	r24, r24
    1074:	09 f4       	brne	.+2      	; 0x1078 <vfprintf+0x66>
    1076:	b2 c1       	rjmp	.+868    	; 0x13dc <vfprintf+0x3ca>
    1078:	85 32       	cpi	r24, 0x25	; 37
    107a:	39 f4       	brne	.+14     	; 0x108a <vfprintf+0x78>
    107c:	93 fd       	sbrc	r25, 3
    107e:	85 91       	lpm	r24, Z+
    1080:	93 ff       	sbrs	r25, 3
    1082:	81 91       	ld	r24, Z+
    1084:	6f 01       	movw	r12, r30
    1086:	85 32       	cpi	r24, 0x25	; 37
    1088:	29 f4       	brne	.+10     	; 0x1094 <vfprintf+0x82>
    108a:	b7 01       	movw	r22, r14
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    1092:	e7 cf       	rjmp	.-50     	; 0x1062 <vfprintf+0x50>
    1094:	51 2c       	mov	r5, r1
    1096:	31 2c       	mov	r3, r1
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	20 32       	cpi	r18, 0x20	; 32
    109c:	a8 f4       	brcc	.+42     	; 0x10c8 <vfprintf+0xb6>
    109e:	8b 32       	cpi	r24, 0x2B	; 43
    10a0:	61 f0       	breq	.+24     	; 0x10ba <vfprintf+0xa8>
    10a2:	28 f4       	brcc	.+10     	; 0x10ae <vfprintf+0x9c>
    10a4:	80 32       	cpi	r24, 0x20	; 32
    10a6:	51 f0       	breq	.+20     	; 0x10bc <vfprintf+0xaa>
    10a8:	83 32       	cpi	r24, 0x23	; 35
    10aa:	71 f4       	brne	.+28     	; 0x10c8 <vfprintf+0xb6>
    10ac:	0b c0       	rjmp	.+22     	; 0x10c4 <vfprintf+0xb2>
    10ae:	8d 32       	cpi	r24, 0x2D	; 45
    10b0:	39 f0       	breq	.+14     	; 0x10c0 <vfprintf+0xae>
    10b2:	80 33       	cpi	r24, 0x30	; 48
    10b4:	49 f4       	brne	.+18     	; 0x10c8 <vfprintf+0xb6>
    10b6:	21 60       	ori	r18, 0x01	; 1
    10b8:	28 c0       	rjmp	.+80     	; 0x110a <vfprintf+0xf8>
    10ba:	22 60       	ori	r18, 0x02	; 2
    10bc:	24 60       	ori	r18, 0x04	; 4
    10be:	25 c0       	rjmp	.+74     	; 0x110a <vfprintf+0xf8>
    10c0:	28 60       	ori	r18, 0x08	; 8
    10c2:	23 c0       	rjmp	.+70     	; 0x110a <vfprintf+0xf8>
    10c4:	20 61       	ori	r18, 0x10	; 16
    10c6:	21 c0       	rjmp	.+66     	; 0x110a <vfprintf+0xf8>
    10c8:	27 fd       	sbrc	r18, 7
    10ca:	27 c0       	rjmp	.+78     	; 0x111a <vfprintf+0x108>
    10cc:	38 2f       	mov	r19, r24
    10ce:	30 53       	subi	r19, 0x30	; 48
    10d0:	3a 30       	cpi	r19, 0x0A	; 10
    10d2:	78 f4       	brcc	.+30     	; 0x10f2 <vfprintf+0xe0>
    10d4:	26 ff       	sbrs	r18, 6
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <vfprintf+0xd2>
    10d8:	fa e0       	ldi	r31, 0x0A	; 10
    10da:	5f 9e       	mul	r5, r31
    10dc:	30 0d       	add	r19, r0
    10de:	11 24       	eor	r1, r1
    10e0:	53 2e       	mov	r5, r19
    10e2:	13 c0       	rjmp	.+38     	; 0x110a <vfprintf+0xf8>
    10e4:	8a e0       	ldi	r24, 0x0A	; 10
    10e6:	38 9e       	mul	r3, r24
    10e8:	30 0d       	add	r19, r0
    10ea:	11 24       	eor	r1, r1
    10ec:	33 2e       	mov	r3, r19
    10ee:	20 62       	ori	r18, 0x20	; 32
    10f0:	0c c0       	rjmp	.+24     	; 0x110a <vfprintf+0xf8>
    10f2:	8e 32       	cpi	r24, 0x2E	; 46
    10f4:	21 f4       	brne	.+8      	; 0x10fe <vfprintf+0xec>
    10f6:	26 fd       	sbrc	r18, 6
    10f8:	71 c1       	rjmp	.+738    	; 0x13dc <vfprintf+0x3ca>
    10fa:	20 64       	ori	r18, 0x40	; 64
    10fc:	06 c0       	rjmp	.+12     	; 0x110a <vfprintf+0xf8>
    10fe:	8c 36       	cpi	r24, 0x6C	; 108
    1100:	11 f4       	brne	.+4      	; 0x1106 <vfprintf+0xf4>
    1102:	20 68       	ori	r18, 0x80	; 128
    1104:	02 c0       	rjmp	.+4      	; 0x110a <vfprintf+0xf8>
    1106:	88 36       	cpi	r24, 0x68	; 104
    1108:	41 f4       	brne	.+16     	; 0x111a <vfprintf+0x108>
    110a:	f6 01       	movw	r30, r12
    110c:	93 fd       	sbrc	r25, 3
    110e:	85 91       	lpm	r24, Z+
    1110:	93 ff       	sbrs	r25, 3
    1112:	81 91       	ld	r24, Z+
    1114:	6f 01       	movw	r12, r30
    1116:	81 11       	cpse	r24, r1
    1118:	c0 cf       	rjmp	.-128    	; 0x109a <vfprintf+0x88>
    111a:	98 2f       	mov	r25, r24
    111c:	95 54       	subi	r25, 0x45	; 69
    111e:	93 30       	cpi	r25, 0x03	; 3
    1120:	18 f0       	brcs	.+6      	; 0x1128 <vfprintf+0x116>
    1122:	90 52       	subi	r25, 0x20	; 32
    1124:	93 30       	cpi	r25, 0x03	; 3
    1126:	28 f4       	brcc	.+10     	; 0x1132 <vfprintf+0x120>
    1128:	0c 5f       	subi	r16, 0xFC	; 252
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	ff e3       	ldi	r31, 0x3F	; 63
    112e:	f9 83       	std	Y+1, r31	; 0x01
    1130:	0d c0       	rjmp	.+26     	; 0x114c <vfprintf+0x13a>
    1132:	83 36       	cpi	r24, 0x63	; 99
    1134:	31 f0       	breq	.+12     	; 0x1142 <vfprintf+0x130>
    1136:	83 37       	cpi	r24, 0x73	; 115
    1138:	71 f0       	breq	.+28     	; 0x1156 <vfprintf+0x144>
    113a:	83 35       	cpi	r24, 0x53	; 83
    113c:	09 f0       	breq	.+2      	; 0x1140 <vfprintf+0x12e>
    113e:	5e c0       	rjmp	.+188    	; 0x11fc <vfprintf+0x1ea>
    1140:	23 c0       	rjmp	.+70     	; 0x1188 <vfprintf+0x176>
    1142:	f8 01       	movw	r30, r16
    1144:	80 81       	ld	r24, Z
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	0e 5f       	subi	r16, 0xFE	; 254
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
    114c:	44 24       	eor	r4, r4
    114e:	43 94       	inc	r4
    1150:	51 2c       	mov	r5, r1
    1152:	54 01       	movw	r10, r8
    1154:	15 c0       	rjmp	.+42     	; 0x1180 <vfprintf+0x16e>
    1156:	38 01       	movw	r6, r16
    1158:	f2 e0       	ldi	r31, 0x02	; 2
    115a:	6f 0e       	add	r6, r31
    115c:	71 1c       	adc	r7, r1
    115e:	f8 01       	movw	r30, r16
    1160:	a0 80       	ld	r10, Z
    1162:	b1 80       	ldd	r11, Z+1	; 0x01
    1164:	26 ff       	sbrs	r18, 6
    1166:	03 c0       	rjmp	.+6      	; 0x116e <vfprintf+0x15c>
    1168:	65 2d       	mov	r22, r5
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <vfprintf+0x160>
    116e:	6f ef       	ldi	r22, 0xFF	; 255
    1170:	7f ef       	ldi	r23, 0xFF	; 255
    1172:	c5 01       	movw	r24, r10
    1174:	2c 87       	std	Y+12, r18	; 0x0c
    1176:	0e 94 19 0a 	call	0x1432	; 0x1432 <strnlen>
    117a:	2c 01       	movw	r4, r24
    117c:	83 01       	movw	r16, r6
    117e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1180:	6f e7       	ldi	r22, 0x7F	; 127
    1182:	26 2e       	mov	r2, r22
    1184:	22 22       	and	r2, r18
    1186:	18 c0       	rjmp	.+48     	; 0x11b8 <vfprintf+0x1a6>
    1188:	38 01       	movw	r6, r16
    118a:	f2 e0       	ldi	r31, 0x02	; 2
    118c:	6f 0e       	add	r6, r31
    118e:	71 1c       	adc	r7, r1
    1190:	f8 01       	movw	r30, r16
    1192:	a0 80       	ld	r10, Z
    1194:	b1 80       	ldd	r11, Z+1	; 0x01
    1196:	26 ff       	sbrs	r18, 6
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <vfprintf+0x18e>
    119a:	65 2d       	mov	r22, r5
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <vfprintf+0x192>
    11a0:	6f ef       	ldi	r22, 0xFF	; 255
    11a2:	7f ef       	ldi	r23, 0xFF	; 255
    11a4:	c5 01       	movw	r24, r10
    11a6:	2c 87       	std	Y+12, r18	; 0x0c
    11a8:	0e 94 0e 0a 	call	0x141c	; 0x141c <strnlen_P>
    11ac:	2c 01       	movw	r4, r24
    11ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b0:	50 e8       	ldi	r21, 0x80	; 128
    11b2:	25 2e       	mov	r2, r21
    11b4:	22 2a       	or	r2, r18
    11b6:	83 01       	movw	r16, r6
    11b8:	23 fc       	sbrc	r2, 3
    11ba:	1c c0       	rjmp	.+56     	; 0x11f4 <vfprintf+0x1e2>
    11bc:	06 c0       	rjmp	.+12     	; 0x11ca <vfprintf+0x1b8>
    11be:	b7 01       	movw	r22, r14
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    11c8:	3a 94       	dec	r3
    11ca:	83 2d       	mov	r24, r3
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	48 16       	cp	r4, r24
    11d0:	59 06       	cpc	r5, r25
    11d2:	a8 f3       	brcs	.-22     	; 0x11be <vfprintf+0x1ac>
    11d4:	0f c0       	rjmp	.+30     	; 0x11f4 <vfprintf+0x1e2>
    11d6:	f5 01       	movw	r30, r10
    11d8:	27 fc       	sbrc	r2, 7
    11da:	85 91       	lpm	r24, Z+
    11dc:	27 fe       	sbrs	r2, 7
    11de:	81 91       	ld	r24, Z+
    11e0:	5f 01       	movw	r10, r30
    11e2:	b7 01       	movw	r22, r14
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    11ea:	31 10       	cpse	r3, r1
    11ec:	3a 94       	dec	r3
    11ee:	f1 e0       	ldi	r31, 0x01	; 1
    11f0:	4f 1a       	sub	r4, r31
    11f2:	51 08       	sbc	r5, r1
    11f4:	41 14       	cp	r4, r1
    11f6:	51 04       	cpc	r5, r1
    11f8:	71 f7       	brne	.-36     	; 0x11d6 <vfprintf+0x1c4>
    11fa:	ed c0       	rjmp	.+474    	; 0x13d6 <vfprintf+0x3c4>
    11fc:	84 36       	cpi	r24, 0x64	; 100
    11fe:	11 f0       	breq	.+4      	; 0x1204 <vfprintf+0x1f2>
    1200:	89 36       	cpi	r24, 0x69	; 105
    1202:	41 f5       	brne	.+80     	; 0x1254 <vfprintf+0x242>
    1204:	f8 01       	movw	r30, r16
    1206:	27 ff       	sbrs	r18, 7
    1208:	07 c0       	rjmp	.+14     	; 0x1218 <vfprintf+0x206>
    120a:	60 81       	ld	r22, Z
    120c:	71 81       	ldd	r23, Z+1	; 0x01
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	93 81       	ldd	r25, Z+3	; 0x03
    1212:	0c 5f       	subi	r16, 0xFC	; 252
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
    1216:	08 c0       	rjmp	.+16     	; 0x1228 <vfprintf+0x216>
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	88 27       	eor	r24, r24
    121e:	77 fd       	sbrc	r23, 7
    1220:	80 95       	com	r24
    1222:	98 2f       	mov	r25, r24
    1224:	0e 5f       	subi	r16, 0xFE	; 254
    1226:	1f 4f       	sbci	r17, 0xFF	; 255
    1228:	4f e6       	ldi	r20, 0x6F	; 111
    122a:	b4 2e       	mov	r11, r20
    122c:	b2 22       	and	r11, r18
    122e:	97 ff       	sbrs	r25, 7
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <vfprintf+0x232>
    1232:	90 95       	com	r25
    1234:	80 95       	com	r24
    1236:	70 95       	com	r23
    1238:	61 95       	neg	r22
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	8f 4f       	sbci	r24, 0xFF	; 255
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	f0 e8       	ldi	r31, 0x80	; 128
    1242:	bf 2a       	or	r11, r31
    1244:	2a e0       	ldi	r18, 0x0A	; 10
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	a4 01       	movw	r20, r8
    124a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__ultoa_invert>
    124e:	a8 2e       	mov	r10, r24
    1250:	a8 18       	sub	r10, r8
    1252:	43 c0       	rjmp	.+134    	; 0x12da <vfprintf+0x2c8>
    1254:	85 37       	cpi	r24, 0x75	; 117
    1256:	31 f4       	brne	.+12     	; 0x1264 <vfprintf+0x252>
    1258:	3f ee       	ldi	r19, 0xEF	; 239
    125a:	b3 2e       	mov	r11, r19
    125c:	b2 22       	and	r11, r18
    125e:	2a e0       	ldi	r18, 0x0A	; 10
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	24 c0       	rjmp	.+72     	; 0x12ac <vfprintf+0x29a>
    1264:	99 ef       	ldi	r25, 0xF9	; 249
    1266:	b9 2e       	mov	r11, r25
    1268:	b2 22       	and	r11, r18
    126a:	8f 36       	cpi	r24, 0x6F	; 111
    126c:	b9 f0       	breq	.+46     	; 0x129c <vfprintf+0x28a>
    126e:	20 f4       	brcc	.+8      	; 0x1278 <vfprintf+0x266>
    1270:	88 35       	cpi	r24, 0x58	; 88
    1272:	09 f0       	breq	.+2      	; 0x1276 <vfprintf+0x264>
    1274:	b3 c0       	rjmp	.+358    	; 0x13dc <vfprintf+0x3ca>
    1276:	0d c0       	rjmp	.+26     	; 0x1292 <vfprintf+0x280>
    1278:	80 37       	cpi	r24, 0x70	; 112
    127a:	21 f0       	breq	.+8      	; 0x1284 <vfprintf+0x272>
    127c:	88 37       	cpi	r24, 0x78	; 120
    127e:	09 f0       	breq	.+2      	; 0x1282 <vfprintf+0x270>
    1280:	ad c0       	rjmp	.+346    	; 0x13dc <vfprintf+0x3ca>
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <vfprintf+0x276>
    1284:	20 e1       	ldi	r18, 0x10	; 16
    1286:	b2 2a       	or	r11, r18
    1288:	b4 fe       	sbrs	r11, 4
    128a:	0b c0       	rjmp	.+22     	; 0x12a2 <vfprintf+0x290>
    128c:	84 e0       	ldi	r24, 0x04	; 4
    128e:	b8 2a       	or	r11, r24
    1290:	08 c0       	rjmp	.+16     	; 0x12a2 <vfprintf+0x290>
    1292:	24 ff       	sbrs	r18, 4
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <vfprintf+0x296>
    1296:	e6 e0       	ldi	r30, 0x06	; 6
    1298:	be 2a       	or	r11, r30
    129a:	06 c0       	rjmp	.+12     	; 0x12a8 <vfprintf+0x296>
    129c:	28 e0       	ldi	r18, 0x08	; 8
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	05 c0       	rjmp	.+10     	; 0x12ac <vfprintf+0x29a>
    12a2:	20 e1       	ldi	r18, 0x10	; 16
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <vfprintf+0x29a>
    12a8:	20 e1       	ldi	r18, 0x10	; 16
    12aa:	32 e0       	ldi	r19, 0x02	; 2
    12ac:	f8 01       	movw	r30, r16
    12ae:	b7 fe       	sbrs	r11, 7
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <vfprintf+0x2ae>
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	0c 5f       	subi	r16, 0xFC	; 252
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <vfprintf+0x2ba>
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 5f       	subi	r16, 0xFE	; 254
    12ca:	1f 4f       	sbci	r17, 0xFF	; 255
    12cc:	a4 01       	movw	r20, r8
    12ce:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__ultoa_invert>
    12d2:	a8 2e       	mov	r10, r24
    12d4:	a8 18       	sub	r10, r8
    12d6:	ff e7       	ldi	r31, 0x7F	; 127
    12d8:	bf 22       	and	r11, r31
    12da:	b6 fe       	sbrs	r11, 6
    12dc:	0b c0       	rjmp	.+22     	; 0x12f4 <vfprintf+0x2e2>
    12de:	2b 2d       	mov	r18, r11
    12e0:	2e 7f       	andi	r18, 0xFE	; 254
    12e2:	a5 14       	cp	r10, r5
    12e4:	50 f4       	brcc	.+20     	; 0x12fa <vfprintf+0x2e8>
    12e6:	b4 fe       	sbrs	r11, 4
    12e8:	0a c0       	rjmp	.+20     	; 0x12fe <vfprintf+0x2ec>
    12ea:	b2 fc       	sbrc	r11, 2
    12ec:	08 c0       	rjmp	.+16     	; 0x12fe <vfprintf+0x2ec>
    12ee:	2b 2d       	mov	r18, r11
    12f0:	2e 7e       	andi	r18, 0xEE	; 238
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <vfprintf+0x2ec>
    12f4:	7a 2c       	mov	r7, r10
    12f6:	2b 2d       	mov	r18, r11
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <vfprintf+0x2ee>
    12fa:	7a 2c       	mov	r7, r10
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <vfprintf+0x2ee>
    12fe:	75 2c       	mov	r7, r5
    1300:	24 ff       	sbrs	r18, 4
    1302:	0d c0       	rjmp	.+26     	; 0x131e <vfprintf+0x30c>
    1304:	fe 01       	movw	r30, r28
    1306:	ea 0d       	add	r30, r10
    1308:	f1 1d       	adc	r31, r1
    130a:	80 81       	ld	r24, Z
    130c:	80 33       	cpi	r24, 0x30	; 48
    130e:	11 f4       	brne	.+4      	; 0x1314 <vfprintf+0x302>
    1310:	29 7e       	andi	r18, 0xE9	; 233
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <vfprintf+0x314>
    1314:	22 ff       	sbrs	r18, 2
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <vfprintf+0x312>
    1318:	73 94       	inc	r7
    131a:	73 94       	inc	r7
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <vfprintf+0x314>
    131e:	82 2f       	mov	r24, r18
    1320:	86 78       	andi	r24, 0x86	; 134
    1322:	09 f0       	breq	.+2      	; 0x1326 <vfprintf+0x314>
    1324:	73 94       	inc	r7
    1326:	23 fd       	sbrc	r18, 3
    1328:	14 c0       	rjmp	.+40     	; 0x1352 <vfprintf+0x340>
    132a:	20 ff       	sbrs	r18, 0
    132c:	0f c0       	rjmp	.+30     	; 0x134c <vfprintf+0x33a>
    132e:	5a 2c       	mov	r5, r10
    1330:	73 14       	cp	r7, r3
    1332:	60 f4       	brcc	.+24     	; 0x134c <vfprintf+0x33a>
    1334:	53 0c       	add	r5, r3
    1336:	57 18       	sub	r5, r7
    1338:	73 2c       	mov	r7, r3
    133a:	08 c0       	rjmp	.+16     	; 0x134c <vfprintf+0x33a>
    133c:	b7 01       	movw	r22, r14
    133e:	80 e2       	ldi	r24, 0x20	; 32
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	2c 87       	std	Y+12, r18	; 0x0c
    1344:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    1348:	73 94       	inc	r7
    134a:	2c 85       	ldd	r18, Y+12	; 0x0c
    134c:	73 14       	cp	r7, r3
    134e:	b0 f3       	brcs	.-20     	; 0x133c <vfprintf+0x32a>
    1350:	04 c0       	rjmp	.+8      	; 0x135a <vfprintf+0x348>
    1352:	73 14       	cp	r7, r3
    1354:	10 f4       	brcc	.+4      	; 0x135a <vfprintf+0x348>
    1356:	37 18       	sub	r3, r7
    1358:	01 c0       	rjmp	.+2      	; 0x135c <vfprintf+0x34a>
    135a:	31 2c       	mov	r3, r1
    135c:	24 ff       	sbrs	r18, 4
    135e:	12 c0       	rjmp	.+36     	; 0x1384 <vfprintf+0x372>
    1360:	b7 01       	movw	r22, r14
    1362:	80 e3       	ldi	r24, 0x30	; 48
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	2c 87       	std	Y+12, r18	; 0x0c
    1368:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    136c:	2c 85       	ldd	r18, Y+12	; 0x0c
    136e:	22 ff       	sbrs	r18, 2
    1370:	1e c0       	rjmp	.+60     	; 0x13ae <vfprintf+0x39c>
    1372:	21 ff       	sbrs	r18, 1
    1374:	03 c0       	rjmp	.+6      	; 0x137c <vfprintf+0x36a>
    1376:	88 e5       	ldi	r24, 0x58	; 88
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <vfprintf+0x36e>
    137c:	88 e7       	ldi	r24, 0x78	; 120
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	b7 01       	movw	r22, r14
    1382:	0c c0       	rjmp	.+24     	; 0x139c <vfprintf+0x38a>
    1384:	82 2f       	mov	r24, r18
    1386:	86 78       	andi	r24, 0x86	; 134
    1388:	91 f0       	breq	.+36     	; 0x13ae <vfprintf+0x39c>
    138a:	21 fd       	sbrc	r18, 1
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <vfprintf+0x380>
    138e:	80 e2       	ldi	r24, 0x20	; 32
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <vfprintf+0x382>
    1392:	8b e2       	ldi	r24, 0x2B	; 43
    1394:	27 fd       	sbrc	r18, 7
    1396:	8d e2       	ldi	r24, 0x2D	; 45
    1398:	b7 01       	movw	r22, r14
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    13a0:	06 c0       	rjmp	.+12     	; 0x13ae <vfprintf+0x39c>
    13a2:	b7 01       	movw	r22, r14
    13a4:	80 e3       	ldi	r24, 0x30	; 48
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    13ac:	5a 94       	dec	r5
    13ae:	a5 14       	cp	r10, r5
    13b0:	c0 f3       	brcs	.-16     	; 0x13a2 <vfprintf+0x390>
    13b2:	aa 94       	dec	r10
    13b4:	f4 01       	movw	r30, r8
    13b6:	ea 0d       	add	r30, r10
    13b8:	f1 1d       	adc	r31, r1
    13ba:	b7 01       	movw	r22, r14
    13bc:	80 81       	ld	r24, Z
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    13c4:	a1 10       	cpse	r10, r1
    13c6:	f5 cf       	rjmp	.-22     	; 0x13b2 <vfprintf+0x3a0>
    13c8:	06 c0       	rjmp	.+12     	; 0x13d6 <vfprintf+0x3c4>
    13ca:	b7 01       	movw	r22, r14
    13cc:	80 e2       	ldi	r24, 0x20	; 32
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    13d4:	3a 94       	dec	r3
    13d6:	31 10       	cpse	r3, r1
    13d8:	f8 cf       	rjmp	.-16     	; 0x13ca <vfprintf+0x3b8>
    13da:	43 ce       	rjmp	.-890    	; 0x1062 <vfprintf+0x50>
    13dc:	f7 01       	movw	r30, r14
    13de:	26 81       	ldd	r18, Z+6	; 0x06
    13e0:	37 81       	ldd	r19, Z+7	; 0x07
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <vfprintf+0x3d6>
    13e4:	2f ef       	ldi	r18, 0xFF	; 255
    13e6:	3f ef       	ldi	r19, 0xFF	; 255
    13e8:	c9 01       	movw	r24, r18
    13ea:	2c 96       	adiw	r28, 0x0c	; 12
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	df 90       	pop	r13
    1404:	cf 90       	pop	r12
    1406:	bf 90       	pop	r11
    1408:	af 90       	pop	r10
    140a:	9f 90       	pop	r9
    140c:	8f 90       	pop	r8
    140e:	7f 90       	pop	r7
    1410:	6f 90       	pop	r6
    1412:	5f 90       	pop	r5
    1414:	4f 90       	pop	r4
    1416:	3f 90       	pop	r3
    1418:	2f 90       	pop	r2
    141a:	08 95       	ret

0000141c <strnlen_P>:
    141c:	fc 01       	movw	r30, r24
    141e:	05 90       	lpm	r0, Z+
    1420:	61 50       	subi	r22, 0x01	; 1
    1422:	70 40       	sbci	r23, 0x00	; 0
    1424:	01 10       	cpse	r0, r1
    1426:	d8 f7       	brcc	.-10     	; 0x141e <strnlen_P+0x2>
    1428:	80 95       	com	r24
    142a:	90 95       	com	r25
    142c:	8e 0f       	add	r24, r30
    142e:	9f 1f       	adc	r25, r31
    1430:	08 95       	ret

00001432 <strnlen>:
    1432:	fc 01       	movw	r30, r24
    1434:	61 50       	subi	r22, 0x01	; 1
    1436:	70 40       	sbci	r23, 0x00	; 0
    1438:	01 90       	ld	r0, Z+
    143a:	01 10       	cpse	r0, r1
    143c:	d8 f7       	brcc	.-10     	; 0x1434 <strnlen+0x2>
    143e:	80 95       	com	r24
    1440:	90 95       	com	r25
    1442:	8e 0f       	add	r24, r30
    1444:	9f 1f       	adc	r25, r31
    1446:	08 95       	ret

00001448 <fputc>:
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	8c 01       	movw	r16, r24
    1452:	eb 01       	movw	r28, r22
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	81 fd       	sbrc	r24, 1
    1458:	03 c0       	rjmp	.+6      	; 0x1460 <fputc+0x18>
    145a:	0f ef       	ldi	r16, 0xFF	; 255
    145c:	1f ef       	ldi	r17, 0xFF	; 255
    145e:	1a c0       	rjmp	.+52     	; 0x1494 <fputc+0x4c>
    1460:	82 ff       	sbrs	r24, 2
    1462:	0d c0       	rjmp	.+26     	; 0x147e <fputc+0x36>
    1464:	2e 81       	ldd	r18, Y+6	; 0x06
    1466:	3f 81       	ldd	r19, Y+7	; 0x07
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	9d 81       	ldd	r25, Y+5	; 0x05
    146c:	28 17       	cp	r18, r24
    146e:	39 07       	cpc	r19, r25
    1470:	64 f4       	brge	.+24     	; 0x148a <fputc+0x42>
    1472:	e8 81       	ld	r30, Y
    1474:	f9 81       	ldd	r31, Y+1	; 0x01
    1476:	01 93       	st	Z+, r16
    1478:	f9 83       	std	Y+1, r31	; 0x01
    147a:	e8 83       	st	Y, r30
    147c:	06 c0       	rjmp	.+12     	; 0x148a <fputc+0x42>
    147e:	e8 85       	ldd	r30, Y+8	; 0x08
    1480:	f9 85       	ldd	r31, Y+9	; 0x09
    1482:	80 2f       	mov	r24, r16
    1484:	09 95       	icall
    1486:	89 2b       	or	r24, r25
    1488:	41 f7       	brne	.-48     	; 0x145a <fputc+0x12>
    148a:	8e 81       	ldd	r24, Y+6	; 0x06
    148c:	9f 81       	ldd	r25, Y+7	; 0x07
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	9f 83       	std	Y+7, r25	; 0x07
    1492:	8e 83       	std	Y+6, r24	; 0x06
    1494:	c8 01       	movw	r24, r16
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	08 95       	ret

000014a0 <__ultoa_invert>:
    14a0:	fa 01       	movw	r30, r20
    14a2:	aa 27       	eor	r26, r26
    14a4:	28 30       	cpi	r18, 0x08	; 8
    14a6:	51 f1       	breq	.+84     	; 0x14fc <__ultoa_invert+0x5c>
    14a8:	20 31       	cpi	r18, 0x10	; 16
    14aa:	81 f1       	breq	.+96     	; 0x150c <__ultoa_invert+0x6c>
    14ac:	e8 94       	clt
    14ae:	6f 93       	push	r22
    14b0:	6e 7f       	andi	r22, 0xFE	; 254
    14b2:	6e 5f       	subi	r22, 0xFE	; 254
    14b4:	7f 4f       	sbci	r23, 0xFF	; 255
    14b6:	8f 4f       	sbci	r24, 0xFF	; 255
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	af 4f       	sbci	r26, 0xFF	; 255
    14bc:	b1 e0       	ldi	r27, 0x01	; 1
    14be:	3e d0       	rcall	.+124    	; 0x153c <__ultoa_invert+0x9c>
    14c0:	b4 e0       	ldi	r27, 0x04	; 4
    14c2:	3c d0       	rcall	.+120    	; 0x153c <__ultoa_invert+0x9c>
    14c4:	67 0f       	add	r22, r23
    14c6:	78 1f       	adc	r23, r24
    14c8:	89 1f       	adc	r24, r25
    14ca:	9a 1f       	adc	r25, r26
    14cc:	a1 1d       	adc	r26, r1
    14ce:	68 0f       	add	r22, r24
    14d0:	79 1f       	adc	r23, r25
    14d2:	8a 1f       	adc	r24, r26
    14d4:	91 1d       	adc	r25, r1
    14d6:	a1 1d       	adc	r26, r1
    14d8:	6a 0f       	add	r22, r26
    14da:	71 1d       	adc	r23, r1
    14dc:	81 1d       	adc	r24, r1
    14de:	91 1d       	adc	r25, r1
    14e0:	a1 1d       	adc	r26, r1
    14e2:	20 d0       	rcall	.+64     	; 0x1524 <__ultoa_invert+0x84>
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <__ultoa_invert+0x48>
    14e6:	68 94       	set
    14e8:	3f 91       	pop	r19
    14ea:	2a e0       	ldi	r18, 0x0A	; 10
    14ec:	26 9f       	mul	r18, r22
    14ee:	11 24       	eor	r1, r1
    14f0:	30 19       	sub	r19, r0
    14f2:	30 5d       	subi	r19, 0xD0	; 208
    14f4:	31 93       	st	Z+, r19
    14f6:	de f6       	brtc	.-74     	; 0x14ae <__ultoa_invert+0xe>
    14f8:	cf 01       	movw	r24, r30
    14fa:	08 95       	ret
    14fc:	46 2f       	mov	r20, r22
    14fe:	47 70       	andi	r20, 0x07	; 7
    1500:	40 5d       	subi	r20, 0xD0	; 208
    1502:	41 93       	st	Z+, r20
    1504:	b3 e0       	ldi	r27, 0x03	; 3
    1506:	0f d0       	rcall	.+30     	; 0x1526 <__ultoa_invert+0x86>
    1508:	c9 f7       	brne	.-14     	; 0x14fc <__ultoa_invert+0x5c>
    150a:	f6 cf       	rjmp	.-20     	; 0x14f8 <__ultoa_invert+0x58>
    150c:	46 2f       	mov	r20, r22
    150e:	4f 70       	andi	r20, 0x0F	; 15
    1510:	40 5d       	subi	r20, 0xD0	; 208
    1512:	4a 33       	cpi	r20, 0x3A	; 58
    1514:	18 f0       	brcs	.+6      	; 0x151c <__ultoa_invert+0x7c>
    1516:	49 5d       	subi	r20, 0xD9	; 217
    1518:	31 fd       	sbrc	r19, 1
    151a:	40 52       	subi	r20, 0x20	; 32
    151c:	41 93       	st	Z+, r20
    151e:	02 d0       	rcall	.+4      	; 0x1524 <__ultoa_invert+0x84>
    1520:	a9 f7       	brne	.-22     	; 0x150c <__ultoa_invert+0x6c>
    1522:	ea cf       	rjmp	.-44     	; 0x14f8 <__ultoa_invert+0x58>
    1524:	b4 e0       	ldi	r27, 0x04	; 4
    1526:	a6 95       	lsr	r26
    1528:	97 95       	ror	r25
    152a:	87 95       	ror	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	ba 95       	dec	r27
    1532:	c9 f7       	brne	.-14     	; 0x1526 <__ultoa_invert+0x86>
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	61 05       	cpc	r22, r1
    1538:	71 05       	cpc	r23, r1
    153a:	08 95       	ret
    153c:	9b 01       	movw	r18, r22
    153e:	ac 01       	movw	r20, r24
    1540:	0a 2e       	mov	r0, r26
    1542:	06 94       	lsr	r0
    1544:	57 95       	ror	r21
    1546:	47 95       	ror	r20
    1548:	37 95       	ror	r19
    154a:	27 95       	ror	r18
    154c:	ba 95       	dec	r27
    154e:	c9 f7       	brne	.-14     	; 0x1542 <__ultoa_invert+0xa2>
    1550:	62 0f       	add	r22, r18
    1552:	73 1f       	adc	r23, r19
    1554:	84 1f       	adc	r24, r20
    1556:	95 1f       	adc	r25, r21
    1558:	a0 1d       	adc	r26, r0
    155a:	08 95       	ret

0000155c <_exit>:
    155c:	f8 94       	cli

0000155e <__stop_program>:
    155e:	ff cf       	rjmp	.-2      	; 0x155e <__stop_program>
