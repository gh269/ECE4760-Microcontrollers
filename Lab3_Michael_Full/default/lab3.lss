
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  000015dc  00001670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020b  00800176  00800176  000016e6  2**0
                  ALLOC
  3 .stab         00000da4  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000273  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000026ff  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  0000272e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0f  00000000  00000000  0000280e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ac0  00000000  00000000  0000471d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000da1  00000000  00000000  000051dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005b0  00000000  00000000  00005f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000072b  00000000  00000000  00006530  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b3b  00000000  00000000  00006c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  00008796  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_20>
      54:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ed       	ldi	r30, 0xDC	; 220
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 37       	cpi	r26, 0x76	; 118
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a6 e7       	ldi	r26, 0x76	; 118
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 38       	cpi	r26, 0x81	; 129
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 73 07 	call	0xee6	; 0xee6 <main>
      c6:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <putchar_uart0>:
// uses uart 0
void putchar_uart0(char c)
{
  //if (c == '\n')
  //  uart_putchar('\r', stream);
  loop_until_bit_is_set(UCSR0A, UDRE0);
      ce:	90 91 c0 00 	lds	r25, 0x00C0
      d2:	95 ff       	sbrs	r25, 5
      d4:	fc cf       	rjmp	.-8      	; 0xce <putchar_uart0>
  UDR0 = c;
      d6:	80 93 c6 00 	sts	0x00C6, r24
      da:	08 95       	ret

000000dc <getchar_uart0>:
// -- getchar ---
// users uart 0 -- very basic input
char getchar_uart0(void)
{
  uint8_t c;
  loop_until_bit_is_set(UCSR0A, RXC0);
      dc:	80 91 c0 00 	lds	r24, 0x00C0
      e0:	87 ff       	sbrs	r24, 7
      e2:	fc cf       	rjmp	.-8      	; 0xdc <getchar_uart0>
  return c = UDR0;
      e4:	80 91 c6 00 	lds	r24, 0x00C6
}
      e8:	08 95       	ret

000000ea <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
      ea:	1f 92       	push	r1
      ec:	0f 92       	push	r0
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	0f 92       	push	r0
      f2:	11 24       	eor	r1, r1
      f4:	0b b6       	in	r0, 0x3b	; 59
      f6:	0f 92       	push	r0
      f8:	6f 92       	push	r6
      fa:	7f 92       	push	r7
      fc:	8f 92       	push	r8
      fe:	9f 92       	push	r9
     100:	af 92       	push	r10
     102:	bf 92       	push	r11
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	4f 93       	push	r20
     116:	5f 93       	push	r21
     118:	6f 93       	push	r22
     11a:	7f 93       	push	r23
     11c:	8f 93       	push	r24
     11e:	9f 93       	push	r25
     120:	af 93       	push	r26
     122:	bf 93       	push	r27
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	ef 93       	push	r30
     12a:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     12c:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     130:	b0 90 e9 02 	lds	r11, 0x02E9
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     134:	b0 9b       	sbis	0x16, 0	; 22
     136:	14 c0       	rjmp	.+40     	; 0x160 <__vector_13+0x76>
    ++kernel.cycles;
     138:	80 91 2a 03 	lds	r24, 0x032A
     13c:	90 91 2b 03 	lds	r25, 0x032B
     140:	a0 91 2c 03 	lds	r26, 0x032C
     144:	b0 91 2d 03 	lds	r27, 0x032D
     148:	01 96       	adiw	r24, 0x01	; 1
     14a:	a1 1d       	adc	r26, r1
     14c:	b1 1d       	adc	r27, r1
     14e:	80 93 2a 03 	sts	0x032A, r24
     152:	90 93 2b 03 	sts	0x032B, r25
     156:	a0 93 2c 03 	sts	0x032C, r26
     15a:	b0 93 2d 03 	sts	0x032D, r27
    TIFR1 |= (1<<TOV1) ;
     15e:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     160:	80 91 84 00 	lds	r24, 0x0084
     164:	90 91 85 00 	lds	r25, 0x0085
     168:	40 91 2a 03 	lds	r20, 0x032A
     16c:	50 91 2b 03 	lds	r21, 0x032B
     170:	60 91 2c 03 	lds	r22, 0x032C
     174:	70 91 2d 03 	lds	r23, 0x032D
     178:	ba 01       	movw	r22, r20
     17a:	55 27       	eor	r21, r21
     17c:	44 27       	eor	r20, r20
     17e:	48 0f       	add	r20, r24
     180:	59 1f       	adc	r21, r25
     182:	61 1d       	adc	r22, r1
     184:	71 1d       	adc	r23, r1

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     186:	70 90 e8 02 	lds	r7, 0x02E8
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
     18a:	8f ef       	ldi	r24, 0xFF	; 255
     18c:	9f ef       	ldi	r25, 0xFF	; 255
     18e:	af ef       	ldi	r26, 0xFF	; 255
     190:	bf e7       	ldi	r27, 0x7F	; 127

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     192:	99 24       	eor	r9, r9
     194:	93 94       	inc	r9
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
  running = 0;
     196:	a1 2c       	mov	r10, r1
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     198:	cb e0       	ldi	r28, 0x0B	; 11
     19a:	8c 2e       	mov	r8, r28
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     19c:	66 24       	eor	r6, r6
     19e:	63 94       	inc	r6

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     1a0:	31 c0       	rjmp	.+98     	; 0x204 <__vector_13+0x11a>
    t = &kernel.tasks[i];
     1a2:	89 9c       	mul	r8, r9
     1a4:	f0 01       	movw	r30, r0
     1a6:	11 24       	eor	r1, r1
     1a8:	e6 51       	subi	r30, 0x16	; 22
     1aa:	fd 4f       	sbci	r31, 0xFD	; 253
    if (t->state == TIMEQ) {
     1ac:	22 85       	ldd	r18, Z+10	; 0x0a
     1ae:	22 30       	cpi	r18, 0x02	; 2
     1b0:	91 f4       	brne	.+36     	; 0x1d6 <__vector_13+0xec>
      if (t->release <= now) {
     1b2:	02 81       	ldd	r16, Z+2	; 0x02
     1b4:	13 81       	ldd	r17, Z+3	; 0x03
     1b6:	24 81       	ldd	r18, Z+4	; 0x04
     1b8:	35 81       	ldd	r19, Z+5	; 0x05
     1ba:	40 17       	cp	r20, r16
     1bc:	51 07       	cpc	r21, r17
     1be:	62 07       	cpc	r22, r18
     1c0:	73 07       	cpc	r23, r19
     1c2:	10 f0       	brcs	.+4      	; 0x1c8 <__vector_13+0xde>
	t->state = READYQ;
     1c4:	62 86       	std	Z+10, r6	; 0x0a
     1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <__vector_13+0xec>
     1c8:	08 17       	cp	r16, r24
     1ca:	19 07       	cpc	r17, r25
     1cc:	2a 07       	cpc	r18, r26
     1ce:	3b 07       	cpc	r19, r27
     1d0:	10 f4       	brcc	.+4      	; 0x1d6 <__vector_13+0xec>
     1d2:	d9 01       	movw	r26, r18
     1d4:	c8 01       	movw	r24, r16
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     1d6:	22 85       	ldd	r18, Z+10	; 0x0a
     1d8:	21 30       	cpi	r18, 0x01	; 1
     1da:	99 f4       	brne	.+38     	; 0x202 <__vector_13+0x118>
      if (t->deadline < kernel.tasks[running].deadline) {
     1dc:	8a 9c       	mul	r8, r10
     1de:	e0 01       	movw	r28, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	c8 51       	subi	r28, 0x18	; 24
     1e4:	dd 4f       	sbci	r29, 0xFD	; 253
     1e6:	c6 80       	ldd	r12, Z+6	; 0x06
     1e8:	d7 80       	ldd	r13, Z+7	; 0x07
     1ea:	e0 84       	ldd	r14, Z+8	; 0x08
     1ec:	f1 84       	ldd	r15, Z+9	; 0x09
     1ee:	08 85       	ldd	r16, Y+8	; 0x08
     1f0:	19 85       	ldd	r17, Y+9	; 0x09
     1f2:	2a 85       	ldd	r18, Y+10	; 0x0a
     1f4:	3b 85       	ldd	r19, Y+11	; 0x0b
     1f6:	c0 16       	cp	r12, r16
     1f8:	d1 06       	cpc	r13, r17
     1fa:	e2 06       	cpc	r14, r18
     1fc:	f3 06       	cpc	r15, r19
     1fe:	08 f4       	brcc	.+2      	; 0x202 <__vector_13+0x118>
     200:	a9 2c       	mov	r10, r9

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     202:	93 94       	inc	r9
     204:	79 14       	cp	r7, r9
     206:	68 f6       	brcc	.-102    	; 0x1a2 <__vector_13+0xb8>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     208:	ab 14       	cp	r10, r11
     20a:	a9 f0       	breq	.+42     	; 0x236 <__vector_13+0x14c>

    // store old context
    t = &kernel.tasks[oldrunning];
     20c:	eb e0       	ldi	r30, 0x0B	; 11
     20e:	eb 9d       	mul	r30, r11
     210:	e0 01       	movw	r28, r0
     212:	11 24       	eor	r1, r1
     214:	c6 51       	subi	r28, 0x16	; 22
     216:	dd 4f       	sbci	r29, 0xFD	; 253
    t->spl = SPL;
     218:	2d b7       	in	r18, 0x3d	; 61
     21a:	28 83       	st	Y, r18
    t->sph = SPH;
     21c:	2e b7       	in	r18, 0x3e	; 62
     21e:	29 83       	std	Y+1, r18	; 0x01

    // load new context
    t = &kernel.tasks[running];
     220:	ea 9d       	mul	r30, r10
     222:	f0 01       	movw	r30, r0
     224:	11 24       	eor	r1, r1
     226:	e6 51       	subi	r30, 0x16	; 22
     228:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     22a:	21 81       	ldd	r18, Z+1	; 0x01
     22c:	2e bf       	out	0x3e, r18	; 62
    SPL = t->spl;
     22e:	20 81       	ld	r18, Z
     230:	2d bf       	out	0x3d, r18	; 61

    kernel.running = running;
     232:	a0 92 e9 02 	sts	0x02E9, r10

  }

  kernel.nextHit = nextHit;  
     236:	80 93 2e 03 	sts	0x032E, r24
     23a:	90 93 2f 03 	sts	0x032F, r25
     23e:	a0 93 30 03 	sts	0x0330, r26
     242:	b0 93 31 03 	sts	0x0331, r27

  now = (kernel.cycles << 16) + TCNT1;
     246:	20 91 84 00 	lds	r18, 0x0084
     24a:	30 91 85 00 	lds	r19, 0x0085
     24e:	40 91 2a 03 	lds	r20, 0x032A
     252:	50 91 2b 03 	lds	r21, 0x032B
     256:	60 91 2c 03 	lds	r22, 0x032C
     25a:	70 91 2d 03 	lds	r23, 0x032D
     25e:	ba 01       	movw	r22, r20
     260:	55 27       	eor	r21, r21
     262:	44 27       	eor	r20, r20
     264:	42 0f       	add	r20, r18
     266:	53 1f       	adc	r21, r19
     268:	61 1d       	adc	r22, r1
     26a:	71 1d       	adc	r23, r1
  timeleft = (int32_t)nextHit - (int32_t)now;
     26c:	84 1b       	sub	r24, r20
     26e:	95 0b       	sbc	r25, r21
     270:	a6 0b       	sbc	r26, r22
     272:	b7 0b       	sbc	r27, r23
  if (timeleft < 4) {
     274:	84 30       	cpi	r24, 0x04	; 4
     276:	91 05       	cpc	r25, r1
     278:	a1 05       	cpc	r26, r1
     27a:	b1 05       	cpc	r27, r1
     27c:	24 f4       	brge	.+8      	; 0x286 <__vector_13+0x19c>
    timeleft = 4;
     27e:	84 e0       	ldi	r24, 0x04	; 4
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	a0 e0       	ldi	r26, 0x00	; 0
     284:	b0 e0       	ldi	r27, 0x00	; 0
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     286:	20 91 84 00 	lds	r18, 0x0084
     28a:	30 91 85 00 	lds	r19, 0x0085
     28e:	ac 01       	movw	r20, r24
     290:	bd 01       	movw	r22, r26
     292:	42 0f       	add	r20, r18
     294:	53 1f       	adc	r21, r19
     296:	61 1d       	adc	r22, r1
     298:	71 1d       	adc	r23, r1
     29a:	41 15       	cp	r20, r1
     29c:	51 05       	cpc	r21, r1
     29e:	61 40       	sbci	r22, 0x01	; 1
     2a0:	71 05       	cpc	r23, r1
     2a2:	58 f4       	brcc	.+22     	; 0x2ba <__vector_13+0x1d0>
    OCR1A = TCNT1 + timeleft;
     2a4:	20 91 84 00 	lds	r18, 0x0084
     2a8:	30 91 85 00 	lds	r19, 0x0085
     2ac:	28 0f       	add	r18, r24
     2ae:	39 1f       	adc	r19, r25
     2b0:	30 93 89 00 	sts	0x0089, r19
     2b4:	20 93 88 00 	sts	0x0088, r18
     2b8:	12 c0       	rjmp	.+36     	; 0x2de <__vector_13+0x1f4>
  } else if (TCNT1 < 65536 - 4) {
     2ba:	80 91 84 00 	lds	r24, 0x0084
     2be:	90 91 85 00 	lds	r25, 0x0085
     2c2:	8c 3f       	cpi	r24, 0xFC	; 252
     2c4:	9f 4f       	sbci	r25, 0xFF	; 255
     2c6:	28 f4       	brcc	.+10     	; 0x2d2 <__vector_13+0x1e8>
    OCR1A = 0x0000;
     2c8:	10 92 89 00 	sts	0x0089, r1
     2cc:	10 92 88 00 	sts	0x0088, r1
     2d0:	06 c0       	rjmp	.+12     	; 0x2de <__vector_13+0x1f4>
  } else {
    OCR1A = 4;
     2d2:	84 e0       	ldi	r24, 0x04	; 4
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	90 93 89 00 	sts	0x0089, r25
     2da:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	80 93 6f 00 	sts	0x006F, r24
}
     2e4:	ff 91       	pop	r31
     2e6:	ef 91       	pop	r30
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	bf 91       	pop	r27
     2ee:	af 91       	pop	r26
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	7f 91       	pop	r23
     2f6:	6f 91       	pop	r22
     2f8:	5f 91       	pop	r21
     2fa:	4f 91       	pop	r20
     2fc:	3f 91       	pop	r19
     2fe:	2f 91       	pop	r18
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	7f 90       	pop	r7
     316:	6f 90       	pop	r6
     318:	0f 90       	pop	r0
     31a:	0b be       	out	0x3b, r0	; 59
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     326:	10 92 85 00 	sts	0x0085, r1
     32a:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     32e:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     332:	25 e0       	ldi	r18, 0x05	; 5
     334:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     338:	22 e0       	ldi	r18, 0x02	; 2
     33a:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     33e:	2f ef       	ldi	r18, 0xFF	; 255
     340:	30 e4       	ldi	r19, 0x40	; 64
     342:	28 1b       	sub	r18, r24
     344:	39 0b       	sbc	r19, r25
     346:	30 93 29 03 	sts	0x0329, r19
     34a:	20 93 28 03 	sts	0x0328, r18
  kernel.nbrOfTasks = 0;
     34e:	10 92 e8 02 	sts	0x02E8, r1
  kernel.running = 0;
     352:	10 92 e9 02 	sts	0x02E9, r1

  kernel.cycles = 0x0000;
     356:	10 92 2a 03 	sts	0x032A, r1
     35a:	10 92 2b 03 	sts	0x032B, r1
     35e:	10 92 2c 03 	sts	0x032C, r1
     362:	10 92 2d 03 	sts	0x032D, r1
  kernel.nextHit = 0x7FFFFFFF;
     366:	8f ef       	ldi	r24, 0xFF	; 255
     368:	9f ef       	ldi	r25, 0xFF	; 255
     36a:	af ef       	ldi	r26, 0xFF	; 255
     36c:	bf e7       	ldi	r27, 0x7F	; 127
     36e:	80 93 2e 03 	sts	0x032E, r24
     372:	90 93 2f 03 	sts	0x032F, r25
     376:	a0 93 30 03 	sts	0x0330, r26
     37a:	b0 93 31 03 	sts	0x0331, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     37e:	80 93 f0 02 	sts	0x02F0, r24
     382:	90 93 f1 02 	sts	0x02F1, r25
     386:	a0 93 f2 02 	sts	0x02F2, r26
     38a:	b0 93 f3 02 	sts	0x02F3, r27
  kernel.tasks[0].release = 0x00000000;
     38e:	10 92 ec 02 	sts	0x02EC, r1
     392:	10 92 ed 02 	sts	0x02ED, r1
     396:	10 92 ee 02 	sts	0x02EE, r1
     39a:	10 92 ef 02 	sts	0x02EF, r1

  sei(); /* set enabled interrupts */
     39e:	78 94       	sei
     3a0:	08 95       	ret

000003a2 <trtCreateTask>:
}


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     3ae:	f8 94       	cli

  ++kernel.nbrOfTasks;
     3b0:	e0 91 e8 02 	lds	r30, 0x02E8
     3b4:	ef 5f       	subi	r30, 0xFF	; 255
     3b6:	e0 93 e8 02 	sts	0x02E8, r30

  sp = kernel.memptr;
     3ba:	e0 91 28 03 	lds	r30, 0x0328
     3be:	f0 91 29 03 	lds	r31, 0x0329
  kernel.memptr -= stacksize;  // decrease free mem ptr
     3c2:	df 01       	movw	r26, r30
     3c4:	a6 1b       	sub	r26, r22
     3c6:	b7 0b       	sbc	r27, r23
     3c8:	b0 93 29 03 	sts	0x0329, r27
     3cc:	a0 93 28 03 	sts	0x0328, r26

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     3d0:	80 83       	st	Z, r24
  *sp-- = hi8(fun);       // store PC(hi)
     3d2:	df 01       	movw	r26, r30
     3d4:	9e 93       	st	-X, r25

  sei(); /* set enabled interrupts */
}


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     3d6:	cf 01       	movw	r24, r30
     3d8:	4b 97       	sbiw	r24, 0x1b	; 27

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     3da:	1e 92       	st	-X, r1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     3dc:	a8 17       	cp	r26, r24
     3de:	b9 07       	cpc	r27, r25
     3e0:	e1 f7       	brne	.-8      	; 0x3da <trtCreateTask+0x38>
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     3e2:	df 01       	movw	r26, r30
     3e4:	5c 97       	sbiw	r26, 0x1c	; 28
     3e6:	cc 92       	st	X, r12
  *sp-- = hi8(args);
     3e8:	df 01       	movw	r26, r30
     3ea:	5d 97       	sbiw	r26, 0x1d	; 29
     3ec:	dc 92       	st	X, r13

  sei(); /* set enabled interrupts */
}


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     3ee:	cf 01       	movw	r24, r30
     3f0:	83 97       	sbiw	r24, 0x23	; 35
  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
    *sp-- = 0x00;         // store r26-r31
     3f2:	1e 92       	st	-X, r1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     3f4:	a8 17       	cp	r26, r24
     3f6:	b9 07       	cpc	r27, r25
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <trtCreateTask+0x50>
     3fa:	b4 97       	sbiw	r30, 0x24	; 36
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     3fc:	a0 91 e8 02 	lds	r26, 0x02E8
     400:	8b e0       	ldi	r24, 0x0B	; 11
     402:	a8 9f       	mul	r26, r24
     404:	d0 01       	movw	r26, r0
     406:	11 24       	eor	r1, r1
     408:	a6 51       	subi	r26, 0x16	; 22
     40a:	bd 4f       	sbci	r27, 0xFD	; 253

  t->release = release;
     40c:	12 96       	adiw	r26, 0x02	; 2
     40e:	2d 93       	st	X+, r18
     410:	3d 93       	st	X+, r19
     412:	4d 93       	st	X+, r20
     414:	5c 93       	st	X, r21
     416:	15 97       	sbiw	r26, 0x05	; 5
  t->deadline = deadline;
     418:	16 96       	adiw	r26, 0x06	; 6
     41a:	ed 92       	st	X+, r14
     41c:	fd 92       	st	X+, r15
     41e:	0d 93       	st	X+, r16
     420:	1c 93       	st	X, r17
     422:	19 97       	sbiw	r26, 0x09	; 9
  t->state = TIMEQ;
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	1a 96       	adiw	r26, 0x0a	; 10
     428:	8c 93       	st	X, r24
     42a:	1a 97       	sbiw	r26, 0x0a	; 10

  t->spl = lo8(sp);       // store stack pointer
     42c:	ec 93       	st	X, r30
  t->sph = hi8(sp);
     42e:	11 96       	adiw	r26, 0x01	; 1
     430:	fc 93       	st	X, r31
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();

}
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	cf 90       	pop	r12

  t->spl = lo8(sp);       // store stack pointer
  t->sph = hi8(sp);
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     43e:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_13>

00000442 <trtCreateSemaphore>:

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     442:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     444:	e8 2f       	mov	r30, r24
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	e8 51       	subi	r30, 0x18	; 24
     44a:	fd 4f       	sbci	r31, 0xFD	; 253
     44c:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     44e:	78 94       	sei
     450:	08 95       	ret

00000452 <trtWait>:
void trtWait(uint8_t semnbr) {

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     452:	20 91 e9 02 	lds	r18, 0x02E9

  cli(); // disable interrupts
     456:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     458:	e8 2f       	mov	r30, r24
     45a:	f0 e0       	ldi	r31, 0x00	; 0
  if ((*s) > 0) {
     45c:	e9 51       	subi	r30, 0x19	; 25
     45e:	fd 4f       	sbci	r31, 0xFD	; 253
     460:	91 ad       	ldd	r25, Z+57	; 0x39
     462:	99 23       	and	r25, r25
     464:	19 f0       	breq	.+6      	; 0x46c <trtWait+0x1a>
    (*s)--;
     466:	91 50       	subi	r25, 0x01	; 1
     468:	91 af       	std	Z+57, r25	; 0x39
     46a:	0a c0       	rjmp	.+20     	; 0x480 <trtWait+0x2e>
void trtWait(uint8_t semnbr) {

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     46c:	9b e0       	ldi	r25, 0x0B	; 11
     46e:	29 9f       	mul	r18, r25
     470:	f0 01       	movw	r30, r0
     472:	11 24       	eor	r1, r1
  s = &kernel.semaphores[semnbr-1];
  if ((*s) > 0) {
    (*s)--;
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     474:	e6 51       	subi	r30, 0x16	; 22
     476:	fd 4f       	sbci	r31, 0xFD	; 253
     478:	8e 5f       	subi	r24, 0xFE	; 254
     47a:	82 87       	std	Z+10, r24	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     47c:	0e 94 75 00 	call	0xea	; 0xea <__vector_13>
  }

  sei(); // reenable interrupts
     480:	78 94       	sei
     482:	08 95       	ret

00000484 <trtSignal>:
}

void trtSignal(uint8_t semnbr) {
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     48e:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     490:	f0 91 e8 02 	lds	r31, 0x02E8
void trtSignal(uint8_t semnbr) {

  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;
     494:	e0 e0       	ldi	r30, 0x00	; 0

void trtSignal(uint8_t semnbr) {

  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
     496:	4f ef       	ldi	r20, 0xFF	; 255
     498:	5f ef       	ldi	r21, 0xFF	; 255
     49a:	ba 01       	movw	r22, r20
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     49c:	91 e0       	ldi	r25, 0x01	; 1
    t = &kernel.tasks[i];
     49e:	db e0       	ldi	r29, 0x0B	; 11
     4a0:	fd 2e       	mov	r15, r29
    if (t->state == (semnbr + WAIT_OFFSET)) {
     4a2:	c8 2f       	mov	r28, r24
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
     4a6:	22 96       	adiw	r28, 0x02	; 2
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <trtSignal+0x5c>
    t = &kernel.tasks[i];
     4aa:	f9 9e       	mul	r15, r25
     4ac:	d0 01       	movw	r26, r0
     4ae:	11 24       	eor	r1, r1
     4b0:	a6 51       	subi	r26, 0x16	; 22
     4b2:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     4b4:	1a 96       	adiw	r26, 0x0a	; 10
     4b6:	2c 91       	ld	r18, X
     4b8:	1a 97       	sbiw	r26, 0x0a	; 10
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	2c 17       	cp	r18, r28
     4be:	3d 07       	cpc	r19, r29
     4c0:	71 f4       	brne	.+28     	; 0x4de <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     4c2:	16 96       	adiw	r26, 0x06	; 6
     4c4:	0d 91       	ld	r16, X+
     4c6:	1d 91       	ld	r17, X+
     4c8:	2d 91       	ld	r18, X+
     4ca:	3c 91       	ld	r19, X
     4cc:	19 97       	sbiw	r26, 0x09	; 9
     4ce:	40 17       	cp	r20, r16
     4d0:	51 07       	cpc	r21, r17
     4d2:	62 07       	cpc	r22, r18
     4d4:	73 07       	cpc	r23, r19
     4d6:	18 f0       	brcs	.+6      	; 0x4de <trtSignal+0x5a>
     4d8:	e9 2f       	mov	r30, r25
     4da:	b9 01       	movw	r22, r18
     4dc:	a8 01       	movw	r20, r16
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     4de:	9f 5f       	subi	r25, 0xFF	; 255
     4e0:	f9 17       	cp	r31, r25
     4e2:	18 f7       	brcc	.-58     	; 0x4aa <trtSignal+0x26>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     4e4:	e1 11       	cpse	r30, r1
     4e6:	08 c0       	rjmp	.+16     	; 0x4f8 <trtSignal+0x74>
    kernel.semaphores[semnbr-1]++;
     4e8:	e8 2f       	mov	r30, r24
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	e9 51       	subi	r30, 0x19	; 25
     4ee:	fd 4f       	sbci	r31, 0xFD	; 253
     4f0:	81 ad       	ldd	r24, Z+57	; 0x39
     4f2:	8f 5f       	subi	r24, 0xFF	; 255
     4f4:	81 af       	std	Z+57, r24	; 0x39
     4f6:	0a c0       	rjmp	.+20     	; 0x50c <trtSignal+0x88>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     4f8:	8b e0       	ldi	r24, 0x0B	; 11
     4fa:	e8 9f       	mul	r30, r24
     4fc:	f0 01       	movw	r30, r0
     4fe:	11 24       	eor	r1, r1
     500:	e8 51       	subi	r30, 0x18	; 24
     502:	fd 4f       	sbci	r31, 0xFD	; 253
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     508:	0e 94 75 00 	call	0xea	; 0xea <__vector_13>
  }

  sei(); // reenable interrupts
     50c:	78 94       	sei
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	08 95       	ret

0000051a <trtCurrentTime>:

uint32_t trtCurrentTime(void) {
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     51e:	80 91 84 00 	lds	r24, 0x0084
     522:	90 91 85 00 	lds	r25, 0x0085
     526:	00 91 2a 03 	lds	r16, 0x032A
     52a:	10 91 2b 03 	lds	r17, 0x032B
     52e:	20 91 2c 03 	lds	r18, 0x032C
     532:	30 91 2d 03 	lds	r19, 0x032D
     536:	98 01       	movw	r18, r16
     538:	11 27       	eor	r17, r17
     53a:	00 27       	eor	r16, r16
     53c:	08 0f       	add	r16, r24
     53e:	19 1f       	adc	r17, r25
     540:	21 1d       	adc	r18, r1
     542:	31 1d       	adc	r19, r1
}
     544:	b8 01       	movw	r22, r16
     546:	c9 01       	movw	r24, r18
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	08 95       	ret

0000054e <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     54e:	e0 91 e9 02 	lds	r30, 0x02E9
     552:	ab e0       	ldi	r26, 0x0B	; 11
     554:	ea 9f       	mul	r30, r26
     556:	f0 01       	movw	r30, r0
     558:	11 24       	eor	r1, r1
     55a:	e6 51       	subi	r30, 0x16	; 22
     55c:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     55e:	f8 94       	cli

  t->state = TIMEQ;
     560:	a2 e0       	ldi	r26, 0x02	; 2
     562:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     564:	62 83       	std	Z+2, r22	; 0x02
     566:	73 83       	std	Z+3, r23	; 0x03
     568:	84 83       	std	Z+4, r24	; 0x04
     56a:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     56c:	26 83       	std	Z+6, r18	; 0x06
     56e:	37 83       	std	Z+7, r19	; 0x07
     570:	40 87       	std	Z+8, r20	; 0x08
     572:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     574:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_13>

00000578 <trtGetRelease>:
}


uint32_t trtGetRelease(void) {
  return kernel.tasks[kernel.running].release;
     578:	e0 91 e9 02 	lds	r30, 0x02E9
     57c:	8b e0       	ldi	r24, 0x0B	; 11
     57e:	e8 9f       	mul	r30, r24
     580:	f0 01       	movw	r30, r0
     582:	11 24       	eor	r1, r1
     584:	e8 51       	subi	r30, 0x18	; 24
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	df 01       	movw	r26, r30
     58a:	14 96       	adiw	r26, 0x04	; 4
     58c:	64 81       	ldd	r22, Z+4	; 0x04
     58e:	11 96       	adiw	r26, 0x01	; 1
     590:	7c 91       	ld	r23, X
     592:	11 97       	sbiw	r26, 0x01	; 1
}
     594:	12 96       	adiw	r26, 0x02	; 2
     596:	8c 91       	ld	r24, X
     598:	12 97       	sbiw	r26, 0x02	; 2
     59a:	13 96       	adiw	r26, 0x03	; 3
     59c:	9c 91       	ld	r25, X
     59e:	08 95       	ret

000005a0 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
  return kernel.tasks[kernel.running].deadline;
     5a0:	e0 91 e9 02 	lds	r30, 0x02E9
     5a4:	8b e0       	ldi	r24, 0x0B	; 11
     5a6:	e8 9f       	mul	r30, r24
     5a8:	f0 01       	movw	r30, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	e8 51       	subi	r30, 0x18	; 24
     5ae:	fd 4f       	sbci	r31, 0xFD	; 253
     5b0:	df 01       	movw	r26, r30
     5b2:	18 96       	adiw	r26, 0x08	; 8
     5b4:	60 85       	ldd	r22, Z+8	; 0x08
     5b6:	11 96       	adiw	r26, 0x01	; 1
     5b8:	7c 91       	ld	r23, X
     5ba:	11 97       	sbiw	r26, 0x01	; 1
}
     5bc:	12 96       	adiw	r26, 0x02	; 2
     5be:	8c 91       	ld	r24, X
     5c0:	12 97       	sbiw	r26, 0x02	; 2
     5c2:	13 96       	adiw	r26, 0x03	; 3
     5c4:	9c 91       	ld	r25, X
     5c6:	08 95       	ret

000005c8 <trtTerminate>:

void trtTerminate(void) {

  cli();
     5c8:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     5ca:	e0 91 e9 02 	lds	r30, 0x02E9
     5ce:	8b e0       	ldi	r24, 0x0B	; 11
     5d0:	e8 9f       	mul	r30, r24
     5d2:	f0 01       	movw	r30, r0
     5d4:	11 24       	eor	r1, r1
     5d6:	e8 51       	subi	r30, 0x18	; 24
     5d8:	fd 4f       	sbci	r31, 0xFD	; 253
     5da:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5dc:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_13>

000005e0 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     5e0:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     5e2:	e8 2f       	mov	r30, r24
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
  temp = *s ;
     5e6:	e9 51       	subi	r30, 0x19	; 25
     5e8:	fd 4f       	sbci	r31, 0xFD	; 253
     5ea:	81 ad       	ldd	r24, Z+57	; 0x39
  if ((*s) > 0) {
     5ec:	88 23       	and	r24, r24
     5ee:	19 f0       	breq	.+6      	; 0x5f6 <trtAccept+0x16>
    (*s)--;
     5f0:	98 2f       	mov	r25, r24
     5f2:	91 50       	subi	r25, 0x01	; 1
     5f4:	91 af       	std	Z+57, r25	; 0x39
  } 
  sei(); // reenable interrupts
     5f6:	78 94       	sei
  return temp ;
}
     5f8:	08 95       	ret

000005fa <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     5fa:	87 e6       	ldi	r24, 0x67	; 103
     5fc:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     600:	e1 ec       	ldi	r30, 0xC1	; 193
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	88 e1       	ldi	r24, 0x18	; 24
     606:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     608:	10 92 41 02 	sts	0x0241, r1
     60c:	10 92 40 02 	sts	0x0240, r1
  tx_out = 0;
     610:	10 92 3f 02 	sts	0x023F, r1
     614:	10 92 3e 02 	sts	0x023E, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     618:	80 81       	ld	r24, Z
     61a:	80 68       	ori	r24, 0x80	; 128
     61c:	80 83       	st	Z, r24
     61e:	08 95       	ret

00000620 <__vector_21>:
}



ISR( USART0_UDRE_vect )
{
     620:	1f 92       	push	r1
     622:	0f 92       	push	r0
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	0f 92       	push	r0
     628:	11 24       	eor	r1, r1
     62a:	0b b6       	in	r0, 0x3b	; 59
     62c:	0f 92       	push	r0
     62e:	2f 93       	push	r18
     630:	3f 93       	push	r19
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	ef 93       	push	r30
     638:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     63a:	20 91 40 02 	lds	r18, 0x0240
     63e:	30 91 41 02 	lds	r19, 0x0241
     642:	80 91 3e 02 	lds	r24, 0x023E
     646:	90 91 3f 02 	lds	r25, 0x023F
     64a:	28 17       	cp	r18, r24
     64c:	39 07       	cpc	r19, r25
     64e:	31 f4       	brne	.+12     	; 0x65c <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     650:	80 91 c1 00 	lds	r24, 0x00C1
     654:	8f 7d       	andi	r24, 0xDF	; 223
     656:	80 93 c1 00 	sts	0x00C1, r24
     65a:	1d c0       	rjmp	.+58     	; 0x696 <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     65c:	e0 91 3e 02 	lds	r30, 0x023E
     660:	f0 91 3f 02 	lds	r31, 0x023F
     664:	ea 58       	subi	r30, 0x8A	; 138
     666:	fe 4f       	sbci	r31, 0xFE	; 254
     668:	80 81       	ld	r24, Z
     66a:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     66e:	80 91 3e 02 	lds	r24, 0x023E
     672:	90 91 3f 02 	lds	r25, 0x023F
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	90 93 3f 02 	sts	0x023F, r25
     67c:	80 93 3e 02 	sts	0x023E, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     680:	80 91 3e 02 	lds	r24, 0x023E
     684:	90 91 3f 02 	lds	r25, 0x023F
     688:	88 3c       	cpi	r24, 0xC8	; 200
     68a:	91 05       	cpc	r25, r1
     68c:	21 f4       	brne	.+8      	; 0x696 <__vector_21+0x76>
     68e:	10 92 3f 02 	sts	0x023F, r1
     692:	10 92 3e 02 	sts	0x023E, r1
  }
}
     696:	ff 91       	pop	r31
     698:	ef 91       	pop	r30
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	3f 91       	pop	r19
     6a0:	2f 91       	pop	r18
     6a2:	0f 90       	pop	r0
     6a4:	0b be       	out	0x3b, r0	; 59
     6a6:	0f 90       	pop	r0
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	0f 90       	pop	r0
     6ac:	1f 90       	pop	r1
     6ae:	18 95       	reti

000006b0 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     6b0:	cf 93       	push	r28
     6b2:	c8 2f       	mov	r28, r24
  if (c == '\n') uart_putchar('\r', stream);
     6b4:	8a 30       	cpi	r24, 0x0A	; 10
     6b6:	19 f4       	brne	.+6      	; 0x6be <uart_putchar+0xe>
     6b8:	8d e0       	ldi	r24, 0x0D	; 13
     6ba:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
  char i = tx_in;
     6be:	20 91 40 02 	lds	r18, 0x0240
     6c2:	30 91 41 02 	lds	r19, 0x0241
  i++;
     6c6:	2f 5f       	subi	r18, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     6c8:	28 3c       	cpi	r18, 0xC8	; 200
     6ca:	09 f4       	brne	.+2      	; 0x6ce <uart_putchar+0x1e>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
  tx_buff[tx_in] = c;
     6ce:	e0 91 40 02 	lds	r30, 0x0240
     6d2:	f0 91 41 02 	lds	r31, 0x0241
     6d6:	ea 58       	subi	r30, 0x8A	; 138
     6d8:	fe 4f       	sbci	r31, 0xFE	; 254
     6da:	c0 83       	st	Z, r28
  while( i == tx_out);		// until at least one byte free
     6dc:	82 2f       	mov	r24, r18
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	20 91 3e 02 	lds	r18, 0x023E
     6e4:	30 91 3f 02 	lds	r19, 0x023F
     6e8:	82 17       	cp	r24, r18
     6ea:	93 07       	cpc	r25, r19
     6ec:	c9 f3       	breq	.-14     	; 0x6e0 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     6ee:	90 93 41 02 	sts	0x0241, r25
     6f2:	80 93 40 02 	sts	0x0240, r24
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     6f6:	80 91 c1 00 	lds	r24, 0x00C1
     6fa:	80 62       	ori	r24, 0x20	; 32
     6fc:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     708:	1f 92       	push	r1
     70a:	0f 92       	push	r0
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	0f 92       	push	r0
     710:	11 24       	eor	r1, r1
     712:	0b b6       	in	r0, 0x3b	; 59
     714:	0f 92       	push	r0
     716:	2f 93       	push	r18
     718:	3f 93       	push	r19
     71a:	4f 93       	push	r20
     71c:	5f 93       	push	r21
     71e:	6f 93       	push	r22
     720:	7f 93       	push	r23
     722:	8f 93       	push	r24
     724:	9f 93       	push	r25
     726:	af 93       	push	r26
     728:	bf 93       	push	r27
     72a:	ef 93       	push	r30
     72c:	ff 93       	push	r31
	trt_rx_c = UDR0;
     72e:	80 91 c6 00 	lds	r24, 0x00C6
     732:	80 93 3a 03 	sts	0x033A, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e 94 42 02 	call	0x484	; 0x484 <trtSignal>
}
     73c:	ff 91       	pop	r31
     73e:	ef 91       	pop	r30
     740:	bf 91       	pop	r27
     742:	af 91       	pop	r26
     744:	9f 91       	pop	r25
     746:	8f 91       	pop	r24
     748:	7f 91       	pop	r23
     74a:	6f 91       	pop	r22
     74c:	5f 91       	pop	r21
     74e:	4f 91       	pop	r20
     750:	3f 91       	pop	r19
     752:	2f 91       	pop	r18
     754:	0f 90       	pop	r0
     756:	0b be       	out	0x3b, r0	; 59
     758:	0f 90       	pop	r0
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	0f 90       	pop	r0
     75e:	1f 90       	pop	r1
     760:	18 95       	reti

00000762 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	8c 01       	movw	r16, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     770:	80 91 42 02 	lds	r24, 0x0242
     774:	90 91 43 02 	lds	r25, 0x0243
     778:	89 2b       	or	r24, r25
     77a:	09 f0       	breq	.+2      	; 0x77e <uart_getchar+0x1c>
     77c:	9c c0       	rjmp	.+312    	; 0x8b6 <uart_getchar+0x154>
     77e:	c4 e4       	ldi	r28, 0x44	; 68
     780:	d2 e0       	ldi	r29, 0x02	; 2
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	0e 94 29 02 	call	0x452	; 0x452 <trtWait>
	if (UCSR0A & _BV(FE0))
     788:	80 91 c0 00 	lds	r24, 0x00C0
     78c:	84 fd       	sbrc	r24, 4
     78e:	a6 c0       	rjmp	.+332    	; 0x8dc <uart_getchar+0x17a>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     790:	80 91 c0 00 	lds	r24, 0x00C0
     794:	83 fd       	sbrc	r24, 3
     796:	a5 c0       	rjmp	.+330    	; 0x8e2 <uart_getchar+0x180>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     798:	80 91 3a 03 	lds	r24, 0x033A

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     79c:	8d 30       	cpi	r24, 0x0D	; 13
     79e:	79 f4       	brne	.+30     	; 0x7be <uart_getchar+0x5c>
	  c = '\n';
	if (c == '\n')
	  {
	    *cp = c;
     7a0:	8a e0       	ldi	r24, 0x0A	; 10
     7a2:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
     7a4:	b8 01       	movw	r22, r16
     7a6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
	    rxp = b;
     7aa:	84 e4       	ldi	r24, 0x44	; 68
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	90 93 43 02 	sts	0x0243, r25
     7b2:	80 93 42 02 	sts	0x0242, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	0e 94 42 02 	call	0x484	; 0x484 <trtSignal>
	    break;
     7bc:	7c c0       	rjmp	.+248    	; 0x8b6 <uart_getchar+0x154>
	  c = trt_rx_c ; //c = UDR0; -- CHANGED

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
	  c = '\n';
	if (c == '\n')
     7be:	8a 30       	cpi	r24, 0x0A	; 10
     7c0:	79 f3       	breq	.-34     	; 0x7a0 <uart_getchar+0x3e>
	    rxp = b;
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
	    break;
	  }
	else if (c == '\t')
     7c2:	89 30       	cpi	r24, 0x09	; 9
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <uart_getchar+0x66>
	  c = ' ';
     7c6:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     7c8:	98 2f       	mov	r25, r24
     7ca:	90 52       	subi	r25, 0x20	; 32
     7cc:	9f 35       	cpi	r25, 0x5F	; 95
     7ce:	10 f0       	brcs	.+4      	; 0x7d4 <uart_getchar+0x72>
     7d0:	80 3a       	cpi	r24, 0xA0	; 160
     7d2:	60 f0       	brcs	.+24     	; 0x7ec <uart_getchar+0x8a>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	c3 39       	cpi	r28, 0x93	; 147
     7d8:	d9 07       	cpc	r29, r25
     7da:	19 f4       	brne	.+6      	; 0x7e2 <uart_getchar+0x80>
	      uart_putchar('\a', stream);
     7dc:	b8 01       	movw	r22, r16
     7de:	87 e0       	ldi	r24, 0x07	; 7
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <uart_getchar+0x84>
	    else
	      {
		*cp++ = c;
     7e2:	89 93       	st	Y+, r24
		uart_putchar(c, stream);
     7e4:	b8 01       	movw	r22, r16
     7e6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
     7ea:	cb cf       	rjmp	.-106    	; 0x782 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     7ec:	82 31       	cpi	r24, 0x12	; 18
     7ee:	21 f1       	breq	.+72     	; 0x838 <uart_getchar+0xd6>
     7f0:	30 f4       	brcc	.+12     	; 0x7fe <uart_getchar+0x9c>
     7f2:	83 30       	cpi	r24, 0x03	; 3
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <uart_getchar+0x96>
     7f6:	75 c0       	rjmp	.+234    	; 0x8e2 <uart_getchar+0x180>
     7f8:	88 30       	cpi	r24, 0x08	; 8
     7fa:	19 f6       	brne	.-122    	; 0x782 <uart_getchar+0x20>
     7fc:	09 c0       	rjmp	.+18     	; 0x810 <uart_getchar+0xae>
     7fe:	87 31       	cpi	r24, 0x17	; 23
     800:	09 f4       	brne	.+2      	; 0x804 <uart_getchar+0xa2>
     802:	4d c0       	rjmp	.+154    	; 0x89e <uart_getchar+0x13c>
     804:	8f 37       	cpi	r24, 0x7F	; 127
     806:	21 f0       	breq	.+8      	; 0x810 <uart_getchar+0xae>
     808:	85 31       	cpi	r24, 0x15	; 21
     80a:	09 f0       	breq	.+2      	; 0x80e <uart_getchar+0xac>
     80c:	ba cf       	rjmp	.-140    	; 0x782 <uart_getchar+0x20>
     80e:	34 c0       	rjmp	.+104    	; 0x878 <uart_getchar+0x116>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     810:	e2 e0       	ldi	r30, 0x02	; 2
     812:	c4 34       	cpi	r28, 0x44	; 68
     814:	de 07       	cpc	r29, r30
     816:	09 f0       	breq	.+2      	; 0x81a <uart_getchar+0xb8>
     818:	08 f4       	brcc	.+2      	; 0x81c <uart_getchar+0xba>
     81a:	b3 cf       	rjmp	.-154    	; 0x782 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     81c:	b8 01       	movw	r22, r16
     81e:	88 e0       	ldi	r24, 0x08	; 8
     820:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
		uart_putchar(' ', stream);
     824:	b8 01       	movw	r22, r16
     826:	80 e2       	ldi	r24, 0x20	; 32
     828:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
		uart_putchar('\b', stream);
     82c:	b8 01       	movw	r22, r16
     82e:	88 e0       	ldi	r24, 0x08	; 8
     830:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
		cp--;
     834:	21 97       	sbiw	r28, 0x01	; 1
     836:	a5 cf       	rjmp	.-182    	; 0x782 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     838:	b8 01       	movw	r22, r16
     83a:	8d e0       	ldi	r24, 0x0D	; 13
     83c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     840:	54 e4       	ldi	r21, 0x44	; 68
     842:	e5 2e       	mov	r14, r21
     844:	52 e0       	ldi	r21, 0x02	; 2
     846:	f5 2e       	mov	r15, r21
     848:	06 c0       	rjmp	.+12     	; 0x856 <uart_getchar+0xf4>
	      uart_putchar(*cp2, stream);
     84a:	b8 01       	movw	r22, r16
     84c:	f7 01       	movw	r30, r14
     84e:	81 91       	ld	r24, Z+
     850:	7f 01       	movw	r14, r30
     852:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     856:	ec 16       	cp	r14, r28
     858:	fd 06       	cpc	r15, r29
     85a:	b8 f3       	brcs	.-18     	; 0x84a <uart_getchar+0xe8>
     85c:	92 cf       	rjmp	.-220    	; 0x782 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     85e:	b8 01       	movw	r22, r16
     860:	88 e0       	ldi	r24, 0x08	; 8
     862:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
		uart_putchar(' ', stream);
     866:	b8 01       	movw	r22, r16
     868:	80 e2       	ldi	r24, 0x20	; 32
     86a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
		uart_putchar('\b', stream);
     86e:	b8 01       	movw	r22, r16
     870:	88 e0       	ldi	r24, 0x08	; 8
     872:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
		cp--;
     876:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     878:	f2 e0       	ldi	r31, 0x02	; 2
     87a:	c4 34       	cpi	r28, 0x44	; 68
     87c:	df 07       	cpc	r29, r31
     87e:	09 f0       	breq	.+2      	; 0x882 <uart_getchar+0x120>
     880:	70 f7       	brcc	.-36     	; 0x85e <uart_getchar+0xfc>
     882:	7f cf       	rjmp	.-258    	; 0x782 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     884:	b8 01       	movw	r22, r16
     886:	88 e0       	ldi	r24, 0x08	; 8
     888:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
		uart_putchar(' ', stream);
     88c:	b8 01       	movw	r22, r16
     88e:	80 e2       	ldi	r24, 0x20	; 32
     890:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
		uart_putchar('\b', stream);
     894:	b8 01       	movw	r22, r16
     896:	88 e0       	ldi	r24, 0x08	; 8
     898:	0e 94 58 03 	call	0x6b0	; 0x6b0 <uart_putchar>
		cp--;
     89c:	e7 01       	movw	r28, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	c4 34       	cpi	r28, 0x44	; 68
     8a2:	d8 07       	cpc	r29, r24
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <uart_getchar+0x146>
     8a6:	08 f4       	brcc	.+2      	; 0x8aa <uart_getchar+0x148>
     8a8:	6c cf       	rjmp	.-296    	; 0x782 <uart_getchar+0x20>
     8aa:	fe 01       	movw	r30, r28
     8ac:	82 91       	ld	r24, -Z
     8ae:	7f 01       	movw	r14, r30
     8b0:	80 32       	cpi	r24, 0x20	; 32
     8b2:	41 f7       	brne	.-48     	; 0x884 <uart_getchar+0x122>
     8b4:	66 cf       	rjmp	.-308    	; 0x782 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     8b6:	e0 91 42 02 	lds	r30, 0x0242
     8ba:	f0 91 43 02 	lds	r31, 0x0243
     8be:	20 81       	ld	r18, Z
  if (c == '\n')
     8c0:	2a 30       	cpi	r18, 0x0A	; 10
     8c2:	31 f0       	breq	.+12     	; 0x8d0 <uart_getchar+0x16e>
	      }
	    break;
	  }
      }

  c = *rxp++;
     8c4:	31 96       	adiw	r30, 0x01	; 1
     8c6:	f0 93 43 02 	sts	0x0243, r31
     8ca:	e0 93 42 02 	sts	0x0242, r30
     8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <uart_getchar+0x176>
  if (c == '\n')
    rxp = 0;
     8d0:	10 92 43 02 	sts	0x0243, r1
     8d4:	10 92 42 02 	sts	0x0242, r1

  return c;
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <uart_getchar+0x184>
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     8dc:	2e ef       	ldi	r18, 0xFE	; 254
     8de:	3f ef       	ldi	r19, 0xFF	; 255
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <uart_getchar+0x184>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     8e2:	2f ef       	ldi	r18, 0xFF	; 255
     8e4:	3f ef       	ldi	r19, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     8e6:	c9 01       	movw	r24, r18
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	08 95       	ret

000008f6 <__vector_16>:
// Full duplex transmit/receive
// sends ir character (if ready)
// receives ir char (if valid)
// builds ir receive buffer
ISR (TIMER0_COMPA_vect) 
begin  
     8f6:	1f 92       	push	r1
     8f8:	0f 92       	push	r0
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	0f 92       	push	r0
     8fe:	11 24       	eor	r1, r1
     900:	0b b6       	in	r0, 0x3b	; 59
     902:	0f 92       	push	r0
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	ef 93       	push	r30
     90a:	ff 93       	push	r31
  	//time++ ; // running cpu time
	
	//**********************
  	// send an ir char if tx is ready and still char in buffer to send
	// and USART is ready
	if (ir_tx_ready ){ //&& ir_tx_buffer[ir_tx_count]>0
     90c:	80 91 dc 02 	lds	r24, 0x02DC
     910:	88 23       	and	r24, r24
     912:	01 f1       	breq	.+64     	; 0x954 <__vector_16+0x5e>
		if (UCSR1A & (1<<UDRE1)) UDR1 = ir_tx_buffer[ir_tx_count++];
     914:	80 91 c8 00 	lds	r24, 0x00C8
     918:	85 ff       	sbrs	r24, 5
     91a:	0c c0       	rjmp	.+24     	; 0x934 <__vector_16+0x3e>
     91c:	80 91 37 03 	lds	r24, 0x0337
     920:	e8 2f       	mov	r30, r24
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	e4 56       	subi	r30, 0x64	; 100
     926:	fd 4f       	sbci	r31, 0xFD	; 253
     928:	90 81       	ld	r25, Z
     92a:	90 93 ce 00 	sts	0x00CE, r25
     92e:	8f 5f       	subi	r24, 0xFF	; 255
     930:	80 93 37 03 	sts	0x0337, r24
		if (ir_tx_buffer[ir_tx_count]==0x00) ir_tx_ready = 0 ; // end of buffer
     934:	e0 91 37 03 	lds	r30, 0x0337
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	e4 56       	subi	r30, 0x64	; 100
     93c:	fd 4f       	sbci	r31, 0xFD	; 253
     93e:	80 81       	ld	r24, Z
     940:	81 11       	cpse	r24, r1
     942:	02 c0       	rjmp	.+4      	; 0x948 <__vector_16+0x52>
     944:	10 92 dc 02 	sts	0x02DC, r1
		if (ir_tx_count >= buffer_size) ir_tx_ready = 0; // buffer overrun
     948:	80 91 37 03 	lds	r24, 0x0337
     94c:	80 34       	cpi	r24, 0x40	; 64
     94e:	10 f0       	brcs	.+4      	; 0x954 <__vector_16+0x5e>
     950:	10 92 dc 02 	sts	0x02DC, r1
	}
	
	//**********************
  	// recv an ir char if data ready 
  	// otherwise set c to null 
	if (UCSR1A & (1<<RXC1) ) {
     954:	80 91 c8 00 	lds	r24, 0x00C8
     958:	87 ff       	sbrs	r24, 7
     95a:	2b c0       	rjmp	.+86     	; 0x9b2 <__vector_16+0xbc>
		c = UDR1 ; // valid char 
     95c:	80 91 ce 00 	lds	r24, 0x00CE
	else c = 0 ; // nonvalid

	//**********************
	// append character to the received string
	// if character is valid and we expect a string
	if (c>0) { //&& (ir_rx_ready==0)) {
     960:	88 23       	and	r24, r24
     962:	39 f1       	breq	.+78     	; 0x9b2 <__vector_16+0xbc>

		if (c == start_token) { // restart the string
     964:	83 32       	cpi	r24, 0x23	; 35
     966:	19 f4       	brne	.+6      	; 0x96e <__vector_16+0x78>
			ir_rx_count = 0 ;
     968:	10 92 36 03 	sts	0x0336, r1
     96c:	22 c0       	rjmp	.+68     	; 0x9b2 <__vector_16+0xbc>
		}

		else if (c == end_token){ // end the string
     96e:	85 32       	cpi	r24, 0x25	; 37
     970:	51 f4       	brne	.+20     	; 0x986 <__vector_16+0x90>
			ir_rx_buffer[ir_rx_count] = 0x00 ;
     972:	e0 91 36 03 	lds	r30, 0x0336
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	e5 5c       	subi	r30, 0xC5	; 197
     97a:	fc 4f       	sbci	r31, 0xFC	; 252
     97c:	10 82       	st	Z, r1
			ir_rx_ready = 1 ;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 dd 02 	sts	0x02DD, r24
     984:	16 c0       	rjmp	.+44     	; 0x9b2 <__vector_16+0xbc>
		}

		else { // add to string and check for buffer overrun
			ir_rx_buffer[ir_rx_count++] = c ;
     986:	90 91 36 03 	lds	r25, 0x0336
     98a:	e9 2f       	mov	r30, r25
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	e5 5c       	subi	r30, 0xC5	; 197
     990:	fc 4f       	sbci	r31, 0xFC	; 252
     992:	80 83       	st	Z, r24
     994:	9f 5f       	subi	r25, 0xFF	; 255
     996:	90 93 36 03 	sts	0x0336, r25
			if (ir_rx_count >= buffer_size) { // buffer overrun
     99a:	80 91 36 03 	lds	r24, 0x0336
     99e:	80 34       	cpi	r24, 0x40	; 64
     9a0:	40 f0       	brcs	.+16     	; 0x9b2 <__vector_16+0xbc>
				ir_rx_ready = 2;
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	80 93 dd 02 	sts	0x02DD, r24
				ir_rx_buffer[buffer_size-1] = 0x00 ;
     9a8:	10 92 7a 03 	sts	0x037A, r1
				ir_rx_count = buffer_size -1 ; //???
     9ac:	8f e3       	ldi	r24, 0x3F	; 63
     9ae:	80 93 36 03 	sts	0x0336, r24
			}
		}

	} // end if c>0
	
end  
     9b2:	ff 91       	pop	r31
     9b4:	ef 91       	pop	r30
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	0f 90       	pop	r0
     9bc:	0b be       	out	0x3b, r0	; 59
     9be:	0f 90       	pop	r0
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	0f 90       	pop	r0
     9c4:	1f 90       	pop	r1
     9c6:	18 95       	reti

000009c8 <ir_send_packet>:
*/
//**********************************************************
// IR send
// Input transmitter id and string packet payload
void ir_send_packet(char tx_id, char ir_data[])
begin
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
	char ir_tx_ck_sum, ir_tx_ck_sum1, ir_tx_ck_sum2 ;
	char i ;
	
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
     9cc:	fb 01       	movw	r30, r22
     9ce:	01 90       	ld	r0, Z+
     9d0:	00 20       	and	r0, r0
     9d2:	e9 f7       	brne	.-6      	; 0x9ce <ir_send_packet+0x6>
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	e6 1b       	sub	r30, r22
     9d8:	f7 0b       	sbc	r31, r23
     9da:	40 e0       	ldi	r20, 0x00	; 0
begin
	char ir_tx_ck_sum, ir_tx_ck_sum1, ir_tx_ck_sum2 ;
	char i ;
	
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
     9dc:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0; i<strlen(ir_data); i++)
     9de:	06 c0       	rjmp	.+12     	; 0x9ec <ir_send_packet+0x24>
		ir_tx_ck_sum ^= ir_data[i] ;
     9e0:	db 01       	movw	r26, r22
     9e2:	a2 0f       	add	r26, r18
     9e4:	b3 1f       	adc	r27, r19
     9e6:	2c 91       	ld	r18, X
     9e8:	92 27       	eor	r25, r18
	char ir_tx_ck_sum, ir_tx_ck_sum1, ir_tx_ck_sum2 ;
	char i ;
	
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
     9ea:	4f 5f       	subi	r20, 0xFF	; 255
     9ec:	24 2f       	mov	r18, r20
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	2e 17       	cp	r18, r30
     9f2:	3f 07       	cpc	r19, r31
     9f4:	a8 f3       	brcs	.-22     	; 0x9e0 <ir_send_packet+0x18>
	// chop the check sum into two 1/2 bytes and add a bit
	ir_tx_ck_sum1 = 0x10 + (ir_tx_ck_sum & 0x0f) ;
	ir_tx_ck_sum2 = 0x10 + ((ir_tx_ck_sum>>4) & 0x0f) ;

	// format send string
  	sprintf(ir_tx_buffer,"%c%c%s%c%c%c", 
     9f6:	1f 92       	push	r1
     9f8:	25 e2       	ldi	r18, 0x25	; 37
     9fa:	2f 93       	push	r18
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
		ir_tx_ck_sum ^= ir_data[i] ;
	// chop the check sum into two 1/2 bytes and add a bit
	ir_tx_ck_sum1 = 0x10 + (ir_tx_ck_sum & 0x0f) ;
	ir_tx_ck_sum2 = 0x10 + ((ir_tx_ck_sum>>4) & 0x0f) ;
     9fc:	29 2f       	mov	r18, r25
     9fe:	22 95       	swap	r18
     a00:	2f 70       	andi	r18, 0x0F	; 15
     a02:	20 5f       	subi	r18, 0xF0	; 240

	// format send string
  	sprintf(ir_tx_buffer,"%c%c%s%c%c%c", 
     a04:	1f 92       	push	r1
     a06:	2f 93       	push	r18
	// compute check sum on input data string only
	ir_tx_ck_sum = 0;
	for (i=0; i<strlen(ir_data); i++)
		ir_tx_ck_sum ^= ir_data[i] ;
	// chop the check sum into two 1/2 bytes and add a bit
	ir_tx_ck_sum1 = 0x10 + (ir_tx_ck_sum & 0x0f) ;
     a08:	9f 70       	andi	r25, 0x0F	; 15
     a0a:	90 5f       	subi	r25, 0xF0	; 240
	ir_tx_ck_sum2 = 0x10 + ((ir_tx_ck_sum>>4) & 0x0f) ;

	// format send string
  	sprintf(ir_tx_buffer,"%c%c%s%c%c%c", 
     a0c:	1f 92       	push	r1
     a0e:	9f 93       	push	r25
     a10:	7f 93       	push	r23
     a12:	6f 93       	push	r22
     a14:	1f 92       	push	r1
     a16:	8f 93       	push	r24
     a18:	1f 92       	push	r1
     a1a:	83 e2       	ldi	r24, 0x23	; 35
     a1c:	8f 93       	push	r24
     a1e:	8e e0       	ldi	r24, 0x0E	; 14
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	9f 93       	push	r25
     a24:	8f 93       	push	r24
     a26:	8c e9       	ldi	r24, 0x9C	; 156
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	9f 93       	push	r25
     a2c:	8f 93       	push	r24
     a2e:	0e 94 18 08 	call	0x1030	; 0x1030 <sprintf>
		start_token, tx_id, ir_data, ir_tx_ck_sum1, ir_tx_ck_sum2, end_token );
  	ir_tx_count = 0 ;
     a32:	10 92 37 03 	sts	0x0337, r1
  	ir_tx_ready = 1 ;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 93 dc 02 	sts	0x02DC, r24

	tx_send_time = trtCurrentTime() ;
     a3c:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     a40:	60 93 e4 02 	sts	0x02E4, r22
     a44:	70 93 e5 02 	sts	0x02E5, r23
     a48:	80 93 e6 02 	sts	0x02E6, r24
     a4c:	90 93 e7 02 	sts	0x02E7, r25
	// wait 
	while (ir_tx_ready && (trtCurrentTime() < tx_send_time + ir_tx_timeout)) {};
     a50:	8d b7       	in	r24, 0x3d	; 61
     a52:	9e b7       	in	r25, 0x3e	; 62
     a54:	40 96       	adiw	r24, 0x10	; 16
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	9e bf       	out	0x3e, r25	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	8d bf       	out	0x3d, r24	; 61
     a60:	80 91 dc 02 	lds	r24, 0x02DC
     a64:	88 23       	and	r24, r24
     a66:	99 f0       	breq	.+38     	; 0xa8e <ir_send_packet+0xc6>
     a68:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     a6c:	00 91 e4 02 	lds	r16, 0x02E4
     a70:	10 91 e5 02 	lds	r17, 0x02E5
     a74:	20 91 e6 02 	lds	r18, 0x02E6
     a78:	30 91 e7 02 	lds	r19, 0x02E7
     a7c:	0c 59       	subi	r16, 0x9C	; 156
     a7e:	1f 4f       	sbci	r17, 0xFF	; 255
     a80:	2f 4f       	sbci	r18, 0xFF	; 255
     a82:	3f 4f       	sbci	r19, 0xFF	; 255
     a84:	60 17       	cp	r22, r16
     a86:	71 07       	cpc	r23, r17
     a88:	82 07       	cpc	r24, r18
     a8a:	93 07       	cpc	r25, r19
     a8c:	48 f3       	brcs	.-46     	; 0xa60 <ir_send_packet+0x98>
	
end
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	08 95       	ret

00000a94 <ir_rec_packet>:
// IR Receive
// input expected transmitter id
// returns zero if payload is valid and returns payload
// 1 means no data; 2 means buffer overrun; 3 means bad tx id; 4 means bad checksum
char ir_rec_packet(char tx_id, char ir_data[])
begin
     a94:	28 2f       	mov	r18, r24
     a96:	cb 01       	movw	r24, r22
	char rx_status = 0;
	char ir_rx_ck_sum, ir_rx_ck_sum_ref;
	char i ;
	char buf_len ;

	buf_len = (char)strlen(ir_rx_buffer) ;
     a98:	eb e3       	ldi	r30, 0x3B	; 59
     a9a:	f3 e0       	ldi	r31, 0x03	; 3
     a9c:	01 90       	ld	r0, Z+
     a9e:	00 20       	and	r0, r0
     aa0:	e9 f7       	brne	.-6      	; 0xa9c <ir_rec_packet+0x8>
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	eb 53       	subi	r30, 0x3B	; 59
     aa6:	f3 40       	sbci	r31, 0x03	; 3
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) {rx_status = 2; return rx_status;} // buffer overrun
     aa8:	30 91 dd 02 	lds	r19, 0x02DD
     aac:	32 30       	cpi	r19, 0x02	; 2
     aae:	09 f4       	brne	.+2      	; 0xab2 <ir_rec_packet+0x1e>
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <ir_rec_packet+0x9c>
	if (ir_rx_ready == 0) {rx_status = 1; return rx_status;} // no data -- timeout
     ab2:	30 91 dd 02 	lds	r19, 0x02DD
     ab6:	33 23       	and	r19, r19
     ab8:	09 f4       	brne	.+2      	; 0xabc <ir_rec_packet+0x28>
     aba:	3e c0       	rjmp	.+124    	; 0xb38 <ir_rec_packet+0xa4>
	if (ir_rx_buffer[0] != tx_id) {rx_status = 3; return rx_status;} // bad transmitter id
     abc:	30 91 3b 03 	lds	r19, 0x033B
     ac0:	32 13       	cpse	r19, r18
     ac2:	38 c0       	rjmp	.+112    	; 0xb34 <ir_rec_packet+0xa0>
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data
     ac4:	20 91 dd 02 	lds	r18, 0x02DD
     ac8:	21 30       	cpi	r18, 0x01	; 1
     aca:	b1 f5       	brne	.+108    	; 0xb38 <ir_rec_packet+0xa4>
     acc:	71 e0       	ldi	r23, 0x01	; 1
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <ir_rec_packet+0x48>

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
     ad2:	a5 5c       	subi	r26, 0xC5	; 197
     ad4:	bc 4f       	sbci	r27, 0xFC	; 252
     ad6:	2c 91       	ld	r18, X
     ad8:	62 27       	eor	r22, r18
	if (ir_rx_buffer[0] != tx_id) {rx_status = 3; return rx_status;} // bad transmitter id
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
     ada:	7f 5f       	subi	r23, 0xFF	; 255
     adc:	a7 2f       	mov	r26, r23
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	2e 2f       	mov	r18, r30
     ae2:	e0 34       	cpi	r30, 0x40	; 64
     ae4:	08 f0       	brcs	.+2      	; 0xae8 <ir_rec_packet+0x54>
     ae6:	2f e3       	ldi	r18, 0x3F	; 63
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	a9 01       	movw	r20, r18
     aec:	42 50       	subi	r20, 0x02	; 2
     aee:	51 09       	sbc	r21, r1
     af0:	a4 17       	cp	r26, r20
     af2:	b5 07       	cpc	r27, r21
     af4:	74 f3       	brlt	.-36     	; 0xad2 <ir_rec_packet+0x3e>
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
     af6:	fa 01       	movw	r30, r20
     af8:	e5 5c       	subi	r30, 0xC5	; 197
     afa:	fc 4f       	sbci	r31, 0xFC	; 252
     afc:	40 81       	ld	r20, Z
		 (ir_rx_buffer[buf_len-1]<<4) ;
     afe:	d9 01       	movw	r26, r18
     b00:	a6 5c       	subi	r26, 0xC6	; 198
     b02:	bc 4f       	sbci	r27, 0xFC	; 252
     b04:	2c 91       	ld	r18, X
	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
     b06:	4f 70       	andi	r20, 0x0F	; 15
     b08:	30 e1       	ldi	r19, 0x10	; 16
     b0a:	23 9f       	mul	r18, r19
     b0c:	40 0d       	add	r20, r0
     b0e:	11 24       	eor	r1, r1
		 (ir_rx_buffer[buf_len-1]<<4) ;

    if (ir_rx_ck_sum_ref != ir_rx_ck_sum) 
     b10:	46 13       	cpse	r20, r22
     b12:	14 c0       	rjmp	.+40     	; 0xb3c <ir_rec_packet+0xa8>
		{rx_status = 4; return rx_status;}  // bad check sum

	// set up the valid data return stuff
	ir_rx_buffer[0] = ' '; // strip the transmit id
     b14:	20 e2       	ldi	r18, 0x20	; 32
     b16:	20 93 3b 03 	sts	0x033B, r18
	ir_rx_buffer[buf_len-2] = 0x00; // strip the check sum and trailer
     b1a:	10 82       	st	Z, r1
	ir_rx_ready = 0 ;
     b1c:	10 92 dd 02 	sts	0x02DD, r1
	//trim initial space using ir_rx_buffer+1
	strlcpy(ir_data, ir_rx_buffer+1, buffer_size) ; 
     b20:	40 e4       	ldi	r20, 0x40	; 64
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	6c e3       	ldi	r22, 0x3C	; 60
     b26:	73 e0       	ldi	r23, 0x03	; 3
     b28:	0e 94 c9 07 	call	0xf92	; 0xf92 <strlcpy>

	return rx_status ;
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	08 95       	ret

	buf_len = (char)strlen(ir_rx_buffer) ;
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) {rx_status = 2; return rx_status;} // buffer overrun
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	08 95       	ret
	if (ir_rx_ready == 0) {rx_status = 1; return rx_status;} // no data -- timeout
	if (ir_rx_buffer[0] != tx_id) {rx_status = 3; return rx_status;} // bad transmitter id
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	08 95       	ret
	buf_len = (char)strlen(ir_rx_buffer) ;
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) {rx_status = 2; return rx_status;} // buffer overrun
	if (ir_rx_ready == 0) {rx_status = 1; return rx_status;} // no data -- timeout
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	08 95       	ret
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
		 (ir_rx_buffer[buf_len-1]<<4) ;

    if (ir_rx_ck_sum_ref != ir_rx_ck_sum) 
		{rx_status = 4; return rx_status;}  // bad check sum
     b3c:	84 e0       	ldi	r24, 0x04	; 4
	ir_rx_ready = 0 ;
	//trim initial space using ir_rx_buffer+1
	strlcpy(ir_data, ir_rx_buffer+1, buffer_size) ; 

	return rx_status ;
end
     b3e:	08 95       	ret

00000b40 <ir_rec_any_packet>:
// IR Receive ANY transmitter
// 
// returns tx_id (>0x30) if payload is valid and returns payload
// return==1 means no data; 2 means buffer overrun; 4 means bad checksum
char ir_rec_any_packet(char ir_data[])
begin
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
	char rx_status = 0;
	char ir_rx_ck_sum, ir_rx_ck_sum_ref;
	char i ;
	char buf_len ;

	buf_len = (char)strlen(ir_rx_buffer) ;
     b44:	eb e3       	ldi	r30, 0x3B	; 59
     b46:	f3 e0       	ldi	r31, 0x03	; 3
     b48:	01 90       	ld	r0, Z+
     b4a:	00 20       	and	r0, r0
     b4c:	e9 f7       	brne	.-6      	; 0xb48 <ir_rec_any_packet+0x8>
     b4e:	31 97       	sbiw	r30, 0x01	; 1
     b50:	eb 53       	subi	r30, 0x3B	; 59
     b52:	f3 40       	sbci	r31, 0x03	; 3
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) return 2 ; // buffer overrun
     b54:	20 91 dd 02 	lds	r18, 0x02DD
     b58:	22 30       	cpi	r18, 0x02	; 2
     b5a:	e1 f1       	breq	.+120    	; 0xbd4 <ir_rec_any_packet+0x94>
	if (ir_rx_ready == 0) return 1 ; // no data -- timeout
     b5c:	20 91 dd 02 	lds	r18, 0x02DD
     b60:	22 23       	and	r18, r18
     b62:	d1 f1       	breq	.+116    	; 0xbd8 <ir_rec_any_packet+0x98>
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data
     b64:	20 91 dd 02 	lds	r18, 0x02DD
     b68:	21 30       	cpi	r18, 0x01	; 1
     b6a:	b1 f5       	brne	.+108    	; 0xbd8 <ir_rec_any_packet+0x98>
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	06 c0       	rjmp	.+12     	; 0xb7e <ir_rec_any_packet+0x3e>
	// if (ir_rx_buffer[0] != tx_id) return 3 ; // bad transmitter id

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
     b72:	eb 01       	movw	r28, r22
     b74:	c5 5c       	subi	r28, 0xC5	; 197
     b76:	dc 4f       	sbci	r29, 0xFC	; 252
     b78:	28 81       	ld	r18, Y
     b7a:	a2 27       	eor	r26, r18
	if (ir_rx_ready != 1) {rx_status = 1; return rx_status;} // invalid data
	// if (ir_rx_buffer[0] != tx_id) return 3 ; // bad transmitter id

	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
     b7c:	ff 5f       	subi	r31, 0xFF	; 255
     b7e:	6f 2f       	mov	r22, r31
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	2e 2f       	mov	r18, r30
     b84:	e0 34       	cpi	r30, 0x40	; 64
     b86:	08 f0       	brcs	.+2      	; 0xb8a <ir_rec_any_packet+0x4a>
     b88:	2f e3       	ldi	r18, 0x3F	; 63
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	a9 01       	movw	r20, r18
     b8e:	42 50       	subi	r20, 0x02	; 2
     b90:	51 09       	sbc	r21, r1
     b92:	64 17       	cp	r22, r20
     b94:	75 07       	cpc	r23, r21
     b96:	6c f3       	brlt	.-38     	; 0xb72 <ir_rec_any_packet+0x32>
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
     b98:	fa 01       	movw	r30, r20
     b9a:	e5 5c       	subi	r30, 0xC5	; 197
     b9c:	fc 4f       	sbci	r31, 0xFC	; 252
     b9e:	40 81       	ld	r20, Z
		 (ir_rx_buffer[buf_len-1]<<4) ;
     ba0:	e9 01       	movw	r28, r18
     ba2:	c6 5c       	subi	r28, 0xC6	; 198
     ba4:	dc 4f       	sbci	r29, 0xFC	; 252
     ba6:	28 81       	ld	r18, Y
	// compute receive checksum
	ir_rx_ck_sum = 0 ;
	for (i=1; i<buf_len-2; i++)
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
     ba8:	4f 70       	andi	r20, 0x0F	; 15
     baa:	30 e1       	ldi	r19, 0x10	; 16
     bac:	23 9f       	mul	r18, r19
     bae:	40 0d       	add	r20, r0
     bb0:	11 24       	eor	r1, r1
		 (ir_rx_buffer[buf_len-1]<<4) ;

	if (ir_rx_ck_sum_ref != ir_rx_ck_sum) return 4 ; // bad check sum
     bb2:	4a 13       	cpse	r20, r26
     bb4:	13 c0       	rjmp	.+38     	; 0xbdc <ir_rec_any_packet+0x9c>

	// set up the valid return stuff
	// if no errors, then return transmitter ID
	if (rx_status == 0) rx_status = ir_rx_buffer[0] ;
     bb6:	c0 91 3b 03 	lds	r28, 0x033B
	ir_rx_buffer[0] = ' '; // strip the transmit id from string
     bba:	20 e2       	ldi	r18, 0x20	; 32
     bbc:	20 93 3b 03 	sts	0x033B, r18
	ir_rx_buffer[buf_len-2] = 0x00; // strip the check sum and trailer
     bc0:	10 82       	st	Z, r1
	ir_rx_ready = 0 ;
     bc2:	10 92 dd 02 	sts	0x02DD, r1
	//trim initial space using ir_rx_buffer+1
	strlcpy(ir_data, ir_rx_buffer+1, buffer_size) ;
     bc6:	40 e4       	ldi	r20, 0x40	; 64
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	6c e3       	ldi	r22, 0x3C	; 60
     bcc:	73 e0       	ldi	r23, 0x03	; 3
     bce:	0e 94 c9 07 	call	0xf92	; 0xf92 <strlcpy>

	return rx_status ;
     bd2:	05 c0       	rjmp	.+10     	; 0xbde <ir_rec_any_packet+0x9e>

	buf_len = (char)strlen(ir_rx_buffer) ;
	if (buf_len >= buffer_size) buf_len = buffer_size-1;

	// error check
	if (ir_rx_ready == 2) return 2 ; // buffer overrun
     bd4:	c2 e0       	ldi	r28, 0x02	; 2
     bd6:	03 c0       	rjmp	.+6      	; 0xbde <ir_rec_any_packet+0x9e>
	if (ir_rx_ready == 0) return 1 ; // no data -- timeout
     bd8:	c1 e0       	ldi	r28, 0x01	; 1
     bda:	01 c0       	rjmp	.+2      	; 0xbde <ir_rec_any_packet+0x9e>
		ir_rx_ck_sum ^= ir_rx_buffer[i] ;
	
	ir_rx_ck_sum_ref = (ir_rx_buffer[buf_len-2] & 0x0f) +
		 (ir_rx_buffer[buf_len-1]<<4) ;

	if (ir_rx_ck_sum_ref != ir_rx_ck_sum) return 4 ; // bad check sum
     bdc:	c4 e0       	ldi	r28, 0x04	; 4
	ir_rx_ready = 0 ;
	//trim initial space using ir_rx_buffer+1
	strlcpy(ir_data, ir_rx_buffer+1, buffer_size) ;

	return rx_status ;
end
     bde:	8c 2f       	mov	r24, r28
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <send_task>:
end  
*/
//**********************************************************          
// send something
void send_task(void) 
begin  
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	c0 54       	subi	r28, 0x40	; 64
     bfc:	d1 09       	sbc	r29, r1
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
	char tx_id = 'T'; // note: this is a quoted char
	char ir_tx_data[buffer_size] ;

	// transmit
	sprintf(ir_tx_data,"%ld, %d, %d", trtCurrentTime(), task_count, error_count); //
     c08:	d0 90 de 02 	lds	r13, 0x02DE
     c0c:	c0 90 df 02 	lds	r12, 0x02DF
     c10:	10 91 32 03 	lds	r17, 0x0332
     c14:	00 91 33 03 	lds	r16, 0x0333
     c18:	f0 90 34 03 	lds	r15, 0x0334
     c1c:	e0 90 35 03 	lds	r14, 0x0335
     c20:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	9f 93       	push	r25
     c32:	8f 93       	push	r24
     c34:	7f 93       	push	r23
     c36:	6f 93       	push	r22
     c38:	8b e1       	ldi	r24, 0x1B	; 27
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	9f 93       	push	r25
     c3e:	8f 93       	push	r24
     c40:	8e 01       	movw	r16, r28
     c42:	0f 5f       	subi	r16, 0xFF	; 255
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	1f 93       	push	r17
     c48:	0f 93       	push	r16
     c4a:	0e 94 18 08 	call	0x1030	; 0x1030 <sprintf>
	// send payload from tx_id
	ir_send_packet(tx_id, ir_tx_data);
     c4e:	b8 01       	movw	r22, r16
     c50:	84 e5       	ldi	r24, 0x54	; 84
     c52:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ir_send_packet>
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
end  	
     c60:	c0 5c       	subi	r28, 0xC0	; 192
     c62:	df 4f       	sbci	r29, 0xFF	; 255
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	cf 90       	pop	r12
     c7e:	08 95       	ret

00000c80 <recv_task>:

//**********************************************************          
// receive it back
void recv_task(void) 
begin  
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	c0 54       	subi	r28, 0x40	; 64
     c8e:	d1 09       	sbc	r29, r1
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
	char rx_id = 'T';  // note: this is a quoted char
	char rx_status = 0 ;
	char ir_rx_data[buffer_size]  ;
	
	// receive
	rx_status = ir_rec_packet(rx_id, ir_rx_data) ;
     c9a:	8e 01       	movw	r16, r28
     c9c:	0f 5f       	subi	r16, 0xFF	; 255
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	b8 01       	movw	r22, r16
     ca2:	84 e5       	ldi	r24, 0x54	; 84
     ca4:	0e 94 4a 05 	call	0xa94	; 0xa94 <ir_rec_packet>
	if (!rx_status) {
     ca8:	81 11       	cpse	r24, r1
     caa:	13 c0       	rjmp	.+38     	; 0xcd2 <recv_task+0x52>
		//ir_rx_data[6] = 0;
		fprintf(&uart0, "PAYLOAD=%s\n\r", ir_rx_data);
     cac:	1f 93       	push	r17
     cae:	0f 93       	push	r16
     cb0:	87 e2       	ldi	r24, 0x27	; 39
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	9f 93       	push	r25
     cb6:	8f 93       	push	r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	9f 93       	push	r25
     cbe:	8f 93       	push	r24
     cc0:	0e 94 dd 07 	call	0xfba	; 0xfba <fprintf>
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	1c c0       	rjmp	.+56     	; 0xd0a <recv_task+0x8a>
	}
	else {
		fprintf(&uart0, "%d%s\n\r", rx_status, ir_rx_data);
     cd2:	1f 93       	push	r17
     cd4:	0f 93       	push	r16
     cd6:	1f 92       	push	r1
     cd8:	8f 93       	push	r24
     cda:	84 e3       	ldi	r24, 0x34	; 52
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	0e 94 dd 07 	call	0xfba	; 0xfba <fprintf>
		error_count++ ;
     cee:	80 91 de 02 	lds	r24, 0x02DE
     cf2:	90 91 df 02 	lds	r25, 0x02DF
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	90 93 df 02 	sts	0x02DF, r25
     cfc:	80 93 de 02 	sts	0x02DE, r24
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
	}
	task_count++;
     d0a:	80 91 32 03 	lds	r24, 0x0332
     d0e:	90 91 33 03 	lds	r25, 0x0333
     d12:	a0 91 34 03 	lds	r26, 0x0334
     d16:	b0 91 35 03 	lds	r27, 0x0335
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	a1 1d       	adc	r26, r1
     d1e:	b1 1d       	adc	r27, r1
     d20:	80 93 32 03 	sts	0x0332, r24
     d24:	90 93 33 03 	sts	0x0333, r25
     d28:	a0 93 34 03 	sts	0x0334, r26
     d2c:	b0 93 35 03 	sts	0x0335, r27
end  	
     d30:	c0 5c       	subi	r28, 0xC0	; 192
     d32:	df 4f       	sbci	r29, 0xFF	; 255
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	08 95       	ret

00000d48 <recv_any_task>:

//**********************************************************          
// receive it back
void recv_any_task(void) 
begin  
     d48:	ef 92       	push	r14
     d4a:	ff 92       	push	r15
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	c0 54       	subi	r28, 0x40	; 64
     d5a:	d1 09       	sbc	r29, r1
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
//	char rx_id = '1';  // note: this is a quoted char
	char rx_status = 0 ;
	char ir_rx_data[buffer_size]  ;
	
	// receive
	rx_status = ir_rec_any_packet(ir_rx_data) ;
     d66:	8e 01       	movw	r16, r28
     d68:	0f 5f       	subi	r16, 0xFF	; 255
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	c8 01       	movw	r24, r16
     d6e:	0e 94 a0 05 	call	0xb40	; 0xb40 <ir_rec_any_packet>
	if (rx_status>=0x30) {
     d72:	80 33       	cpi	r24, 0x30	; 48
     d74:	c8 f0       	brcs	.+50     	; 0xda8 <recv_any_task+0x60>
		//ir_rx_data[6] = 0;
		fprintf(&uart0, "TX_ID=%c\n\r", rx_status); // transmitter number
     d76:	1f 92       	push	r1
     d78:	8f 93       	push	r24
     d7a:	8b e3       	ldi	r24, 0x3B	; 59
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	9f 93       	push	r25
     d80:	8f 93       	push	r24
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	e6 2e       	mov	r14, r22
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	f6 2e       	mov	r15, r22
     d8a:	ff 92       	push	r15
     d8c:	ef 92       	push	r14
     d8e:	0e 94 dd 07 	call	0xfba	; 0xfba <fprintf>
		fprintf(&uart0, "PAYLOAD=%s\n\r", ir_rx_data);// payload
     d92:	1f 93       	push	r17
     d94:	0f 93       	push	r16
     d96:	87 e2       	ldi	r24, 0x27	; 39
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	9f 93       	push	r25
     d9c:	8f 93       	push	r24
     d9e:	ff 92       	push	r15
     da0:	ef 92       	push	r14
     da2:	0e 94 dd 07 	call	0xfba	; 0xfba <fprintf>
     da6:	17 c0       	rjmp	.+46     	; 0xdd6 <recv_any_task+0x8e>
	}
	else {
		fprintf(&uart0, "%d%s\n\r", rx_status, ir_rx_data);
     da8:	1f 93       	push	r17
     daa:	0f 93       	push	r16
     dac:	1f 92       	push	r1
     dae:	8f 93       	push	r24
     db0:	84 e3       	ldi	r24, 0x34	; 52
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	9f 93       	push	r25
     db6:	8f 93       	push	r24
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	9f 93       	push	r25
     dbe:	8f 93       	push	r24
     dc0:	0e 94 dd 07 	call	0xfba	; 0xfba <fprintf>
		error_count++ ;
     dc4:	80 91 de 02 	lds	r24, 0x02DE
     dc8:	90 91 df 02 	lds	r25, 0x02DF
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	90 93 df 02 	sts	0x02DF, r25
     dd2:	80 93 de 02 	sts	0x02DE, r24
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
	}
	task_count++;
     de0:	80 91 32 03 	lds	r24, 0x0332
     de4:	90 91 33 03 	lds	r25, 0x0333
     de8:	a0 91 34 03 	lds	r26, 0x0334
     dec:	b0 91 35 03 	lds	r27, 0x0335
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	a1 1d       	adc	r26, r1
     df4:	b1 1d       	adc	r27, r1
     df6:	80 93 32 03 	sts	0x0332, r24
     dfa:	90 93 33 03 	sts	0x0333, r25
     dfe:	a0 93 34 03 	sts	0x0334, r26
     e02:	b0 93 35 03 	sts	0x0335, r27
end  	
     e06:	c0 5c       	subi	r28, 0xC0	; 192
     e08:	df 4f       	sbci	r29, 0xFF	; 255
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	08 95       	ret

00000e22 <led2>:
// --- define task 2  ----------------------------------------
void led2(void* args) 
  begin
	while(1)
	begin
		trtWait(SEM_RX_WAIT) ; 
     e22:	85 e0       	ldi	r24, 0x05	; 5
     e24:	0e 94 29 02 	call	0x452	; 0x452 <trtWait>
		recv_any_task();
     e28:	0e 94 a4 06 	call	0xd48	; 0xd48 <recv_any_task>
		trtSleepUntil(trtCurrentTime() + SECONDS2TICKS(.2), trtCurrentTime() + SECONDS2TICKS(.2));
     e2c:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     e30:	6b 01       	movw	r12, r22
     e32:	7c 01       	movw	r14, r24
     e34:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     e38:	a7 01       	movw	r20, r14
     e3a:	96 01       	movw	r18, r12
     e3c:	2b 5c       	subi	r18, 0xCB	; 203
     e3e:	33 4f       	sbci	r19, 0xF3	; 243
     e40:	4f 4f       	sbci	r20, 0xFF	; 255
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	6b 5c       	subi	r22, 0xCB	; 203
     e46:	73 4f       	sbci	r23, 0xF3	; 243
     e48:	8f 4f       	sbci	r24, 0xFF	; 255
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	0e 94 a7 02 	call	0x54e	; 0x54e <trtSleepUntil>
		trtSignal(SEM_TX_WAIT);
     e50:	84 e0       	ldi	r24, 0x04	; 4
     e52:	0e 94 42 02 	call	0x484	; 0x484 <trtSignal>
     e56:	e5 cf       	rjmp	.-54     	; 0xe22 <led2>

00000e58 <initialize>:
//Set it all up
void initialize(void)
begin
  //********************    
  //set up timer 0 for 1 mSec timebase 
  TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	80 93 6e 00 	sts	0x006E, r24
  OCR0A = 249 ;//
     e5e:	99 ef       	ldi	r25, 0xF9	; 249
     e60:	97 bd       	out	0x27, r25	; 39
  //set prescalar to divide by 64 (4 microsec/tick)
  TCCR0B= 3; //;	
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	95 bd       	out	0x25, r25	; 37
  // turn on clear-on-match
  TCCR0A= (1<<WGM01) ;
     e66:	84 bd       	out	0x24, r24	; 36
  // IR carrier generator
  // set up timer 2 for square wave with NO ISR
  // 56000 Hz => 1/2 cycle 8.928 microsec = 143 cycles
  // Connect D7 thru resistor to (+)IR_LED(-) to TXD:: D7--/\/\--|>|----TXD
  //
  OCR2A = 142 ; //143 cycles/half-period
     e68:	8e e8       	ldi	r24, 0x8E	; 142
     e6a:	80 93 b3 00 	sts	0x00B3, r24
  //  count at full rate
  TCCR2B =  1;	
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	80 93 b1 00 	sts	0x00B1, r24
  // set to toggle OC2A, clear on match,
  TCCR2A = (1<<COM2A0) | (1<<WGM21) ;
     e74:	82 e4       	ldi	r24, 0x42	; 66
     e76:	80 93 b0 00 	sts	0x00B0, r24
  // PORT D.7 is OC2A
  DDRD = (1<<PIND7) ;	
     e7a:	80 e8       	ldi	r24, 0x80	; 128
     e7c:	8a b9       	out	0x0a, r24	; 10
  //time2=t2;
  
  //********************  

  //init UART1 for IR comm
  UBRR1L = (F_CPU / (16UL * IR_UART_BAUD)) - 1;
     e7e:	8f ec       	ldi	r24, 0xCF	; 207
     e80:	80 93 cc 00 	sts	0x00CC, r24
  UCSR1B = _BV(TXEN1) | _BV(RXEN1); /* tx/rx enable */
     e84:	88 e1       	ldi	r24, 0x18	; 24
     e86:	80 93 c9 00 	sts	0x00C9, r24
  UCSR1C = (1<<UCSZ11) | (1<<USBS1) ; // 7 bit | 2 stop bits
     e8a:	8c e0       	ldi	r24, 0x0C	; 12
     e8c:	80 93 ca 00 	sts	0x00CA, r24

  //init UART0 for PC comm
  UBRR0L = (F_CPU / (16UL * PC_UART_BAUD)) - 1;
     e90:	87 e6       	ldi	r24, 0x67	; 103
     e92:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B = _BV(TXEN0) ; //| _BV(RXEN1); /* tx/rx enable */
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	80 93 c1 00 	sts	0x00C1, r24
  fprintf(&uart0,"\n\r...Starting IR comm ...\n\r");
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	71 e0       	ldi	r23, 0x01	; 1
     ea0:	86 e4       	ldi	r24, 0x46	; 70
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 ed 07 	call	0xfda	; 0xfda <fputs>
  
  //********************
  //crank up the ISRs
  sei();
     ea8:	78 94       	sei
     eaa:	08 95       	ret

00000eac <led1>:


// --- define task 1  ----------------------------------------
  void led1(void* args) 
  begin
  	initialize();
     eac:	0e 94 2c 07 	call	0xe58	; 0xe58 <initialize>

	while(1)
	begin
		// wait on semaphore SEM_TASK1_WAIT 
		// which is signaled from task 2
		trtWait(SEM_TX_WAIT) ; 
     eb0:	84 e0       	ldi	r24, 0x04	; 4
     eb2:	0e 94 29 02 	call	0x452	; 0x452 <trtWait>
		// blink the led
		send_task();
     eb6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <send_task>
		trtSleepUntil(trtCurrentTime() + SECONDS2TICKS(.2), trtCurrentTime() + SECONDS2TICKS(.2));
     eba:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     ebe:	6b 01       	movw	r12, r22
     ec0:	7c 01       	movw	r14, r24
     ec2:	0e 94 8d 02 	call	0x51a	; 0x51a <trtCurrentTime>
     ec6:	a7 01       	movw	r20, r14
     ec8:	96 01       	movw	r18, r12
     eca:	2b 5c       	subi	r18, 0xCB	; 203
     ecc:	33 4f       	sbci	r19, 0xF3	; 243
     ece:	4f 4f       	sbci	r20, 0xFF	; 255
     ed0:	5f 4f       	sbci	r21, 0xFF	; 255
     ed2:	6b 5c       	subi	r22, 0xCB	; 203
     ed4:	73 4f       	sbci	r23, 0xF3	; 243
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	0e 94 a7 02 	call	0x54e	; 0x54e <trtSleepUntil>
		trtSignal(SEM_RX_WAIT);
     ede:	85 e0       	ldi	r24, 0x05	; 5
     ee0:	0e 94 42 02 	call	0x484	; 0x484 <trtSignal>
     ee4:	e5 cf       	rjmp	.-54     	; 0xeb0 <led1+0x4>

00000ee6 <main>:

   
// --- Main Program ----------------------------------
int main(void) {

  DDRC = 0xff;    // led connections
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	87 b9       	out	0x07, r24	; 7
  PORTC = 0xff;
     eea:	88 b9       	out	0x08, r24	; 8
  DDRB = 0x00; // switch connections
     eec:	14 b8       	out	0x04, r1	; 4
  PORTB = 0xff; // pullup on
     eee:	85 b9       	out	0x05, r24	; 5

  PORTD ^= 0x04;
     ef0:	8b b1       	in	r24, 0x0b	; 11
     ef2:	94 e0       	ldi	r25, 0x04	; 4
     ef4:	89 27       	eor	r24, r25
     ef6:	8b b9       	out	0x0b, r24	; 11

  //init the UART -- trt_uart_init() is in trtUart.c
  stdout = stdin = stderr = &uart0;//&uart_str;
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	90 93 80 03 	sts	0x0380, r25
     f00:	80 93 7f 03 	sts	0x037F, r24
     f04:	90 93 7c 03 	sts	0x037C, r25
     f08:	80 93 7b 03 	sts	0x037B, r24
     f0c:	90 93 7e 03 	sts	0x037E, r25
     f10:	80 93 7d 03 	sts	0x037D, r24
  fprintf(stdout,"\n\r TRT 09feb09\n\r\n\r");
     f14:	bc 01       	movw	r22, r24
     f16:	82 e6       	ldi	r24, 0x62	; 98
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	0e 94 ed 07 	call	0xfda	; 0xfda <fputs>
  //fprintf(&uart0, "it works?");
  trt_uart_init(); 
     f1e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <trt_uart_init>

  // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
     f22:	80 e5       	ldi	r24, 0x50	; 80
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 93 01 	call	0x326	; 0x326 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     f2a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     f2c:	10 92 23 03 	sts	0x0323, r1
  
  sei(); // set enabled interrupts;
     f30:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     f32:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 24 03 	sts	0x0324, r24
  
  sei(); // set enabled interrupts;
     f3a:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     f3c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     f3e:	10 92 25 03 	sts	0x0325, r1
  
  sei(); // set enabled interrupts;
     f42:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     f44:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     f46:	80 93 27 03 	sts	0x0327, r24
  
  sei(); // set enabled interrupts;
     f4a:	78 94       	sei
  
  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variable

 // --- creat tasks  ----------------
  trtCreateTask(led1, 1000, SECONDS2TICKS(0.1), SECONDS2TICKS(0.2), &(args[0]));
     f4c:	74 e9       	ldi	r23, 0x94	; 148
     f4e:	c7 2e       	mov	r12, r23
     f50:	72 e0       	ldi	r23, 0x02	; 2
     f52:	d7 2e       	mov	r13, r23
     f54:	15 e3       	ldi	r17, 0x35	; 53
     f56:	e1 2e       	mov	r14, r17
     f58:	1c e0       	ldi	r17, 0x0C	; 12
     f5a:	f1 2e       	mov	r15, r17
     f5c:	00 e0       	ldi	r16, 0x00	; 0
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	2a e1       	ldi	r18, 0x1A	; 26
     f62:	36 e0       	ldi	r19, 0x06	; 6
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	68 ee       	ldi	r22, 0xE8	; 232
     f6a:	73 e0       	ldi	r23, 0x03	; 3
     f6c:	86 e5       	ldi	r24, 0x56	; 86
     f6e:	97 e0       	ldi	r25, 0x07	; 7
     f70:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <trtCreateTask>
  trtCreateTask(led2, 100, SECONDS2TICKS(0.1), SECONDS2TICKS(0.2), &(args[1]));
     f74:	f6 e9       	ldi	r31, 0x96	; 150
     f76:	cf 2e       	mov	r12, r31
     f78:	f2 e0       	ldi	r31, 0x02	; 2
     f7a:	df 2e       	mov	r13, r31
     f7c:	2a e1       	ldi	r18, 0x1A	; 26
     f7e:	36 e0       	ldi	r19, 0x06	; 6
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	64 e6       	ldi	r22, 0x64	; 100
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	81 e1       	ldi	r24, 0x11	; 17
     f8a:	97 e0       	ldi	r25, 0x07	; 7
     f8c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <trtCreateTask>
     f90:	ff cf       	rjmp	.-2      	; 0xf90 <main+0xaa>

00000f92 <strlcpy>:
     f92:	dc 01       	movw	r26, r24
     f94:	fb 01       	movw	r30, r22
     f96:	41 50       	subi	r20, 0x01	; 1
     f98:	50 40       	sbci	r21, 0x00	; 0
     f9a:	58 f0       	brcs	.+22     	; 0xfb2 <strlcpy+0x20>
     f9c:	49 f0       	breq	.+18     	; 0xfb0 <strlcpy+0x1e>
     f9e:	01 90       	ld	r0, Z+
     fa0:	0d 92       	st	X+, r0
     fa2:	00 20       	and	r0, r0
     fa4:	c1 f7       	brne	.-16     	; 0xf96 <strlcpy+0x4>
     fa6:	e6 1b       	sub	r30, r22
     fa8:	f7 0b       	sbc	r31, r23
     faa:	31 97       	sbiw	r30, 0x01	; 1
     fac:	cf 01       	movw	r24, r30
     fae:	08 95       	ret
     fb0:	1c 92       	st	X, r1
     fb2:	01 90       	ld	r0, Z+
     fb4:	00 20       	and	r0, r0
     fb6:	e9 f7       	brne	.-6      	; 0xfb2 <strlcpy+0x20>
     fb8:	f6 cf       	rjmp	.-20     	; 0xfa6 <strlcpy+0x14>

00000fba <fprintf>:
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	ce 01       	movw	r24, r28
     fc4:	09 96       	adiw	r24, 0x09	; 9
     fc6:	ac 01       	movw	r20, r24
     fc8:	6f 81       	ldd	r22, Y+7	; 0x07
     fca:	78 85       	ldd	r23, Y+8	; 0x08
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	0e 94 47 08 	call	0x108e	; 0x108e <vfprintf>
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <fputs>:
     fda:	ef 92       	push	r14
     fdc:	ff 92       	push	r15
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	7c 01       	movw	r14, r24
     fe8:	8b 01       	movw	r16, r22
     fea:	db 01       	movw	r26, r22
     fec:	13 96       	adiw	r26, 0x03	; 3
     fee:	8c 91       	ld	r24, X
     ff0:	81 ff       	sbrs	r24, 1
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <fputs+0x42>
     ff4:	c0 e0       	ldi	r28, 0x00	; 0
     ff6:	d0 e0       	ldi	r29, 0x00	; 0
     ff8:	0b c0       	rjmp	.+22     	; 0x1010 <fputs+0x36>
     ffa:	d8 01       	movw	r26, r16
     ffc:	18 96       	adiw	r26, 0x08	; 8
     ffe:	ed 91       	ld	r30, X+
    1000:	fc 91       	ld	r31, X
    1002:	19 97       	sbiw	r26, 0x09	; 9
    1004:	b8 01       	movw	r22, r16
    1006:	09 95       	icall
    1008:	89 2b       	or	r24, r25
    100a:	11 f0       	breq	.+4      	; 0x1010 <fputs+0x36>
    100c:	cf ef       	ldi	r28, 0xFF	; 255
    100e:	df ef       	ldi	r29, 0xFF	; 255
    1010:	f7 01       	movw	r30, r14
    1012:	81 91       	ld	r24, Z+
    1014:	7f 01       	movw	r14, r30
    1016:	81 11       	cpse	r24, r1
    1018:	f0 cf       	rjmp	.-32     	; 0xffa <fputs+0x20>
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <fputs+0x46>
    101c:	cf ef       	ldi	r28, 0xFF	; 255
    101e:	df ef       	ldi	r29, 0xFF	; 255
    1020:	ce 01       	movw	r24, r28
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	08 95       	ret

00001030 <sprintf>:
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	2e 97       	sbiw	r28, 0x0e	; 14
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	0d 89       	ldd	r16, Y+21	; 0x15
    104a:	1e 89       	ldd	r17, Y+22	; 0x16
    104c:	86 e0       	ldi	r24, 0x06	; 6
    104e:	8c 83       	std	Y+4, r24	; 0x04
    1050:	1a 83       	std	Y+2, r17	; 0x02
    1052:	09 83       	std	Y+1, r16	; 0x01
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	9f e7       	ldi	r25, 0x7F	; 127
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
    105c:	ce 01       	movw	r24, r28
    105e:	49 96       	adiw	r24, 0x19	; 25
    1060:	ac 01       	movw	r20, r24
    1062:	6f 89       	ldd	r22, Y+23	; 0x17
    1064:	78 8d       	ldd	r23, Y+24	; 0x18
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	0e 94 47 08 	call	0x108e	; 0x108e <vfprintf>
    106e:	ef 81       	ldd	r30, Y+7	; 0x07
    1070:	f8 85       	ldd	r31, Y+8	; 0x08
    1072:	e0 0f       	add	r30, r16
    1074:	f1 1f       	adc	r31, r17
    1076:	10 82       	st	Z, r1
    1078:	2e 96       	adiw	r28, 0x0e	; 14
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	08 95       	ret

0000108e <vfprintf>:
    108e:	2f 92       	push	r2
    1090:	3f 92       	push	r3
    1092:	4f 92       	push	r4
    1094:	5f 92       	push	r5
    1096:	6f 92       	push	r6
    1098:	7f 92       	push	r7
    109a:	8f 92       	push	r8
    109c:	9f 92       	push	r9
    109e:	af 92       	push	r10
    10a0:	bf 92       	push	r11
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	2c 97       	sbiw	r28, 0x0c	; 12
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	7c 01       	movw	r14, r24
    10c4:	6b 01       	movw	r12, r22
    10c6:	8a 01       	movw	r16, r20
    10c8:	fc 01       	movw	r30, r24
    10ca:	17 82       	std	Z+7, r1	; 0x07
    10cc:	16 82       	std	Z+6, r1	; 0x06
    10ce:	83 81       	ldd	r24, Z+3	; 0x03
    10d0:	81 ff       	sbrs	r24, 1
    10d2:	c6 c1       	rjmp	.+908    	; 0x1460 <vfprintf+0x3d2>
    10d4:	88 24       	eor	r8, r8
    10d6:	83 94       	inc	r8
    10d8:	91 2c       	mov	r9, r1
    10da:	8c 0e       	add	r8, r28
    10dc:	9d 1e       	adc	r9, r29
    10de:	f7 01       	movw	r30, r14
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	f6 01       	movw	r30, r12
    10e4:	93 fd       	sbrc	r25, 3
    10e6:	85 91       	lpm	r24, Z+
    10e8:	93 ff       	sbrs	r25, 3
    10ea:	81 91       	ld	r24, Z+
    10ec:	6f 01       	movw	r12, r30
    10ee:	88 23       	and	r24, r24
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <vfprintf+0x66>
    10f2:	b2 c1       	rjmp	.+868    	; 0x1458 <vfprintf+0x3ca>
    10f4:	85 32       	cpi	r24, 0x25	; 37
    10f6:	39 f4       	brne	.+14     	; 0x1106 <vfprintf+0x78>
    10f8:	93 fd       	sbrc	r25, 3
    10fa:	85 91       	lpm	r24, Z+
    10fc:	93 ff       	sbrs	r25, 3
    10fe:	81 91       	ld	r24, Z+
    1100:	6f 01       	movw	r12, r30
    1102:	85 32       	cpi	r24, 0x25	; 37
    1104:	29 f4       	brne	.+10     	; 0x1110 <vfprintf+0x82>
    1106:	b7 01       	movw	r22, r14
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <fputc>
    110e:	e7 cf       	rjmp	.-50     	; 0x10de <vfprintf+0x50>
    1110:	51 2c       	mov	r5, r1
    1112:	31 2c       	mov	r3, r1
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	20 32       	cpi	r18, 0x20	; 32
    1118:	a8 f4       	brcc	.+42     	; 0x1144 <vfprintf+0xb6>
    111a:	8b 32       	cpi	r24, 0x2B	; 43
    111c:	61 f0       	breq	.+24     	; 0x1136 <vfprintf+0xa8>
    111e:	28 f4       	brcc	.+10     	; 0x112a <vfprintf+0x9c>
    1120:	80 32       	cpi	r24, 0x20	; 32
    1122:	51 f0       	breq	.+20     	; 0x1138 <vfprintf+0xaa>
    1124:	83 32       	cpi	r24, 0x23	; 35
    1126:	71 f4       	brne	.+28     	; 0x1144 <vfprintf+0xb6>
    1128:	0b c0       	rjmp	.+22     	; 0x1140 <vfprintf+0xb2>
    112a:	8d 32       	cpi	r24, 0x2D	; 45
    112c:	39 f0       	breq	.+14     	; 0x113c <vfprintf+0xae>
    112e:	80 33       	cpi	r24, 0x30	; 48
    1130:	49 f4       	brne	.+18     	; 0x1144 <vfprintf+0xb6>
    1132:	21 60       	ori	r18, 0x01	; 1
    1134:	28 c0       	rjmp	.+80     	; 0x1186 <vfprintf+0xf8>
    1136:	22 60       	ori	r18, 0x02	; 2
    1138:	24 60       	ori	r18, 0x04	; 4
    113a:	25 c0       	rjmp	.+74     	; 0x1186 <vfprintf+0xf8>
    113c:	28 60       	ori	r18, 0x08	; 8
    113e:	23 c0       	rjmp	.+70     	; 0x1186 <vfprintf+0xf8>
    1140:	20 61       	ori	r18, 0x10	; 16
    1142:	21 c0       	rjmp	.+66     	; 0x1186 <vfprintf+0xf8>
    1144:	27 fd       	sbrc	r18, 7
    1146:	27 c0       	rjmp	.+78     	; 0x1196 <vfprintf+0x108>
    1148:	38 2f       	mov	r19, r24
    114a:	30 53       	subi	r19, 0x30	; 48
    114c:	3a 30       	cpi	r19, 0x0A	; 10
    114e:	78 f4       	brcc	.+30     	; 0x116e <vfprintf+0xe0>
    1150:	26 ff       	sbrs	r18, 6
    1152:	06 c0       	rjmp	.+12     	; 0x1160 <vfprintf+0xd2>
    1154:	fa e0       	ldi	r31, 0x0A	; 10
    1156:	5f 9e       	mul	r5, r31
    1158:	30 0d       	add	r19, r0
    115a:	11 24       	eor	r1, r1
    115c:	53 2e       	mov	r5, r19
    115e:	13 c0       	rjmp	.+38     	; 0x1186 <vfprintf+0xf8>
    1160:	8a e0       	ldi	r24, 0x0A	; 10
    1162:	38 9e       	mul	r3, r24
    1164:	30 0d       	add	r19, r0
    1166:	11 24       	eor	r1, r1
    1168:	33 2e       	mov	r3, r19
    116a:	20 62       	ori	r18, 0x20	; 32
    116c:	0c c0       	rjmp	.+24     	; 0x1186 <vfprintf+0xf8>
    116e:	8e 32       	cpi	r24, 0x2E	; 46
    1170:	21 f4       	brne	.+8      	; 0x117a <vfprintf+0xec>
    1172:	26 fd       	sbrc	r18, 6
    1174:	71 c1       	rjmp	.+738    	; 0x1458 <vfprintf+0x3ca>
    1176:	20 64       	ori	r18, 0x40	; 64
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <vfprintf+0xf8>
    117a:	8c 36       	cpi	r24, 0x6C	; 108
    117c:	11 f4       	brne	.+4      	; 0x1182 <vfprintf+0xf4>
    117e:	20 68       	ori	r18, 0x80	; 128
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <vfprintf+0xf8>
    1182:	88 36       	cpi	r24, 0x68	; 104
    1184:	41 f4       	brne	.+16     	; 0x1196 <vfprintf+0x108>
    1186:	f6 01       	movw	r30, r12
    1188:	93 fd       	sbrc	r25, 3
    118a:	85 91       	lpm	r24, Z+
    118c:	93 ff       	sbrs	r25, 3
    118e:	81 91       	ld	r24, Z+
    1190:	6f 01       	movw	r12, r30
    1192:	81 11       	cpse	r24, r1
    1194:	c0 cf       	rjmp	.-128    	; 0x1116 <vfprintf+0x88>
    1196:	98 2f       	mov	r25, r24
    1198:	95 54       	subi	r25, 0x45	; 69
    119a:	93 30       	cpi	r25, 0x03	; 3
    119c:	18 f0       	brcs	.+6      	; 0x11a4 <vfprintf+0x116>
    119e:	90 52       	subi	r25, 0x20	; 32
    11a0:	93 30       	cpi	r25, 0x03	; 3
    11a2:	28 f4       	brcc	.+10     	; 0x11ae <vfprintf+0x120>
    11a4:	0c 5f       	subi	r16, 0xFC	; 252
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	ff e3       	ldi	r31, 0x3F	; 63
    11aa:	f9 83       	std	Y+1, r31	; 0x01
    11ac:	0d c0       	rjmp	.+26     	; 0x11c8 <vfprintf+0x13a>
    11ae:	83 36       	cpi	r24, 0x63	; 99
    11b0:	31 f0       	breq	.+12     	; 0x11be <vfprintf+0x130>
    11b2:	83 37       	cpi	r24, 0x73	; 115
    11b4:	71 f0       	breq	.+28     	; 0x11d2 <vfprintf+0x144>
    11b6:	83 35       	cpi	r24, 0x53	; 83
    11b8:	09 f0       	breq	.+2      	; 0x11bc <vfprintf+0x12e>
    11ba:	5e c0       	rjmp	.+188    	; 0x1278 <vfprintf+0x1ea>
    11bc:	23 c0       	rjmp	.+70     	; 0x1204 <vfprintf+0x176>
    11be:	f8 01       	movw	r30, r16
    11c0:	80 81       	ld	r24, Z
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	0e 5f       	subi	r16, 0xFE	; 254
    11c6:	1f 4f       	sbci	r17, 0xFF	; 255
    11c8:	44 24       	eor	r4, r4
    11ca:	43 94       	inc	r4
    11cc:	51 2c       	mov	r5, r1
    11ce:	54 01       	movw	r10, r8
    11d0:	15 c0       	rjmp	.+42     	; 0x11fc <vfprintf+0x16e>
    11d2:	38 01       	movw	r6, r16
    11d4:	f2 e0       	ldi	r31, 0x02	; 2
    11d6:	6f 0e       	add	r6, r31
    11d8:	71 1c       	adc	r7, r1
    11da:	f8 01       	movw	r30, r16
    11dc:	a0 80       	ld	r10, Z
    11de:	b1 80       	ldd	r11, Z+1	; 0x01
    11e0:	26 ff       	sbrs	r18, 6
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <vfprintf+0x15c>
    11e4:	65 2d       	mov	r22, r5
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <vfprintf+0x160>
    11ea:	6f ef       	ldi	r22, 0xFF	; 255
    11ec:	7f ef       	ldi	r23, 0xFF	; 255
    11ee:	c5 01       	movw	r24, r10
    11f0:	2c 87       	std	Y+12, r18	; 0x0c
    11f2:	0e 94 57 0a 	call	0x14ae	; 0x14ae <strnlen>
    11f6:	2c 01       	movw	r4, r24
    11f8:	83 01       	movw	r16, r6
    11fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    11fc:	6f e7       	ldi	r22, 0x7F	; 127
    11fe:	26 2e       	mov	r2, r22
    1200:	22 22       	and	r2, r18
    1202:	18 c0       	rjmp	.+48     	; 0x1234 <vfprintf+0x1a6>
    1204:	38 01       	movw	r6, r16
    1206:	f2 e0       	ldi	r31, 0x02	; 2
    1208:	6f 0e       	add	r6, r31
    120a:	71 1c       	adc	r7, r1
    120c:	f8 01       	movw	r30, r16
    120e:	a0 80       	ld	r10, Z
    1210:	b1 80       	ldd	r11, Z+1	; 0x01
    1212:	26 ff       	sbrs	r18, 6
    1214:	03 c0       	rjmp	.+6      	; 0x121c <vfprintf+0x18e>
    1216:	65 2d       	mov	r22, r5
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <vfprintf+0x192>
    121c:	6f ef       	ldi	r22, 0xFF	; 255
    121e:	7f ef       	ldi	r23, 0xFF	; 255
    1220:	c5 01       	movw	r24, r10
    1222:	2c 87       	std	Y+12, r18	; 0x0c
    1224:	0e 94 4c 0a 	call	0x1498	; 0x1498 <strnlen_P>
    1228:	2c 01       	movw	r4, r24
    122a:	2c 85       	ldd	r18, Y+12	; 0x0c
    122c:	50 e8       	ldi	r21, 0x80	; 128
    122e:	25 2e       	mov	r2, r21
    1230:	22 2a       	or	r2, r18
    1232:	83 01       	movw	r16, r6
    1234:	23 fc       	sbrc	r2, 3
    1236:	1c c0       	rjmp	.+56     	; 0x1270 <vfprintf+0x1e2>
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <vfprintf+0x1b8>
    123a:	b7 01       	movw	r22, r14
    123c:	80 e2       	ldi	r24, 0x20	; 32
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <fputc>
    1244:	3a 94       	dec	r3
    1246:	83 2d       	mov	r24, r3
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	48 16       	cp	r4, r24
    124c:	59 06       	cpc	r5, r25
    124e:	a8 f3       	brcs	.-22     	; 0x123a <vfprintf+0x1ac>
    1250:	0f c0       	rjmp	.+30     	; 0x1270 <vfprintf+0x1e2>
    1252:	f5 01       	movw	r30, r10
    1254:	27 fc       	sbrc	r2, 7
    1256:	85 91       	lpm	r24, Z+
    1258:	27 fe       	sbrs	r2, 7
    125a:	81 91       	ld	r24, Z+
    125c:	5f 01       	movw	r10, r30
    125e:	b7 01       	movw	r22, r14
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <fputc>
    1266:	31 10       	cpse	r3, r1
    1268:	3a 94       	dec	r3
    126a:	f1 e0       	ldi	r31, 0x01	; 1
    126c:	4f 1a       	sub	r4, r31
    126e:	51 08       	sbc	r5, r1
    1270:	41 14       	cp	r4, r1
    1272:	51 04       	cpc	r5, r1
    1274:	71 f7       	brne	.-36     	; 0x1252 <vfprintf+0x1c4>
    1276:	ed c0       	rjmp	.+474    	; 0x1452 <vfprintf+0x3c4>
    1278:	84 36       	cpi	r24, 0x64	; 100
    127a:	11 f0       	breq	.+4      	; 0x1280 <vfprintf+0x1f2>
    127c:	89 36       	cpi	r24, 0x69	; 105
    127e:	41 f5       	brne	.+80     	; 0x12d0 <vfprintf+0x242>
    1280:	f8 01       	movw	r30, r16
    1282:	27 ff       	sbrs	r18, 7
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <vfprintf+0x206>
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	0c 5f       	subi	r16, 0xFC	; 252
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <vfprintf+0x216>
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	88 27       	eor	r24, r24
    129a:	77 fd       	sbrc	r23, 7
    129c:	80 95       	com	r24
    129e:	98 2f       	mov	r25, r24
    12a0:	0e 5f       	subi	r16, 0xFE	; 254
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
    12a4:	4f e6       	ldi	r20, 0x6F	; 111
    12a6:	b4 2e       	mov	r11, r20
    12a8:	b2 22       	and	r11, r18
    12aa:	97 ff       	sbrs	r25, 7
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <vfprintf+0x232>
    12ae:	90 95       	com	r25
    12b0:	80 95       	com	r24
    12b2:	70 95       	com	r23
    12b4:	61 95       	neg	r22
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	f0 e8       	ldi	r31, 0x80	; 128
    12be:	bf 2a       	or	r11, r31
    12c0:	2a e0       	ldi	r18, 0x0A	; 10
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	a4 01       	movw	r20, r8
    12c6:	0e 94 8e 0a 	call	0x151c	; 0x151c <__ultoa_invert>
    12ca:	a8 2e       	mov	r10, r24
    12cc:	a8 18       	sub	r10, r8
    12ce:	43 c0       	rjmp	.+134    	; 0x1356 <vfprintf+0x2c8>
    12d0:	85 37       	cpi	r24, 0x75	; 117
    12d2:	31 f4       	brne	.+12     	; 0x12e0 <vfprintf+0x252>
    12d4:	3f ee       	ldi	r19, 0xEF	; 239
    12d6:	b3 2e       	mov	r11, r19
    12d8:	b2 22       	and	r11, r18
    12da:	2a e0       	ldi	r18, 0x0A	; 10
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	24 c0       	rjmp	.+72     	; 0x1328 <vfprintf+0x29a>
    12e0:	99 ef       	ldi	r25, 0xF9	; 249
    12e2:	b9 2e       	mov	r11, r25
    12e4:	b2 22       	and	r11, r18
    12e6:	8f 36       	cpi	r24, 0x6F	; 111
    12e8:	b9 f0       	breq	.+46     	; 0x1318 <vfprintf+0x28a>
    12ea:	20 f4       	brcc	.+8      	; 0x12f4 <vfprintf+0x266>
    12ec:	88 35       	cpi	r24, 0x58	; 88
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <vfprintf+0x264>
    12f0:	b3 c0       	rjmp	.+358    	; 0x1458 <vfprintf+0x3ca>
    12f2:	0d c0       	rjmp	.+26     	; 0x130e <vfprintf+0x280>
    12f4:	80 37       	cpi	r24, 0x70	; 112
    12f6:	21 f0       	breq	.+8      	; 0x1300 <vfprintf+0x272>
    12f8:	88 37       	cpi	r24, 0x78	; 120
    12fa:	09 f0       	breq	.+2      	; 0x12fe <vfprintf+0x270>
    12fc:	ad c0       	rjmp	.+346    	; 0x1458 <vfprintf+0x3ca>
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <vfprintf+0x276>
    1300:	20 e1       	ldi	r18, 0x10	; 16
    1302:	b2 2a       	or	r11, r18
    1304:	b4 fe       	sbrs	r11, 4
    1306:	0b c0       	rjmp	.+22     	; 0x131e <vfprintf+0x290>
    1308:	84 e0       	ldi	r24, 0x04	; 4
    130a:	b8 2a       	or	r11, r24
    130c:	08 c0       	rjmp	.+16     	; 0x131e <vfprintf+0x290>
    130e:	24 ff       	sbrs	r18, 4
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <vfprintf+0x296>
    1312:	e6 e0       	ldi	r30, 0x06	; 6
    1314:	be 2a       	or	r11, r30
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <vfprintf+0x296>
    1318:	28 e0       	ldi	r18, 0x08	; 8
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <vfprintf+0x29a>
    131e:	20 e1       	ldi	r18, 0x10	; 16
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <vfprintf+0x29a>
    1324:	20 e1       	ldi	r18, 0x10	; 16
    1326:	32 e0       	ldi	r19, 0x02	; 2
    1328:	f8 01       	movw	r30, r16
    132a:	b7 fe       	sbrs	r11, 7
    132c:	07 c0       	rjmp	.+14     	; 0x133c <vfprintf+0x2ae>
    132e:	60 81       	ld	r22, Z
    1330:	71 81       	ldd	r23, Z+1	; 0x01
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	93 81       	ldd	r25, Z+3	; 0x03
    1336:	0c 5f       	subi	r16, 0xFC	; 252
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	06 c0       	rjmp	.+12     	; 0x1348 <vfprintf+0x2ba>
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 5f       	subi	r16, 0xFE	; 254
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	a4 01       	movw	r20, r8
    134a:	0e 94 8e 0a 	call	0x151c	; 0x151c <__ultoa_invert>
    134e:	a8 2e       	mov	r10, r24
    1350:	a8 18       	sub	r10, r8
    1352:	ff e7       	ldi	r31, 0x7F	; 127
    1354:	bf 22       	and	r11, r31
    1356:	b6 fe       	sbrs	r11, 6
    1358:	0b c0       	rjmp	.+22     	; 0x1370 <vfprintf+0x2e2>
    135a:	2b 2d       	mov	r18, r11
    135c:	2e 7f       	andi	r18, 0xFE	; 254
    135e:	a5 14       	cp	r10, r5
    1360:	50 f4       	brcc	.+20     	; 0x1376 <vfprintf+0x2e8>
    1362:	b4 fe       	sbrs	r11, 4
    1364:	0a c0       	rjmp	.+20     	; 0x137a <vfprintf+0x2ec>
    1366:	b2 fc       	sbrc	r11, 2
    1368:	08 c0       	rjmp	.+16     	; 0x137a <vfprintf+0x2ec>
    136a:	2b 2d       	mov	r18, r11
    136c:	2e 7e       	andi	r18, 0xEE	; 238
    136e:	05 c0       	rjmp	.+10     	; 0x137a <vfprintf+0x2ec>
    1370:	7a 2c       	mov	r7, r10
    1372:	2b 2d       	mov	r18, r11
    1374:	03 c0       	rjmp	.+6      	; 0x137c <vfprintf+0x2ee>
    1376:	7a 2c       	mov	r7, r10
    1378:	01 c0       	rjmp	.+2      	; 0x137c <vfprintf+0x2ee>
    137a:	75 2c       	mov	r7, r5
    137c:	24 ff       	sbrs	r18, 4
    137e:	0d c0       	rjmp	.+26     	; 0x139a <vfprintf+0x30c>
    1380:	fe 01       	movw	r30, r28
    1382:	ea 0d       	add	r30, r10
    1384:	f1 1d       	adc	r31, r1
    1386:	80 81       	ld	r24, Z
    1388:	80 33       	cpi	r24, 0x30	; 48
    138a:	11 f4       	brne	.+4      	; 0x1390 <vfprintf+0x302>
    138c:	29 7e       	andi	r18, 0xE9	; 233
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <vfprintf+0x314>
    1390:	22 ff       	sbrs	r18, 2
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <vfprintf+0x312>
    1394:	73 94       	inc	r7
    1396:	73 94       	inc	r7
    1398:	04 c0       	rjmp	.+8      	; 0x13a2 <vfprintf+0x314>
    139a:	82 2f       	mov	r24, r18
    139c:	86 78       	andi	r24, 0x86	; 134
    139e:	09 f0       	breq	.+2      	; 0x13a2 <vfprintf+0x314>
    13a0:	73 94       	inc	r7
    13a2:	23 fd       	sbrc	r18, 3
    13a4:	14 c0       	rjmp	.+40     	; 0x13ce <vfprintf+0x340>
    13a6:	20 ff       	sbrs	r18, 0
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <vfprintf+0x33a>
    13aa:	5a 2c       	mov	r5, r10
    13ac:	73 14       	cp	r7, r3
    13ae:	60 f4       	brcc	.+24     	; 0x13c8 <vfprintf+0x33a>
    13b0:	53 0c       	add	r5, r3
    13b2:	57 18       	sub	r5, r7
    13b4:	73 2c       	mov	r7, r3
    13b6:	08 c0       	rjmp	.+16     	; 0x13c8 <vfprintf+0x33a>
    13b8:	b7 01       	movw	r22, r14
    13ba:	80 e2       	ldi	r24, 0x20	; 32
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	2c 87       	std	Y+12, r18	; 0x0c
    13c0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <fputc>
    13c4:	73 94       	inc	r7
    13c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    13c8:	73 14       	cp	r7, r3
    13ca:	b0 f3       	brcs	.-20     	; 0x13b8 <vfprintf+0x32a>
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <vfprintf+0x348>
    13ce:	73 14       	cp	r7, r3
    13d0:	10 f4       	brcc	.+4      	; 0x13d6 <vfprintf+0x348>
    13d2:	37 18       	sub	r3, r7
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <vfprintf+0x34a>
    13d6:	31 2c       	mov	r3, r1
    13d8:	24 ff       	sbrs	r18, 4
    13da:	12 c0       	rjmp	.+36     	; 0x1400 <vfprintf+0x372>
    13dc:	b7 01       	movw	r22, r14
    13de:	80 e3       	ldi	r24, 0x30	; 48
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	2c 87       	std	Y+12, r18	; 0x0c
    13e4:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <fputc>
    13e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ea:	22 ff       	sbrs	r18, 2
    13ec:	1e c0       	rjmp	.+60     	; 0x142a <vfprintf+0x39c>
    13ee:	21 ff       	sbrs	r18, 1
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <vfprintf+0x36a>
    13f2:	88 e5       	ldi	r24, 0x58	; 88
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <vfprintf+0x36e>
    13f8:	88 e7       	ldi	r24, 0x78	; 120
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	b7 01       	movw	r22, r14
    13fe:	0c c0       	rjmp	.+24     	; 0x1418 <vfprintf+0x38a>
    1400:	82 2f       	mov	r24, r18
    1402:	86 78       	andi	r24, 0x86	; 134
    1404:	91 f0       	breq	.+36     	; 0x142a <vfprintf+0x39c>
    1406:	21 fd       	sbrc	r18, 1
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0x380>
    140a:	80 e2       	ldi	r24, 0x20	; 32
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <vfprintf+0x382>
    140e:	8b e2       	ldi	r24, 0x2B	; 43
    1410:	27 fd       	sbrc	r18, 7
    1412:	8d e2       	ldi	r24, 0x2D	; 45
    1414:	b7 01       	movw	r22, r14
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <fputc>
    141c:	06 c0       	rjmp	.+12     	; 0x142a <vfprintf+0x39c>
    141e:	b7 01       	movw	r22, r14
    1420:	80 e3       	ldi	r24, 0x30	; 48
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <fputc>
    1428:	5a 94       	dec	r5
    142a:	a5 14       	cp	r10, r5
    142c:	c0 f3       	brcs	.-16     	; 0x141e <vfprintf+0x390>
    142e:	aa 94       	dec	r10
    1430:	f4 01       	movw	r30, r8
    1432:	ea 0d       	add	r30, r10
    1434:	f1 1d       	adc	r31, r1
    1436:	b7 01       	movw	r22, r14
    1438:	80 81       	ld	r24, Z
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <fputc>
    1440:	a1 10       	cpse	r10, r1
    1442:	f5 cf       	rjmp	.-22     	; 0x142e <vfprintf+0x3a0>
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <vfprintf+0x3c4>
    1446:	b7 01       	movw	r22, r14
    1448:	80 e2       	ldi	r24, 0x20	; 32
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <fputc>
    1450:	3a 94       	dec	r3
    1452:	31 10       	cpse	r3, r1
    1454:	f8 cf       	rjmp	.-16     	; 0x1446 <vfprintf+0x3b8>
    1456:	43 ce       	rjmp	.-890    	; 0x10de <vfprintf+0x50>
    1458:	f7 01       	movw	r30, r14
    145a:	26 81       	ldd	r18, Z+6	; 0x06
    145c:	37 81       	ldd	r19, Z+7	; 0x07
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <vfprintf+0x3d6>
    1460:	2f ef       	ldi	r18, 0xFF	; 255
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	c9 01       	movw	r24, r18
    1466:	2c 96       	adiw	r28, 0x0c	; 12
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	bf 90       	pop	r11
    1484:	af 90       	pop	r10
    1486:	9f 90       	pop	r9
    1488:	8f 90       	pop	r8
    148a:	7f 90       	pop	r7
    148c:	6f 90       	pop	r6
    148e:	5f 90       	pop	r5
    1490:	4f 90       	pop	r4
    1492:	3f 90       	pop	r3
    1494:	2f 90       	pop	r2
    1496:	08 95       	ret

00001498 <strnlen_P>:
    1498:	fc 01       	movw	r30, r24
    149a:	05 90       	lpm	r0, Z+
    149c:	61 50       	subi	r22, 0x01	; 1
    149e:	70 40       	sbci	r23, 0x00	; 0
    14a0:	01 10       	cpse	r0, r1
    14a2:	d8 f7       	brcc	.-10     	; 0x149a <strnlen_P+0x2>
    14a4:	80 95       	com	r24
    14a6:	90 95       	com	r25
    14a8:	8e 0f       	add	r24, r30
    14aa:	9f 1f       	adc	r25, r31
    14ac:	08 95       	ret

000014ae <strnlen>:
    14ae:	fc 01       	movw	r30, r24
    14b0:	61 50       	subi	r22, 0x01	; 1
    14b2:	70 40       	sbci	r23, 0x00	; 0
    14b4:	01 90       	ld	r0, Z+
    14b6:	01 10       	cpse	r0, r1
    14b8:	d8 f7       	brcc	.-10     	; 0x14b0 <strnlen+0x2>
    14ba:	80 95       	com	r24
    14bc:	90 95       	com	r25
    14be:	8e 0f       	add	r24, r30
    14c0:	9f 1f       	adc	r25, r31
    14c2:	08 95       	ret

000014c4 <fputc>:
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	8c 01       	movw	r16, r24
    14ce:	eb 01       	movw	r28, r22
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	81 fd       	sbrc	r24, 1
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <fputc+0x18>
    14d6:	0f ef       	ldi	r16, 0xFF	; 255
    14d8:	1f ef       	ldi	r17, 0xFF	; 255
    14da:	1a c0       	rjmp	.+52     	; 0x1510 <fputc+0x4c>
    14dc:	82 ff       	sbrs	r24, 2
    14de:	0d c0       	rjmp	.+26     	; 0x14fa <fputc+0x36>
    14e0:	2e 81       	ldd	r18, Y+6	; 0x06
    14e2:	3f 81       	ldd	r19, Y+7	; 0x07
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	28 17       	cp	r18, r24
    14ea:	39 07       	cpc	r19, r25
    14ec:	64 f4       	brge	.+24     	; 0x1506 <fputc+0x42>
    14ee:	e8 81       	ld	r30, Y
    14f0:	f9 81       	ldd	r31, Y+1	; 0x01
    14f2:	01 93       	st	Z+, r16
    14f4:	f9 83       	std	Y+1, r31	; 0x01
    14f6:	e8 83       	st	Y, r30
    14f8:	06 c0       	rjmp	.+12     	; 0x1506 <fputc+0x42>
    14fa:	e8 85       	ldd	r30, Y+8	; 0x08
    14fc:	f9 85       	ldd	r31, Y+9	; 0x09
    14fe:	80 2f       	mov	r24, r16
    1500:	09 95       	icall
    1502:	89 2b       	or	r24, r25
    1504:	41 f7       	brne	.-48     	; 0x14d6 <fputc+0x12>
    1506:	8e 81       	ldd	r24, Y+6	; 0x06
    1508:	9f 81       	ldd	r25, Y+7	; 0x07
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	9f 83       	std	Y+7, r25	; 0x07
    150e:	8e 83       	std	Y+6, r24	; 0x06
    1510:	c8 01       	movw	r24, r16
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	08 95       	ret

0000151c <__ultoa_invert>:
    151c:	fa 01       	movw	r30, r20
    151e:	aa 27       	eor	r26, r26
    1520:	28 30       	cpi	r18, 0x08	; 8
    1522:	51 f1       	breq	.+84     	; 0x1578 <__ultoa_invert+0x5c>
    1524:	20 31       	cpi	r18, 0x10	; 16
    1526:	81 f1       	breq	.+96     	; 0x1588 <__ultoa_invert+0x6c>
    1528:	e8 94       	clt
    152a:	6f 93       	push	r22
    152c:	6e 7f       	andi	r22, 0xFE	; 254
    152e:	6e 5f       	subi	r22, 0xFE	; 254
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
    1532:	8f 4f       	sbci	r24, 0xFF	; 255
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	af 4f       	sbci	r26, 0xFF	; 255
    1538:	b1 e0       	ldi	r27, 0x01	; 1
    153a:	3e d0       	rcall	.+124    	; 0x15b8 <__ultoa_invert+0x9c>
    153c:	b4 e0       	ldi	r27, 0x04	; 4
    153e:	3c d0       	rcall	.+120    	; 0x15b8 <__ultoa_invert+0x9c>
    1540:	67 0f       	add	r22, r23
    1542:	78 1f       	adc	r23, r24
    1544:	89 1f       	adc	r24, r25
    1546:	9a 1f       	adc	r25, r26
    1548:	a1 1d       	adc	r26, r1
    154a:	68 0f       	add	r22, r24
    154c:	79 1f       	adc	r23, r25
    154e:	8a 1f       	adc	r24, r26
    1550:	91 1d       	adc	r25, r1
    1552:	a1 1d       	adc	r26, r1
    1554:	6a 0f       	add	r22, r26
    1556:	71 1d       	adc	r23, r1
    1558:	81 1d       	adc	r24, r1
    155a:	91 1d       	adc	r25, r1
    155c:	a1 1d       	adc	r26, r1
    155e:	20 d0       	rcall	.+64     	; 0x15a0 <__ultoa_invert+0x84>
    1560:	09 f4       	brne	.+2      	; 0x1564 <__ultoa_invert+0x48>
    1562:	68 94       	set
    1564:	3f 91       	pop	r19
    1566:	2a e0       	ldi	r18, 0x0A	; 10
    1568:	26 9f       	mul	r18, r22
    156a:	11 24       	eor	r1, r1
    156c:	30 19       	sub	r19, r0
    156e:	30 5d       	subi	r19, 0xD0	; 208
    1570:	31 93       	st	Z+, r19
    1572:	de f6       	brtc	.-74     	; 0x152a <__ultoa_invert+0xe>
    1574:	cf 01       	movw	r24, r30
    1576:	08 95       	ret
    1578:	46 2f       	mov	r20, r22
    157a:	47 70       	andi	r20, 0x07	; 7
    157c:	40 5d       	subi	r20, 0xD0	; 208
    157e:	41 93       	st	Z+, r20
    1580:	b3 e0       	ldi	r27, 0x03	; 3
    1582:	0f d0       	rcall	.+30     	; 0x15a2 <__ultoa_invert+0x86>
    1584:	c9 f7       	brne	.-14     	; 0x1578 <__ultoa_invert+0x5c>
    1586:	f6 cf       	rjmp	.-20     	; 0x1574 <__ultoa_invert+0x58>
    1588:	46 2f       	mov	r20, r22
    158a:	4f 70       	andi	r20, 0x0F	; 15
    158c:	40 5d       	subi	r20, 0xD0	; 208
    158e:	4a 33       	cpi	r20, 0x3A	; 58
    1590:	18 f0       	brcs	.+6      	; 0x1598 <__ultoa_invert+0x7c>
    1592:	49 5d       	subi	r20, 0xD9	; 217
    1594:	31 fd       	sbrc	r19, 1
    1596:	40 52       	subi	r20, 0x20	; 32
    1598:	41 93       	st	Z+, r20
    159a:	02 d0       	rcall	.+4      	; 0x15a0 <__ultoa_invert+0x84>
    159c:	a9 f7       	brne	.-22     	; 0x1588 <__ultoa_invert+0x6c>
    159e:	ea cf       	rjmp	.-44     	; 0x1574 <__ultoa_invert+0x58>
    15a0:	b4 e0       	ldi	r27, 0x04	; 4
    15a2:	a6 95       	lsr	r26
    15a4:	97 95       	ror	r25
    15a6:	87 95       	ror	r24
    15a8:	77 95       	ror	r23
    15aa:	67 95       	ror	r22
    15ac:	ba 95       	dec	r27
    15ae:	c9 f7       	brne	.-14     	; 0x15a2 <__ultoa_invert+0x86>
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	61 05       	cpc	r22, r1
    15b4:	71 05       	cpc	r23, r1
    15b6:	08 95       	ret
    15b8:	9b 01       	movw	r18, r22
    15ba:	ac 01       	movw	r20, r24
    15bc:	0a 2e       	mov	r0, r26
    15be:	06 94       	lsr	r0
    15c0:	57 95       	ror	r21
    15c2:	47 95       	ror	r20
    15c4:	37 95       	ror	r19
    15c6:	27 95       	ror	r18
    15c8:	ba 95       	dec	r27
    15ca:	c9 f7       	brne	.-14     	; 0x15be <__ultoa_invert+0xa2>
    15cc:	62 0f       	add	r22, r18
    15ce:	73 1f       	adc	r23, r19
    15d0:	84 1f       	adc	r24, r20
    15d2:	95 1f       	adc	r25, r21
    15d4:	a0 1d       	adc	r26, r0
    15d6:	08 95       	ret

000015d8 <_exit>:
    15d8:	f8 94       	cli

000015da <__stop_program>:
    15da:	ff cf       	rjmp	.-2      	; 0x15da <__stop_program>
